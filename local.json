[{"model": "contenttypes.contenttype", "pk": 1, "fields": {"app_label": "auth", "model": "permission"}}, {"model": "contenttypes.contenttype", "pk": 2, "fields": {"app_label": "auth", "model": "group"}}, {"model": "contenttypes.contenttype", "pk": 3, "fields": {"app_label": "contenttypes", "model": "contenttype"}}, {"model": "contenttypes.contenttype", "pk": 4, "fields": {"app_label": "sessions", "model": "session"}}, {"model": "contenttypes.contenttype", "pk": 5, "fields": {"app_label": "account", "model": "user"}}, {"model": "contenttypes.contenttype", "pk": 6, "fields": {"app_label": "account", "model": "userprofile"}}, {"model": "contenttypes.contenttype", "pk": 7, "fields": {"app_label": "announcement", "model": "announcement"}}, {"model": "contenttypes.contenttype", "pk": 8, "fields": {"app_label": "group", "model": "group"}}, {"model": "contenttypes.contenttype", "pk": 9, "fields": {"app_label": "group", "model": "usergrouprelation"}}, {"model": "contenttypes.contenttype", "pk": 10, "fields": {"app_label": "group", "model": "admingrouprelation"}}, {"model": "contenttypes.contenttype", "pk": 11, "fields": {"app_label": "group", "model": "joingrouprequest"}}, {"model": "contenttypes.contenttype", "pk": 12, "fields": {"app_label": "problem", "model": "problemtag"}}, {"model": "contenttypes.contenttype", "pk": 13, "fields": {"app_label": "problem", "model": "problem"}}, {"model": "contenttypes.contenttype", "pk": 14, "fields": {"app_label": "submission", "model": "submission"}}, {"model": "contenttypes.contenttype", "pk": 15, "fields": {"app_label": "contest", "model": "contest"}}, {"model": "contenttypes.contenttype", "pk": 16, "fields": {"app_label": "contest", "model": "contestproblem"}}, {"model": "contenttypes.contenttype", "pk": 17, "fields": {"app_label": "contest", "model": "contestrank"}}, {"model": "contenttypes.contenttype", "pk": 18, "fields": {"app_label": "judge_dispatcher", "model": "judgeserver"}}, {"model": "contenttypes.contenttype", "pk": 19, "fields": {"app_label": "judge_dispatcher", "model": "judgewaitingqueue"}}, {"model": "sessions.session", "pk": "009pru7khlaxjt2133t1we06zt8qbgue", "fields": {"session_data": "MzUwMzYzNjk5Y2Q0ZGUyOGViZjQyMjk1NDk5NjBiNzllMjc4NjZjMjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk3NTg3NzYuNzYzMTAyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiVGtyaCJ9", "expire_date": "2017-03-31T13:51:56.771Z"}}, {"model": "sessions.session", "pk": "048e91ekv6ahv6rzstdgrpfzexo0frvs", "fields": {"session_data": "NjdiZWUzMjVmNzUwMTI5ZTI2ODJjMjE5NzE5ZWFjYTNiZDA4NTRlMDp7Il9hdXRoX3VzZXJfaGFzaCI6ImI0MzY3MDNhMTcyYmVhYzk1OTZiN2U4MDk2ZTAxZDVkY2VmODY4YmIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTgifQ==", "expire_date": "2017-05-12T03:38:24.098Z"}}, {"model": "sessions.session", "pk": "08w6wxj3vdh0n5gi5byjcenvq918dt7j", "fields": {"session_data": "MTFlZTkzMWRjZDZhYzcyMWMyZWY2ZTY2NDA2OTUzN2Q5Y2FlYzhjYTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxODY0MzUuNjM4OTI5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZUJnQyJ9", "expire_date": "2017-04-05T12:39:35.644Z"}}, {"model": "sessions.session", "pk": "0905y5eiqccdikpakkuslarhajtvz49b", "fields": {"session_data": "MGIyNGU0OGIyYTM3MTU0MjdjY2IyN2VhODZiNjc0ZjEyZmQwY2Q5NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjUwYWIwNmYwY2I2ZjYxZmUwOWQzYjhhNTI3OTcxNGI4ZjkwMGZlNjAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyODQifQ==", "expire_date": "2017-05-21T08:04:12.200Z"}}, {"model": "sessions.session", "pk": "09rzaqt76boabiig61axjg6ibitmrbh8", "fields": {"session_data": "MjcyMjUwMjdjODE0YTk5YTg5YmE4OGFhNWRlMGY5YjJmMjJlNjM1ODp7Imxhc3RfYWN0aXZpdHkiOjE0ODk4MjgyOTguNDU3MTU5LCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-04-01T09:11:38.458Z"}}, {"model": "sessions.session", "pk": "0a113eofhtnm8zo9uwwf7x4er929uofa", "fields": {"session_data": "ZTZjMmMwODllYjBhMWRiZTUzMzQ0MmVkNGE5NTA3ZWFmNDFjYThhZDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQwMzgxNzUuMTQ4OTUyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRmVLRSJ9", "expire_date": "2017-05-20T02:35:15.160Z"}}, {"model": "sessions.session", "pk": "0by5psuz8er0x7x8yq843no54r5cbrhh", "fields": {"session_data": "MDYyZWU2ZGI2NTJiYTA3ZTBiMDVmYWM1ZDdmNzgzOTcyMzc2ODY2NDp7Il9hdXRoX3VzZXJfaGFzaCI6ImJkY2Q0NmY2YWE0ZTg2NGJjYzhmZGQwZDRjNGFlMWI3ZDU5Nzk4ZGYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMTYifQ==", "expire_date": "2017-05-21T03:57:42.481Z"}}, {"model": "sessions.session", "pk": "0dl7f71febajkyzb578zoj8yzciapcpp", "fields": {"session_data": "YzYwZjZmNDc1NDg1ZWQ4ZWY4ZmYxNjNiZDQxMDA2NDRlNWJmZDQ3ZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjY5NDJkOTE4ZTliMTFjYTliOTQ1NGZjMjg1MDFlNWU4MjZjZGYwZWUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNjIifQ==", "expire_date": "2017-05-28T05:47:52.677Z"}}, {"model": "sessions.session", "pk": "0dqb65pl5mrp97kn3fmqpeqjlmdii9xo", "fields": {"session_data": "MWM1OWE1ZWFkZDAwY2UyMTVmNmZiMDZmZTYxYjRjZGMwMDkyN2JhNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjIwYjNjYjUyMmUyYzJlZDJjYWFlNDRkMTE2MzljOTE5YmM1ODFmNWYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjgifQ==", "expire_date": "2017-05-19T13:55:11.427Z"}}, {"model": "sessions.session", "pk": "0dwpwfd9f874hgb9x11ydfbik85ggs4c", "fields": {"session_data": "NDgzZDg2MzcxZGI4NTdmYzU4NTQ0MTg1MjUzNzRkNjRmNjljMDRlMzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQwMjAwOTcuNTc0NzI1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiWE4zRSJ9", "expire_date": "2017-05-19T21:33:57.594Z"}}, {"model": "sessions.session", "pk": "0fbyzcqxamfpwjr5q22kj6iw3dyxriij", "fields": {"session_data": "MzlkN2EyOTFkYzIyNGFjYWU0MzZlMWExZTQwOThkNTQ2MThlNzkwMzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDE1NDUuODEyNjIxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiNXJwcSJ9", "expire_date": "2017-03-30T05:18:05.819Z"}}, {"model": "sessions.session", "pk": "0get8i2kqvfq3iec50ou0q203u7jzeui", "fields": {"session_data": "OTZlM2JlZjYyYTdkNzllODI4OTMwOTc3NGI3M2U3NTQzN2MwOGJkYzp7Il9hdXRoX3VzZXJfaGFzaCI6IjljNTcwNzg0Y2QxYjQwNzY2YTAxYmQ1MzE4MGQ4NGM3YzIxMjE2MWIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjYifQ==", "expire_date": "2017-05-21T09:07:13.523Z"}}, {"model": "sessions.session", "pk": "0hscym7wukdlmfrwar78zgwbyj1b3hbd", "fields": {"session_data": "ODZiMzdhMmNkZjlkZTllMGZhNGRjNTAzZjg0ZDY1MDQ2OTUxYWMwYjp7Il9hdXRoX3VzZXJfaGFzaCI6IjM2MmVkZWZlZmEzNTgxMjMyMGQxYWE2Njk3YTJhYTA5NjhjZmY2MTIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMjMifQ==", "expire_date": "2017-05-01T12:45:06.785Z"}}, {"model": "sessions.session", "pk": "0iya66gi9kw4esuvaztaw1mv2dnal3fw", "fields": {"session_data": "OWQ4NWNlYjQwM2FiNWEyNzM4NDJmNWY5YTcwYjIyZjA5OTE2ZjA4Njp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDExOTAuODMyOTk3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRk9adiJ9", "expire_date": "2017-03-30T05:12:10.843Z"}}, {"model": "sessions.session", "pk": "0j6uvtd4bbobgfy2v3hip8fvgs5kj4vq", "fields": {"session_data": "MTAzODgwMThhMTdlMzkwMzZmNjk3NTg2MzhkN2M3NTNlZWEyZDliMTp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiODFjNDQxYTEyZGYzMjU0NDhhZjBjMTYwYzZhOGI2ODE5MzE5YzI4YiIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTIzNDg4NjcuNTUwODY4LCJfYXV0aF91c2VyX2lkIjoiNjgiLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoibTRCdiJ9", "expire_date": "2017-04-30T13:22:32.998Z"}}, {"model": "sessions.session", "pk": "0judn2bn4etc5k2ol7sewgotl5pz39z7", "fields": {"session_data": "ZDcyOTBlOWFkYmM5NDM0ZTc1OGI3ODE3ZDc1MWRiYTZmMDY5N2Q0MDp7Il9hdXRoX3VzZXJfaGFzaCI6Ijc2ZGU0NzYwNjZkYjVjNDE3ZDNiOTMzYjZlZTBlNDQ5YmM5N2Y3YmIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNDMifQ==", "expire_date": "2017-05-21T01:49:46.841Z"}}, {"model": "sessions.session", "pk": "0m7fy5y489m3rtergr7hf2hd2snxrliq", "fields": {"session_data": "ZDRlYjAyY2U0MjBiOWZjNmQyMGJlMjhlMzA1M2Y4NzY3MjIzNzZhYjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTA5NjEzNzMuMjM4NjYsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiI1OXNXIn0=", "expire_date": "2017-04-14T11:55:13.248Z"}}, {"model": "sessions.session", "pk": "0muwidt56vywpblo6pom7y2y8uoddikq", "fields": {"session_data": "YzlmNDZjNzE4NWUzNGRiYmJkZWMzN2JiNDQwMWZmMTAzMzRlYzU1Yjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQxMzg3NjYuMTM1OTM0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiR3RNRSJ9", "expire_date": "2017-05-21T06:31:46.146Z"}}, {"model": "sessions.session", "pk": "0nwj4slg3mjbsq5kedej7x5d1o5veda0", "fields": {"session_data": "ZWY2MjEyMzMzNjcyYzRiMGUzYjgxMzgzMjFjNTA3M2NjNzcyNGE2MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImY3MDZiZGMyNWU5ODA1OGFhZjkyOTc1ZjIxMWNlMWMzZmI1Yzc3YTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNjMifQ==", "expire_date": "2017-05-21T04:57:07.903Z"}}, {"model": "sessions.session", "pk": "0o3g1jwd4d4hj2exsd3x3ukhe6cpctif", "fields": {"session_data": "OGQxOWVhMjA5ZGU2MmQyZGU5ZDA3ZjAzMjA1ZTlkYjA0ODVmNTZmZTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTE0NzYzODIuMDQwNzQ3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiWDZ4USJ9", "expire_date": "2017-04-20T10:58:42.059Z"}}, {"model": "sessions.session", "pk": "0qbk81xazkp4gsctbdaf5khhsmp0gqlo", "fields": {"session_data": "NGI3NjcxNzQ5MDI0MjNhNzBhM2I4YTVhYjk0NGRlNDExZDQyOWFjOTp7Il9hdXRoX3VzZXJfaGFzaCI6IjEyZGQ2ZTYxNDAwODdmMzdjYTA5YzMwMTZhNTA4NmM1ZTk2NzJlOWIiLCJfYXV0aF91c2VyX2lkIjoiNzYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-04-01T09:06:36.963Z"}}, {"model": "sessions.session", "pk": "0qjjvwbnonim903mv3qiq715u6hcrkt5", "fields": {"session_data": "Zjk5ZTU0ZTc3Mzg0NzZjZDRmMWJhZmRjZTI4ZGU3ZTk4ZGE4OWIyODp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiZDc1N2ZmYmQ1ODg1MzBlM2EyYmRmYjhiNmI3NjllYTU3YmU2OWJmNiIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQxMjgzODkuMzQyNzI5LCJfYXV0aF91c2VyX2lkIjoiMjQ0IiwiX2RqYW5nb19jYXB0Y2hhX2tleSI6Ik5CZnEifQ==", "expire_date": "2017-05-21T03:39:29.267Z"}}, {"model": "sessions.session", "pk": "0rjm66wsv4cbp0pzcy2wfzct5rp35jfz", "fields": {"session_data": "MDJjZTQ4ZTZjYzhmOTRlZjViYzM1ZGI3NjNmNDY4YmFjOGY2NGI4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImE1YzQ5YTAxYzEyN2M3ZGZlM2FkZDEzMzE3ZDgwMzc0OGM5ZTYzMTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMCJ9", "expire_date": "2017-03-31T05:32:03.861Z"}}, {"model": "sessions.session", "pk": "0tkh01o1v04pilxb8dakn0u9fjwway05", "fields": {"session_data": "MjI1ZDIzOTJlYmE5YTg5MzZiZGI4NTdlYjI1YzBlNWI4MTM4MjRiMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjUzM2I2YmMyYmFlMzk1NzEzMWZmYjQ4NjkyZDc0MjkwMmJkZDEyZDEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzODkifQ==", "expire_date": "2017-05-21T04:49:17.957Z"}}, {"model": "sessions.session", "pk": "0u3ho2oitpi3hi2h8c30799i7ae96k06", "fields": {"session_data": "ZGIzNmE0OGIzYTY5ODIwYzlhYzRkYWExZmQyOWIzMmNlODJlOGU1NTp7Imxhc3RfYWN0aXZpdHkiOjE0OTIxMzQyMjMuNTMxMzE2LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-04-28T01:43:43.539Z"}}, {"model": "sessions.session", "pk": "0wx72zgcw6jp6j7dm2z0jt3kanssyycx", "fields": {"session_data": "NzA1YjQ1NTliNWE2MTY1MmNjM2EzNTgxM2VjZTlkOTc3MDVmZDE0Mzp7Il9hdXRoX3VzZXJfaGFzaCI6IjI4NWY1NWQ2ODhmMTJjM2Q3YjYxMmZiZmJiNzQ4N2UyYTYxZmRkMTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjEifQ==", "expire_date": "2017-05-16T05:46:16.518Z"}}, {"model": "sessions.session", "pk": "0xd3wewjf976bsx3sjxl4twsv3twb9va", "fields": {"session_data": "YmMxMjQzNjgxNTYxMTE2ZDcwODkxMGYyZjI1NGRjNDc0MjZiOWQ5Nzp7Il9hdXRoX3VzZXJfaGFzaCI6IjZkZTgyYTA5NDgxMDNjMGIwMDA0NjA5Mzg4NjU4MjlkYmRlNmMzNjciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjIifQ==", "expire_date": "2017-05-20T00:17:02.822Z"}}, {"model": "sessions.session", "pk": "0xtoje52ll59yr10rh8l7cw0r9cyqnjn", "fields": {"session_data": "YTRhNGJjODU1ZWNjMmEwOTBlOGJhY2M2YzcyOGNlNjY2MDI5ZDQ1Zjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM4NzExMDUuMTE4NDU4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiT2M0NSJ9", "expire_date": "2017-05-18T04:10:45.129Z"}}, {"model": "sessions.session", "pk": "0yz8wyzs4k3c50beguo08b2i42xl6n4l", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-20T07:41:41.497Z"}}, {"model": "sessions.session", "pk": "0zev160hqkftr1jdxqioue7nc45jznog", "fields": {"session_data": "YjBhZTUwYzVlOTgxY2UwMWYyZGNhYzliYjQ1MDVkMjQ4MjVkN2E4NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjRlODVlODI5NDMxODQwZTBmYjAzNjNhZjA1MmZlZjNiYjNjOWY5NTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4In0=", "expire_date": "2017-03-31T05:40:08.673Z"}}, {"model": "sessions.session", "pk": "11a435bmzmzlqt399rfekzni8lbly8t9", "fields": {"session_data": "Y2U3OWIwYTJkNzdhZTM5MzA4MGMzOWY0YTE3YzY5MGNiMGZjOWY2Zjp7Il9hdXRoX3VzZXJfaGFzaCI6IjllNDY4YWZiMTNjMjAwY2RlOTg3NWU5MDYwMWJjZmJlZmEwNDQzMWMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxOTEifQ==", "expire_date": "2017-05-28T04:09:53.306Z"}}, {"model": "sessions.session", "pk": "11bz63xxh013jepwfzdc679wdrhcih6l", "fields": {"session_data": "OTFhYjkwMzg3MDAzMDNjYzkyMjZkZjNkY2IwNzIxMDcwZTI3NGU4NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjdjMjcxMmI4M2VhYzRiODRkZjJhZWFkOTQ3ZWVlMjgxY2I3NzY2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4MCJ9", "expire_date": "2017-04-01T07:48:23.979Z"}}, {"model": "sessions.session", "pk": "12ee955lnvrtmjx8qpqstxqtb7lhhodd", "fields": {"session_data": "YjJkN2NmMjZiNTFhZDYxYjIyOTMyM2I3M2RjYWFkM2I1ZWEyYzMwZTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQwODcxNDguNjA1NjI2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiYW5BUSJ9", "expire_date": "2017-05-20T16:11:28.618Z"}}, {"model": "sessions.session", "pk": "137s3mflfret6k6y21h3yj6z89v9f0zv", "fields": {"session_data": "MDJjZTQ4ZTZjYzhmOTRlZjViYzM1ZGI3NjNmNDY4YmFjOGY2NGI4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImE1YzQ5YTAxYzEyN2M3ZGZlM2FkZDEzMzE3ZDgwMzc0OGM5ZTYzMTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMCJ9", "expire_date": "2017-03-18T02:40:46.124Z"}}, {"model": "sessions.session", "pk": "13l31ry6cwu7vcxz47m2t3rmu6dv3t2d", "fields": {"session_data": "NmNlMTM3N2Q5MDVlY2FmMTBmZmI0YmE2OWVjYzAyOGU0OTAxNzFkYzp7Il9hdXRoX3VzZXJfaGFzaCI6ImIzZjRmNDc5MGQxZTcwNzc2MTkyM2MxM2RlNDc5MGZjMGYzYzI5NzIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjYifQ==", "expire_date": "2017-05-19T01:12:49.473Z"}}, {"model": "sessions.session", "pk": "18oid869o3l60s4sftk878qwkmv9iti5", "fields": {"session_data": "NzljYTdlOGM0NjNhMGExMzFkZjcxNGQyOTAwYTY3Mzk3MDE3YTcyNDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDEyMDUuMDg2NTk4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiU052ciJ9", "expire_date": "2017-03-30T05:12:25.092Z"}}, {"model": "sessions.session", "pk": "19l85qq9vtp2wzu2hctwfwcv9wdfyvi1", "fields": {"session_data": "MzI0ZDY2YjRjMjg3Zjk4YjFlMWE2NTk4Yzg2NzVkOWJlNjU4MGE2OTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZkZjA4YTg3YTc4ZTA0YTBiNDk1OTJkYTMwOTU1M2E2OGI4NzA5NzMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxODkifQ==", "expire_date": "2017-05-28T04:03:23.969Z"}}, {"model": "sessions.session", "pk": "1ayechqryexqe8r4hdjetz9g0og5lnli", "fields": {"session_data": "NTQyNTY2YjllYzQ0OTU3NTQ5MjcxYzBhOGVjN2Q2ODczZmNhYWQ2NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjA0YzA4ZThmY2U3OGU0N2I2MjI2OTM3MmQ2YTJhZTE2YzhlYzQxMWYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjkifQ==", "expire_date": "2017-05-19T15:13:57.547Z"}}, {"model": "sessions.session", "pk": "1ci10t7edh39zo6iitnw0f1sa95ies61", "fields": {"session_data": "NDNjOGFmMWM1MmMxNGY3OWFkODlkM2U1ZDE3NWY5OWU4YzU4ODE3Mjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTI2ODU1OTYuMDE4MjcxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiVjhkNiJ9", "expire_date": "2017-05-04T10:52:16.026Z"}}, {"model": "sessions.session", "pk": "1cyyaiyfpdq89opdwm51dih9fhvpyeu9", "fields": {"session_data": "ZjIzMGJkOTFhZTc4YzEzOTQ3NjhhYjVjNzRjY2E1ZjA0OWQ0NTkwMTp7Il9hdXRoX3VzZXJfaGFzaCI6ImE1Y2ZiZjIwN2MxNGQ1ZmExMmQyYmI1YzQwMWEwNTE5MjBiMDJhY2MiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzcifQ==", "expire_date": "2017-05-21T03:56:45.512Z"}}, {"model": "sessions.session", "pk": "1e2gixniateef0lydshj4egodhu1hwcn", "fields": {"session_data": "YThiNDRkZDBhZWQxOTNmN2VkNzZmZDQzOGRlZWRmM2YwMDFmZGI5ZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjMyMDAxMTFkNjE2NjViNDNhOWU4M2I5YzRkODMxOTQ2MjAwZTNiMmYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNTIifQ==", "expire_date": "2017-05-28T03:59:01.578Z"}}, {"model": "sessions.session", "pk": "1e8xmw23dx3xiji4mtrt8s87qthobc1u", "fields": {"session_data": "M2QzNjViNWZhYzkyODE2YmQ1NGNhMmIyNzIzNGE5YjY3ZDRhZmM1ZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjQwYjg5YjFiY2U3ZDlhYjRhMjdiMTIxODgyOTE4YzI5YjBhODE0YzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2MyJ9", "expire_date": "2017-04-01T07:55:32.443Z"}}, {"model": "sessions.session", "pk": "1f203d4lvfj2ar46qa36v6orvx0ovkni", "fields": {"session_data": "Mjc1ZTQ3NTFiYjY1ODgwMzJiNGM2ZjNiMTg5OGI1ZDQ5OTU1YjZkZDp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiNmQ3NDUxZWM1OWQzM2VlZjg0NGRhMmVlYzc1MTE0OWZhZWY4MjJmNCIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQxMjg0OTguMzk0NTI2LCJfYXV0aF91c2VyX2lkIjoiMjY4IiwiX2RqYW5nb19jYXB0Y2hhX2tleSI6IlBjWmsifQ==", "expire_date": "2017-05-21T04:00:08.198Z"}}, {"model": "sessions.session", "pk": "1f8e6kqwn62mijikxdae48nrf26hlmwd", "fields": {"session_data": "MDNiYTM5NjE0MjBiM2I3YzNhMTU4NWQzZGYxYTg2NmI5YzI5YzIwMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjIzNzg2YmQwM2ExNGM3ZDMzOWFkMzgyYmJiNTUxYjQzMzQwMDBiNDEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNzAifQ==", "expire_date": "2017-05-28T07:27:11.179Z"}}, {"model": "sessions.session", "pk": "1fkz2e2uyj6zg4qtnbjb8du230u49m7q", "fields": {"session_data": "MDBmYWM2ZGFhMzdmNDFiMTJjMTI2YjdiOGQ0OWZhZTJiMTZhNWNlZjp7Il9hdXRoX3VzZXJfaGFzaCI6ImI5NjJmNjZiYjExZmJhZGIxZjI4YTQzYTUzMjRmZGU3ODhmMzMyYjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNCJ9", "expire_date": "2017-05-01T06:24:03.252Z"}}, {"model": "sessions.session", "pk": "1fun9yn2qt5ok6jmu3dcej6rqbgu8tk7", "fields": {"session_data": "YmJhMzJlYTE4MTY0Mzg5YzllMmUxODViZjJkNTBjYjE4MjQ5OTQzNzp7Il9hdXRoX3VzZXJfaGFzaCI6ImJiNGM1MzM5OWIwMDU5NmQ1MTU4ZThlNGI5ZDA2ZDc5MzVkYTYxOTUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MDgifQ==", "expire_date": "2017-05-25T04:02:12.001Z"}}, {"model": "sessions.session", "pk": "1gaog5ccbm2td3ienmb8sb6n2cl92w6e", "fields": {"session_data": "MmE3Y2Y5YzlkODljZTg3NDZiZjk4ODQzODA4NDc0NjU3MzA2MjY4MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZhMDY5ZTg0Mzg1NTNhNWI4Zjc4ZTY5NDE1YWQ1MWY3MjJjMmM4MTIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNiJ9", "expire_date": "2017-03-30T06:47:13.927Z"}}, {"model": "sessions.session", "pk": "1hrahk4mm3gste1te6rnfec0pb7ynco1", "fields": {"session_data": "ZTMxZGZmMDBkMWNkZGQzOTNmZjY2YWM2NTQ5MDdmY2FmYWJlMTMzNzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMzNTk4NzYuNzkzMTE3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiTXlkViJ9", "expire_date": "2017-05-12T06:10:16.805Z"}}, {"model": "sessions.session", "pk": "1icsudm14bxwlyrkaoyv2fm7hwuufie4", "fields": {"session_data": "ZDcyOTBlOWFkYmM5NDM0ZTc1OGI3ODE3ZDc1MWRiYTZmMDY5N2Q0MDp7Il9hdXRoX3VzZXJfaGFzaCI6Ijc2ZGU0NzYwNjZkYjVjNDE3ZDNiOTMzYjZlZTBlNDQ5YmM5N2Y3YmIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNDMifQ==", "expire_date": "2017-05-20T06:13:54.130Z"}}, {"model": "sessions.session", "pk": "1jbw6vpx9axu82kc0ceybxq08xug8dxf", "fields": {"session_data": "ZGQwMDNjNDYyMjk5MjFhNzMzNjkzZWJkZGYxNmFlZWNmYTQxMzA4OTp7Il9hdXRoX3VzZXJfaGFzaCI6IjdlMzg2OTU4YzgxYjM2MWU4Njc4ZjE5MThlNWY2ZWE4YzYxYzNjNzkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI3NCJ9", "expire_date": "2017-04-01T09:46:40.299Z"}}, {"model": "sessions.session", "pk": "1k2mx43ye7psyb99dr5oxgt4dsabo3rm", "fields": {"session_data": "YWI1N2FhMTJiMzY4ODM5NTY0ZGU5NGY0YTE5ZjY3NDNhM2QzZTU3Yzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5NzIzOTAuODUyMzE4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiN0NBUCJ9", "expire_date": "2017-05-19T08:18:50.863Z"}}, {"model": "sessions.session", "pk": "1lt3h7zldxoupqfp29hzo1znwm61olex", "fields": {"session_data": "MTFiOGE3NmIxYzU4MTMyMWM1YzU2NjY3OTBmNmE2NjExODIwNWU3YTp7Il9hdXRoX3VzZXJfaGFzaCI6ImRhZWUwMWY2OWFjMjBhNDNiZGJjMzA1NzIxYzQ4MDUxOWI5ZjczZjgiLCJfZGphbmdvX2NhcHRjaGFfZXhwaXJlc190aW1lIjoxNDkwNDQ1MDMyLjM2NzIxNCwiX2F1dGhfdXNlcl9pZCI6IjE1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoidjhPbiJ9", "expire_date": "2017-04-08T12:29:32.373Z"}}, {"model": "sessions.session", "pk": "1od35avb4mzpylhtduqlbfa70ei2sdig", "fields": {"session_data": "ZGMwMDMxNWQzM2YxODFiNzJjODY3ZDE3NTM3YzQ1ZjVkOTI1ODZkZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjM1NGUxZjkwN2FmZGRjZmQ3NTRkYTgxYjE5NTg2NWNhN2Y3ZTMxNjIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDYifQ==", "expire_date": "2017-05-20T10:56:26.303Z"}}, {"model": "sessions.session", "pk": "1ogbu71y1omxae0zbhfl8ac4q5184od7", "fields": {"session_data": "N2E0ZTRkM2IzODJlZDI4YzEwN2VkZGUwY2ZmYzE0MTIzYTQ4YTIwMjp7Il9hdXRoX3VzZXJfaGFzaCI6ImY1YmQ5MTA4NzEyNTliZjE2YmJhMDk4N2NmNmJiZWVlMjAxOTFiZWEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2NCJ9", "expire_date": "2017-04-24T02:21:56.060Z"}}, {"model": "sessions.session", "pk": "1qtvfhcydxp02wouh3qcvvbywd0g9nia", "fields": {"session_data": "ZjYzZjkwYmM4YjM0NmU5MTVhMjMwNWU3NWNhODc0M2RjZDVkMjE5ODp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiNDRmZTcwNGExZDFiY2VkOTEwMjc2ZWM0NDRlMTEwYWZlYjQ2Y2NlYyIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5OTEyMTguMDQ0Njg5LCJfYXV0aF91c2VyX2lkIjoiOCIsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJ6UWJIIn0=", "expire_date": "2017-05-19T13:33:02.239Z"}}, {"model": "sessions.session", "pk": "1r4o3y5hz9d3p3m25tncmu6x1efs0wr1", "fields": {"session_data": "NzExNTY1M2NhZjVlZThlN2FlNTk5ODQwNGIzMzk1OTJlZTM1ZDI1MDp7Il9hdXRoX3VzZXJfaGFzaCI6IjA5N2Q1ODAzNDk3ZTZkZTE2OTk5YmZiYmI2MWZmOTI3YzYwMTdlNTMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTIifQ==", "expire_date": "2017-05-21T03:57:32.670Z"}}, {"model": "sessions.session", "pk": "1rax4t2t576qf02h4grrmxix4cldncwe", "fields": {"session_data": "NDdiM2I0ZjIxNmNmODE5MTAyODJjNWJhMWI1MDBkNjFhZTU5OWQzMzp7Il9hdXRoX3VzZXJfaGFzaCI6ImVkOGM5NjVlYjQ4NGQ0NTI0OTcwZjY2MjhkNGE0ODc3MjUxMmYyMmQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMCJ9", "expire_date": "2017-03-31T05:32:15.090Z"}}, {"model": "sessions.session", "pk": "1rv2ccta6u6i2s0hwtfnd4n956rzqoy3", "fields": {"session_data": "ZmYyNTU1NGJhNjIzMDk4YzYxM2JhYjkwOGEyNGFkOWUzMmRiYTgxNTp7Il9hdXRoX3VzZXJfaGFzaCI6ImVkZDRjMjAzNjJlZTlmMmVlMWI3ODBhMTgyOGJjNjZjMjY5M2VkOTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMTAifQ==", "expire_date": "2017-05-21T04:09:49.724Z"}}, {"model": "sessions.session", "pk": "1smdtfqbku6okvil51mwwvyawmch7qnv", "fields": {"session_data": "OGNjOTMwN2QxZTNkMjNjZDhiNjg1ZDgyNWQxYzVkYjcwMjkwMmM4ZTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk1NTI4NTQuMjEyMTIxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoibWZrUiJ9", "expire_date": "2017-03-29T04:39:54.219Z"}}, {"model": "sessions.session", "pk": "1t83xzscpjxfp63490cpw6uavqnotjyt", "fields": {"session_data": "ODhiNzkwOWM2NzMzOTBhZjhhMjg5ZmU5ZDA1NTM5OGVlMzliNjFlMzp7Il9hdXRoX3VzZXJfaGFzaCI6Ijk1NDQ5ZmZlZDM1YjliMDUwMjVhMzU5ZWJmNTcyNDM4Y2UwMGU2YzciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzMifQ==", "expire_date": "2017-05-12T08:42:29.575Z"}}, {"model": "sessions.session", "pk": "1tkqhii742unoo5qkzdqdwtzpj8occq9", "fields": {"session_data": "MTM5ZGVhM2ZjNjJlMWEwMDFmYjk4ZDg2NzFkMTRiMDU4YjM3NWU0Nzp7Il9hdXRoX3VzZXJfaGFzaCI6IjI1ZTA1YjgwYTBmMWYwNWJjYjc2MTQ3MTFmZTAxOTYwYzU2ZmIxNjkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5MSJ9", "expire_date": "2017-04-03T12:20:44.533Z"}}, {"model": "sessions.session", "pk": "1tp0t1grb4xom3ppem7q4gulsourxq89", "fields": {"session_data": "MDhlYjVmYzVmMjM2NTUzN2ZjZDU4NDFhMmExNzkyYzc2ZGY3ZmVjYzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTA0NTI4MjYuMDg1NTM4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoidUZPRyJ9", "expire_date": "2017-04-08T14:39:26.093Z"}}, {"model": "sessions.session", "pk": "1tz53a4o5xitsj5yqso90sqhq3j3vgkn", "fields": {"session_data": "NGJkMzE0ZDJhYjRmMDdkZjY1NTQ0MjQyNGVkY2Y3MjNlNzkzODNlNDp7Il9hdXRoX3VzZXJfaGFzaCI6IjEyNjZjNjI4MWViODUxMWFhNWEyYWU4MmJlZDlhYTMxMmZlOWQ0ZGEiLCJfZGphbmdvX2NhcHRjaGFfZXhwaXJlc190aW1lIjoxNDk0MTI0NTgzLjk5MDgwNSwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMjc0IiwiX2RqYW5nb19jYXB0Y2hhX2tleSI6IlRrQ2cifQ==", "expire_date": "2017-05-21T02:35:24.009Z"}}, {"model": "sessions.session", "pk": "1u3vu1t9dejklfmpmuip6fgov0eizfbs", "fields": {"session_data": "OGY5ODY4MTZmMGZkYzI4MzE5OWE3ODNhMGZhYjhkNGNiNTg4MzFlZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjEzOTIzNGYxZmJhZDUyY2NmODU1MWUzNDI0ZTUyNDJkNjAyMjA1ZGYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMSJ9", "expire_date": "2017-04-08T12:05:39.978Z"}}, {"model": "sessions.session", "pk": "1vlog97z4a94gxpvg9y6np4qesh33d11", "fields": {"session_data": "MzMxMTZkYWEwNTQ3YjZhYTQ4M2U5OGVkZDk0M2I2OTdlMzM5YmZiNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjliZTE0MDA2ZWQ1OTkwM2UxNjc5YzJiZjliNGQ1MzdkMzJlOTNiNzMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTAifQ==", "expire_date": "2017-05-14T12:10:22.883Z"}}, {"model": "sessions.session", "pk": "1vv07whlsmz53f2dtus33wypvwji919h", "fields": {"session_data": "NjdiZWUzMjVmNzUwMTI5ZTI2ODJjMjE5NzE5ZWFjYTNiZDA4NTRlMDp7Il9hdXRoX3VzZXJfaGFzaCI6ImI0MzY3MDNhMTcyYmVhYzk1OTZiN2U4MDk2ZTAxZDVkY2VmODY4YmIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTgifQ==", "expire_date": "2017-05-21T03:58:58.740Z"}}, {"model": "sessions.session", "pk": "1zlrugw289fvpdfrmll8lifczbfit8c9", "fields": {"session_data": "MzMxMTZkYWEwNTQ3YjZhYTQ4M2U5OGVkZDk0M2I2OTdlMzM5YmZiNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjliZTE0MDA2ZWQ1OTkwM2UxNjc5YzJiZjliNGQ1MzdkMzJlOTNiNzMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTAifQ==", "expire_date": "2017-05-15T03:20:11.377Z"}}, {"model": "sessions.session", "pk": "1zxhifc7hgo834ffagbakitz09cfqe3g", "fields": {"session_data": "OTUzZDVmNTQ5NGY1MGNjYzlkOTQwMDE5MzFlOTA0OTIwNGU4NWE2Mzp7Il9hdXRoX3VzZXJfaGFzaCI6ImZhMjc0YTk4ZjliMzA1YzU1OWM1ZDdmOTY1YzVlNTIxZGJiZDgzODgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTcifQ==", "expire_date": "2017-05-19T11:34:39.337Z"}}, {"model": "sessions.session", "pk": "20menc9xr4627tkjza7by7r3b31v6v96", "fields": {"session_data": "Njk0OTY5N2VkYmMxZDk2YTQxZGEwMGI3NzY0MGE3NDdlODE1ZTQ4OTp7Il9hdXRoX3VzZXJfaGFzaCI6IjYxNzRjMzA2NjE2YjQ5NzQ0MGUzMzZjZjdhZmQ1MWMyYzQyYWU4MmIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMjkifQ==", "expire_date": "2017-05-09T14:56:41.325Z"}}, {"model": "sessions.session", "pk": "24mda0jip0qqpv8tdptq7oi73hjrawrn", "fields": {"session_data": "MDBmYWM2ZGFhMzdmNDFiMTJjMTI2YjdiOGQ0OWZhZTJiMTZhNWNlZjp7Il9hdXRoX3VzZXJfaGFzaCI6ImI5NjJmNjZiYjExZmJhZGIxZjI4YTQzYTUzMjRmZGU3ODhmMzMyYjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNCJ9", "expire_date": "2017-05-12T05:16:40.185Z"}}, {"model": "sessions.session", "pk": "24nmqc8hp22cn9hrt9cuw55mxqeqibe5", "fields": {"session_data": "NzcyN2U4ODFhNTcwNGM5YWMwOGJkYmMzNDM1YzI5MGUzNWE4MTAwZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjE2MWJmNDk3MTU1MDE5NDI2MDlkOWE1MWU2M2ZjZmY1MjY5MWE4MWQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxOTQifQ==", "expire_date": "2017-05-28T04:03:03.762Z"}}, {"model": "sessions.session", "pk": "25u48w10c8ldw3ecgg1z6f8nj62klh2u", "fields": {"session_data": "ZDgyNmE1NDIyYWQ5ZTRhNmU2ZWU2ZGM3Nzg3NWQyZDMxNGZlYTFiODp7Il9hdXRoX3VzZXJfaGFzaCI6IjU4NjljMmRkZWU5Y2Q3NDBhNWQ2M2JjZmIyOTExNGQ3MDQxZWY2NzgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzAifQ==", "expire_date": "2017-05-21T04:11:53.680Z"}}, {"model": "sessions.session", "pk": "26u0h1ikhqc5salfnw7rlx3ssy5m9wkk", "fields": {"session_data": "YWYxNzViOGEzMWYyZDkzMGMyZTM1YWFkNWU0Y2ZjMzFmZThhZjk5NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjJhMGZlMTMwZmYxMTQ2ZTZiYjI5YzNmYTZlODk1ZWM0MzRhNmJiNTMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNTEifQ==", "expire_date": "2017-05-21T09:37:13.411Z"}}, {"model": "sessions.session", "pk": "27oui4752r2empjagqdc3q6knvbbnbg9", "fields": {"session_data": "YWM4NTdlMjRjMjA1MTMxYjJjYWUyYjRjOWNiNGNjYWYzN2I3MzRlYzp7Il9hdXRoX3VzZXJfaGFzaCI6IjFiYWJjNWM5OWNkZDJiMWVkYmIyMzc2ZTIyMWRiYTgwMmZkNWRkZjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNTMifQ==", "expire_date": "2017-05-21T04:01:37.024Z"}}, {"model": "sessions.session", "pk": "28kolm20wurvadizjf561f88faq8meha", "fields": {"session_data": "MDk1ZDMzNDZhZmNlYTI1ZTc5NDBkM2VlZWE5ZmQ4NGZjODRmNmY3NDp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg5NDBjOTk0MjQxNjdmODZjY2QyNGYwYjZmZDIxZTk2ZWIyNWE5M2IiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNDUifQ==", "expire_date": "2017-05-11T14:58:59.551Z"}}, {"model": "sessions.session", "pk": "2cbghyan4iwepb4iu7xbf1x7nu8b9eoy", "fields": {"session_data": "MGIzY2IzZmEwZDdhYjlkNWE3MDU4ZjFlYzUxYTc5ZjViNjUxMWM5Nzp7Il9hdXRoX3VzZXJfaGFzaCI6IjZkYmQzN2NlODM4Nzk4N2M2MTVlODlhNDVjNjQ0ZGE3MTczZDRkZDIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTYifQ==", "expire_date": "2017-05-28T03:44:15.821Z"}}, {"model": "sessions.session", "pk": "2cjgcdsxc6l43wvs8rzf9kqr5ri1f3ud", "fields": {"session_data": "M2RhYTIwNzBkMmEyNDAwMmEwOWM3YzQ4N2RlMDhkOWQ3YmQ2NTQ0MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImM3ODkzYjczYWMxMjBjNTk1OTQ2ODYwZTUwNGJmN2E1NjZhMDY1YzAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMyJ9", "expire_date": "2017-03-29T14:47:42.083Z"}}, {"model": "sessions.session", "pk": "2d6clfxxbkgoikei1girjmc67874tokt", "fields": {"session_data": "NGI4Mzc1OWM1YzQ5NDM0ZTljOTIyZDVhYTgxOTE5NWI0NDJiY2Y4NDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTA0OTU0MjkuMTUxNTUzLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiaFNLNiJ9", "expire_date": "2017-04-09T02:29:29.206Z"}}, {"model": "sessions.session", "pk": "2d72qekcggkrh0yvbx9m5tqcs0j4to98", "fields": {"session_data": "MjQwZjcwMGY1MTc0ZWE5NzUxZGMyMmMxYTdjMTI5NGNlYjdjNjNiMjp7Il9hdXRoX3VzZXJfaGFzaCI6IjY5YjkxNGM2MWU5MGIxNDM3NjdkZGYyZGIzYThiNDEwNTBiOTYyNjQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzODIifQ==", "expire_date": "2017-05-21T09:18:00.120Z"}}, {"model": "sessions.session", "pk": "2darxoneqk8fxfvkka9xef91wcatmk75", "fields": {"session_data": "ZjlmZTJiZWUwZWY3OTBlMmMxZDBmMmNiZDVlNmEwYTE3ZmZjY2UzYzp7Il9hdXRoX3VzZXJfaGFzaCI6ImJkMjc4ZWU0OGFiMGE2M2QwNjk5YzQ1MzM3ODhkZjNlMzllOGNlODgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4OCJ9", "expire_date": "2017-05-25T10:40:36.724Z"}}, {"model": "sessions.session", "pk": "2dqnjdyuqigmx1i8e1kgx6ik1xhtb24p", "fields": {"session_data": "OTZlM2JlZjYyYTdkNzllODI4OTMwOTc3NGI3M2U3NTQzN2MwOGJkYzp7Il9hdXRoX3VzZXJfaGFzaCI6IjljNTcwNzg0Y2QxYjQwNzY2YTAxYmQ1MzE4MGQ4NGM3YzIxMjE2MWIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjYifQ==", "expire_date": "2017-05-21T04:07:37.230Z"}}, {"model": "sessions.session", "pk": "2ezgvrt10dw49jsmzch8hzibu3hjguao", "fields": {"session_data": "N2YyNjVmMWYzOWFjYmJjYjIxN2M4OGYzMTFmYzY0OGIzN2ZjM2E0OTp7Il9hdXRoX3VzZXJfaGFzaCI6ImY4MDM4ODUxODJjYTRlNDE1OTg1MWNlOWE0ZTIzMzVhMGZiMDNiOTUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1NSJ9", "expire_date": "2017-05-23T12:09:28.369Z"}}, {"model": "sessions.session", "pk": "2gggfhfm2v3by0viu49lex0bsy1qkfyd", "fields": {"session_data": "ZDM0NTk2ZDlmZTcyZWI0MWEwYmY4NWNkMGZkYWM1YTc2ZWI2YTY2OTp7Il9hdXRoX3VzZXJfaGFzaCI6IjM0ZTAzZWRiMjEzYmM2ODk1NzNmOTI0ZDk5YjU2YjI4MDc3MGI5ODkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1In0=", "expire_date": "2017-03-29T05:00:50.717Z"}}, {"model": "sessions.session", "pk": "2iun77qqemb69gwvhycqfxit8dqgt8q5", "fields": {"session_data": "ZDg4Yzg4MDkyMjQ2ZjgyMjIxZWE0YWIzNzExOGMxYzgyMGJhZjY4NDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTA5NjYwMzYuMDI5OTYzLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRVZoUyJ9", "expire_date": "2017-04-14T13:12:56.048Z"}}, {"model": "sessions.session", "pk": "2pyz562sh0jbknyig8y6gday1uaic8di", "fields": {"session_data": "NGI3YTZlMGE0NjIzZTE3OWRjNGUxZDAyNWVlZGZkZTMwNDUzMmJiZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjJhZjQ5MmRiOWRhZmQ0OWIyMWE3ZDE1ZWIzOThmYTQ4YjI3NDk0M2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzODYifQ==", "expire_date": "2017-05-21T06:33:48.413Z"}}, {"model": "sessions.session", "pk": "2pziwsqv0kyjiz6ri4ipu9sebt8y1w6o", "fields": {"session_data": "NGJlMDljODQzOWJjNjYzZWYzZDczMDdjNzhmZWNkMzMxZDZiMjYwMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjA2MzdjNWZiNjA3ZTdmZWQzY2YyZWNhZDEwYzNhYmI4ZjVlMDIyN2MiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMyJ9", "expire_date": "2017-03-28T07:51:29.130Z"}}, {"model": "sessions.session", "pk": "2z7ixqnt179pd4giyhjiiuwj6l1ul72x", "fields": {"session_data": "ZGMwMDMxNWQzM2YxODFiNzJjODY3ZDE3NTM3YzQ1ZjVkOTI1ODZkZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjM1NGUxZjkwN2FmZGRjZmQ3NTRkYTgxYjE5NTg2NWNhN2Y3ZTMxNjIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDYifQ==", "expire_date": "2017-05-24T03:39:08.804Z"}}, {"model": "sessions.session", "pk": "3075q7qxcf7j2r5awx37v9qxpdwpzkn4", "fields": {"session_data": "ZTU1NDkwMDMyNGY2MDgyMTFiYzUyMzllMDA1NWI3MzA2ZjkxN2MxNDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTIwNzQzOTQuNzQyNzk2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiVUJmRyJ9", "expire_date": "2017-04-27T09:05:34.752Z"}}, {"model": "sessions.session", "pk": "30q65e553jz0xd7xvrtbbjun2js0z0k8", "fields": {"session_data": "MDdjNjU4NmY1MWU3MDhmZDVjYTQxMWI2ZGZiZmMyNmEzNmJiN2Y5Mjp7Il9hdXRoX3VzZXJfaGFzaCI6IjE0M2EzZGUyZGZiZDg4MzA5MGMwY2M0MmY4ZjlkOGRkMGU4NzYwMWYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOCJ9", "expire_date": "2017-04-01T06:16:26.249Z"}}, {"model": "sessions.session", "pk": "31x2uou13a21rwnxhp317n6vtqqg9aei", "fields": {"session_data": "NGJlMDljODQzOWJjNjYzZWYzZDczMDdjNzhmZWNkMzMxZDZiMjYwMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjA2MzdjNWZiNjA3ZTdmZWQzY2YyZWNhZDEwYzNhYmI4ZjVlMDIyN2MiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMyJ9", "expire_date": "2017-04-01T08:30:59.919Z"}}, {"model": "sessions.session", "pk": "347gks7q1odtbumjb5s1ktl5zkj1vwsu", "fields": {"session_data": "MGE1Yjg5YjI2YWY0YmViODczMzU5NWM5MjEyOWVkY2Q3ZTQwYjNiZjp7Imxhc3RfYWN0aXZpdHkiOjE0ODEwNDAyNzAuNDAzMDIsIl9hdXRoX3VzZXJfaGFzaCI6IjllNDZjNTMzNDM3NjVjZTg3OWZjMTFkZTM5YmQ5ZTZhMGNkOTc5M2UiLCJfYXV0aF91c2VyX2lkIjoiMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=", "expire_date": "2016-12-20T16:04:30.439Z"}}, {"model": "sessions.session", "pk": "34juu979ohshqh6svsqrnf6kylokd92r", "fields": {"session_data": "OWI4NWE4Y2RhMWRjODUxNTU3MjBiYmVkMDhiODQ1MzE4OTAxOTQzNTp7Il9hdXRoX3VzZXJfaGFzaCI6IjVlOGExMGZiYWJjNjhmZjJmZDZhZmM2N2ViZjg4MmY2MmNjMDNhOGYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTkifQ==", "expire_date": "2017-05-21T03:43:06.623Z"}}, {"model": "sessions.session", "pk": "34xuzuh6d8xmx1c63t94b12kd9mwoldm", "fields": {"session_data": "MzkzNzkxNjBlYTg3MGZmNTFhODhhYjNiYzAzMzgyNzk0OWY3Mjc4Yjp7Il9hdXRoX3VzZXJfaGFzaCI6IjEzNDlhN2YxNDA4OWUxMGJjZjRiMWJmZjc1NjQ1MzQxODkyY2NiODIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzgifQ==", "expire_date": "2017-05-13T02:19:36.710Z"}}, {"model": "sessions.session", "pk": "357zrlakzvzvsifjq4k6uqdoykyulc0r", "fields": {"session_data": "YzRjNDYzZDY4YjYzYzQ5ZWMwYjIzNzVkMzM0MDc3YTg1NTJjOGEzYTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQwODY0NDQuNDQ1NjMsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJZcVRBIn0=", "expire_date": "2017-05-20T15:59:44.461Z"}}, {"model": "sessions.session", "pk": "35ri5mbouox1wx6riq7eg7dvlhmfkg3b", "fields": {"session_data": "ODFjZjFiZmJmMzk4NWNjZGQ5NzFmOWI5N2E4NmUxMzUxOWQwNDI0Yjp7Il9hdXRoX3VzZXJfaGFzaCI6ImZhMjJlMzY3NGMyM2M5MTY1MGM1ZmRjOWZhM2M5ZTFjNmY3YzVjZDgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzgifQ==", "expire_date": "2017-05-21T04:31:35.615Z"}}, {"model": "sessions.session", "pk": "35ru9h191iocrma520jvs7ybbje3k1ml", "fields": {"session_data": "M2U3NDg5ZDAwODkxYmI4NTY3NWZmMzE4MjhmODhjYzUyYzk5NTg0ZTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTI2ODU2MDMuMTA4MDkyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZjU3cyJ9", "expire_date": "2017-05-04T10:52:23.118Z"}}, {"model": "sessions.session", "pk": "36u0akymmden2afki15bkni9dc5k5uqb", "fields": {"session_data": "YzM3ZjIyOWNmMzRjMDIyZmUyMjNlZjIwY2E0ZmM0NzRhYWE1ZTM3NDp7Il9hdXRoX3VzZXJfaGFzaCI6ImY3NjQ3YzAzZTllYzcxNTA4NWUwNjY0NjhjZjdjOWQxMzU3OWVmOWIiLCJfYXV0aF91c2VyX2lkIjoiMjc3IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQifQ==", "expire_date": "2017-05-21T04:41:33.627Z"}}, {"model": "sessions.session", "pk": "370kdy4w9x8f36gk6z4f8sp6575wv54m", "fields": {"session_data": "Y2IxODA4YTk0MGFlMDE5N2FjM2VlNTc2YjYzYzZmOGNhODRlYTE2MDp7Il9hdXRoX3VzZXJfaGFzaCI6IjAyNGI3MzA1NDg3NDRmZDA4ZmRmODFhZTUyODg2YzFjMTU5NTMwMTgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjQifQ==", "expire_date": "2017-05-26T00:51:44.539Z"}}, {"model": "sessions.session", "pk": "3auffkw5khzr55arnu33hsnszbjpn2uc", "fields": {"session_data": "MGRmZGYwZTcwYTlmNmI2NjdlMDVlOTI0ZGNjNWNiZjU1ZTljNTNlMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjJiY2Y4NzZlOTEyZDM3ODllOTRiNDk4YjE1NGNkNDdjYWIwZDIwY2QiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMCJ9", "expire_date": "2017-03-28T14:32:54.706Z"}}, {"model": "sessions.session", "pk": "3br00zk2mdbkl3ia2kjt6vn5bng93vg8", "fields": {"session_data": "OTZlM2JlZjYyYTdkNzllODI4OTMwOTc3NGI3M2U3NTQzN2MwOGJkYzp7Il9hdXRoX3VzZXJfaGFzaCI6IjljNTcwNzg0Y2QxYjQwNzY2YTAxYmQ1MzE4MGQ4NGM3YzIxMjE2MWIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjYifQ==", "expire_date": "2017-05-21T04:08:31.610Z"}}, {"model": "sessions.session", "pk": "3cthbibu12c6jrm9tn3wp1sqjvxbz38r", "fields": {"session_data": "NDRjOTgwYjZkMjEyYmUyZmQ3YzY0ODY5YjU4ZmJlMmFlZWY5NzY4ZDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTA2MzY2NzIuMDQ2MzcsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJxYlFLIn0=", "expire_date": "2017-04-10T17:43:32.056Z"}}, {"model": "sessions.session", "pk": "3dpo03ossqwhjfomlfgenmh484tzazj0", "fields": {"session_data": "M2U4ODEyNjg3N2Q4NDdhZWE5OTBiOGNmMDc3Zjc4M2IwZWM3MDJmNTp7Il9hdXRoX3VzZXJfaGFzaCI6IjNkYTYzYTg5NjNjNTEyODkwZTZkZmQ0MWFhN2VjNTQ0NTVjZjhiMjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMCJ9", "expire_date": "2017-05-13T04:54:49.747Z"}}, {"model": "sessions.session", "pk": "3f1gmolk4kd8orxzpwyhsarvy5bmglrn", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-20T07:36:13.567Z"}}, {"model": "sessions.session", "pk": "3ffuz0sugaycaaoyb4rnmjmgjolla6ze", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-20T07:35:13.862Z"}}, {"model": "sessions.session", "pk": "3fq6mhvobs5gb1bv2j830ru0gkykwgrv", "fields": {"session_data": "NjYyN2Y4NWE1ZDNjOTQxYjIxNTg4YjkxMTZiN2UxOGFmZWJjMGFiMTp7Il9hdXRoX3VzZXJfaGFzaCI6ImMwNTU5NDU1NjI0MGMzOTM0NWYzNjY2NDA4OTU0NDkxODE5MTg1NDYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMDkifQ==", "expire_date": "2017-05-21T04:13:01.719Z"}}, {"model": "sessions.session", "pk": "3g1nrz2cq2u7s3nuomjnyh0wqqznz4eb", "fields": {"session_data": "MmVlNzg3ZjUxYWYyZWU1MGZmYTFkNDhmMWUzMDcyNzM3OTYxZDE0ZTp7Imxhc3RfYWN0aXZpdHkiOjE0ODk4MTk1MTAuNDYyNzgyLCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-04-01T06:45:10.479Z"}}, {"model": "sessions.session", "pk": "3gig46my1junywyybhbe71n61leh6pgv", "fields": {"session_data": "OGExYTI1ODQ5ZjA4MDAwZmE4NDMyMTM4MzRiMjI4ZjNiM2I2NmU5ZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjhkY2QxNDgwNmRkY2MyNGM3YmU2YjRmZjU0MmY2MzEyZDViYjgxNWMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNDcifQ==", "expire_date": "2017-05-14T07:04:00.227Z"}}, {"model": "sessions.session", "pk": "3gy839upqoo2cgzxrjs2tbyd4n07lt75", "fields": {"session_data": "ZTRmYjA0NjYzYTFmMDY3YWZkMjFhOWI2YjFiOGNjMDE2MGU3OGZkNjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMzNDY4ODkuMTYzNzM2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiWDlONyJ9", "expire_date": "2017-05-12T02:33:49.171Z"}}, {"model": "sessions.session", "pk": "3kvwgfovkamnzzrr67aupj52bdp5ub3m", "fields": {"session_data": "NTdmOGNlM2FiOWRhYjg5MTQzYmExY2Y1N2YwNTc0MjcxYmY5MGQ3Zjp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg1MWY1MDZhMjU5ODg0NWE4ZDVjYzAzZTE1NmRmNWEzNTZlYWI3OWQiLCJjb250ZXN0cyI6WzFdLCJfYXV0aF91c2VyX2lkIjoiMiIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=", "expire_date": "2016-12-18T04:20:31.316Z"}}, {"model": "sessions.session", "pk": "3la8a612y5zv404fitmednx36bdxulww", "fields": {"session_data": "MGIyNGU0OGIyYTM3MTU0MjdjY2IyN2VhODZiNjc0ZjEyZmQwY2Q5NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjUwYWIwNmYwY2I2ZjYxZmUwOWQzYjhhNTI3OTcxNGI4ZjkwMGZlNjAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyODQifQ==", "expire_date": "2017-05-21T05:32:42.370Z"}}, {"model": "sessions.session", "pk": "3lkyefzq59dapm3gbafc0hakkqk1k6iv", "fields": {"session_data": "NzA0M2MzMzE0NzUxNDhlZDUwYzVhYTQ4MzBjYTM5OGZmNGYzMWU3MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImJlMTFjNjM5YTk2YWY5ZDQwMDc2OGMxZTZmOWUzOGJlOWE0N2UyNmIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzIifQ==", "expire_date": "2017-05-17T10:07:48.340Z"}}, {"model": "sessions.session", "pk": "3llja0tyg712gfxqwg9e7q34kv35405w", "fields": {"session_data": "Zjg0ZmI4OTgxY2NiN2Q2MjhmMGQzNzc1Mjg0OTFiOTY1ZWEyYjk5MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZiNTAwMTQyOTBlMjAzNWY2MjkyYTY1NzEwYjhhZGQ5OWNlNGVmNmUiLCJfYXV0aF91c2VyX2lkIjoiNjkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-04-10T13:26:17.023Z"}}, {"model": "sessions.session", "pk": "3lycicc6vj6ttwia3rw1tddac6jhru0i", "fields": {"session_data": "NTAyNmYwOTQ2Yjk4MzhlZWY5YTBmZmJlODdhOGQ1ZDgxZTM5NWUyZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZiNTAwMTQyOTBlMjAzNWY2MjkyYTY1NzEwYjhhZGQ5OWNlNGVmNmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2OSJ9", "expire_date": "2017-04-10T13:44:52.715Z"}}, {"model": "sessions.session", "pk": "3s2k7lxjzat0kb68iq0z4c1bh967xhvu", "fields": {"session_data": "NDdkZTYzOWQ5M2FkZWIzNTAyMDgxODUxMDViZjU5MmI5YjQyNGMyNDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQwODEwNjguMTU0NDM2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRHhTeiJ9", "expire_date": "2017-05-20T14:30:08.170Z"}}, {"model": "sessions.session", "pk": "3stpivdcmdgk4u2s8r45cclemz4jc8gs", "fields": {"session_data": "NDAzZmIwZWRmN2NhYWI2ZTA0OTU1ODE5OGNiZjVlNGQ0NGI5N2Q3ZTp7Imxhc3RfYWN0aXZpdHkiOjE0OTQ3MzI1MjYuMDIxMzgxLCJfYXV0aF91c2VyX2hhc2giOiI1OWYwYjAwNDNiMTNmNTFjNmU1OWQ1YTUzNzg5MTUwOWE2NDZlZWM4IiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-05-28T03:28:46.024Z"}}, {"model": "sessions.session", "pk": "3tgt8vy3w4r0mn19xr2vmk0us8gqac90", "fields": {"session_data": "NDhkMWE2ZmY1ZjlkNTY5NThlNTkzZDExNDkxMTJkYzRkODU5NTg5Yjp7Il9hdXRoX3VzZXJfaGFzaCI6ImY5NTVjNGNiYzQ1ODRjNzhlZDVlOTI1ZDFkY2ZmNGFiZTY0NmNmMWIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOSJ9", "expire_date": "2017-03-28T14:32:52.011Z"}}, {"model": "sessions.session", "pk": "3unq6asl66fbvo1nlb8vu8jt5i8s4ncl", "fields": {"session_data": "ZDI5MTBmYTI0OWU1MjdjYTdkMWFiMTc2ZTFjNzhjN2IwYjgzNzZiMDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTI2ODU0MDYuMDM5NzEsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiI1TmVYIn0=", "expire_date": "2017-05-04T10:49:06.047Z"}}, {"model": "sessions.session", "pk": "3vb60e73q733o3yoz504rsjpzjo7pyck", "fields": {"session_data": "MTkwZTVjNjBmYmMyYTJiZTJkMzllZDZjYjg2MzEzYWJlMjFhNTM4Yjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQ3Mjg0NjYuNjI3NTQxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiVlFxYSJ9", "expire_date": "2017-05-28T02:20:06.631Z"}}, {"model": "sessions.session", "pk": "3vp6naqssmjei3yp8nb3aij8zatmci0c", "fields": {"session_data": "YTljOWI2ZDQ2ZDI5N2QwNWU5MWFjNDExMDE1ZGUyN2ZhMDNjMGI2NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjEzMTk4MmRmZTQyOGM5ZjJlZjkyMDQ3YjhiOGRjM2JhNWI1ZjM0MDYiLCJfZGphbmdvX2NhcHRjaGFfZXhwaXJlc190aW1lIjoxNDkzNjM0MjU5Ljg5MjgyOSwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMjM3IiwiX2RqYW5nb19jYXB0Y2hhX2tleSI6Inl0MmEifQ==", "expire_date": "2017-05-21T08:50:06.344Z"}}, {"model": "sessions.session", "pk": "3w0lwhzehor93jt4y4aq48vhtq4bquq9", "fields": {"session_data": "ODEyMWY1YmI5YjQzNDBiMmNiZmE4YzJjY2UwYjBkYzkwNzExMTRiNzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxOTI0NDIuMTM4NjYxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiWHhuSCJ9", "expire_date": "2017-04-05T14:19:42.145Z"}}, {"model": "sessions.session", "pk": "3wd5cx4h66vonpjgfcewb3laktibcfxw", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-20T07:38:25.790Z"}}, {"model": "sessions.session", "pk": "3ws5dzjajvistry208m05d6lc0fieik1", "fields": {"session_data": "ZTRjMjdiMjllNDViZTU5OWRlMDZlM2I3YzczODBjYzlkMzI0MjAzYTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDEyMDUuODk4NTY2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRnBXUiJ9", "expire_date": "2017-03-30T05:12:25.907Z"}}, {"model": "sessions.session", "pk": "3ycjcnvt1ccnz0nzenlgrmw26886ca8o", "fields": {"session_data": "MWIzMjI5YWJjOTU3NDQwMDYwNzJmZWZkN2Y4M2M2Mjc5OTY2ZDRkZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjAxNDU2NzBjZTg5NDQ5ZWFhY2U1MTQ0ZTVkOTAwNWVkYmEzMDJlNzYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMiJ9", "expire_date": "2017-03-29T11:45:29.284Z"}}, {"model": "sessions.session", "pk": "3zfv6nr0bmo21ph3aebugxvu9gezdlpt", "fields": {"session_data": "NjdiZWUzMjVmNzUwMTI5ZTI2ODJjMjE5NzE5ZWFjYTNiZDA4NTRlMDp7Il9hdXRoX3VzZXJfaGFzaCI6ImI0MzY3MDNhMTcyYmVhYzk1OTZiN2U4MDk2ZTAxZDVkY2VmODY4YmIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTgifQ==", "expire_date": "2017-05-21T04:12:52.456Z"}}, {"model": "sessions.session", "pk": "4105ntm3avc1g9mo9dyku2oc1sjvzgnr", "fields": {"session_data": "ZWIyZGUzNTZhOTIzZmIxMGVkNTQ3MTc4ZjhjODlmNzEzZjhiNGJmYTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijc2MzdkYThmMTMyOTQ0ZjA2M2NlOGJmODVmMDlhZGNlYzkxM2EwNGQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjEifQ==", "expire_date": "2017-05-21T05:02:22.029Z"}}, {"model": "sessions.session", "pk": "42cfi76xsma6t6ivkspkqai9lbsyxfet", "fields": {"session_data": "YjBhZTUwYzVlOTgxY2UwMWYyZGNhYzliYjQ1MDVkMjQ4MjVkN2E4NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjRlODVlODI5NDMxODQwZTBmYjAzNjNhZjA1MmZlZjNiYjNjOWY5NTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4In0=", "expire_date": "2017-03-20T13:19:28.967Z"}}, {"model": "sessions.session", "pk": "42k7s8g70vg9m38nk5a5wyhlewb8gbr9", "fields": {"session_data": "OGI5YTk2NDg0ZWE4OTYwZTg5NjEzMzQ2MzkyNjI0NTZlODBkNDg0NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjgzZjFmYmQ1ZjI3YjYzZGQxN2NlZTZlNjBkZjgxODg3NGYwNDdiY2IiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNjkifQ==", "expire_date": "2017-05-21T03:53:27.140Z"}}, {"model": "sessions.session", "pk": "44f0h9mlzplagznp8tatsi1dwsv67a0u", "fields": {"session_data": "ZTJkOWQyNjc0OTVkZTk1YWJlZjFkOWUwYmI2MjBhMDJkZDFlNmExYjp7Il9hdXRoX3VzZXJfaGFzaCI6IjVmNjlmZTIxZDBhZjBjZDIwYTBjN2MzMjQxMTk5ZDUzMmIyNTdhZjQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNSJ9", "expire_date": "2017-03-28T14:23:24.693Z"}}, {"model": "sessions.session", "pk": "47697jhk07gdz8ijrqelhb6zqyo5jcmc", "fields": {"session_data": "N2JiM2NlNGIxMzgzMzcxZjZkNDBiMjI1MDg5NzQyODMzZjY4ZTY5Yjp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiZWY5NmQzNTg1YjQ4M2ZlNGJiODQyYmU2MWIzODY3YzE3OWYzOWY5YyIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk1ODE4ODcuNTQyMjQ2LCJfYXV0aF91c2VyX2lkIjoiNDMiLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiejhGcSJ9", "expire_date": "2017-04-01T04:05:51.850Z"}}, {"model": "sessions.session", "pk": "477q03d5gtlnkbnorfk7f8vewyn84kn6", "fields": {"session_data": "MzMyZTkyZWE3OTYxZTk3NzIzMjc3YjFjOWFhNTNjNTQ1ZmQwN2M4ZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjM2NzA4N2M5ZmVkMmMyMTgzZjM3YThiOTk4YTI3MDQ3ZjU1MDVmODEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI3NSJ9", "expire_date": "2017-04-01T08:11:23.742Z"}}, {"model": "sessions.session", "pk": "47fybvcqvg2z3bh7cm56fvyznjme1frc", "fields": {"session_data": "OTM2MTI0ZTI2NzYxNjlhNzg3NGI2OWUxNDA0MDdkOTIzYjI4MTY3Mzp7Il9hdXRoX3VzZXJfaGFzaCI6ImU0OGQ0ZTUzNDhkZGI1ZjYxOGRjOGQwNTUyNjgyZjc1MGIxZmZkOTkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMDIifQ==", "expire_date": "2017-05-21T03:48:18.567Z"}}, {"model": "sessions.session", "pk": "47t0pi4wextvpv40cd7dmj5c402m180y", "fields": {"session_data": "ZmZlMzE5NzIyZmQwNDdlNmIxZjJlNzgyZjMwNGY0NTMxODViYmEwMDp7Il9hdXRoX3VzZXJfaGFzaCI6ImFmYWM1ODFlZmExNjA0YWI0NjAzMGJlN2MzYzNiYjk4NjgyY2RjM2UiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI3OCJ9", "expire_date": "2017-04-01T04:20:15.434Z"}}, {"model": "sessions.session", "pk": "491jn8ut0lujnvkir3s827omient7x0c", "fields": {"session_data": "NTAyNmYwOTQ2Yjk4MzhlZWY5YTBmZmJlODdhOGQ1ZDgxZTM5NWUyZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZiNTAwMTQyOTBlMjAzNWY2MjkyYTY1NzEwYjhhZGQ5OWNlNGVmNmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2OSJ9", "expire_date": "2017-05-20T13:52:00.601Z"}}, {"model": "sessions.session", "pk": "4c24kkqx9hyd2qibdp50sdxmhhozpynp", "fields": {"session_data": "NDM0YjUwODA5ODZiMmMxNmZlZWFkMGU1ZGQ4OTk2MjM5ZTc2YmZmODp7Il9hdXRoX3VzZXJfaGFzaCI6IjAyNGY5NTkzOWJiNDY3MWNlZmU2NmQyOGZmMDU5MTM3ZGNjZDVhOGUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyODIifQ==", "expire_date": "2017-05-18T05:37:42.216Z"}}, {"model": "sessions.session", "pk": "4docoig39c9lomfmw49vtzyxi45mgl8k", "fields": {"session_data": "MGZmZjZjOTZjMTkwOWU4MmMzZDJlZjM3Zjg4NDUyOGVjMmRkYTJiNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjYwOWIxMzQyMjA4YzlhNDdlODA3M2FmY2MyNDI5MzBjYzgwN2E2NzMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNCJ9", "expire_date": "2017-03-29T04:30:34.979Z"}}, {"model": "sessions.session", "pk": "4e6mv3iw8pjbhp6p8zmmv180q0a0p9bu", "fields": {"session_data": "NWY4NTc4N2NkMGU2OWJjOTk4Yzk2NGNmZTdiMTM5MTMwNzE2OWNjZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjgzYTVlYjMyYWYxYmY4ZTgzODllYTVjYTllZWRjODFlNTlmNWUxYjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzMifQ==", "expire_date": "2017-05-21T01:40:41.144Z"}}, {"model": "sessions.session", "pk": "4erlc3g1urfjlrogbv3lgnrpryrj07qv", "fields": {"session_data": "MDBmYWM2ZGFhMzdmNDFiMTJjMTI2YjdiOGQ0OWZhZTJiMTZhNWNlZjp7Il9hdXRoX3VzZXJfaGFzaCI6ImI5NjJmNjZiYjExZmJhZGIxZjI4YTQzYTUzMjRmZGU3ODhmMzMyYjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNCJ9", "expire_date": "2017-04-06T05:54:58.094Z"}}, {"model": "sessions.session", "pk": "4f2ecd0e0egbfulr5yqxnokcam64laf4", "fields": {"session_data": "NGQ5N2UwMjA0ZWNiNmZhMzEzMmMwNDEzNjFmYjBjZTA5MjI0ODI0ZDp7Il9hdXRoX3VzZXJfaGFzaCI6ImMxYjlkMDg1NTc3NmQwNDkxNzk1NmNmNGYwZGI4OWJmZWEzMGNhNTIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzEifQ==", "expire_date": "2017-05-23T04:51:06.194Z"}}, {"model": "sessions.session", "pk": "4i8e7v3dy565k8cgia0qew73sfqilhan", "fields": {"session_data": "NGIyNDAzNmVmNDBmZTBlY2FmMDQxMTJmNDI2YzExZWNlYWYwYmMyYjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTA2OTc4MzMuMTIxNjU4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiNGd6OSJ9", "expire_date": "2017-04-11T10:42:53.129Z"}}, {"model": "sessions.session", "pk": "4iaqqa3n7q28r6c0hewtbcht3dgyv2g9", "fields": {"session_data": "YjBhZTUwYzVlOTgxY2UwMWYyZGNhYzliYjQ1MDVkMjQ4MjVkN2E4NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjRlODVlODI5NDMxODQwZTBmYjAzNjNhZjA1MmZlZjNiYjNjOWY5NTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4In0=", "expire_date": "2017-03-20T13:19:29.277Z"}}, {"model": "sessions.session", "pk": "4jxz7wilvj0u5n0iia2ilco0tz0ceevx", "fields": {"session_data": "N2VmMmE1MDgxYzgyM2I3ODliMDU4ZDg1NmE4ZDc2NzE4YzM2OGI1YTp7Imxhc3RfYWN0aXZpdHkiOjE0OTI4NDQ1MzAuNDcwNTYxLCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-05-06T07:02:10.484Z"}}, {"model": "sessions.session", "pk": "4ktdoxyq5rofgl7fzi924k7atzho77ra", "fields": {"session_data": "NGFmMTIzZmVkMjk4ODVlNWFkMzk4NWUyYTFlYzRmZjlkMTIxODEwYTp7Il9hdXRoX3VzZXJfaGFzaCI6ImRiN2UyZTkxZWFkNDk2YTc2YWI1M2ZlMzE4ZTQ0YTZiYmEzYTkyNjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMTcifQ==", "expire_date": "2017-05-19T12:55:35.444Z"}}, {"model": "sessions.session", "pk": "4m5vuyx0fuvb5plaifveziso4gnls6qk", "fields": {"session_data": "YTIyZjZlYmE4ZDUwMWYxNjY0NjY3YWU1OWUyYzg4YTU0Yzg1ZGQ2Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImQyMTBlNWU5YmRjNGE4NmM5ZTU4MTRkOWJlNGEzNWY4NzM0NzEwOTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMDEifQ==", "expire_date": "2017-05-19T12:20:23.347Z"}}, {"model": "sessions.session", "pk": "4n07nb44zflfwpvhabwlvhws3tfa51in", "fields": {"session_data": "ODhkMzIzNjhhYTM3NjQ5MjY5NTZiYTdmYzQyNTBkZjQ1NTZiYmQ3MDp7Imxhc3RfYWN0aXZpdHkiOjE0ODM0MjY3ODkuMTY5MjQsIl9hdXRoX3VzZXJfaGFzaCI6IjllNDZjNTMzNDM3NjVjZTg3OWZjMTFkZTM5YmQ5ZTZhMGNkOTc5M2UiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=", "expire_date": "2017-01-17T06:59:49.215Z"}}, {"model": "sessions.session", "pk": "4nawntnlgdox7mw02rfy8fi8h6tiopjz", "fields": {"session_data": "YzA5MjcyZmJhZGI5YzIwY2ViNzQxYTU3NzBmYWYwYWU3ZjgwYzAzODp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMzMTI1MTMuODcxOTQxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiYks3biJ9", "expire_date": "2017-05-11T17:00:53.880Z"}}, {"model": "sessions.session", "pk": "4p5i60qhyaxgd1kg47m7v9dmo8bmbknl", "fields": {"session_data": "YTEzODBlZjllNWM3NTZmMTYzZDUxZWNlNWU3NTBmZjJkNjk3OTc2Zjp7Il9hdXRoX3VzZXJfaGFzaCI6IjQ3ZTkxMDM1OTZiMTU2NDY4MDU5MTQ4N2ZkZDYzZjFjODAzYTZjMzgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMzUifQ==", "expire_date": "2017-05-10T12:33:13.384Z"}}, {"model": "sessions.session", "pk": "4pcxineori2a131i5bse55mketazmemy", "fields": {"session_data": "MzRiNTEzYWE1MWI5YzQxMGY1OWFlMGI2MDExNTYxZWI2N2JiMjM3NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjlmNzk4MTkxNTExYzA4ZWRiMDA5YWRhZjU3NGE3OWZjMjhjYTVhNjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5In0=", "expire_date": "2017-03-18T02:39:51.439Z"}}, {"model": "sessions.session", "pk": "4qmx73sghodkl3ehq9r4koq3t5loo13e", "fields": {"session_data": "NWE4ZDI2MDQwZDFhNjU3YWQ2YzA4OWU1ZjgxZTdkMGRlZmY1ZWMxMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjI5ZDk5NDNiMjY1NDVjZmQyNWM0ZmQ5YTdmYjZiY2EzOGU1NmM4MzciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMDQifQ==", "expire_date": "2017-05-19T12:19:20.816Z"}}, {"model": "sessions.session", "pk": "4rb6jop3fsua4cqw58ojy2y5yl2sogok", "fields": {"session_data": "NTAyNmYwOTQ2Yjk4MzhlZWY5YTBmZmJlODdhOGQ1ZDgxZTM5NWUyZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZiNTAwMTQyOTBlMjAzNWY2MjkyYTY1NzEwYjhhZGQ5OWNlNGVmNmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2OSJ9", "expire_date": "2017-05-21T02:49:48.774Z"}}, {"model": "sessions.session", "pk": "4rfrrsz8wy6swrp227j3ve2384j0nok7", "fields": {"session_data": "ZWQ5ZDNhNWM5Yjg1M2I3MDBiNWNjZmFmMzJiZmI3NzAwMTNiZjUxMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhY2M3MTI1OWU2ZWU2NWY3MGE4NDNkM2NjNmE2ZjBiYmI1ZWY1MDAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTYifQ==", "expire_date": "2017-05-15T09:07:45.065Z"}}, {"model": "sessions.session", "pk": "4rldchhy3otd8luis0uo9y4oz3xgi5v3", "fields": {"session_data": "NGJkNDMzMjY5MjVmMWViYmZkNTQ0Y2VjZjNhNjY2ZTJlNDEyYmJkYzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM2NTQ0MDcuMzk3MDk4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiS0VmZyJ9", "expire_date": "2017-05-15T15:59:07.412Z"}}, {"model": "sessions.session", "pk": "4slt5gxcqomrjogkvne9alr70aooxieh", "fields": {"session_data": "Y2M3ZjljY2JhNTlhN2NjNjg1OWM2MmE2NjAzZjA0NTNlNjBjM2YzZTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg4NWU5YjFkZWQzZWJjMDc3NWVhOGZhYmY3NTk3N2RiMjE4MDUzNDUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNDAifQ==", "expire_date": "2017-05-20T07:38:39.339Z"}}, {"model": "sessions.session", "pk": "4v1s3vw2h7yh4p8invyf3yvghhwijltc", "fields": {"session_data": "NmE4OTkxMjY2NTcxMTc3M2M0MTE1OGUwMWQ2MTg5NDliZWQxNWJlOTp7Il9hdXRoX3VzZXJfaGFzaCI6ImExZTI2NjE5YTliMDMyOTFmNmY4MTFiNGU0MDE3OTJiMmMwNmVhNzIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjUifQ==", "expire_date": "2017-05-21T03:59:06.583Z"}}, {"model": "sessions.session", "pk": "4wtcds8s9u5fgjt6ocshhmweyslus17a", "fields": {"session_data": "ZmU0M2NhYzNlYjM4YTlkYmY5MWE2MGE0YTFhMzNhNmRkMTcyZTAyMzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM0NTA1MzAuNTcyMTg0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiQ0dFYyJ9", "expire_date": "2017-05-13T07:21:10.587Z"}}, {"model": "sessions.session", "pk": "4xtxuxvdbaou1druxqv3jcqhs7sgnuvf", "fields": {"session_data": "YTAxZGUxNzhiZTZmMTNiMTBmODhlZjdjOGJlZDkyYmRkM2NlNDZlNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjVkYmY2ZjcwMjdjMzQ1MDY3N2E2YTdhYWJiMmJkZGM0ODBiZDhhYzciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMDYifQ==", "expire_date": "2017-05-21T03:37:40.260Z"}}, {"model": "sessions.session", "pk": "4zlvta8ahuica7iwzyfwgcfu4gkz1755", "fields": {"session_data": "MzIxOTYzNjMzNzM4MGNkNGQzNmY2MGIxZDY2NmFiODJiYzI1MzQ5ODp7Il9hdXRoX3VzZXJfaGFzaCI6IjZjNTQ0ZDM3NjI5YTNhNzNhOTA1NGI2ODQyM2I3Y2UxOTlmYTZmYjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMSJ9", "expire_date": "2017-03-28T14:42:23.707Z"}}, {"model": "sessions.session", "pk": "500nlr59v2z318r6mtsl7mwbffwi6k4a", "fields": {"session_data": "MWM1OWE1ZWFkZDAwY2UyMTVmNmZiMDZmZTYxYjRjZGMwMDkyN2JhNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjIwYjNjYjUyMmUyYzJlZDJjYWFlNDRkMTE2MzljOTE5YmM1ODFmNWYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjgifQ==", "expire_date": "2017-05-21T01:44:46.546Z"}}, {"model": "sessions.session", "pk": "50cvsxxkay47fu8jok1xcfzfo2hbsvpn", "fields": {"session_data": "YTcxMGIyMTkyZjU0MzU3YTgyYzdiYmE0MjFiMzk1NWNjOTU1Yjk3NDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTA2ODAzNjYuODU0MDk4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZGVNdyJ9", "expire_date": "2017-04-11T05:51:46.873Z"}}, {"model": "sessions.session", "pk": "51ct0xko6mzcq80ix0plra1a2hvb3frl", "fields": {"session_data": "MDdjNjU4NmY1MWU3MDhmZDVjYTQxMWI2ZGZiZmMyNmEzNmJiN2Y5Mjp7Il9hdXRoX3VzZXJfaGFzaCI6IjE0M2EzZGUyZGZiZDg4MzA5MGMwY2M0MmY4ZjlkOGRkMGU4NzYwMWYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOCJ9", "expire_date": "2017-03-28T14:30:29.465Z"}}, {"model": "sessions.session", "pk": "531kfyqpx9wuf7fq99d25thakrp05yb4", "fields": {"session_data": "M2YxZWZjNmQwZDZmMGFiNzAyNjhjZjRhODY5NTMzMjBjYTI0OTMwNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjkzZjJjN2FhNzY2YTU1NzUxYzhhNzU1YWU1MjE0ZmFmMzRjZmRkN2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5In0=", "expire_date": "2017-05-19T13:49:08.333Z"}}, {"model": "sessions.session", "pk": "55h14gi7h0m9muswjh46pwnhqjbwn1e3", "fields": {"session_data": "NzNkN2FlMDNjYjEyZjA4YjNkYTdmOGJiOWYxOTU1NmMxMjg3N2IzMjp7Il9hdXRoX3VzZXJfaGFzaCI6IjU2MTNhOGQ2MTFmMmFiZTdjNGFkYzkzNjMwODYxYTQ2OWY4Y2ZlN2QiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzkifQ==", "expire_date": "2017-05-20T03:06:42.742Z"}}, {"model": "sessions.session", "pk": "57m6fw87astkepy86xztszcst2u3so6e", "fields": {"session_data": "OTllYTc1NTg4ZDM1NzVjNmYyMjA5Y2UzODUzYWY1NjQ4YTEzZmQ2NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjAzNjQ5ZjE1MGEwY2VkMWZmOTA1YzNhNGVmMDFjZGFjZjNiYmRiMDAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNyJ9", "expire_date": "2017-05-17T13:16:11.529Z"}}, {"model": "sessions.session", "pk": "57ulawy8uhhx95i8xew7kr68esix32tj", "fields": {"session_data": "ODU2MmViNTkwODFkNzE2ODk2OTBjMjRhMDVmMmQ3ZGY1MTYzMjMyYzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTI3MjAxMjQuNDEwNTE3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoieE9CdCJ9", "expire_date": "2017-05-04T20:27:44.416Z"}}, {"model": "sessions.session", "pk": "58dphoiw5a4lh5ohej1gqs30nuhh0gvi", "fields": {"session_data": "Nzg5NmIyZmI2ZmI3Yzc3NGRmZTU2ZGVhYzQ4YmRhMWY4M2JkODQ5Yzp7Il9hdXRoX3VzZXJfaGFzaCI6IjllNzAxYjIxZGQ2NjFmNjY0NWRjMmNiYWMwZTQzZDFiNDdlMzlhOTkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNSJ9", "expire_date": "2017-03-29T05:18:19.499Z"}}, {"model": "sessions.session", "pk": "59zn67qhux1b10zq11vtyyoncr4105ji", "fields": {"session_data": "MjJkMmZlZGNjYjE3Zjg1ZjFjZTMyY2RjNGVmMGE5ZDkwNDlhMGVjZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjYzMjBlYjQxZWRkZmY0NDhjNWEwNTQ4NWFlZDU0YzBhYzlhNmYyMGMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzAifQ==", "expire_date": "2017-05-21T06:58:17.438Z"}}, {"model": "sessions.session", "pk": "5cpi8fe6lcbdcr0dfml8e3gpxm5vq1dh", "fields": {"session_data": "OTRmMTk0YmJjNGU4ZmMxOTYzMTQ1YTEwNzZmYzZiNzcyNTAxNGQxMTp7Imxhc3RfYWN0aXZpdHkiOjE0OTE0ODUwNzEuOTczODA5LCJfYXV0aF91c2VyX2hhc2giOiI5ODYzM2ZiMWExODYyMGEzYjA0MTVkMWZlOWM3NTY2NDFhM2E1ZmQ4IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiNyJ9", "expire_date": "2017-04-20T13:24:31.976Z"}}, {"model": "sessions.session", "pk": "5d0y7cyg4s7gazu8ypwpq524ne383cou", "fields": {"session_data": "ZDczN2Q4MjM3OWMwZDJkODI3NWNiODYxYzEzOWUyNWQwZjA5OThmZTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTE4NzEwNjMuNzY3NTMxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZHB4VyJ9", "expire_date": "2017-04-25T00:36:43.797Z"}}, {"model": "sessions.session", "pk": "5fuu2cfyg7pyil83y8xuulysboq78i8j", "fields": {"session_data": "ZmRhMzhhNDI3ZTdlZmJhOTA5N2VkNjE4NzEzMjM2OThiZmE2NWRkMjp7Il9hdXRoX3VzZXJfaGFzaCI6IjRiNWM3ZDcxZTI0NTZiZTE3YTJlZGVkZTNjZWRiZDRkZmJlOGI2MTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjMifQ==", "expire_date": "2017-05-16T05:55:00.653Z"}}, {"model": "sessions.session", "pk": "5if4vbuvsq31ncnvx3dgyfnvoi5ju8xj", "fields": {"session_data": "ZWZlMTBhMGQ4OTBjMTZjYjgwMGVkMTFjZmQyMDdjZmUzNmZiMWQ5OTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMyMjc1NzAuMTEwMzExLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiNE93WCJ9", "expire_date": "2017-05-10T17:25:10.121Z"}}, {"model": "sessions.session", "pk": "5ikmq5c1r1948kolpr3e16cjd2slkanq", "fields": {"session_data": "NGMwNTY3YzE0MGE1ZjZmZDQ4NDU3ZmVjMmIwNjE1ZGI3NzEyNzAxMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjllYzY5ZmY0NjE0NzIzNjM1NDAyM2ViN2I4ZDg2OWIxOGY0MGI5ZjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzIn0=", "expire_date": "2017-03-18T02:23:49.340Z"}}, {"model": "sessions.session", "pk": "5o36qu79266s9k4so3kmkmmxwkgif2yk", "fields": {"session_data": "MTgxOTE4ODU0MThkYWY5ODM2YzQxMzA2OTAyYmU4MGIwZWZiZWM4NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjU5NTIwMmJiYzcwM2JhMDE4YjE0NmUxMWM3ZGI3ZTA4YWJlODQwYjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjIifQ==", "expire_date": "2017-05-18T05:18:21.087Z"}}, {"model": "sessions.session", "pk": "5r4ynurvs3im7qwucc6xlv386g6o5l0t", "fields": {"session_data": "NjQ4MTUxMGVmZmM3ZjZhMzBmODg4MjYxZTk4Njk3NDQwOTYwMDRkYjp7Imxhc3RfYWN0aXZpdHkiOjE0ODk4ODc0NjcuNDg3ODkxLCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-04-02T01:37:47.526Z"}}, {"model": "sessions.session", "pk": "5r6lme714m2wyxe2tp6y4oln7awod9kn", "fields": {"session_data": "YTQ5MGE4N2FhZTMzODljOGU0OTA0OWRhMmU5MzRlZTI3NDA3Zjk4YTp7Il9hdXRoX3VzZXJfaGFzaCI6IjcyNDFjZjkzMDlmODA5OGFlZDNkODFiYWRkZTMxNGMwNjg3NmEzZjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4MSJ9", "expire_date": "2017-04-01T05:04:43.478Z"}}, {"model": "sessions.session", "pk": "5ra60q0qal52mksqo7uzuqbezgao19wa", "fields": {"session_data": "NGJlMDljODQzOWJjNjYzZWYzZDczMDdjNzhmZWNkMzMxZDZiMjYwMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjA2MzdjNWZiNjA3ZTdmZWQzY2YyZWNhZDEwYzNhYmI4ZjVlMDIyN2MiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMyJ9", "expire_date": "2017-03-22T13:24:12.247Z"}}, {"model": "sessions.session", "pk": "5utnuozjw02r3x051ainp6uti1ieisaq", "fields": {"session_data": "OTQ5NGMwMzUwNTFlOTExZDBmNzFjNDM4NTY1YWNjN2FmMGUxM2NjYTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTE2MzI2ODcuMTMxOTYsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJDd1RWIn0=", "expire_date": "2017-04-22T06:23:47.138Z"}}, {"model": "sessions.session", "pk": "5wqleo38p4yy1uryc36zadzuyy6l570k", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-20T07:33:55.417Z"}}, {"model": "sessions.session", "pk": "5xfblhbfma9c265mqtx71d60xgbcukn1", "fields": {"session_data": "MTdhMWQxYTkxODFmODVmZThkMjkwZWQwNTQzOGY4NWUzZTI1YzRiYTp7Il9hdXRoX3VzZXJfaGFzaCI6IjlmZDRjMmQyZGZiOThkODFlMmQxOTBiZjM0NWRjM2NmZGIyMDU3ZTMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjIifQ==", "expire_date": "2017-05-16T07:20:09.493Z"}}, {"model": "sessions.session", "pk": "5yb8oein3eotpedpzc4b0pngdbpz8x93", "fields": {"session_data": "ODk5NDBhMDc4MDViNzcwNWI1MGY0NzlmOTQ3Yzc1OGZkZTg2ODM5Nzp7Il9hdXRoX3VzZXJfaGFzaCI6IjlhOWYyYTRkNDRiOGM3MjM3YzQ3MGE0MmJmMjJhNjg5Y2QyMjcwYmYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTgifQ==", "expire_date": "2017-05-15T14:11:02.736Z"}}, {"model": "sessions.session", "pk": "5yqghy2djuox89wmifv4fysngq684pek", "fields": {"session_data": "MTE5YTM0ZTYwODEwNTFjY2Y0MzNlY2MxNWVkMDNiNzM3MTllZmM5YTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk3MzM4ODIuNjQzMTk4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiaHdCNyJ9", "expire_date": "2017-03-31T06:57:02.651Z"}}, {"model": "sessions.session", "pk": "614hw27m01p7syp299gjq429tf9iwj0q", "fields": {"session_data": "YTgwZDY1ZjQwNWVjM2NiMjIyN2QwNjIzODU5ODJlMzYyNzQ4ZmM3NDp7Il9hdXRoX3VzZXJfaGFzaCI6ImQ5ODEyNDU0YTQ2ZGE1NzRmZDM5YjkyMzEzODVkNmFjYzg5M2UyNjciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNDEifQ==", "expire_date": "2017-05-21T00:28:55.866Z"}}, {"model": "sessions.session", "pk": "62n53mfjba6391n8brxcwlpv1jnblmvj", "fields": {"session_data": "ZWRmMzk4YzBmODQ1YjEzNTYwZDgwMTBkOTllNTNhMjRjYTdlZThlNTp7Il9hdXRoX3VzZXJfaGFzaCI6ImQyYzVlNzRkNGUzMDU1ZjBiNzE2Y2U0ODdlN2VhMDdiM2E0YzY0MzIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMzEifQ==", "expire_date": "2017-05-10T09:43:49.510Z"}}, {"model": "sessions.session", "pk": "62vgaxc0f7xk7iqes8vg6j4rjjwyfjwm", "fields": {"session_data": "MjA0NGJlZjczYjU0MDZhOGJlNjJhMTgxODAwOGNiOTE4NDc0YTM5Nzp7Il9hdXRoX3VzZXJfaGFzaCI6IjM0MzIyMjBkZDI5YmJjOGFlYmUzMjUzNTBkYThjYWZiZjkwMjcwM2EiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNzIifQ==", "expire_date": "2017-05-21T04:21:22.412Z"}}, {"model": "sessions.session", "pk": "65j0hll3424kjklprl4dqsrqool4unom", "fields": {"session_data": "MzMxMTZkYWEwNTQ3YjZhYTQ4M2U5OGVkZDk0M2I2OTdlMzM5YmZiNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjliZTE0MDA2ZWQ1OTkwM2UxNjc5YzJiZjliNGQ1MzdkMzJlOTNiNzMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTAifQ==", "expire_date": "2017-05-16T08:04:24.066Z"}}, {"model": "sessions.session", "pk": "68dpt27auael8ur693s2vr9judgk1s6k", "fields": {"session_data": "Y2Q1MThiYmYzMjYwODgxN2JiZDEwMGYxYzQ5OGIyYThhNjI0MjRmOTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxNzQ4MDIuMTY3Mjg1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiUlpUYSJ9", "expire_date": "2017-04-05T09:25:42.177Z"}}, {"model": "sessions.session", "pk": "6arsc6gdh1ofk2c06olairbpukud6p6o", "fields": {"session_data": "OGJmYzhlZGFkY2NlNDViNTUxZmM1NmRiM2M0OGE0NzFmZDEwYjcwNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjJmYzJhNzk3NDhlYmUxMzJlYTIyOWFmNmE3MzU1MmNhMWIzZTcxMjIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4MyJ9", "expire_date": "2017-04-01T05:10:23.889Z"}}, {"model": "sessions.session", "pk": "6coyiu34k8sv7ss994lkrkp27j73bagq", "fields": {"session_data": "M2QzNjViNWZhYzkyODE2YmQ1NGNhMmIyNzIzNGE5YjY3ZDRhZmM1ZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjQwYjg5YjFiY2U3ZDlhYjRhMjdiMTIxODgyOTE4YzI5YjBhODE0YzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2MyJ9", "expire_date": "2017-04-01T04:23:49.669Z"}}, {"model": "sessions.session", "pk": "6cr9ujpt5rry1asdzxbks1fot0v1ktpx", "fields": {"session_data": "ZjRmMGM3NjMyZWZjZDQzMTkzNTU0YjY3MDJhZDcxNDZkNGU0NDg0Yzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQ3MzQzODguMzIxODI4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiNW14dSJ9", "expire_date": "2017-05-28T03:58:48.326Z"}}, {"model": "sessions.session", "pk": "6cs9holvk1oxmqpd2hbj1dwal6qb5zvi", "fields": {"session_data": "OTdkNzQwYzQ5MGEyMGFmNmQzNTM4YjE2MWM0YmVjYWUwNDkwNjI4MDp7Il9hdXRoX3VzZXJfaGFzaCI6IjYzNGZhMWFiMThlOGU5OTAwODQ5YWU1OGVhM2UxNDVkMzJlZDg3YjkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNzQifQ==", "expire_date": "2017-05-28T04:01:33.073Z"}}, {"model": "sessions.session", "pk": "6gyzg37y1qzdw5xlj4kzzapc0wlunmh0", "fields": {"session_data": "MzRiNTEzYWE1MWI5YzQxMGY1OWFlMGI2MDExNTYxZWI2N2JiMjM3NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjlmNzk4MTkxNTExYzA4ZWRiMDA5YWRhZjU3NGE3OWZjMjhjYTVhNjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5In0=", "expire_date": "2017-03-31T13:56:54.507Z"}}, {"model": "sessions.session", "pk": "6jgukiluwpadk2of4314gy0giktztk2m", "fields": {"session_data": "NTg0ZmExZWRlYWFlNTVkNmQ4MzM0ODAyNzJjY2ZhNTM3OTUwZWE3MDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDExODMuMDM2NDk5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoidE9aViJ9", "expire_date": "2017-03-30T05:12:03.042Z"}}, {"model": "sessions.session", "pk": "6js096oemw78rssdecjv8t5j7gd8s8c7", "fields": {"session_data": "ZGE0ODBhMDZkMjhjYWIwZDc0YmZiMjliNGFlZGFiZmJhYWQxM2MyODp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg2NmI2MmU2MGI4MzE1ZDg4ZDJlNmNmMzdmZjc3NzNlY2RhNDgwNjIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1MyJ9", "expire_date": "2017-03-30T08:37:10.041Z"}}, {"model": "sessions.session", "pk": "6kfoiumlmda6ssognubwlwttsewsxxx0", "fields": {"session_data": "MGIyNGU0OGIyYTM3MTU0MjdjY2IyN2VhODZiNjc0ZjEyZmQwY2Q5NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjUwYWIwNmYwY2I2ZjYxZmUwOWQzYjhhNTI3OTcxNGI4ZjkwMGZlNjAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyODQifQ==", "expire_date": "2017-05-18T09:55:36.544Z"}}, {"model": "sessions.session", "pk": "6l7yz7w7x8u1fhluo5z15x885jtlml96", "fields": {"session_data": "MGYzNzVlY2YzZjJhNmM3YWY1MDg2YWUwNDJhNDE1ODA4Y2YzZDgxMzp7Il9hdXRoX3VzZXJfaGFzaCI6ImE1YWVkY2JmOGRjYjIxNGRiYjJhMWYxMDYxM2RmMzUyOWJkZmE2ZTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTcifQ==", "expire_date": "2017-05-21T03:48:45.579Z"}}, {"model": "sessions.session", "pk": "6re5ioognh9yo58cfnsr1smwhb21off4", "fields": {"session_data": "NTY0NDM5ZDU3MGU3MjFjODgyN2ZiMDkwZTAxMGVhZmRhODQ4YmNlZjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU5ZDIwMzQyOTg5NTEwNjU1NzljNjYxZGIwNjIyNjg1NjI4MzU1YjkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzYifQ==", "expire_date": "2017-05-12T14:34:23.809Z"}}, {"model": "sessions.session", "pk": "6rucxmb6rbania27nnqo0witwmfd7qo5", "fields": {"session_data": "MTMyNjA2NjRkOWRkZjJlMjIyYzc0YzM1OGE3ZGVmMDBkM2U3ODU2NTp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3MDRlOTBkZTExMTMyNjA2NTJiYmY3NTViYmU3YTA1NDI5ODFiZDUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjYifQ==", "expire_date": "2017-05-21T03:26:04.765Z"}}, {"model": "sessions.session", "pk": "6t6juo07lg5cg9bw8irhp2k20o4hqe7v", "fields": {"session_data": "NmNlMTM3N2Q5MDVlY2FmMTBmZmI0YmE2OWVjYzAyOGU0OTAxNzFkYzp7Il9hdXRoX3VzZXJfaGFzaCI6ImIzZjRmNDc5MGQxZTcwNzc2MTkyM2MxM2RlNDc5MGZjMGYzYzI5NzIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjYifQ==", "expire_date": "2017-05-16T12:00:59.342Z"}}, {"model": "sessions.session", "pk": "6ucw6za14up5k8s890vi6g5gqvtupy6v", "fields": {"session_data": "YjA1OTBkZTkwYmQ2MmY3MWJiNWFmMzZmZDA3ZjQ5OWE1M2JlZDI0OTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5OTA0NjYuMDQzNDA3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiQ2ZFayJ9", "expire_date": "2017-05-19T13:20:06.093Z"}}, {"model": "sessions.session", "pk": "6wflqbgnso1363tadpw2iyvoqi006s5x", "fields": {"session_data": "NWI3ZjExOWYyY2ZiZDY2YjBmOWY1ZTBhODhjNGRjMTYyNjE5MGFjMjp7Il9hdXRoX3VzZXJfaGFzaCI6ImNhN2Q4ODc2NDY1ODg3NTAxMzJhMzNkMzlhZTU3NTE4MjZlNGQ5MGQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDUifQ==", "expire_date": "2017-04-08T07:17:17.680Z"}}, {"model": "sessions.session", "pk": "6wfweoalaouhc73yn6sfu2i29njndlss", "fields": {"session_data": "NTI0MWMwY2RhMmVjYmI0MzBkZmFhNTRkZTRiMjMwMjI4NjQwNjMzNjp7Il9hdXRoX3VzZXJfaGFzaCI6ImMzZDhmNjc1YmZmMjRjMzlkZDhjNmEyOWE1M2VjNGEyZWU4YzE3ZTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MDAifQ==", "expire_date": "2017-05-23T12:47:25.298Z"}}, {"model": "sessions.session", "pk": "6wi0yieexr08p60cg9xoxlaur7pfg3tj", "fields": {"session_data": "NmU1MDQxNjE0M2FkNTBiZGMzN2U0MGY5OTY5YzY2MDhmMDRiODFiOTp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiZTA5MmMxYzAyYTllYzk0NTNmYWNiOGY0ZDc3ZjA4ZDdmNDQzYzY4MCIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQ3MzQ1MDkuMzMzNDU3LCJfYXV0aF91c2VyX2lkIjoiMTkwIiwiX2RqYW5nb19jYXB0Y2hhX2tleSI6IkNyYjcifQ==", "expire_date": "2017-05-28T04:07:09.145Z"}}, {"model": "sessions.session", "pk": "6ww08znvyfmchk7wxx8yc51fkwuu3k4l", "fields": {"session_data": "N2Q0ODk1ZTk4Njg4M2JlNDZmMGZjMmIyZjdhMGQ0YTRmOWU3OTk2MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImFjMTc0NGVjNjNlMmVhNGRlOWUxOTJkYTZmYTA1YmRlNGU5ZGNlZTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjcifQ==", "expire_date": "2017-05-21T03:44:11.367Z"}}, {"model": "sessions.session", "pk": "6xn116jnxy9g2jw0d7uuu5e4kic54vyy", "fields": {"session_data": "ZDdlNzZmN2U1MzNkMjk3YTU3ZDcyYjU1NmUyYzg4MWY5YWFmYTJjYTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM4MTA3MjMuMTAwNjIsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJuQ3FWIn0=", "expire_date": "2017-05-17T11:24:23.111Z"}}, {"model": "sessions.session", "pk": "6yk0qmsjhzef77mb995x690gh5wtngqv", "fields": {"session_data": "ODgwMGNmNzU4MzFkOTI1ZjRiZWQ4ZmRkMjgzOTJlMzBiMzY4YzhhYTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTE0MjcwMjQuNjY1MDY4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiaEVtYiJ9", "expire_date": "2017-04-19T21:16:04.675Z"}}, {"model": "sessions.session", "pk": "6ysepe7uoe5q81mhmfldu141fxa16o0g", "fields": {"session_data": "ZjVhOTFiMWFiYmJkZmY4Zjc0MzNjYjJmYmM4NDc1YmVmMjJiNTlmYjp7Il9hdXRoX3VzZXJfaGFzaCI6ImIxNTk3NTQxOWI4N2MyOWQ3YTY5MjAwNzRmMmNkNDk4MWRiMzNhNWEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMSJ9", "expire_date": "2017-04-01T03:55:59.350Z"}}, {"model": "sessions.session", "pk": "71afvjhvabop1uk2r8exegrr1pldypd0", "fields": {"session_data": "MjQ2OTU1ZTEwOGY0ZWVmOGE1NTI1NTM4MzM3NWYxNjBiNjg1MGRiMjp7Il9hdXRoX3VzZXJfaGFzaCI6IjA2MzdjNWZiNjA3ZTdmZWQzY2YyZWNhZDEwYzNhYmI4ZjVlMDIyN2MiLCJfZGphbmdvX2NhcHRjaGFfZXhwaXJlc190aW1lIjoxNDg4NjY4MDQzLjU2NDM2LCJfYXV0aF91c2VyX2lkIjoiMTMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJOMk9QIn0=", "expire_date": "2017-03-18T22:53:03.568Z"}}, {"model": "sessions.session", "pk": "725rsk9w6x4ha5adudadfqddjgyag67f", "fields": {"session_data": "YmRhOGU2ODIzMTg4MzRmMzcwZmJjZDljYWE3ZjU4MDI0MGRjMWE0NTp7Il9hdXRoX3VzZXJfaGFzaCI6ImM0YjQ1NTBmZTU5ZGFjMTQ0MzBlNzAyM2RjN2M4NDBiMGNhNWUwMTUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDEifQ==", "expire_date": "2017-04-05T04:31:01.462Z"}}, {"model": "sessions.session", "pk": "72v9kupe2erraxtmiebtwilc3ulr43s8", "fields": {"session_data": "NzE0NGMzMGQyOWE5MGI2NmYyNDRjN2E3MjM1ZWE4NzBjNGQ1M2Q2OTp7Il9hdXRoX3VzZXJfaGFzaCI6ImUzNDI3OTRmN2UyMzVkNjgwMTI2MjQyYjJmNTdmMTYxMDI0YTVhZGQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2In0=", "expire_date": "2017-01-17T10:44:03.305Z"}}, {"model": "sessions.session", "pk": "73jkhgi1b7bppt3qk3lcrjqma7hc3ttm", "fields": {"session_data": "ODA1MzY5MzBjYzdlNzgyODE1ZDc0NGFjNGJjMDA0ZDlkZmI1OGJkYzp7Il9hdXRoX3VzZXJfaGFzaCI6IjRlYzA3NTMzNzA1MjkxYzBlOWM1MzZjOWVmOTRiODU4MzNjZDAwYjMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNTkifQ==", "expire_date": "2017-05-21T02:24:13.810Z"}}, {"model": "sessions.session", "pk": "775j6j4r3gbocc2gizvfnix0lv9v3vhu", "fields": {"session_data": "ZGRjMzhjZWRjMzQyMTJiNmE3MGU5NjZlN2M2NTE4YmY5NDU3NWE0ZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImUyOTk3MjU1NzE0MzgyYjFmMWU3YzJiM2JjZWRkOGE3ZGQxZGJhOTUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzOTUifQ==", "expire_date": "2017-05-21T09:52:41.205Z"}}, {"model": "sessions.session", "pk": "77r54xjyyb4dmgnlzl4n9iksbxdoflro", "fields": {"session_data": "MTQ3ZTgxYTZmODA5MWY2Yzc4MWI5YWM4MGM4YzMwYWY2MmNhMzdmYTp7Imxhc3RfYWN0aXZpdHkiOjE0OTEzMDIzNjIuMjU2NDY0LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-04-18T10:39:22.283Z"}}, {"model": "sessions.session", "pk": "79a950qzg5ha1rwdfeba1m1kpnl0iila", "fields": {"session_data": "NGM1YzVmMTE5NzYyYzZjN2NiMzQyMmI4M2I5MjM5NGM3NjllYjVhMTp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiZTQ4ZDRlNTM0OGRkYjVmNjE4ZGM4ZDA1NTI2ODJmNzUwYjFmZmQ5OSIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQxMjg1MzAuNDczMjQzLCJfYXV0aF91c2VyX2lkIjoiMzAyIiwiX2RqYW5nb19jYXB0Y2hhX2tleSI6InZRclkifQ==", "expire_date": "2017-05-21T04:24:49.073Z"}}, {"model": "sessions.session", "pk": "79d9lq2i9rhfx5agrlei4gqjczm51ljr", "fields": {"session_data": "M2U3ODEyYTIwOWIyZjI4YTg0ZTQ4NzE1ZjAxNzM5MDFmN2FjN2RmYTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMzMjAzMDQuNDgxNTQsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJoTjR0In0=", "expire_date": "2017-05-11T19:10:44.491Z"}}, {"model": "sessions.session", "pk": "7ar9t9604j11feip66cqe2qezzrblh3e", "fields": {"session_data": "N2IwMTkzMDUwNTU4OWJlMGRkYjg0MjAxMjk4NWRkNWVhMzAzYWFjYTp7Il9hdXRoX3VzZXJfaGFzaCI6IjQ3Y2VkNjYwNWQwYTI5NzllZGNjOGI4MmE1MDIwZDE2ZTJjNzk0OTIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1OSJ9", "expire_date": "2017-03-31T06:43:27.093Z"}}, {"model": "sessions.session", "pk": "7axnnor2fahng83776az0989kusy8lf1", "fields": {"session_data": "YTdmYzYyNjgwMWQ4MDliY2Y1NTkzYzMxY2NjMjU5Y2VlYzVmYjJkMzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDE1NDMuNzkxODQ0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiaGFtVCJ9", "expire_date": "2017-03-30T05:18:03.801Z"}}, {"model": "sessions.session", "pk": "7dkc2jxvesp7cio61ijv1gtryuh8kwos", "fields": {"session_data": "ZjBmMmY1ODgzZTUzOTIyMWRjOTc1ODg4ODJjOWU4NTRjYTFlYzI5Njp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQxNTI1MTAuMzk5MjQ2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiR3hyTSJ9", "expire_date": "2017-05-21T10:20:50.409Z"}}, {"model": "sessions.session", "pk": "7fa16i5wmat36okzv7gaqi5qqratu8au", "fields": {"session_data": "M2RhYTIwNzBkMmEyNDAwMmEwOWM3YzQ4N2RlMDhkOWQ3YmQ2NTQ0MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImM3ODkzYjczYWMxMjBjNTk1OTQ2ODYwZTUwNGJmN2E1NjZhMDY1YzAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMyJ9", "expire_date": "2017-03-29T14:29:17.834Z"}}, {"model": "sessions.session", "pk": "7g4a4j8okxyzshstpwt0u1s7b51ky2mg", "fields": {"session_data": "Y2IxODA4YTk0MGFlMDE5N2FjM2VlNTc2YjYzYzZmOGNhODRlYTE2MDp7Il9hdXRoX3VzZXJfaGFzaCI6IjAyNGI3MzA1NDg3NDRmZDA4ZmRmODFhZTUyODg2YzFjMTU5NTMwMTgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjQifQ==", "expire_date": "2017-05-26T04:15:01.083Z"}}, {"model": "sessions.session", "pk": "7g5kef9irtth0khlibuz8itfwcn3q2ky", "fields": {"session_data": "M2M3N2RjZDdjZDRlZWIxM2E1MWY0NzAwYjQ2ZDIwYTJiYjNiOGYzYTp7Il9hdXRoX3VzZXJfaGFzaCI6IjE3MDYwMTVmZGIyNTBhYWRhZDM5OTU2NjE0MDhmM2M3Mzg0NWI2ZDIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNzIifQ==", "expire_date": "2017-05-28T04:00:40.580Z"}}, {"model": "sessions.session", "pk": "7h8ujon2ynqe22kewqtqt4zunclkfm6e", "fields": {"session_data": "ZmVkYmFkMDE5ZjNkNzQ2NjcxNzFmZWVkNTQyODU3MjFiNTBhNmU3Mjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQyNTgzODAuNzcxOTY5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiSGM1dCJ9", "expire_date": "2017-05-22T15:45:20.783Z"}}, {"model": "sessions.session", "pk": "7kk4wbjfop6ro0xi6ocxug66a265whe1", "fields": {"session_data": "ZmYyNTU1NGJhNjIzMDk4YzYxM2JhYjkwOGEyNGFkOWUzMmRiYTgxNTp7Il9hdXRoX3VzZXJfaGFzaCI6ImVkZDRjMjAzNjJlZTlmMmVlMWI3ODBhMTgyOGJjNjZjMjY5M2VkOTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMTAifQ==", "expire_date": "2017-05-21T04:08:20.280Z"}}, {"model": "sessions.session", "pk": "7lq4qln9pgq2pgipyc9qllbp3zpxdbpm", "fields": {"session_data": "MGIyNGU0OGIyYTM3MTU0MjdjY2IyN2VhODZiNjc0ZjEyZmQwY2Q5NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjUwYWIwNmYwY2I2ZjYxZmUwOWQzYjhhNTI3OTcxNGI4ZjkwMGZlNjAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyODQifQ==", "expire_date": "2017-05-21T13:49:33.469Z"}}, {"model": "sessions.session", "pk": "7q3zmwwqvy87wzgxoffda1usf4smc6a0", "fields": {"session_data": "YzY3NDVmM2I1ZmEyOTAwZDA1OWRiOTg1ZWU3NTU2NTYyZmM3ZGRhYjp7Il9hdXRoX3VzZXJfaGFzaCI6ImFmMWMwYTljOGNkNThmYjliY2FlMTc5NGIzNTRhYzZiYjRhZGEwYTUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNTAifQ==", "expire_date": "2017-05-21T04:09:04.973Z"}}, {"model": "sessions.session", "pk": "7r47p68cbhu55a9nf14q0d7tg0xqpwtr", "fields": {"session_data": "MmE3Y2Y5YzlkODljZTg3NDZiZjk4ODQzODA4NDc0NjU3MzA2MjY4MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZhMDY5ZTg0Mzg1NTNhNWI4Zjc4ZTY5NDE1YWQ1MWY3MjJjMmM4MTIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNiJ9", "expire_date": "2017-03-29T05:07:14.063Z"}}, {"model": "sessions.session", "pk": "7rnd5h1n2a9w7n64bvdk3bp8m9lbijaj", "fields": {"session_data": "Y2VmNzUxMGNmYzNkMGU2MTkxZmRiMmQyMzQ2NGE5ZTdlMzMyNDI4Njp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMzNDcxNjQuMDY4NjY1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoidVI1WiJ9", "expire_date": "2017-05-12T02:38:24.076Z"}}, {"model": "sessions.session", "pk": "7s0f5hsqswhm0ifwxamt4sowa0idj8ul", "fields": {"session_data": "ODg2YzZlMjFiODhjMzgzZWJmZGZlMzExZTUyOTI3NzQ0N2NlMzI3NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjZiYzJjNDQ5MTNiMTQxMTk2NzFjZjE0OWNlN2IzYzE2YzkxNDljNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5OSJ9", "expire_date": "2017-04-05T04:16:26.222Z"}}, {"model": "sessions.session", "pk": "7t6jz7ly8jtbj2bjq4ss8gr4jxo5o44e", "fields": {"session_data": "ZGQ2ZDIzOGZkNGYxNjAyZGFlMzQ0OGVjNzU2NWYyYjJhMTFmMDFlYjp7Imxhc3RfYWN0aXZpdHkiOjE0OTQ0OTQxNTEuMTkxNzA4LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-05-25T09:15:51.219Z"}}, {"model": "sessions.session", "pk": "7tawx5r5gkncvjxzkz8hwj47ksfnqev7", "fields": {"session_data": "MmE3Y2Y5YzlkODljZTg3NDZiZjk4ODQzODA4NDc0NjU3MzA2MjY4MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZhMDY5ZTg0Mzg1NTNhNWI4Zjc4ZTY5NDE1YWQ1MWY3MjJjMmM4MTIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNiJ9", "expire_date": "2017-03-29T05:41:00.446Z"}}, {"model": "sessions.session", "pk": "7wxjasdxv0pb4n7baxhsm6xyiem7s3tu", "fields": {"session_data": "M2RiZWNjODQwM2Y2YmFhZDQ0ZTAzNWIzZGNiMWM3M2FiMDA3YzFkZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjRhZGE2YmI1MDIxNTk4Mzc3N2E5ODhjOWQ4ODY3ODEwZTAxY2M4YTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNDYifQ==", "expire_date": "2017-05-14T06:41:31.292Z"}}, {"model": "sessions.session", "pk": "7x5b860y48s23subgy3ma895tlr40i8x", "fields": {"session_data": "M2U4ODEyNjg3N2Q4NDdhZWE5OTBiOGNmMDc3Zjc4M2IwZWM3MDJmNTp7Il9hdXRoX3VzZXJfaGFzaCI6IjNkYTYzYTg5NjNjNTEyODkwZTZkZmQ0MWFhN2VjNTQ0NTVjZjhiMjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMCJ9", "expire_date": "2017-04-29T00:10:21.241Z"}}, {"model": "sessions.session", "pk": "7xg5bmyce8wsjvcor3ae5qfl4j6fvwzk", "fields": {"session_data": "MWIzMjI5YWJjOTU3NDQwMDYwNzJmZWZkN2Y4M2M2Mjc5OTY2ZDRkZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjAxNDU2NzBjZTg5NDQ5ZWFhY2U1MTQ0ZTVkOTAwNWVkYmEzMDJlNzYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMiJ9", "expire_date": "2017-03-18T22:44:49.178Z"}}, {"model": "sessions.session", "pk": "7xj13nptg6b2z4njqmtna3ixgj8kfs4c", "fields": {"session_data": "Nzg5NmIyZmI2ZmI3Yzc3NGRmZTU2ZGVhYzQ4YmRhMWY4M2JkODQ5Yzp7Il9hdXRoX3VzZXJfaGFzaCI6IjllNzAxYjIxZGQ2NjFmNjY0NWRjMmNiYWMwZTQzZDFiNDdlMzlhOTkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNSJ9", "expire_date": "2017-03-20T11:41:47.476Z"}}, {"model": "sessions.session", "pk": "7y03k41mqd1sctju8c1kb8rzdhl674mr", "fields": {"session_data": "M2YxZWZjNmQwZDZmMGFiNzAyNjhjZjRhODY5NTMzMjBjYTI0OTMwNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjkzZjJjN2FhNzY2YTU1NzUxYzhhNzU1YWU1MjE0ZmFmMzRjZmRkN2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5In0=", "expire_date": "2017-05-19T12:46:03.390Z"}}, {"model": "sessions.session", "pk": "7yoiltbuudlmbnd56w35cokh20cym7ol", "fields": {"session_data": "NWRjZjBjZGE1OTlmNTZmZDRjZGQxZTM5ZTUxMGYyMmM5Nzk4NGFlZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjBkYTU1NmJhMmQzYjQxNjY0NTUwOTkzMzY4NzRiNGZlM2Q4YWQyYTIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1MSJ9", "expire_date": "2017-04-04T03:36:11.094Z"}}, {"model": "sessions.session", "pk": "7zrlzl7qa59aso505thphi40fsvg9rzj", "fields": {"session_data": "OTkxZGM4MDdlZGViMmY1MGUwNGQyZDgzOGY1NTZmODQ3NDZhMmYzYzp7Il9hdXRoX3VzZXJfaGFzaCI6IjQ4ODVlNjk5OTM2ODUwYjg0NzkwN2Y4NTcyMDM0ZDg1MTM5NDAzN2MiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMTkifQ==", "expire_date": "2017-05-19T13:17:31.563Z"}}, {"model": "sessions.session", "pk": "81jqd1kgp9ciyrfbxsm53k53ojn6pmid", "fields": {"session_data": "MjdmNjZlYmRjYTA2ZGZiNDljMGJhOWI5MjdjM2Y0MzM5NzFiZDc2Nzp7Imxhc3RfYWN0aXZpdHkiOjE0OTI5OTU1MzAuMDk4MjQ0LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-05-08T00:58:50.103Z"}}, {"model": "sessions.session", "pk": "82mr0pwuzel2yqwre401l243kapay2ge", "fields": {"session_data": "N2Q4YmJkNjRjN2JhYWYxMWE5YmZiNGU4NzU2ZjQwZGFmNmFmYjBlOTp7Il9hdXRoX3VzZXJfaGFzaCI6ImY3NDRjMWJiM2MxYjk0ZGMwYmRiZGU2YmZiNGJhNDI4NWZmYTNkZDAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMTIifQ==", "expire_date": "2017-04-20T13:28:14.554Z"}}, {"model": "sessions.session", "pk": "82om2iwwiekn45c3d70n22vwh69loiam", "fields": {"session_data": "N2EzMmM1NDgzMjkyNzUyNTI0Yzk5MWNlZTI5YmNiNTkxMjE0ZTI5Mjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTA2Njk4NTAuMjQ1MzczLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiVjhoeiJ9", "expire_date": "2017-04-11T02:56:30.261Z"}}, {"model": "sessions.session", "pk": "82x81sma04x2btwgero8a4kheh7jm2xk", "fields": {"session_data": "NzliYWQwNjdjNWZhZjRkYTVmYTEwY2Q5YTc2NWNiOTk0MWVhNzE1Zjp7Il9hdXRoX3VzZXJfaGFzaCI6IjkyMzg1MjI5MGJiMmJmOGQwNzM3YzE3NjE1ZTAxOWNiNzI5MTIwZDciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjgifQ==", "expire_date": "2017-05-12T06:20:39.351Z"}}, {"model": "sessions.session", "pk": "845z2cvza652daqyxht4hxi932x4610m", "fields": {"session_data": "YTU0ODkxNTQ5YzhlNTRkYzRhMTMwZjllZmVmMmNkOTEyNjY0YzU0ODp7Il9hdXRoX3VzZXJfaGFzaCI6IjdmNWVkZmJhMDAwZTkyNjc1OGEwMmFiMjU2NjM0NTdkMzBkOGI0MzIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyODAifQ==", "expire_date": "2017-05-18T04:14:59.030Z"}}, {"model": "sessions.session", "pk": "853qn1fs7uwcptrqtd8psi19id5oeu9u", "fields": {"session_data": "YmE0NGJmOTEwOTc3YzRlNmM4NmE5YzQzNzIxMjQ4OTZlMDNiOWMwYzp7Il9hdXRoX3VzZXJfaGFzaCI6ImY5MmVlNGE1YzhiODdjZjY4ZTlhOWM2YThlYzYxMDY2NWRmODJlYmEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxODcifQ==", "expire_date": "2017-05-28T04:01:18.217Z"}}, {"model": "sessions.session", "pk": "85kkisyrhyjcdjzq4m38b020nnurcilu", "fields": {"session_data": "ODJlYTlhNzRhNjI2NDgxOWYxNGYxZGJjMjJjN2I5NjAyYmE0MmMzODp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTIwNzA1MzIuMTIyOTE0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiVFpkNiJ9", "expire_date": "2017-04-27T08:01:12.134Z"}}, {"model": "sessions.session", "pk": "85xoiaznwchu9gpdjxa1wdxmepak9lna", "fields": {"session_data": "NGMwNTY3YzE0MGE1ZjZmZDQ4NDU3ZmVjMmIwNjE1ZGI3NzEyNzAxMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjllYzY5ZmY0NjE0NzIzNjM1NDAyM2ViN2I4ZDg2OWIxOGY0MGI5ZjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzIn0=", "expire_date": "2016-12-26T11:33:31.441Z"}}, {"model": "sessions.session", "pk": "8695jl2qrnli7ekyi16mk98y8j79zm3f", "fields": {"session_data": "ZGQ3Y2JjM2FlYTJhYmU2ZjBjN2ZkMDg5OTM0Y2ZjYzkyZjEyMjY5Mzp7Il9hdXRoX3VzZXJfaGFzaCI6Ijc3Zjk4N2FjZDVlOWVhN2U0NmJmZjQ1YzQ4Njg1ZmVhYmQ0ZmZjODMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNDgifQ==", "expire_date": "2017-05-28T03:58:47.514Z"}}, {"model": "sessions.session", "pk": "86crm44o99fpekc13akzk6fnnijj821d", "fields": {"session_data": "ZDNhNjBiOWFhNzc4MTE1ZjU1ZmM4OTM1NjVhZDRjMzhlZDI2YjA2MDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxNzYwMjAuMDc3Mzg1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiU0NIMyJ9", "expire_date": "2017-04-05T09:46:00.087Z"}}, {"model": "sessions.session", "pk": "8847diyt2v237f7p3duakigktnnoo35h", "fields": {"session_data": "NzExNTY1M2NhZjVlZThlN2FlNTk5ODQwNGIzMzk1OTJlZTM1ZDI1MDp7Il9hdXRoX3VzZXJfaGFzaCI6IjA5N2Q1ODAzNDk3ZTZkZTE2OTk5YmZiYmI2MWZmOTI3YzYwMTdlNTMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTIifQ==", "expire_date": "2017-05-19T12:45:12.749Z"}}, {"model": "sessions.session", "pk": "88zim1v9jp4uhov9zl6lthipzs5d6m3l", "fields": {"session_data": "MzRiNTEzYWE1MWI5YzQxMGY1OWFlMGI2MDExNTYxZWI2N2JiMjM3NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjlmNzk4MTkxNTExYzA4ZWRiMDA5YWRhZjU3NGE3OWZjMjhjYTVhNjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5In0=", "expire_date": "2017-03-29T04:32:54.161Z"}}, {"model": "sessions.session", "pk": "8a3vodcogfgsp1lo0dgd0qwhu8uq9kox", "fields": {"session_data": "Nzg5NmIyZmI2ZmI3Yzc3NGRmZTU2ZGVhYzQ4YmRhMWY4M2JkODQ5Yzp7Il9hdXRoX3VzZXJfaGFzaCI6IjllNzAxYjIxZGQ2NjFmNjY0NWRjMmNiYWMwZTQzZDFiNDdlMzlhOTkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNSJ9", "expire_date": "2017-03-29T08:55:29.796Z"}}, {"model": "sessions.session", "pk": "8a8ajjz3o2qdjzhjnojpam1sku5kgl3u", "fields": {"session_data": "MGIzY2IzZmEwZDdhYjlkNWE3MDU4ZjFlYzUxYTc5ZjViNjUxMWM5Nzp7Il9hdXRoX3VzZXJfaGFzaCI6IjZkYmQzN2NlODM4Nzk4N2M2MTVlODlhNDVjNjQ0ZGE3MTczZDRkZDIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTYifQ==", "expire_date": "2017-05-28T03:44:08.677Z"}}, {"model": "sessions.session", "pk": "8ay0pjnnueihd1jfpthwyjgxyw8o0yh6", "fields": {"session_data": "NjYwZDNhMzAwMTQzNTRkYTIxYmMyNzBjNjI3Mjg5NTZlYWE1NTYzMzp7Imxhc3RfYWN0aXZpdHkiOjE0OTQ3NDk5MTIuNzU1NTIzLCJfYXV0aF91c2VyX2hhc2giOiI1OWYwYjAwNDNiMTNmNTFjNmU1OWQ1YTUzNzg5MTUwOWE2NDZlZWM4IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-05-28T08:18:32.757Z"}}, {"model": "sessions.session", "pk": "8hdrl9jrj6nm2swfrecm16uqkx280sfd", "fields": {"session_data": "ZTU4MmU3OGQ4NzQ0ZWM5YWZhM2FkMDE0ODYwYmI2NjU5OWZiNzMxNTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg2NzFhNjM4NjM4NTUzZGQzYzBkMDYyMWU4OWY1YmMzZTc1M2Q3NWUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzkifQ==", "expire_date": "2017-05-21T14:33:44.870Z"}}, {"model": "sessions.session", "pk": "8hhaiowqeb78ab8v0ta7nbom0uodznww", "fields": {"session_data": "ZWFmMjYzYmUzMTU2ZGY3ZTRhOGY3MDBkNjNiNjI5MDQyZTRjY2I0ZTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDE1NDQuODA2NTgzLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiYTI0ciJ9", "expire_date": "2017-03-30T05:18:04.815Z"}}, {"model": "sessions.session", "pk": "8hndowz130s1w0eqdkbrrissu113ynvq", "fields": {"session_data": "NGExYTJjODQ2NGRkNmQwNDg4Njc1ZTNjNzkyZjI5OTk3NjA4Y2JmYzp7Imxhc3RfYWN0aXZpdHkiOjE0OTQ1NTgzNjUuNzQ1ODk0LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-05-26T03:06:05.753Z"}}, {"model": "sessions.session", "pk": "8ojpbhgkp9pvod6pvv056w79p3pmh0r8", "fields": {"session_data": "OGFmOWZhMDE1OTBkODJmNGYwODAwNjgzNDBmMTNmNWJmMjdjMWIwYjp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg0Yzc0OGY4ZWRmZDRhNzFlNzFkYzc0YTc2OWY3YjY0N2MwYTJjMTkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxOTMifQ==", "expire_date": "2017-05-28T04:17:30.573Z"}}, {"model": "sessions.session", "pk": "8poyvu2eo8so5nhwx60e0omvi15i0ols", "fields": {"session_data": "NTAyNmYwOTQ2Yjk4MzhlZWY5YTBmZmJlODdhOGQ1ZDgxZTM5NWUyZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZiNTAwMTQyOTBlMjAzNWY2MjkyYTY1NzEwYjhhZGQ5OWNlNGVmNmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2OSJ9", "expire_date": "2017-05-21T12:19:02.579Z"}}, {"model": "sessions.session", "pk": "8tdf7qc3l6md6p2lskv7hmcixn2xhgc1", "fields": {"session_data": "ZDY3OWEzN2M5ODc4NjE3YzBlZTE4ZmE4Mzk0OTgwY2FiOWI3MDNhODp7Il9hdXRoX3VzZXJfaGFzaCI6IjA0MzVkYzJmMWViM2JiMGIwMDAzZmNiNDE3MzJkYmY0MWI4ZDkwM2MiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2OSJ9", "expire_date": "2017-04-01T03:55:38.002Z"}}, {"model": "sessions.session", "pk": "8trh7ruizglvojv1naxzgkjb14q7b2ny", "fields": {"session_data": "NjYyN2Y4NWE1ZDNjOTQxYjIxNTg4YjkxMTZiN2UxOGFmZWJjMGFiMTp7Il9hdXRoX3VzZXJfaGFzaCI6ImMwNTU5NDU1NjI0MGMzOTM0NWYzNjY2NDA4OTU0NDkxODE5MTg1NDYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMDkifQ==", "expire_date": "2017-05-19T12:36:28.087Z"}}, {"model": "sessions.session", "pk": "8wkd2nzd8jzshgdc1xct7hpm9rmzloap", "fields": {"session_data": "OTk4NzYzM2Q4ZDYzYTdkNTFkYTU3NzA0ODdjNmZhMGY5YmMwNDMxNTp7Il9hdXRoX3VzZXJfaGFzaCI6ImY5MDhkMzYwYzMzNjVjZWZiMjY3Yjk4ODhjZjg2M2Y4NjIxZjBhMjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0In0=", "expire_date": "2017-05-01T13:23:31.793Z"}}, {"model": "sessions.session", "pk": "8z46bn57ezun9g6lyjjtm1bzkkho5lpy", "fields": {"session_data": "Yjc3OGJjNDg5NTJlNjI3OGMwNWU0MmM1MThhNGIzY2E2ODRkNjA3Mzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTIzNzI0NDEuMDYzOTE0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoidzhkWCJ9", "expire_date": "2017-04-30T19:53:01.070Z"}}, {"model": "sessions.session", "pk": "904afh2sl7q4j3gtjc8a5f5hhiu2q979", "fields": {"session_data": "MGYzNzVlY2YzZjJhNmM3YWY1MDg2YWUwNDJhNDE1ODA4Y2YzZDgxMzp7Il9hdXRoX3VzZXJfaGFzaCI6ImE1YWVkY2JmOGRjYjIxNGRiYjJhMWYxMDYxM2RmMzUyOWJkZmE2ZTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTcifQ==", "expire_date": "2017-05-21T03:37:37.423Z"}}, {"model": "sessions.session", "pk": "9227ejt02ttyvwp0nm9msfmq5ct261ft", "fields": {"session_data": "ODA1MzY5MzBjYzdlNzgyODE1ZDc0NGFjNGJjMDA0ZDlkZmI1OGJkYzp7Il9hdXRoX3VzZXJfaGFzaCI6IjRlYzA3NTMzNzA1MjkxYzBlOWM1MzZjOWVmOTRiODU4MzNjZDAwYjMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNTkifQ==", "expire_date": "2017-05-20T18:03:10.353Z"}}, {"model": "sessions.session", "pk": "931z9bpo7md5pfnhhu934d9vomu1pxe1", "fields": {"session_data": "NmQ1ODVlYWJhNDg4MzFkZjUwMDE0NzQyYmZjMTNkYjRmYzU3NzEyZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImM2YTc1MDVjNmNmYWMyNjE4NzJlMGQ2MjFiMjUzOTIxN2U5ZjdlNjkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMCJ9", "expire_date": "2017-05-28T02:24:22.431Z"}}, {"model": "sessions.session", "pk": "94y47r0zmkkopqetqez3992tavseb7zg", "fields": {"session_data": "NGQ5N2UwMjA0ZWNiNmZhMzEzMmMwNDEzNjFmYjBjZTA5MjI0ODI0ZDp7Il9hdXRoX3VzZXJfaGFzaCI6ImMxYjlkMDg1NTc3NmQwNDkxNzk1NmNmNGYwZGI4OWJmZWEzMGNhNTIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzEifQ==", "expire_date": "2017-05-21T02:40:22.690Z"}}, {"model": "sessions.session", "pk": "95iifeunqzg15fd4g2zgdsq4apggg394", "fields": {"session_data": "ODJiNWZhMzA2NTBiYTlhMjU4ZTRmOWZkNzU1ODk5OGNiZjZmZDQxNDp7Il9hdXRoX3VzZXJfaGFzaCI6IjVhYjlmZmRjMmNlZWFiY2M0MmE4MmMxYTQxNmVlOGY0OGUyMmRkY2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2MSJ9", "expire_date": "2017-04-07T12:48:37.115Z"}}, {"model": "sessions.session", "pk": "95oz4vrejrb79euh0w4psq4crih8lyew", "fields": {"session_data": "MDg0MDAzZjRhOTg5ODg1M2MwOGFiMjUyNDRmZDNlMjkxZDkwYWMxYzp7Il9hdXRoX3VzZXJfaGFzaCI6ImJlYWM1ZDM3NGQ3YjczMDZjYjQ4YTZiYTFkMjZkMmQzNzg4NzgwMjIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMzgifQ==", "expire_date": "2017-05-10T14:07:13.307Z"}}, {"model": "sessions.session", "pk": "95txcie21uu2xl7cdqbvphzqouts2u56", "fields": {"session_data": "OWNhNTY0NzI3YzJlNmUwNGRjYTNiYjg5YTk0Njg0OTQ5NmRhNDgxNzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQwODA4ODUuMjcxMjM0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiT2tHeSJ9", "expire_date": "2017-05-20T14:27:05.287Z"}}, {"model": "sessions.session", "pk": "97sgikgpbs8quprfd4acvkh3p448baow", "fields": {"session_data": "ZDU4MmZlZDc0MTY2MjJlOWRmMjg1ODMwNzM4Yzg1MWIzNGNjNzIzNDp7Il9hdXRoX3VzZXJfaGFzaCI6ImRmNjlhNmRlMWVlOTlhM2E1Njg1ZjU3ZDJkMzY3OTg4ZTMyOWUzYTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzEifQ==", "expire_date": "2017-05-21T01:29:19.428Z"}}, {"model": "sessions.session", "pk": "97tkbpkdg01oihklwqu5ri9fk7j2j8h3", "fields": {"session_data": "YTQ5ZjQyM2NlZjY2ODBlMDAyZjYwYTZhYjAzZGIyODE0ZTc3OTFmNDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDE1MzQuODU0NzY2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiUENBbSJ9", "expire_date": "2017-03-30T05:17:54.863Z"}}, {"model": "sessions.session", "pk": "98f99156mgqfrn90oxnhmodojmbvu7o5", "fields": {"session_data": "ZTNiYzU1NGZlOTE3YWViYTRjODc2ZjcyZDAxYTVhMDllM2Q1OTk3Njp7Imxhc3RfYWN0aXZpdHkiOjE0ODk4MzEzMjEuOTYxMjI0LCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-04-01T10:02:01.978Z"}}, {"model": "sessions.session", "pk": "98mhbtlt21850uouk2puymcgyyk3hpna", "fields": {"session_data": "ZTQyNTYwN2IxNjA0MzljYjZjMDIxYjY0MDhlMGVmN2YwZDkxNTAyNTp7Il9hdXRoX3VzZXJfaGFzaCI6IjIwZWVkN2E5YzAyNDFjMmE3ZmUyYWMzZDc0ZDAxZDJkYjcyNTEzMDciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDAifQ==", "expire_date": "2017-04-05T04:30:30.527Z"}}, {"model": "sessions.session", "pk": "99x8psx9m9omlid9o6q1a9tgk89b7zqi", "fields": {"session_data": "MjhlMDVlZDVhYzI1ZDRmOGIwYzBkMWVmZjY4ZTlkYTFlMDgwMTc1OTp7Il9hdXRoX3VzZXJfaGFzaCI6ImQ0MmYyNjBlYTI5ZmZiZDJiZTUyOTk4ZWZkNjJkYjVmYTdiYjMxMzMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyODMifQ==", "expire_date": "2017-05-21T04:05:25.398Z"}}, {"model": "sessions.session", "pk": "9ad9hdnozpelm4wpodzizvtnk7zhxo6c", "fields": {"session_data": "M2M0NmFjYmQzNTAwMGI1YjI5NWFmODgyY2ZjMjI2M2MxY2VhZTdkODp7Il9hdXRoX3VzZXJfaGFzaCI6IjU3ZmM5MDgyZmI5MjRmMDJjMDcyNWE5MTI2MTVmNmY1YzNjYzFhZjIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMyJ9", "expire_date": "2017-04-06T05:53:50.278Z"}}, {"model": "sessions.session", "pk": "9aml6xfp6vj4t3bev9fjzkjmb8ptxtuz", "fields": {"session_data": "OTU3ZDQzMWQzNWVhNjc5OWE4MzY3NjZhYWY5Y2M2YTZhNTZmOGYwNTp7Il9hdXRoX3VzZXJfaGFzaCI6IjIzZGNiYTJkYzVlYWIyZWI0NGViZTUyN2I5Y2I0YTQwOTYwZDRkNzgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzUifQ==", "expire_date": "2017-05-12T09:39:15.592Z"}}, {"model": "sessions.session", "pk": "9b38lqtf9pl0c4xtmtfvcpysz1t3loce", "fields": {"session_data": "YWVhNWViODE3ZmVhYzkxMjM1N2Q4NTE4ODBiY2EzMjcwMGFlODQ1ODp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk4MTA4NTYuNDY2MjksIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJFN0t1In0=", "expire_date": "2017-04-01T04:19:56.474Z"}}, {"model": "sessions.session", "pk": "9b5lupg1yufbbw15wh5t2sgwiucqgn38", "fields": {"session_data": "ZDgyNmE1NDIyYWQ5ZTRhNmU2ZWU2ZGM3Nzg3NWQyZDMxNGZlYTFiODp7Il9hdXRoX3VzZXJfaGFzaCI6IjU4NjljMmRkZWU5Y2Q3NDBhNWQ2M2JjZmIyOTExNGQ3MDQxZWY2NzgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzAifQ==", "expire_date": "2017-05-21T04:17:07.555Z"}}, {"model": "sessions.session", "pk": "9bi6f5386w0u8ingkjnshpb0gbkh51rt", "fields": {"session_data": "M2I4Yzk1NGM5ZGZkN2RlYTFjZDMzMjcwMjM0OTNiMjVmYTRkMjhjYzp7Il9hdXRoX3VzZXJfaGFzaCI6Ijk1MTNiMDU2ZTNhOWZjMjZkOThlZjAxYzJjMjQ5OWYyMzBlYmQ0NzkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1In0=", "expire_date": "2017-05-26T07:03:51.839Z"}}, {"model": "sessions.session", "pk": "9cipo9bhp8jfexazgyqmnfphrje4xmkg", "fields": {"session_data": "ZjVhOTFiMWFiYmJkZmY4Zjc0MzNjYjJmYmM4NDc1YmVmMjJiNTlmYjp7Il9hdXRoX3VzZXJfaGFzaCI6ImIxNTk3NTQxOWI4N2MyOWQ3YTY5MjAwNzRmMmNkNDk4MWRiMzNhNWEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMSJ9", "expire_date": "2017-03-29T05:31:09.873Z"}}, {"model": "sessions.session", "pk": "9dn05wg6rt2p2oipmv4lvtav1ohislmd", "fields": {"session_data": "OTY5ODE4MThlY2Y0NTJiNjllYWUyNDk5Nzc1OTViMWQwNGMzYTAzMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjI1OTdlZjY3ODUxZmE1YjQ5ZTlhMDRlZWNmMTIyYzBjN2Y1YTgwZmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MTYifQ==", "expire_date": "2017-05-25T12:20:14.515Z"}}, {"model": "sessions.session", "pk": "9dv9mfyq69ycf9i7rya6oz8l0izyrwgx", "fields": {"session_data": "ZWY2MjEyMzMzNjcyYzRiMGUzYjgxMzgzMjFjNTA3M2NjNzcyNGE2MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImY3MDZiZGMyNWU5ODA1OGFhZjkyOTc1ZjIxMWNlMWMzZmI1Yzc3YTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNjMifQ==", "expire_date": "2017-05-21T02:06:10.107Z"}}, {"model": "sessions.session", "pk": "9ffizx7z4ihq1yl3087dw37rgnlot457", "fields": {"session_data": "NmI0MzJiZjZmNjUyMzI5ODgwMjcyYjgwNGExODRlNGQ2NzAyYjg5NDp7Il9hdXRoX3VzZXJfaGFzaCI6ImRmOGM5NGJiNzNmZGYyMTAxZjlhNjhiMWE1YzhlZWI1NWUxYTkwMGYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNzUifQ==", "expire_date": "2017-05-28T04:11:49.986Z"}}, {"model": "sessions.session", "pk": "9fu6waauaqvdtx4psv7pb0m0r45ehg60", "fields": {"session_data": "N2ViNzI1NzIyMjk0ZTIwZmU0YjIyMTliZGQ2ZTU3Y2NkNTliMjcwNjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5NzczMDguMzg4NDA5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiTUJOaCJ9", "expire_date": "2017-05-19T09:40:48.402Z"}}, {"model": "sessions.session", "pk": "9humfgrpkoei124ue0j4c1lovsi3iitv", "fields": {"session_data": "NTc3NDAzMjBhYmE4Nzc1ZWQ2NDEzMmNjYjgzZWM4YmZhY2ZmNWFjYTp7Il9hdXRoX3VzZXJfaGFzaCI6IjgwOGM3ZTE4MjBlZWNiZmM3NjRmMzM4NzQ2MjM4NGExMGUyZjVjN2MiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzgifQ==", "expire_date": "2017-05-21T04:06:39.098Z"}}, {"model": "sessions.session", "pk": "9ieogghz4adbhdw8mr5pc1fjdnf4g5xb", "fields": {"session_data": "NjdiZWUzMjVmNzUwMTI5ZTI2ODJjMjE5NzE5ZWFjYTNiZDA4NTRlMDp7Il9hdXRoX3VzZXJfaGFzaCI6ImI0MzY3MDNhMTcyYmVhYzk1OTZiN2U4MDk2ZTAxZDVkY2VmODY4YmIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTgifQ==", "expire_date": "2017-05-21T04:10:53.896Z"}}, {"model": "sessions.session", "pk": "9j7l8k9wb0v855a9z5a35afq7a0h7xkn", "fields": {"session_data": "YzA3MmJkMGRjYTY2OTVmOWQ5OGNlNDJjYTY3NGNlNWZmYjZhMzIyODp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg3ZTE3ZjU2NmE5OGRkYTYzNjY4Yzc4MjM2Y2Q3NTAxYzMzNmE0NmQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDIifQ==", "expire_date": "2017-04-05T04:37:47.678Z"}}, {"model": "sessions.session", "pk": "9nign3usu0b3rkn81ar2noddezu9qibf", "fields": {"session_data": "OWQ2YzZiNTA4YzIwMjE1NTAxY2QzNGM0MDNiYTViMDdiOTI0ZjAzMTp7Il9hdXRoX3VzZXJfaGFzaCI6ImIyNjJlMTQ3YzMyZGIzOGY5OTllZmEzNGQ2N2Q0MDMxODlkMTA4ZmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0In0=", "expire_date": "2017-04-02T04:42:28.919Z"}}, {"model": "sessions.session", "pk": "9nsa0tgflrtjrwg79zptrf6694dsgfmn", "fields": {"session_data": "ZTU4MmU3OGQ4NzQ0ZWM5YWZhM2FkMDE0ODYwYmI2NjU5OWZiNzMxNTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg2NzFhNjM4NjM4NTUzZGQzYzBkMDYyMWU4OWY1YmMzZTc1M2Q3NWUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzkifQ==", "expire_date": "2017-05-21T14:32:03.393Z"}}, {"model": "sessions.session", "pk": "9of8nm4mcldm3vbqp1zbex8alvtkroi1", "fields": {"session_data": "NjhlMzc1NzhiYmZhMWZmNzBjYTY0NTAwNmRkMmJjNzY4MjA4N2VkNTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMzNTE4MjMuNDA5MTI1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRDhwYiJ9", "expire_date": "2017-05-12T03:56:03.423Z"}}, {"model": "sessions.session", "pk": "9pfcwyn7h3t3p0sxt4edx3408b1qm2ws", "fields": {"session_data": "NTEyOTBjOTczYWUzMmVkMjljMmIyMmYzYTRiOTcxNmVhZDBkOTNjYzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTI2ODI2NjEuMzM0Mzg1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiMnhzRiJ9", "expire_date": "2017-05-04T10:03:21.345Z"}}, {"model": "sessions.session", "pk": "9phooxoj4vell0i59a545aaq4ypluy83", "fields": {"session_data": "NGY3NGY4MGI0YzFhZDk2Y2U3MTM1NDUyNzhiZmEzNTdiODRjMTNjYzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTE4OTAzMzIuMTIwMzAzLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoicGZhQSJ9", "expire_date": "2017-04-25T05:57:52.129Z"}}, {"model": "sessions.session", "pk": "9pjxxycc9dl1n3ywl5if9k0496yic7p4", "fields": {"session_data": "ZjhjYzk5N2RhMWZjNzMzYzg3MDU3NzM0ZjJjM2I1ZGZiYzM5MDA3Mjp7Il9hdXRoX3VzZXJfaGFzaCI6IjQzNGIxYTZlNjllMzA1MGM0OTkwZjI4MmVlYTQzZGIxMzkwNWQ1NTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNTcifQ==", "expire_date": "2017-05-21T04:58:03.361Z"}}, {"model": "sessions.session", "pk": "9pq3tl6to394x2g96bgknfjwt7c74pjv", "fields": {"session_data": "NGZhNGRhZmUzNjY5Y2NmODg3NTAzODQ4MTJmMDBjMzk1YjU0NTAwYjp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiYjM2ZGMxZWRmMjM4OTIxZTc1NDk5MGY0Yjc1MTYzN2MzMTY0ZDNjMSIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQ3MzIzMzguMTkwMTUsIl9hdXRoX3VzZXJfaWQiOiIzODEiLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiS3VVUyJ9", "expire_date": "2017-05-28T03:27:14.993Z"}}, {"model": "sessions.session", "pk": "9pspogdv8po2y5gx8qc8usuc5ratsz9p", "fields": {"session_data": "Y2FlZjEzNzkzZWY1YmZjYjAyY2ZiZjYwZTcwN2U0ZTcwOTg3NDg3MTp7Il9hdXRoX3VzZXJfaGFzaCI6IjQ0ZmU3MDRhMWQxYmNlZDkxMDI3NmVjNDQ0ZTExMGFmZWI0NmNjZWMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4In0=", "expire_date": "2017-05-21T09:27:19.493Z"}}, {"model": "sessions.session", "pk": "9qa9e3b10xbhthhxsiofhl1w2a0ov55i", "fields": {"session_data": "M2QzNjViNWZhYzkyODE2YmQ1NGNhMmIyNzIzNGE5YjY3ZDRhZmM1ZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjQwYjg5YjFiY2U3ZDlhYjRhMjdiMTIxODgyOTE4YzI5YjBhODE0YzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2MyJ9", "expire_date": "2017-04-01T14:30:55.276Z"}}, {"model": "sessions.session", "pk": "9tt1ie8zhbg29bp4tec966rqfoiuf2gd", "fields": {"session_data": "OGI5YTk2NDg0ZWE4OTYwZTg5NjEzMzQ2MzkyNjI0NTZlODBkNDg0NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjgzZjFmYmQ1ZjI3YjYzZGQxN2NlZTZlNjBkZjgxODg3NGYwNDdiY2IiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNjkifQ==", "expire_date": "2017-05-21T04:03:55.645Z"}}, {"model": "sessions.session", "pk": "9udqlxffcfp91mjboimsexphbvixb87a", "fields": {"session_data": "NTc3ZjZiYzg5ZDc2OTY4YTQwZGI2NGI3NjkyYjJiNWVjNzIwYjdmZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImIwNjk5NDE0YWM2ODU4NWViMTMzZTAwNmY1Y2Q5YzZmODRkMTc5NGEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzOTAifQ==", "expire_date": "2017-05-21T05:06:09.487Z"}}, {"model": "sessions.session", "pk": "9vum6lv0vwyp62wd8eualdz0wy4nbwyk", "fields": {"session_data": "YzJkM2U3MGM4ZTZjYmI3NzNjNjZmOTc3MDY4YmE0MWVhM2I5MmFmZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjA1ZDhkMzVjZjg0YTc0MDlmYjdjZmQxZTE5MjM4ODNjOTdhMTIwZmQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI3NyJ9", "expire_date": "2017-04-01T04:13:04.389Z"}}, {"model": "sessions.session", "pk": "9w0yemu2u5jdxh646xy816hbqw563lhp", "fields": {"session_data": "OTQ3MzY4YzFiZDViZmFkNWNhZGVjYzk0N2Y1YzY1MzlkYTMwOGQ4Njp7Il9hdXRoX3VzZXJfaGFzaCI6IjE3M2IxZWMyYjE0MmI4ODk2NDUxYjg4MWQ0YTdlMmU0OWRhN2I5NTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMTQifQ==", "expire_date": "2017-05-19T12:52:10.476Z"}}, {"model": "sessions.session", "pk": "9y4f2jgrlfvbcstw3qg75acyja9btpf1", "fields": {"session_data": "NzA3YjhmMDBlNmIzMjc5M2FiNDI3NmE3OGIzMzdmODNlYzhjNWNhNDp7Imxhc3RfYWN0aXZpdHkiOjE0OTQxNzE5MzkuNjIxMDM1LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-05-21T15:45:39.630Z"}}, {"model": "sessions.session", "pk": "9z9kmkle7vldygg5hq3cxczwwjh7og2t", "fields": {"session_data": "MmE3Y2Y5YzlkODljZTg3NDZiZjk4ODQzODA4NDc0NjU3MzA2MjY4MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZhMDY5ZTg0Mzg1NTNhNWI4Zjc4ZTY5NDE1YWQ1MWY3MjJjMmM4MTIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNiJ9", "expire_date": "2017-03-29T05:18:08.911Z"}}, {"model": "sessions.session", "pk": "a069c05pls6mdhgbosmpkq6zf1irxvvf", "fields": {"session_data": "NzczZjQzN2ZkZDFlYjc2NjMyOTM4MWVkMDBjMGE0OTZlNzlmMGYzODp7Il9hdXRoX3VzZXJfaGFzaCI6IjMwNDMzZmYwNjJiNzBjNmJlYWY2YzlhOTdiYmY2YTE4ZDgxMjYwY2IiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNjAifQ==", "expire_date": "2017-05-28T03:58:51.545Z"}}, {"model": "sessions.session", "pk": "a0v0b0vileqf5y6a3fl0i0nf4al03m3c", "fields": {"session_data": "NGZiMDAxMGM5YzY5NDNkMWU2MjAxZjM5YjU4ZTAzOGM0OWU3MmI3Yzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODE2MjQ4NTEuNTcwMTIxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiTXYyVSJ9", "expire_date": "2016-12-27T10:26:32.384Z"}}, {"model": "sessions.session", "pk": "a4thp2etk9n0n8xh8vy7pm4qcgd26y8m", "fields": {"session_data": "MGYzNzVlY2YzZjJhNmM3YWY1MDg2YWUwNDJhNDE1ODA4Y2YzZDgxMzp7Il9hdXRoX3VzZXJfaGFzaCI6ImE1YWVkY2JmOGRjYjIxNGRiYjJhMWYxMDYxM2RmMzUyOWJkZmE2ZTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTcifQ==", "expire_date": "2017-05-12T03:19:10.207Z"}}, {"model": "sessions.session", "pk": "a5uqeu3ck9j1abxt4z0il0xbgx8pqtn4", "fields": {"session_data": "MjMzZTBiMmU4MzJmNzRmNDdhYmY4ODIxZGFkNTYxYzA4ZDQ4MWUyOTp7Il9hdXRoX3VzZXJfaGFzaCI6ImE0ZjdlNmFmYWJiOWU2N2RhZmQ5MDAyODQwYTFhMTY0YjRiYWRjY2EiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2MiJ9", "expire_date": "2017-05-25T11:43:02.852Z"}}, {"model": "sessions.session", "pk": "a62rgfxp5qeeaywbo75tiky63cm05hr9", "fields": {"session_data": "MGYzNzVlY2YzZjJhNmM3YWY1MDg2YWUwNDJhNDE1ODA4Y2YzZDgxMzp7Il9hdXRoX3VzZXJfaGFzaCI6ImE1YWVkY2JmOGRjYjIxNGRiYjJhMWYxMDYxM2RmMzUyOWJkZmE2ZTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTcifQ==", "expire_date": "2017-05-21T03:58:22.080Z"}}, {"model": "sessions.session", "pk": "a67i2gnu3ao1yufebaidwwxbdrefvkax", "fields": {"session_data": "YzQwZDQ2NDBhYTM4MGJlNDExYTQyNjRmZDY1NWRjZDM3MThkY2FiOTp7Il9hdXRoX3VzZXJfaGFzaCI6IjVlYWIyNWEwZTM3NTIwNmQyNTg2YjI5ODEyNjVjNWRjMWZkOWVmMWYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1OCJ9", "expire_date": "2017-04-03T12:45:23.510Z"}}, {"model": "sessions.session", "pk": "a7bdfa2zt28c92vwzsytyssgrcrs27zo", "fields": {"session_data": "NmJkOTA1ZjFhNDQxMDUzMDIwOGMwNmFjN2ZlMThhMzgxYTE0MzUxMTp7Il9hdXRoX3VzZXJfaGFzaCI6ImM5NzYyMDNlZmUzMjE2YzU0MDIwOWYyYTU0MTljMjIwMWJkMDljNDkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNiJ9", "expire_date": "2017-03-23T11:10:48.402Z"}}, {"model": "sessions.session", "pk": "aamptzjfxswyq3ann8icdihxw67svafo", "fields": {"session_data": "NzZmY2EyNzU4ZTNmYjM1ODg3NjI1ZTc2ZmFjZjRkZTQxNzYxOWFmYTp7Il9hdXRoX3VzZXJfaGFzaCI6ImE1ZTEzY2ViODRjN2Q4MjQyOGMwNzBiNjAyYzI0ZDE1MDY3NmQ4YmQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNyJ9", "expire_date": "2017-03-29T05:01:32.010Z"}}, {"model": "sessions.session", "pk": "abfyfvaxotvh9n65k9yhtryupnybb84x", "fields": {"session_data": "ZTg4MzgwZTM1MDI5MDkzOTc2NTA2MTFlZDQ2MDdhMDU5MjdmN2YxNDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMzNjUxOTQuNjQ0NTcxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZ1J3biJ9", "expire_date": "2017-05-12T07:38:54.654Z"}}, {"model": "sessions.session", "pk": "acs2ir81sd20t5zt2edavog2w1pmv09r", "fields": {"session_data": "OGE3MWZjNGE0MzIyZWI0ZTEwYzUwY2M0NTg4ODRmZTUwYTdiMjMzYjp7Imxhc3RfYWN0aXZpdHkiOjE0ODk2MjgzMjMuNzk2NDA1LCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-03-30T01:38:43.799Z"}}, {"model": "sessions.session", "pk": "ae5kodpkm2ei1d8kszuy00uxp4rn6z08", "fields": {"session_data": "Mzk3YzYzZWRkYjAxNThiMTZiZTFkOWUxODIxNzhmMjY4NTYzMzA0ODp7Il9hdXRoX3VzZXJfaGFzaCI6IjcyZjFlYWYwOWJjZDQzMTE0NTViNjFmOGMyMGEyODU0NTk2Nzk5M2QiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4NSJ9", "expire_date": "2017-04-01T05:43:58.348Z"}}, {"model": "sessions.session", "pk": "aecazgyn3hed4kpjnd9il1yfj1dpommv", "fields": {"session_data": "ZjI5ODI1NzE3OTQ0YmY5MWZmMDc1NjU4MDcxZTgyYmE5YmE4MTkwMjp7Il9hdXRoX3VzZXJfaGFzaCI6ImFmNzBhNDliOTA5ZWIzNmQ5MDM3ZmQxYzg1YTA5NGMyYjNiMzgwMzciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMzkifQ==", "expire_date": "2017-05-10T15:41:25.555Z"}}, {"model": "sessions.session", "pk": "agcs8m1koqcbrv1hxgphsitbne118mbn", "fields": {"session_data": "YmY3ZWNjOWNlZmY1YWE3ZTVlNzQyNDNkMjY2MWUyOTkxMGUzYTFlODp7Imxhc3RfYWN0aXZpdHkiOjE0OTQ1NDgyMzkuNzEyMzAzLCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-05-26T00:17:19.733Z"}}, {"model": "sessions.session", "pk": "agkxo1oymbkjz0fi2by066bzo6nyscm5", "fields": {"session_data": "MjdlMWRiY2U0MTYzZDY1MTdkNmRkYTRlNjAwYWMzYmE0NmRhOTE1OTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQ0NzUzMDkuMTAwNzQ2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZ1g0cSJ9", "expire_date": "2017-05-25T04:00:49.109Z"}}, {"model": "sessions.session", "pk": "ai0dhakjhssd6edk44v21rteutg4xgc9", "fields": {"session_data": "ZWQ5ZDNhNWM5Yjg1M2I3MDBiNWNjZmFmMzJiZmI3NzAwMTNiZjUxMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhY2M3MTI1OWU2ZWU2NWY3MGE4NDNkM2NjNmE2ZjBiYmI1ZWY1MDAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTYifQ==", "expire_date": "2017-05-16T11:47:11.127Z"}}, {"model": "sessions.session", "pk": "aj49zta77nnygir1e9n0u6198qrtsv4n", "fields": {"session_data": "MDljMWUzN2MyYmQ3ZWI4MzU0ZmJkYmUzMWFkYzY5OTQyNThjOTlkMjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTIzODkwOTUuMDkwNTkxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoibXU0WiJ9", "expire_date": "2017-05-01T00:30:35.124Z"}}, {"model": "sessions.session", "pk": "alt9kmxy8zz8x6ivm0ards51utwvvbj5", "fields": {"session_data": "ZTU4MmU3OGQ4NzQ0ZWM5YWZhM2FkMDE0ODYwYmI2NjU5OWZiNzMxNTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg2NzFhNjM4NjM4NTUzZGQzYzBkMDYyMWU4OWY1YmMzZTc1M2Q3NWUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzkifQ==", "expire_date": "2017-05-13T02:56:09.993Z"}}, {"model": "sessions.session", "pk": "ao6hrb80g0hutt3088htxj9y9q3fr2kb", "fields": {"session_data": "MjA0NWViYjRjMmEzN2E1NDVlYWEwNzc1MTI4NTMzMGZlNzNhYWNlMzp7Il9hdXRoX3VzZXJfaGFzaCI6ImRhZWUwMWY2OWFjMjBhNDNiZGJjMzA1NzIxYzQ4MDUxOWI5ZjczZjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNSJ9", "expire_date": "2017-05-04T09:55:27.353Z"}}, {"model": "sessions.session", "pk": "aqivpn217im0uq98yr1bnwvrn8ij0nd3", "fields": {"session_data": "N2JmNTI4ZDAyZjg1OWQ1N2M1YTBkYTYyOTY3MmNjOWNkNDY0ZDYyZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjY3NDQxMzFkMjNiNzllY2FiZGJhNTcxOTY5NDUyMGFhNzljZjkxNjQiLCJfZGphbmdvX2NhcHRjaGFfZXhwaXJlc190aW1lIjoxNDg5NTAwMjY4LjEyNDM3NywiX2F1dGhfdXNlcl9pZCI6IjE5IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoicTNlRCJ9", "expire_date": "2017-03-28T14:03:28.128Z"}}, {"model": "sessions.session", "pk": "arhojkcpx2oxh4dkwy347cpwh0yp09hj", "fields": {"session_data": "OWY5ODQ4YzE4NzJmYTU5MzljMjI4OGU0ODkxN2ZlMzI0ZWE4ZDg3Nzp7Il9hdXRoX3VzZXJfaGFzaCI6IjgzMGQ3YWVmZTM0MTVjOWJiMGQwNzA4ZTRiOTFjMDczZDU2MDEyNGMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzOTEifQ==", "expire_date": "2017-05-21T11:49:28.228Z"}}, {"model": "sessions.session", "pk": "as5eihbwg2uggnxzasvp6gwqm87pk0xi", "fields": {"session_data": "MzMyZTkyZWE3OTYxZTk3NzIzMjc3YjFjOWFhNTNjNTQ1ZmQwN2M4ZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjM2NzA4N2M5ZmVkMmMyMTgzZjM3YThiOTk4YTI3MDQ3ZjU1MDVmODEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI3NSJ9", "expire_date": "2017-04-01T09:07:06.345Z"}}, {"model": "sessions.session", "pk": "atyfa39sdu3zjrqyhj5jhk2ussbyrymi", "fields": {"session_data": "YzQxMjZkYzFjOGJhNWMzNDg1OTYyOTM4OGUzMTE3YjU0YmE4NGZjZTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTI0NjQ2NzMuMDc3OTQ5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiR1ZjdSJ9", "expire_date": "2017-05-01T21:30:13.099Z"}}, {"model": "sessions.session", "pk": "atyqbqlifwtxok56ralm091huuctrqid", "fields": {"session_data": "MTVlYTg0MzA1YjFlNDViNjFkMTA3MDg4MDhkZDc4NjIzMmRlZDU0Njp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDExODMuMTIwNDY2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiY1VORSJ9", "expire_date": "2017-03-30T05:12:03.126Z"}}, {"model": "sessions.session", "pk": "au4o2zkt16omq5hi8mqytnp3973ddzf6", "fields": {"session_data": "NzE3NTcyZTk1YjFmZjgzZGY2YzgyYjgwNGRkODMwZGM1YWJkYWViZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjgzMzZmNWFjNzQ3MzFhYjllMTExODBlYTFmNGQ5NDlhOWEzMjU1YWEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNyJ9", "expire_date": "2017-03-23T13:22:19.539Z"}}, {"model": "sessions.session", "pk": "ayydbef2j58ktmlai18qm0647qggvvun", "fields": {"session_data": "NjA1Y2M1ZDYyMjc2NTNlNTFkZjI5OGQ0Y2MzYWY1NTY5MjEyMmMzNDp7Il9hdXRoX3VzZXJfaGFzaCI6ImIyNGI0NmM3OTQwYTlkMmEyYzY5ZWNlMjY2MzBkZjg0MTMwYTQ2OTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjkifQ==", "expire_date": "2017-05-20T02:10:07.484Z"}}, {"model": "sessions.session", "pk": "az9enmb6edvearnp30if3fyvzo6a8dq8", "fields": {"session_data": "M2RiYTBhZjc5NGIxMWE2OGE4MTExNTQwN2VlMzE1MTMyMWY5MDUzMDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQ0NzYzMzguMzc4NzE1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiN3JwNCJ9", "expire_date": "2017-05-25T04:17:58.386Z"}}, {"model": "sessions.session", "pk": "b0dydwz1hq0i4fu62ac1njligzl3csn0", "fields": {"session_data": "YzRmYTYyNDQ1ODdkMmNlYWM0NWJjMjcyNTY3MjhlZGI0NWUwYTQ5Mzp7Il9hdXRoX3VzZXJfaGFzaCI6IjJkNGU5MGYwYTEzNDg5MjgxM2Q3OGU5YmIyNGMxNDk3ZDcxM2ZjMmYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjQifQ==", "expire_date": "2017-05-16T06:45:49.811Z"}}, {"model": "sessions.session", "pk": "b1buntm7bf3u6m2rym09yx5lb8fphlim", "fields": {"session_data": "MjY1NzIwMjVlMDkyN2RkYjNhYWM5MWJlYTA3ZWE0YjQ2NDRkNDA2Yjp7Il9hdXRoX3VzZXJfaGFzaCI6IjlhMjk0NmVmMTQ5ZmRjMmZjMTdjMTRmYTVmMTE0ODlkZDk4MmY2NzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2NSJ9", "expire_date": "2017-04-01T03:07:56.108Z"}}, {"model": "sessions.session", "pk": "b29877v3dbms1wu3qnd36278orw69y7v", "fields": {"session_data": "ODg2MjY0NzVmNzk0YzFiZDExNzQ1NTRiMTY2MTA5ZjUyZWY2YmQyZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImRlZWYxZWM0NmY1NTNmOWMyZGE0MDI4ZmVhMjMwYzVkOGQ2NDVmYWMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2NyJ9", "expire_date": "2017-04-01T09:57:34.679Z"}}, {"model": "sessions.session", "pk": "b2xekvw7b0w84mj4killc0uew5fx0z56", "fields": {"session_data": "NzI3ODYzZTliYTcwZmY3OGQ5ZjgzNjI2YzM5MmE5MmY1ZmUwZmUwYzp7Il9hdXRoX3VzZXJfaGFzaCI6ImYyMmEyZDA2ZmVhYTdiNzE3ZjFjNTk2YzU4YjkzZDE3NDZmMmY4MTYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMzcifQ==", "expire_date": "2017-05-10T13:49:42.906Z"}}, {"model": "sessions.session", "pk": "b3gdo1b74q9q9g1g35s5rw0740gewqk4", "fields": {"session_data": "YzkxNDllYzdiM2Y3Mjc5YzI4NjJmYjQ4Mzc3ZWZmOWRkYTY3N2I5ZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjgxYzQ0MWExMmRmMzI1NDQ4YWYwYzE2MGM2YThiNjgxOTMxOWMyOGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2OCJ9", "expire_date": "2017-05-25T08:12:50.796Z"}}, {"model": "sessions.session", "pk": "b3u1to5mhetmb0iuj5r8ax8od6g5gf75", "fields": {"session_data": "Zjc2M2RhZjc2ZDExOWQwZTQzNjI5NjJhYzJkYzc4MTliMDA4ZjlmYzp7Il9hdXRoX3VzZXJfaGFzaCI6IjJhNzg1ODIxMTYxZThiMTdkYWExMWNkMjFjMmJmZmIzODFjZDFjNTUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxODEifQ==", "expire_date": "2017-05-28T04:05:32.562Z"}}, {"model": "sessions.session", "pk": "b6be1xd97ph0tv1kl3ist1fyqi5vagjj", "fields": {"session_data": "OTBmOWQ4YjUzYjVlZjU1OTlmOTE1MDViMmFlZmMyZTRmYzVlMTU5ZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImY3ZTYwZDY4YmM2MmQ5ZWU4MzEzMDI1YWVjZGYzZGIxNDZjYzllMDgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMjAifQ==", "expire_date": "2017-04-28T16:26:40.701Z"}}, {"model": "sessions.session", "pk": "b6c6ooncx938jpufcp2v9985fcfsozna", "fields": {"session_data": "OWQ2YzZiNTA4YzIwMjE1NTAxY2QzNGM0MDNiYTViMDdiOTI0ZjAzMTp7Il9hdXRoX3VzZXJfaGFzaCI6ImIyNjJlMTQ3YzMyZGIzOGY5OTllZmEzNGQ2N2Q0MDMxODlkMTA4ZmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0In0=", "expire_date": "2017-03-28T08:14:30.462Z"}}, {"model": "sessions.session", "pk": "b6y6u4a6p4srgluorgnxnjiskrl8frje", "fields": {"session_data": "ZTA4NzZhODg3MjYzZGQxMDE1MjM1ZDdmYmIzYzMzY2Y5YmQ3MDk2YTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxOTI0NDIuMTE0NzYzLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiYzZ0NyJ9", "expire_date": "2017-04-05T14:19:42.120Z"}}, {"model": "sessions.session", "pk": "b7bf0zibc5g6ywm0p28qlk31xco8rd9p", "fields": {"session_data": "ZWY2MjEyMzMzNjcyYzRiMGUzYjgxMzgzMjFjNTA3M2NjNzcyNGE2MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImY3MDZiZGMyNWU5ODA1OGFhZjkyOTc1ZjIxMWNlMWMzZmI1Yzc3YTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNjMifQ==", "expire_date": "2017-05-21T01:14:08.794Z"}}, {"model": "sessions.session", "pk": "b7mq5fqibngabhb58bppofo2ohjhaxaf", "fields": {"session_data": "MTIxOTk2NmI1ODNlZjJmZDI0OTFlMjE5M2NhYzM4YTI1ODllOGFlMjp7Il9hdXRoX3VzZXJfaGFzaCI6ImJiMjZiMGRjNjBmY2NjYTU5ZDQ4YWUwZmFjNmI4YjNjOTFjNjMxZDkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNCJ9", "expire_date": "2017-03-19T00:47:56.773Z"}}, {"model": "sessions.session", "pk": "b82yg8f2308kntaxxxwf4gz2eds87rlj", "fields": {"session_data": "NzY5MjUzMzI5MmYyYjY5NGNkNzg4NDliY2RiMjRhYTY1MTNmZmViZDp7Il9hdXRoX3VzZXJfaGFzaCI6ImE3OTNjOWE0YmM0YmY4ZjVhZjczNDljZjdhMWEzMjRmOTc0MDBiNzciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTYifQ==", "expire_date": "2017-05-21T04:10:33.088Z"}}, {"model": "sessions.session", "pk": "b9d9gpogwd8qypjasow1h2lk0ulfas6v", "fields": {"session_data": "ZTU0ODMxOTgwMTIzZDM2MjNmNGM5ZGY5YjJmMDIwMmMzZDYwNzVlNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjZiYzQ2MjRkMjQ2NTdhZGE0YWE0YzkwYTY2YjhmMzMzOTQ2YTlhNjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTEifQ==", "expire_date": "2017-05-21T03:39:11.012Z"}}, {"model": "sessions.session", "pk": "b9vrbjo661jokzqe8bu82mctowpnxu0l", "fields": {"session_data": "NzE2NmQyOTBkZWZjMDZiOTNjZDNlMzZkNTU1MmE3MmExZjdlYWY4YTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQwMDAxNzYuMDAyNjIxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiUFdtdyJ9", "expire_date": "2017-05-19T16:01:56.013Z"}}, {"model": "sessions.session", "pk": "bar2o9fd44yh4iqosp8u5nllqklwtibh", "fields": {"session_data": "MWM1OWE1ZWFkZDAwY2UyMTVmNmZiMDZmZTYxYjRjZGMwMDkyN2JhNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjIwYjNjYjUyMmUyYzJlZDJjYWFlNDRkMTE2MzljOTE5YmM1ODFmNWYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjgifQ==", "expire_date": "2017-05-21T03:53:34.396Z"}}, {"model": "sessions.session", "pk": "bbyd6wittnrxog9q4iv3pdtbq6crlpv1", "fields": {"session_data": "NzRlMDcxNjhhY2U5MzVjMmY3MWMyYWQ2Nzc5YzQ4NjAzYzE3YzdmZTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk4MDkzODkuNzkxNDQzLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRk1BdiJ9", "expire_date": "2017-04-01T03:55:29.801Z"}}, {"model": "sessions.session", "pk": "bdc839rhbu51osp0u3pj19ingmjmakef", "fields": {"session_data": "MmRlMGFkNDM0N2I0Y2E0MWZlZmRiYzgyOWQ3NTYzYTNiMTRlNDUxMDp7Il9hdXRoX3VzZXJfaGFzaCI6ImI5YmFiYWZiYzMxODFkYTMxNTBiNThkN2ZiYTM5NjE2YjZlYTZmZDIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MTgifQ==", "expire_date": "2017-05-25T15:11:37.612Z"}}, {"model": "sessions.session", "pk": "bdclwgdjt0zkfap97osscjn2kv04ecek", "fields": {"session_data": "YWE5NzY3ZDhlNDUyMGIxOGM3MmNhNGRlOGZjYmYyODdkZTlkMTBmZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjhjYjk4NDFkYzM1NTYyZDMxMzQzNDZkZGNkMWFiNTY3M2NjZjI2ZjMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2OCJ9", "expire_date": "2017-04-01T03:42:18.567Z"}}, {"model": "sessions.session", "pk": "beaa5zqkhdi50hb273xetjroaj3q6kvz", "fields": {"session_data": "ODA1MzY5MzBjYzdlNzgyODE1ZDc0NGFjNGJjMDA0ZDlkZmI1OGJkYzp7Il9hdXRoX3VzZXJfaGFzaCI6IjRlYzA3NTMzNzA1MjkxYzBlOWM1MzZjOWVmOTRiODU4MzNjZDAwYjMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNTkifQ==", "expire_date": "2017-05-23T07:21:06.134Z"}}, {"model": "sessions.session", "pk": "bebgub6m7l7uddgq6ldsp0ng1m8knwrg", "fields": {"session_data": "Nzg4Nzc4MDM1MmEyNmExYzI4ZGY5ODU2M2YyNmE2MDY5ZTA5ZjBlNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjkwYWMyNWZjYTM1YjM4MjFiY2VlMDE5MDcxYzY0ZTc0NWM3OGRkYzIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzODEifQ==", "expire_date": "2017-05-21T04:11:57.845Z"}}, {"model": "sessions.session", "pk": "bi8efl6ls2aty9hosjq5at3qozxakdxt", "fields": {"session_data": "ZDM0NTk2ZDlmZTcyZWI0MWEwYmY4NWNkMGZkYWM1YTc2ZWI2YTY2OTp7Il9hdXRoX3VzZXJfaGFzaCI6IjM0ZTAzZWRiMjEzYmM2ODk1NzNmOTI0ZDk5YjU2YjI4MDc3MGI5ODkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1In0=", "expire_date": "2017-03-18T05:37:41.390Z"}}, {"model": "sessions.session", "pk": "bj09sn51luelywr1ng7wejj7i29s5lr1", "fields": {"session_data": "MmE3Y2Y5YzlkODljZTg3NDZiZjk4ODQzODA4NDc0NjU3MzA2MjY4MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZhMDY5ZTg0Mzg1NTNhNWI4Zjc4ZTY5NDE1YWQ1MWY3MjJjMmM4MTIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNiJ9", "expire_date": "2017-03-29T15:55:47.011Z"}}, {"model": "sessions.session", "pk": "bkidqszwt8bu0y8v5j1xzlgkpxp17w7v", "fields": {"session_data": "NWMxMDllOWM5NWM3MzJmMmU1ODE4MTc5NTFiNTIwMmQwZTI0NTk5NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjgyODQ0NzNmN2I3Y2NhODA5NWQ0N2UyYWU1MzAyZDRlNTFjMDRjMWMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNjYifQ==", "expire_date": "2017-05-21T02:38:21.304Z"}}, {"model": "sessions.session", "pk": "bmwia331kyrufrm6zaziv596dl00lm0z", "fields": {"session_data": "ODA1MzY5MzBjYzdlNzgyODE1ZDc0NGFjNGJjMDA0ZDlkZmI1OGJkYzp7Il9hdXRoX3VzZXJfaGFzaCI6IjRlYzA3NTMzNzA1MjkxYzBlOWM1MzZjOWVmOTRiODU4MzNjZDAwYjMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNTkifQ==", "expire_date": "2017-05-21T04:17:22.865Z"}}, {"model": "sessions.session", "pk": "bnf21bbnqfwuvg9hsday7468nilubfq6", "fields": {"session_data": "ZmUzYWUzMzhiNDhiYzViMmFhMjVmYjRkMjY4OGQ5OGQxMWNmYjA3Yzp7Il9hdXRoX3VzZXJfaGFzaCI6IjhlYmI4ZDBmOGZjNDBjYzFhMWVlYWJlMWYwZDk3OGY5YmQ0MTIxY2QiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MiJ9", "expire_date": "2017-04-28T07:55:02.575Z"}}, {"model": "sessions.session", "pk": "bpf9rsp2prbfvtjqkpkywc6a0kw4biyx", "fields": {"session_data": "ZDU4MmZlZDc0MTY2MjJlOWRmMjg1ODMwNzM4Yzg1MWIzNGNjNzIzNDp7Il9hdXRoX3VzZXJfaGFzaCI6ImRmNjlhNmRlMWVlOTlhM2E1Njg1ZjU3ZDJkMzY3OTg4ZTMyOWUzYTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzEifQ==", "expire_date": "2017-05-20T00:02:18.138Z"}}, {"model": "sessions.session", "pk": "bpnygnqduidf9rds1u5k67a917f41l1e", "fields": {"session_data": "M2U4NDNjOWNkYjdmNmNkNTNjMGVhM2M2MDkyZGNhNmZmYjllYjc5MDp7Il9hdXRoX3VzZXJfaGFzaCI6IjA0MWFmNzlkZTI1ZTExYmJmMTFhY2Q3MmQzYWRmNjc2ZmRiNmU2NTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMSJ9", "expire_date": "2017-03-28T13:58:32.627Z"}}, {"model": "sessions.session", "pk": "bqmfcwp27rdflwptjije6uvhkizys9v1", "fields": {"session_data": "MjZmYTVmMzcxNWI0Y2Q1YjVmMGVmZDU5NGI3NTZiMDdjZWIyNDY1NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjNlN2VhNWFjNzE3Zjk2NDEwMzk0ZjZkYmIzNWU4ZDBhNTliYWViNTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNiJ9", "expire_date": "2017-03-28T14:25:24.076Z"}}, {"model": "sessions.session", "pk": "brqfwjxzkpmxv0rvpbeolpa3wt9682et", "fields": {"session_data": "ZDRhODg4MTYyMjY2NDI4YWJiN2YyYWQ2NmNjMWU5YjliYzQwNTk4OTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMyNDI5MzAuMjY0OTQ1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiMnl3SyJ9", "expire_date": "2017-05-10T21:41:10.275Z"}}, {"model": "sessions.session", "pk": "bum86xrkhzifm3pbyvghmo0227r26mzi", "fields": {"session_data": "YjY0ZDRlZWNmNTk5ZTNjNmJmYTNlYTNhMzZhZWIwOTdmODdhOWE2ODp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxNjc4MzYuOTQwMTcxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiUkhVUCJ9", "expire_date": "2017-04-05T07:29:36.964Z"}}, {"model": "sessions.session", "pk": "bup8ctz2wt4ntc60gtp1qyhl4vtbeqlv", "fields": {"session_data": "MDlkYTUwZmE2ZjkxNjY3M2ZiZmQxMzVkZTgzMGQ2ZTM1MTk5ZTNmNDp7Il9hdXRoX3VzZXJfaGFzaCI6IjMwNjA1ODVlMTQ1ZGZiMmYxYjRhYTEyNjZiNjRiNzZhZTFiZGE2OGMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMjUifQ==", "expire_date": "2017-05-04T10:49:46.509Z"}}, {"model": "sessions.session", "pk": "but854tm408bc1zeyrcr3v4mbrb6qixo", "fields": {"session_data": "YTI3OWQyYWVkNzUyOTViZGU2ZDQ5Zjk0NDczYTIyOGRlZGM3Njg1Yzp7Il9hdXRoX3VzZXJfaGFzaCI6IjJhZTFhYjllZDc5NTFhODlkNDRkMDI2MDM3ODkyOTFmMzA1NDNlZjAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzkifQ==", "expire_date": "2017-05-17T14:16:00.670Z"}}, {"model": "sessions.session", "pk": "bwlp5t533kp5wf818d7f2mmv1siif82a", "fields": {"session_data": "MmE3Y2Y5YzlkODljZTg3NDZiZjk4ODQzODA4NDc0NjU3MzA2MjY4MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZhMDY5ZTg0Mzg1NTNhNWI4Zjc4ZTY5NDE1YWQ1MWY3MjJjMmM4MTIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNiJ9", "expire_date": "2017-03-29T04:58:11.804Z"}}, {"model": "sessions.session", "pk": "bxxsjcta9ultoomods84aslaqix4fffa", "fields": {"session_data": "ZWQ5ZDNhNWM5Yjg1M2I3MDBiNWNjZmFmMzJiZmI3NzAwMTNiZjUxMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhY2M3MTI1OWU2ZWU2NWY3MGE4NDNkM2NjNmE2ZjBiYmI1ZWY1MDAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTYifQ==", "expire_date": "2017-05-18T05:14:30.018Z"}}, {"model": "sessions.session", "pk": "by4bd6ai2kafxf7qyzvp09qxlwkj2i0x", "fields": {"session_data": "ZTU0ODMxOTgwMTIzZDM2MjNmNGM5ZGY5YjJmMDIwMmMzZDYwNzVlNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjZiYzQ2MjRkMjQ2NTdhZGE0YWE0YzkwYTY2YjhmMzMzOTQ2YTlhNjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTEifQ==", "expire_date": "2017-05-21T04:08:12.458Z"}}, {"model": "sessions.session", "pk": "c0s6za5v4514npmyue13rzcnsorfbuse", "fields": {"session_data": "NjcwMWNkMzY3MWIxZTY5ZTMzYTFjZWE4ODAxNTMwZmU0NWI5NDQ5Mjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTE0NzE3MDguMjU4NzY0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiM3lrYSJ9", "expire_date": "2017-04-20T09:40:48.271Z"}}, {"model": "sessions.session", "pk": "c11j4qoajoju2g8jmohcq8mnxi2inxoz", "fields": {"session_data": "NTQwMzIwMDcyMTI3MTAxYmM4YjhmNzY5NzZlMjJjYzRjYTJkNGU3NTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxNTc0ODUuMDg4MTcyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZVFWeiJ9", "expire_date": "2017-04-05T04:37:05.104Z"}}, {"model": "sessions.session", "pk": "c5z7zzyjyr7ayq5e2abbk2rn7621jpoa", "fields": {"session_data": "Y2YzZTg4NzQ3ZTU1YjcxNjFjZWIyNGMwNDNiMjI3YTQ2MmY1OGQxZjp7Il9hdXRoX3VzZXJfaGFzaCI6Ijc2MjQ4NjFmYzNiYWEyNjFmMWM2N2U5M2E3MGFiYzk0ZDNhNmQ1ZTkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyODYifQ==", "expire_date": "2017-05-21T05:19:34.187Z"}}, {"model": "sessions.session", "pk": "c6dorkjkrwgmg82n0ibydpohy6s39cyp", "fields": {"session_data": "YTgwZDY1ZjQwNWVjM2NiMjIyN2QwNjIzODU5ODJlMzYyNzQ4ZmM3NDp7Il9hdXRoX3VzZXJfaGFzaCI6ImQ5ODEyNDU0YTQ2ZGE1NzRmZDM5YjkyMzEzODVkNmFjYzg5M2UyNjciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNDEifQ==", "expire_date": "2017-05-21T04:38:02.162Z"}}, {"model": "sessions.session", "pk": "c794p1mvrgyg7nvwqepto2sqvdcv2b2p", "fields": {"session_data": "ZGMwMDMxNWQzM2YxODFiNzJjODY3ZDE3NTM3YzQ1ZjVkOTI1ODZkZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjM1NGUxZjkwN2FmZGRjZmQ3NTRkYTgxYjE5NTg2NWNhN2Y3ZTMxNjIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDYifQ==", "expire_date": "2017-05-20T12:19:55.534Z"}}, {"model": "sessions.session", "pk": "cdj9ucqfysm0wjqxrm4jzcuk9atig9k1", "fields": {"session_data": "ZWZiNTM0MGI1YTFjMjY0YTA3NmJhNjQ2MjdmM2FhNGFjOWY3NDA0Zjp7Imxhc3RfYWN0aXZpdHkiOjE0OTA5MzU1NDAuNjA0MTEzLCJfYXV0aF91c2VyX2hhc2giOiI5ODYzM2ZiMWExODYyMGEzYjA0MTVkMWZlOWM3NTY2NDFhM2E1ZmQ4IiwiX2F1dGhfdXNlcl9pZCI6IjciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-04-14T04:45:40.606Z"}}, {"model": "sessions.session", "pk": "cf4vb380zfmthg0v3medskh0owqxfs9d", "fields": {"session_data": "ZGE0ODBhMDZkMjhjYWIwZDc0YmZiMjliNGFlZGFiZmJhYWQxM2MyODp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg2NmI2MmU2MGI4MzE1ZDg4ZDJlNmNmMzdmZjc3NzNlY2RhNDgwNjIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1MyJ9", "expire_date": "2017-03-30T14:19:25.684Z"}}, {"model": "sessions.session", "pk": "cf8zmjnboqwalmj6aox3yhy5txthljuk", "fields": {"session_data": "MjZhZDg5ZjllNWE3NDlhMDEwYTNkMjYxMmJlZmFlM2E5OTAxNTJhYjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTI0NjQ2NjUuNjQ2OTc0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZUdhSCJ9", "expire_date": "2017-05-01T21:30:05.787Z"}}, {"model": "sessions.session", "pk": "chdqttr3j9yyw1p1rwdnb2lbmsdnxqrr", "fields": {"session_data": "MWIzMjI5YWJjOTU3NDQwMDYwNzJmZWZkN2Y4M2M2Mjc5OTY2ZDRkZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjAxNDU2NzBjZTg5NDQ5ZWFhY2U1MTQ0ZTVkOTAwNWVkYmEzMDJlNzYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMiJ9", "expire_date": "2017-03-22T12:57:51.483Z"}}, {"model": "sessions.session", "pk": "ci0bcsqyqrvysh1nusrvlucn3sbss9g7", "fields": {"session_data": "YjIwZmRjOGE4NGRjNWJjY2ZlMjIyMzlhNGE2OTAzMTY0N2U1N2IzNDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQzMTg0NTguMDE5OTkyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiR2tIWSJ9", "expire_date": "2017-05-23T08:26:38.030Z"}}, {"model": "sessions.session", "pk": "civy9sae0hwvzx0hisapv9hi6m8wmd68", "fields": {"session_data": "ZmYyNTU1NGJhNjIzMDk4YzYxM2JhYjkwOGEyNGFkOWUzMmRiYTgxNTp7Il9hdXRoX3VzZXJfaGFzaCI6ImVkZDRjMjAzNjJlZTlmMmVlMWI3ODBhMTgyOGJjNjZjMjY5M2VkOTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMTAifQ==", "expire_date": "2017-05-19T12:36:36.154Z"}}, {"model": "sessions.session", "pk": "cllkyqb3dgf0jucdm43ayb0ewce8j0mh", "fields": {"session_data": "Mzc0YzIzZTZjOWUwZDUyOTZjMmZmNWFjNDJjNTA4MTg2MDhlMTQ2MDp7Il9hdXRoX3VzZXJfaGFzaCI6ImU0ZjhhNzA4NTY4NmI2NTIzNGIwMTY3ODJmNGQ4YzFmYTExOTM4YjYiLCJfZGphbmdvX2NhcHRjaGFfZXhwaXJlc190aW1lIjoxNDkwMTYyMTQwLjg1NTMwMSwiX2F1dGhfdXNlcl9pZCI6Ijk3IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoieUFVSCJ9", "expire_date": "2017-04-05T05:54:40.859Z"}}, {"model": "sessions.session", "pk": "cp49rf9ur0r6iq9jwocfiyk95lj26auw", "fields": {"session_data": "MzRiNTEzYWE1MWI5YzQxMGY1OWFlMGI2MDExNTYxZWI2N2JiMjM3NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjlmNzk4MTkxNTExYzA4ZWRiMDA5YWRhZjU3NGE3OWZjMjhjYTVhNjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5In0=", "expire_date": "2017-03-29T09:59:12.612Z"}}, {"model": "sessions.session", "pk": "ctwsuc6yhdb7i18tevz4x3qca9y6uc93", "fields": {"session_data": "NWZmZTQwYjYyMDdlNGNlYWJhZjM3YWNjNDRiZWYxYmNiNjM4NzhmODp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTIzNjA5MTEuMDI4NTI0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiczloTSJ9", "expire_date": "2017-04-30T16:40:51.039Z"}}, {"model": "sessions.session", "pk": "cvqn6sin5hwkslru4gdtklcumvx1a9ty", "fields": {"session_data": "OGI4MjM3OWYzZTI0Y2NmOGZhNDMzNDRjZmM5NTJmYmI0NDM2MzY0YTp7Il9hdXRoX3VzZXJfaGFzaCI6IjE3ZjdjNDVhODE0NjNjMTU4ZWRkNTAxZTQ0NGRhOGJlMDJhMDE4YjMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjUifQ==", "expire_date": "2017-05-21T03:57:54.319Z"}}, {"model": "sessions.session", "pk": "cvzpgkqhzd9dzvr9kzo66v571ufdy9c7", "fields": {"session_data": "ZWQ3NTNhMzM3NzFkMmFiN2ViZDg1NDM0YmFlMDI3NmE1ZWExMDFkMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjYzNzExNzI2ZDY3Y2IwMzBhYTE3NTNhOTlhZjhhMzQzODNhMDRjOTIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMjEifQ==", "expire_date": "2017-04-29T01:48:43.796Z"}}, {"model": "sessions.session", "pk": "cwmefmk95bmg8izlle9eogosjf5fekb1", "fields": {"session_data": "YzY3NDVmM2I1ZmEyOTAwZDA1OWRiOTg1ZWU3NTU2NTYyZmM3ZGRhYjp7Il9hdXRoX3VzZXJfaGFzaCI6ImFmMWMwYTljOGNkNThmYjliY2FlMTc5NGIzNTRhYzZiYjRhZGEwYTUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNTAifQ==", "expire_date": "2017-05-21T04:11:09.662Z"}}, {"model": "sessions.session", "pk": "cx18cuo7cmowc3had767exrjy4qperaa", "fields": {"session_data": "YTYwNTYyYzY3ZDQyY2JiODljYTc2MWI1ZmJmMGRjYTViZGUxYzFjNDp7Il9hdXRoX3VzZXJfaGFzaCI6ImE1NDNhZmJhNDc3ODgwZmI3MDkxMmIyNDM1OTljYzQ4NDAwODc2YjUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNjkifQ==", "expire_date": "2017-05-28T04:20:03.798Z"}}, {"model": "sessions.session", "pk": "cxb2gqg1bjpwbuqsho5w5an19g82gcy1", "fields": {"session_data": "NmE1NjhjZjI3ZmI5NTQyMTViYmY0NDM1OWM0ZTQxNWQ4OTIzNGExZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjFkMDU4YmZkNWIxYmVjNjEzMDM2NDc1YzI1OTNmNWU0MWZmY2FlZDAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjAifQ==", "expire_date": "2017-05-12T04:31:15.086Z"}}, {"model": "sessions.session", "pk": "cygq39eir3yt6wqmrphb2kci1yzlolx0", "fields": {"session_data": "NDJkMjczODdhNGVjODFiNmFiMGU1OGE1ZjJiOTQ4YTc5NzhkMzIxODp7Imxhc3RfYWN0aXZpdHkiOjE0OTQxNDk0NzYuMzc5NzcyLCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-05-21T09:31:16.429Z"}}, {"model": "sessions.session", "pk": "cz3qu6v4iwo48k6j7v1imr7uscpb6fmd", "fields": {"session_data": "ZmYyNTU1NGJhNjIzMDk4YzYxM2JhYjkwOGEyNGFkOWUzMmRiYTgxNTp7Il9hdXRoX3VzZXJfaGFzaCI6ImVkZDRjMjAzNjJlZTlmMmVlMWI3ODBhMTgyOGJjNjZjMjY5M2VkOTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMTAifQ==", "expire_date": "2017-05-21T02:36:03.207Z"}}, {"model": "sessions.session", "pk": "d21qe3o50ezwljwqtpx6ehdblk84aciq", "fields": {"session_data": "YTI5YjdhN2EzZTk1ODU3NGE0M2M0MWVlMzkwZDBhYmU3NGZiYTUyNDp7Il9hdXRoX3VzZXJfaGFzaCI6ImIzYTAxNDZhMDM0M2Q5MWFhNWRkNzE0MzFkNmY3Y2E2MWJhZjJlZGQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1NiJ9", "expire_date": "2017-03-30T11:00:22.514Z"}}, {"model": "sessions.session", "pk": "d2z5q1tlv6ovu2t1gh7afhcupxz4zyfz", "fields": {"session_data": "MGIyNGU0OGIyYTM3MTU0MjdjY2IyN2VhODZiNjc0ZjEyZmQwY2Q5NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjUwYWIwNmYwY2I2ZjYxZmUwOWQzYjhhNTI3OTcxNGI4ZjkwMGZlNjAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyODQifQ==", "expire_date": "2017-05-21T09:25:49.145Z"}}, {"model": "sessions.session", "pk": "d3drjjbpwrdge5122os69p04t9y812ph", "fields": {"session_data": "NTc3ZjZiYzg5ZDc2OTY4YTQwZGI2NGI3NjkyYjJiNWVjNzIwYjdmZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImIwNjk5NDE0YWM2ODU4NWViMTMzZTAwNmY1Y2Q5YzZmODRkMTc5NGEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzOTAifQ==", "expire_date": "2017-05-21T04:53:55.412Z"}}, {"model": "sessions.session", "pk": "d6egkll7bmkwhj7l3khs6thk6bl903i7", "fields": {"session_data": "YjIyNjk4ZDVmODMxMzAwYzg0MWNhMTlkZDBkOWRjMDY4MDBiODAxYzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5ODQ3OTguMTMwOTM5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRm5ETyJ9", "expire_date": "2017-05-19T11:45:38.150Z"}}, {"model": "sessions.session", "pk": "d76g722ku9hvq1q07gw7iqzbeiqb6flm", "fields": {"session_data": "YWY3M2Y2YmI5MDNjODI5ZWJlOTU0MDczMTM2YWZhYmZjZDg3ZWIxNjp7Imxhc3RfYWN0aXZpdHkiOjE0OTA2NzEwODguMDQzNzMzLCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-04-11T03:18:08.106Z"}}, {"model": "sessions.session", "pk": "d7lkay0l3btx82wg7nuvjjsja65vjqqc", "fields": {"session_data": "ZDgyNmE1NDIyYWQ5ZTRhNmU2ZWU2ZGM3Nzg3NWQyZDMxNGZlYTFiODp7Il9hdXRoX3VzZXJfaGFzaCI6IjU4NjljMmRkZWU5Y2Q3NDBhNWQ2M2JjZmIyOTExNGQ3MDQxZWY2NzgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzAifQ==", "expire_date": "2017-05-12T05:49:59.481Z"}}, {"model": "sessions.session", "pk": "d85dl2gx78qe6rzb5dvusc1zoesydy7l", "fields": {"session_data": "MzZiMThhZDFmZmE4ZWU1MWJmNWQ2ZjU4OTYxYjljMTRkYTEwNWYyODp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMwMjgwNTkuNDgxNDYsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJiOHJ0In0=", "expire_date": "2017-05-08T09:59:59.503Z"}}, {"model": "sessions.session", "pk": "dbatldj9l407ipusoxbsaqc5n1jfs8dp", "fields": {"session_data": "ZDAwOTc4ZDY2ZTdiYmVlNWZhODhjNThjZGVhM2QxMTc4NzkwZWZkMzp7Il9hdXRoX3VzZXJfaGFzaCI6ImQzZjgxYWVhMmVmZjBmOTQwNjhmM2IwMzZiOWM3NzgzMjZkNmI1NTIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2NCJ9", "expire_date": "2017-04-01T02:03:44.547Z"}}, {"model": "sessions.session", "pk": "dbw3e0ly5lua3yyozaiftd6iyah7xukc", "fields": {"session_data": "MGM0MTVmZTlhMjBmNjY4MTA3YjE5YWQxNDRiYzFhZTQ2MmE1YzRkMzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NTQzMTUuMjg1MTIyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiVFJLdCJ9", "expire_date": "2017-03-30T08:50:55.291Z"}}, {"model": "sessions.session", "pk": "ddpmy6spsnx75plrimksqnu0bxn2y9zm", "fields": {"session_data": "MzAxOGRhY2U5N2RmZDE5MTM5NjJmNmYyYjczNTM4MGM1YTU1YzIyYjp7Il9hdXRoX3VzZXJfaGFzaCI6ImZlMzA0YTA3NDczMmRmN2FkNDcyZTM4YjA3ZTE4Y2NhMjJiODQ4MzkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1MCJ9", "expire_date": "2017-03-30T05:27:17.014Z"}}, {"model": "sessions.session", "pk": "ddu121uws58yy31pz0j0kb0t1ybocota", "fields": {"session_data": "NGZmMWExMWQyMjJjZmM3OWJhMjllZjMyNTYyYjZkMzlmOGJlODE3Nzp7Il9hdXRoX3VzZXJfaGFzaCI6ImM1NTBlNzg4ZGVlYzZjMzVjNjQ5OTViNjRkMWU3M2I0MjQzNDcxOTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNDgifQ==", "expire_date": "2017-05-14T09:36:01.661Z"}}, {"model": "sessions.session", "pk": "devp5j70qnyc5dsfwskfk0sed1luu0hh", "fields": {"session_data": "OTdiMzM1ZWY2ZjQzNWQzNzQ3ZDE1NmU5YTU4ODZlZDcyMDUxODc0NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjEyNjZjNjI4MWViODUxMWFhNWEyYWU4MmJlZDlhYTMxMmZlOWQ0ZGEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzQifQ==", "expire_date": "2017-05-21T03:53:54.102Z"}}, {"model": "sessions.session", "pk": "dez4ywrohyzqb2blp05hc6u84lgfmbny", "fields": {"session_data": "NTI5YTMzM2I0YWRiNmZmN2E3ZDkzN2FiMmJlOWYyYWJkZTFiYzZiMjp7Il9hdXRoX3VzZXJfaGFzaCI6ImIxOWQ2MDNjMWFjNjYxZWJjYWIyNTA1M2I5ZWZkZjdjMDZhNTQ3MTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxOTYifQ==", "expire_date": "2017-05-28T04:05:43.516Z"}}, {"model": "sessions.session", "pk": "df14cl3szkl48rjj6x39b0r1khkt1qjy", "fields": {"session_data": "ZWE3YzVlYjVmNmM1NmZmNTc0YjQyNWQ0Mjg4NDdmOGM2YWRjN2MzZTp7Imxhc3RfYWN0aXZpdHkiOjE0OTEyNzQ5NTAuMDA2MDQ0LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-04-18T03:02:30.011Z"}}, {"model": "sessions.session", "pk": "dfx1m915m49ktfy2cck48jrbfnzkt4or", "fields": {"session_data": "NTAyNmYwOTQ2Yjk4MzhlZWY5YTBmZmJlODdhOGQ1ZDgxZTM5NWUyZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZiNTAwMTQyOTBlMjAzNWY2MjkyYTY1NzEwYjhhZGQ5OWNlNGVmNmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2OSJ9", "expire_date": "2017-05-21T11:16:59.306Z"}}, {"model": "sessions.session", "pk": "djldj54lo6thcoc91h4fb04lsixqwvs3", "fields": {"session_data": "YTgwZDY1ZjQwNWVjM2NiMjIyN2QwNjIzODU5ODJlMzYyNzQ4ZmM3NDp7Il9hdXRoX3VzZXJfaGFzaCI6ImQ5ODEyNDU0YTQ2ZGE1NzRmZDM5YjkyMzEzODVkNmFjYzg5M2UyNjciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNDEifQ==", "expire_date": "2017-05-15T08:32:12.466Z"}}, {"model": "sessions.session", "pk": "dlu7jj5lf077ncp2xp9r6lh84ktawq0f", "fields": {"session_data": "NzExNTY1M2NhZjVlZThlN2FlNTk5ODQwNGIzMzk1OTJlZTM1ZDI1MDp7Il9hdXRoX3VzZXJfaGFzaCI6IjA5N2Q1ODAzNDk3ZTZkZTE2OTk5YmZiYmI2MWZmOTI3YzYwMTdlNTMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTIifQ==", "expire_date": "2017-05-21T09:26:41.485Z"}}, {"model": "sessions.session", "pk": "dm41y5iy2uwqe83st5esx601140sd1w8", "fields": {"session_data": "Y2IxODA4YTk0MGFlMDE5N2FjM2VlNTc2YjYzYzZmOGNhODRlYTE2MDp7Il9hdXRoX3VzZXJfaGFzaCI6IjAyNGI3MzA1NDg3NDRmZDA4ZmRmODFhZTUyODg2YzFjMTU5NTMwMTgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjQifQ==", "expire_date": "2017-05-21T12:23:48.307Z"}}, {"model": "sessions.session", "pk": "dmdpflqtfnn57ni8bidgn60zpabuv9r1", "fields": {"session_data": "NDdiM2I0ZjIxNmNmODE5MTAyODJjNWJhMWI1MDBkNjFhZTU5OWQzMzp7Il9hdXRoX3VzZXJfaGFzaCI6ImVkOGM5NjVlYjQ4NGQ0NTI0OTcwZjY2MjhkNGE0ODc3MjUxMmYyMmQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMCJ9", "expire_date": "2017-03-29T04:40:54.864Z"}}, {"model": "sessions.session", "pk": "dn3kojfwjoei4raorn9dpc11qyxkegu6", "fields": {"session_data": "YjZlMjRjNGU2MTJiM2FhY2ExMTg1ZWEyYmNkY2VkYTNhY2ZlNzI3OTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg1ODY2MmZlOGE4NWE5Mzc2NDMwNjJiNTllZjczZDUwYWNkMWVmMDEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjcifQ==", "expire_date": "2017-05-21T05:03:56.352Z"}}, {"model": "sessions.session", "pk": "do6hpxg78wbt94slwtkdhkegjaxmee8m", "fields": {"session_data": "YjM1YzYzYzNkYmVhNWYxNmFkNDMwZjFhYjA2NjY2NDkwODdiMGNlYTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDE1NDEuODA2MDc2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiUGNxZyJ9", "expire_date": "2017-03-30T05:18:01.813Z"}}, {"model": "sessions.session", "pk": "dpdvlsfkeo348r3q42nrw2jjzdzlqii1", "fields": {"session_data": "ZDU4MmZlZDc0MTY2MjJlOWRmMjg1ODMwNzM4Yzg1MWIzNGNjNzIzNDp7Il9hdXRoX3VzZXJfaGFzaCI6ImRmNjlhNmRlMWVlOTlhM2E1Njg1ZjU3ZDJkMzY3OTg4ZTMyOWUzYTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzEifQ==", "expire_date": "2017-05-21T03:05:50.924Z"}}, {"model": "sessions.session", "pk": "dr4tn6c9ap2bil6bbvzkfupf2yhf9vjr", "fields": {"session_data": "ZWIzYzNmODhjODk0MmMyMjI5Nzg3MjE0YjIxMTI3NjExMzkzYWYzMzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQxODY2MDguNTk1Mjc1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiOGJhVCJ9", "expire_date": "2017-05-21T19:49:08.609Z"}}, {"model": "sessions.session", "pk": "dry5vmkgeuvob7rrpltpk99qlab65ejb", "fields": {"session_data": "NDU1YzJiZTZmZTEyZjA0MWNhMWYwMGQ0YjI0N2ZkOThjYzY2OTZhODp7Il9hdXRoX3VzZXJfaGFzaCI6IjQ1NzI1NTc1NGNhOGE3ZTYyYTIxZGJmNTliMzAwYTkxYThiYWNhY2MiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTUifQ==", "expire_date": "2017-05-12T02:43:28.169Z"}}, {"model": "sessions.session", "pk": "dsp0jwfkrc18xigmhb3hpa8d9g5brb24", "fields": {"session_data": "MTMyNjA2NjRkOWRkZjJlMjIyYzc0YzM1OGE3ZGVmMDBkM2U3ODU2NTp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3MDRlOTBkZTExMTMyNjA2NTJiYmY3NTViYmU3YTA1NDI5ODFiZDUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjYifQ==", "expire_date": "2017-05-12T04:54:00.477Z"}}, {"model": "sessions.session", "pk": "dudzbk5u2riwvzgecnrlpwru149u0w8b", "fields": {"session_data": "MmQ3YjUxNTFjYzhiZjUxNWQ3NDExMThjYmY1NWVjNjIyMTYxYmY4NDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQyMDc5NTIuMzAzMDM4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiaEhHQiJ9", "expire_date": "2017-05-22T01:44:52.316Z"}}, {"model": "sessions.session", "pk": "duts2rxbe0ghx924eq6pe9ghpr5re07q", "fields": {"session_data": "OTlkNWRiNWE0ZjU5MTg0NTFjNzFmYjJiMjQ5ZWNmMjAyZjE5ZGU1Yzp7Il9hdXRoX3VzZXJfaGFzaCI6IjVlYzJhNjlkMGYyM2M0YjM2OTU4MWM1ZWViZDY5NmM2NDg2MGExODgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTMifQ==", "expire_date": "2017-05-14T16:34:12.029Z"}}, {"model": "sessions.session", "pk": "dv2snqs1tbvqt38r8nxpu803r0a5ju8e", "fields": {"session_data": "NGE5ZTEzYTc5MDJlODBjZDA3Mjg5N2NiZDgwNjYwZDVlMzJlNGNhNTp7Il9hdXRoX3VzZXJfaGFzaCI6IjVkZWM3MGJkODY3ZjNjOGI4ZWM0YmE5MzQyMWZiMzY5YmNlNGU5YTgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxODIifQ==", "expire_date": "2017-05-28T04:02:45.805Z"}}, {"model": "sessions.session", "pk": "dvmkil06gj28rxnes5wedpw4vb3m7scg", "fields": {"session_data": "ZWM5MDViM2RjYjM1YzQyOGM1NzVkNDllOTFjZTI1ZWIxZTIzM2VmMTp7Imxhc3RfYWN0aXZpdHkiOjE0OTQ0MDA2MDEuODE5NzUxLCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-05-24T07:16:41.822Z"}}, {"model": "sessions.session", "pk": "dxmphpmx1wqi6r709ldgxqi4t7eoh9tb", "fields": {"session_data": "MTU4Yjg5ODRlN2YzNTZiYzNmZTg5NGI3NTNjMDQ5N2U0NjQyOGM3ZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjMxODk5ZjUxZmVmNGZlMWU1YTk4MmQ5NTQzYzM2MjNhYjRmZTY5NWEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMTIifQ==", "expire_date": "2017-05-21T05:10:27.835Z"}}, {"model": "sessions.session", "pk": "dyx3s41rthx3e9okb8vmhlp7a4te8zlr", "fields": {"session_data": "OTFjNjI4ZWE2ZTg1ZTZmMmE5YjQ0M2ZkMjg2OWM4YzI5MjU4N2Q4Mjp7Il9hdXRoX3VzZXJfaGFzaCI6IjQ3OWRjMzEzNjFmZTA3ZDkzMThmNWRjYzc5NDI2NzM3NTlhODkyMzYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4OCJ9", "expire_date": "2017-04-01T06:43:03.257Z"}}, {"model": "sessions.session", "pk": "dz6hxh2bufaj8phv3u839sbylz656ovc", "fields": {"session_data": "NmY5MGQ1ZTJiYmU0ZDJlYTgyNjYxYTQ0ZmEyNWQzMDJiNjRjYjY4Mjp7Imxhc3RfYWN0aXZpdHkiOjE0OTA1NDE3MjUuOTIzOTY2LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-04-09T15:22:05.928Z"}}, {"model": "sessions.session", "pk": "e0bg72qdj8htsqw3whd7ltp0l3nickqu", "fields": {"session_data": "OGI4MjM3OWYzZTI0Y2NmOGZhNDMzNDRjZmM5NTJmYmI0NDM2MzY0YTp7Il9hdXRoX3VzZXJfaGFzaCI6IjE3ZjdjNDVhODE0NjNjMTU4ZWRkNTAxZTQ0NGRhOGJlMDJhMDE4YjMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjUifQ==", "expire_date": "2017-05-20T04:06:44.418Z"}}, {"model": "sessions.session", "pk": "e1sxmyuhr0wobtn1ywp0nbtf1h5mnplm", "fields": {"session_data": "NzJhYjBmZTk1ZWU5MGUyMmRkYTM2ZjkyMGNiZGVhNDNhMWI4NmI2Nzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODM0NDI0MjAuMjExMzAyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoicEV1USJ9", "expire_date": "2017-01-17T11:19:20.219Z"}}, {"model": "sessions.session", "pk": "e200e6yyx4mx82qzb2xh91d0zgbltpe9", "fields": {"session_data": "Y2FlZjEzNzkzZWY1YmZjYjAyY2ZiZjYwZTcwN2U0ZTcwOTg3NDg3MTp7Il9hdXRoX3VzZXJfaGFzaCI6IjQ0ZmU3MDRhMWQxYmNlZDkxMDI3NmVjNDQ0ZTExMGFmZWI0NmNjZWMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4In0=", "expire_date": "2017-04-08T16:06:35.663Z"}}, {"model": "sessions.session", "pk": "e245zz4w1sn7txp0nagknf8bbobp7tbo", "fields": {"session_data": "NzdiN2I3Nzg5OGZjZTZkODUyMmJmZWI2ZmFhOTc2MWU2NjFmMDFiMzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxNzYwMjguNTQ5Mjc5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoieEJWYSJ9", "expire_date": "2017-04-05T09:46:08.563Z"}}, {"model": "sessions.session", "pk": "e2ptheno3d1de80rlh1wrtjmeiq5v3g5", "fields": {"session_data": "MTk0NjQ3ZmJhNDY1MTczNjgwMDE2NDk4NjllNTVlZmI1ZWQ3OWY4Mzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODE0MjI1NTQuNjk5OTQxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiTmJVQSJ9", "expire_date": "2016-12-25T02:14:54.708Z"}}, {"model": "sessions.session", "pk": "e350xs17f9afzuqrxtfz6qetctmi2513", "fields": {"session_data": "YTNmNDI0YmM5YTk1ODI3Y2YzN2U3ZTU4OTA1OTJjZTYyMWVlZmE1OTp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiYzcyYjU1YzFjZThhMTc4ODc5ZGU1MWNlNWU0NjA5Njk2NWE0MTZkZiIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQ1MDU2NTUuNTgyMjkxLCJfYXV0aF91c2VyX2lkIjoiNDE3IiwiX2RqYW5nb19jYXB0Y2hhX2tleSI6InpjdloifQ==", "expire_date": "2017-05-25T12:27:06.341Z"}}, {"model": "sessions.session", "pk": "e55wmyjkl8tzrw0257i4g8feic45h4jc", "fields": {"session_data": "NDhkMWE2ZmY1ZjlkNTY5NThlNTkzZDExNDkxMTJkYzRkODU5NTg5Yjp7Il9hdXRoX3VzZXJfaGFzaCI6ImY5NTVjNGNiYzQ1ODRjNzhlZDVlOTI1ZDFkY2ZmNGFiZTY0NmNmMWIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOSJ9", "expire_date": "2017-04-01T03:01:37.969Z"}}, {"model": "sessions.session", "pk": "e5c04sqvkl3y1oplgn8ctzeq9kyzs65p", "fields": {"session_data": "M2E4ODcxM2NiM2ZkMDdlYWI5ZDg2NmMyNTZhNmM3YWI5NDJkYWQ1Nzp7Il9hdXRoX3VzZXJfaGFzaCI6IjI5NjQ5ZDBiODJiZGY3N2NmZTYxZTU4OTEwYmFhM2MxYzkzYjZhMWMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNzMifQ==", "expire_date": "2017-05-28T04:00:19.122Z"}}, {"model": "sessions.session", "pk": "e6rf5j692wplcwfycelnb8svf82owymf", "fields": {"session_data": "ZjJmYjJhYzJiODA3YmQ1NGM4M2IxZTgyOGFjYTEyMzQxOGE2OWNhMDp7Imxhc3RfYWN0aXZpdHkiOjE0ODM0MzkyMTIuMTE1NjQ5LCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-01-17T10:26:52.120Z"}}, {"model": "sessions.session", "pk": "e7jtzzb7zamql7gtl0nsaedzmhzc8jsd", "fields": {"session_data": "ZTU0ODMxOTgwMTIzZDM2MjNmNGM5ZGY5YjJmMDIwMmMzZDYwNzVlNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjZiYzQ2MjRkMjQ2NTdhZGE0YWE0YzkwYTY2YjhmMzMzOTQ2YTlhNjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTEifQ==", "expire_date": "2017-05-21T03:49:12.539Z"}}, {"model": "sessions.session", "pk": "e7rxivkc7vdpn7hfuelxqzntor33lj7f", "fields": {"session_data": "MjI5ZDM4MWNjNWJhZjcwOWJiZjlkNzQ3ZDYzMjM0NjFkZWEyNzNiZjp7Il9hdXRoX3VzZXJfaGFzaCI6ImVmOTZkMzU4NWI0ODNmZTRiYjg0MmJlNjFiMzg2N2MxNzlmMzlmOWMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MyJ9", "expire_date": "2017-03-29T13:23:34.307Z"}}, {"model": "sessions.session", "pk": "e832ypwz43zf4o9pswadijgi3jkgccre", "fields": {"session_data": "ZDY3NmRjM2JlYjc3ODJjMDQyYjZjNzQ1ZmY1MzlkY2ZiYjVmYWJhZDp7Il9hdXRoX3VzZXJfaGFzaCI6ImZlODM4NDEyYWY0NTFjNjEyMWU3ZWRlODJhYjRiOWRlMmVkNDIwMDEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI3MyJ9", "expire_date": "2017-04-01T04:33:13.279Z"}}, {"model": "sessions.session", "pk": "e8otd55k8ypee4et5lzf4z2tzluv5gpe", "fields": {"session_data": "YjZlMjRjNGU2MTJiM2FhY2ExMTg1ZWEyYmNkY2VkYTNhY2ZlNzI3OTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg1ODY2MmZlOGE4NWE5Mzc2NDMwNjJiNTllZjczZDUwYWNkMWVmMDEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjcifQ==", "expire_date": "2017-05-19T13:38:53.353Z"}}, {"model": "sessions.session", "pk": "e8yu4gmkynlc1yylm6mudzbevuqfsd1v", "fields": {"session_data": "NDUyYjAxMzczZTRjYTcxZjIzMTIyYWE4NzFmOGUyYjYwMmI5Yjk1Yzp7Imxhc3RfYWN0aXZpdHkiOjE0ODk1NTA2MjIuNzM2MDg1LCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-03-29T04:03:42.949Z"}}, {"model": "sessions.session", "pk": "earnedbyzzmfhdqj35mz7rat13r1ckxf", "fields": {"session_data": "ZmQ5YTY5OGFiNDhmODM0MjYzN2I0NjUxMTViYjBmZTEwNzhmNDk1ZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjEwYTIxN2ZiMGY0NjE3MjQ5MDhiNWEyMTJjMTk0MTNhNzk4MjEwMTYiLCJfZGphbmdvX2NhcHRjaGFfZXhwaXJlc190aW1lIjoxNDk0MTQxNDY4LjY4NzA0OCwiX2F1dGhfdXNlcl9pZCI6IjMyNCIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2RqYW5nb19jYXB0Y2hhX2tleSI6InNWV2YifQ==", "expire_date": "2017-05-21T07:16:48.704Z"}}, {"model": "sessions.session", "pk": "eazgaavw9lcmds1fjjayfrsngltjxyrr", "fields": {"session_data": "OTZlM2JlZjYyYTdkNzllODI4OTMwOTc3NGI3M2U3NTQzN2MwOGJkYzp7Il9hdXRoX3VzZXJfaGFzaCI6IjljNTcwNzg0Y2QxYjQwNzY2YTAxYmQ1MzE4MGQ4NGM3YzIxMjE2MWIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjYifQ==", "expire_date": "2017-05-19T13:37:35.585Z"}}, {"model": "sessions.session", "pk": "ec8gycrm7jaq1fq17ecoz29q9p13icvb", "fields": {"session_data": "NzMzMjg1MTcyM2JlZjg5MDhkNmQwMTU0MWU2MTFkYzhiMDY4YWI4Yjp7Il9hdXRoX3VzZXJfaGFzaCI6IjczYjllMmM0ZjMzMzg1YzdiYTk1OTU4NzY1NmI0ODk0ODcxZGUwYWMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMTcifQ==", "expire_date": "2017-04-28T03:22:00.422Z"}}, {"model": "sessions.session", "pk": "ecr8y013keibl16gk91ohqglsa1tf4ie", "fields": {"session_data": "ZmUzYWUzMzhiNDhiYzViMmFhMjVmYjRkMjY4OGQ5OGQxMWNmYjA3Yzp7Il9hdXRoX3VzZXJfaGFzaCI6IjhlYmI4ZDBmOGZjNDBjYzFhMWVlYWJlMWYwZDk3OGY5YmQ0MTIxY2QiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MiJ9", "expire_date": "2017-04-06T10:14:12.801Z"}}, {"model": "sessions.session", "pk": "eddsbzlh1hsnggqrczb3je14pyxwnshu", "fields": {"session_data": "Y2IxODA4YTk0MGFlMDE5N2FjM2VlNTc2YjYzYzZmOGNhODRlYTE2MDp7Il9hdXRoX3VzZXJfaGFzaCI6IjAyNGI3MzA1NDg3NDRmZDA4ZmRmODFhZTUyODg2YzFjMTU5NTMwMTgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjQifQ==", "expire_date": "2017-05-26T00:13:05.990Z"}}, {"model": "sessions.session", "pk": "eeiw4d9vvlr0ltxyfzekpaxr02sat5b7", "fields": {"session_data": "ODlhNTgzOTk4YThlYjQ0ZmNiNjUzNmZjY2EzOGFjNDgxNzhiNzc3ODp7Il9hdXRoX3VzZXJfaGFzaCI6IjEwNzFlNDdlZjNkMDg1ODUyYWQyMThjZTMzMTVmMGM0NDNjMGVlNjQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDkifQ==", "expire_date": "2017-04-19T13:11:57.497Z"}}, {"model": "sessions.session", "pk": "eekgtokokx33yo11bnv8b24vjxtx5n4m", "fields": {"session_data": "MjhlMDVlZDVhYzI1ZDRmOGIwYzBkMWVmZjY4ZTlkYTFlMDgwMTc1OTp7Il9hdXRoX3VzZXJfaGFzaCI6ImQ0MmYyNjBlYTI5ZmZiZDJiZTUyOTk4ZWZkNjJkYjVmYTdiYjMxMzMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyODMifQ==", "expire_date": "2017-05-18T05:41:26.112Z"}}, {"model": "sessions.session", "pk": "egl4itioo9l6oe4qflsrhrmk1mehnl0g", "fields": {"session_data": "OGE4MzY5YTZmNTk0NzAwN2M3ZDJkYTRiOTI4YmZmYTUyZWJhZTc5Yzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTE0ODczODkuMzU3OTk0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiUVpnRSJ9", "expire_date": "2017-04-20T14:02:09.370Z"}}, {"model": "sessions.session", "pk": "ehm1p5zw4dy2ew0ong7diok3a9hj2s87", "fields": {"session_data": "NzExNTY1M2NhZjVlZThlN2FlNTk5ODQwNGIzMzk1OTJlZTM1ZDI1MDp7Il9hdXRoX3VzZXJfaGFzaCI6IjA5N2Q1ODAzNDk3ZTZkZTE2OTk5YmZiYmI2MWZmOTI3YzYwMTdlNTMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTIifQ==", "expire_date": "2017-05-21T04:00:31.950Z"}}, {"model": "sessions.session", "pk": "ehvixstdr0vvqh9di01lgy0wkxonn6s6", "fields": {"session_data": "NDg3MWJiMjZhZTEyZDE4Y2FlOWNjMWY3NjQ4OTdkZWNkZTcwOTk3Nzp7Il9hdXRoX3VzZXJfaGFzaCI6ImViNDlmNDNkNDk3NzRlOGM4MDY2ZjdiNzNjOTU2ZDZiYThhNmMyN2EiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzMifQ==", "expire_date": "2017-05-21T04:36:26.928Z"}}, {"model": "sessions.session", "pk": "ei1h3u6zenr6m1c3o4jzkhco6r6u4wt1", "fields": {"session_data": "NWZmYmU0MzU5YmJlYWZmYmJjYjM2ODVjMzMyNDliYjNkOTllYjY1OTp7Il9hdXRoX3VzZXJfaGFzaCI6IjNkYTVkZTcxMmE2MWM4MDk0MjgxYjkwMjg2ZTdjMWZkMzcxMTYzNDUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzUifQ==", "expire_date": "2017-05-21T06:21:08.507Z"}}, {"model": "sessions.session", "pk": "eki7rhx8hwseqbxouufg4ls5myr6hod6", "fields": {"session_data": "YzcwMWE1NjY4MDBiNzQ5NmZlYTUyYTc4YzkwMWJlZDRlMmM1NzEyNDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM4NzYzODAuMTE4NjMsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJEc0h2In0=", "expire_date": "2017-05-18T05:38:40.129Z"}}, {"model": "sessions.session", "pk": "em21la5k82zj7m2gaglmuzzjlldvxsp9", "fields": {"session_data": "NWE2MTczMzlmYjQ3OWJlMGEwZjQ3NDZkYjQxZDljZDg3OWNiMGE0Nzp7Il9hdXRoX3VzZXJfaGFzaCI6ImNmMWVkMTI1ODI0YWIxYTM1ZDg0ZjhkMTU4MTM4YzdhYzU3MWI1NzEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTgifQ==", "expire_date": "2017-05-19T11:56:08.422Z"}}, {"model": "sessions.session", "pk": "enlp35ii2tzgfmax47symn2htums09c9", "fields": {"session_data": "MmE3Y2Y5YzlkODljZTg3NDZiZjk4ODQzODA4NDc0NjU3MzA2MjY4MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZhMDY5ZTg0Mzg1NTNhNWI4Zjc4ZTY5NDE1YWQ1MWY3MjJjMmM4MTIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNiJ9", "expire_date": "2017-03-29T05:01:14.975Z"}}, {"model": "sessions.session", "pk": "epfy7bxapnqu1m3ybxikcial1mg0n8ls", "fields": {"session_data": "MDJjZTQ4ZTZjYzhmOTRlZjViYzM1ZGI3NjNmNDY4YmFjOGY2NGI4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImE1YzQ5YTAxYzEyN2M3ZGZlM2FkZDEzMzE3ZDgwMzc0OGM5ZTYzMTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMCJ9", "expire_date": "2017-04-02T02:00:33.375Z"}}, {"model": "sessions.session", "pk": "esc4fkqiix4x2gqkdnauheyehoeqt63s", "fields": {"session_data": "NzNlZTgyYzA3MTBhOTUwNzE3YTk2NDBlN2I5MmRlYzk2MGZjNTdkMjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTA1NTk4NTIuMzA0NTY5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiN3o0OSJ9", "expire_date": "2017-04-09T20:23:12.326Z"}}, {"model": "sessions.session", "pk": "eu21g8vq327zo5rci83yj7d748ftfxv5", "fields": {"session_data": "NWQ2NGVkZWMyY2IzOTFkNzI4NzU0YzI1M2E2YjY0YTFkZjg0ZDdkMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjljZjQxZjhmODIwOGU0NjFhZTg1ZmU1ZmMzODhmYzQ2ZjRkZTZhZDkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNzUifQ==", "expire_date": "2017-05-21T04:27:50.561Z"}}, {"model": "sessions.session", "pk": "eubmd4ov480r61mdpiu4072kx9r31g04", "fields": {"session_data": "YTgwZDY1ZjQwNWVjM2NiMjIyN2QwNjIzODU5ODJlMzYyNzQ4ZmM3NDp7Il9hdXRoX3VzZXJfaGFzaCI6ImQ5ODEyNDU0YTQ2ZGE1NzRmZDM5YjkyMzEzODVkNmFjYzg5M2UyNjciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNDEifQ==", "expire_date": "2017-05-21T02:31:46.370Z"}}, {"model": "sessions.session", "pk": "evampy70v5jtgb9ermbcv3wsttw4930v", "fields": {"session_data": "YmFkOWU3N2E2OTE5NmViMjFkNjQxMmNjZmNjNTJhOGFlMWZjOGRlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjZmNmUwZTIxNDk5YzBlNGZlYTgxNjcwMmYwZDIxMjYxMWMyZmViNzAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMjcifQ==", "expire_date": "2017-05-04T15:01:25.658Z"}}, {"model": "sessions.session", "pk": "ew8slqkdtth59l4dttv22dwwbct0wu3u", "fields": {"session_data": "Nzg4Nzc4MDM1MmEyNmExYzI4ZGY5ODU2M2YyNmE2MDY5ZTA5ZjBlNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjkwYWMyNWZjYTM1YjM4MjFiY2VlMDE5MDcxYzY0ZTc0NWM3OGRkYzIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzODEifQ==", "expire_date": "2017-05-21T04:15:03.153Z"}}, {"model": "sessions.session", "pk": "ewk8e8rcv8h4kzpl63lntpaoebn242hi", "fields": {"session_data": "YTFjOWFiMjk2MjUzMTBiOWMwM2M5YWUyM2QyNGY5MDYxNTBiOTVhMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjhkZDE0ZGQ4N2E0ZTZhOTk4ZjQxN2VlNzBmNTI4ZjI3ZDg0MDY1Y2EiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjEifQ==", "expire_date": "2017-05-19T13:20:42.097Z"}}, {"model": "sessions.session", "pk": "eyrp8bsfbm1sz24gzxuuuhfnsihg2ns7", "fields": {"session_data": "ZWY2MjEyMzMzNjcyYzRiMGUzYjgxMzgzMjFjNTA3M2NjNzcyNGE2MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImY3MDZiZGMyNWU5ODA1OGFhZjkyOTc1ZjIxMWNlMWMzZmI1Yzc3YTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNjMifQ==", "expire_date": "2017-05-21T02:17:04.486Z"}}, {"model": "sessions.session", "pk": "eyvnkmci6bknrdh82q5sve3i3gldvavu", "fields": {"session_data": "MGU4NTUzZDFhODQwNDE2N2E5NDI5YTYzNjRkMDViYzdjZWYzZTQzMjp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiN2FhNGM2MjY4OTZkMTQ1OWNjY2NhYjQ5YmJlZGNlNjQwODdlMDIyZiIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk4MjgyMzIuNDUwMzY1LCJfYXV0aF91c2VyX2lkIjoiOTIiLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZHphZyJ9", "expire_date": "2017-04-01T09:10:02.106Z"}}, {"model": "sessions.session", "pk": "ez69eylg6lefct57og247jvrtk2ewl25", "fields": {"session_data": "NmNlMTM3N2Q5MDVlY2FmMTBmZmI0YmE2OWVjYzAyOGU0OTAxNzFkYzp7Il9hdXRoX3VzZXJfaGFzaCI6ImIzZjRmNDc5MGQxZTcwNzc2MTkyM2MxM2RlNDc5MGZjMGYzYzI5NzIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjYifQ==", "expire_date": "2017-05-21T08:34:18.284Z"}}, {"model": "sessions.session", "pk": "ez8dd89a609fgky2nz4dblsf1jpq6feu", "fields": {"session_data": "MDI5OTcwNmY4MWY3MTAzN2YzZGRjOThlMzJkNmQwOTEwZmI5ZGY3ODp7Il9hdXRoX3VzZXJfaGFzaCI6ImI2YmVmOGRmNTIyYjM0NDBiZDY3ZGQyZDdjOGY3ZDQxOWYyZWFlZGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI3MiJ9", "expire_date": "2017-04-06T14:59:39.651Z"}}, {"model": "sessions.session", "pk": "ezhtqhkk4sc4af5qaz3xatktfx034w4d", "fields": {"session_data": "MmU1OTQ0OTU1ZTlhM2E5YWY2ZmU2ZWIwZjY1ODFmMWQ1ZDQzODNiNDp7Il9hdXRoX3VzZXJfaGFzaCI6IjM1NGUxZjkwN2FmZGRjZmQ3NTRkYTgxYjE5NTg2NWNhN2Y3ZTMxNjIiLCJfZGphbmdvX2NhcHRjaGFfZXhwaXJlc190aW1lIjoxNDkwNjI1MDI5LjAyODk2OCwiX2F1dGhfdXNlcl9pZCI6IjEwNiIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2RqYW5nb19jYXB0Y2hhX2tleSI6IlRwYnoifQ==", "expire_date": "2017-04-10T14:29:29.039Z"}}, {"model": "sessions.session", "pk": "ezqrhopr9pb6a0872yi5fc1lsg0kaql3", "fields": {"session_data": "M2YxZWZjNmQwZDZmMGFiNzAyNjhjZjRhODY5NTMzMjBjYTI0OTMwNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjkzZjJjN2FhNzY2YTU1NzUxYzhhNzU1YWU1MjE0ZmFmMzRjZmRkN2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5In0=", "expire_date": "2017-05-21T09:26:07.871Z"}}, {"model": "sessions.session", "pk": "f11c1avtzk8b1a53j590iktu1jyfm3c6", "fields": {"session_data": "MjJkMmZlZGNjYjE3Zjg1ZjFjZTMyY2RjNGVmMGE5ZDkwNDlhMGVjZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjYzMjBlYjQxZWRkZmY0NDhjNWEwNTQ4NWFlZDU0YzBhYzlhNmYyMGMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzAifQ==", "expire_date": "2017-05-17T08:02:57.139Z"}}, {"model": "sessions.session", "pk": "f3m7auzi3d47e6yscdzj2e4i80p7f8jz", "fields": {"session_data": "YzQxMDY4MmJlNjAwY2Y0NWExNTJmNjI3NGQwOGNmNmI5ZDAzNGMwODp7Imxhc3RfYWN0aXZpdHkiOjE0ODM0OTYxNjQuMTk2NzI3LCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-01-18T02:16:04.215Z"}}, {"model": "sessions.session", "pk": "f3oaqly2pi922xrvxcfx90u563qb3oad", "fields": {"session_data": "Mjc1MWU2ZTNmOGUxNTNkMzZmNGM5Y2M4YTZiNTdkYTIzY2ViNTRhNzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxNTk4MTUuNzcyMzcyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoidEZDeiJ9", "expire_date": "2017-04-05T05:15:55.778Z"}}, {"model": "sessions.session", "pk": "f42pe3dpiy6jrnjzkqckwz56zwxxxzmo", "fields": {"session_data": "NWQ2NGVkZWMyY2IzOTFkNzI4NzU0YzI1M2E2YjY0YTFkZjg0ZDdkMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjljZjQxZjhmODIwOGU0NjFhZTg1ZmU1ZmMzODhmYzQ2ZjRkZTZhZDkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNzUifQ==", "expire_date": "2017-05-21T04:12:37.340Z"}}, {"model": "sessions.session", "pk": "f5yq4eisk29tlm4rxgmu2tt2nc0ovn1m", "fields": {"session_data": "N2YyNjVmMWYzOWFjYmJjYjIxN2M4OGYzMTFmYzY0OGIzN2ZjM2E0OTp7Il9hdXRoX3VzZXJfaGFzaCI6ImY4MDM4ODUxODJjYTRlNDE1OTg1MWNlOWE0ZTIzMzVhMGZiMDNiOTUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1NSJ9", "expire_date": "2017-05-22T12:40:25.553Z"}}, {"model": "sessions.session", "pk": "f8ml1yeshx1ku35fbwhy7ruegrtjiu9d", "fields": {"session_data": "NTA5YmExMzcxMGM0NTE3MzFiMTE5ZDVmMWY2ZjExMmFhOTU5NGI1Mjp7Il9hdXRoX3VzZXJfaGFzaCI6ImY3NjQ3YzAzZTllYzcxNTA4NWUwNjY0NjhjZjdjOWQxMzU3OWVmOWIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzcifQ==", "expire_date": "2017-05-19T14:31:28.657Z"}}, {"model": "sessions.session", "pk": "f96e5g1fn3a7gkhz7qdrdcp9zbjrpf5v", "fields": {"session_data": "NDg3MWJiMjZhZTEyZDE4Y2FlOWNjMWY3NjQ4OTdkZWNkZTcwOTk3Nzp7Il9hdXRoX3VzZXJfaGFzaCI6ImViNDlmNDNkNDk3NzRlOGM4MDY2ZjdiNzNjOTU2ZDZiYThhNmMyN2EiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzMifQ==", "expire_date": "2017-05-21T10:29:46.488Z"}}, {"model": "sessions.session", "pk": "fa914mk332nr87v7y8onaszkbvhpyji7", "fields": {"session_data": "ZDI4NGZmZmIzYWEyMzUxZjdhMTU0ZjFkMWI4ZjcxMmVhMmVkNWYwNDp7Imxhc3RfYWN0aXZpdHkiOjE0ODM0NDAxNDIuODg5NCwiX2F1dGhfdXNlcl9oYXNoIjoiNzgyYzc4MzUyMzliZjYzYzU3OWFkODZjYjRhN2RlODAzNDJkODI4OSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjIifQ==", "expire_date": "2017-01-17T10:42:22.906Z"}}, {"model": "sessions.session", "pk": "faxzyynxzgwmqg5egvx39cxcozpbbxqm", "fields": {"session_data": "ZWQ5ZDNhNWM5Yjg1M2I3MDBiNWNjZmFmMzJiZmI3NzAwMTNiZjUxMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhY2M3MTI1OWU2ZWU2NWY3MGE4NDNkM2NjNmE2ZjBiYmI1ZWY1MDAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTYifQ==", "expire_date": "2017-05-15T11:00:56.986Z"}}, {"model": "sessions.session", "pk": "fcqcfqsn2rkdugtq02b6n567mnmurw9b", "fields": {"session_data": "ZWUxYzc2YzVhMjU2YmRlMWY5OWI4ZTU5ODJjOGI0NzJkM2MwYzQ0MDp7Il9hdXRoX3VzZXJfaGFzaCI6IjQzY2JjMDMzYTIzMGI2ZWJjZWYzY2YyOThjOTZiMmU5NTkyOWJkZjQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDcifQ==", "expire_date": "2017-04-11T03:34:20.250Z"}}, {"model": "sessions.session", "pk": "fcwj9a0ygy6rczi61swygm6vbgbenicp", "fields": {"session_data": "YzA0N2FmMmEzMDYzMTIwYmVmYWJjZWQ4Njg4NWRmMWUxNzJiNGU0ZTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQxMzk2ODYuNTE4MzU0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiWURlTSJ9", "expire_date": "2017-05-21T06:47:06.559Z"}}, {"model": "sessions.session", "pk": "fdtd0x1jhlempisd5eb33lgbakr9w4zh", "fields": {"session_data": "OWQ2YzZiNTA4YzIwMjE1NTAxY2QzNGM0MDNiYTViMDdiOTI0ZjAzMTp7Il9hdXRoX3VzZXJfaGFzaCI6ImIyNjJlMTQ3YzMyZGIzOGY5OTllZmEzNGQ2N2Q0MDMxODlkMTA4ZmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0In0=", "expire_date": "2016-12-26T07:44:49.729Z"}}, {"model": "sessions.session", "pk": "fe9yy6pyrymkvw69gt5qb4c3r5nebp7c", "fields": {"session_data": "NmQ1ODVlYWJhNDg4MzFkZjUwMDE0NzQyYmZjMTNkYjRmYzU3NzEyZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImM2YTc1MDVjNmNmYWMyNjE4NzJlMGQ2MjFiMjUzOTIxN2U5ZjdlNjkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMCJ9", "expire_date": "2017-05-28T02:32:41.783Z"}}, {"model": "sessions.session", "pk": "ffcldj0ft3r0vp2usmnpwy4nk2itrrw7", "fields": {"session_data": "ZmE5YjYzYjVmOTBhZTMwZWMzMzc1OWIzNTQ0NWEwZjQ4ZTFmYmU4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImE4ZTMxZmExZTRmYzQ0MjM1ZDM1YTMwYTA1ZmJlZDIzMTc2NTgyODciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjAifQ==", "expire_date": "2017-05-15T17:35:57.966Z"}}, {"model": "sessions.session", "pk": "fgh875xkd8jwbyr66h6g3vxlej2hetwv", "fields": {"session_data": "ODk2NTIyNTUwODNkODc0MzExOTZlMzE2OGFjZTgxYTBhZTZkN2FmNTp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiYjI2MmUxNDdjMzJkYjM4Zjk5OWVmYTM0ZDY3ZDQwMzE4OWQxMDhmZSIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk1NTI4MzAuNTA0MzM3LCJfYXV0aF91c2VyX2lkIjoiNCIsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJkSzZaIn0=", "expire_date": "2017-03-29T04:40:00.265Z"}}, {"model": "sessions.session", "pk": "fhuqmc6jzw9pz2h2sl19h0ap6vo6w232", "fields": {"session_data": "MTE0ZTQwZDE5OWQ5NjdmNWQ1MWRiNWU3NDdhNzdhYjZhNTU2MTNlNDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM1MzU4NTMuMTU4NzQyLCJfZGphbmdvX2NhcHRjaGFfa2V5Ijoic2d5ZSJ9", "expire_date": "2017-05-14T07:03:13.174Z"}}, {"model": "sessions.session", "pk": "fieohhs8ickhj60gavar3n4kduj7zlop", "fields": {"session_data": "ZTVhNTk3MTkzZWM5NDk0ZGU3NTY4MjhiNTIyZGVkNDU3MDlhYjhkNDp7Il9hdXRoX3VzZXJfaGFzaCI6IjcwYTk4NzhkYjk3OTY5NmIzOGYzZWNlNzYxNjhmMGNjOGQ2YjVhMDciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNTgifQ==", "expire_date": "2017-05-28T04:03:18.071Z"}}, {"model": "sessions.session", "pk": "fjh9jubj95c8adf5vf6o8e14cm83k1jg", "fields": {"session_data": "MmQxYTc0MDMzNTM3YTYzNTc0YzU4Nzg4YjM4OGMyODY5YTg4MWQwNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjFiYzU0ZjE5NWI4MWU1MjExYTI4YjM3ZWNlM2NjNTA3ZjRiNjUwZTgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMTMifQ==", "expire_date": "2017-04-20T13:28:07.270Z"}}, {"model": "sessions.session", "pk": "fk062yesm3bcogu0dobpqzhn9ot1bj5n", "fields": {"session_data": "NDgxNTc4NzQ1YmI5Mzc4MmY2MzY3YjkzMDFmNTNkNzdiNTY0NmI5YTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTE0NjEwNzMuMTQ2OTMsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJGa0h0In0=", "expire_date": "2017-04-20T06:43:33.154Z"}}, {"model": "sessions.session", "pk": "fkzd9md9230pq6jlvto770r608kddgiu", "fields": {"session_data": "NmJjYjJmM2EyZGQ3MjY3ODExY2E1NzNmNWQ5ZDZiZGIwNzkxMjQ3OTp7Il9hdXRoX3VzZXJfaGFzaCI6IjQ0NDQwNDQ1NDVjNTc0ODExYmY2MzFjZGZhMWIyNzgwYWY2MTFlOGQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTkifQ==", "expire_date": "2017-05-15T16:00:07.896Z"}}, {"model": "sessions.session", "pk": "fl8f9rt98ujbr35il7fn6y3fnlela2aj", "fields": {"session_data": "ODAzNWRiNjE2YmNlZTYxMzA1MTdjMWRjM2U4Y2UyZWRlN2FjNDY4ODp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg0MzI1MDU4NzUxMjZmNmE5MTVmMWMwZDQ4N2U3MmI0OWEwN2VkYmMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0OSJ9", "expire_date": "2017-05-04T11:59:54.521Z"}}, {"model": "sessions.session", "pk": "fmoig9r1a5z1hxo5oyyudowkkytbfmtu", "fields": {"session_data": "OTllYTc1NTg4ZDM1NzVjNmYyMjA5Y2UzODUzYWY1NjQ4YTEzZmQ2NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjAzNjQ5ZjE1MGEwY2VkMWZmOTA1YzNhNGVmMDFjZGFjZjNiYmRiMDAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNyJ9", "expire_date": "2017-04-03T11:41:40.734Z"}}, {"model": "sessions.session", "pk": "fn8nc995nx035cnyaaw0pnqsouhs9oz8", "fields": {"session_data": "OTdiMzM1ZWY2ZjQzNWQzNzQ3ZDE1NmU5YTU4ODZlZDcyMDUxODc0NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjEyNjZjNjI4MWViODUxMWFhNWEyYWU4MmJlZDlhYTMxMmZlOWQ0ZGEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzQifQ==", "expire_date": "2017-05-21T04:42:06.620Z"}}, {"model": "sessions.session", "pk": "fqbrje1qmpj79u7j8pl69c9uxxh4ejey", "fields": {"session_data": "ZTI5YWMxMDJiYmY3ZmY1N2Y4MmU5NmE2NWE1ZDVkMTljMmFhYjEyODp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODE0MjI0OTkuMDYwODE1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiMkhkZyJ9", "expire_date": "2016-12-25T02:13:59.070Z"}}, {"model": "sessions.session", "pk": "fro9jsrg4uy0glvz2a31lrw3hiawa3j0", "fields": {"session_data": "M2M0NmFjYmQzNTAwMGI1YjI5NWFmODgyY2ZjMjI2M2MxY2VhZTdkODp7Il9hdXRoX3VzZXJfaGFzaCI6IjU3ZmM5MDgyZmI5MjRmMDJjMDcyNWE5MTI2MTVmNmY1YzNjYzFhZjIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMyJ9", "expire_date": "2017-04-05T05:41:24.638Z"}}, {"model": "sessions.session", "pk": "frv6pwziyv99kpg7fkydzlry2u07upqd", "fields": {"session_data": "NTFhOGRkZjI2OWVkYTk3NzJmYjZhYzkzYjE0ODNiNGU4NmZmNWUzNzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM1NDk4MTkuMTY4ODI1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiNEdSWSJ9", "expire_date": "2017-05-14T10:55:59.180Z"}}, {"model": "sessions.session", "pk": "fscpd2h946geeyerchfj4hde4uwoufic", "fields": {"session_data": "ZjliOGFlYTlhYmI3ZTBjOWFhMTEwOGQyMDhhZDI2M2ZkNDM4ZGQyODp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDExODIuOTE5MjYsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJrR01oIn0=", "expire_date": "2017-03-30T05:12:02.925Z"}}, {"model": "sessions.session", "pk": "fw9yy0bw5ywvhu8k8zdsfgwwkm30pntb", "fields": {"session_data": "ZWE1NDllOTBlM2JhODM2YmIxZjE5NmJhZjA1NmFmOTcyOTE2NDJjZTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTIxNTQ2MTYuNzU0NDMyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoidHFjdSJ9", "expire_date": "2017-04-28T07:22:36.761Z"}}, {"model": "sessions.session", "pk": "fyy2wc6cu1oky7evmdaavssnn4lz8j82", "fields": {"session_data": "YTI5YjdhN2EzZTk1ODU3NGE0M2M0MWVlMzkwZDBhYmU3NGZiYTUyNDp7Il9hdXRoX3VzZXJfaGFzaCI6ImIzYTAxNDZhMDM0M2Q5MWFhNWRkNzE0MzFkNmY3Y2E2MWJhZjJlZGQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1NiJ9", "expire_date": "2017-03-31T01:58:18.063Z"}}, {"model": "sessions.session", "pk": "g0b06iy2ulumi1pcob82wpw8x5tzmen0", "fields": {"session_data": "YzllMWQwZGEyZDdmYTRiZDljZDNhY2RhZDdmOTRlN2RmZWQ1ODU1Njp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQ3MjcxNzkuNDE3MjY2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiQjdVNiJ9", "expire_date": "2017-05-28T01:58:39.498Z"}}, {"model": "sessions.session", "pk": "g0y13yb6v4hug6zxxygnt44tcp72z1ip", "fields": {"session_data": "NjUzOTExYWU3YzhkNDA3ODg1NzVlZDE3OTNiNDI3YzMzNzJiMTJkMDp7Il9hdXRoX3VzZXJfaGFzaCI6ImRmMzgyNDU1YTY1NGRhOTY5ZDgwZjRkODYzMGY5Y2M4N2FhNTRiMGYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMiJ9", "expire_date": "2017-04-11T14:53:27.023Z"}}, {"model": "sessions.session", "pk": "g16sf1kp8g1ve4xewqtgxsehrr3tusf3", "fields": {"session_data": "YjZjYWExODQ0ZjU5MjVlNGYyYmRhZjdjMWU2OTNiMmUxZWY1NmFlZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjAyNmY4YzBhN2I3MTA4YzE1OTJmZWQ3OTc4OWQ0NGI1OGE2MjNhZjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5MyJ9", "expire_date": "2017-04-05T05:14:25.644Z"}}, {"model": "sessions.session", "pk": "g2emy0x197elx5kt9megpu2mv1apqxjj", "fields": {"session_data": "M2U4ODEyNjg3N2Q4NDdhZWE5OTBiOGNmMDc3Zjc4M2IwZWM3MDJmNTp7Il9hdXRoX3VzZXJfaGFzaCI6IjNkYTYzYTg5NjNjNTEyODkwZTZkZmQ0MWFhN2VjNTQ0NTVjZjhiMjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMCJ9", "expire_date": "2017-04-24T14:45:21.765Z"}}, {"model": "sessions.session", "pk": "g8ep9mz11c76mhhbjzwy1vw0190q84mx", "fields": {"session_data": "NzMxYWQ5MmY5OGIzNTQ0ZjllYjM5MTQ1ZjY0YWVmZmJlMzNhZjg1Mzp7Il9hdXRoX3VzZXJfaGFzaCI6IjE2YjU0NTU1ZmU0ZjgxMzFlZmVlM2RkYzMxZTc2YmRkMWI5ZjlhYTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNDIifQ==", "expire_date": "2017-05-11T10:11:53.773Z"}}, {"model": "sessions.session", "pk": "g8z34090g2nidlomwej99wa5io8t093j", "fields": {"session_data": "YTkyOTA3OGRmYmEyMDA3ZGE2ZjNhYTcyNTZiOGQ5ZWY5MmM5MzkyODp7fQ==", "expire_date": "2017-05-28T02:03:57.457Z"}}, {"model": "sessions.session", "pk": "g9m3ql75cbdka3037h2k7ibi85jq4ka0", "fields": {"session_data": "NDI5OTY3YzI4MTA2NGMzMmNjMTU2NGExNTk1NDQ5MzczNGQxZjIxNDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5OTA0NTguMDkyODM5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoicjZFZSJ9", "expire_date": "2017-05-19T13:19:58.110Z"}}, {"model": "sessions.session", "pk": "gdxemwixg2a4kskk8a1le0koelahcgjm", "fields": {"session_data": "NjA1Y2M1ZDYyMjc2NTNlNTFkZjI5OGQ0Y2MzYWY1NTY5MjEyMmMzNDp7Il9hdXRoX3VzZXJfaGFzaCI6ImIyNGI0NmM3OTQwYTlkMmEyYzY5ZWNlMjY2MzBkZjg0MTMwYTQ2OTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjkifQ==", "expire_date": "2017-05-20T02:10:33.400Z"}}, {"model": "sessions.session", "pk": "gefbv73oub6172a2qg79nmokn7rs3y9p", "fields": {"session_data": "OWQ2YzZiNTA4YzIwMjE1NTAxY2QzNGM0MDNiYTViMDdiOTI0ZjAzMTp7Il9hdXRoX3VzZXJfaGFzaCI6ImIyNjJlMTQ3YzMyZGIzOGY5OTllZmEzNGQ2N2Q0MDMxODlkMTA4ZmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0In0=", "expire_date": "2017-03-29T04:41:19.600Z"}}, {"model": "sessions.session", "pk": "gep4utzp0dif6e1y2oubc50fgxl019kx", "fields": {"session_data": "Yjk3ODljMjg1YzUzNWM0MjFjMmVmNzIwZDIxNzA1YTJjMDNkYjg4ODp7Il9hdXRoX3VzZXJfaGFzaCI6ImNhMDFmY2UwNjVhNGFjNGMwZTZjOGMxYTRmMmMxZWQ2NzFmZTgzMzciLCJfZGphbmdvX2NhcHRjaGFfZXhwaXJlc190aW1lIjoxNDk0NDc2MTE0LjI3NzkzMiwiX2F1dGhfdXNlcl9pZCI6IjQwOSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2RqYW5nb19jYXB0Y2hhX2tleSI6Imt2aDYifQ==", "expire_date": "2017-05-25T04:14:14.284Z"}}, {"model": "sessions.session", "pk": "gf0ra8wjc2gntbwkcf50gpbe13b243t2", "fields": {"session_data": "ZjMxOGI3ZDA3MTQzYzBiYTU2NWMwMGI1MDExZmFkMWM0MzYyMzlhNDp7Il9hdXRoX3VzZXJfaGFzaCI6IjE4MmJmNTQ2ODNjNTczYWE0ZWI3ZGQ1OTEwY2M0ODc2YTJmYmQ0YjciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMTUifQ==", "expire_date": "2017-04-22T03:06:14.805Z"}}, {"model": "sessions.session", "pk": "gis2alji2m3bacublh112qpfvimxal3a", "fields": {"session_data": "ZTQyNTYwN2IxNjA0MzljYjZjMDIxYjY0MDhlMGVmN2YwZDkxNTAyNTp7Il9hdXRoX3VzZXJfaGFzaCI6IjIwZWVkN2E5YzAyNDFjMmE3ZmUyYWMzZDc0ZDAxZDJkYjcyNTEzMDciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDAifQ==", "expire_date": "2017-04-13T08:42:39.580Z"}}, {"model": "sessions.session", "pk": "gkg274b09n8u1i7abqlbdli1axv7m8w6", "fields": {"session_data": "MzliZTdlYTBlZTVlMjIwNTFlNjY0NDQ2ZGRlNDZjMmY5ZmNkOTdkODp7Imxhc3RfYWN0aXZpdHkiOjE0OTI0MzQyNTYuNzkxNjIzLCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-05-01T13:04:16.826Z"}}, {"model": "sessions.session", "pk": "gkzd0yna9kk6i6b9jfx236xxxrenivw3", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-20T07:05:44.879Z"}}, {"model": "sessions.session", "pk": "gnoe8kleouah2ahshomambikh33alg9u", "fields": {"session_data": "ZGU4ODNiOGY3ZDNkYzVlNWZlNDc2OWJlMDFjZWU3MTI1NGU2ODE3Njp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMyMTU2MzguMzEyMzIyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoidnJzNCJ9", "expire_date": "2017-05-10T14:06:18.322Z"}}, {"model": "sessions.session", "pk": "gnpxv69gfuwst7slketxyq2v9kmzyblg", "fields": {"session_data": "YjVmYWQxOWQ2NjdmMzMxM2QzMmI2NDllM2NjMWI2NTU0Zjg4MWI1ODp7Il9hdXRoX3VzZXJfaGFzaCI6IjcyZjFlODc1YmMyYTQ0ODZjN2Y5OTgwMGFjODg1NWYwZTI2ZGRlZWIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MDcifQ==", "expire_date": "2017-05-25T04:00:59.682Z"}}, {"model": "sessions.session", "pk": "goz9sy2a4g6rc9k5lqeq20hnx28knago", "fields": {"session_data": "NDJhNzI5OTIzNmVhMjJhYTZiY2Y5OWI2MWZlMTAzZjVlOTc3NGQ2MDp7Il9hdXRoX3VzZXJfaGFzaCI6IjcwY2Y0MjBhZTExYmRhMWRmMzkzZTZhYTgxN2VhZmU5ZGY3MzBlYWYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMTkifQ==", "expire_date": "2017-04-28T04:21:52.365Z"}}, {"model": "sessions.session", "pk": "gp1by1yu6n6ypi3jh2nqh29xb84kunzg", "fields": {"session_data": "NWY5ZmRlYWUxMjQzMzU5YjgxNmE0ZmIwMzZkOWQzYjUxN2Q5NWU1NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjU3ZmVhNjZiYTFmMWIwZDg1OGJmZjY1YmNmNjI0NzMwZjBhNTQzNzAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzIifQ==", "expire_date": "2017-05-12T12:53:00.226Z"}}, {"model": "sessions.session", "pk": "gr1tke20xzgfjbizkx0u2es7iosgokgd", "fields": {"session_data": "Y2M2N2E0ODhlMmEzZWJlYWUxZTM4NDQwNDA3YjM3M2ZkNmFmZDRiZTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM4NzEzNDkuMDkzNzkzLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZGJONiJ9", "expire_date": "2017-05-18T04:14:49.106Z"}}, {"model": "sessions.session", "pk": "gri8idl0107bxp3y34114o9806skosju", "fields": {"session_data": "OGYxYmYzNTQ3NzI1NGQ4YmNlODJhNDVjZmRiZGViNzBiMmRiNTk1Mjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk1NTk2NTYuNTg5NzI2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiSGFEciJ9", "expire_date": "2017-03-29T06:33:16.597Z"}}, {"model": "sessions.session", "pk": "grumjb3lxczu6xep2c4iaul08smqetol", "fields": {"session_data": "Y2M3ZjljY2JhNTlhN2NjNjg1OWM2MmE2NjAzZjA0NTNlNjBjM2YzZTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg4NWU5YjFkZWQzZWJjMDc3NWVhOGZhYmY3NTk3N2RiMjE4MDUzNDUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNDAifQ==", "expire_date": "2017-05-20T03:53:54.277Z"}}, {"model": "sessions.session", "pk": "gs0awb8fhbjyme2wnjiwrb1z55qxy0ib", "fields": {"session_data": "N2Y4ODhhNjA4NTRjNTMyZjMxNDM0YzNhYjFjZGYwZDQ0ZWE1YmU1MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImY2MDEwZTAzOTUzNThkNzBiOWVkYTU3MDc4YmZmYmIyYmMzMDlhMDYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzIifQ==", "expire_date": "2017-05-20T00:31:42.400Z"}}, {"model": "sessions.session", "pk": "gs8qg0twrc56hxb1q360s7bxocvo1ph5", "fields": {"session_data": "ODQ4ZWRjMzJkMzVhMzdhMDdmYmY0YWM5NTFhYWI3NTE3OTA5MjY1YTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQwMzgwODUuMTY0ODY4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiM3NDUiJ9", "expire_date": "2017-05-20T02:33:45.180Z"}}, {"model": "sessions.session", "pk": "gttsla6bmxmjvh9u1n9vza8kp7t1qlgd", "fields": {"session_data": "ZmVhMmNkMmVkMzUyZmI3OTA1MzAzMTMxM2JhMTMxYmYyZjFhYjFlNTp7Il9hdXRoX3VzZXJfaGFzaCI6IjAxZWI3MjJmMDNiMGU5OGM4ODc0ZmZhOWJmM2FjMzFkNjI5MmJmZjkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNTEifQ==", "expire_date": "2017-05-28T04:01:55.657Z"}}, {"model": "sessions.session", "pk": "gvm27huihmfsuz6d51b1vrms5e3fwk0t", "fields": {"session_data": "MTA3ZjNiN2IwNGRjMDc0NzdiNTMyZGU4N2ZjYzk3Mzk5NTY0MDdkZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjZiZGFmZDc1ZTA3ODdjMzBlOTE1ZTM4Njk1MjVhZjA0ZmJhMDE4MTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTIifQ==", "expire_date": "2017-05-21T15:12:11.526Z"}}, {"model": "sessions.session", "pk": "gw4874fzmvgxb2h100hz6ugejfo8ak3g", "fields": {"session_data": "MjI5M2RiNDAyNzA2ZmEyYTI3ZWM2NDc2N2ViMWVkYjc5OWIyZDZiNTp7Il9hdXRoX3VzZXJfaGFzaCI6IjViMTM4MjRiMzgxOWQ1MWM4ODg4YzhhOWNlMTc0MDlkMWQzNzQyYTMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNzEifQ==", "expire_date": "2017-05-28T04:17:25.502Z"}}, {"model": "sessions.session", "pk": "gzbxq67aubtq8b8i5y7fb60wu5mm3szo", "fields": {"session_data": "MzRiNTEzYWE1MWI5YzQxMGY1OWFlMGI2MDExNTYxZWI2N2JiMjM3NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjlmNzk4MTkxNTExYzA4ZWRiMDA5YWRhZjU3NGE3OWZjMjhjYTVhNjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5In0=", "expire_date": "2017-04-01T03:55:57.606Z"}}, {"model": "sessions.session", "pk": "h3r1d9w7cgfp6hzn3i7ddf14yha1n6f4", "fields": {"session_data": "ZmUwMjIyYjE0ZjkxMWE1NGVjYWFiOTExOGM4ZWJiZWM5MTNiNTBjMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjQwM2I2ZTQyMjI0YjExOWY0YzM1NGY2OGI5MDdhNGIwYWVmYTM3NjciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTUifQ==", "expire_date": "2017-05-21T06:09:15.180Z"}}, {"model": "sessions.session", "pk": "h40ntjoc2su8zqosr0ydeubghawwomun", "fields": {"session_data": "MTVmZDljYjdlZTFmODU3ZWZkZGMyNTIwYTUxZThlMzcwNWZiOWY5MDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQwMDIwMzIuMjA0NDg0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoicnNjNyJ9", "expire_date": "2017-05-19T16:32:52.209Z"}}, {"model": "sessions.session", "pk": "h7l0d53o7t3cyk93w4k2xj2tiuqga1mn", "fields": {"session_data": "ZjVlZWUyZTQ5YjJmYWVmMzk0NzdhZDMzNDg5ZjA5NWE3MDVjOWNlNDp7Il9hdXRoX3VzZXJfaGFzaCI6IjE5Y2EwOWY1NmM0YTY0YmRjMjU3OTBjM2ExODVmYTZkYWQ1NjViYTMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDMifQ==", "expire_date": "2017-04-05T11:23:04.735Z"}}, {"model": "sessions.session", "pk": "h7ogdsir4e5rd07ufjddqw4bndls8d7r", "fields": {"session_data": "NjA1Y2M1ZDYyMjc2NTNlNTFkZjI5OGQ0Y2MzYWY1NTY5MjEyMmMzNDp7Il9hdXRoX3VzZXJfaGFzaCI6ImIyNGI0NmM3OTQwYTlkMmEyYzY5ZWNlMjY2MzBkZjg0MTMwYTQ2OTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjkifQ==", "expire_date": "2017-05-20T09:53:00.971Z"}}, {"model": "sessions.session", "pk": "h7qkw8nu21mfxzrawsd34bv5yyg6txrk", "fields": {"session_data": "Y2UxNzMyYzA5ZTI2NDk4MTdjYjg3NWYxYmQ5ZDEwOGE5MDFkYTcwOTp7Il9hdXRoX3VzZXJfaGFzaCI6IjkzNTM0MDQ3NmNlZDkzNWRmMjdjZDk3OTkyNzdmOTMyOWRkMjlhNmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzOTYifQ==", "expire_date": "2017-05-21T10:50:56.890Z"}}, {"model": "sessions.session", "pk": "h8yct7swaqthgolbwe24trsn82ti83s3", "fields": {"session_data": "ODFjZjFiZmJmMzk4NWNjZGQ5NzFmOWI5N2E4NmUxMzUxOWQwNDI0Yjp7Il9hdXRoX3VzZXJfaGFzaCI6ImZhMjJlMzY3NGMyM2M5MTY1MGM1ZmRjOWZhM2M5ZTFjNmY3YzVjZDgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzgifQ==", "expire_date": "2017-05-21T06:07:29.155Z"}}, {"model": "sessions.session", "pk": "h9fqp656s52vpbivee8j34bsfw1vwpk1", "fields": {"session_data": "MDYyZWU2ZGI2NTJiYTA3ZTBiMDVmYWM1ZDdmNzgzOTcyMzc2ODY2NDp7Il9hdXRoX3VzZXJfaGFzaCI6ImJkY2Q0NmY2YWE0ZTg2NGJjYzhmZGQwZDRjNGFlMWI3ZDU5Nzk4ZGYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMTYifQ==", "expire_date": "2017-05-19T12:54:31.639Z"}}, {"model": "sessions.session", "pk": "haalx7p9ze4pv2pkbstqoynx6ndvw87u", "fields": {"session_data": "MDBiMTE2ZDJkNTM5NjdkMmJhZDExNTE4ZjMzNWRlZTNmMTI5NjEyNzp7Imxhc3RfYWN0aXZpdHkiOjE0OTQ1MjAxNzYuMzQ3NDgzLCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-05-25T16:29:36.353Z"}}, {"model": "sessions.session", "pk": "hats7n82fhza8quvbt9t5ekx5k4kv8d4", "fields": {"session_data": "Y2RlNGIyNGI0MDdkMDZmMzBjZTJlNTViMzZjMjY5ZGI2NWYzNTg1Yzp7Imxhc3RfYWN0aXZpdHkiOjE0ODg3MTg3MjkuODU2MTQ5LCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-03-19T12:58:49.874Z"}}, {"model": "sessions.session", "pk": "haykrdxnt5f3ttbofy5w394cyikquuwx", "fields": {"session_data": "MDYyZWU2ZGI2NTJiYTA3ZTBiMDVmYWM1ZDdmNzgzOTcyMzc2ODY2NDp7Il9hdXRoX3VzZXJfaGFzaCI6ImJkY2Q0NmY2YWE0ZTg2NGJjYzhmZGQwZDRjNGFlMWI3ZDU5Nzk4ZGYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMTYifQ==", "expire_date": "2017-05-21T03:38:23.522Z"}}, {"model": "sessions.session", "pk": "hb1t0rj6atn9qt07w0xf9n6311633hue", "fields": {"session_data": "ZjlmZTJiZWUwZWY3OTBlMmMxZDBmMmNiZDVlNmEwYTE3ZmZjY2UzYzp7Il9hdXRoX3VzZXJfaGFzaCI6ImJkMjc4ZWU0OGFiMGE2M2QwNjk5YzQ1MzM3ODhkZjNlMzllOGNlODgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4OCJ9", "expire_date": "2017-05-22T08:50:02.161Z"}}, {"model": "sessions.session", "pk": "hdfk3kefmucxdm7wc1lpr8vkn6971oze", "fields": {"session_data": "M2VkYzhlODZjYzU0YjdkMTMzNzI1M2EwNWE2NzgxNzU2Mjg1OWU5Yzp7Il9hdXRoX3VzZXJfaGFzaCI6ImQxYTkwZjM3NjExNDUxMGQyMmRlYTk4ZjY5NzExZDZhNWM1OWEzMmIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNzgifQ==", "expire_date": "2017-05-28T04:04:36.491Z"}}, {"model": "sessions.session", "pk": "hdxf0qzj7klmhs8216bkjti4rg9cqq94", "fields": {"session_data": "YTRlZDIwMjY2ZWRiMjM0NTZhNzlkNWJhYjQxZDEyMDk3NGQwOTI5MTp7Imxhc3RfYWN0aXZpdHkiOjE0OTQyMzQyODQuMzIwMjI0LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-05-22T09:04:44.324Z"}}, {"model": "sessions.session", "pk": "hdyqjm0d9grw324ig17vq7x5j3c2m551", "fields": {"session_data": "MzkzNzkxNjBlYTg3MGZmNTFhODhhYjNiYzAzMzgyNzk0OWY3Mjc4Yjp7Il9hdXRoX3VzZXJfaGFzaCI6IjEzNDlhN2YxNDA4OWUxMGJjZjRiMWJmZjc1NjQ1MzQxODkyY2NiODIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzgifQ==", "expire_date": "2017-05-21T03:24:36.916Z"}}, {"model": "sessions.session", "pk": "hegtzn8wawc85pixakv8ljo3ps1quxc3", "fields": {"session_data": "ZDM0NTk2ZDlmZTcyZWI0MWEwYmY4NWNkMGZkYWM1YTc2ZWI2YTY2OTp7Il9hdXRoX3VzZXJfaGFzaCI6IjM0ZTAzZWRiMjEzYmM2ODk1NzNmOTI0ZDk5YjU2YjI4MDc3MGI5ODkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1In0=", "expire_date": "2017-03-29T04:31:59.380Z"}}, {"model": "sessions.session", "pk": "hgkv8rnggki9fqfjuvwcub084lk8g4fe", "fields": {"session_data": "MTNmYTY3YzM2ODU2MmI4Yzg3N2NlZGYzN2VhMWI5NjQ1MGM3YjAyMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjE4YmU1NjQ2ZTQzMjdkMDYwOWU2ZjAwMmE2YWNlNjQ0MTYwN2Q2ZjIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1NSJ9", "expire_date": "2017-03-31T05:31:29.030Z"}}, {"model": "sessions.session", "pk": "hh44wg7gou8nm5c9w135s2ewwnzox3vo", "fields": {"session_data": "OTk4NzYzM2Q4ZDYzYTdkNTFkYTU3NzA0ODdjNmZhMGY5YmMwNDMxNTp7Il9hdXRoX3VzZXJfaGFzaCI6ImY5MDhkMzYwYzMzNjVjZWZiMjY3Yjk4ODhjZjg2M2Y4NjIxZjBhMjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0In0=", "expire_date": "2017-04-05T03:38:50.475Z"}}, {"model": "sessions.session", "pk": "hid3dpkegmkycmnpfy7q93qpiyw6e3a9", "fields": {"session_data": "ZWQ5ZDNhNWM5Yjg1M2I3MDBiNWNjZmFmMzJiZmI3NzAwMTNiZjUxMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhY2M3MTI1OWU2ZWU2NWY3MGE4NDNkM2NjNmE2ZjBiYmI1ZWY1MDAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTYifQ==", "expire_date": "2017-05-16T09:04:49.672Z"}}, {"model": "sessions.session", "pk": "hjoqaywn7wben9cxq08egyioktvn3x3y", "fields": {"session_data": "NzA1YjQ1NTliNWE2MTY1MmNjM2EzNTgxM2VjZTlkOTc3MDVmZDE0Mzp7Il9hdXRoX3VzZXJfaGFzaCI6IjI4NWY1NWQ2ODhmMTJjM2Q3YjYxMmZiZmJiNzQ4N2UyYTYxZmRkMTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjEifQ==", "expire_date": "2017-05-21T09:09:04.734Z"}}, {"model": "sessions.session", "pk": "hol1zc08nz846mo81b53vhpke28rx4vc", "fields": {"session_data": "M2U4ODEyNjg3N2Q4NDdhZWE5OTBiOGNmMDc3Zjc4M2IwZWM3MDJmNTp7Il9hdXRoX3VzZXJfaGFzaCI6IjNkYTYzYTg5NjNjNTEyODkwZTZkZmQ0MWFhN2VjNTQ0NTVjZjhiMjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMCJ9", "expire_date": "2017-04-04T14:07:44.609Z"}}, {"model": "sessions.session", "pk": "hp36sk85n87o051qur1a7slzfofr7x8p", "fields": {"session_data": "N2Y1ZTg2Yjg2YjUzMWNkMmQ2YjhjMTdhNDA5MDYyN2I3ZTIzMjQ1YTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTI2ODUzOTguMTkxMjY1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoidFgzRSJ9", "expire_date": "2017-05-04T10:48:58.197Z"}}, {"model": "sessions.session", "pk": "hpqkaa2slpk9qoe9i8dhfdnmpln5eewj", "fields": {"session_data": "M2I3OTBlMTEzOGNlMmI1NTMzY2Q1NzAwMDNlMjNmZDJiZGE4ZTY2Njp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk4MTM0OTMuNDc1MDA5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZmhRVCJ9", "expire_date": "2017-04-01T05:03:53.480Z"}}, {"model": "sessions.session", "pk": "hqswxvnff07hgfbteoc5jahimxxpjiz4", "fields": {"session_data": "YTEzODBlZjllNWM3NTZmMTYzZDUxZWNlNWU3NTBmZjJkNjk3OTc2Zjp7Il9hdXRoX3VzZXJfaGFzaCI6IjQ3ZTkxMDM1OTZiMTU2NDY4MDU5MTQ4N2ZkZDYzZjFjODAzYTZjMzgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMzUifQ==", "expire_date": "2017-05-13T02:46:50.652Z"}}, {"model": "sessions.session", "pk": "hrqfagd7l9tdu0j7aa377mwg8wh3hfyc", "fields": {"session_data": "NDNjY2JkYjIxZjcyZDdkZWZjYTJkMDA3OWU0ZWYyN2JhMjc4N2FjNTp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiYWMxNzQ0ZWM2M2UyZWE0ZGU5ZTE5MmRhNmZhMDViZGU0ZTlkY2VlMSIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQyNDAyNTMuOTM1MjUsIl9hdXRoX3VzZXJfaWQiOiIyNjciLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiTkJHdiJ9", "expire_date": "2017-05-22T10:43:35.127Z"}}, {"model": "sessions.session", "pk": "hurdw8jp1it9qrtc89wx34rj9csdfsw4", "fields": {"session_data": "NGQ5N2UwMjA0ZWNiNmZhMzEzMmMwNDEzNjFmYjBjZTA5MjI0ODI0ZDp7Il9hdXRoX3VzZXJfaGFzaCI6ImMxYjlkMDg1NTc3NmQwNDkxNzk1NmNmNGYwZGI4OWJmZWEzMGNhNTIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzEifQ==", "expire_date": "2017-05-21T03:03:03.653Z"}}, {"model": "sessions.session", "pk": "i0h5jn80p5j5gk38pc1cfjqm59eshfvh", "fields": {"session_data": "NTI0MWMwY2RhMmVjYmI0MzBkZmFhNTRkZTRiMjMwMjI4NjQwNjMzNjp7Il9hdXRoX3VzZXJfaGFzaCI6ImMzZDhmNjc1YmZmMjRjMzlkZDhjNmEyOWE1M2VjNGEyZWU4YzE3ZTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MDAifQ==", "expire_date": "2017-05-25T00:41:45.961Z"}}, {"model": "sessions.session", "pk": "i0nd5ylutg357waipf2owk2flxmy2eoi", "fields": {"session_data": "ODkyOWU4MTc2MDMzMmY0MjhiMzY2ZDQxNmE1MGEyMzY0N2VjZjQzZDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQxMzQ2MDQuODUwNTU1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiQmFReiJ9", "expire_date": "2017-05-21T05:22:24.865Z"}}, {"model": "sessions.session", "pk": "i269ge35h8sorcj0rocrdotmbw2v1z9b", "fields": {"session_data": "MjQwZjcwMGY1MTc0ZWE5NzUxZGMyMmMxYTdjMTI5NGNlYjdjNjNiMjp7Il9hdXRoX3VzZXJfaGFzaCI6IjY5YjkxNGM2MWU5MGIxNDM3NjdkZGYyZGIzYThiNDEwNTBiOTYyNjQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzODIifQ==", "expire_date": "2017-05-22T15:11:01.992Z"}}, {"model": "sessions.session", "pk": "i38enlli6sr2n0i03p1osffchxpru8z3", "fields": {"session_data": "ZjVhOTFiMWFiYmJkZmY4Zjc0MzNjYjJmYmM4NDc1YmVmMjJiNTlmYjp7Il9hdXRoX3VzZXJfaGFzaCI6ImIxNTk3NTQxOWI4N2MyOWQ3YTY5MjAwNzRmMmNkNDk4MWRiMzNhNWEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMSJ9", "expire_date": "2017-03-28T06:46:09.604Z"}}, {"model": "sessions.session", "pk": "i3p2ybyvngelyuumtebq0i8yib0qucw4", "fields": {"session_data": "MThmMzQwMDQ5ZGFmYzY4NjYwNTJiZjI3ZDQ4ZjAzODIxMjgzYjcwNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjI4MDk1MzEwNThhNDZhMjYxNTZkZGUyNzA0OTdhMWZlOTI0MzI1ZTYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2MyJ9", "expire_date": "2017-04-28T02:44:44.150Z"}}, {"model": "sessions.session", "pk": "i3visnvmf05ug7jx1ruvzjl7lk23tk3q", "fields": {"session_data": "NWY5ZmRlYWUxMjQzMzU5YjgxNmE0ZmIwMzZkOWQzYjUxN2Q5NWU1NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjU3ZmVhNjZiYTFmMWIwZDg1OGJmZjY1YmNmNjI0NzMwZjBhNTQzNzAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzIifQ==", "expire_date": "2017-05-21T06:03:36.364Z"}}, {"model": "sessions.session", "pk": "i6neen3q2bk6j7rs1lw6w9fhvvsyk13o", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-20T12:00:31.042Z"}}, {"model": "sessions.session", "pk": "i7uvsvka0sgbb7cg2b36qllr51q5msuw", "fields": {"session_data": "MjA0NGJlZjczYjU0MDZhOGJlNjJhMTgxODAwOGNiOTE4NDc0YTM5Nzp7Il9hdXRoX3VzZXJfaGFzaCI6IjM0MzIyMjBkZDI5YmJjOGFlYmUzMjUzNTBkYThjYWZiZjkwMjcwM2EiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNzIifQ==", "expire_date": "2017-05-21T04:03:50.514Z"}}, {"model": "sessions.session", "pk": "ialb17ovpl47nkjy05vdepdhcaawl2ls", "fields": {"session_data": "MWIzMjI5YWJjOTU3NDQwMDYwNzJmZWZkN2Y4M2M2Mjc5OTY2ZDRkZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjAxNDU2NzBjZTg5NDQ5ZWFhY2U1MTQ0ZTVkOTAwNWVkYmEzMDJlNzYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMiJ9", "expire_date": "2017-03-30T05:33:56.665Z"}}, {"model": "sessions.session", "pk": "ibblj5d1l97wc9dvrisydpwuu64xljuf", "fields": {"session_data": "YzVmYTY1NjEyNGE4Y2ZmNDc0MTZlMDA0NTk4OWZlNjc5MzQxODBiZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjM3MmE4NWI4MTAxZjdmMDAwNzY3OWU2MTA1ZTY2ODgzNWI1OTBiMmQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNSJ9", "expire_date": "2017-03-29T04:41:36.846Z"}}, {"model": "sessions.session", "pk": "ibjmed24ps48z5h0p3ttkw0y9o8wrbfd", "fields": {"session_data": "Nzc4YWEwZWE1YmViYTZmZDQ5Y2VjMWJjZDFkNjBiMmE0ZTg1ZjMzODp7Il9hdXRoX3VzZXJfaGFzaCI6IjdmMWMxMTE0MmI1MDNjNTA4YTZjMzIwZmE5NjY4Y2U3MWU5M2I5MDMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNTQifQ==", "expire_date": "2017-05-28T04:00:24.285Z"}}, {"model": "sessions.session", "pk": "id1qn4o9c1kr4zsujgbxlmg33y3g0cxz", "fields": {"session_data": "NWY4NTc4N2NkMGU2OWJjOTk4Yzk2NGNmZTdiMTM5MTMwNzE2OWNjZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjgzYTVlYjMyYWYxYmY4ZTgzODllYTVjYTllZWRjODFlNTlmNWUxYjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzMifQ==", "expire_date": "2017-05-21T10:37:35.621Z"}}, {"model": "sessions.session", "pk": "idv0mkjp2dmqlq75lraamkaa6199qgpo", "fields": {"session_data": "OTM2MTI0ZTI2NzYxNjlhNzg3NGI2OWUxNDA0MDdkOTIzYjI4MTY3Mzp7Il9hdXRoX3VzZXJfaGFzaCI6ImU0OGQ0ZTUzNDhkZGI1ZjYxOGRjOGQwNTUyNjgyZjc1MGIxZmZkOTkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMDIifQ==", "expire_date": "2017-05-21T03:55:44.209Z"}}, {"model": "sessions.session", "pk": "iem2c0gmsxhtg17z4qefp2tadko54zhy", "fields": {"session_data": "OGQ1ZDY5Mjk4YmVmNmE2MjFkYjJhZmQ1ZjU2MTM4YWYzM2YxYjZlNDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5ODI5NTguMDM2ODg2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZUFYSCJ9", "expire_date": "2017-05-19T11:14:58.086Z"}}, {"model": "sessions.session", "pk": "iibom0f1lssx6jzw5lg7fyoouazly9ep", "fields": {"session_data": "YjBhZTUwYzVlOTgxY2UwMWYyZGNhYzliYjQ1MDVkMjQ4MjVkN2E4NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjRlODVlODI5NDMxODQwZTBmYjAzNjNhZjA1MmZlZjNiYjNjOWY5NTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4In0=", "expire_date": "2017-03-17T12:24:31.523Z"}}, {"model": "sessions.session", "pk": "ijzux9k8waubufjcxlhcsd6zwqohk1k9", "fields": {"session_data": "ZjhjYzk5N2RhMWZjNzMzYzg3MDU3NzM0ZjJjM2I1ZGZiYzM5MDA3Mjp7Il9hdXRoX3VzZXJfaGFzaCI6IjQzNGIxYTZlNjllMzA1MGM0OTkwZjI4MmVlYTQzZGIxMzkwNWQ1NTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNTcifQ==", "expire_date": "2017-05-20T15:28:25.749Z"}}, {"model": "sessions.session", "pk": "ikyhjecs5625kpr0rbd94xgyrhm02tlr", "fields": {"session_data": "Y2JlMmEzNGUzNTlkZWRhOWEzYWM3Y2U5NWRlYjFhOWNjM2UzOWY5MTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5OTEyMTIuMDk0NjI5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiNEZrUiJ9", "expire_date": "2017-05-19T13:32:32.105Z"}}, {"model": "sessions.session", "pk": "il2tjveg40fa1iuj05kspr8fl0xrv4du", "fields": {"session_data": "MjMyNmVlMTZkM2E2NTEzYWM0MTJhZTRhYWYwYTUzYzkxNGY0NGJhODp7Il9hdXRoX3VzZXJfaGFzaCI6IjBjMjdlOTM3NWFlMzVjMzliNTM5YThhYmM3OWFlMzc5YTY1ZTkwODEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNiJ9", "expire_date": "2017-04-05T14:33:52.250Z"}}, {"model": "sessions.session", "pk": "illndhdcjg9azwsezhugoq786covt5we", "fields": {"session_data": "OTdiMzM1ZWY2ZjQzNWQzNzQ3ZDE1NmU5YTU4ODZlZDcyMDUxODc0NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjEyNjZjNjI4MWViODUxMWFhNWEyYWU4MmJlZDlhYTMxMmZlOWQ0ZGEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzQifQ==", "expire_date": "2017-05-17T11:48:43.292Z"}}, {"model": "sessions.session", "pk": "iluuwoc5nd8hqu1k9sgcwh1lxk2ei24m", "fields": {"session_data": "NmUxNjc2ZTExZWM0YWYyYjdmNjQ5NTEzOTYwMjAwZjEyMDQxN2FiZjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQxMjQ3MzMuNzU5NjYxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiQkg2WSJ9", "expire_date": "2017-05-21T02:37:53.777Z"}}, {"model": "sessions.session", "pk": "im0zohcjkzayos556q83r2j0vnmd8qrj", "fields": {"session_data": "M2QzNjViNWZhYzkyODE2YmQ1NGNhMmIyNzIzNGE5YjY3ZDRhZmM1ZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjQwYjg5YjFiY2U3ZDlhYjRhMjdiMTIxODgyOTE4YzI5YjBhODE0YzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2MyJ9", "expire_date": "2017-04-01T00:40:47.794Z"}}, {"model": "sessions.session", "pk": "ipihwrmifbf9j6389p2iyh1lb76lr2jr", "fields": {"session_data": "YWNkZTUxNzZiZjgwZjdlNGRiYzQyZWI0YTk0MWVkMWMwMjU1ODAzNzp7Il9hdXRoX3VzZXJfaGFzaCI6ImY4M2FkNzdmOTBmODlhYTJlMzE1ZDI0MTliYWVlMDIwNDQ5MmJiNzkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMjYifQ==", "expire_date": "2017-05-04T14:49:36.584Z"}}, {"model": "sessions.session", "pk": "ipqneixrkgk1lxnxk6ftnw9z5g7hwlrr", "fields": {"session_data": "NWQ2NGVkZWMyY2IzOTFkNzI4NzU0YzI1M2E2YjY0YTFkZjg0ZDdkMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjljZjQxZjhmODIwOGU0NjFhZTg1ZmU1ZmMzODhmYzQ2ZjRkZTZhZDkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNzUifQ==", "expire_date": "2017-05-21T04:29:16.803Z"}}, {"model": "sessions.session", "pk": "irx1xeygb9gtpl9hyuxx05ez4p8itfew", "fields": {"session_data": "ODU5NWJlOTRkNTkzMzUwYTJjNTY2YjI0MjMzYWU1OTdmZDVjZjc3Zjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTIxMjQ0MDEuODE2MzYyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoicWRrbSJ9", "expire_date": "2017-04-27T22:59:01.882Z"}}, {"model": "sessions.session", "pk": "ithzljaaqrn9v4wniy8o5d9wv2wn20ic", "fields": {"session_data": "ZDY2MThmZTNmNmJhNWUwMzAzZjY0MmRmOWM5ZDMwNTE5NGRkY2ViMDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTIyMDY4NzUuMDYyMDU0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiS2NPNiJ9", "expire_date": "2017-04-28T21:53:35.069Z"}}, {"model": "sessions.session", "pk": "ivt1lx86tfhzlz2a3rpvyfhe5h3117pg", "fields": {"session_data": "YWYxNzViOGEzMWYyZDkzMGMyZTM1YWFkNWU0Y2ZjMzFmZThhZjk5NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjJhMGZlMTMwZmYxMTQ2ZTZiYjI5YzNmYTZlODk1ZWM0MzRhNmJiNTMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNTEifQ==", "expire_date": "2017-05-21T03:55:43.958Z"}}, {"model": "sessions.session", "pk": "iw3gqvvuj1tbhw8oy0r4wh7mzizw6sjo", "fields": {"session_data": "M2YxZWZjNmQwZDZmMGFiNzAyNjhjZjRhODY5NTMzMjBjYTI0OTMwNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjkzZjJjN2FhNzY2YTU1NzUxYzhhNzU1YWU1MjE0ZmFmMzRjZmRkN2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5In0=", "expire_date": "2017-04-27T11:40:46.145Z"}}, {"model": "sessions.session", "pk": "ixc44gnju26x1mt7xnepkrsqgxxecth5", "fields": {"session_data": "ZjYyYWNhNGMyMzE1NmVmMzYwNGQ3ZjFhNTFiODZkNGE5NmQ4MjIxOTp7Il9hdXRoX3VzZXJfaGFzaCI6IjAzODFmZjgyN2EyZWVkNTJmN2RlZmJhZTNiY2Q0N2I1NTE3OWIxN2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxODAifQ==", "expire_date": "2017-05-28T04:03:48.383Z"}}, {"model": "sessions.session", "pk": "iyfjtgj1t1inpf5dt2f7sribojcovy6t", "fields": {"session_data": "ZjIzMGJkOTFhZTc4YzEzOTQ3NjhhYjVjNzRjY2E1ZjA0OWQ0NTkwMTp7Il9hdXRoX3VzZXJfaGFzaCI6ImE1Y2ZiZjIwN2MxNGQ1ZmExMmQyYmI1YzQwMWEwNTE5MjBiMDJhY2MiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzcifQ==", "expire_date": "2017-05-21T03:30:48.823Z"}}, {"model": "sessions.session", "pk": "izcyfq9id96f7rcbaxyrgw9x0jn5uweo", "fields": {"session_data": "MzE5Y2QwOTE3MDU4ZjIwYjEyNTU2ZGIzNDA5ZmU0MTgwODQxYTk4OTp7Il9hdXRoX3VzZXJfaGFzaCI6IjVkMDkyMDdhMjMxM2M3OGZiNzBhNjExZDg5MzRjZjcwMTUxZThiYjQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2NyJ9", "expire_date": "2017-04-04T10:04:04.145Z"}}, {"model": "sessions.session", "pk": "j0iwdgbmgzwce91ptn8flp1382r6r701", "fields": {"session_data": "NjRiMzRhMWRhOTQ4OTQwNWExNjFhZjE5ZWZiYmFmMmYxMjAzMTliZDp7Il9hdXRoX3VzZXJfaGFzaCI6ImE1ZGY4Mzk4Yjc1MmMwOGQ0OWQ0MTdlYTdhNTM3N2FlNjM3OWU3MTYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMiJ9", "expire_date": "2017-03-28T13:59:36.753Z"}}, {"model": "sessions.session", "pk": "j0zjllgv3dcht3poh8z4sh37miuxjn7z", "fields": {"session_data": "YTg5ZjYxN2EwMTFlZmNmN2I0MjFmMzNiNjllNGE2ZWVhNWQ5NTMyZjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM1NTM2NTAuMTg2OTc4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiWGc0ciJ9", "expire_date": "2017-05-14T11:59:50.202Z"}}, {"model": "sessions.session", "pk": "j13tzk62xdk494hsx7hcy0mku7o2piz1", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-20T07:36:04.883Z"}}, {"model": "sessions.session", "pk": "j3tofaqegckf96kz9cos8p71rftg8vyt", "fields": {"session_data": "ZDI5Mzg0OTg5ZDk5ZGQzMWNhOGM4ODExNjY0MzE1NTA4ZWQ0NDY3Zjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQwMzgwODUuMTAwNTgzLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRmRBNyJ9", "expire_date": "2017-05-20T02:33:45.110Z"}}, {"model": "sessions.session", "pk": "j432u0kjpgpvr2g4r51xrpkdzzl96hix", "fields": {"session_data": "Nzc2NmFmOWJiMDgzMjc4YjI1MWZlYWM4Zjk3ZmIzNWYzMTRiZDUzZTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxNTk4OTguNzYzMzA3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoieENUUiJ9", "expire_date": "2017-04-05T05:17:18.774Z"}}, {"model": "sessions.session", "pk": "j4iksso6vy9vbnqr9nd6pp404yhr9u8f", "fields": {"session_data": "OTk5OGRkNTQ3ZTc2MDdmMDFkMDE5ZGNmOWY2MjUxNmE4N2I2MDQxNDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQwOTY5MDUuMTQwMTA1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRXpCUSJ9", "expire_date": "2017-05-20T18:54:05.155Z"}}, {"model": "sessions.session", "pk": "j4qqadf5afxmhyd4feyypjau110w5xpc", "fields": {"session_data": "ZDM0NTk2ZDlmZTcyZWI0MWEwYmY4NWNkMGZkYWM1YTc2ZWI2YTY2OTp7Il9hdXRoX3VzZXJfaGFzaCI6IjM0ZTAzZWRiMjEzYmM2ODk1NzNmOTI0ZDk5YjU2YjI4MDc3MGI5ODkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1In0=", "expire_date": "2017-01-03T08:29:07.114Z"}}, {"model": "sessions.session", "pk": "j74ugpdc0b86vbmv67an5k5wmuzre84u", "fields": {"session_data": "NWFjOWU3MzUyZjk2ZTA3NWQwMDA2MzA0NjgwODQzZWVkZWQ5MjlmOTp7Imxhc3RfYWN0aXZpdHkiOjE0ODk4MjMyOTkuMzcwNTg0LCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-04-01T07:48:19.387Z"}}, {"model": "sessions.session", "pk": "jdtxg80nlmmruh7mnv4m2aswtkn5mwcb", "fields": {"session_data": "OTQ3MzY4YzFiZDViZmFkNWNhZGVjYzk0N2Y1YzY1MzlkYTMwOGQ4Njp7Il9hdXRoX3VzZXJfaGFzaCI6IjE3M2IxZWMyYjE0MmI4ODk2NDUxYjg4MWQ0YTdlMmU0OWRhN2I5NTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMTQifQ==", "expire_date": "2017-05-19T13:06:56.404Z"}}, {"model": "sessions.session", "pk": "jfinluo6qxor2wuo0qkk7vedqx17n1pz", "fields": {"session_data": "YzJkNDVlMzFmODEyN2Q2NTEwNjQ4MTJlNmYzMDdjODYxNmZlYTUyYzp7Imxhc3RfYWN0aXZpdHkiOjE0OTA5NDQ5MjAuNzc3NjQxLCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-04-14T07:22:00.786Z"}}, {"model": "sessions.session", "pk": "jfp89wmglel9uafxwb90l36k4cipui15", "fields": {"session_data": "Nzg4Nzc4MDM1MmEyNmExYzI4ZGY5ODU2M2YyNmE2MDY5ZTA5ZjBlNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjkwYWMyNWZjYTM1YjM4MjFiY2VlMDE5MDcxYzY0ZTc0NWM3OGRkYzIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzODEifQ==", "expire_date": "2017-05-21T04:15:58.405Z"}}, {"model": "sessions.session", "pk": "ji16qpzp36b57x5zvjg57hq28qr4eofs", "fields": {"session_data": "MDQzNWI1OTMyN2Q0NGViOTNjMzgyMTQyNzk0NTVjMDA5ZTZjMjJjMTp7Imxhc3RfYWN0aXZpdHkiOjE0OTQ3NDIwMDUuODk3NzEzLCJfYXV0aF91c2VyX2hhc2giOiI1OWYwYjAwNDNiMTNmNTFjNmU1OWQ1YTUzNzg5MTUwOWE2NDZlZWM4IiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-05-28T06:06:45.901Z"}}, {"model": "sessions.session", "pk": "jisl97kc1mujak8acv3s1k8v09m2o97p", "fields": {"session_data": "NDA1YzM3ZDk1OGI1MjE4YzJjZWJlNzlmODVmOGYwYTIwNmI4NDg5Zjp7Il9hdXRoX3VzZXJfaGFzaCI6IjczNmZmYzUwODdmMDNiNzA4NzY2YmIwODk0MmQzZWRkYjczMWJlOGEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MTUifQ==", "expire_date": "2017-05-25T10:49:22.249Z"}}, {"model": "sessions.session", "pk": "jlg92j5elb78yhazqiu186biwrnlhg9l", "fields": {"session_data": "YmMxMjQzNjgxNTYxMTE2ZDcwODkxMGYyZjI1NGRjNDc0MjZiOWQ5Nzp7Il9hdXRoX3VzZXJfaGFzaCI6IjZkZTgyYTA5NDgxMDNjMGIwMDA0NjA5Mzg4NjU4MjlkYmRlNmMzNjciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjIifQ==", "expire_date": "2017-05-20T02:13:46.628Z"}}, {"model": "sessions.session", "pk": "jorsl9p866dauibnyn2bpc9jzwfqlnkj", "fields": {"session_data": "ZWIyZGUzNTZhOTIzZmIxMGVkNTQ3MTc4ZjhjODlmNzEzZjhiNGJmYTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijc2MzdkYThmMTMyOTQ0ZjA2M2NlOGJmODVmMDlhZGNlYzkxM2EwNGQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjEifQ==", "expire_date": "2017-05-21T02:48:57.372Z"}}, {"model": "sessions.session", "pk": "jp6kadatu38fcgyfd07dtsamfd3xpxsx", "fields": {"session_data": "MmIyN2FlODAwOGJhYzRjZTFkYTg3ZTE5OWQ1OWE5Y2I0ZmQzMWY4MTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBmY2I3MmQ3NWQ0ZDc3ZGE4ZjUyOTYzOGUyYThmNTE4ZWIzNWNkNTUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzEifQ==", "expire_date": "2017-05-28T03:31:07.436Z"}}, {"model": "sessions.session", "pk": "jpexhal4zny9l1ulyfqo9wy945caoyrp", "fields": {"session_data": "ZTU4MmU3OGQ4NzQ0ZWM5YWZhM2FkMDE0ODYwYmI2NjU5OWZiNzMxNTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg2NzFhNjM4NjM4NTUzZGQzYzBkMDYyMWU4OWY1YmMzZTc1M2Q3NWUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzkifQ==", "expire_date": "2017-05-21T09:28:03.931Z"}}, {"model": "sessions.session", "pk": "jt01sxfnntjvw6hzfb726vtjxjmix5wj", "fields": {"session_data": "ZTU4MmU3OGQ4NzQ0ZWM5YWZhM2FkMDE0ODYwYmI2NjU5OWZiNzMxNTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg2NzFhNjM4NjM4NTUzZGQzYzBkMDYyMWU4OWY1YmMzZTc1M2Q3NWUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzkifQ==", "expire_date": "2017-05-21T04:39:36.096Z"}}, {"model": "sessions.session", "pk": "jwkp3l0i282f43b73xuyjrxjppy28orn", "fields": {"session_data": "ZjlmZTJiZWUwZWY3OTBlMmMxZDBmMmNiZDVlNmEwYTE3ZmZjY2UzYzp7Il9hdXRoX3VzZXJfaGFzaCI6ImJkMjc4ZWU0OGFiMGE2M2QwNjk5YzQ1MzM3ODhkZjNlMzllOGNlODgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4OCJ9", "expire_date": "2017-05-22T09:30:51.697Z"}}, {"model": "sessions.session", "pk": "jx8i3x4nr237w8rftks5bg6kc152wfo9", "fields": {"session_data": "YWI2ZTk0NWJmOTY4NjVkNDYwNjY4MDM2MmIzMWE4MmE4MjE5ZjQxMTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMyMjUwMzIuODU2MjQ1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiaG5ZNyJ9", "expire_date": "2017-05-10T16:42:52.884Z"}}, {"model": "sessions.session", "pk": "jydxijnjuh01zoenidasr8q9mhnzgxie", "fields": {"session_data": "MTQxMTZiZGIxYjg0N2Q4NTlmNGY4ZDdjY2MyYjFjYzMxYjRjMTI1MTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk4MTA4NjYuMzgwMTkxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiR3ZrciJ9", "expire_date": "2017-04-01T04:20:06.389Z"}}, {"model": "sessions.session", "pk": "jyfbpqcfy23w1iom7v30ggilpo14w60o", "fields": {"session_data": "NDk2OGUzNDRkMWU5YzQ4NzQ0ZjhkZDlmNDFhNDM5YzI5MGJiMDQ2YTp7Il9hdXRoX3VzZXJfaGFzaCI6IjdkYzg0YjkxNzRkZDM4NTBjMGQxZTRmYjEyZjEyYTA5OWU3ODYzYzgiLCJfZGphbmdvX2NhcHRjaGFfZXhwaXJlc190aW1lIjoxNDg5ODM0ODk1Ljk1MDk0NCwiX2F1dGhfdXNlcl9pZCI6IjkzIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiNWd0cSJ9", "expire_date": "2017-04-01T11:00:35.956Z"}}, {"model": "sessions.session", "pk": "k428iunrabol2zsfddlxgl0b58wmy0p2", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-12T04:49:00.643Z"}}, {"model": "sessions.session", "pk": "k4fpwlr9h38xxaay5hyy1itcj55cmy3z", "fields": {"session_data": "NjAxYjg0YzhhYjgzNmNhMWFkYTFiMzMyYTgzZTIzNWRlMzFmNDY0ZTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg4MDMxNjc0ODk5MWMzYzdkYjBiMGJlZDFmNTYwZDA5MzI3NTBmNDUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzODQifQ==", "expire_date": "2017-05-21T13:59:48.558Z"}}, {"model": "sessions.session", "pk": "k5f3if2218s5styosdp7arl5ctp7of20", "fields": {"session_data": "MjA0NGJlZjczYjU0MDZhOGJlNjJhMTgxODAwOGNiOTE4NDc0YTM5Nzp7Il9hdXRoX3VzZXJfaGFzaCI6IjM0MzIyMjBkZDI5YmJjOGFlYmUzMjUzNTBkYThjYWZiZjkwMjcwM2EiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNzIifQ==", "expire_date": "2017-05-21T04:07:46.451Z"}}, {"model": "sessions.session", "pk": "k6pwiadil2o3u7htebekf35eahnhenjk", "fields": {"session_data": "MzJiZmM0YzA2ZmUxNDNiOGQ4MjQxMDAxMjU5ZjVlODY5MDkwZWRhMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjEyMjI2NDk2ZjgxNTcwODRkNjgwYTgyMDczZTFhMDA5ZjFiM2IxOWMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI3OSJ9", "expire_date": "2017-04-01T11:32:31.042Z"}}, {"model": "sessions.session", "pk": "k8fi96ear3ra0cczzbaen6zp33scr8aw", "fields": {"session_data": "OWZhOWNhZDQ2ZjA2MmYwMGIyNWM4MzY4ZTFjM2Q4Y2NmMjY0NzZhNDp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiNzE5OTVkZTI4YzExOTEyYTBjNzIxN2VjM2VhNzcwZTFhOWU5OWFiNyIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5ODcyNzYuNTQ0NTIyLCJfYXV0aF91c2VyX2lkIjoiNjUiLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoidlZjdCJ9", "expire_date": "2017-05-19T12:28:09.855Z"}}, {"model": "sessions.session", "pk": "kcxl91fm01zs9iu29fjsv34vy2z07s8o", "fields": {"session_data": "ODFiNTU5NThlYTcxYjljMmY0YmYwMWU4YmMyZjZkZjdjYmFlZGQ2Nzp7Imxhc3RfYWN0aXZpdHkiOjE0ODg2MzA2OTcuMDUxMDM4LCJfYXV0aF91c2VyX2hhc2giOiJiM2JmNDU4MzQ0ZmQ2NWViN2E5NGUzYzQ5ZmJjNzI2MjFmYzU0ZjliIiwiX2F1dGhfdXNlcl9pZCI6IjciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-03-18T12:31:37.052Z"}}, {"model": "sessions.session", "pk": "kdn7qhezhomii53471c125gcob6gxcvi", "fields": {"session_data": "YTIyZjZlYmE4ZDUwMWYxNjY0NjY3YWU1OWUyYzg4YTU0Yzg1ZGQ2Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImQyMTBlNWU5YmRjNGE4NmM5ZTU4MTRkOWJlNGEzNWY4NzM0NzEwOTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMDEifQ==", "expire_date": "2017-05-19T12:15:27.935Z"}}, {"model": "sessions.session", "pk": "kechc27oa2mk74ky49plq8o2c9dgnnaa", "fields": {"session_data": "ZjY5OGU1NTY3MGExNmI2OTE3YmU1NGY2YmNjM2MyYzg0OWM3YzA2Yzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQwOTgzNDMuMTI5MTY3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiY2RFViJ9", "expire_date": "2017-05-20T19:18:03.145Z"}}, {"model": "sessions.session", "pk": "kg5khfkomheyisffc4mu01626qwjcq6o", "fields": {"session_data": "NDY3Y2I0MjE0ZmU2Y2JlNDhlMWNiOWFkYTY1Y2E5MWUwMWQyNzRmYzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQwMzgwODUuMDc1NDA5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiN1ZGVSJ9", "expire_date": "2017-05-20T02:33:45.092Z"}}, {"model": "sessions.session", "pk": "kgrib0y6j6fxhagmfw44f0kie15z2gc1", "fields": {"session_data": "ZTAwNTE4NDViZDAwMTg2OTc4ZDBiZWE4NGEyYzA4OGFjMjllMzQyNDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM4MjgwNDMuMTE4MjI2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoidlM0ayJ9", "expire_date": "2017-05-17T16:13:03.128Z"}}, {"model": "sessions.session", "pk": "kir5kvftlewviyiknx0ksl98ey637zcl", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-20T07:39:18.851Z"}}, {"model": "sessions.session", "pk": "kiz4si6eier6rhbchju7wqiohkzyqwnn", "fields": {"session_data": "OTcyYjZmMzI0YzMwM2FhNTI1NDE2ZjM4YWRkOTZkNzBmMzlmNGY3OTp7Imxhc3RfYWN0aXZpdHkiOjE0ODk3Mjk1OTcuODkyNDk4LCJfYXV0aF91c2VyX2hhc2giOiI3ZWQzOTY4YjBhMWRkMjIyZTgyYjI2NDg0MzZlMmI5MjgyYWRjMDk2IiwiX2F1dGhfdXNlcl9pZCI6IjIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-03-31T05:46:37.910Z"}}, {"model": "sessions.session", "pk": "kj8l7jw8q4isuoqnkdj2wclfaizpxi9q", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-20T07:34:02.873Z"}}, {"model": "sessions.session", "pk": "kjpkzey0wi8tvtqyl2frzkyo3xfh8asa", "fields": {"session_data": "NTI0MWMwY2RhMmVjYmI0MzBkZmFhNTRkZTRiMjMwMjI4NjQwNjMzNjp7Il9hdXRoX3VzZXJfaGFzaCI6ImMzZDhmNjc1YmZmMjRjMzlkZDhjNmEyOWE1M2VjNGEyZWU4YzE3ZTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MDAifQ==", "expire_date": "2017-05-23T04:44:09.522Z"}}, {"model": "sessions.session", "pk": "kkxl03lox3y2wziira1gig6iqo4gqivz", "fields": {"session_data": "ODcyMTlhZjNjMmQ5ZjVjY2NhYzUzOTIzNmFjNWY0NThmODczZTI2OTp7Imxhc3RfYWN0aXZpdHkiOjE0ODk4OTYxMTUuMDU3NzQ3LCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-04-02T04:01:55.060Z"}}, {"model": "sessions.session", "pk": "km3r1hnvu2cg1elk6xdyd2gwqjbix2k1", "fields": {"session_data": "MTBmZTI0Y2Y2MzAyYWJjZDJjZjkwYjEwZGU5MWJjYzJkM2E2OTE2ZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjkzZmVmNzY5MWM0OTY1NzA1NGEzZTg0ZmUxYzA3OGY3OTJiODM5MGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNzcifQ==", "expire_date": "2017-05-28T04:17:22.808Z"}}, {"model": "sessions.session", "pk": "kne2u4cit7w3sgosprq7a1pupu8udzis", "fields": {"session_data": "ZjlmZTJiZWUwZWY3OTBlMmMxZDBmMmNiZDVlNmEwYTE3ZmZjY2UzYzp7Il9hdXRoX3VzZXJfaGFzaCI6ImJkMjc4ZWU0OGFiMGE2M2QwNjk5YzQ1MzM3ODhkZjNlMzllOGNlODgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4OCJ9", "expire_date": "2017-04-06T04:43:31.377Z"}}, {"model": "sessions.session", "pk": "kngkosu9cvlg7o4443g0kwltx4536fli", "fields": {"session_data": "OGI5YTk2NDg0ZWE4OTYwZTg5NjEzMzQ2MzkyNjI0NTZlODBkNDg0NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjgzZjFmYmQ1ZjI3YjYzZGQxN2NlZTZlNjBkZjgxODg3NGYwNDdiY2IiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNjkifQ==", "expire_date": "2017-05-21T02:49:43.265Z"}}, {"model": "sessions.session", "pk": "knng2tqnvosqf8ljyjwmvd3mf4iw2jf5", "fields": {"session_data": "NTA3OTA0ZDYyMTRhMWM4OGVhNjRiNTVlYWY2YzU3OTE5M2FjZDgxZDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM4MTQ2MTMuODU5ODg3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiOG5taCJ9", "expire_date": "2017-05-17T12:29:13.875Z"}}, {"model": "sessions.session", "pk": "kp0s2oqnnpwb2rlgma79yah8rxm0vmlq", "fields": {"session_data": "OTc2NjA4OTAyZThkZjMzNWRjNTA1YWFjZWEzMzM3YWI3Y2ExMzBhNzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQwMzgwODUuMTkyMjgxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRDVYVCJ9", "expire_date": "2017-05-20T02:33:45.202Z"}}, {"model": "sessions.session", "pk": "kpyc88kv67ciaomyuxcv2yv581m5up90", "fields": {"session_data": "OWQ2YzZiNTA4YzIwMjE1NTAxY2QzNGM0MDNiYTViMDdiOTI0ZjAzMTp7Il9hdXRoX3VzZXJfaGFzaCI6ImIyNjJlMTQ3YzMyZGIzOGY5OTllZmEzNGQ2N2Q0MDMxODlkMTA4ZmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0In0=", "expire_date": "2017-03-17T12:50:19.530Z"}}, {"model": "sessions.session", "pk": "kqu79aeuavf7yeq11hwtuy5flje7cifh", "fields": {"session_data": "N2YyNjVmMWYzOWFjYmJjYjIxN2M4OGYzMTFmYzY0OGIzN2ZjM2E0OTp7Il9hdXRoX3VzZXJfaGFzaCI6ImY4MDM4ODUxODJjYTRlNDE1OTg1MWNlOWE0ZTIzMzVhMGZiMDNiOTUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1NSJ9", "expire_date": "2017-05-22T02:34:26.655Z"}}, {"model": "sessions.session", "pk": "krrvrqphmw9q3ca157pz5d4uprrrnptn", "fields": {"session_data": "MGY0YjJmODYyZDkwZGU2OWNlMjdkYmM1OTc1NzVhNGNkYWVjYTUzMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjY3MjQ5ZGU4OGFhYzg4ODQ5ZDljYjE1NDYyZjYzZDU1MTg2ZGNkMDYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNjEifQ==", "expire_date": "2017-05-28T04:07:44.772Z"}}, {"model": "sessions.session", "pk": "ksk2ueh65txg5yirwszf9o9cb3zqs84s", "fields": {"session_data": "OTBhY2UzOGUzMWM0NjVjNWVhYzAyMmVlNjgxMjRhYWNhZDUyOTAyZDp7Il9hdXRoX3VzZXJfaGFzaCI6ImE5MTBiNTFiNjk4Mzk2YjIwMzFjMGI4Y2FlMWFhODcwZWJiYzY2NjAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMDgifQ==", "expire_date": "2017-05-19T12:33:10.248Z"}}, {"model": "sessions.session", "pk": "kt01ow38z5x9zok37qp6xnxv1ilclxmh", "fields": {"session_data": "OTUyYTQyOGE3OTlmYTlkZTE1ODYyZTBlZDU2OTJlMzQzYmFiMzBhYjp7Il9hdXRoX3VzZXJfaGFzaCI6ImI2MzFkYzIwZGU1ZjM1NmJhNjk1OGQxZTM3MTdjN2YzN2M2MzVhM2IiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MTEifQ==", "expire_date": "2017-05-25T05:24:52.482Z"}}, {"model": "sessions.session", "pk": "kt90w6zba6xat9udwqkspuek1denlc3d", "fields": {"session_data": "NWY4NTc4N2NkMGU2OWJjOTk4Yzk2NGNmZTdiMTM5MTMwNzE2OWNjZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjgzYTVlYjMyYWYxYmY4ZTgzODllYTVjYTllZWRjODFlNTlmNWUxYjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzMifQ==", "expire_date": "2017-05-21T04:17:26.410Z"}}, {"model": "sessions.session", "pk": "ktystfiodan7lgkppop2thv61nj06gy6", "fields": {"session_data": "Njc4NGRhOTBmMmJlZmRkM2UxZGY0MjZjMTVjZjI4MmMwNTJlMmMxNDp7Il9hdXRoX3VzZXJfaGFzaCI6IjgzZTBkMzRjM2UxMzQyZmNlYjhjN2ZlZDljZTViNGNiMTBkOTE2MDUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxODgifQ==", "expire_date": "2017-05-28T04:01:10.097Z"}}, {"model": "sessions.session", "pk": "kuhtqgujqqcu9qc1znyt82st10ltu6x3", "fields": {"session_data": "NzA1YjQ1NTliNWE2MTY1MmNjM2EzNTgxM2VjZTlkOTc3MDVmZDE0Mzp7Il9hdXRoX3VzZXJfaGFzaCI6IjI4NWY1NWQ2ODhmMTJjM2Q3YjYxMmZiZmJiNzQ4N2UyYTYxZmRkMTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjEifQ==", "expire_date": "2017-05-16T11:58:57.213Z"}}, {"model": "sessions.session", "pk": "kx3m1i1jv0499l3lpx5cb2l1itimusta", "fields": {"session_data": "NmE1NjhjZjI3ZmI5NTQyMTViYmY0NDM1OWM0ZTQxNWQ4OTIzNGExZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjFkMDU4YmZkNWIxYmVjNjEzMDM2NDc1YzI1OTNmNWU0MWZmY2FlZDAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjAifQ==", "expire_date": "2017-05-12T04:33:54.334Z"}}, {"model": "sessions.session", "pk": "l1c5tyowornnjitidbg041qi6cqc5vi6", "fields": {"session_data": "NDY0YjY5ZTY4YTQyYjJmNDMzODMyZDkyZWQ5ZjNiMmM0NzlhMzcxYjp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiYjVjNzk0ZmI2NGI2ZTU1MzU4MjRlOTE4OWNjNTg0ZWVlNGJjNzAwYyIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQxNDAxODYuNjczODU1LCJfYXV0aF91c2VyX2lkIjoiMzUiLCJfZGphbmdvX2NhcHRjaGFfa2V5Ijoia1ViSyJ9", "expire_date": "2017-05-21T06:57:23.345Z"}}, {"model": "sessions.session", "pk": "l46hhnb7d5d6r5g10cm9udoo6b45g216", "fields": {"session_data": "NDc3MzgyNzIyN2E4NmNkMzNjOWUyODYxZGZmZDU0NzMxN2Q4YWEzNjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDE1NDAuODY3MjM1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoienhxUSJ9", "expire_date": "2017-03-30T05:18:00.875Z"}}, {"model": "sessions.session", "pk": "l4at14cj95yjpv350ekemo1iu3dlt0u1", "fields": {"session_data": "NTMwYTNiNmI4YzI3YjQ3ZjljZTRlNjExMjRhN2JmOGM3MmUxNWI3Njp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5ODc0NjAuODIwOTU1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoieDhNeiJ9", "expire_date": "2017-05-19T12:30:00.827Z"}}, {"model": "sessions.session", "pk": "l5w90k8cgrdtjjmabh6zitls8h5gw7kl", "fields": {"session_data": "MWM1OWE1ZWFkZDAwY2UyMTVmNmZiMDZmZTYxYjRjZGMwMDkyN2JhNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjIwYjNjYjUyMmUyYzJlZDJjYWFlNDRkMTE2MzljOTE5YmM1ODFmNWYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjgifQ==", "expire_date": "2017-05-21T06:40:59.595Z"}}, {"model": "sessions.session", "pk": "l6152587hyup85p0acynyb7svo3l7s3h", "fields": {"session_data": "MGQzNWI0YzAxODhkOGY3ZWI0MzE5ZDQ0NjUyNmQzNjJjMzE5N2VmYTp7Il9hdXRoX3VzZXJfaGFzaCI6IjU0NzE5YTU4MGQ4ZGNhMWU0YzZiMzY2ZjM0ZTQ5MzkyMDQwOGEyMTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MTMifQ==", "expire_date": "2017-05-25T05:52:17.783Z"}}, {"model": "sessions.session", "pk": "l6qzexra91kr5sa509ycxhl5kcf6bny0", "fields": {"session_data": "NWY4NTc4N2NkMGU2OWJjOTk4Yzk2NGNmZTdiMTM5MTMwNzE2OWNjZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjgzYTVlYjMyYWYxYmY4ZTgzODllYTVjYTllZWRjODFlNTlmNWUxYjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzMifQ==", "expire_date": "2017-05-20T01:17:39.040Z"}}, {"model": "sessions.session", "pk": "la4ej514nv0wiixxx1dpxt5beub5iig8", "fields": {"session_data": "NzE3NTcyZTk1YjFmZjgzZGY2YzgyYjgwNGRkODMwZGM1YWJkYWViZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjgzMzZmNWFjNzQ3MzFhYjllMTExODBlYTFmNGQ5NDlhOWEzMjU1YWEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNyJ9", "expire_date": "2017-03-30T12:55:29.975Z"}}, {"model": "sessions.session", "pk": "lb81v5nzpa22pa7xtpbsxvoubmvpg2f8", "fields": {"session_data": "MDY1YjBiOGVjMmMwODVhNDdkOWNmYzUzMDk0YjBiNjQ0ODlkNzVlMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjNmYTI1Nzg5MmYwMzBiMTJjMmY3ZDAwZDA4ZDU3MTViNmUzNTJjNzUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxOSJ9", "expire_date": "2017-04-24T11:41:15.285Z"}}, {"model": "sessions.session", "pk": "lca4g1k8u0taikufvebrapysyffjtuf4", "fields": {"session_data": "NzBlYWNiN2MwNmJhMjQzM2UyZmYwOWZmZTEzNDI4MDZmOWI0ZDg1Yjp7Il9hdXRoX3VzZXJfaGFzaCI6IjgzMmU1NjE3NGQ0NWU5ZDZjMDJhNTNiYTIxODAyMGExY2I0NzljN2MiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzODAifQ==", "expire_date": "2017-05-21T04:09:36.967Z"}}, {"model": "sessions.session", "pk": "lccsrjw13ok59toaqhp5agazw6g8dxo3", "fields": {"session_data": "NzM5Mjg0NTg3NzQ1NDUwNjFmOWEzZjBiOTBiMTM2OGQ4M2U0NWExODp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTI2ODUzMDkuMDY5Njg3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiV1pwWSJ9", "expire_date": "2017-05-04T10:47:29.078Z"}}, {"model": "sessions.session", "pk": "lddiy7dbi6n73edpia5p6yirkrnxojhu", "fields": {"session_data": "MzdhODMwOTYxMzQ3YjQ1NmFhYmNhODJkMjhkY2IwNzk2ODg0NjYzNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjgwYTkxNmRjMmIxMjMzYmY1MWNhYTZiNGEzYWM0ZTMyNzFiNmQxMTUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5NCJ9", "expire_date": "2017-04-03T13:40:09.282Z"}}, {"model": "sessions.session", "pk": "lf6nphdo2bbntpjapre0g51j4ctuvenv", "fields": {"session_data": "NTlkNGI2Y2U4ZjE0MTEzNzlmZWY2ZmZiZjNkMGE4NzQ4ZmQ1M2EyZjp7Il9hdXRoX3VzZXJfaGFzaCI6ImNjZGM2NDE5OTY0YzFmODkyNjY5ODE1MzE0ZjE4MDk2YjdiODI0N2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTAifQ==", "expire_date": "2017-05-21T11:46:21.609Z"}}, {"model": "sessions.session", "pk": "lf8e418vb54wyan697gmsdi53ay8tepe", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-21T10:02:30.795Z"}}, {"model": "sessions.session", "pk": "lhtioqoorb1hx3mh2zgq2r45ygjpwjeh", "fields": {"session_data": "YTgwZDY1ZjQwNWVjM2NiMjIyN2QwNjIzODU5ODJlMzYyNzQ4ZmM3NDp7Il9hdXRoX3VzZXJfaGFzaCI6ImQ5ODEyNDU0YTQ2ZGE1NzRmZDM5YjkyMzEzODVkNmFjYzg5M2UyNjciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNDEifQ==", "expire_date": "2017-05-13T07:21:39.435Z"}}, {"model": "sessions.session", "pk": "llfvdwr363h29rh0ihelljc4gz6e2cty", "fields": {"session_data": "Njk0OTY5N2VkYmMxZDk2YTQxZGEwMGI3NzY0MGE3NDdlODE1ZTQ4OTp7Il9hdXRoX3VzZXJfaGFzaCI6IjYxNzRjMzA2NjE2YjQ5NzQ0MGUzMzZjZjdhZmQ1MWMyYzQyYWU4MmIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMjkifQ==", "expire_date": "2017-05-10T14:13:09.490Z"}}, {"model": "sessions.session", "pk": "llhmoc68jlptzwj6c3ta9vggevrigbvn", "fields": {"session_data": "ZTFjYjA3OGE3NTM1NDdjZWM2OTJiNTBmNTllMWU5MDE0MjBiNDk0MTp7Il9hdXRoX3VzZXJfaGFzaCI6IjJlOTdjNTI1NmRmOWNlZjU0ZGU2NDIwMmZhNWI2NTJlNTA3Mjk3NTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2NiJ9", "expire_date": "2017-04-01T03:28:52.094Z"}}, {"model": "sessions.session", "pk": "llojir5t71ny8a2ovhur2apytex8fped", "fields": {"session_data": "OWVlOWQ0YmM3OGYxYWY2ODkxMTQyNDFlZjNkYWJiMGVlNzI2NTc4NDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMzODg0NDUuNTgyNzkxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiQ3ZWcCJ9", "expire_date": "2017-05-12T14:06:25.596Z"}}, {"model": "sessions.session", "pk": "lltdzfmmdl85g0efo5lwuo2klawtpesb", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-20T07:36:46.435Z"}}, {"model": "sessions.session", "pk": "lnh0bv0uffqpfatmztig6z0tkygkkrdv", "fields": {"session_data": "ZDJkYjg4MTA2YTRjMjc5NTgxM2Q4NjMwYjQxMzRjMTZhMWEyNTczNzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxNTYyMDUuODIzNjkzLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiVkZzUyJ9", "expire_date": "2017-04-05T04:15:45.829Z"}}, {"model": "sessions.session", "pk": "lo90ee8r1eczbzzgod4v3wgyc3b79oe2", "fields": {"session_data": "MjU5NmNlYjBkODE5ODMwOWZkYzg5NjlmMzAzZDI3ODg4ZTJmODgzZDp7Il9hdXRoX3VzZXJfaGFzaCI6ImNjZDdmYzA0ZDgyMjkzYzBiMTM5OTZiMzcwN2MxYmQyZWE0ZThiNTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNTQifQ==", "expire_date": "2017-05-21T04:13:36.749Z"}}, {"model": "sessions.session", "pk": "lpz4l74nlr4akzsog0x15ynn13bvl8zm", "fields": {"session_data": "OWQ2Y2EwYWY5ZTA1NjRkYTdmOTIzMTZiODY4MmE2Yzc1ZTUyM2U2ZTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxODQ1MDAuOTY0OTkxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoidmI4aCIsIl9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJsYXN0X2FjdGl2aXR5IjoxNDkwMTg3NTY5LjA0ODk4MiwiX2F1dGhfdXNlcl9oYXNoIjoiODg3N2ZmNTc5YmYwNDdkN2EwZjE2ZTA5MDQwMTgyYTEwMjFjZTFlNSJ9", "expire_date": "2017-04-05T12:59:29.080Z"}}, {"model": "sessions.session", "pk": "ls22qeb233po9lmm42r67exji21bw4l0", "fields": {"session_data": "NWE1MTM2ZGEzZDE3MDc3ZjE1YjgxZmY0NmJhYTI2YzcyNWE1ZjY3MDp7Imxhc3RfYWN0aXZpdHkiOjE0ODM0MzQ2OTUuNTI4NzEyLCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-01-17T09:11:35.548Z"}}, {"model": "sessions.session", "pk": "ltgwth8y0rruc1ntwfrobb6spu791jmd", "fields": {"session_data": "NzZmM2I1M2JlOGI2Njg5YTc5NGY3YTNiOWQyY2Y5NWE2NzM5ZWM0Mjp7Il9hdXRoX3VzZXJfaGFzaCI6ImIzYjY0OTM0NDhjNjc1NjRjMDBlOThkMjk5MDUyZjgzNDY5NTY2Y2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjQifQ==", "expire_date": "2017-05-12T06:39:01.951Z"}}, {"model": "sessions.session", "pk": "lu4mto79n8pomqey2eioo3a2stc3u2xe", "fields": {"session_data": "MjI5M2RiNDAyNzA2ZmEyYTI3ZWM2NDc2N2ViMWVkYjc5OWIyZDZiNTp7Il9hdXRoX3VzZXJfaGFzaCI6IjViMTM4MjRiMzgxOWQ1MWM4ODg4YzhhOWNlMTc0MDlkMWQzNzQyYTMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNzEifQ==", "expire_date": "2017-05-28T08:57:20.270Z"}}, {"model": "sessions.session", "pk": "lvxsvci0jodmzh1sixadvl2p7nxw0ch8", "fields": {"session_data": "ZWIyZGUzNTZhOTIzZmIxMGVkNTQ3MTc4ZjhjODlmNzEzZjhiNGJmYTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijc2MzdkYThmMTMyOTQ0ZjA2M2NlOGJmODVmMDlhZGNlYzkxM2EwNGQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjEifQ==", "expire_date": "2017-05-16T01:49:33.224Z"}}, {"model": "sessions.session", "pk": "ly7o41tpk0xjqifkxp3ekrn1dpjaf20v", "fields": {"session_data": "NmNlMTM3N2Q5MDVlY2FmMTBmZmI0YmE2OWVjYzAyOGU0OTAxNzFkYzp7Il9hdXRoX3VzZXJfaGFzaCI6ImIzZjRmNDc5MGQxZTcwNzc2MTkyM2MxM2RlNDc5MGZjMGYzYzI5NzIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjYifQ==", "expire_date": "2017-05-19T14:34:22.844Z"}}, {"model": "sessions.session", "pk": "lz6n94rdcirp41cij5n43lenyu9cqs1h", "fields": {"session_data": "NWRlYzgwYjYzZGM4N2ZmOGYzYTM4MDdkYjhmNWMxNTkwZWNhMmJmYTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM4MTA4NDMuNTAzNjAxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiYzM5UCJ9", "expire_date": "2017-05-17T11:26:23.510Z"}}, {"model": "sessions.session", "pk": "m045ejvfoghv6jr3s6imvoiig3uag11c", "fields": {"session_data": "MmE0NDg1ODY5ZjVmZjc3ODg2ZDJjZjIyYWQ5N2QzMjFlZmEwYmUwOTp7Il9hdXRoX3VzZXJfaGFzaCI6ImNkMDkxMWQ1OTI5YWVlNzVkZmJhYzJkYzFhMTBmYTY1NWI2NTkwZWEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMjQifQ==", "expire_date": "2017-05-04T10:30:27.590Z"}}, {"model": "sessions.session", "pk": "m1gwp5w7cfnuwjau5wl0lv6wx3dbfmkb", "fields": {"session_data": "YjVjMmIwNmMzZjIyZWQyYjhjNzA1NmEyNjkwNGUyYjJmNzNlOWRmMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjVkNGJiNjI4MTMxNGU1ZmRhZTM5NTdkMzM2M2I1MjcyOGZjNDMyNDQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxOCJ9", "expire_date": "2017-03-23T13:22:48.062Z"}}, {"model": "sessions.session", "pk": "m1u9xsufbks3wjf00yunmonw564m0wyt", "fields": {"session_data": "NTlkNGI2Y2U4ZjE0MTEzNzlmZWY2ZmZiZjNkMGE4NzQ4ZmQ1M2EyZjp7Il9hdXRoX3VzZXJfaGFzaCI6ImNjZGM2NDE5OTY0YzFmODkyNjY5ODE1MzE0ZjE4MDk2YjdiODI0N2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTAifQ==", "expire_date": "2017-05-19T12:35:52.243Z"}}, {"model": "sessions.session", "pk": "m1xg01o1coldj0iim2d8tudu1u1mer2k", "fields": {"session_data": "OTE4MzhmYzAxYzZhMTcwY2I3OTNlNDhjODIzMDc2NDAxZDNkM2U3Zjp7Il9hdXRoX3VzZXJfaGFzaCI6IjEzMTk4MmRmZTQyOGM5ZjJlZjkyMDQ3YjhiOGRjM2JhNWI1ZjM0MDYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzcifQ==", "expire_date": "2017-05-21T03:46:43.566Z"}}, {"model": "sessions.session", "pk": "m2gga74n09ruypyzo7e0vxyvce5q0w73", "fields": {"session_data": "ZDZiZTg4MTBlN2Y1MjM4ZjliMTE5NTBjM2Q4M2NkNTZkZmY2NWQwMjp7Il9hdXRoX3VzZXJfaGFzaCI6ImVhNjE3YmFhNTYzOTRiYzI0NGU4ODU3NWJlODkxOTYxMThmMzJjZTgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMTYifQ==", "expire_date": "2017-04-27T01:41:43.309Z"}}, {"model": "sessions.session", "pk": "m3b6t8troijb4id8j3axed9tmd6k356v", "fields": {"session_data": "ODhiNDQyNjgwYTlmZjI4NjA4ZmRlNzQwNGZhMzFiYzE5YTlmNTRjYjp7Il9hdXRoX3VzZXJfaGFzaCI6ImVjYjA2MDUwNTU3NmY1ZTZmOTVhMWYxNmRkODZiOTNiY2RiMTYyN2MiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2MCJ9", "expire_date": "2017-03-31T10:39:42.747Z"}}, {"model": "sessions.session", "pk": "m421xnevwpnvbwj9b9mmvntbd65ndmez", "fields": {"session_data": "Nzg5NmIyZmI2ZmI3Yzc3NGRmZTU2ZGVhYzQ4YmRhMWY4M2JkODQ5Yzp7Il9hdXRoX3VzZXJfaGFzaCI6IjllNzAxYjIxZGQ2NjFmNjY0NWRjMmNiYWMwZTQzZDFiNDdlMzlhOTkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNSJ9", "expire_date": "2017-03-29T07:39:31.970Z"}}, {"model": "sessions.session", "pk": "m48vg3pxxqpp6q749n22quuefe7ibv7y", "fields": {"session_data": "MjA0NWViYjRjMmEzN2E1NDVlYWEwNzc1MTI4NTMzMGZlNzNhYWNlMzp7Il9hdXRoX3VzZXJfaGFzaCI6ImRhZWUwMWY2OWFjMjBhNDNiZGJjMzA1NzIxYzQ4MDUxOWI5ZjczZjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNSJ9", "expire_date": "2017-04-24T14:40:45.051Z"}}, {"model": "sessions.session", "pk": "m77m8tmtktlsvgy6b2i0ftexmqpvi9dr", "fields": {"session_data": "ZWY2MjEyMzMzNjcyYzRiMGUzYjgxMzgzMjFjNTA3M2NjNzcyNGE2MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImY3MDZiZGMyNWU5ODA1OGFhZjkyOTc1ZjIxMWNlMWMzZmI1Yzc3YTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNjMifQ==", "expire_date": "2017-05-21T01:36:20.029Z"}}, {"model": "sessions.session", "pk": "m781imvatdkpa99brvwjtg506kfeg0km", "fields": {"session_data": "YmM4OWZhNGJhYmFhN2M4ZjBiMjc3MmQ0ZTJlM2E5MTFiM2NhMzA0Mjp7Imxhc3RfYWN0aXZpdHkiOjE0OTE4OTY0NzkuMjIyNzY1LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-04-25T07:41:19.284Z"}}, {"model": "sessions.session", "pk": "m80x646kcksbl8dhj2nvlfvi9xsjqzq6", "fields": {"session_data": "ZDllNjIxOTFmNjBkNTA1MDgzMmZhMjk1ZWM1ZDU5MzA5OGRiYmUzZDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxMDU0ODMuNjY4OTk3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiNm1FcyIsIl9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJsYXN0X2FjdGl2aXR5IjoxNDkwMjQ2ODY3LjgxMDkwNiwiX2F1dGhfdXNlcl9oYXNoIjoiODg3N2ZmNTc5YmYwNDdkN2EwZjE2ZTA5MDQwMTgyYTEwMjFjZTFlNSJ9", "expire_date": "2017-04-06T05:27:47.865Z"}}, {"model": "sessions.session", "pk": "m8354xn2y0fiz1t2wh2go0ahpt2b3ng4", "fields": {"session_data": "M2MwY2NlOTAwZjJjY2U3NGRkZmI0YWYyZDJkODA0NTQ5YjI4Y2YwMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjczMDk3OTNjMGQ0Y2YzNTYyZmRmYWNmZjE1NjVlYjRjMjAyOTViNTIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMjIifQ==", "expire_date": "2017-04-29T10:32:01.050Z"}}, {"model": "sessions.session", "pk": "madm3fluk18zqyeyvm8qe1r3yka9q71v", "fields": {"session_data": "MWRkNTA1MjcxNzdlODFjOTYxMzUxMzJlMTkyZTc1ZGFiMjZlYzRiNTp7Il9hdXRoX3VzZXJfaGFzaCI6ImNiMmRlZWZhYjc4M2JlYmE5NjMzOTg4OWRjMDdmNWQ3NjlkYWIxMzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNCJ9", "expire_date": "2017-03-31T06:48:58.078Z"}}, {"model": "sessions.session", "pk": "mbjts4e06bgi1kawqxvkourlq1e9xkd3", "fields": {"session_data": "NWUxMzY1NzhiYWJkN2Q3ZTEyOGJiMDUyYTFmMmU1NDMwM2IwMWU5Mjp7Il9hdXRoX3VzZXJfaGFzaCI6IjRjNjg0Y2ZjYzdkNDBmNmIwNGUwYWNlMTE4YzkzNTc1YTkzNDYxOTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMzYifQ==", "expire_date": "2017-05-10T13:29:50.434Z"}}, {"model": "sessions.session", "pk": "md0du8xvwrf1cx6fthgwk6eniatssa5c", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-20T07:38:57.778Z"}}, {"model": "sessions.session", "pk": "mffv01uuzl4till6xz3v336lga1s1l8a", "fields": {"session_data": "OThmZDdhNDVlMTZjZmQzMTM4YTkzNjA3NGQxMDViOWVlNzUwNWFlMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjQ5MDBmYWZkMjk0MWJjOWU4Zjc5ZTMyZDUyYzBlYmFiZTIyNjY2ZGMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNDAifQ==", "expire_date": "2017-05-16T05:02:36.921Z"}}, {"model": "sessions.session", "pk": "mfmw5mlbwh2n9a7kx2883intei6ez2b4", "fields": {"session_data": "MGY2ODg3NWZjMjU5MTM1ZWNmNmEzZDYzYmNjNmQzZTY3NjM1N2NkNDp7Il9hdXRoX3VzZXJfaGFzaCI6ImJjN2FhNTk3Y2QyNzg0ZmViZWMyNWU2OTk4ZWY4NDYwMzBhMzU1ODkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxOTIifQ==", "expire_date": "2017-05-28T04:06:19.827Z"}}, {"model": "sessions.session", "pk": "mgxkyf6s9u8uc5yatyageeofai8piuud", "fields": {"session_data": "ZWQ5ZDNhNWM5Yjg1M2I3MDBiNWNjZmFmMzJiZmI3NzAwMTNiZjUxMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhY2M3MTI1OWU2ZWU2NWY3MGE4NDNkM2NjNmE2ZjBiYmI1ZWY1MDAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTYifQ==", "expire_date": "2017-05-15T23:38:03.549Z"}}, {"model": "sessions.session", "pk": "mhhflz50t3ybp8ljoq07ghwcfv44jmtp", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-20T07:39:59.983Z"}}, {"model": "sessions.session", "pk": "mkrsnf4m8jylir1c7bu3kh1yxres83zl", "fields": {"session_data": "OTgxNDhhMjdiYmVmNjNkNmVmY2RkOTMxMjliMjE5ZGExMWI3MDA4Zjp7Imxhc3RfYWN0aXZpdHkiOjE0OTE5ODU5OTMuMzc3MzI5LCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-04-26T08:33:13.414Z"}}, {"model": "sessions.session", "pk": "ml511ljnu1byj1k6woz4i9pxmw4089ug", "fields": {"session_data": "NWI3ZTMxNjA2YmE1MTMwNjY3N2ZlMWY5YzVhZjExMzYzM2Q1ZThmMTp7Imxhc3RfYWN0aXZpdHkiOjE0OTA1OTc4NjguNjM1NzMyLCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-04-10T06:57:48.718Z"}}, {"model": "sessions.session", "pk": "ml6ob8ud1hqph5vwqrirr8mbmawpoyjj", "fields": {"session_data": "NmNlMTM3N2Q5MDVlY2FmMTBmZmI0YmE2OWVjYzAyOGU0OTAxNzFkYzp7Il9hdXRoX3VzZXJfaGFzaCI6ImIzZjRmNDc5MGQxZTcwNzc2MTkyM2MxM2RlNDc5MGZjMGYzYzI5NzIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjYifQ==", "expire_date": "2017-05-19T12:45:37.966Z"}}, {"model": "sessions.session", "pk": "mlszp6mh1sfmf0gon62vh189z82a5rwz", "fields": {"session_data": "NmRkZTg4YzBhODJkMGY0ZTMwMTA3MmVhODA4MDY4MDZiOWVmNGQ3NDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQ1MTU1MTcuMDk2MTU0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiWGQySyJ9", "expire_date": "2017-05-25T15:10:57.119Z"}}, {"model": "sessions.session", "pk": "mmoc44r8rig9il7v2y1txrsi3jxcafoe", "fields": {"session_data": "ODFjZjFiZmJmMzk4NWNjZGQ5NzFmOWI5N2E4NmUxMzUxOWQwNDI0Yjp7Il9hdXRoX3VzZXJfaGFzaCI6ImZhMjJlMzY3NGMyM2M5MTY1MGM1ZmRjOWZhM2M5ZTFjNmY3YzVjZDgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzgifQ==", "expire_date": "2017-05-21T03:50:48.365Z"}}, {"model": "sessions.session", "pk": "moz342upgrzoeo4i982r7y929f5wgaok", "fields": {"session_data": "ZGMwMDMxNWQzM2YxODFiNzJjODY3ZDE3NTM3YzQ1ZjVkOTI1ODZkZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjM1NGUxZjkwN2FmZGRjZmQ3NTRkYTgxYjE5NTg2NWNhN2Y3ZTMxNjIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDYifQ==", "expire_date": "2017-05-23T11:31:54.907Z"}}, {"model": "sessions.session", "pk": "mpaj7yclhptzjwzjgl6u8ol65wzfs88n", "fields": {"session_data": "NGU1NzM3MDEyNmZiYTVlMTg4NDZiOTMyOGRmN2MwZTJkZWUxZmMwOTp7Imxhc3RfYWN0aXZpdHkiOjE0OTQ3NTIxMjYuODkyMjYsIl9hdXRoX3VzZXJfaGFzaCI6IjU5ZjBiMDA0M2IxM2Y1MWM2ZTU5ZDVhNTM3ODkxNTA5YTY0NmVlYzgiLCJfYXV0aF91c2VyX2lkIjoiMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=", "expire_date": "2017-05-28T08:55:26.922Z"}}, {"model": "sessions.session", "pk": "mpoz9x7ojolks1d2b4k82fyanvszz96s", "fields": {"session_data": "YzQzNGJhOTk0ZjljMDcyMWYzYzk1OGNiZTY0YWVkOWRjN2U3NTI3Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU0ZTdkODliMmE1MjFkNmY1MzU3YTliMDVhMGQyMmI5YTE0OTJiNjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNDcifQ==", "expire_date": "2017-05-21T04:08:34.729Z"}}, {"model": "sessions.session", "pk": "mq7mxqhynbkb4q57pgburz1czock3jjh", "fields": {"session_data": "NzZmM2I1M2JlOGI2Njg5YTc5NGY3YTNiOWQyY2Y5NWE2NzM5ZWM0Mjp7Il9hdXRoX3VzZXJfaGFzaCI6ImIzYjY0OTM0NDhjNjc1NjRjMDBlOThkMjk5MDUyZjgzNDY5NTY2Y2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjQifQ==", "expire_date": "2017-05-12T04:51:56.311Z"}}, {"model": "sessions.session", "pk": "mqnheizn5uwlcqw50qv0spp8fnrwxplm", "fields": {"session_data": "OTdmNzZkZTdlMDQ4ODI4NzM5NmJmOTI4YjY0NzFjNGJhYzg5MDg3ZDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM4MDI0NzkuMDY2NTc5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRmNUMyJ9", "expire_date": "2017-05-17T09:06:59.075Z"}}, {"model": "sessions.session", "pk": "mramrrfmicnrvvycqj6bp9ym8ws8ox39", "fields": {"session_data": "ZDU4MmZlZDc0MTY2MjJlOWRmMjg1ODMwNzM4Yzg1MWIzNGNjNzIzNDp7Il9hdXRoX3VzZXJfaGFzaCI6ImRmNjlhNmRlMWVlOTlhM2E1Njg1ZjU3ZDJkMzY3OTg4ZTMyOWUzYTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzEifQ==", "expire_date": "2017-05-21T01:34:44.144Z"}}, {"model": "sessions.session", "pk": "mxjbnbjf6k8jtf284l33oy77hijai4yn", "fields": {"session_data": "NzViZTlmZjA5NmQ5MDYzOTYzNjlhMWJhMjMwYmRlMDM1N2ExNzE1Yjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDExODIuODM3NDMsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJUV1NGIn0=", "expire_date": "2017-03-30T05:12:02.844Z"}}, {"model": "sessions.session", "pk": "mxk8g9zw1paeqy8oqeu74pgdnh3076a9", "fields": {"session_data": "OWI5MWFkMGM0MWUxNjRiNGM3ODY4OTJkMGQ5YTVkNjNmNjhkNjdlMTp7Imxhc3RfYWN0aXZpdHkiOjE0ODk5MjcxMzMuNTczNTAxLCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-04-02T12:38:53.617Z"}}, {"model": "sessions.session", "pk": "n044cjk0myrhuipojg7pkn9c4450iv7j", "fields": {"session_data": "MzcxZTgyYzE2NmU2NWFjNzE1YTVjMWQ5ZjhhNzE1ZWRjYzg5OGM0MDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTIxOTYzOTkuNTQxODA2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiVXVZTiJ9", "expire_date": "2017-04-28T18:58:59.568Z"}}, {"model": "sessions.session", "pk": "n1nqtmjgvx7to2uo3wvdgmwl3n02es1y", "fields": {"session_data": "NGNkODliMzUwZmVhM2Y4OGQ4NjAyNmRlOWI5ZWRhZWYxMjNjNjNhMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjQ1MzI4MmQ1NWYzMzRhNWZjNTg1MzBjZDBmNGUyY2QxMjEyYjY0OWMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTQifQ==", "expire_date": "2017-05-12T02:41:54.633Z"}}, {"model": "sessions.session", "pk": "n1tlrotyt3kspxqbccdqltd40m7en2f7", "fields": {"session_data": "NjMxZTk2ZWZkNmQ3YjNiZjgyODE0OTI4Y2IwYzI2MGJkZmM4NzhhODp7Il9hdXRoX3VzZXJfaGFzaCI6ImEyYjVlOWVkNTkxYmEzZjAyNGY5NWExZjE0NjViZmQ1Y2JkMGNmNjIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMyJ9", "expire_date": "2017-03-28T15:20:44.981Z"}}, {"model": "sessions.session", "pk": "n2p2juagpjfn2m4dyordj83dkyi1lm1s", "fields": {"session_data": "ZmU1MjZmODlhNTE5ZThkMjdiMzhjMzg3OWZhZjQ4ZTBkZGYwZGFkNzp7Imxhc3RfYWN0aXZpdHkiOjE0ODk0NzIyMjguMDIwMzQzLCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-03-28T06:17:08.042Z"}}, {"model": "sessions.session", "pk": "n2plj90avtrseuhfe6mj3r0i18enb2gb", "fields": {"session_data": "MGU2MWI3Y2NjMTgzMmIxZGIwZGY0MjYwYzUwZjJhZTM0MDU1YjFkMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjAxNzA3OTFhNDY1N2UxYTM3MzczMzFhNDZmYWI5ZGU1ZjBjMjllNWYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNTUifQ==", "expire_date": "2017-05-28T03:58:59.218Z"}}, {"model": "sessions.session", "pk": "n4c0x2rmbhae4c1qbioq4omo3nslgsdk", "fields": {"session_data": "NmFmOGQ4M2JlNzRmOTA5MGUwN2RjODBjN2M4NTlmYTc4ZWQzZTk2ODp7Il9hdXRoX3VzZXJfaGFzaCI6IjE3NTdhOTRjNTdlNzlmYTAyYjk4ZGYyNDVlMDFjYjQwODIzY2JmMDgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzODcifQ==", "expire_date": "2017-05-21T04:38:39.032Z"}}, {"model": "sessions.session", "pk": "n7na7gyvh0dk3n6w7l2exctc3lef3yl9", "fields": {"session_data": "ZjVlNWE2N2U5NmIxMjBiNmY2MmY2YTE1ZGI5NDZhYWEyMWQ5YTczMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjgwYjk3MWU4OWE3Yjg4NzcwMDA2NDIxNjQ3ZWEwMTQ2YTY5NjgzY2QiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxODQifQ==", "expire_date": "2017-05-28T04:15:04.585Z"}}, {"model": "sessions.session", "pk": "n7rd60082h21b1hamrpecud0a2tdrmz3", "fields": {"session_data": "NmNlMTM3N2Q5MDVlY2FmMTBmZmI0YmE2OWVjYzAyOGU0OTAxNzFkYzp7Il9hdXRoX3VzZXJfaGFzaCI6ImIzZjRmNDc5MGQxZTcwNzc2MTkyM2MxM2RlNDc5MGZjMGYzYzI5NzIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjYifQ==", "expire_date": "2017-05-20T11:03:17.254Z"}}, {"model": "sessions.session", "pk": "n7re8ac9dhdj0hs1ixhsut16g4x5lq2v", "fields": {"session_data": "OWJjYmRjNGY0MjI5YTY3MzkzN2QxNjMwZDRhYjhiODk3OWNlMjYxNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjJmOWMyNDQ3YmQ0YTBhZTFmNDE5OTZmMjZhN2RhZWJjZjVkMDM4MmEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNCJ9", "expire_date": "2017-04-01T08:18:32.117Z"}}, {"model": "sessions.session", "pk": "n7zqmy3ij8gqpyyrf4d4nz1pywqorwnc", "fields": {"session_data": "NzI3OGQ4ZTQxZmU2ZmRmZjg4M2U1ZmY5N2EzYjM3MGQ3YmYzNmZkMDp7Imxhc3RfYWN0aXZpdHkiOjE0OTQwMzMzNDcuNzEzNzc5LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-05-20T01:15:47.744Z"}}, {"model": "sessions.session", "pk": "n8gnq7pcagevq6yncmrzdgrnlv0cdhvs", "fields": {"session_data": "NmFmOGQ4M2JlNzRmOTA5MGUwN2RjODBjN2M4NTlmYTc4ZWQzZTk2ODp7Il9hdXRoX3VzZXJfaGFzaCI6IjE3NTdhOTRjNTdlNzlmYTAyYjk4ZGYyNDVlMDFjYjQwODIzY2JmMDgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzODcifQ==", "expire_date": "2017-05-21T04:50:22.038Z"}}, {"model": "sessions.session", "pk": "nbyweq4fkz58nl7ihhve16aamicdfyaa", "fields": {"session_data": "NGI3YTZlMGE0NjIzZTE3OWRjNGUxZDAyNWVlZGZkZTMwNDUzMmJiZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjJhZjQ5MmRiOWRhZmQ0OWIyMWE3ZDE1ZWIzOThmYTQ4YjI3NDk0M2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzODYifQ==", "expire_date": "2017-05-21T05:24:50.619Z"}}, {"model": "sessions.session", "pk": "nc9hq4hktopxst67ub57d3sn8puc2k5s", "fields": {"session_data": "Y2IxODA4YTk0MGFlMDE5N2FjM2VlNTc2YjYzYzZmOGNhODRlYTE2MDp7Il9hdXRoX3VzZXJfaGFzaCI6IjAyNGI3MzA1NDg3NDRmZDA4ZmRmODFhZTUyODg2YzFjMTU5NTMwMTgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjQifQ==", "expire_date": "2017-05-21T02:48:11.878Z"}}, {"model": "sessions.session", "pk": "ndl7ru020pqmp97qh9g21xvvi70pi0vu", "fields": {"session_data": "MTdjOTE4YzljMzM3NjUwYjUwZmUwMzA4ODBkNzBmYTU0Y2EzNzhhMjp7Imxhc3RfYWN0aXZpdHkiOjE0OTI1MDU3MzIuNTI3NDk4LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-05-02T08:55:32.531Z"}}, {"model": "sessions.session", "pk": "ngpkxdo44jvzi0o0hwza189ovtez0meu", "fields": {"session_data": "OGFmZDVjOTI0MWFjZGIzN2RiZDRiNmZmOGNhNGE4YTgzN2UzZWVhMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjU4NDYwYzFhMzM3MTIyODgxNTU2MDAxM2UxMDVjNTQzYWQwNWRmMmMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjUifQ==", "expire_date": "2017-05-28T02:11:28.829Z"}}, {"model": "sessions.session", "pk": "nh6mwirflzrn1fnv5vk6hsti474qn8us", "fields": {"session_data": "OTRmOTliZDIyMmMyNTk0ZDA3ZTljNjcxODA5NTkxNGM4NDE2M2FiZTp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMWQwNThiZmQ1YjFiZWM2MTMwMzY0NzVjMjU5M2Y1ZTQxZmZjYWVkMCIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQxMzEyNDUuMTAyNDc5LCJfYXV0aF91c2VyX2lkIjoiMjIwIiwiX2RqYW5nb19jYXB0Y2hhX2tleSI6Im5TRHcifQ==", "expire_date": "2017-05-21T04:27:43.353Z"}}, {"model": "sessions.session", "pk": "nhu0i9iit3wsggx23npzojrmsuhqdpaq", "fields": {"session_data": "NGNhNGZhY2Q0NTRmZGQxN2UyZWUxZGQwNDdjOTcxNjk4ZTcwZGQ4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6IjdhYWRiZTAwY2RlMzc0NWEyYTljMjMzNzM5NTNkOTk4YTJiMzUwMjIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxOTUifQ==", "expire_date": "2017-05-28T04:01:21.266Z"}}, {"model": "sessions.session", "pk": "njkhrbu32lr2vyom6l26f9bvz7m55lcz", "fields": {"session_data": "YWNlNzUxNWZhZWNmMzdhMTI4NGJlYmI3NjUwYTBhMGMwYjgyMDk4Yjp7Il9hdXRoX3VzZXJfaGFzaCI6IjYyMjc0ODFmYzQ5NDI4Yzg2MzkyNTc0ZTUwNzYxZTkxMDYzMTk2YTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMTAifQ==", "expire_date": "2017-04-20T07:56:07.167Z"}}, {"model": "sessions.session", "pk": "nk5emqzccje22necx0qqmoggh02l7dgd", "fields": {"session_data": "Y2QyNDBjNDgyMjYxZGM0MmNkY2NjNjZkNjVmNTUyZGZlOTQyMWViZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjQzM2NkNmNjNDlhYTc5YjI5NjZhZDJlYmNkNzEwZGYyYjNjOWY0YzEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMTUifQ==", "expire_date": "2017-05-21T09:31:36.743Z"}}, {"model": "sessions.session", "pk": "nkq8q72zhcnc6v2gbxlxbkd7xbd30e4p", "fields": {"session_data": "NmNlNzhkZTUzN2ZhMjg0ZGIwMDhjYzI1MjMwMmY2MzVmZjE1NzQ2OTp7Il9hdXRoX3VzZXJfaGFzaCI6IjM0MzI5ODNiNzlhNTk4YThmZGVhNGNhYjc3YTJjOTIzMGY3OTg0ODUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTYifQ==", "expire_date": "2017-05-19T11:34:12.232Z"}}, {"model": "sessions.session", "pk": "nlght22u7kqkkaigmkaqf8sg50q7c1w3", "fields": {"session_data": "NGFkN2Q1NWQ3Nzc4ZDA5ZmU4OTA0MTJhOTg1ZmI3NzRkMTU1M2UwZTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM0NzA1NjAuNTE1MzMxLCJfZGphbmdvX2NhcHRjaGFfa2V5Ijoic2ZwUCJ9", "expire_date": "2017-05-13T12:55:00.526Z"}}, {"model": "sessions.session", "pk": "nmsuui4yi4srugt1atgxplur5s0phr8r", "fields": {"session_data": "ZjQ2ZmZkY2U2MzViNzgwNjIxZmQ4YjM5MDI4NGZkN2FhNDkxMzQxODp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk4MDY2NzcuNDA1MzcyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiNkJDNyJ9", "expire_date": "2017-04-01T03:10:17.412Z"}}, {"model": "sessions.session", "pk": "nocmjag5zkt4d9bvt7ct3uk2swjylhsn", "fields": {"session_data": "NjJhNWNlMTVmN2NhMWExMjk2ZTM5YTJiMjU5OWQ0MGRkODM4MTk1MDp7Il9hdXRoX3VzZXJfaGFzaCI6IjhiOTZmODQxZDI1NGVmYjY4YjY1ZWM3YjdkYzE0YWQ0MDg3NjdmOGYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTQifQ==", "expire_date": "2017-05-19T10:16:54.011Z"}}, {"model": "sessions.session", "pk": "npwdipkqckmhkowbt63h0kejsnxekapc", "fields": {"session_data": "MzMyZTkyZWE3OTYxZTk3NzIzMjc3YjFjOWFhNTNjNTQ1ZmQwN2M4ZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjM2NzA4N2M5ZmVkMmMyMTgzZjM3YThiOTk4YTI3MDQ3ZjU1MDVmODEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI3NSJ9", "expire_date": "2017-04-01T09:07:36.414Z"}}, {"model": "sessions.session", "pk": "nr0cey8v4v34n9x2n4dzi30lyluo37ur", "fields": {"session_data": "ZWQ5ZDNhNWM5Yjg1M2I3MDBiNWNjZmFmMzJiZmI3NzAwMTNiZjUxMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhY2M3MTI1OWU2ZWU2NWY3MGE4NDNkM2NjNmE2ZjBiYmI1ZWY1MDAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTYifQ==", "expire_date": "2017-05-16T06:44:13.946Z"}}, {"model": "sessions.session", "pk": "nrac8arcd7748eh6j6wchc5q9o2tv0ug", "fields": {"session_data": "OWFlZjZhZmY0OTJhNDBiODdhZjYwOTJjZmQ4OGVhOWY4ZmVkYjdiNjp7Il9hdXRoX3VzZXJfaGFzaCI6ImNhM2FhNDdkMWM3ZDBhMjFiNTA5ODI2ZDIwYTVmODNmYWM5ZmE3NmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNzgifQ==", "expire_date": "2017-05-22T07:53:23.291Z"}}, {"model": "sessions.session", "pk": "ns4h1effaaxfviqgjec53bch6g4xgluo", "fields": {"session_data": "ZTBmOTFjN2E0YmQ5MWYxZWZmMzQwMjE1YjMyMmUxNDIwNjNkNWY1OTp7Il9hdXRoX3VzZXJfaGFzaCI6ImU0YTI0OWQzNjE5OTNhZTVlODRkYmU2NGEwZTZkMDQ1MGFkNmY2NzYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0NSJ9", "expire_date": "2017-03-29T13:35:06.941Z"}}, {"model": "sessions.session", "pk": "nvjll8d5f7uze8igh9dnpl4w1fa9g0l5", "fields": {"session_data": "ZmU0NzAwNzZiNzdmMjc5NmUzMjg2NmNmNzVlNjgyZDFiZTJlMjk3ZTp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiODNhNWViMzJhZjFiZjhlODM4OWVhNWNhOWVlZGM4MWU1OWY1ZTFiMSIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5ODk5ODQuNTAyNDAyLCJfYXV0aF91c2VyX2lkIjoiMzMzIiwiX2RqYW5nb19jYXB0Y2hhX2tleSI6IjVUV2cifQ==", "expire_date": "2017-05-21T02:14:41.511Z"}}, {"model": "sessions.session", "pk": "ny3l3mgowhwmitr8gujr3zec1libjm0j", "fields": {"session_data": "NDg0ODlkMTA4YzE2YmQyNWRlMzRjODhiMzc5MmQyMjAxOTg0ZWQ1Zjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTIxNTA3NjEuMzc3MDQ0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRzQzaCJ9", "expire_date": "2017-04-28T06:18:21.386Z"}}, {"model": "sessions.session", "pk": "o2n9v6q3flkbtqqt8g11ssoisaknz75z", "fields": {"session_data": "NjY0NDZlZDdlZGMwNWRiN2E2MWE4ZTg2Y2ViMGRkZDM2OGVhMmY2Nzp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg4MDMxNjc0ODk5MWMzYzdkYjBiMGJlZDFmNTYwZDA5MzI3NTBmNDUiLCJfZGphbmdvX2NhcHRjaGFfZXhwaXJlc190aW1lIjoxNDk0MTMwOTIxLjQ5ODcwMywiX2F1dGhfdXNlcl9pZCI6IjM4NCIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2RqYW5nb19jYXB0Y2hhX2tleSI6ImFVc0cifQ==", "expire_date": "2017-05-21T04:29:36.523Z"}}, {"model": "sessions.session", "pk": "o2w4tv9lzoy0ebh4wkee9u5rgo7upezg", "fields": {"session_data": "ZGY0YzNlNWExNDNmMmE2ZDg5YmQxMDk3M2Q4MzljMmNiYTk1MjgzNTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5OTczMTcuNzcxMTc5LCJfZGphbmdvX2NhcHRjaGFfa2V5Ijoia1BZcyJ9", "expire_date": "2017-05-19T15:14:17.784Z"}}, {"model": "sessions.session", "pk": "o37fi777iccwpctfmr8zt8my6cgzl2ss", "fields": {"session_data": "Yzc3YjE5NmVjN2IxOGM2ZWRhMmYyOTQ0YjUxNDBkNzU0OGMyMTBlZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjUzNGQ3ZTBjM2U1Nzg2ZGVhNTZhYzQwYjA1ZDJlZDhiMmNhODg1NDQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MDIifQ==", "expire_date": "2017-05-23T09:46:01.490Z"}}, {"model": "sessions.session", "pk": "o4llyj48994jnyg5yo8utdndvmuq75hg", "fields": {"session_data": "ODA4NTkzZmExYzRhODJhYjE2NGFmOWJkODhjMjdlMGU0NjdhODNjYTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTIyMTU3MzUuNjIwOTU5LCJfZGphbmdvX2NhcHRjaGFfa2V5Ijoid0dtSCJ9", "expire_date": "2017-04-29T00:21:15.655Z"}}, {"model": "sessions.session", "pk": "o6plyihri7q5d735pk4m8xyv6ehbfrpg", "fields": {"session_data": "MGIyNGU0OGIyYTM3MTU0MjdjY2IyN2VhODZiNjc0ZjEyZmQwY2Q5NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjUwYWIwNmYwY2I2ZjYxZmUwOWQzYjhhNTI3OTcxNGI4ZjkwMGZlNjAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyODQifQ==", "expire_date": "2017-05-21T05:52:33.599Z"}}, {"model": "sessions.session", "pk": "o7fqu6c4pj83xwwe5csp02e41gd9gbe4", "fields": {"session_data": "MDcyM2NhZTRhM2U2OTQ2OWY1YTBkNmY2NTQ4ZmEzZGJlYTQyYTA4NTp7Imxhc3RfYWN0aXZpdHkiOjE0OTI0OTQwMTYuNDU0NDMxLCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-05-02T05:40:16.491Z"}}, {"model": "sessions.session", "pk": "o96fi5fgtjsys8y5licfrfd88jo01zor", "fields": {"session_data": "ZDM0NTk2ZDlmZTcyZWI0MWEwYmY4NWNkMGZkYWM1YTc2ZWI2YTY2OTp7Il9hdXRoX3VzZXJfaGFzaCI6IjM0ZTAzZWRiMjEzYmM2ODk1NzNmOTI0ZDk5YjU2YjI4MDc3MGI5ODkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1In0=", "expire_date": "2017-03-29T12:06:23.094Z"}}, {"model": "sessions.session", "pk": "oapwxja29w2wv25g85r0bvboxdjevicr", "fields": {"session_data": "Mzk3YzYzZWRkYjAxNThiMTZiZTFkOWUxODIxNzhmMjY4NTYzMzA0ODp7Il9hdXRoX3VzZXJfaGFzaCI6IjcyZjFlYWYwOWJjZDQzMTE0NTViNjFmOGMyMGEyODU0NTk2Nzk5M2QiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4NSJ9", "expire_date": "2017-04-01T05:58:30.640Z"}}, {"model": "sessions.session", "pk": "obqveyg49izmseh1wbbrrdc3q4fmn0m0", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-20T07:35:12.392Z"}}, {"model": "sessions.session", "pk": "ofxo8eegov13yf9btv21bgahu0yr04m8", "fields": {"session_data": "N2IzODEwODNmMmQxOTc3YzhhNjc3NTQwNDBkYzA4NjZjMzU5YzExNDp7Il9hdXRoX3VzZXJfaGFzaCI6Ijc0MmMyNzJlY2E0ZTc5MWIxMDJiZmZmYzZkNzQ5NmZlODMzNGQzNTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNDMifQ==", "expire_date": "2017-05-21T04:23:51.104Z"}}, {"model": "sessions.session", "pk": "ognrhyuwfvyc86ke71e9bzjq93cmyw54", "fields": {"session_data": "ZGY0YjBiYzU0YzQzZGE1ZmE4ZWEyYzIwZTFjMDA3YTg3NWIwZjFjODp7Imxhc3RfYWN0aXZpdHkiOjE0ODEwMTAyNzguODIwMTYxLCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2016-12-20T07:44:38.823Z"}}, {"model": "sessions.session", "pk": "ohs9ny18l5wggpu89p504l6ndo449ehx", "fields": {"session_data": "YzVjN2FhOTFmMTI5OTc2ZTEwMDY1ODY3ZWRhZjU3NjcxNzE5NTYwYzp7Il9hdXRoX3VzZXJfaGFzaCI6IjYwY2E0ZjZmMjVkMjIyNjYwOGEyMThhZDgzZjk1N2IxNTU3MTI3OGEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNDMifQ==", "expire_date": "2017-05-21T04:09:12.690Z"}}, {"model": "sessions.session", "pk": "oirff2mriyn8mtnprwisjdyw1m3cqyxt", "fields": {"session_data": "NWQzMTUzZWFkMjI0ODU4M2FmNjQzYTIyZDI2MTBhMDUwOGZlMWRlNTp7Il9hdXRoX3VzZXJfaGFzaCI6ImI4ZTdhODhlNGUyNDdlZjA4YjY0MzQzNDc3Zjc3ZmE2ODgxYTA3YWEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNzkifQ==", "expire_date": "2017-05-28T04:04:20.082Z"}}, {"model": "sessions.session", "pk": "om40idgw3vemcswjg1vthvubbnux1zdz", "fields": {"session_data": "NDc4ZTQ5ZDEyODA2ZjY5NGExOWNhMDIzODkzMzdiMjNhZDQ2YzcxNzp7Imxhc3RfYWN0aXZpdHkiOjE0OTAwNjc1NjEuNTI5NTA0LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-04-04T03:39:21.535Z"}}, {"model": "sessions.session", "pk": "omgr2osj6vhtehpbzrxb3eij0lqo46as", "fields": {"session_data": "MmZhNTM5OWRiZWM1NTY3M2MyY2JhNzg3ODlmYWUwYTQyZDc2NjRmNDp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiNzYyNDg2MWZjM2JhYTI2MWYxYzY3ZTkzYTcwYWJjOTRkM2E2ZDVlOSIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM4MjM3MjkuNzMyNjYsIl9hdXRoX3VzZXJfaWQiOiIyODYiLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiQmF1MiJ9", "expire_date": "2017-05-18T13:02:20.740Z"}}, {"model": "sessions.session", "pk": "on1brqxspj8zyfzh5jjia1ocd4p65ecf", "fields": {"session_data": "OTZjMmE2NTU4ZjMyNmUwYTQxNGE1ZjQyOWVhMmRiMTJmZjlkZDk5MTp7Il9hdXRoX3VzZXJfaGFzaCI6IjFiZTdhODU2M2YzYWFkZWRjNThlNThkOGYxYjk5YmQyY2Y1NzQxOWYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1MSJ9", "expire_date": "2017-03-31T05:48:14.319Z"}}, {"model": "sessions.session", "pk": "oop8dw6reiq9qbyj57i8fm5piakuprgl", "fields": {"session_data": "YzkyZDljMWY5NDE2YjRlNWU1YjgyNWQxMWNhMGRjZDRjOTI0MzFkNjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxNjk5NDAuMjI1NjAxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRVc0RyJ9", "expire_date": "2017-04-05T08:04:40.234Z"}}, {"model": "sessions.session", "pk": "oov9pjbndrxb3ilahs8f9y15jnxlu9y1", "fields": {"session_data": "YzRmYTYyNDQ1ODdkMmNlYWM0NWJjMjcyNTY3MjhlZGI0NWUwYTQ5Mzp7Il9hdXRoX3VzZXJfaGFzaCI6IjJkNGU5MGYwYTEzNDg5MjgxM2Q3OGU5YmIyNGMxNDk3ZDcxM2ZjMmYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjQifQ==", "expire_date": "2017-05-17T10:46:32.907Z"}}, {"model": "sessions.session", "pk": "osa8q6dps3mun63ksaa186hfn8i9ozg5", "fields": {"session_data": "MWYwNTcwOWU0ZjcxYzY2MTY4MzlmYTZlNTE3YjY0MzQwMzQzZjEzZjp7Il9hdXRoX3VzZXJfaGFzaCI6ImQ3NTdmZmJkNTg4NTMwZTNhMmJkZmI4YjZiNzY5ZWE1N2JlNjliZjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNDQifQ==", "expire_date": "2017-05-13T13:38:06.361Z"}}, {"model": "sessions.session", "pk": "ou81klpyk7ajvc34prcnkqdhlznq0457", "fields": {"session_data": "NzQxODBhMGI1ZTc1NzA0NDZkODFjYzIyMWIzMGMwYTk2NjEyMDAxZTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDEyMDkuODQzMjExLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZDhwNCJ9", "expire_date": "2017-03-30T05:12:29.851Z"}}, {"model": "sessions.session", "pk": "ouloxei2b9mjbuqecznjhx60sk3b156k", "fields": {"session_data": "YTMzZmE3OTVjNmE5YzY1OTg3NGViODRjNTE2NzM5NDdkOTUwYjkxYjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxNjc4NDUuMDE4NDE4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZjV0TyJ9", "expire_date": "2017-04-05T07:29:45.026Z"}}, {"model": "sessions.session", "pk": "owmvx9myadr0rjztp637r1bt7ko7ql0y", "fields": {"session_data": "Mjk2YzQ3NDAxOWQ3ZjQ5ZmQ1MmQyMDRlZjkyMWMzMjM3NjVjMGFhZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjUyYmIwZWZiZjBlYmFiNjE3MDZkOTM1MGIzNDMzNzMzNTBkYzZlMGYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTMifQ==", "expire_date": "2017-05-21T04:09:51.704Z"}}, {"model": "sessions.session", "pk": "oyd661ukixku578eurt3qebtl4vq1jrf", "fields": {"session_data": "N2IzODEwODNmMmQxOTc3YzhhNjc3NTQwNDBkYzA4NjZjMzU5YzExNDp7Il9hdXRoX3VzZXJfaGFzaCI6Ijc0MmMyNzJlY2E0ZTc5MWIxMDJiZmZmYzZkNzQ5NmZlODMzNGQzNTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNDMifQ==", "expire_date": "2017-05-21T03:57:12.442Z"}}, {"model": "sessions.session", "pk": "p0bh86p71dcg4py3kgrdkolty4f3827j", "fields": {"session_data": "Mzk3YzYzZWRkYjAxNThiMTZiZTFkOWUxODIxNzhmMjY4NTYzMzA0ODp7Il9hdXRoX3VzZXJfaGFzaCI6IjcyZjFlYWYwOWJjZDQzMTE0NTViNjFmOGMyMGEyODU0NTk2Nzk5M2QiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4NSJ9", "expire_date": "2017-04-02T08:21:24.279Z"}}, {"model": "sessions.session", "pk": "p1hoan9pe692u2y4t8x4l6v3hi53vlrt", "fields": {"session_data": "ZWRjMDJiZWJjNzE5MGVhYTBjMThhOGEyYmQ4NTAwZDk4OWRiNzVlNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjAyNmY4YzBhN2I3MTA4YzE1OTJmZWQ3OTc4OWQ0NGI1OGE2MjNhZjgiLCJfZGphbmdvX2NhcHRjaGFfZXhwaXJlc190aW1lIjoxNDkyMTQzNDY2LjY0ODkwOSwiX2F1dGhfdXNlcl9pZCI6IjkzIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiVkdIRyJ9", "expire_date": "2017-04-28T04:16:46.655Z"}}, {"model": "sessions.session", "pk": "p3djzw4dg0cjzrazofujvorrh8lq34dw", "fields": {"session_data": "YzBmNGNiYWVkNjhiMjEzZDFlOWFlNjRkZDA3MDhjYTI1NjQ5ODA5Mjp7Imxhc3RfYWN0aXZpdHkiOjE0OTM0NTc5MzIuNzI5MTAxLCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-05-13T09:25:32.734Z"}}, {"model": "sessions.session", "pk": "p4190n9an0ic6gpmdtgcftaj7at9z1o3", "fields": {"session_data": "ZjZlYWVlMzNhODkwODFhYzA0ZTdkZjcwOWJjYmJmYzliMzcxNWUyNjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQyMjE3MjIuMTE4NTQsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJFaDNQIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsImxhc3RfYWN0aXZpdHkiOjE0OTQyMjMxNTQuMDU2MzUzLCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1In0=", "expire_date": "2017-05-22T05:59:14.099Z"}}, {"model": "sessions.session", "pk": "p43tzlk24537znqn7pk2r5x2enlng6yv", "fields": {"session_data": "Njk0OTY5N2VkYmMxZDk2YTQxZGEwMGI3NzY0MGE3NDdlODE1ZTQ4OTp7Il9hdXRoX3VzZXJfaGFzaCI6IjYxNzRjMzA2NjE2YjQ5NzQ0MGUzMzZjZjdhZmQ1MWMyYzQyYWU4MmIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMjkifQ==", "expire_date": "2017-05-09T15:05:21.536Z"}}, {"model": "sessions.session", "pk": "p585uerfxaatsuaga6lo1mgyc01eyb6e", "fields": {"session_data": "Y2VmYzg3MzcxZjRmNzYxNDQ4NDA3NGJlNjRlNWMzNmJlYmI3N2VmNDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxNzYwMjAuMTkzMTkzLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiMkJYZSJ9", "expire_date": "2017-04-05T09:46:00.200Z"}}, {"model": "sessions.session", "pk": "p5sx0rvrhdv5guo6q5xjcku811817m2r", "fields": {"session_data": "MDdmMzg3YWM5MTY0OWYyZDJhNDQzYjEyMDhkZmE4ZTdkZDM0OGEwOTp7Il9hdXRoX3VzZXJfaGFzaCI6IjYxZDIyMzhlM2Y5NjM1NGFlNjk5ZjRkOGIyYzAxNjRmYjYxZWYxMDgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzUifQ==", "expire_date": "2017-05-17T12:20:13.963Z"}}, {"model": "sessions.session", "pk": "p8nf3x0191blq7vkhiazn8m30ko7lp1m", "fields": {"session_data": "OGI5YTk2NDg0ZWE4OTYwZTg5NjEzMzQ2MzkyNjI0NTZlODBkNDg0NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjgzZjFmYmQ1ZjI3YjYzZGQxN2NlZTZlNjBkZjgxODg3NGYwNDdiY2IiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNjkifQ==", "expire_date": "2017-05-21T03:49:02.220Z"}}, {"model": "sessions.session", "pk": "p8ymop98g58fe82v59c1zeskhx6672mh", "fields": {"session_data": "MWFkZDkyYWFiOWMyNDk2ZGQ1MjFhMWM0YzY4YjMyZWEzZTVmZGM2Mjp7Il9hdXRoX3VzZXJfaGFzaCI6IjFhMTljMGVjMjZhODRlODAwMTQyNDZjNTUzNjA3ZjZjZjFlYThhMGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1NyJ9", "expire_date": "2017-03-31T04:13:04.896Z"}}, {"model": "sessions.session", "pk": "pa959wtsfy4qx7853fz2cd5uloiwpy8j", "fields": {"session_data": "MTU4Yjg5ODRlN2YzNTZiYzNmZTg5NGI3NTNjMDQ5N2U0NjQyOGM3ZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjMxODk5ZjUxZmVmNGZlMWU1YTk4MmQ5NTQzYzM2MjNhYjRmZTY5NWEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMTIifQ==", "expire_date": "2017-05-21T06:24:31.901Z"}}, {"model": "sessions.session", "pk": "paa54cbs2c3pc17zrl5hri16uzl8rcun", "fields": {"session_data": "NDAwYmNlNmI1ZThhNTk4MTEzMjY0NWRiYWE5ZjgyOWYwM2IxY2ZkMzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDEyODQuNzkwMDk3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiOXRFQyJ9", "expire_date": "2017-03-30T05:13:44.797Z"}}, {"model": "sessions.session", "pk": "pbxgqy6faos560k5qe1w42wjr9eixzb3", "fields": {"session_data": "ZmMzODhkMmM5MGFmZDJkNzNmMzk1NDFlOThlMjAyZTExNDI0NzVkOTp7Il9hdXRoX3VzZXJfaGFzaCI6ImVkNmE0NTQ5ZjdhODBkZjIxMTVmZjE5YjYwNWY3OWRkNjZiZjNjZTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNjgifQ==", "expire_date": "2017-05-28T04:04:57.241Z"}}, {"model": "sessions.session", "pk": "pd1pk92bstzen37k4b58m3s7xq281r3y", "fields": {"session_data": "MzkzNzkxNjBlYTg3MGZmNTFhODhhYjNiYzAzMzgyNzk0OWY3Mjc4Yjp7Il9hdXRoX3VzZXJfaGFzaCI6IjEzNDlhN2YxNDA4OWUxMGJjZjRiMWJmZjc1NjQ1MzQxODkyY2NiODIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzgifQ==", "expire_date": "2017-05-21T04:00:44.516Z"}}, {"model": "sessions.session", "pk": "pel99ym4462osi7ceop2icnrz5mljbh2", "fields": {"session_data": "NGQwNzRhZjJjNGZhNTgzODI1MTIzOGVhNjBiZjZkNjI1NmFkOTI4Mjp7Imxhc3RfYWN0aXZpdHkiOjE0ODk1NTAzMzcuNTg3MTU3LCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-03-29T03:58:57.588Z"}}, {"model": "sessions.session", "pk": "pfroldunnfru3uoytvze2ktbiwquxwyg", "fields": {"session_data": "Y2FlZjEzNzkzZWY1YmZjYjAyY2ZiZjYwZTcwN2U0ZTcwOTg3NDg3MTp7Il9hdXRoX3VzZXJfaGFzaCI6IjQ0ZmU3MDRhMWQxYmNlZDkxMDI3NmVjNDQ0ZTExMGFmZWI0NmNjZWMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4In0=", "expire_date": "2017-05-21T14:41:39.489Z"}}, {"model": "sessions.session", "pk": "pfvysak1z9qhmd5bvbjtpmdrdzxui6c5", "fields": {"session_data": "ODZhODZiZmY4NGI3OTBlMzY5MWQxODBhNjBhNmM2NjE1NDgzZTE5MDp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMDUwNmYyMzMzYjA1ZDJmOTUxZTliNzM4YmJlOTlhMjY2M2JkMGExMiIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQyNTY4NDEuNDc2MzYyLCJfYXV0aF91c2VyX2lkIjoiMzk5IiwiX2RqYW5nb19jYXB0Y2hhX2tleSI6IkRGVFMifQ==", "expire_date": "2017-05-22T15:44:22.247Z"}}, {"model": "sessions.session", "pk": "phacgoz6j6zkuv6tvi7sgr8ci9d46eld", "fields": {"session_data": "MDI5OTcwNmY4MWY3MTAzN2YzZGRjOThlMzJkNmQwOTEwZmI5ZGY3ODp7Il9hdXRoX3VzZXJfaGFzaCI6ImI2YmVmOGRmNTIyYjM0NDBiZDY3ZGQyZDdjOGY3ZDQxOWYyZWFlZGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI3MiJ9", "expire_date": "2017-04-06T14:02:44.936Z"}}, {"model": "sessions.session", "pk": "pl7gnxelbgw4pyh5uj9dnhqo4kifwake", "fields": {"session_data": "NjcxODIyYTBmNDUxYjM5NzUzNzRmM2JjYzg4YTgwMWFiZGE0MGUxYzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTE0NzYzNzMuNDM3NzQ3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiTVlFZCJ9", "expire_date": "2017-04-20T10:58:33.448Z"}}, {"model": "sessions.session", "pk": "pmgi3xgfq7r5q3wdlplstmuglkq8cf0x", "fields": {"session_data": "YjZjYWExODQ0ZjU5MjVlNGYyYmRhZjdjMWU2OTNiMmUxZWY1NmFlZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjAyNmY4YzBhN2I3MTA4YzE1OTJmZWQ3OTc4OWQ0NGI1OGE2MjNhZjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5MyJ9", "expire_date": "2017-05-21T04:23:15.460Z"}}, {"model": "sessions.session", "pk": "pmyxkcwos26kcyvo0yzthglc3mcgsnzh", "fields": {"session_data": "YmMxMjQzNjgxNTYxMTE2ZDcwODkxMGYyZjI1NGRjNDc0MjZiOWQ5Nzp7Il9hdXRoX3VzZXJfaGFzaCI6IjZkZTgyYTA5NDgxMDNjMGIwMDA0NjA5Mzg4NjU4MjlkYmRlNmMzNjciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjIifQ==", "expire_date": "2017-05-19T13:21:53.625Z"}}, {"model": "sessions.session", "pk": "pp7vk9n7li84al5ds8rww36debb3y6nh", "fields": {"session_data": "OTY1Njk0NmE5YTQ0YjAwMDQ3MGI5OTg1OGQ0NTJiMDk0NmRmZmUyNTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQwODE0NTIuMjI0NDQ4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiUEVRdyJ9", "expire_date": "2017-05-20T14:36:32.236Z"}}, {"model": "sessions.session", "pk": "ppc6tzake5h9o9a375xa3jl7tyw09um6", "fields": {"session_data": "MGYzNzVlY2YzZjJhNmM3YWY1MDg2YWUwNDJhNDE1ODA4Y2YzZDgxMzp7Il9hdXRoX3VzZXJfaGFzaCI6ImE1YWVkY2JmOGRjYjIxNGRiYjJhMWYxMDYxM2RmMzUyOWJkZmE2ZTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTcifQ==", "expire_date": "2017-05-21T03:48:45.189Z"}}, {"model": "sessions.session", "pk": "ppekfa0suxhti4nbfeskvj51jz4v2i96", "fields": {"session_data": "NTlkNGI2Y2U4ZjE0MTEzNzlmZWY2ZmZiZjNkMGE4NzQ4ZmQ1M2EyZjp7Il9hdXRoX3VzZXJfaGFzaCI6ImNjZGM2NDE5OTY0YzFmODkyNjY5ODE1MzE0ZjE4MDk2YjdiODI0N2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTAifQ==", "expire_date": "2017-05-18T15:20:56.741Z"}}, {"model": "sessions.session", "pk": "pr4933r94ph6ycggotu5hy41jrwqalos", "fields": {"session_data": "MDZmMTViNzZjMDM3NGRhZjdjZGUyZmJkYWZlMjVkMjkyNmFiMTVlMTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTA3MDcyMzQuMTA5OTI0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRGVCUSJ9", "expire_date": "2017-04-11T13:19:34.117Z"}}, {"model": "sessions.session", "pk": "psxtop6musallx5eh0ho5bec2kmq2tgj", "fields": {"session_data": "ZGQwMDNjNDYyMjk5MjFhNzMzNjkzZWJkZGYxNmFlZWNmYTQxMzA4OTp7Il9hdXRoX3VzZXJfaGFzaCI6IjdlMzg2OTU4YzgxYjM2MWU4Njc4ZjE5MThlNWY2ZWE4YzYxYzNjNzkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI3NCJ9", "expire_date": "2017-04-01T04:07:42.054Z"}}, {"model": "sessions.session", "pk": "pt0guya5ubomw3j4djxfh6fuhbza27fw", "fields": {"session_data": "MmM4ODM2ZjY3MGUyNTA0YzVkNDczODQ3NzJkZTEwNzUyZWU3YTk2Yjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMzNDc0NTMuMDI0ODc5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiUFg3WSJ9", "expire_date": "2017-05-12T02:43:13.031Z"}}, {"model": "sessions.session", "pk": "ptknx0skgcd42s59cxf0361ld3rix1y7", "fields": {"session_data": "M2YxZWZjNmQwZDZmMGFiNzAyNjhjZjRhODY5NTMzMjBjYTI0OTMwNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjkzZjJjN2FhNzY2YTU1NzUxYzhhNzU1YWU1MjE0ZmFmMzRjZmRkN2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5In0=", "expire_date": "2017-04-06T05:53:31.550Z"}}, {"model": "sessions.session", "pk": "puzorldyvstp4wxkdphxozz5muqp43zb", "fields": {"session_data": "ZTU0ODMxOTgwMTIzZDM2MjNmNGM5ZGY5YjJmMDIwMmMzZDYwNzVlNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjZiYzQ2MjRkMjQ2NTdhZGE0YWE0YzkwYTY2YjhmMzMzOTQ2YTlhNjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTEifQ==", "expire_date": "2017-05-21T04:11:29.258Z"}}, {"model": "sessions.session", "pk": "pxe04bunn91ljf8a2x1apqtc871ootnr", "fields": {"session_data": "ZDU4MmZlZDc0MTY2MjJlOWRmMjg1ODMwNzM4Yzg1MWIzNGNjNzIzNDp7Il9hdXRoX3VzZXJfaGFzaCI6ImRmNjlhNmRlMWVlOTlhM2E1Njg1ZjU3ZDJkMzY3OTg4ZTMyOWUzYTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzEifQ==", "expire_date": "2017-05-19T23:51:43.430Z"}}, {"model": "sessions.session", "pk": "pxox34mng95jt9ubp2tclflz5mrsuzqo", "fields": {"session_data": "ZjcwNzk2YzQ2MTkxM2RiNDczNDUxNTY2MTZkMzJhNzA0YzlmOGMzOTp7Il9hdXRoX3VzZXJfaGFzaCI6IjZmNTZlMzdmOGIzNjI3YjY0Mzg2MTZkYjQ2NmMzZTA1ZWI1ZTg1YjAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMiJ9", "expire_date": "2017-04-05T09:06:37.423Z"}}, {"model": "sessions.session", "pk": "pxr34xdrz0mjou06jcfpuhgp998ed4rr", "fields": {"session_data": "NzY5MjUzMzI5MmYyYjY5NGNkNzg4NDliY2RiMjRhYTY1MTNmZmViZDp7Il9hdXRoX3VzZXJfaGFzaCI6ImE3OTNjOWE0YmM0YmY4ZjVhZjczNDljZjdhMWEzMjRmOTc0MDBiNzciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTYifQ==", "expire_date": "2017-05-21T03:56:06.081Z"}}, {"model": "sessions.session", "pk": "pxv714s9443vkaezq606vcokwnbto2x7", "fields": {"session_data": "YzgzN2Q2YWQzZmJiZmZhZTEzMThjOWNiZGRhMDgyOWZiNzMyZWUyZDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM3MjcwNzkuMjcxMzY5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiUzRYcCJ9", "expire_date": "2017-05-16T12:10:19.290Z"}}, {"model": "sessions.session", "pk": "pyj3lmvtkc3yebtpm0rmdp9m7tydzqcw", "fields": {"session_data": "ZTg1ZWNmZjk0NjAxMmE0OGJlMjI5MTU5OTJkNGY4Njg0ZmU5MDY0Yjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3OTZkMDJiZjQ4ZWJhMDk5OTQ1M2UwZjAyOTE4NmNiMGVkYjM3MjkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNjQifQ==", "expire_date": "2017-05-28T04:03:51.619Z"}}, {"model": "sessions.session", "pk": "q57fzicikjdpidtaked8jh5qk9djzcdf", "fields": {"session_data": "YmY1MGE2YjRjNGNmYTNmNzcwZjc5N2I1MWJjMDU4ZGE3MzcxOGU1MTp7Imxhc3RfYWN0aXZpdHkiOjE0OTQ0MDA2MDEuODA3MzksIl9hdXRoX3VzZXJfaGFzaCI6Ijg4NzdmZjU3OWJmMDQ3ZDdhMGYxNmUwOTA0MDE4MmExMDIxY2UxZTUiLCJfYXV0aF91c2VyX2lkIjoiMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=", "expire_date": "2017-05-24T07:16:41.809Z"}}, {"model": "sessions.session", "pk": "q96vs4ku0d60get2ftxwyspzvzw6nzbd", "fields": {"session_data": "NzViYzNiNWFmNmRlYmE4ZjhlM2ZlMzU4NzYxNmQ4M2ExOGFhYjgyMjp7Il9hdXRoX3VzZXJfaGFzaCI6IjIxNDFkZTM4ODM4OTQ3MTJmMTcyMWIyNDkxYmFkZmNhNWMzZDc4NzMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDQifQ==", "expire_date": "2017-04-05T13:22:33.209Z"}}, {"model": "sessions.session", "pk": "q97ij3kdc7wehp2jk4r8cxk85cb59rpi", "fields": {"session_data": "MzJmMTQ4OTQ4OWE0NWFhNDlkOWMzMjQ4YWJlZmI1ZDVlOWM0NTkyNzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5ODQ5NDEuMDY5NzY5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZE5HYiJ9", "expire_date": "2017-05-19T11:48:01.087Z"}}, {"model": "sessions.session", "pk": "qaewzsmqke0l4k3csse0xv9i2vykyb7y", "fields": {"session_data": "MzkzNzkxNjBlYTg3MGZmNTFhODhhYjNiYzAzMzgyNzk0OWY3Mjc4Yjp7Il9hdXRoX3VzZXJfaGFzaCI6IjEzNDlhN2YxNDA4OWUxMGJjZjRiMWJmZjc1NjQ1MzQxODkyY2NiODIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzgifQ==", "expire_date": "2017-05-13T13:32:28.606Z"}}, {"model": "sessions.session", "pk": "qaqcrwhn5o6yki7xkfxr8bcrkh340xq6", "fields": {"session_data": "NzE4ZjM0NDY0YjFlMDBhMTgxMWI3ZDQ3ZWJkZTljOWYyYjFjZWUwYzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMzNDcyMTIuMTA2MjIzLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiNkhCZyJ9", "expire_date": "2017-05-12T02:39:12.115Z"}}, {"model": "sessions.session", "pk": "qbqbcl2dy2zuvgp829yl8wbmhxp34q0r", "fields": {"session_data": "NGFlMWE3NjNlZDFjOTcyZWFmZWVlZjBhYzE1YmUxMWU0ZTJiMGFhNzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTE0NzE2OTkuOTQ2NDc3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiOVJtQSJ9", "expire_date": "2017-04-20T09:40:39.967Z"}}, {"model": "sessions.session", "pk": "qcpqsatptcgyjl3lfecqiw0hbttcyynq", "fields": {"session_data": "ZjVhOTFiMWFiYmJkZmY4Zjc0MzNjYjJmYmM4NDc1YmVmMjJiNTlmYjp7Il9hdXRoX3VzZXJfaGFzaCI6ImIxNTk3NTQxOWI4N2MyOWQ3YTY5MjAwNzRmMmNkNDk4MWRiMzNhNWEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMSJ9", "expire_date": "2017-04-01T03:11:47.782Z"}}, {"model": "sessions.session", "pk": "qd7495wb53kxgqw03gl7z29l2cqnlp3w", "fields": {"session_data": "OGNjNTQzYmZlOTIwMmUwMTA0MzUyMzBmYzBlZDA3ZDdhOWNiM2IwZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjBkZDIxZjhiNjY0ZWM0MDRhNWU0MjUwZGFjNjlmMDYyNmZlYjJhM2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTYifQ==", "expire_date": "2017-05-12T02:50:06.045Z"}}, {"model": "sessions.session", "pk": "qdpipr44xgx4fm38h37fnhrqggw7byeq", "fields": {"session_data": "NmE1NjhjZjI3ZmI5NTQyMTViYmY0NDM1OWM0ZTQxNWQ4OTIzNGExZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjFkMDU4YmZkNWIxYmVjNjEzMDM2NDc1YzI1OTNmNWU0MWZmY2FlZDAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjAifQ==", "expire_date": "2017-05-21T04:07:41.570Z"}}, {"model": "sessions.session", "pk": "qgwt3l7zvdy31fu88nm16t038nd3ugj5", "fields": {"session_data": "YzliNzY4Mzc4ZmVhNjAxMDQwZmFhZTY3YjMwMTE5YTEwMDBhYmVhNzp7Il9hdXRoX3VzZXJfaGFzaCI6ImU0ZjhhNzA4NTY4NmI2NTIzNGIwMTY3ODJmNGQ4YzFmYTExOTM4YjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5NyJ9", "expire_date": "2017-05-10T10:42:25.220Z"}}, {"model": "sessions.session", "pk": "qjco4xfff5gqocs0vlvuwe4pgs987yyf", "fields": {"session_data": "OThmZDdhNDVlMTZjZmQzMTM4YTkzNjA3NGQxMDViOWVlNzUwNWFlMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjQ5MDBmYWZkMjk0MWJjOWU4Zjc5ZTMyZDUyYzBlYmFiZTIyNjY2ZGMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNDAifQ==", "expire_date": "2017-05-13T17:22:59.369Z"}}, {"model": "sessions.session", "pk": "qk7kqfblsywa4yl90rd2buqybidiptmr", "fields": {"session_data": "NGMwNTY3YzE0MGE1ZjZmZDQ4NDU3ZmVjMmIwNjE1ZGI3NzEyNzAxMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjllYzY5ZmY0NjE0NzIzNjM1NDAyM2ViN2I4ZDg2OWIxOGY0MGI5ZjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzIn0=", "expire_date": "2016-12-27T10:57:21.174Z"}}, {"model": "sessions.session", "pk": "qo04z97mqiok6yxoj92mohs566xvrz34", "fields": {"session_data": "MjliODI4OWRhMzc1NmY0ZGQxMTA2YWJjZTlkNTViMWJiM2E1OWI4MDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTA1NTY5MjEuMDc2MTIyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiQkQ4ZCJ9", "expire_date": "2017-04-09T19:34:21.107Z"}}, {"model": "sessions.session", "pk": "qqlbyy09tg027sc2vnlg9z4onxs8nmu0", "fields": {"session_data": "MTVmMDAwNTUxYzY2OWFiMTM0MTgyOGM0YjJmM2FkYjFlZTAyNzQ5YTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk4MTA3NzMuNTQ3NzM4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiSER5QSJ9", "expire_date": "2017-04-01T04:18:33.557Z"}}, {"model": "sessions.session", "pk": "qr4e5e5q39aeb3y1u1vpsluja8v3kn5i", "fields": {"session_data": "ZjNkZDgzNGQ1MDQ5ZWM1YjE2NTU1ZWM2MzMxYzQ2NmZlOGJlNTQ3Njp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQwNzY3NjUuNzk5OTg3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiQWtDdSJ9", "expire_date": "2017-05-20T13:18:25.809Z"}}, {"model": "sessions.session", "pk": "qr5bv0mho6tuzpj1kxv7leq4kbz4qr05", "fields": {"session_data": "NjRiZGYxNDQ5NGQzMWE3NWIyMmI2OTViYWFhOWE0NzM1ODYwYTM0Zjp7Il9hdXRoX3VzZXJfaGFzaCI6IjY5ZDZiY2FlMjE1MDc1MmE5NzdmZGY4M2MyNmIyZjY1ZTE1MDEyYWMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzOTgifQ==", "expire_date": "2017-05-22T14:51:53.497Z"}}, {"model": "sessions.session", "pk": "qrhni26akre8282x2c7fzmkhmfcxjffn", "fields": {"session_data": "NzViYzNiNWFmNmRlYmE4ZjhlM2ZlMzU4NzYxNmQ4M2ExOGFhYjgyMjp7Il9hdXRoX3VzZXJfaGFzaCI6IjIxNDFkZTM4ODM4OTQ3MTJmMTcyMWIyNDkxYmFkZmNhNWMzZDc4NzMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDQifQ==", "expire_date": "2017-05-10T15:04:07.212Z"}}, {"model": "sessions.session", "pk": "qsjsf78pbuh8anrstrv4mu5fee5kvid0", "fields": {"session_data": "ZGJmMTJjMjg4NDQyMjU3MDU4OGI1ZGFlNzVlYmYxMWFiMGM2ODJjNDp7Il9hdXRoX3VzZXJfaGFzaCI6ImIyNjJlMTQ3YzMyZGIzOGY5OTllZmEzNGQ2N2Q0MDMxODlkMTA4ZmUiLCJfZGphbmdvX2NhcHRjaGFfZXhwaXJlc190aW1lIjoxNDg5ODIxNjk4LjQxNzE0OSwiX2F1dGhfdXNlcl9pZCI6IjQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJXM082In0=", "expire_date": "2017-04-01T07:20:38.421Z"}}, {"model": "sessions.session", "pk": "qt8vu8syaeywy94bpd38ohvzvnozdulk", "fields": {"session_data": "NGU3YmE2NTBhNTdiYWVjYTQ0ZmZkYWY5NDFjM2VhNjE2MzYzM2RkOTp7Il9hdXRoX3VzZXJfaGFzaCI6IjY2YjU5MDJhZjA5YTZhZDc3YzE4ODgxNzg1Zjc1OWU1MmZhNGJjZDIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNjYifQ==", "expire_date": "2017-05-28T04:01:34.010Z"}}, {"model": "sessions.session", "pk": "qx2onhzdyhr6h1w4scf65c37kvk4em9t", "fields": {"session_data": "YmIwNjY4Y2M1OTk0OTBmNjFlMTAzYTRkN2I0ODRkYWFmMTkzYjM1ZTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijc0MmMyNzJlY2E0ZTc5MWIxMDJiZmZmYzZkNzQ5NmZlODMzNGQzNTAiLCJfZGphbmdvX2NhcHRjaGFfZXhwaXJlc190aW1lIjoxNDk0MTE3MDIyLjYzODU4NCwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMjQzIiwiX2RqYW5nb19jYXB0Y2hhX2tleSI6IkhCbVQifQ==", "expire_date": "2017-05-21T00:29:22.646Z"}}, {"model": "sessions.session", "pk": "r005jeqejn8lb7xi4h4leam38z5bfk6m", "fields": {"session_data": "YTg1NjUxNGJhYWEwYTBlMDIyNzRkYWJkNWQyMmQ5MzZjNzdkZjRiNjp7Il9hdXRoX3VzZXJfaGFzaCI6Ijk3OTk3NjRjNWYwNjRkNDU2ODI3ZTY5MTM4ZWEwNDc4ODc3YWQyNWMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNjUifQ==", "expire_date": "2017-05-28T03:59:52.293Z"}}, {"model": "sessions.session", "pk": "r0pjtdm19szaljcjyal83ko6gn5s2kou", "fields": {"session_data": "ZmUzYWUzMzhiNDhiYzViMmFhMjVmYjRkMjY4OGQ5OGQxMWNmYjA3Yzp7Il9hdXRoX3VzZXJfaGFzaCI6IjhlYmI4ZDBmOGZjNDBjYzFhMWVlYWJlMWYwZDk3OGY5YmQ0MTIxY2QiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MiJ9", "expire_date": "2017-04-06T06:06:59.179Z"}}, {"model": "sessions.session", "pk": "r1f7vfdlfsmey9b8e1gpjllf06br8s4v", "fields": {"session_data": "NTlkNGI2Y2U4ZjE0MTEzNzlmZWY2ZmZiZjNkMGE4NzQ4ZmQ1M2EyZjp7Il9hdXRoX3VzZXJfaGFzaCI6ImNjZGM2NDE5OTY0YzFmODkyNjY5ODE1MzE0ZjE4MDk2YjdiODI0N2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTAifQ==", "expire_date": "2017-05-21T04:12:32.391Z"}}, {"model": "sessions.session", "pk": "r2gtmkdhktjodlzgjmtqez0gahb9wt58", "fields": {"session_data": "YjE5N2RkMGMzOWU2MGVkNGNhNjA3MDYwN2IwZWRhNDZjOTRlN2YzODp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQ0ODA4MTcuNTMxNjE3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiWnp2ciJ9", "expire_date": "2017-05-25T05:32:37.542Z"}}, {"model": "sessions.session", "pk": "r2mq9re41hynts1081l462jxoghrcl4d", "fields": {"session_data": "ZTU0ODMxOTgwMTIzZDM2MjNmNGM5ZGY5YjJmMDIwMmMzZDYwNzVlNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjZiYzQ2MjRkMjQ2NTdhZGE0YWE0YzkwYTY2YjhmMzMzOTQ2YTlhNjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTEifQ==", "expire_date": "2017-05-21T09:25:38.341Z"}}, {"model": "sessions.session", "pk": "r2o6qjlyzaecytt5ssg1pnciztgy3noe", "fields": {"session_data": "ODRiOWEwMjJhY2IwODAyMzI2ZjczNmY2NzliYTNjNWQ0NWY0MWU4Mzp7Il9hdXRoX3VzZXJfaGFzaCI6ImYyNzczYWExNDlkZGNjOGUwNDUzNmNhYzQ2Njk3ZWY0ZGJmYmMxOWUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MTAifQ==", "expire_date": "2017-05-25T04:19:26.250Z"}}, {"model": "sessions.session", "pk": "r4vo73yd59cz56uz2992dt989vrkq7bc", "fields": {"session_data": "NjBmZDY2MTVmMzhlNTdhZWQ2ZDMyZjg3NzM5ZTc2Zjk1MTQyZDJkNTp7Il9hdXRoX3VzZXJfaGFzaCI6IjMwZmMzNmIyOTc3MTkxNWNiZDFhNjEzM2JiNjMwNjQ0NDliYzVjMTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNTcifQ==", "expire_date": "2017-05-28T04:03:25.047Z"}}, {"model": "sessions.session", "pk": "r5qdhfnpp90yd7kn2088ue4nuy0ta2ao", "fields": {"session_data": "MzA0ZmNkNmQxNmUxNmE2MDAyYWFhZGU1OGZmMTVjNTMzNjUxYzIzZjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxNTM5NDAuMzkzMzc4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiUXBCOSJ9", "expire_date": "2017-04-05T03:38:00.402Z"}}, {"model": "sessions.session", "pk": "r60ienpjx3zbj6x72ruhj1pfvl64fnaz", "fields": {"session_data": "MzRiNTEzYWE1MWI5YzQxMGY1OWFlMGI2MDExNTYxZWI2N2JiMjM3NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjlmNzk4MTkxNTExYzA4ZWRiMDA5YWRhZjU3NGE3OWZjMjhjYTVhNjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5In0=", "expire_date": "2017-03-18T02:28:18.620Z"}}, {"model": "sessions.session", "pk": "r7e8an3sidgngqslkkwddt8miix8sip0", "fields": {"session_data": "YWVlZGRiYjlkMTlkOTcwYzU2ZjQxMjEzZDIxMTgxZDI4ODY0YTcyMzp7Il9hdXRoX3VzZXJfaGFzaCI6ImM5MTE2MGRkMDk4NWY3NzJmZDhiNTA0MTg5ZWZjMThjYjcwMTJhYzUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzOCJ9", "expire_date": "2017-03-29T05:08:20.384Z"}}, {"model": "sessions.session", "pk": "r8z1jm570e8dhhy03omk40q1jn4zsyx2", "fields": {"session_data": "YzY0YTE3NDNkMTg4MDAzMDRiNTU1ZjZmNDIwMGM5MjY5NjY1NGE4MTp7Il9hdXRoX3VzZXJfaGFzaCI6IjlmOGY5ZDNlNjRmYmY1ZGRjZDY5NWE3MmE3OWFhNTRhZDEwZTIzNTUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxODYifQ==", "expire_date": "2017-05-28T04:00:32.706Z"}}, {"model": "sessions.session", "pk": "r9alzee9p9qz7kql8a87d62f8bkow4fx", "fields": {"session_data": "NzA1YjQ1NTliNWE2MTY1MmNjM2EzNTgxM2VjZTlkOTc3MDVmZDE0Mzp7Il9hdXRoX3VzZXJfaGFzaCI6IjI4NWY1NWQ2ODhmMTJjM2Q3YjYxMmZiZmJiNzQ4N2UyYTYxZmRkMTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjEifQ==", "expire_date": "2017-05-21T03:59:25.134Z"}}, {"model": "sessions.session", "pk": "rd564mpcmas0zs0h7noqk7qxctrsh5gl", "fields": {"session_data": "NWZmYmU0MzU5YmJlYWZmYmJjYjM2ODVjMzMyNDliYjNkOTllYjY1OTp7Il9hdXRoX3VzZXJfaGFzaCI6IjNkYTVkZTcxMmE2MWM4MDk0MjgxYjkwMjg2ZTdjMWZkMzcxMTYzNDUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzUifQ==", "expire_date": "2017-05-20T01:31:44.667Z"}}, {"model": "sessions.session", "pk": "rfpg6sxrqhai5dtbw1ojm751d1xqija5", "fields": {"session_data": "MDNiYTM5NjE0MjBiM2I3YzNhMTU4NWQzZGYxYTg2NmI5YzI5YzIwMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjIzNzg2YmQwM2ExNGM3ZDMzOWFkMzgyYmJiNTUxYjQzMzQwMDBiNDEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNzAifQ==", "expire_date": "2017-05-28T04:20:49.425Z"}}, {"model": "sessions.session", "pk": "rgb5tyb3vthp5f42vd4em556w747k6dc", "fields": {"session_data": "NGUzMDZlNWQ4NDdkMzg5NDcyZDA2YTU5M2Y4OGFmYzE2YWE4NjFlMjp7Il9hdXRoX3VzZXJfaGFzaCI6ImYwNmY4ZTczNjQxZDU5Zjk3YzJiYjAxN2U3ZTlmZDBlMjdhYWNkNjQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2MiJ9", "expire_date": "2017-03-31T13:53:20.221Z"}}, {"model": "sessions.session", "pk": "rh9hbynuhth4fv7gtbhqqnhm6ka424my", "fields": {"session_data": "OWU0Zjk2OTg2OWQ0MmRjZDFjNTRlYmRkYjBiNTM2MmFmYTUwZDBmZTp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiM2IzNDBiYzZjOTkxZjUxMjA1YmY1YWQ1ODM0MDU4ODBlOWZkNGU2NCIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAyNjU2NDUuNTc2NDQ1LCJfYXV0aF91c2VyX2lkIjoiMzkiLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZldVUSJ9", "expire_date": "2017-04-06T10:40:02.415Z"}}, {"model": "sessions.session", "pk": "rhqx5ysgb7go5e3y5v6h5tomzghfr5y7", "fields": {"session_data": "OTlkNWRiNWE0ZjU5MTg0NTFjNzFmYjJiMjQ5ZWNmMjAyZjE5ZGU1Yzp7Il9hdXRoX3VzZXJfaGFzaCI6IjVlYzJhNjlkMGYyM2M0YjM2OTU4MWM1ZWViZDY5NmM2NDg2MGExODgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTMifQ==", "expire_date": "2017-05-21T04:26:28.447Z"}}, {"model": "sessions.session", "pk": "rhvnv35tosx0x76zev7lriqj95ji14p7", "fields": {"session_data": "NWNmMTQxMGJjYzBmZTdmYWRjYWNmMTk2MzhjNjkzYjcwYWQ0YjU5ODp7Il9hdXRoX3VzZXJfaGFzaCI6ImJhZjY0NzIxYzY5MjAyYzk1OTAwMzQ4ZmEzZTk5MGExOWUyYjExNmIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzOTcifQ==", "expire_date": "2017-05-21T13:53:51.886Z"}}, {"model": "sessions.session", "pk": "rjl5ix9eouc2umocyhxp77hyl62coawl", "fields": {"session_data": "YjZlMjRjNGU2MTJiM2FhY2ExMTg1ZWEyYmNkY2VkYTNhY2ZlNzI3OTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg1ODY2MmZlOGE4NWE5Mzc2NDMwNjJiNTllZjczZDUwYWNkMWVmMDEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjcifQ==", "expire_date": "2017-05-21T04:38:14.837Z"}}, {"model": "sessions.session", "pk": "rkw3kndjs9spiec5soolr4cgx6vmxrd0", "fields": {"session_data": "NzJlNGRmOWQzMWZhOTkzNWI3N2ZhMTA0ZTUzMWFlZjQzM2U4OTQ2Yzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM4NzYyOTUuMTE2MjQ0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoickFYdyJ9", "expire_date": "2017-05-18T05:37:15.127Z"}}, {"model": "sessions.session", "pk": "rl58bdtqspwzf0urins5nzswk6e3derw", "fields": {"session_data": "MWFkZDkyYWFiOWMyNDk2ZGQ1MjFhMWM0YzY4YjMyZWEzZTVmZGM2Mjp7Il9hdXRoX3VzZXJfaGFzaCI6IjFhMTljMGVjMjZhODRlODAwMTQyNDZjNTUzNjA3ZjZjZjFlYThhMGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1NyJ9", "expire_date": "2017-04-01T05:38:03.291Z"}}, {"model": "sessions.session", "pk": "rlcrmtr2up5nwvqmyv98ui3i38mxk081", "fields": {"session_data": "ZTQyNTYwN2IxNjA0MzljYjZjMDIxYjY0MDhlMGVmN2YwZDkxNTAyNTp7Il9hdXRoX3VzZXJfaGFzaCI6IjIwZWVkN2E5YzAyNDFjMmE3ZmUyYWMzZDc0ZDAxZDJkYjcyNTEzMDciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDAifQ==", "expire_date": "2017-05-21T09:44:34.033Z"}}, {"model": "sessions.session", "pk": "rlwtczt0kcakprapcjlfhlxelk19v994", "fields": {"session_data": "YzA3MmJkMGRjYTY2OTVmOWQ5OGNlNDJjYTY3NGNlNWZmYjZhMzIyODp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg3ZTE3ZjU2NmE5OGRkYTYzNjY4Yzc4MjM2Y2Q3NTAxYzMzNmE0NmQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDIifQ==", "expire_date": "2017-05-12T06:11:02.988Z"}}, {"model": "sessions.session", "pk": "rm8kcdv6lsg6pfxnbwqyv18j4t63zkw3", "fields": {"session_data": "OWFlYTU3YTlhMGVkYjU4MGMzYmE0NzA2ZThkMWNjOWRlODE3MTRiYTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMyMDkwNDQuNTI1MzM2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoicTJGdiJ9", "expire_date": "2017-05-10T12:16:24.537Z"}}, {"model": "sessions.session", "pk": "rnkt3tc0glgds477lfh2v480nqjuclol", "fields": {"session_data": "NjY3MzE4MzAxZjc1ODFhY2U0MmFiNThlNTliODg5OTg1ZjE1NjEwMjp7Imxhc3RfYWN0aXZpdHkiOjE0OTEzNTMzMzYuNjMzMTE2LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-04-19T00:48:56.675Z"}}, {"model": "sessions.session", "pk": "rnuug6cop4797moqy81fn4r9cqis641f", "fields": {"session_data": "NTc0MjMwMzhmNzMxNmU0NWZiZTJlYWMyODYyMjIxNDM5NWE0NjE5Mzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAyMjQxMDguODI0MSwiX2RqYW5nb19jYXB0Y2hhX2tleSI6IlRnOGMifQ==", "expire_date": "2017-04-05T23:07:28.838Z"}}, {"model": "sessions.session", "pk": "ro4qrpgmrwk5p2pyo90xl8i5a4ymel4a", "fields": {"session_data": "ZTUyNGUzNjIzZTdjMTBlYmYyNzg2OTIyYWY1ZTU1OTNiMDdjNzM4Nzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDIwNzUuODg2NjIyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoicUd2RSJ9", "expire_date": "2017-03-30T05:26:55.894Z"}}, {"model": "sessions.session", "pk": "ry0wiwpiukq3bq3hulmf9xehqdzyn5d5", "fields": {"session_data": "NzVkZmJkMzNhYmY1N2NhYWQ0YjkzMDU0ODg5MmIyYzhmMDkyMDBlZjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5OTA0NTguMTQxNDEsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJmbktHIn0=", "expire_date": "2017-05-19T13:19:58.149Z"}}, {"model": "sessions.session", "pk": "rynbh3jvkxz3370fmiuds6ab8rficwvw", "fields": {"session_data": "NjMwYWExNGIxNWM4ODg1YmU5MDVlYTM4ZDc0NWVkOTE4ZGQwYTgzODp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDEwMDkuOTgxNjQ1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiVHRuayJ9", "expire_date": "2017-03-30T05:09:09.988Z"}}, {"model": "sessions.session", "pk": "ryxazc1x30h6v7dqwzwe7vajt1yub9e6", "fields": {"session_data": "YzE2ZmFlNTNkMzE5NjNlZWQ0OTcwYzFjMGFjMjM3MmI2NDA2ZTRlMTp7Il9hdXRoX3VzZXJfaGFzaCI6ImFkYmQyZmI2ZDBiYWY2OWRlM2VkNDNiZTQ2YTA0NDdjZDU0MmEzNDIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MDEifQ==", "expire_date": "2017-05-23T07:20:26.474Z"}}, {"model": "sessions.session", "pk": "rzh5duq43fd45dhcn3gq17gf6oo94hjh", "fields": {"session_data": "ZWY2MGY1NzAxMmQ5NDZhMzllNjdjNTZiMDAxMmNlN2NiMTRjYjMxMTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMzNzMwMjMuOTc5MzMyLCJfZGphbmdvX2NhcHRjaGFfa2V5Ijoic1BXciJ9", "expire_date": "2017-05-12T09:49:23.988Z"}}, {"model": "sessions.session", "pk": "s05xs4b2rafi4wpfpge10647fv4tarrz", "fields": {"session_data": "YWVlZGRiYjlkMTlkOTcwYzU2ZjQxMjEzZDIxMTgxZDI4ODY0YTcyMzp7Il9hdXRoX3VzZXJfaGFzaCI6ImM5MTE2MGRkMDk4NWY3NzJmZDhiNTA0MTg5ZWZjMThjYjcwMTJhYzUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzOCJ9", "expire_date": "2017-04-01T06:34:56.955Z"}}, {"model": "sessions.session", "pk": "s0ab2jkw3d90gb12wnvn8riq2zm1jv5s", "fields": {"session_data": "MGYzNzVlY2YzZjJhNmM3YWY1MDg2YWUwNDJhNDE1ODA4Y2YzZDgxMzp7Il9hdXRoX3VzZXJfaGFzaCI6ImE1YWVkY2JmOGRjYjIxNGRiYjJhMWYxMDYxM2RmMzUyOWJkZmE2ZTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTcifQ==", "expire_date": "2017-05-21T06:31:23.239Z"}}, {"model": "sessions.session", "pk": "s16wfrs34bwmy1ueetct7ydepnpesj66", "fields": {"session_data": "MmUzMTNkNzFkODdmM2Y2OGUxYzBjMzgzMDMxYmY5MDMxM2U3YWMxZjp7Il9hdXRoX3VzZXJfaGFzaCI6Ijk2MDkwYTk0NjA3YjFhMGI0NmRlZmE0ODM2MTc4ZGJjYWJiZmM3MTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNDEifQ==", "expire_date": "2017-05-11T02:33:00.563Z"}}, {"model": "sessions.session", "pk": "s2dy5givo4dzvl2wojeeo1g9ctmfftot", "fields": {"session_data": "OGNjNTQzYmZlOTIwMmUwMTA0MzUyMzBmYzBlZDA3ZDdhOWNiM2IwZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjBkZDIxZjhiNjY0ZWM0MDRhNWU0MjUwZGFjNjlmMDYyNmZlYjJhM2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTYifQ==", "expire_date": "2017-05-21T04:10:18.140Z"}}, {"model": "sessions.session", "pk": "s5urmgr2zsx5j0bb22y1ke0i7bvjhjvw", "fields": {"session_data": "OTZhYzU1MGI2NDk4MjdkMjhkOTI2NTBmYzFjMWY1NTMzNzZlYThjOTp7Il9hdXRoX3VzZXJfaGFzaCI6IjA4MDMxZDZhZjM1ZjNiZGQ1YWViNzMwZWE0YTMwMDgwYzExMDJmMTYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNTAifQ==", "expire_date": "2017-05-28T04:00:17.677Z"}}, {"model": "sessions.session", "pk": "s819e46q766t5j7wompgga8nml0811tm", "fields": {"session_data": "NTE5YTNlNmU5YmZjNTVhMWRmNTgwMTc0YzNiZGE5ZjVmYzQ4MTU2NDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTE0MTE3MTUuMTEwNjI5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiMmRucyJ9", "expire_date": "2017-04-19T17:00:55.117Z"}}, {"model": "sessions.session", "pk": "s8q7bloec2zdqwfgyz1imriuxisrnhe4", "fields": {"session_data": "YWE4ZmQyMzU2OGFkNmI0OTRhYWJkMzZmMjNmYzNjN2I5ODQ3YzMyYzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxNTM0NjIuMTkwMjUxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoibWJ2eiJ9", "expire_date": "2017-04-05T03:30:02.228Z"}}, {"model": "sessions.session", "pk": "s970lyo2w89zssvg45yuqqzv82h3zbs4", "fields": {"session_data": "M2U4ODEyNjg3N2Q4NDdhZWE5OTBiOGNmMDc3Zjc4M2IwZWM3MDJmNTp7Il9hdXRoX3VzZXJfaGFzaCI6IjNkYTYzYTg5NjNjNTEyODkwZTZkZmQ0MWFhN2VjNTQ0NTVjZjhiMjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMCJ9", "expire_date": "2017-05-21T11:10:30.139Z"}}, {"model": "sessions.session", "pk": "s9ebzmgo8c5c8a11vnujm1r2x5xt05y1", "fields": {"session_data": "MjM0ZjBiOTIyZWIxOTE2NTllMjBiOTIwYzQyODliMzFkNGRjMjhiMjp7Il9hdXRoX3VzZXJfaGFzaCI6IjI0Zjg1MmZhYWRkZWE0MmQ3YWYzMjJmNzVkOGZiYjNjMDFkN2E0MmQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNjMifQ==", "expire_date": "2017-05-28T04:12:52.460Z"}}, {"model": "sessions.session", "pk": "sc7xjr0jj87rfs7gj11itu3h9s40l1ed", "fields": {"session_data": "NzA0ZWIxOGY4MTcxOWY1MDg2ZGRlMzA4ZjQ1NDg4ZDI1NzNkZjM5Mzp7Il9hdXRoX3VzZXJfaGFzaCI6Ijc3ZWM1NWM4ODdmOGM2MjgzZTMyYjhjY2IyNTk1OTRiMGI5MjkzNDciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNzYifQ==", "expire_date": "2017-05-28T04:07:47.900Z"}}, {"model": "sessions.session", "pk": "sfoworvc5brwrhsdt10lo7y9tgzp3jwd", "fields": {"session_data": "NDhmYjAxODJkNTkxODY3N2NmNzkyNTYzODM1MzdlYTVkYTIwY2YzZjp7Il9hdXRoX3VzZXJfaGFzaCI6ImZhZGMyOTE2YTE0OTUwNDY3YzE1MjdhZTY4YTcyZDg3MGVkMjQxOTYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4MiJ9", "expire_date": "2017-05-19T08:21:52.827Z"}}, {"model": "sessions.session", "pk": "sfu10js7i0tst6izogvfcc7y0vbq97io", "fields": {"session_data": "MTU4Yjg5ODRlN2YzNTZiYzNmZTg5NGI3NTNjMDQ5N2U0NjQyOGM3ZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjMxODk5ZjUxZmVmNGZlMWU1YTk4MmQ5NTQzYzM2MjNhYjRmZTY5NWEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMTIifQ==", "expire_date": "2017-05-19T12:37:55.586Z"}}, {"model": "sessions.session", "pk": "sgy00c5344gozj07fo2vabr7wazhgvih", "fields": {"session_data": "ODJiNWZhMzA2NTBiYTlhMjU4ZTRmOWZkNzU1ODk5OGNiZjZmZDQxNDp7Il9hdXRoX3VzZXJfaGFzaCI6IjVhYjlmZmRjMmNlZWFiY2M0MmE4MmMxYTQxNmVlOGY0OGUyMmRkY2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2MSJ9", "expire_date": "2017-04-15T05:02:30.285Z"}}, {"model": "sessions.session", "pk": "si433yp5p2hsi3gptjdt1uvasgnvdrav", "fields": {"session_data": "MThmMzQwMDQ5ZGFmYzY4NjYwNTJiZjI3ZDQ4ZjAzODIxMjgzYjcwNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjI4MDk1MzEwNThhNDZhMjYxNTZkZGUyNzA0OTdhMWZlOTI0MzI1ZTYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2MyJ9", "expire_date": "2017-04-05T03:26:22.395Z"}}, {"model": "sessions.session", "pk": "sisy3mk2l7lno1johx0neoyreu72p7ss", "fields": {"session_data": "Y2YzZTg4NzQ3ZTU1YjcxNjFjZWIyNGMwNDNiMjI3YTQ2MmY1OGQxZjp7Il9hdXRoX3VzZXJfaGFzaCI6Ijc2MjQ4NjFmYzNiYWEyNjFmMWM2N2U5M2E3MGFiYzk0ZDNhNmQ1ZTkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyODYifQ==", "expire_date": "2017-05-18T10:05:39.130Z"}}, {"model": "sessions.session", "pk": "sj4hbkvhobsjq08gnsekeb3ki66v4qno", "fields": {"session_data": "MWIzNzczNTZhM2I4ZGFhMzAwMDliOWM2NmI1YzE0MmRiYTZlOTJkMzp7Il9hdXRoX3VzZXJfaGFzaCI6ImU4ODIzMGRmNGE4ZmZkNTg2ZWFiZDYwYWNlMzI4OGE4MjI4MWY1NTkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4NCJ9", "expire_date": "2017-04-01T05:34:05.214Z"}}, {"model": "sessions.session", "pk": "sj521kklbx79xhdn5zq9macd5jv8qmud", "fields": {"session_data": "Y2IxODA4YTk0MGFlMDE5N2FjM2VlNTc2YjYzYzZmOGNhODRlYTE2MDp7Il9hdXRoX3VzZXJfaGFzaCI6IjAyNGI3MzA1NDg3NDRmZDA4ZmRmODFhZTUyODg2YzFjMTU5NTMwMTgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjQifQ==", "expire_date": "2017-05-21T02:48:03.145Z"}}, {"model": "sessions.session", "pk": "skckmrio9btakxw7wghxnei0v0cbpgg2", "fields": {"session_data": "NmE4OTkxMjY2NTcxMTc3M2M0MTE1OGUwMWQ2MTg5NDliZWQxNWJlOTp7Il9hdXRoX3VzZXJfaGFzaCI6ImExZTI2NjE5YTliMDMyOTFmNmY4MTFiNGU0MDE3OTJiMmMwNmVhNzIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjUifQ==", "expire_date": "2017-05-20T05:13:21.986Z"}}, {"model": "sessions.session", "pk": "sklc3h8wqadisb9vapnmjxj618dxyq1a", "fields": {"session_data": "ODg2MjY0NzVmNzk0YzFiZDExNzQ1NTRiMTY2MTA5ZjUyZWY2YmQyZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImRlZWYxZWM0NmY1NTNmOWMyZGE0MDI4ZmVhMjMwYzVkOGQ2NDVmYWMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2NyJ9", "expire_date": "2017-04-01T10:46:25.853Z"}}, {"model": "sessions.session", "pk": "sm2tx4svcw2vnd8d7dtbsufwgvk615f9", "fields": {"session_data": "MTgzOGQxNzE3OWViMTQ3MGM4NDJmMTRlNmExYTZhM2RjY2ZmMzQ3Zjp7Il9hdXRoX3VzZXJfaGFzaCI6IjFmMmNlZjZjMzY3YTY2YjFiOGNkYjAzMjU5NzA3OTFmNTZiY2Y1YzgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNTYifQ==", "expire_date": "2017-05-28T04:03:25.392Z"}}, {"model": "sessions.session", "pk": "sm4wqb4h1htm4jnbs3n9uok5i6z7b9vy", "fields": {"session_data": "ODU4MzhjNmJjYjhiMGQ4Y2I1Yzg2MmJhOTBmNzQ1NzI5Njg5OTczZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjkxYjk2OWU4ZjY2M2UwNWY2NzQyMGY5YWM0Y2NhNjg0MzY5NDM2NDMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzQifQ==", "expire_date": "2017-05-12T09:01:31.902Z"}}, {"model": "sessions.session", "pk": "sp2w0ldokqtwh3g8z21ovmmn66gmr8cw", "fields": {"session_data": "NjA1Y2M1ZDYyMjc2NTNlNTFkZjI5OGQ0Y2MzYWY1NTY5MjEyMmMzNDp7Il9hdXRoX3VzZXJfaGFzaCI6ImIyNGI0NmM3OTQwYTlkMmEyYzY5ZWNlMjY2MzBkZjg0MTMwYTQ2OTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjkifQ==", "expire_date": "2017-05-21T03:58:10.882Z"}}, {"model": "sessions.session", "pk": "sp5mk8pul2x6ymxnhqjng1nytz9pi9yk", "fields": {"session_data": "MTdhMWQxYTkxODFmODVmZThkMjkwZWQwNTQzOGY4NWUzZTI1YzRiYTp7Il9hdXRoX3VzZXJfaGFzaCI6IjlmZDRjMmQyZGZiOThkODFlMmQxOTBiZjM0NWRjM2NmZGIyMDU3ZTMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjIifQ==", "expire_date": "2017-05-21T03:59:31.466Z"}}, {"model": "sessions.session", "pk": "srwh22iiyb4zssb23towrv7pi66r53mq", "fields": {"session_data": "NGMwNTY3YzE0MGE1ZjZmZDQ4NDU3ZmVjMmIwNjE1ZGI3NzEyNzAxMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjllYzY5ZmY0NjE0NzIzNjM1NDAyM2ViN2I4ZDg2OWIxOGY0MGI5ZjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzIn0=", "expire_date": "2016-12-25T08:32:16.938Z"}}, {"model": "sessions.session", "pk": "ss4qrbwfhzg8jnonh7u0r5r09w1iqmst", "fields": {"session_data": "NmFmOGQ4M2JlNzRmOTA5MGUwN2RjODBjN2M4NTlmYTc4ZWQzZTk2ODp7Il9hdXRoX3VzZXJfaGFzaCI6IjE3NTdhOTRjNTdlNzlmYTAyYjk4ZGYyNDVlMDFjYjQwODIzY2JmMDgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzODcifQ==", "expire_date": "2017-05-21T04:33:08.141Z"}}, {"model": "sessions.session", "pk": "ss8jwpz16141eairsj8nueyty8hky713", "fields": {"session_data": "N2YyN2Y2NjdmOGNhZDA4NTVjM2YwMGRmOTQ4MzRkOGEyNmVjYjgyNzp7Il9hdXRoX3VzZXJfaGFzaCI6ImI5NzgxYmViODFlN2Q0ZDg0MmRjMmQwMjRjNGUxOTc0ZTJmNTZjYmEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNDkifQ==", "expire_date": "2017-05-28T04:00:19.582Z"}}, {"model": "sessions.session", "pk": "std2d7banf0shtpz719xzbn762poos1b", "fields": {"session_data": "ZmE0ZTNmNjk5NGI3OWFhZGE4NDg5MTI4NGEyZTkyNzhlZTAzOWQyYzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQxNTI3MzEuODkxODQsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJQY2RDIn0=", "expire_date": "2017-05-21T10:24:31.901Z"}}, {"model": "sessions.session", "pk": "sud3jt0ery6jv92cxj3t14eqgpemo543", "fields": {"session_data": "Mjk5MzZiNjQzMjM4ZjUyYmNmYmJjODUzYTg1YWI3MTZiZGRlOTBlYjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxNzE3MjIuMDkyNjAxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiQ0d3TyJ9", "expire_date": "2017-04-05T08:34:22.106Z"}}, {"model": "sessions.session", "pk": "sv853glae8v4061vho6tbmuddo4ap0mi", "fields": {"session_data": "NzAxNTBkOGEwYTdlOTcwMThmMjI3Njg4ZTIyMGViZDVkMWU1MzY3NTp7Il9hdXRoX3VzZXJfaGFzaCI6ImU4NGQ0Y2U1YjljZjA0YjAwY2RkZjUwNjc2YzQ2ODZlNzNjNDEwMGUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMTQifQ==", "expire_date": "2017-04-20T13:28:18.693Z"}}, {"model": "sessions.session", "pk": "sygrabha3twez70o7j5gdds15g2jn9w7", "fields": {"session_data": "NjQwODA0YTVhOWRmODk2YjE1NGNiNzY0OTAxYzA2MWVlMDVmZDA5MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImM1YjBhYTJmYTk3MDViMmJmMWM4OWZhNjYwOTUxMTEwMmIyN2U4NjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNTkifQ==", "expire_date": "2017-05-28T04:01:22.182Z"}}, {"model": "sessions.session", "pk": "szd9vny3oqm6hu2yz8srxvs4n1cnyesw", "fields": {"session_data": "OTBkM2Y0NTE3OWNlZTVlZjBhYWY0OTY3ZDNmZDIxZmU2ZjAyZjdlYTp7Il9hdXRoX3VzZXJfaGFzaCI6IjhlNmU5YTNjZDE4ZGIyOGNlM2U4MmVkZDJmZWFhMDJiZGVkMmRmZGUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNDUifQ==", "expire_date": "2017-05-23T13:43:17.967Z"}}, {"model": "sessions.session", "pk": "t2nrqhhrotkpygrvlniu883wthdhxys9", "fields": {"session_data": "YWNlNzUxNWZhZWNmMzdhMTI4NGJlYmI3NjUwYTBhMGMwYjgyMDk4Yjp7Il9hdXRoX3VzZXJfaGFzaCI6IjYyMjc0ODFmYzQ5NDI4Yzg2MzkyNTc0ZTUwNzYxZTkxMDYzMTk2YTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMTAifQ==", "expire_date": "2017-05-16T10:00:53.818Z"}}, {"model": "sessions.session", "pk": "t38sj9og30mgyawtlclri495qe7767bk", "fields": {"session_data": "MGM1NWZiOGNlZDNmZGQ0MDQxNzM1ZmE5ZDA4NWRmZWUyMzg3MGFlZjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5OTA0NTguMTE4MjMxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiNXBoMiJ9", "expire_date": "2017-05-19T13:19:58.133Z"}}, {"model": "sessions.session", "pk": "t5h8tl6jy3mypuk4uqc0qvj0rhet8jj1", "fields": {"session_data": "MjRmYzZhZWU1ZjVhOTQ2MDgzNjRhOTk4NWIwYjMyODMzYWYxNDZlOTp7Il9hdXRoX3VzZXJfaGFzaCI6ImY3ZDllYTA2MDYxNWNhOWE5M2QzNmFiODFhNGQxN2ZiNzZlZDIyNTIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMTgifQ==", "expire_date": "2017-04-28T03:23:27.504Z"}}, {"model": "sessions.session", "pk": "t6q3bv97rtywxl7udqof06h1hwstsusr", "fields": {"session_data": "NDgyZjk1YTdlMzcwZWU3ZjIzNmEwMWRhOTY4NDA1MmIyMDg0MDYwZjp7Il9hdXRoX3VzZXJfaGFzaCI6ImI5OTBhMTZmNmFlZDEwNTBiNWIxYmNkY2MzZGRmZjViN2FiZWUzYTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5MCJ9", "expire_date": "2017-04-01T07:21:23.134Z"}}, {"model": "sessions.session", "pk": "t7cbatf1l92l1btb2bx98jdg6hbvhmxl", "fields": {"session_data": "OGQyNTQ4ZTAwNDNhZTJiNDUyNzZhNmFlZjdhZDVmNWE2MTRiZmI3ZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjljNTcwNzg0Y2QxYjQwNzY2YTAxYmQ1MzE4MGQ4NGM3YzIxMjE2MWIiLCJfYXV0aF91c2VyX2lkIjoiMzI2IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQifQ==", "expire_date": "2017-05-21T04:07:37.566Z"}}, {"model": "sessions.session", "pk": "t84038shxc6h5a9ozai92eb2oi7bgd3y", "fields": {"session_data": "ZmUwMjIyYjE0ZjkxMWE1NGVjYWFiOTExOGM4ZWJiZWM5MTNiNTBjMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjQwM2I2ZTQyMjI0YjExOWY0YzM1NGY2OGI5MDdhNGIwYWVmYTM3NjciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTUifQ==", "expire_date": "2017-05-22T00:25:59.017Z"}}, {"model": "sessions.session", "pk": "t8ogck2epsr7hk77707ij37z5v8holz5", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-20T07:35:28.385Z"}}, {"model": "sessions.session", "pk": "t93x9jpcmqjzsy9cwwbukiaeh5yee48h", "fields": {"session_data": "ZGYwYmJhY2M2MWViZTVjMDQ1MjVkNjVkMDQ2M2EwMGMyNDM0Yzk2YTp7Il9hdXRoX3VzZXJfaGFzaCI6IjZlMmZlZmQxYjcwZGM2MmRjOGM0MWM0MDEyNGMzMDk0MThiZWUxZTgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzQifQ==", "expire_date": "2017-05-20T01:25:24.222Z"}}, {"model": "sessions.session", "pk": "tao5nkxfqws40omoxw7nuj6tp35obz0n", "fields": {"session_data": "M2I4Yzk1NGM5ZGZkN2RlYTFjZDMzMjcwMjM0OTNiMjVmYTRkMjhjYzp7Il9hdXRoX3VzZXJfaGFzaCI6Ijk1MTNiMDU2ZTNhOWZjMjZkOThlZjAxYzJjMjQ5OWYyMzBlYmQ0NzkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1In0=", "expire_date": "2017-04-20T15:49:43.062Z"}}, {"model": "sessions.session", "pk": "tb4vlr254m01if8gknyj26i99v4bzf3f", "fields": {"session_data": "ZDcyOTBlOWFkYmM5NDM0ZTc1OGI3ODE3ZDc1MWRiYTZmMDY5N2Q0MDp7Il9hdXRoX3VzZXJfaGFzaCI6Ijc2ZGU0NzYwNjZkYjVjNDE3ZDNiOTMzYjZlZTBlNDQ5YmM5N2Y3YmIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNDMifQ==", "expire_date": "2017-05-21T09:41:21.910Z"}}, {"model": "sessions.session", "pk": "tc6861ug9zmi2zv6b81ls3js9jywenoe", "fields": {"session_data": "MDFiMmQ0OWFiODEzZjBjOThlZDI5YmY3NGQ3ZDhhNzM2YTYzM2IzYTp7Imxhc3RfYWN0aXZpdHkiOjE0OTQ3NTI5ODEuNDE5MzM5LCJfYXV0aF91c2VyX2hhc2giOiI1OWYwYjAwNDNiMTNmNTFjNmU1OWQ1YTUzNzg5MTUwOWE2NDZlZWM4IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-05-28T09:09:41.420Z"}}, {"model": "sessions.session", "pk": "tc9ro28ebjo6tidlvi7qyf9ugtqwbrpd", "fields": {"session_data": "MWM1OWE1ZWFkZDAwY2UyMTVmNmZiMDZmZTYxYjRjZGMwMDkyN2JhNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjIwYjNjYjUyMmUyYzJlZDJjYWFlNDRkMTE2MzljOTE5YmM1ODFmNWYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjgifQ==", "expire_date": "2017-05-20T08:51:43.736Z"}}, {"model": "sessions.session", "pk": "td0n9r77sj0hlkcacvohks6zpwv2og9r", "fields": {"session_data": "NTA0MGJkOWFiOTFmZjI3NmFhMmMwMDgwNWZlMDhjZjU4NGVlZDE4ZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhYmI5ZWZjNmYxNjdiY2MxZWQzYWNiZGVmOTNhMWRkZGMxYzZiMmQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjkifQ==", "expire_date": "2017-05-28T02:14:19.906Z"}}, {"model": "sessions.session", "pk": "tda69i4661s01pydgcanqifjeqbyjf73", "fields": {"session_data": "ZGUyNjBhOWRiNmI5YjUyODlhNGRmZWUyZTM4MTBkMmRhMWQ2N2ZiYTp7Il9hdXRoX3VzZXJfaGFzaCI6IjYxMDU5NDgyOWYzZjJmNzdkODgyNDdkOWNjNzIxZGEzOThmODQyNjUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4MiJ9", "expire_date": "2017-04-01T05:09:08.480Z"}}, {"model": "sessions.session", "pk": "tg0u7qe6ub36hw3smp93vg14grimsn4z", "fields": {"session_data": "MzRiNTEzYWE1MWI5YzQxMGY1OWFlMGI2MDExNTYxZWI2N2JiMjM3NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjlmNzk4MTkxNTExYzA4ZWRiMDA5YWRhZjU3NGE3OWZjMjhjYTVhNjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5In0=", "expire_date": "2017-03-29T06:04:13.318Z"}}, {"model": "sessions.session", "pk": "tgkf33cgf4daihuhll3o18o8i3nz5io3", "fields": {"session_data": "YTAxZGUxNzhiZTZmMTNiMTBmODhlZjdjOGJlZDkyYmRkM2NlNDZlNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjVkYmY2ZjcwMjdjMzQ1MDY3N2E2YTdhYWJiMmJkZGM0ODBiZDhhYzciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMDYifQ==", "expire_date": "2017-05-21T07:23:27.862Z"}}, {"model": "sessions.session", "pk": "tlp0t6oj6psbp55wnwich8yjka1nvu0b", "fields": {"session_data": "YTE4N2RjMjhjZjAzMDcyZjMzMmZhZDdhMDhlOTVmZmRkNjVhMTZiNzp7Il9hdXRoX3VzZXJfaGFzaCI6ImE2ODFmZmNjZTE3MTE3ZjczMWZmZWJlMjI0ZTYzNmNhNzFlOWFhODkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTAifQ==", "expire_date": "2017-05-28T03:45:30.742Z"}}, {"model": "sessions.session", "pk": "tmgj9m4pjl9krdprzi284bst7w842mst", "fields": {"session_data": "YzU0MjA2ZDFmN2VkMDI3NjUwYmMwZWVlMWE4NzMyYTVlZTA5MWI4Mjp7Imxhc3RfYWN0aXZpdHkiOjE0ODk3NDU1NTUuOTM3NTQ2LCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-03-31T10:12:35.945Z"}}, {"model": "sessions.session", "pk": "tojoma0u0mzkmryi8q0q3hz6r0kjzcl7", "fields": {"session_data": "YjIxNTFkMmY0MzFhNjc3M2I5NTEyNzY1N2NjZGU1ZmE3NDJiMmYzODp7Il9hdXRoX3VzZXJfaGFzaCI6IjNhM2RmNWViMDdiZWFkY2U5ZTkzNzc1NmMzMjdkZTZjM2FjNGViNzYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMTgifQ==", "expire_date": "2017-05-21T11:39:43.100Z"}}, {"model": "sessions.session", "pk": "tppmnw24d10mbljj9kram5gkpubcf0yl", "fields": {"session_data": "YTgwZDY1ZjQwNWVjM2NiMjIyN2QwNjIzODU5ODJlMzYyNzQ4ZmM3NDp7Il9hdXRoX3VzZXJfaGFzaCI6ImQ5ODEyNDU0YTQ2ZGE1NzRmZDM5YjkyMzEzODVkNmFjYzg5M2UyNjciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNDEifQ==", "expire_date": "2017-05-21T04:15:13.298Z"}}, {"model": "sessions.session", "pk": "trblfn78cdeif97r7b0oe82fjaxqrdqa", "fields": {"session_data": "M2E3ZmJjYTNjODgxMTM1YjBhYmQwM2E4NzEwMThhYWJkNjA0YmZhODp7Il9hdXRoX3VzZXJfaGFzaCI6ImRjNGRmZTkyYWQ5MjIzZjMyMTdlYTYyYTkzZDE0NTRlN2U0ODI3NTMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDgifQ==", "expire_date": "2017-05-21T11:46:22.268Z"}}, {"model": "sessions.session", "pk": "trhjcip6vzhi2rhljd7e0h4t4focyubx", "fields": {"session_data": "MTM5ZGVhM2ZjNjJlMWEwMDFmYjk4ZDg2NzFkMTRiMDU4YjM3NWU0Nzp7Il9hdXRoX3VzZXJfaGFzaCI6IjI1ZTA1YjgwYTBmMWYwNWJjYjc2MTQ3MTFmZTAxOTYwYzU2ZmIxNjkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5MSJ9", "expire_date": "2017-04-09T12:26:17.027Z"}}, {"model": "sessions.session", "pk": "tshfyxtbk7yp29lv84faoswmf1vfs0f3", "fields": {"session_data": "OTFhYjkwMzg3MDAzMDNjYzkyMjZkZjNkY2IwNzIxMDcwZTI3NGU4NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjdjMjcxMmI4M2VhYzRiODRkZjJhZWFkOTQ3ZWVlMjgxY2I3NzY2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4MCJ9", "expire_date": "2017-04-01T04:29:03.180Z"}}, {"model": "sessions.session", "pk": "tt7yyv09jnyghw5rtq5cj3ocfimfe1ah", "fields": {"session_data": "MjMyNmVlMTZkM2E2NTEzYWM0MTJhZTRhYWYwYTUzYzkxNGY0NGJhODp7Il9hdXRoX3VzZXJfaGFzaCI6IjBjMjdlOTM3NWFlMzVjMzliNTM5YThhYmM3OWFlMzc5YTY1ZTkwODEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNiJ9", "expire_date": "2017-04-09T07:48:37.707Z"}}, {"model": "sessions.session", "pk": "tv4hyyzo1jl0iuf9etao4q6g9bhb9ghs", "fields": {"session_data": "OTk4NzYzM2Q4ZDYzYTdkNTFkYTU3NzA0ODdjNmZhMGY5YmMwNDMxNTp7Il9hdXRoX3VzZXJfaGFzaCI6ImY5MDhkMzYwYzMzNjVjZWZiMjY3Yjk4ODhjZjg2M2Y4NjIxZjBhMjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0In0=", "expire_date": "2017-04-25T04:09:21.043Z"}}, {"model": "sessions.session", "pk": "tvcrusyzr04vgmx7cljlnk5i2qefcihc", "fields": {"session_data": "ZWZiZWNiYjg2YjM2ZmVmN2MxNWU4YWNjZDRhNWM3NGJmZmEwNzJiYTp7Imxhc3RfYWN0aXZpdHkiOjE0OTQzMDMwNjguNzkwMjM1LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-05-23T04:11:08.827Z"}}, {"model": "sessions.session", "pk": "tw9ao58w1ogqremou1to0rt5syfx9dxg", "fields": {"session_data": "ZWQ1ZGIyYTgyMGFkMWUyNDI4MWFmNmNjZWNlMjQ2ZTEyMmI3NWEyNDp7Imxhc3RfYWN0aXZpdHkiOjE0ODk4OTY5MTguMjg5OTE1LCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-04-02T04:15:18.309Z"}}, {"model": "sessions.session", "pk": "twm0004yun2e45bd7z6xs9u9fv113lsy", "fields": {"session_data": "MWQ0Njg1YjIzZTIzM2M1NzYwZjZhOWY1YTczMTkwYzA4YjRjNDVhZjp7Il9hdXRoX3VzZXJfaGFzaCI6ImVmOTI5YzhhOTc0N2YxNjg5ZTRmZWNhMTc5ZDllMTFkMDk3ZTJhYTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyODgifQ==", "expire_date": "2017-05-21T04:09:15.398Z"}}, {"model": "sessions.session", "pk": "tzedti22v678qxbxfy8klxa1hxg5flr1", "fields": {"session_data": "MjA0NGJlZjczYjU0MDZhOGJlNjJhMTgxODAwOGNiOTE4NDc0YTM5Nzp7Il9hdXRoX3VzZXJfaGFzaCI6IjM0MzIyMjBkZDI5YmJjOGFlYmUzMjUzNTBkYThjYWZiZjkwMjcwM2EiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNzIifQ==", "expire_date": "2017-05-21T04:08:03.953Z"}}, {"model": "sessions.session", "pk": "u0git9r4a748vyzmba3brqq3clukafio", "fields": {"session_data": "NTllYzk1Y2VhYzA4MTY4YWQ4MjlhZTc0NWU3YmY4YmYzNjRmZmRiODp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM4NDEyNjEuMTk3MDc1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRzczaCJ9", "expire_date": "2017-05-17T19:53:21.206Z"}}, {"model": "sessions.session", "pk": "u0w946zch8lh0ibu4p0fqp992kehg7re", "fields": {"session_data": "YjNjOWY5NzI3YTkzYzEwZTFmZDlmZWRiZjY0NzU2OThkMWMxNmQ5NDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5OTA0NTguMDI5NjY3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiQ003ZyJ9", "expire_date": "2017-05-19T13:19:58.061Z"}}, {"model": "sessions.session", "pk": "u3nvs00z4xs68kff2jxi7wp1r4wxxb55", "fields": {"session_data": "ZWIyZGUzNTZhOTIzZmIxMGVkNTQ3MTc4ZjhjODlmNzEzZjhiNGJmYTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijc2MzdkYThmMTMyOTQ0ZjA2M2NlOGJmODVmMDlhZGNlYzkxM2EwNGQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjEifQ==", "expire_date": "2017-05-21T06:15:33.418Z"}}, {"model": "sessions.session", "pk": "u414yvrqcvgl65bq9b8bbyszlm8k5i5h", "fields": {"session_data": "NzQ0MzMzYjg1MTU4ZGE3OWI2NTk0MmI4Y2I1OGJkYWY2MTY2ZGIwMzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5ODg0NDkuMDQwMzEyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiQWVXRSJ9", "expire_date": "2017-05-19T12:46:29.066Z"}}, {"model": "sessions.session", "pk": "u6nakjt6v4uijdptw8b00weatwu3qxqv", "fields": {"session_data": "OTNiOGQ2YzhiYzdhYWVmZTQxOTk5Nzc1Y2JjNmY5ZmEyOGI0ZDAxYzp7Il9hdXRoX3VzZXJfaGFzaCI6IjFkMTNiNDA3ZjViMjUyZDFjNDI2NWFlNWQzODM1NmQ1ZmQwM2Y0OTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MTQifQ==", "expire_date": "2017-05-25T06:28:50.061Z"}}, {"model": "sessions.session", "pk": "u6oxr1ymf8exhjl86oz551k2n8x3ecbl", "fields": {"session_data": "OWQ2YzZiNTA4YzIwMjE1NTAxY2QzNGM0MDNiYTViMDdiOTI0ZjAzMTp7Il9hdXRoX3VzZXJfaGFzaCI6ImIyNjJlMTQ3YzMyZGIzOGY5OTllZmEzNGQ2N2Q0MDMxODlkMTA4ZmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0In0=", "expire_date": "2017-01-24T05:56:29.859Z"}}, {"model": "sessions.session", "pk": "u9oeoushv5wgjsrryfukbdeaiix5lj5x", "fields": {"session_data": "ZTU4MmU3OGQ4NzQ0ZWM5YWZhM2FkMDE0ODYwYmI2NjU5OWZiNzMxNTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg2NzFhNjM4NjM4NTUzZGQzYzBkMDYyMWU4OWY1YmMzZTc1M2Q3NWUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzkifQ==", "expire_date": "2017-05-21T04:15:08.604Z"}}, {"model": "sessions.session", "pk": "ualej79wq5qouq31lxjk1mlc7yqk0r31", "fields": {"session_data": "YWNlNzUxNWZhZWNmMzdhMTI4NGJlYmI3NjUwYTBhMGMwYjgyMDk4Yjp7Il9hdXRoX3VzZXJfaGFzaCI6IjYyMjc0ODFmYzQ5NDI4Yzg2MzkyNTc0ZTUwNzYxZTkxMDYzMTk2YTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMTAifQ==", "expire_date": "2017-05-21T02:32:44.639Z"}}, {"model": "sessions.session", "pk": "ucsu12u11arhnpsrzznfe2lwy57tnxku", "fields": {"session_data": "MDZiNzI3OTU5NGFkZTAwOGNjNzMxNGMyMDBmZmQxZmQ2YzI0YTY1Njp7Il9hdXRoX3VzZXJfaGFzaCI6IjJmNTBkZTUwNWY3ODE3ZDQ0YTE2OGQ1MDVjODdhYzE4MjY4YTQ4YjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxODMifQ==", "expire_date": "2017-05-28T06:38:15.143Z"}}, {"model": "sessions.session", "pk": "uczcnzacvvcgdulyqfh1hod59jazupk4", "fields": {"session_data": "Njk5M2YyNWRlMDk0MjllMzM1MjU1MGM4OTA2MjY2YTE3Y2E2MDk4NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjQwMzQwNDdkMDkyZmYxZTBhNzVhNTk5OTNiMWJhNWIyZWVhYWI2ZGEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNjcifQ==", "expire_date": "2017-05-21T02:44:07.382Z"}}, {"model": "sessions.session", "pk": "ugr3x7vgvy7oycdohdut0ybtfzztiakx", "fields": {"session_data": "OWI4NWE4Y2RhMWRjODUxNTU3MjBiYmVkMDhiODQ1MzE4OTAxOTQzNTp7Il9hdXRoX3VzZXJfaGFzaCI6IjVlOGExMGZiYWJjNjhmZjJmZDZhZmM2N2ViZjg4MmY2MmNjMDNhOGYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTkifQ==", "expire_date": "2017-05-21T05:06:09.147Z"}}, {"model": "sessions.session", "pk": "umoed1jtdhyx48gv18xw72q84t44atcw", "fields": {"session_data": "MTU1ZmI1NDEwYTlkMmVmYjE0Zjg4MTFiNzIxNGM5MjAzZjllNDU4NDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk1MDEyNDcuNjUyNzcyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoieFdHUyJ9", "expire_date": "2017-03-28T14:19:47.662Z"}}, {"model": "sessions.session", "pk": "umrinygq4umlzkajuwacu1866cjf6cru", "fields": {"session_data": "NTAyNmYwOTQ2Yjk4MzhlZWY5YTBmZmJlODdhOGQ1ZDgxZTM5NWUyZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZiNTAwMTQyOTBlMjAzNWY2MjkyYTY1NzEwYjhhZGQ5OWNlNGVmNmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2OSJ9", "expire_date": "2017-04-30T11:19:45.792Z"}}, {"model": "sessions.session", "pk": "uoic65m86cxca5r7redarkse4dzkakah", "fields": {"session_data": "NTlkMGU5ZDZmNTk4MWExZjRmMjQ2YzAyYzkwOGY2NDUzNjYzMDMxZTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQ3MzIxOTEuOTQ5ODY5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiVnRGYiJ9", "expire_date": "2017-05-28T03:22:11.953Z"}}, {"model": "sessions.session", "pk": "up1m2rluv395bn8bihj85rokb0a30o7o", "fields": {"session_data": "YzY3NDVmM2I1ZmEyOTAwZDA1OWRiOTg1ZWU3NTU2NTYyZmM3ZGRhYjp7Il9hdXRoX3VzZXJfaGFzaCI6ImFmMWMwYTljOGNkNThmYjliY2FlMTc5NGIzNTRhYzZiYjRhZGEwYTUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNTAifQ==", "expire_date": "2017-05-20T13:51:50.816Z"}}, {"model": "sessions.session", "pk": "up2t1sdf3quue3kppslwwdfapwa3dfif", "fields": {"session_data": "YzY3NDVmM2I1ZmEyOTAwZDA1OWRiOTg1ZWU3NTU2NTYyZmM3ZGRhYjp7Il9hdXRoX3VzZXJfaGFzaCI6ImFmMWMwYTljOGNkNThmYjliY2FlMTc5NGIzNTRhYzZiYjRhZGEwYTUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNTAifQ==", "expire_date": "2017-05-21T09:29:51.884Z"}}, {"model": "sessions.session", "pk": "us7rha9jo2dkgiyekab3b1h7tybmo89j", "fields": {"session_data": "Y2M0NDAyZDg5MTNkM2ZiYmIzODM2OTA3MjFmZTA1OGJkYWRhYzY3Yjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxMTI1NTcuMjA5OTIyLCJfZGphbmdvX2NhcHRjaGFfa2V5Ijoia0RFUiJ9", "expire_date": "2017-04-04T16:08:17.221Z"}}, {"model": "sessions.session", "pk": "us8q74pqahkgfvkqa0snd174d5e8vlek", "fields": {"session_data": "NTdlYTFmYWVjOTkwYTlhYjcxZGIxMjAwODBhMDRkMjA1MTAxZDc5Njp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQyMDMzNDguODE2NzQzLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRVJCWiJ9", "expire_date": "2017-05-22T00:28:08.843Z"}}, {"model": "sessions.session", "pk": "ussuvscpyx8h7z398aslklz25v1cza06", "fields": {"session_data": "NmFmOGQ4M2JlNzRmOTA5MGUwN2RjODBjN2M4NTlmYTc4ZWQzZTk2ODp7Il9hdXRoX3VzZXJfaGFzaCI6IjE3NTdhOTRjNTdlNzlmYTAyYjk4ZGYyNDVlMDFjYjQwODIzY2JmMDgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzODcifQ==", "expire_date": "2017-05-21T06:50:35.485Z"}}, {"model": "sessions.session", "pk": "ut6sxm7fu8w5wrsn76hk7qs74sdwprur", "fields": {"session_data": "M2VhMDI2YWQzYTljMzJiZWMzMmRmZjA0NjY2NmE5MDAyNGZhOGQ1Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImNjNTc3ODg0ODA4ZTUxN2I0Yjk0MDQyN2M1MjM4MjdjZWY3NzgzNjgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzOTMifQ==", "expire_date": "2017-05-21T07:42:21.552Z"}}, {"model": "sessions.session", "pk": "uvu7fylugip9d7nkoy38wmmipot1d2tb", "fields": {"session_data": "ZTJkOWQyNjc0OTVkZTk1YWJlZjFkOWUwYmI2MjBhMDJkZDFlNmExYjp7Il9hdXRoX3VzZXJfaGFzaCI6IjVmNjlmZTIxZDBhZjBjZDIwYTBjN2MzMjQxMTk5ZDUzMmIyNTdhZjQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNSJ9", "expire_date": "2017-04-01T07:01:06.055Z"}}, {"model": "sessions.session", "pk": "uw70wfoz1hutdmnkejgbdcu6uwxhka4d", "fields": {"session_data": "MTNiNzIxZTk4MzY0YmVlNzQxOWM3NzhhMjU0MWI0M2UzMmUwZjdhMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjlkOTVmZGRkZGRlYzEzZjE2NTM5YjQ0MDBjMmMxYjBjMmRiYTJjMjUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4NyJ9", "expire_date": "2017-04-01T06:22:32.634Z"}}, {"model": "sessions.session", "pk": "uy4zd5iepcbnleohj5nj7gj1p5ssr74r", "fields": {"session_data": "MWM5NmMxMWU5ZGUzOGQ0MjBhZWRmZGVhOGI2OTExMDU0ODgyMDdiZTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk1ODgzNDQuNjY5NTc2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiYnVRQSJ9", "expire_date": "2017-03-29T14:31:24.678Z"}}, {"model": "sessions.session", "pk": "uzeacsmkccb5dbees2wwcngwux935oy9", "fields": {"session_data": "NmU1MmE4NGI2NDRkMzZkN2UzMGNjNTdiOWU5YjE4NWVhZjQ4YzgwYjp7Imxhc3RfYWN0aXZpdHkiOjE0OTQ3NTAyMzUuNDMyMjk5LCJfYXV0aF91c2VyX2hhc2giOiI1OWYwYjAwNDNiMTNmNTFjNmU1OWQ1YTUzNzg5MTUwOWE2NDZlZWM4IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-05-28T08:23:55.434Z"}}, {"model": "sessions.session", "pk": "v2waqu6t8d8rfxb4n52grcsuqa2dhpy7", "fields": {"session_data": "YjI4YmY1MjE3ZWYwZTE1NzMyMzY5MGVjMDE2MDc2NWExMTk4OTU4MDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTI0MDg1MTAuMTQ3MzE5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiVHZmOCJ9", "expire_date": "2017-05-01T05:54:10.156Z"}}, {"model": "sessions.session", "pk": "v4sxtm3xb2qdx6zr79959leqrhk30exr", "fields": {"session_data": "NWE0MDc1MDYzMDNmNzliMTBhNGVmYWQ1ZjA1N2U2ZDRkNGJhMmM1ODp7Imxhc3RfYWN0aXZpdHkiOjE0OTMxODY4MzguMTIyMDE5LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-05-10T06:07:18.142Z"}}, {"model": "sessions.session", "pk": "v5jg32z2ca490jufednx2jj2e35liwh5", "fields": {"session_data": "MjZhNjE2MzQwMGQ4MDE5NmQzMmNhMjNmNWQ5OWUxYjE4ODZjZTI1ZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjY2ODNhMzUwY2U0ODcyOTU2OGFjN2JlMzkzNmU5ZGFkMGY3ZjlkOWYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNTIifQ==", "expire_date": "2017-05-20T13:55:13.443Z"}}, {"model": "sessions.session", "pk": "v6assxp8hlc166iqdlhkmnj7um4v0j11", "fields": {"session_data": "OTU5YjViZjhmZjg5NjJjOGVhMTlkNDI2MTkzZDU1YzdjYzJhYjYxNzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDE1MzguODMxODM3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiYWg1cyJ9", "expire_date": "2017-03-30T05:17:58.841Z"}}, {"model": "sessions.session", "pk": "v6bovka8lrytphpunnje2lzvcyhdfzau", "fields": {"session_data": "ODAxZTRjOGFkMjYyOGVmNjU5ZDg5ZDI4N2MxM2IzMDJhZGI5NTliNDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5MjYwNTMuOTcyMTM5LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZngyQyJ9", "expire_date": "2017-05-18T19:26:33.984Z"}}, {"model": "sessions.session", "pk": "v6nr16m10ohufbt9k48iwyknrz788log", "fields": {"session_data": "YjZlMjRjNGU2MTJiM2FhY2ExMTg1ZWEyYmNkY2VkYTNhY2ZlNzI3OTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg1ODY2MmZlOGE4NWE5Mzc2NDMwNjJiNTllZjczZDUwYWNkMWVmMDEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjcifQ==", "expire_date": "2017-05-21T04:24:37.021Z"}}, {"model": "sessions.session", "pk": "v9wph178if049b9hduc5r9oeimyiwo6j", "fields": {"session_data": "NzA1MWU3Mzc0NWNjZTZkYThkODlkNjMyMjYzOTE5YmQxY2FjNmRjNDp7Il9hdXRoX3VzZXJfaGFzaCI6IjZhYzFjZGJjNmE0ZDY5YTQwNTJmOWEwODllMjk5MDNhNjUzNDU3NzAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI4MiJ9", "expire_date": "2017-05-28T03:17:10.680Z"}}, {"model": "sessions.session", "pk": "v9yy7fnup6zga4miuntk1d5n175s7ml0", "fields": {"session_data": "NTAyNmYwOTQ2Yjk4MzhlZWY5YTBmZmJlODdhOGQ1ZDgxZTM5NWUyZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZiNTAwMTQyOTBlMjAzNWY2MjkyYTY1NzEwYjhhZGQ5OWNlNGVmNmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2OSJ9", "expire_date": "2017-05-21T13:56:26.232Z"}}, {"model": "sessions.session", "pk": "va5zr6pcy9tjmaweuq6dubo4kp0a6rqi", "fields": {"session_data": "Mjk2NDMwZTQ2YmY5NWNjYzgzOTZhYjNkZTY2ODEwYTk0YTM5ZGQ5OTp7Il9hdXRoX3VzZXJfaGFzaCI6IjY1ZTlmMmY4ODY3ZjY1ZGVlYzk2M2I0MTNlMDI0MWIyODc5Y2Y4MjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MDQifQ==", "expire_date": "2017-05-25T03:55:18.604Z"}}, {"model": "sessions.session", "pk": "vdixcbntnqeth54dk7fml8p48vl6d5en", "fields": {"session_data": "ZjJmZmM1NmVlY2U2MGIxNzA4ODUwM2U4Mjk4NjM5NDlkYWM5ODJmZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjM4Y2YwNTRhMWRiZDJlZjE3NWU3Nzc3N2Y2YzZmZmI3MWQ1ZTg3ZWEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxODUifQ==", "expire_date": "2017-05-28T04:01:47.987Z"}}, {"model": "sessions.session", "pk": "vgxbpz17j66nzrv345f7tfcuwgjckaxt", "fields": {"session_data": "YzQzNGJhOTk0ZjljMDcyMWYzYzk1OGNiZTY0YWVkOWRjN2U3NTI3Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU0ZTdkODliMmE1MjFkNmY1MzU3YTliMDVhMGQyMmI5YTE0OTJiNjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNDcifQ==", "expire_date": "2017-05-21T04:03:51.255Z"}}, {"model": "sessions.session", "pk": "vhbmahn5qb1jwsqz64h6c04tvja8sbgl", "fields": {"session_data": "NTAyNmYwOTQ2Yjk4MzhlZWY5YTBmZmJlODdhOGQ1ZDgxZTM5NWUyZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZiNTAwMTQyOTBlMjAzNWY2MjkyYTY1NzEwYjhhZGQ5OWNlNGVmNmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2OSJ9", "expire_date": "2017-05-20T13:26:14.981Z"}}, {"model": "sessions.session", "pk": "vi0guniknd6u2y82uirvnk19auvw6hat", "fields": {"session_data": "ZmJlNzczYTk2YTM5ZGQ2YzI5YzlkNjkyMTg2N2ZiMmY3YzgxZWU0MDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM4ODA5NzUuMTkxMDQ1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiNDdVdCJ9", "expire_date": "2017-05-18T06:55:15.202Z"}}, {"model": "sessions.session", "pk": "vlmjg8il2nidm7r02mf5m9ch0vwxsbxh", "fields": {"session_data": "ODk5NDBhMDc4MDViNzcwNWI1MGY0NzlmOTQ3Yzc1OGZkZTg2ODM5Nzp7Il9hdXRoX3VzZXJfaGFzaCI6IjlhOWYyYTRkNDRiOGM3MjM3YzQ3MGE0MmJmMjJhNjg5Y2QyMjcwYmYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTgifQ==", "expire_date": "2017-05-21T04:40:46.128Z"}}, {"model": "sessions.session", "pk": "vn8rz9y8xqpmrqy1wn2zx4q0rcyxfb7w", "fields": {"session_data": "MDYyZWU2ZGI2NTJiYTA3ZTBiMDVmYWM1ZDdmNzgzOTcyMzc2ODY2NDp7Il9hdXRoX3VzZXJfaGFzaCI6ImJkY2Q0NmY2YWE0ZTg2NGJjYzhmZGQwZDRjNGFlMWI3ZDU5Nzk4ZGYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMTYifQ==", "expire_date": "2017-05-21T04:23:29.843Z"}}, {"model": "sessions.session", "pk": "vne1idjhu6t0bse4cpgx2td21nodbj6q", "fields": {"session_data": "YjY1NTU4YzZkZDE0ZmI2MDdkMTRmY2QwOTEyYTcyNmJkZTcwZTJjNDp7Imxhc3RfYWN0aXZpdHkiOjE0ODM0MzIwODkuMjI2ODMsIl9hdXRoX3VzZXJfaGFzaCI6IjllNDZjNTMzNDM3NjVjZTg3OWZjMTFkZTM5YmQ5ZTZhMGNkOTc5M2UiLCJfYXV0aF91c2VyX2lkIjoiMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=", "expire_date": "2017-01-17T08:28:09.244Z"}}, {"model": "sessions.session", "pk": "vp82zvac6rvckh0fudfqpxjumzvf2ulx", "fields": {"session_data": "YjRjZmM4NmQ2Y2MyMDRlYzU2YWFjOGE0MmUwZDY0MDhlNjkyN2FhYjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5OTE3MzcuNTU0MjkzLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiOVFPWCJ9", "expire_date": "2017-05-19T13:41:17.561Z"}}, {"model": "sessions.session", "pk": "vpivypckh53vz9k39iwo41gh08iujfr5", "fields": {"session_data": "M2I4Yzk1NGM5ZGZkN2RlYTFjZDMzMjcwMjM0OTNiMjVmYTRkMjhjYzp7Il9hdXRoX3VzZXJfaGFzaCI6Ijk1MTNiMDU2ZTNhOWZjMjZkOThlZjAxYzJjMjQ5OWYyMzBlYmQ0NzkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1In0=", "expire_date": "2017-04-27T13:44:29.643Z"}}, {"model": "sessions.session", "pk": "vpxj4pvn7vhog97xmwikbosuathxkol2", "fields": {"session_data": "MjU5OTQxYTAwNDYyMjY5MWU3MzFiMzY5M2YxM2FhNmFiZWZiYjJiZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjQxNzljMTlkMmViYmYwMGY1ZTMyZDBkMDBkZmViYmQ1OTk1ODcwYmMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzOTQifQ==", "expire_date": "2017-05-21T08:02:24.824Z"}}, {"model": "sessions.session", "pk": "vpzgldwfoxgdq451rvdu21vahjz9m1p5", "fields": {"session_data": "MWM4YzcyYTk2NTdlNzdhZjI3ZTgyNzEzMzA1MDVkNzBkZTI3ZTIwNzp7Imxhc3RfYWN0aXZpdHkiOjE0ODE2MTkzOTguMTY3MDE1LCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2016-12-27T08:56:38.839Z"}}, {"model": "sessions.session", "pk": "vrbjbcz99zfdwvt3jva2ulhcj5ckyd39", "fields": {"session_data": "ZGYwYmJhY2M2MWViZTVjMDQ1MjVkNjVkMDQ2M2EwMGMyNDM0Yzk2YTp7Il9hdXRoX3VzZXJfaGFzaCI6IjZlMmZlZmQxYjcwZGM2MmRjOGM0MWM0MDEyNGMzMDk0MThiZWUxZTgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzQifQ==", "expire_date": "2017-05-21T13:13:15.405Z"}}, {"model": "sessions.session", "pk": "vrlvegkhi6owj92yvm358l4vee56qodp", "fields": {"session_data": "NGU3ZmQ0OGJiNDdjOTUzZTlmNjRmZDZjMTg5NWUwZWQ3NGY5ZWNkZDp7Il9hdXRoX3VzZXJfaGFzaCI6ImZkYTgyNGFjNzk0ZmRmNGY2YjIwNWVjMjEzNTY5ZWJmYTE0ZmE5OWQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjQifQ==", "expire_date": "2017-05-28T02:13:57.987Z"}}, {"model": "sessions.session", "pk": "vt7war69i5g77ykzy48btcsitikcll06", "fields": {"session_data": "YzM2MTczYmJiNjFmNTlhOGQ1NmQzZjE2NzBiMDBlZjQ2Y2ExNjlmMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjUyYmIwZWZiZjBlYmFiNjE3MDZkOTM1MGIzNDMzNzMzNTBkYzZlMGYiLCJfYXV0aF91c2VyX2lkIjoiMjkzIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQifQ==", "expire_date": "2017-05-21T03:46:38.464Z"}}, {"model": "sessions.session", "pk": "vuaegi6tibgmspxfcluhrqufg39iq3jf", "fields": {"session_data": "ZjU5MzllYjY5ZjA1NzYwNzM5YzUxNjU2YTNmMjNhNTA4MmVlNDFmNjp7Imxhc3RfYWN0aXZpdHkiOjE0OTQ3NTkzNjAuODU2MjI1LCJfYXV0aF91c2VyX2hhc2giOiI1OWYwYjAwNDNiMTNmNTFjNmU1OWQ1YTUzNzg5MTUwOWE2NDZlZWM4IiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-05-28T10:56:03.032Z"}}, {"model": "sessions.session", "pk": "vuqdrvm5c3zs2dpdx51ikn4vko2kv7gx", "fields": {"session_data": "YzYwZjZmNDc1NDg1ZWQ4ZWY4ZmYxNjNiZDQxMDA2NDRlNWJmZDQ3ZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjY5NDJkOTE4ZTliMTFjYTliOTQ1NGZjMjg1MDFlNWU4MjZjZGYwZWUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNjIifQ==", "expire_date": "2017-05-28T07:17:20.655Z"}}, {"model": "sessions.session", "pk": "vwh9bnsghd03getvtile4087ahz5a2rn", "fields": {"session_data": "ZTNkNjY3ZDgyZmM3MTU4MmFmOWU4NDViNzM2YzUwYWY0ZDMwYmJhNzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMzNDcxMTIuMTMyNzEyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoidVJYbiJ9", "expire_date": "2017-05-12T02:37:32.146Z"}}, {"model": "sessions.session", "pk": "vxnx2kvkf1e0p4hktmn8kjmmhwwg4uex", "fields": {"session_data": "OGI4MjM3OWYzZTI0Y2NmOGZhNDMzNDRjZmM5NTJmYmI0NDM2MzY0YTp7Il9hdXRoX3VzZXJfaGFzaCI6IjE3ZjdjNDVhODE0NjNjMTU4ZWRkNTAxZTQ0NGRhOGJlMDJhMDE4YjMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjUifQ==", "expire_date": "2017-05-19T13:32:52.063Z"}}, {"model": "sessions.session", "pk": "vysm4v41icw6um8brgvnlbkja5h0x00q", "fields": {"session_data": "M2YxZWZjNmQwZDZmMGFiNzAyNjhjZjRhODY5NTMzMjBjYTI0OTMwNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjkzZjJjN2FhNzY2YTU1NzUxYzhhNzU1YWU1MjE0ZmFmMzRjZmRkN2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5In0=", "expire_date": "2017-05-19T17:18:39.423Z"}}, {"model": "sessions.session", "pk": "w0ygdv12fgfcmsdo3bb6r1niw1agw4kq", "fields": {"session_data": "NWNmOGE0MGEwZGFlYjY4OTc0MTI4NzJlZWE4ZTA4NGE3MGE0MmQ1Mjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQ0ODg5ODAuMzcxMTg2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiWGhHdiJ9", "expire_date": "2017-05-25T07:48:40.390Z"}}, {"model": "sessions.session", "pk": "w5firbxhnqrao5gwkuz17wlls1w3d5sc", "fields": {"session_data": "M2QzNjViNWZhYzkyODE2YmQ1NGNhMmIyNzIzNGE5YjY3ZDRhZmM1ZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjQwYjg5YjFiY2U3ZDlhYjRhMjdiMTIxODgyOTE4YzI5YjBhODE0YzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2MyJ9", "expire_date": "2017-04-01T01:57:17.393Z"}}, {"model": "sessions.session", "pk": "w6azaxcboqirtjldw0iv9wwhvuxqcjys", "fields": {"session_data": "MWQ0OTk4NjI0Y2MyNDc4MGQ0YmE5MWY3ZGEzMTc5YzQwMzcyM2JkMjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTA1Mjg5MjQuMTM4MzcsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJtcVVTIn0=", "expire_date": "2017-04-09T11:47:44.157Z"}}, {"model": "sessions.session", "pk": "w71wvp10721wi3435p09ll5nrg0ssre1", "fields": {"session_data": "NzAyNmEzMjhjMjVkOTczNTU2ZGUzZTUwNGIwMDlhOGI4N2Y0ZWYyMjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTMxOTY2MzAuMDU3ODUxLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoidERZYiJ9", "expire_date": "2017-05-10T08:49:30.098Z"}}, {"model": "sessions.session", "pk": "w7bwxydiaux2zz6wukcavni7cszvznaa", "fields": {"session_data": "ZjVkMWNkNzZjZDg0ZTU5ZDUxNmY3YzhkYTFhYjRhNjAxYzk4MGY4NDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTI2OTk3NDYuMTAyMzA0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoidXFXbSJ9", "expire_date": "2017-05-04T14:48:06.110Z"}}, {"model": "sessions.session", "pk": "w9rkvtvb95wkhvsdx89bwx5lcqby76xm", "fields": {"session_data": "ZDEzODZlOTQxN2M1YzQxYzJjNjQ3NzE2YjQ5NmM2OGNlMmVmMDZiYjp7Il9hdXRoX3VzZXJfaGFzaCI6ImIzYjY0OTM0NDhjNjc1NjRjMDBlOThkMjk5MDUyZjgzNDY5NTY2Y2YiLCJfYXV0aF91c2VyX2lkIjoiMjI0IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQifQ==", "expire_date": "2017-05-12T04:58:08.159Z"}}, {"model": "sessions.session", "pk": "w9s0kw4hxwhzp708m3mx7x1mgzu0pruh", "fields": {"session_data": "ZmRkYmM1NmQ3Y2UxNmY0NzVkZjgzNTgwOWVmZDEzYTRlY2QzMjAxMjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTIxNTAzMjAuNzQ4MzQsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJuUXc2In0=", "expire_date": "2017-04-28T06:11:00.779Z"}}, {"model": "sessions.session", "pk": "w9wmrbdhkpgsp83x34ea4htwsayphbmo", "fields": {"session_data": "OTg0OWZjZDJkOTBmNzU4MGJhMjU0MDkyYmFlYzMyYmY0YTdmNTE2Zjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk2NDE1MzkuODM2MDIyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiZEhtZyJ9", "expire_date": "2017-03-30T05:17:59.844Z"}}, {"model": "sessions.session", "pk": "wam7swo6optygqcce3cpbvwahtzfvt3d", "fields": {"session_data": "ODA1MzY5MzBjYzdlNzgyODE1ZDc0NGFjNGJjMDA0ZDlkZmI1OGJkYzp7Il9hdXRoX3VzZXJfaGFzaCI6IjRlYzA3NTMzNzA1MjkxYzBlOWM1MzZjOWVmOTRiODU4MzNjZDAwYjMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNTkifQ==", "expire_date": "2017-05-21T04:08:33.827Z"}}, {"model": "sessions.session", "pk": "wb62wthrwkt6exxc6mav4welfymzng7s", "fields": {"session_data": "MzJiZmM0YzA2ZmUxNDNiOGQ4MjQxMDAxMjU5ZjVlODY5MDkwZWRhMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjEyMjI2NDk2ZjgxNTcwODRkNjgwYTgyMDczZTFhMDA5ZjFiM2IxOWMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI3OSJ9", "expire_date": "2017-04-01T04:27:00.717Z"}}, {"model": "sessions.session", "pk": "wcyec98i0tili5e8ufiokmx6q3ug6tds", "fields": {"session_data": "OTk4NzYzM2Q4ZDYzYTdkNTFkYTU3NzA0ODdjNmZhMGY5YmMwNDMxNTp7Il9hdXRoX3VzZXJfaGFzaCI6ImY5MDhkMzYwYzMzNjVjZWZiMjY3Yjk4ODhjZjg2M2Y4NjIxZjBhMjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0In0=", "expire_date": "2017-04-09T07:32:21.558Z"}}, {"model": "sessions.session", "pk": "wdbuntce28u78522y20ag0u7iu35z26j", "fields": {"session_data": "MzRiNTEzYWE1MWI5YzQxMGY1OWFlMGI2MDExNTYxZWI2N2JiMjM3NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjlmNzk4MTkxNTExYzA4ZWRiMDA5YWRhZjU3NGE3OWZjMjhjYTVhNjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5In0=", "expire_date": "2017-03-28T06:43:57.217Z"}}, {"model": "sessions.session", "pk": "wdx6facdlmtmesztbiez0nnnrb0s7lrh", "fields": {"session_data": "NjVkNjE3N2VhYTYwOTIzMTRlMjEyOGNjMmMxMzg3Zjg0YmU5MGQ4ODp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAwMDk5NDQuMTM2NjkyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiS1hTUCJ9", "expire_date": "2017-04-03T11:38:04.189Z"}}, {"model": "sessions.session", "pk": "we2s9oljdad1rxzww0y70qrm37ybps56", "fields": {"session_data": "ZmRhYmFlMmVjNzg4YWZiZjZmMDYyZjY1YzRhYzQ3NTg2NTUwOTk3NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjUzYjgwNWFjNzU3MzMwNTUwMzIzZjQ0M2RiNTMyN2M4OWYzZWE1ZTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI3MCJ9", "expire_date": "2017-04-01T03:57:18.372Z"}}, {"model": "sessions.session", "pk": "wfapegk3je2ni6gm74h6cbva9kdbuxqw", "fields": {"session_data": "NDQ4MGYwMGI5OTgzMTJjOTg2ZmZlMDM2NTk4ZWY1ZmU3YTIzZDM4Mzp7Il9hdXRoX3VzZXJfaGFzaCI6ImIxNTk3NTQxOWI4N2MyOWQ3YTY5MjAwNzRmMmNkNDk4MWRiMzNhNWEiLCJfYXV0aF91c2VyX2lkIjoiMTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-03-18T03:25:00.989Z"}}, {"model": "sessions.session", "pk": "wfp1o0y2onb9pyq1wteazzeazxvla71v", "fields": {"session_data": "MzRiNTEzYWE1MWI5YzQxMGY1OWFlMGI2MDExNTYxZWI2N2JiMjM3NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjlmNzk4MTkxNTExYzA4ZWRiMDA5YWRhZjU3NGE3OWZjMjhjYTVhNjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5In0=", "expire_date": "2017-03-31T12:59:35.589Z"}}, {"model": "sessions.session", "pk": "wg4aa6e2a2krk5lu3tehviw5y11g4iun", "fields": {"session_data": "NWY5ZmRlYWUxMjQzMzU5YjgxNmE0ZmIwMzZkOWQzYjUxN2Q5NWU1NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjU3ZmVhNjZiYTFmMWIwZDg1OGJmZjY1YmNmNjI0NzMwZjBhNTQzNzAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzIifQ==", "expire_date": "2017-05-16T12:11:51.138Z"}}, {"model": "sessions.session", "pk": "wiz8q5cjzxw38ztfauztzqio8hsklb2a", "fields": {"session_data": "NmE4OTkxMjY2NTcxMTc3M2M0MTE1OGUwMWQ2MTg5NDliZWQxNWJlOTp7Il9hdXRoX3VzZXJfaGFzaCI6ImExZTI2NjE5YTliMDMyOTFmNmY4MTFiNGU0MDE3OTJiMmMwNmVhNzIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjUifQ==", "expire_date": "2017-05-21T09:35:02.320Z"}}, {"model": "sessions.session", "pk": "wjj7a1ynzep060rxn67llhxsfqtdoq25", "fields": {"session_data": "MmRmNjI5ZDgxYzcxZjZhMjFlYTIwNGU3NmFlZTk5OGMzMzJjYmIwMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjNiMzQwYmM2Yzk5MWY1MTIwNWJmNWFkNTgzNDA1ODgwZTlmZDRlNjQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzOSJ9", "expire_date": "2017-05-21T07:35:59.402Z"}}, {"model": "sessions.session", "pk": "wjougmq3kkfrd7ih6xd12j50eywm2baa", "fields": {"session_data": "ZWFjODI3NDc1ZjM3YjBlYmNkNWUzM2U2Yjg4YTgxODY3MzhiZjc2OTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk3Mjg3NDIuMzk4NDgsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJhZlJDIn0=", "expire_date": "2017-03-31T05:31:22.405Z"}}, {"model": "sessions.session", "pk": "wpm16zwp5hzpl64axjb0pc7ik6ckpt9o", "fields": {"session_data": "NjBkNDNkMTFlNGUwODdkZDc5M2Y3NGU3MTBkNzg1NDNmMGQ4ZGVjZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjU2OTIyYjdkM2M4Y2I3YzFjMjUwNTJkYjgwZjU2YzMzMWFlOGIwNjUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxNTMifQ==", "expire_date": "2017-05-28T03:58:12.497Z"}}, {"model": "sessions.session", "pk": "wq0lfwpvv3b8loc1eww4jvk2bq5hr6mu", "fields": {"session_data": "NzY5MjUzMzI5MmYyYjY5NGNkNzg4NDliY2RiMjRhYTY1MTNmZmViZDp7Il9hdXRoX3VzZXJfaGFzaCI6ImE3OTNjOWE0YmM0YmY4ZjVhZjczNDljZjdhMWEzMjRmOTc0MDBiNzciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTYifQ==", "expire_date": "2017-05-21T04:10:32.875Z"}}, {"model": "sessions.session", "pk": "wr9o4le2btsmfx7kbxbpzm05uw6x4iif", "fields": {"session_data": "OWFhZDg0NmEwMWU5Yzc5ZGZlZjMzMzY2YzM5OWQ1N2JjNDIxMjc5OTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTIzOTkxNDcuMTcxODM3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiclNETiJ9", "expire_date": "2017-05-01T03:18:07.179Z"}}, {"model": "sessions.session", "pk": "wtn2iqxjm79zd6bm4ko93tnin2zrd0t9", "fields": {"session_data": "ODFjZjFiZmJmMzk4NWNjZGQ5NzFmOWI5N2E4NmUxMzUxOWQwNDI0Yjp7Il9hdXRoX3VzZXJfaGFzaCI6ImZhMjJlMzY3NGMyM2M5MTY1MGM1ZmRjOWZhM2M5ZTFjNmY3YzVjZDgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzgifQ==", "expire_date": "2017-05-21T02:36:58.565Z"}}, {"model": "sessions.session", "pk": "wvuoyt2jzeqh6ls0c3rmjemldvy819yh", "fields": {"session_data": "YWQ3MDY4OTA2MmVmYjMzNTFjMDliM2Y3NDJhNzI5MTM1MjhmZDA2MDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5ODUwOTcuMDE1MywiX2RqYW5nb19jYXB0Y2hhX2tleSI6Imt6YU0ifQ==", "expire_date": "2017-05-19T11:50:37.023Z"}}, {"model": "sessions.session", "pk": "wwjodnqqo2h1g24k28x3yhw0imlj4xbc", "fields": {"session_data": "NDI4YjdlMjQ5OThlZDMwYjk4OTYzOThjMWM2Y2M1MTg5NzY2NGVhMjp7Il9hdXRoX3VzZXJfaGFzaCI6IjBmNThmMWQ2N2Y3OGUzOTYxZTQxNzg3YjFhZTA3YzE1M2ExZWY4NDYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTIifQ==", "expire_date": "2017-05-12T02:37:59.162Z"}}, {"model": "sessions.session", "pk": "wyyscxp5rjookrqltz9j5930av88xupc", "fields": {"session_data": "Y2ViOTRlYTBhMGRkNzdlZDQ0YzQ1MDY5NGViZGJjNjllNDdiZTc5Nzp7Il9hdXRoX3VzZXJfaGFzaCI6IjE0ZjRlMGY2MmFhMmIyMjY5ZGEyNjc3NGRhYjg3MDkyMGEwYjZiMTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzODUifQ==", "expire_date": "2017-05-21T10:52:33.232Z"}}, {"model": "sessions.session", "pk": "x15qr3h18mhwocd067t0tl1wlwku0tth", "fields": {"session_data": "N2YyNjVmMWYzOWFjYmJjYjIxN2M4OGYzMTFmYzY0OGIzN2ZjM2E0OTp7Il9hdXRoX3VzZXJfaGFzaCI6ImY4MDM4ODUxODJjYTRlNDE1OTg1MWNlOWE0ZTIzMzVhMGZiMDNiOTUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1NSJ9", "expire_date": "2017-04-09T14:47:42.463Z"}}, {"model": "sessions.session", "pk": "x1nstu5ingad2jm7xqvghy48r1qp6n6j", "fields": {"session_data": "NTA1OGUzYTdiNDk4N2U3ZmExMGM4YjA2MTBkYjNjZDRiYjg1YTFmNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjI5ZWUzNDRjODU4OTVhM2UwMWU2NTFjZDEwNGEzZDdkZTIyMTI2ZDEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNjAifQ==", "expire_date": "2017-05-21T00:03:50.332Z"}}, {"model": "sessions.session", "pk": "x2v6rmcc7dbfl0s17iuapzfnw7zdyslw", "fields": {"session_data": "MGRjOTJkNmQyZWI1OTM0MjE2NjQwMzMxNDYzZTg2MThkYjI0ZDg5NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjM5ZDk1ODRkNDM0YTJlZmZlNjA2YmFlNGY2NjMwNGI0Njc5Yjk1NmMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNDkifQ==", "expire_date": "2017-05-22T17:53:33.619Z"}}, {"model": "sessions.session", "pk": "x4tyho68nljwm0gudm0rbkvmm6uu4dfq", "fields": {"session_data": "ZDM0NTk2ZDlmZTcyZWI0MWEwYmY4NWNkMGZkYWM1YTc2ZWI2YTY2OTp7Il9hdXRoX3VzZXJfaGFzaCI6IjM0ZTAzZWRiMjEzYmM2ODk1NzNmOTI0ZDk5YjU2YjI4MDc3MGI5ODkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1In0=", "expire_date": "2017-01-03T08:18:11.356Z"}}, {"model": "sessions.session", "pk": "x4yu96we4vwwfy5ru1oc2ui8l124abma", "fields": {"session_data": "OTdiMzM1ZWY2ZjQzNWQzNzQ3ZDE1NmU5YTU4ODZlZDcyMDUxODc0NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjEyNjZjNjI4MWViODUxMWFhNWEyYWU4MmJlZDlhYTMxMmZlOWQ0ZGEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzQifQ==", "expire_date": "2017-05-21T03:32:22.030Z"}}, {"model": "sessions.session", "pk": "x5743qy073cy50z0ootilwwb2js21mh7", "fields": {"session_data": "ODRiOWEwMjJhY2IwODAyMzI2ZjczNmY2NzliYTNjNWQ0NWY0MWU4Mzp7Il9hdXRoX3VzZXJfaGFzaCI6ImYyNzczYWExNDlkZGNjOGUwNDUzNmNhYzQ2Njk3ZWY0ZGJmYmMxOWUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MTAifQ==", "expire_date": "2017-05-25T12:22:28.406Z"}}, {"model": "sessions.session", "pk": "x6yk2jx1pxwtiuorjchx5p621rzwhvxq", "fields": {"session_data": "ZTdmZDVkZmZlYjViZmM0NjhhMzhjYThkN2I2NDgzODJmNjczZTY2Yzp7Il9hdXRoX3VzZXJfaGFzaCI6ImViYzI4MWExNzgwMTY4ZTI0YTRlNTA4YjIwMjEwYjNjZDkxM2Y2ZTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzMifQ==", "expire_date": "2017-05-28T02:37:40.428Z"}}, {"model": "sessions.session", "pk": "x6zjmop5a69zbxed3o8pgs8cy5ax94on", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-20T07:35:41.282Z"}}, {"model": "sessions.session", "pk": "x717k8thzri3d61wqgoe8yqaay619u93", "fields": {"session_data": "NTc3NDAzMjBhYmE4Nzc1ZWQ2NDEzMmNjYjgzZWM4YmZhY2ZmNWFjYTp7Il9hdXRoX3VzZXJfaGFzaCI6IjgwOGM3ZTE4MjBlZWNiZmM3NjRmMzM4NzQ2MjM4NGExMGUyZjVjN2MiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMzgifQ==", "expire_date": "2017-05-21T04:02:17.713Z"}}, {"model": "sessions.session", "pk": "x84wujy2e6mcif81d7lupqzwueg79aju", "fields": {"session_data": "MGJiMmViYmFjNWViNTc1ZWNlMjc4ZWY1MjMxZDU4Y2U2ODY5MjZhNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjgyMjg1YzQ3ODY1MDhmMmMxMDdlZTQ5YWE3OWI5M2IwMjdkNTU4YmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MDUifQ==", "expire_date": "2017-05-25T03:58:02.148Z"}}, {"model": "sessions.session", "pk": "x9wc4x09ewp98hunuxhwi3x627do7nw7", "fields": {"session_data": "MWIzMjI5YWJjOTU3NDQwMDYwNzJmZWZkN2Y4M2M2Mjc5OTY2ZDRkZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjAxNDU2NzBjZTg5NDQ5ZWFhY2U1MTQ0ZTVkOTAwNWVkYmEzMDJlNzYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMiJ9", "expire_date": "2017-03-18T22:44:49.521Z"}}, {"model": "sessions.session", "pk": "xah4uoxc9b3v2jilnxaj0pjklwn9e0b9", "fields": {"session_data": "ZTQzOGFhNzNiYmM3MDgwY2Q5OGM3Yjc4NWNiODIwZDQ1NDc0ODY2MTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTI1ODQ5MjkuNTQ3ODQzLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiUms5YSJ9", "expire_date": "2017-05-03T06:54:29.654Z"}}, {"model": "sessions.session", "pk": "xan89oebrhwcqysrqm7ojmiogt56heao", "fields": {"session_data": "YWVlZGRiYjlkMTlkOTcwYzU2ZjQxMjEzZDIxMTgxZDI4ODY0YTcyMzp7Il9hdXRoX3VzZXJfaGFzaCI6ImM5MTE2MGRkMDk4NWY3NzJmZDhiNTA0MTg5ZWZjMThjYjcwMTJhYzUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzOCJ9", "expire_date": "2017-03-29T14:04:30.260Z"}}, {"model": "sessions.session", "pk": "xaxtnlzdmgej185uh6imz7c1hs6h2009", "fields": {"session_data": "MTdmZDA2MjBjNWFmMTIyZDZjYWViZTdiNDdjZDU2NDAyNDg0ZTk5Yjp7Il9hdXRoX3VzZXJfaGFzaCI6IjYyNmM3MGMzZjA2ODk1ZmFjMjljNzdlZmE2YTMyMWJiZDU5ZjgwNjYiLCJfZGphbmdvX2NhcHRjaGFfZXhwaXJlc190aW1lIjoxNDkwMTU1OTEyLjg1Nzg2NiwiX2F1dGhfdXNlcl9pZCI6Ijk4IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfZGphbmdvX2NhcHRjaGFfa2V5Ijoia0U0eCJ9", "expire_date": "2017-04-05T04:10:52.863Z"}}, {"model": "sessions.session", "pk": "xbxlqsof9qxjkmwi8zyd8ngmsha7hxx3", "fields": {"session_data": "ZDgyNmE1NDIyYWQ5ZTRhNmU2ZWU2ZGM3Nzg3NWQyZDMxNGZlYTFiODp7Il9hdXRoX3VzZXJfaGFzaCI6IjU4NjljMmRkZWU5Y2Q3NDBhNWQ2M2JjZmIyOTExNGQ3MDQxZWY2NzgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzAifQ==", "expire_date": "2017-05-21T09:29:06.517Z"}}, {"model": "sessions.session", "pk": "xcwylbwx9p57vg777vyviite36xay27b", "fields": {"session_data": "M2E3ZmJjYTNjODgxMTM1YjBhYmQwM2E4NzEwMThhYWJkNjA0YmZhODp7Il9hdXRoX3VzZXJfaGFzaCI6ImRjNGRmZTkyYWQ5MjIzZjMyMTdlYTYyYTkzZDE0NTRlN2U0ODI3NTMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMDgifQ==", "expire_date": "2017-04-14T13:13:03.793Z"}}, {"model": "sessions.session", "pk": "xejvwu3trgy1hebgiaqik3xtq67b6te7", "fields": {"session_data": "NTQyNTY2YjllYzQ0OTU3NTQ5MjcxYzBhOGVjN2Q2ODczZmNhYWQ2NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjA0YzA4ZThmY2U3OGU0N2I2MjI2OTM3MmQ2YTJhZTE2YzhlYzQxMWYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjkifQ==", "expire_date": "2017-05-21T03:58:36.890Z"}}, {"model": "sessions.session", "pk": "xfgcsfbx7mn80p3cw3oeidxkq8gyw2ow", "fields": {"session_data": "Yzc4MTI1NTcwOTQ4NmUxMzYxNmJkNjJiNTY3NDY0OTA3MTY5ZTgwNjp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiYTc2MDRlZWM3NWI3NWFiYTZkNWZhZWEyOWNmNDAwMTNjZTBjOWNiZiIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTE0NjEwNjMuNTQ1MTg2LCJfYXV0aF91c2VyX2lkIjoiNTYiLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiQWd5RyJ9", "expire_date": "2017-04-20T06:43:31.911Z"}}, {"model": "sessions.session", "pk": "xfpr8mqucgr41xdhgs34j2ymehyxo45y", "fields": {"session_data": "ODg1YTUxY2IzMWI1ODFhMDgxNTZmMDgzNWY1MTA0M2E0YWZkYzM1OTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTIwNTgyNjEuMTQ2OTQsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiI1OVpuIn0=", "expire_date": "2017-04-27T04:36:41.155Z"}}, {"model": "sessions.session", "pk": "xg21e07ti0ba9leq4io2ect7uan42azr", "fields": {"session_data": "YjZlMjRjNGU2MTJiM2FhY2ExMTg1ZWEyYmNkY2VkYTNhY2ZlNzI3OTp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg1ODY2MmZlOGE4NWE5Mzc2NDMwNjJiNTllZjczZDUwYWNkMWVmMDEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjcifQ==", "expire_date": "2017-05-21T04:16:47.625Z"}}, {"model": "sessions.session", "pk": "xi6fjfhhtg93aktfbo6ud7s1a0mggtdh", "fields": {"session_data": "ODllNmYxNzQ2OGYyNGRiMDE1ZmYzNWUxYjgyNDU3NDM4YzEzYjhmZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjZkNzQ1MWVjNTlkMzNlZWY4NDRkYTJlZWM3NTExNDlmYWVmODIyZjQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjgifQ==", "expire_date": "2017-05-21T04:01:42.513Z"}}, {"model": "sessions.session", "pk": "xij6xxmr17rgknl7rkp0tviy5jghgx7e", "fields": {"session_data": "M2U2ZGE3YjczZGUxODFiNWI2M2EwZDc0NTNmYjM1ODkzNjQyZjE0OTp7Il9hdXRoX3VzZXJfaGFzaCI6ImFjYzc3NjQzNzQzZjA2ZDg3MzVhZjAwZTI5NmYwZWI3YmEwM2Y5YjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MCJ9", "expire_date": "2017-03-29T08:31:12.127Z"}}, {"model": "sessions.session", "pk": "xiordb6h0pqjigtcdaqw4oo5osn2rkut", "fields": {"session_data": "Y2IxODA4YTk0MGFlMDE5N2FjM2VlNTc2YjYzYzZmOGNhODRlYTE2MDp7Il9hdXRoX3VzZXJfaGFzaCI6IjAyNGI3MzA1NDg3NDRmZDA4ZmRmODFhZTUyODg2YzFjMTU5NTMwMTgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjQifQ==", "expire_date": "2017-05-21T02:53:12.402Z"}}, {"model": "sessions.session", "pk": "xl1xulst3v7on73s966tloz0vhpb77ad", "fields": {"session_data": "NTMzNWUyNGVkYmZhNWZhMzNjZDhhYjE1OTI0ZWExZmYxYjA4MGY1Yzp7Il9hdXRoX3VzZXJfaGFzaCI6IjhkODVkYjkzOWUwNTc3NjY4N2Y2YWJkYzJjZmFmYmMzMWJmMzM2OTUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MTIifQ==", "expire_date": "2017-05-25T05:38:32.214Z"}}, {"model": "sessions.session", "pk": "xl47uf7iftnsp2ey1zcrcljchwojxdj1", "fields": {"session_data": "YWJkMWU4YTZlYWI5MDYzYzY3YzUzZjk5OWU5YmRlYTAyOTgwZTc5NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjVmM2ZhNmNmOWNjN2EzYzQ4MzZkNTM4M2Q5NzA4NzhhZTg0OWU3MzYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjEifQ==", "expire_date": "2017-05-28T03:15:08.224Z"}}, {"model": "sessions.session", "pk": "xlv8rp1hxvd7itnoyaupjx090biy86sj", "fields": {"session_data": "NzA1YjQ1NTliNWE2MTY1MmNjM2EzNTgxM2VjZTlkOTc3MDVmZDE0Mzp7Il9hdXRoX3VzZXJfaGFzaCI6IjI4NWY1NWQ2ODhmMTJjM2Q3YjYxMmZiZmJiNzQ4N2UyYTYxZmRkMTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjEifQ==", "expire_date": "2017-05-12T05:38:24.485Z"}}, {"model": "sessions.session", "pk": "xlvepe14s3l2cwsr0030a5vqdimhkqr8", "fields": {"session_data": "NDg5NWFiM2NiYjBlOTc1ZmVhZDM5MTg4MjE5N2M1NThjYTdmOTEyMTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM4MTA1MzAuMTc4NjMyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiMmRoVCJ9", "expire_date": "2017-05-17T11:21:10.186Z"}}, {"model": "sessions.session", "pk": "xobrj2a9igouvauuojkixx2yvpoqbjf3", "fields": {"session_data": "NmViN2E5NGJmNTYwYzI5NDY3NzM4MWMyOGQwZjM5YWRiOGFhNjM0NTp7Il9hdXRoX3VzZXJfaGFzaCI6ImI5NjJmNjZiYjExZmJhZGIxZjI4YTQzYTUzMjRmZGU3ODhmMzMyYjYiLCJfYXV0aF91c2VyX2lkIjoiMTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-04-20T15:42:31.884Z"}}, {"model": "sessions.session", "pk": "xppna6ly8a7ud1f4s75aaxceeahggkfe", "fields": {"session_data": "Yzk4ZjM5MGU3Mjc4NDkzYTdiMTQwMjc0MzYwMTk3MDgwOGQwMTMzYjp7Imxhc3RfYWN0aXZpdHkiOjE0OTAyNDg1NjMuNjQzMzY1LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-04-06T05:56:03.667Z"}}, {"model": "sessions.session", "pk": "xucmd96od4dile69cqk8gxwvp3a4dnfb", "fields": {"session_data": "ODAzNWRiNjE2YmNlZTYxMzA1MTdjMWRjM2U4Y2UyZWRlN2FjNDY4ODp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg0MzI1MDU4NzUxMjZmNmE5MTVmMWMwZDQ4N2U3MmI0OWEwN2VkYmMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0OSJ9", "expire_date": "2017-04-04T03:06:48.843Z"}}, {"model": "sessions.session", "pk": "xusn2bbvfkzc4pla1lvhoadgopcvbjan", "fields": {"session_data": "M2QxZWU3OWM2NDNiZmI3OTE1ZjBiOTc0MTUzNmQ2ZGQ1ZDdmZjY5Zjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQxNDg1OTIuNDY2MDQzLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiRGRRcCJ9", "expire_date": "2017-05-21T09:15:32.478Z"}}, {"model": "sessions.session", "pk": "xvs1nqy8lcyzk4w2qa4aebelt2bf0qkp", "fields": {"session_data": "MGU4YmY5MTYwNjIxYjNlOTQzZGJhY2ZjYTQ0OGUwNWI2NTExODlhNDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQxMzEzMjAuOTIxOTY3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiYk5CWSJ9", "expire_date": "2017-05-21T04:27:40.935Z"}}, {"model": "sessions.session", "pk": "xw812pzu6j0bu92l6w6nausmgqcp42h9", "fields": {"session_data": "YWQ1MTMxYjkzZTMwMThiOGJiMDUyMjkwM2M0MGMyZjE4Y2NkMTFhMjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM4OTgxNjMuMDYwMTE3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiUzdIQyJ9", "expire_date": "2017-05-18T11:41:43.072Z"}}, {"model": "sessions.session", "pk": "xwfwl84g6diouzvn6km4qig6tzn2307b", "fields": {"session_data": "NzkwZmM0NzQzNWNhZmQ2ZTFlNTc5Zjk1YjNkYmEzMzZjMDljNjFlYzp7Imxhc3RfYWN0aXZpdHkiOjE0OTIwMTAzNTIuOTc0NjkyLCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9", "expire_date": "2017-04-26T15:19:13.018Z"}}, {"model": "sessions.session", "pk": "xwlk0pd02j5hzxzlsx7ep4v2jv1itysx", "fields": {"session_data": "ZWZkNDk5OTUxOTNiOThkZDNkNjQ4NzAzNDEyZmY4MTY2OTJiNDkzMDp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiYzA1NTk0NTU2MjQwYzM5MzQ1ZjM2NjY0MDg5NTQ0OTE4MTkxODU0NiIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5ODg4MzAuNzExODE4LCJfYXV0aF91c2VyX2lkIjoiMzA5IiwiX2RqYW5nb19jYXB0Y2hhX2tleSI6ImhYTXoifQ==", "expire_date": "2017-05-19T12:54:30.764Z"}}, {"model": "sessions.session", "pk": "xx243i5xizmebxxq3fwl7ffpbxgge5b5", "fields": {"session_data": "NGY5OWRkNGRiN2RlODU1ZjNjNDcyMjhlYWViNzM2NWMwNGMzNWVhNjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM2Mzg0ODkuMDU5NDE4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiVXpFWCJ9", "expire_date": "2017-05-15T11:33:49.067Z"}}, {"model": "sessions.session", "pk": "xywqmkv3tfyl3ue9mcd5oddxzvuw2o18", "fields": {"session_data": "M2YxZWZjNmQwZDZmMGFiNzAyNjhjZjRhODY5NTMzMjBjYTI0OTMwNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjkzZjJjN2FhNzY2YTU1NzUxYzhhNzU1YWU1MjE0ZmFmMzRjZmRkN2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5In0=", "expire_date": "2017-05-12T03:14:26.532Z"}}, {"model": "sessions.session", "pk": "xziecscso5zkbacpsm3t80bmuhfq8bo8", "fields": {"session_data": "NmI1YjNkNTJlODI5Y2UwYTIxMGU4YjU4YjIxZWI5NzA2ZDQwNTgxNjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxOTI0NDIuMDgzNzk0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoieHVIRCJ9", "expire_date": "2017-04-05T14:19:42.091Z"}}, {"model": "sessions.session", "pk": "xzkaqou89ll692m8govn4eswka7s7ut7", "fields": {"session_data": "NTA5YmExMzcxMGM0NTE3MzFiMTE5ZDVmMWY2ZjExMmFhOTU5NGI1Mjp7Il9hdXRoX3VzZXJfaGFzaCI6ImY3NjQ3YzAzZTllYzcxNTA4NWUwNjY0NjhjZjdjOWQxMzU3OWVmOWIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzcifQ==", "expire_date": "2017-05-17T12:32:02.531Z"}}, {"model": "sessions.session", "pk": "y02f7ulh4ovsz82h8sdvn6co6adys2uj", "fields": {"session_data": "OTM2MTI0ZTI2NzYxNjlhNzg3NGI2OWUxNDA0MDdkOTIzYjI4MTY3Mzp7Il9hdXRoX3VzZXJfaGFzaCI6ImU0OGQ0ZTUzNDhkZGI1ZjYxOGRjOGQwNTUyNjgyZjc1MGIxZmZkOTkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMDIifQ==", "expire_date": "2017-05-21T10:12:00.967Z"}}, {"model": "sessions.session", "pk": "y2d2dd29k41em3z1qdye5kdyad6glhay", "fields": {"session_data": "MzRiNTEzYWE1MWI5YzQxMGY1OWFlMGI2MDExNTYxZWI2N2JiMjM3NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjlmNzk4MTkxNTExYzA4ZWRiMDA5YWRhZjU3NGE3OWZjMjhjYTVhNjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI5In0=", "expire_date": "2017-03-29T12:08:17.863Z"}}, {"model": "sessions.session", "pk": "y38of5wjx5j7ty8y9e981v52r268xm7h", "fields": {"session_data": "NTNhZGNiYzc4MmUzYzQ1NmVhMWNiNGU5NDRiNjI0YjhiZDkzMmRjNjp7Imxhc3RfYWN0aXZpdHkiOjE0OTE4MzgxMTAuNzI5MDA3LCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-04-24T15:28:30.733Z"}}, {"model": "sessions.session", "pk": "y3ey937r05g9sik8yshu7oajyxylnrg1", "fields": {"session_data": "MjMzZTBiMmU4MzJmNzRmNDdhYmY4ODIxZGFkNTYxYzA4ZDQ4MWUyOTp7Il9hdXRoX3VzZXJfaGFzaCI6ImE0ZjdlNmFmYWJiOWU2N2RhZmQ5MDAyODQwYTFhMTY0YjRiYWRjY2EiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2MiJ9", "expire_date": "2017-05-25T01:37:30.697Z"}}, {"model": "sessions.session", "pk": "y5size2sdvphqqpt6e5z3effn4wyknxd", "fields": {"session_data": "YjAwMmNiOWUwYTIxZDg0ZDQ5YTI4YWNlYTRkYWY3YzViODFkZmMzYjp7Imxhc3RfYWN0aXZpdHkiOjE0OTE5MTQ0NzUuMTM2MzEsIl9hdXRoX3VzZXJfaGFzaCI6IjllNDZjNTMzNDM3NjVjZTg3OWZjMTFkZTM5YmQ5ZTZhMGNkOTc5M2UiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=", "expire_date": "2017-04-25T12:41:15.155Z"}}, {"model": "sessions.session", "pk": "yak20ezmwtao8quobpz06duqnx3repcx", "fields": {"session_data": "MzkwNWE3YWM1NGQzZDU0ZTZhYTcxNjQ0YTY1YmYwZmU5NDk0ZjYzMDp7Imxhc3RfYWN0aXZpdHkiOjE0OTM3MjMzMjcuNDcxMjMyLCJfYXV0aF91c2VyX2hhc2giOiI4ODc3ZmY1NzliZjA0N2Q3YTBmMTZlMDkwNDAxODJhMTAyMWNlMWU1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-05-16T11:08:47.484Z"}}, {"model": "sessions.session", "pk": "yanj4oq777smruty3bed6kolg91w796c", "fields": {"session_data": "ZDkwMjExNTlhMTQ2NTBlNWQ1NDU3YzM5ZDBkYjY5NWExYzllM2NmMDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQ1NjA5MDUuMzI2NTYzLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoieEdtRyJ9", "expire_date": "2017-05-26T03:47:25.354Z"}}, {"model": "sessions.session", "pk": "yb65rpfv8lrcaked7zxbgafspb7o9rlk", "fields": {"session_data": "MzMxMTZkYWEwNTQ3YjZhYTQ4M2U5OGVkZDk0M2I2OTdlMzM5YmZiNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjliZTE0MDA2ZWQ1OTkwM2UxNjc5YzJiZjliNGQ1MzdkMzJlOTNiNzMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTAifQ==", "expire_date": "2017-05-16T13:27:14.836Z"}}, {"model": "sessions.session", "pk": "yeb028nrdmw33mbupdcyotslq84tbc93", "fields": {"session_data": "NjdiZWUzMjVmNzUwMTI5ZTI2ODJjMjE5NzE5ZWFjYTNiZDA4NTRlMDp7Il9hdXRoX3VzZXJfaGFzaCI6ImI0MzY3MDNhMTcyYmVhYzk1OTZiN2U4MDk2ZTAxZDVkY2VmODY4YmIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTgifQ==", "expire_date": "2017-05-21T04:14:52.139Z"}}, {"model": "sessions.session", "pk": "yf2rw2hv02d4obqgl8d1gn167062i08q", "fields": {"session_data": "Y2IxODA4YTk0MGFlMDE5N2FjM2VlNTc2YjYzYzZmOGNhODRlYTE2MDp7Il9hdXRoX3VzZXJfaGFzaCI6IjAyNGI3MzA1NDg3NDRmZDA4ZmRmODFhZTUyODg2YzFjMTU5NTMwMTgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjQifQ==", "expire_date": "2017-05-26T00:30:14.841Z"}}, {"model": "sessions.session", "pk": "yjy361zpu8izby4slxdhd7taab9hvut5", "fields": {"session_data": "NDBiZWJlNTBkYzcwNDkwMGFkMjAwZDE0OGZhM2Q5OTZhZDhjOGQ0ODp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTE0NzIzMzguMTgxMDc4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiQ1pzaCJ9", "expire_date": "2017-04-20T09:51:18.189Z"}}, {"model": "sessions.session", "pk": "ynp587z7ofi0ssbi92h13x25qp799pct", "fields": {"session_data": "ZmUzYWUzMzhiNDhiYzViMmFhMjVmYjRkMjY4OGQ5OGQxMWNmYjA3Yzp7Il9hdXRoX3VzZXJfaGFzaCI6IjhlYmI4ZDBmOGZjNDBjYzFhMWVlYWJlMWYwZDk3OGY5YmQ0MTIxY2QiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MiJ9", "expire_date": "2017-04-26T13:32:46.644Z"}}, {"model": "sessions.session", "pk": "yofzeytl9u77okeuo0040zoupsbzl1dk", "fields": {"session_data": "OThmZDdhNDVlMTZjZmQzMTM4YTkzNjA3NGQxMDViOWVlNzUwNWFlMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjQ5MDBmYWZkMjk0MWJjOWU4Zjc5ZTMyZDUyYzBlYmFiZTIyNjY2ZGMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNDAifQ==", "expire_date": "2017-05-13T05:41:58.052Z"}}, {"model": "sessions.session", "pk": "ypwml4auxh1b0plvr5d6jfbn89chrlxg", "fields": {"session_data": "MmViZDU4NmYxZGE4ZDJjZmE4YjU2ODI2MzJjNzdmMDRkMDEyMWFjYjp7Il9hdXRoX3VzZXJfaGFzaCI6IjM4NDdlNGZjNGU1NTRkZjIzNDdkM2EwZTZlNzA2YzhiOGIyYTViOTYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzOTIifQ==", "expire_date": "2017-05-21T06:55:18.131Z"}}, {"model": "sessions.session", "pk": "yq11x49pox0c8b06evc2x6psqabdcbzb", "fields": {"session_data": "OTU2YzVmM2NiZTMyYTE1MTAyMDcwMDRkMzdmOWE2YTRhMThkZmZjYjp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM4OTgzOTMuMDk1MjU2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiNWZDRyJ9", "expire_date": "2017-05-18T11:45:33.112Z"}}, {"model": "sessions.session", "pk": "yqtve7saoj33wl5orhvue0hrqkytphog", "fields": {"session_data": "YzQzNGJhOTk0ZjljMDcyMWYzYzk1OGNiZTY0YWVkOWRjN2U3NTI3Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU0ZTdkODliMmE1MjFkNmY1MzU3YTliMDVhMGQyMmI5YTE0OTJiNjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNDcifQ==", "expire_date": "2017-05-20T12:48:41.504Z"}}, {"model": "sessions.session", "pk": "ysa33yajgrstsb6f0jyg4c2l0ne3wdlb", "fields": {"session_data": "OGI4MjM3OWYzZTI0Y2NmOGZhNDMzNDRjZmM5NTJmYmI0NDM2MzY0YTp7Il9hdXRoX3VzZXJfaGFzaCI6IjE3ZjdjNDVhODE0NjNjMTU4ZWRkNTAxZTQ0NGRhOGJlMDJhMDE4YjMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjUifQ==", "expire_date": "2017-05-21T10:12:07.182Z"}}, {"model": "sessions.session", "pk": "ytr0oxsopv1w0bw2610g83ixvf2zekur", "fields": {"session_data": "YTI5YjdhN2EzZTk1ODU3NGE0M2M0MWVlMzkwZDBhYmU3NGZiYTUyNDp7Il9hdXRoX3VzZXJfaGFzaCI6ImIzYTAxNDZhMDM0M2Q5MWFhNWRkNzE0MzFkNmY3Y2E2MWJhZjJlZGQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI1NiJ9", "expire_date": "2017-04-01T09:44:56.835Z"}}, {"model": "sessions.session", "pk": "yufna7u20c1wowonc0jvbsq1ast2hm8f", "fields": {"session_data": "NjFjMDRjN2Y0ZTQwMmRhYjFlM2Q0ZTgxYWQ1YmI3ZDY3ZmFmYTJhZDp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM2NDg0NjYuNTQ4NjQ0LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiWEZyQyJ9", "expire_date": "2017-05-15T14:20:06.561Z"}}, {"model": "sessions.session", "pk": "ywt5qouvfmqwb6qr5bebl9e3wu5smyuu", "fields": {"session_data": "NDg3MWJiMjZhZTEyZDE4Y2FlOWNjMWY3NjQ4OTdkZWNkZTcwOTk3Nzp7Il9hdXRoX3VzZXJfaGFzaCI6ImViNDlmNDNkNDk3NzRlOGM4MDY2ZjdiNzNjOTU2ZDZiYThhNmMyN2EiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNzMifQ==", "expire_date": "2017-05-17T11:24:31.972Z"}}, {"model": "sessions.session", "pk": "yzbhjjj4pqne2lfj5x5w6xqbzqdthbod", "fields": {"session_data": "NTQyNTY2YjllYzQ0OTU3NTQ5MjcxYzBhOGVjN2Q2ODczZmNhYWQ2NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjA0YzA4ZThmY2U3OGU0N2I2MjI2OTM3MmQ2YTJhZTE2YzhlYzQxMWYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzMjkifQ==", "expire_date": "2017-05-19T15:16:51.765Z"}}, {"model": "sessions.session", "pk": "yzmzf9zuh69d4boccrs3qoq0mwhkzxtp", "fields": {"session_data": "NDIzMzhlOTMzNTE4ZGE5NDczYTAyZDI2OGFiMWQ1ZjYwNTZkMjQ4ODp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk3NTg4NDQuNjEzMzEsIl9kamFuZ29fY2FwdGNoYV9rZXkiOiJQNDIzIn0=", "expire_date": "2017-03-31T13:53:04.620Z"}}, {"model": "sessions.session", "pk": "z0hf8vblhpa1jot58s406ci8xykwgwpw", "fields": {"session_data": "Mzk3MzNkNDk3NTA4YThiY2UzZmY0Yzk3ZmFlMzQxM2FjYTM2ZjU3MTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQ0NzUxMTAuMTM5Njg1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiSGZ4RyJ9", "expire_date": "2017-05-25T03:57:30.149Z"}}, {"model": "sessions.session", "pk": "z1mkv4qr911g5f6quobz50rd5ikah1ju", "fields": {"session_data": "NmNlMTM3N2Q5MDVlY2FmMTBmZmI0YmE2OWVjYzAyOGU0OTAxNzFkYzp7Il9hdXRoX3VzZXJfaGFzaCI6ImIzZjRmNDc5MGQxZTcwNzc2MTkyM2MxM2RlNDc5MGZjMGYzYzI5NzIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNjYifQ==", "expire_date": "2017-05-19T14:23:59.262Z"}}, {"model": "sessions.session", "pk": "z3qti19gt5zol96k2xujr9pvdhl6uvjx", "fields": {"session_data": "YWFhOWU1ODhlNzA3ZDBmYjc2OGFjOTFmYzM5OTVmMTc3OTY0MDhiODp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiOWIzZWY5OTZjMDRiMGVkMjc1MDQxOWQ5MTA2MWM3MjI3ZWJjNWRlNCIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0ODk4MjA1MzAuMDAxNDIxLCJfYXV0aF91c2VyX2lkIjoiODkiLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiN3RhdiJ9", "expire_date": "2017-04-01T07:01:33.771Z"}}, {"model": "sessions.session", "pk": "z4j1tugblonpkd1vpao33aqwptfrlsfd", "fields": {"session_data": "ZWQ5ZDNhNWM5Yjg1M2I3MDBiNWNjZmFmMzJiZmI3NzAwMTNiZjUxMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhY2M3MTI1OWU2ZWU2NWY3MGE4NDNkM2NjNmE2ZjBiYmI1ZWY1MDAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTYifQ==", "expire_date": "2017-05-17T09:04:48.664Z"}}, {"model": "sessions.session", "pk": "zafhw1bskp2dya7b3e6n8c4h2uaono7l", "fields": {"session_data": "ODg0ZGM4MDA4MTI2MzdkOWQ2ZDBhZTkyZjVkYzQ5ZjQ1MWJjNDBhYzp7Il9hdXRoX3VzZXJfaGFzaCI6IjU4NjljMmRkZWU5Y2Q3NDBhNWQ2M2JjZmIyOTExNGQ3MDQxZWY2NzgiLCJfYXV0aF91c2VyX2lkIjoiMjMwIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQifQ==", "expire_date": "2017-05-21T03:52:05.672Z"}}, {"model": "sessions.session", "pk": "ze0g48ibez14ux8o43jxx00ifcyhqvl2", "fields": {"session_data": "MjRlMDE5ZmNkMWIzZDU4MmEzZDAxOWQ3NTcyNjExZDg5YjlhNjZiMjp7Il9hdXRoX3VzZXJfaGFzaCI6ImUwODUzODQ3YTk1YTYxY2QwODQ0ZDZiMTcxNWVmMDgyNDI3NzVmODEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxMTEifQ==", "expire_date": "2017-04-20T13:26:35.912Z"}}, {"model": "sessions.session", "pk": "zf1s39y4muejbmz4j8rt7k6crsjm1xdu", "fields": {"session_data": "MDUzMWY0ZjI4YWY1ZWQ3NDJjOTI1MTc1MmRiNmMzZjA0NjJkOTBhYTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTM5MTk4NzguMDYyMTAyLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiYTN5QyJ9", "expire_date": "2017-05-18T17:43:38.068Z"}}, {"model": "sessions.session", "pk": "zgq1ofpoxm9yxevbfmh9wnf2ypej0zws", "fields": {"session_data": "NTAyNmYwOTQ2Yjk4MzhlZWY5YTBmZmJlODdhOGQ1ZDgxZTM5NWUyZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImZiNTAwMTQyOTBlMjAzNWY2MjkyYTY1NzEwYjhhZGQ5OWNlNGVmNmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI2OSJ9", "expire_date": "2017-05-22T08:43:00.657Z"}}, {"model": "sessions.session", "pk": "zgur0b0n9y7j3nl65wzjmcr1p8wt39u3", "fields": {"session_data": "YTIyOWM2YTQyZWM1Y2MwMTE0OTExZGVmZGIwMDM4ODJmYzQ4ODVmOTp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiZjkxMmUyYTQ5ZDM3YzQwNmU1NWU2YmE2NDE1YWU2ZDEwMzMyOTEwYiIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTA5NTA2MTEuMjY1NTA5LCJfYXV0aF91c2VyX2lkIjoiNjAiLCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiYWNScSJ9", "expire_date": "2017-04-14T08:56:40.608Z"}}, {"model": "sessions.session", "pk": "zhxa7aix8v64sbj8hjrrbbtam6c993rc", "fields": {"session_data": "ZDgyNmE1NDIyYWQ5ZTRhNmU2ZWU2ZGM3Nzg3NWQyZDMxNGZlYTFiODp7Il9hdXRoX3VzZXJfaGFzaCI6IjU4NjljMmRkZWU5Y2Q3NDBhNWQ2M2JjZmIyOTExNGQ3MDQxZWY2NzgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMzAifQ==", "expire_date": "2017-05-12T05:43:24.856Z"}}, {"model": "sessions.session", "pk": "zi2bqwl3m8a6yfzaqbs51abzrl35ojua", "fields": {"session_data": "NzA1YjQ1NTliNWE2MTY1MmNjM2EzNTgxM2VjZTlkOTc3MDVmZDE0Mzp7Il9hdXRoX3VzZXJfaGFzaCI6IjI4NWY1NWQ2ODhmMTJjM2Q3YjYxMmZiZmJiNzQ4N2UyYTYxZmRkMTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjEifQ==", "expire_date": "2017-05-21T01:57:27.124Z"}}, {"model": "sessions.session", "pk": "zjkic2lbsbcjh1byw6z4gq44s6klu9rb", "fields": {"session_data": "MTA3ZjNiN2IwNGRjMDc0NzdiNTMyZGU4N2ZjYzk3Mzk5NTY0MDdkZjp7Il9hdXRoX3VzZXJfaGFzaCI6IjZiZGFmZDc1ZTA3ODdjMzBlOTE1ZTM4Njk1MjVhZjA0ZmJhMDE4MTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTIifQ==", "expire_date": "2017-05-20T06:56:20.290Z"}}, {"model": "sessions.session", "pk": "zmfdoyvhuc1hszg8vcsrtnswmkhdi9zt", "fields": {"session_data": "MGU3NTc1NmMyODVkNTEzM2RjYjkzOWNlZjgzMWRjN2M0ZTljY2U1MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImYyYzIyY2MwNmI0ZWFiZjNlYzA4ZTAxYzQzZTEwNGQzODNlMzI4MzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-28T09:09:48.743Z"}}, {"model": "sessions.session", "pk": "zmotmc2ovec0hhfz94fhs9ovg1fkvogt", "fields": {"session_data": "Nzc0NmQ5MzMwZTA5ZmM3YjlmNzAxNjM3NzU2ZWIxZWEwMGRmMDZmZjp7Il9hdXRoX3VzZXJfaGFzaCI6ImZjMmQ0M2RlNTU0NjZmNjhmMjEzYWIwNjM5ODc4MTk4NjBkNTk4ODAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI0MDMifQ==", "expire_date": "2017-05-23T10:32:28.373Z"}}, {"model": "sessions.session", "pk": "zmr37hwacg5x0pu4pxij3gtcj2nfrp65", "fields": {"session_data": "YmI5ZjE4OWRlZmMwZjkwYjE3ZTFiYTgyNjg1MzkxNjFiNDNjZjY4Mzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTE0NzIzNDYuMTE5ODY4LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiR1d3TiJ9", "expire_date": "2017-04-20T09:51:26.126Z"}}, {"model": "sessions.session", "pk": "zosv8b1gxl7h4oqdwlt8opidc3oayvff", "fields": {"session_data": "NGFiYjIwZWUxYTBhMWI2ZTY0NGY5MGJmYTdmOTE1N2NmYzU2NGU0Njp7Il9hdXRoX3VzZXJfaGFzaCI6ImU3YWNkZGIwN2FjMWNhNzBiNWEzMDgzM2VhZWFjODFjM2Y2MzFiNzQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMjMifQ==", "expire_date": "2017-05-20T07:38:37.204Z"}}, {"model": "sessions.session", "pk": "zphb07gp8lrywnmosogylbxlh7ie5p5p", "fields": {"session_data": "ZjRkZDU0MmYzYmE4ZWE1MzVlMGYzZTVjMzM2MmE2MDE3NmMxNWM1OTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxNzYwMjAuMTA5OTk2LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiNE92dCJ9", "expire_date": "2017-04-05T09:46:00.118Z"}}, {"model": "sessions.session", "pk": "zq9fymvnrwdyzvq7mqe9j5vj2v6gf5io", "fields": {"session_data": "ZDcyOTBlOWFkYmM5NDM0ZTc1OGI3ODE3ZDc1MWRiYTZmMDY5N2Q0MDp7Il9hdXRoX3VzZXJfaGFzaCI6Ijc2ZGU0NzYwNjZkYjVjNDE3ZDNiOTMzYjZlZTBlNDQ5YmM5N2Y3YmIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIzNDMifQ==", "expire_date": "2017-05-21T04:08:44.760Z"}}, {"model": "sessions.session", "pk": "zqjitxw6oyukf5t9fhoi9e14cjmc6kh5", "fields": {"session_data": "OThmMzEwOTcwM2YyNzNmNWFhMWViOGE4NTU4MTkzM2YzMGJhZjFiMTp7Imxhc3RfYWN0aXZpdHkiOjE0ODM0MjMzOTkuNjcyNzU4LCJfYXV0aF91c2VyX2hhc2giOiI5ZTQ2YzUzMzQzNzY1Y2U4NzlmYzExZGUzOWJkOWU2YTBjZDk3OTNlIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMSJ9", "expire_date": "2017-01-17T06:03:19.695Z"}}, {"model": "sessions.session", "pk": "zr9u0lh5tdjbv6sjeya5kbhnwfprxy86", "fields": {"session_data": "MGYzNzVlY2YzZjJhNmM3YWY1MDg2YWUwNDJhNDE1ODA4Y2YzZDgxMzp7Il9hdXRoX3VzZXJfaGFzaCI6ImE1YWVkY2JmOGRjYjIxNGRiYjJhMWYxMDYxM2RmMzUyOWJkZmE2ZTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTcifQ==", "expire_date": "2017-05-21T11:36:14.990Z"}}, {"model": "sessions.session", "pk": "zt54n9duoru97bj3fctohzxaha31li1t", "fields": {"session_data": "ZTU0ODMxOTgwMTIzZDM2MjNmNGM5ZGY5YjJmMDIwMmMzZDYwNzVlNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjZiYzQ2MjRkMjQ2NTdhZGE0YWE0YzkwYTY2YjhmMzMzOTQ2YTlhNjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNTEifQ==", "expire_date": "2017-05-21T03:42:19.681Z"}}, {"model": "sessions.session", "pk": "ztgau69v8fzjp12hrotcksnd18021goi", "fields": {"session_data": "MGIyYmIyOGQ0ZjZiYjcwZGI1MWQ0OWQ4NjMxYmU4MWU0MzkyOWMwNTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQyODgxMzIuNDk0NDk4LCJfZGphbmdvX2NhcHRjaGFfa2V5Ijoia3RaUCJ9", "expire_date": "2017-05-23T00:01:12.513Z"}}, {"model": "sessions.session", "pk": "zv6ppm745doj3bydikasbfmdqatfze4k", "fields": {"session_data": "MTMyODA3YWU1ZTVkN2UxMzE2NjA3MmM1ZDcwOTJkMzFkMjE2M2VhYzp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTAxOTI0NDIuMDk5NDY3LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoidnpiNSJ9", "expire_date": "2017-04-05T14:19:42.105Z"}}, {"model": "sessions.session", "pk": "zvhfoq5lrbvpa7yg8necombfsh323e3s", "fields": {"session_data": "N2IzODEwODNmMmQxOTc3YzhhNjc3NTQwNDBkYzA4NjZjMzU5YzExNDp7Il9hdXRoX3VzZXJfaGFzaCI6Ijc0MmMyNzJlY2E0ZTc5MWIxMDJiZmZmYzZkNzQ5NmZlODMzNGQzNTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyNDMifQ==", "expire_date": "2017-05-21T03:55:31.284Z"}}, {"model": "sessions.session", "pk": "zw9vgf9nc6isnbkdw1cj29x9wwote8iz", "fields": {"session_data": "MGYzNzVlY2YzZjJhNmM3YWY1MDg2YWUwNDJhNDE1ODA4Y2YzZDgxMzp7Il9hdXRoX3VzZXJfaGFzaCI6ImE1YWVkY2JmOGRjYjIxNGRiYjJhMWYxMDYxM2RmMzUyOWJkZmE2ZTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMTcifQ==", "expire_date": "2017-05-21T14:31:21.052Z"}}, {"model": "sessions.session", "pk": "zx8cslszmmb4vreznc7z8e1ywxblmg0x", "fields": {"session_data": "ZTdiN2M1NmVmMmI4MWE3Yjc0Y2VkZTIzZTc0ZjNlZTc1ZWQwNjAxOTp7Il9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTE1MTQ3MDMuMTQ3MzQ1LCJfZGphbmdvX2NhcHRjaGFfa2V5IjoiR2QyTyJ9", "expire_date": "2017-04-20T21:37:23.155Z"}}, {"model": "sessions.session", "pk": "zxm6vyx56zwk14rn71k70o2yl3jm1rcj", "fields": {"session_data": "MWQ0Njg1YjIzZTIzM2M1NzYwZjZhOWY1YTczMTkwYzA4YjRjNDVhZjp7Il9hdXRoX3VzZXJfaGFzaCI6ImVmOTI5YzhhOTc0N2YxNjg5ZTRmZWNhMTc5ZDllMTFkMDk3ZTJhYTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyODgifQ==", "expire_date": "2017-05-18T11:45:56.570Z"}}, {"model": "sessions.session", "pk": "zya373jhbcvu4oqndhc1kp3zqg2fukxp", "fields": {"session_data": "NTlkNGI2Y2U4ZjE0MTEzNzlmZWY2ZmZiZjNkMGE4NzQ4ZmQ1M2EyZjp7Il9hdXRoX3VzZXJfaGFzaCI6ImNjZGM2NDE5OTY0YzFmODkyNjY5ODE1MzE0ZjE4MDk2YjdiODI0N2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyOTAifQ==", "expire_date": "2017-05-21T03:56:06.610Z"}}, {"model": "sessions.session", "pk": "zynvfgyglel5viydp271f2uazxicl6sw", "fields": {"session_data": "NDE5YWEzYjI5MTU0YjZkODQ0OTdjMTcyOGY1MDM1MTA3Mjk1ZWU4OTp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiYWYxYzBhOWM4Y2Q1OGZiOWJjYWUxNzk0YjM1NGFjNmJiNGFkYTBhNSIsIl9kamFuZ29fY2FwdGNoYV9leHBpcmVzX3RpbWUiOjE0OTQwNzc0MzQuMjMyODg5LCJfYXV0aF91c2VyX2lkIjoiMzUwIiwiX2RqYW5nb19jYXB0Y2hhX2tleSI6ImZWTXYifQ==", "expire_date": "2017-05-20T13:52:59.905Z"}}, {"model": "account.user", "pk": 1, "fields": {"password": "pbkdf2_sha256$24000$MNNOYHGyixtd$Y7yMisTvbLRNB1fIXpDFA+CzAfUDJWWnYrXdd7QxPwI=", "last_login": "2017-05-14T07:12:26.115Z", "username": "root", "real_name": "root", "email": "root@oj.com", "create_time": "2016-12-01T05:38:14.931Z", "admin_type": 2, "problems_status": "{\"problems\":{\"2295\":2,\"2294\":1,\"2323\":1,\"1502\":1,\"26\":1,\"2320\":1,\"2326\":1,\"2325\":1,\"2324\":1,\"2329\":1,\"2328\":1,\"1\":1,\"3\":1,\"2\":1,\"5\":2,\"4\":1,\"7\":1,\"6\":1,\"2367\":1,\"1561\":1,\"2365\":1,\"2364\":1,\"2363\":1,\"2362\":1,\"2361\":1,\"2360\":1,\"2368\":1,\"2347\":1,\"8\":2,\"2366\":1,\"1811\":1,\"2330\":1,\"2331\":1,\"2332\":1,\"2318\":1,\"2319\":1,\"2316\":1,\"2317\":1,\"1724\":1,\"2315\":1,\"1722\":1,\"34\":2,\"2358\":1,\"2359\":1,\"1000\":1,\"2357\":1,\"1001\":1,\"2321\":1},\"contest_problems\":{\"51\":1,\"45\":1,\"37\":2,\"41\":1,\"1\":2,\"2\":1,\"5\":1,\"71\":2,\"9\":1,\"74\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "461175c9813b3da17809f75f0b6e8433", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 2, "fields": {"password": "pbkdf2_sha256$24000$e0ujT2Te4NFk$t/cvr37fHxG85L9ct9uyrNATRUZ0aNyqH4CDmKX+HCg=", "last_login": "2017-05-14T02:17:58.201Z", "username": "*handsomehow", "real_name": "handsomehow", "email": "673712786@qq.com", "create_time": "2016-12-04T02:05:00.388Z", "admin_type": 1, "problems_status": "{\"problems\":{\"1722\":1,\"1723\":1,\"1721\":2,\"1\":1,\"3\":1,\"2\":1,\"8\":1},\"contest_problems\":{\"25\":1,\"26\":2,\"37\":1,\"39\":1,\"1\":1,\"2\":1,\"9\":1,\"8\":1,\"74\":1}}", "reset_password_token": "636336d716e62d2c393d878adf6c3268", "reset_password_token_create_time": "2017-03-22T11:09:13.503Z", "auth_token": null, "two_factor_auth": false, "tfa_token": "52389c82214db4dee50e416426d37bd7", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 3, "fields": {"password": "pbkdf2_sha256$24000$O20ufin92pBW$whVLysfNTCAlIOfarUyNF+IlGhZUiqLJs5XEN5Rf8R0=", "last_login": "2017-03-04T02:23:49.273Z", "username": "Sinit", "real_name": "\u5218\u660c\u6e90", "email": "3493482014@qq.com", "create_time": "2016-12-11T08:32:07.742Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"3\":1,\"2\":1,\"5\":1,\"4\":1,\"7\":1,\"6\":1,\"8\":1},\"contest_problems\":{\"2\":1,\"4\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 4, "fields": {"password": "pbkdf2_sha256$24000$3W1giiwQAoTq$chGvKuN/Fr+hktqPviJIVwRxSWTcbJRkgO/QtJiM9mE=", "last_login": "2017-05-03T11:10:17.517Z", "username": "suicca", "real_name": "wudengke", "email": "578970498@qq.com", "create_time": "2016-12-12T07:44:43.595Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1502\":1,\"1425\":2,\"28\":1,\"2294\":1,\"1\":1,\"3\":1,\"2\":1,\"4\":1,\"1000\":1},\"contest_problems\":{\"11\":2,\"10\":1,\"24\":1,\"20\":2,\"21\":1,\"17\":1,\"23\":2,\"19\":2,\"18\":2,\"22\":1,\"3\":1,\"2\":2,\"5\":1,\"4\":1,\"7\":1,\"6\":1,\"9\":1,\"15\":1,\"8\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "1f63c45350474278f9694c86aa2176bd", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 5, "fields": {"password": "pbkdf2_sha256$24000$jI4pQvN98fpD$fXf3JnHNuK3r2KE0uyYAsUGcESQcTC810I5+hoLGp4g=", "last_login": "2017-05-12T07:03:51.835Z", "username": "Cyberdream", "real_name": "\u738b\u79cb\u950b", "email": "821199012@qq.com", "create_time": "2016-12-20T08:17:34.837Z", "admin_type": 0, "problems_status": "{\"problems\":{\"26\":1,\"27\":1,\"17\":1,\"23\":1,\"33\":1,\"32\":1,\"31\":1,\"30\":1,\"28\":1,\"29\":1,\"19\":1,\"3\":1,\"2368\":1,\"2367\":1,\"2364\":1,\"2363\":1,\"2362\":1,\"2361\":1},\"contest_problems\":{\"24\":1,\"10\":1,\"20\":2,\"14\":1,\"17\":1,\"23\":2,\"33\":1,\"18\":2,\"22\":1,\"6\":2,\"8\":1,\"21\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 6, "fields": {"password": "pbkdf2_sha256$24000$dBEpdmZQK3KP$JaFcx+4PD+BoJ2XD30MUkWt5t6/VuX+ogyCrQdquJJ8=", "last_login": "2017-01-03T10:44:03.221Z", "username": "\u5403\u5916\u5356\u771f\u7684\u4f1a\u80d6", "real_name": "\u5f20\u821c\u5b87", "email": "591826160@qq.com", "create_time": "2017-01-03T10:43:52.744Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": "6b037bb4cdeb72a5c873f763dc4927ef", "reset_password_token_create_time": "2017-03-15T05:05:31.141Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 7, "fields": {"password": "pbkdf2_sha256$24000$BcKmRBDlZaYE$Y93A7cpicnmuoGni4EHobgYQGZBUjSdwaI/MX60S3DQ=", "last_login": "2017-04-06T13:01:30.735Z", "username": "luckybird", "real_name": "\u5510\u5f8b", "email": "513789800@qq.com", "create_time": "2017-03-01T14:27:34.193Z", "admin_type": 1, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 8, "fields": {"password": "pbkdf2_sha256$24000$nytrz1g9ej4R$piS1DAtYN7vYSeGyy6/AIaGlYX3fUxeEnehpWq+DLHs=", "last_login": "2017-05-07T14:41:39.477Z", "username": "RFisher", "real_name": "\u66fe\u662d\u701a", "email": "supermen12345@126.com", "create_time": "2017-03-03T12:24:21.193Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2365\":1},\"contest_problems\":{\"18\":2,\"2\":1,\"4\":2,\"22\":1,\"7\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 9, "fields": {"password": "pbkdf2_sha256$24000$W1hvke2a57XI$YJrZz23Iho7yrmDW8qzxAQPAWH2X6XDRywTIa//P0Hk=", "last_login": "2017-05-07T11:33:20.953Z", "username": "bkn", "real_name": "\u5305\u9534\u6960", "email": "674631410@qq.com", "create_time": "2017-03-04T02:28:10.421Z", "admin_type": 0, "problems_status": "{\"problems\":{\"26\":1,\"23\":1,\"32\":1,\"29\":2,\"2295\":1,\"1\":1,\"3\":1,\"2\":1,\"2366\":2,\"1001\":1},\"contest_problems\":{\"11\":1,\"10\":1,\"13\":1,\"12\":1,\"15\":1,\"21\":1,\"22\":1,\"19\":1,\"3\":1,\"2\":1,\"5\":1,\"4\":1,\"7\":1,\"6\":1,\"9\":1,\"20\":2,\"17\":2,\"24\":1,\"8\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 10, "fields": {"password": "pbkdf2_sha256$24000$aMVkNje7c4ZZ$l3vrG1oVGbZdF8Eo8AqFYQfe+R6m/R3dHCsmlzh44t8=", "last_login": "2017-05-14T02:32:41.716Z", "username": "2016112596", "real_name": "\u5218\u6625\u6d0b", "email": "1293595318@qq.com", "create_time": "2017-03-04T02:40:18.643Z", "admin_type": 0, "problems_status": "{\"problems\":{\"11\":1,\"26\":1,\"12\":2,\"15\":1,\"17\":1,\"23\":2,\"2317\":2,\"28\":2,\"1\":1,\"3\":1,\"2\":1,\"4\":1,\"2362\":1},\"contest_problems\":{\"24\":1,\"27\":1,\"20\":2,\"21\":1,\"22\":1,\"43\":1,\"41\":1,\"3\":2,\"2\":1,\"5\":2,\"4\":1,\"6\":1,\"9\":1,\"8\":1,\"75\":1,\"74\":1,\"11\":2,\"10\":1,\"13\":2,\"38\":1,\"19\":2,\"18\":2,\"37\":1,\"35\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 11, "fields": {"password": "pbkdf2_sha256$24000$efkUD4PoaMJM$6VWR2rvqwKe1tm9aLZeLCj6lLD9uswnjR+QklO91SBA=", "last_login": "2017-05-07T03:59:09.945Z", "username": "swjtuszw", "real_name": "\u77f3\u5fd7\u4e07", "email": "1020143934@qq.com", "create_time": "2017-03-04T03:21:23.252Z", "admin_type": 0, "problems_status": "{\"problems\":{\"26\":1,\"29\":1,\"1\":1,\"3\":1,\"2\":1,\"5\":1,\"4\":1,\"7\":1,\"6\":1,\"8\":1},\"contest_problems\":{\"11\":1,\"10\":1,\"20\":2,\"21\":1,\"22\":2,\"23\":2,\"6\":1,\"2\":1,\"5\":2,\"4\":1,\"7\":1,\"24\":1,\"9\":1,\"15\":2,\"17\":2,\"8\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "17d87462571deee884d200ff7197c9c9", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 12, "fields": {"password": "pbkdf2_sha256$24000$265ABHBcewKf$TpCB2SVJ0Jn4OofRUneaqbl+g48rbRCSch/DWogGkNw=", "last_login": "2017-03-22T09:06:37.417Z", "username": "wwwyxy=v=", "real_name": "\u4fde\u5fc3\u6109", "email": "1050027670@qq.com", "create_time": "2017-03-04T22:44:38.488Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"24\":1,\"10\":2,\"21\":1,\"17\":1,\"23\":1,\"22\":1,\"4\":1,\"7\":1,\"6\":1,\"9\":1,\"8\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 13, "fields": {"password": "pbkdf2_sha256$24000$KM7G3A6tDbyB$NoYJ43vwdl0NJwLL+HMQLB7uiqsIycsBb+o/KrGvo8s=", "last_login": "2017-03-18T08:30:59.842Z", "username": "daremoshiranai", "real_name": "\u5355\u5bcc\u839b", "email": "859358830@qq.com", "create_time": "2017-03-04T22:47:30.401Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"2\":1,\"4\":1,\"6\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "4254926ea0dfffeafcb009fd60c477ea", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 14, "fields": {"password": "pbkdf2_sha256$24000$lfJj9nhRWRAp$yzMGLO8berGY/8cH4evb4Ck9NaUTfDZUCPsoP0WHVV4=", "last_login": "2017-05-14T03:16:06.670Z", "username": "DDullahan", "real_name": "\u5f20\u821c\u5b87", "email": "DDullahan@163.com", "create_time": "2017-03-05T00:47:43.779Z", "admin_type": 0, "problems_status": "{\"problems\":{\"3\":1,\"29\":1,\"1000\":1},\"contest_problems\":{\"11\":1,\"10\":1,\"13\":1,\"15\":2,\"17\":1,\"22\":1,\"18\":2,\"6\":1,\"3\":2,\"2\":1,\"4\":1,\"7\":1,\"24\":1,\"9\":1,\"20\":2,\"8\":1,\"21\":1}}", "reset_password_token": "d55a04a904ce5eb6532a2dd2b6db2356", "reset_password_token_create_time": "2017-03-15T05:04:15.767Z", "auth_token": null, "two_factor_auth": false, "tfa_token": "116a934019380e8152829c560c3660ab", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 15, "fields": {"password": "pbkdf2_sha256$24000$zwRKMzyrj4vk$WW5veDd2wUobffPcYEWeIE1776F/FSy1pU9cXSAwma4=", "last_login": "2017-04-20T09:55:27.339Z", "username": "pipapa", "real_name": "yezhengmao", "email": "yezhengmaolove@163.com", "create_time": "2017-03-06T11:41:40.758Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"11\":1,\"10\":1,\"13\":2,\"15\":2,\"3\":2,\"2\":1,\"4\":2,\"7\":1,\"6\":1,\"9\":1,\"8\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "4f6c19c6a4242b2f1a0910363f4f22be", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 16, "fields": {"password": "pbkdf2_sha256$24000$INwRfc2vGoiD$jFZSHRvaGXlJAuJiObAqISwEaAOk2yjyLlrxu6KqEfA=", "last_login": "2017-05-05T12:48:08.498Z", "username": "pmketernal", "real_name": "\u5415\u5143\u5eb6", "email": "1115494949@qq.com", "create_time": "2017-03-09T11:10:34.463Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": "0905e83a6d1d86cbbafcb9e7f4a3b03a", "reset_password_token_create_time": "2017-03-14T16:04:14.927Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 17, "fields": {"password": "pbkdf2_sha256$24000$AiMByQ1oT9US$UkVRls08G0MfDSEaR8s4Xygvq82LvqG/JoXdRQKmEcg=", "last_login": "2017-05-04T14:09:08.175Z", "username": "zeeyu", "real_name": "xzy", "email": "724023053@qq.com", "create_time": "2017-03-09T13:22:13.292Z", "admin_type": 0, "problems_status": "{\"problems\":{\"8\":2,\"31\":2},\"contest_problems\":{\"11\":1,\"10\":1,\"38\":1,\"37\":1,\"43\":1,\"41\":1,\"27\":1,\"4\":1,\"24\":1,\"9\":1,\"2\":2,\"8\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 18, "fields": {"password": "pbkdf2_sha256$24000$V3WunAidi315$olsK9ooxThlqOVAL4kYEWD3+eMeos77vYzVVDczBHqE=", "last_login": "2017-03-09T13:22:47.978Z", "username": "ochocw", "real_name": "1", "email": "1@qq.com", "create_time": "2017-03-09T13:22:41.392Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"3\":1,\"2\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 19, "fields": {"password": "pbkdf2_sha256$24000$0fjMANMs6imX$DgS+bPJomTH0dgn4u3V0ndyFW/HxBbFzWiuz20sQTNw=", "last_login": "2017-05-14T03:48:18.486Z", "username": "847891840", "real_name": "\u90d1\u8d5b", "email": "847891840@qq.com", "create_time": "2017-03-14T13:55:20.038Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"3\":1,\"2\":1,\"28\":1,\"4\":1},\"contest_problems\":{\"24\":1,\"10\":1,\"12\":1,\"20\":2,\"14\":1,\"17\":1,\"23\":2,\"19\":2,\"18\":2,\"22\":1,\"9\":1,\"8\":1,\"21\":1}}", "reset_password_token": "78500b199c7a738f20247541c39dcb53", "reset_password_token_create_time": "2017-04-26T13:40:06.325Z", "auth_token": null, "two_factor_auth": false, "tfa_token": "2c8088a9ebf73b5f1b48a94f536bd12e", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 20, "fields": {"password": "pbkdf2_sha256$24000$KMPleKza7Def$ksKowl5Nji3RgKcqOR66ougeCMFcwTq0btbYmvNYH8M=", "last_login": "2017-03-17T05:32:15.007Z", "username": "469487593", "real_name": "\u738b\u4e00\u5ddd", "email": "469487593@qq.com", "create_time": "2017-03-14T13:56:42.414Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"10\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 21, "fields": {"password": "pbkdf2_sha256$24000$uPMtPi64ynuP$RUnZORdPSuOpdB+BCe1/5bNIAQqJx/Agf4QDEJgEHxo=", "last_login": "2017-03-14T13:58:32.551Z", "username": "\u6e05\u98ce", "real_name": "\u8c2d\u5e86\u534e", "email": "136214818@qq.com", "create_time": "2017-03-14T13:58:15.721Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 22, "fields": {"password": "pbkdf2_sha256$24000$QfhWS4iK0HcT$VI+kY40g6iX0TsLoxx5EeSZB4NuGS8ZIgFVEVQS6UYc=", "last_login": "2017-03-14T13:59:36.677Z", "username": "Siri", "real_name": "\u674eCR", "email": "2162399461@qq.com", "create_time": "2017-03-14T13:59:17.926Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 23, "fields": {"password": "pbkdf2_sha256$24000$6nyWZjHV5Pm4$waY1ewtCSBeq5B+mzO/kJaLLvz3gvSRchCUSeN2MCsc=", "last_login": "2017-03-23T05:53:50.274Z", "username": "LittlePea", "real_name": "\u6c5f\u73b2\u65b0", "email": "jianglingxin@aliyun.com", "create_time": "2017-03-14T14:00:50.452Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"24\":1,\"10\":1,\"13\":1,\"14\":1,\"17\":2,\"9\":1,\"8\":1,\"21\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "5cab6688fb7d516f5137aeece4cf9ee5", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 24, "fields": {"password": "pbkdf2_sha256$24000$3sY09qWhlz9Z$EYYrXtrY1M2y8FNNcEaw5nT/qVIc/Yuw8+m77dcKV+4=", "last_login": "2017-05-14T03:19:42.945Z", "username": "ACM2016112633", "real_name": "\u77f3\u5fd7\u4e07", "email": "2226399641@qq.com", "create_time": "2017-03-14T14:22:32.951Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1001\":2,\"1000\":1},\"contest_problems\":{\"8\":1,\"27\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 25, "fields": {"password": "pbkdf2_sha256$24000$xS9h0tSGKHDb$TAsx8BhkUsR7glhK16RS5/2kxFbvqaRmxnAjGUvnnRM=", "last_login": "2017-03-18T07:01:05.980Z", "username": "ACM2016112408", "real_name": "\u6881\u5e08\u6021", "email": "409292909@qq.com", "create_time": "2017-03-14T14:22:55.102Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 26, "fields": {"password": "pbkdf2_sha256$24000$DUy1izcbNjEA$Vk9pzQiw2TpPtFcKGvakg+1VK9ZeceP6h+75fRCJ3qQ=", "last_login": "2017-03-26T07:48:37.702Z", "username": "nine", "real_name": "\u7533\u8d5b", "email": "2543665417@qq.com", "create_time": "2017-03-14T14:25:13.500Z", "admin_type": 0, "problems_status": "{\"problems\":{\"18\":1,\"30\":2,\"29\":2,\"17\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 27, "fields": {"password": "pbkdf2_sha256$24000$vizK6NhzIqiz$D3h907RojiECP2teL/WMtb2ihQwNzCWpajzFdwROCn0=", "last_login": "2017-03-28T14:52:39.324Z", "username": "Herlobster", "real_name": "\u53f2\u6668\u9633", "email": "529870777@qq.com", "create_time": "2017-03-14T14:29:44.003Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"24\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 28, "fields": {"password": "pbkdf2_sha256$24000$w11wk24HrgGK$o8/wORa4H6al6+RABNy6jjc+dz7fb7s4ExyDizLCy+E=", "last_login": "2017-03-18T06:16:26.182Z", "username": "\u674e\u9752\u6625", "real_name": "\u674e\u9752\u6625", "email": "2558286846@qq.com", "create_time": "2017-03-14T14:30:12.935Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":2},\"contest_problems\":{\"17\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 29, "fields": {"password": "pbkdf2_sha256$24000$FLJhf7OctHEB$iKDoyBEr3HevY+TfMVLjMPWoZB0SIhRbJg8qzxtqiFM=", "last_login": "2017-03-18T03:01:37.894Z", "username": "\u5eb7\u4e66\u94ed", "real_name": "\u5eb7\u4e66\u94ed", "email": "626289512@com.cn", "create_time": "2017-03-14T14:32:35.018Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 30, "fields": {"password": "pbkdf2_sha256$24000$sDSPK1IFnu9S$2UxkPfNfbLseRLbI9p9nLnbItD0f/tpBDo8/Y3U24Fw=", "last_login": "2017-03-14T14:32:54.631Z", "username": "Aoba", "real_name": "\u9ec4\u57a0\u94a6", "email": "nadph513@outlook.com", "create_time": "2017-03-14T14:32:44.266Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 31, "fields": {"password": "pbkdf2_sha256$24000$VI2oH6ub9Wpt$OOkNm7jD9jdTqotjBmYahv852Ib12FN9zFd3CQqYGzo=", "last_login": "2017-03-14T14:42:23.623Z", "username": "ACM2015111811", "real_name": "\u738b\u73c2", "email": "1059135024@qq.com", "create_time": "2017-03-14T14:42:03.130Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 32, "fields": {"password": "pbkdf2_sha256$24000$Kn3r4XMBVVxI$/SFNaklcHDGi1abIl7+7teigLKVHKJ6w9Z+S8e7Dtgc=", "last_login": "2017-05-07T04:06:16.987Z", "username": "ACM2015114716", "real_name": "\u53f2\u6668\u9633", "email": "sher529870777@sina.cn", "create_time": "2017-03-14T14:47:23.616Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"24\":1,\"21\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 33, "fields": {"password": "pbkdf2_sha256$24000$fGYKQFX7IRl3$KmoMSSvA/R52T9WMww1HzGY3u2uNC4iLfhuZG7t5yVk=", "last_login": "2017-03-14T15:20:44.906Z", "username": "mazhe", "real_name": "\u9a6c\u54f2", "email": "1605395610@qq.com", "create_time": "2017-03-14T15:20:31.072Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 34, "fields": {"password": "pbkdf2_sha256$24000$ygClq1XXOo5b$S3387jQ3PYG8GRd5bEkqRtXbuMO30ORLIaCLzhF6hsY=", "last_login": "2017-03-15T04:30:34.861Z", "username": "ACM2016112430", "real_name": "zxy", "email": "951648699@qq.com", "create_time": "2017-03-15T04:30:21.226Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"2\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 35, "fields": {"password": "pbkdf2_sha256$24000$RL0hBry3s21V$bcsjCeOlLdzR8AC1TlCGNUcG9t67RkB85EmqXrF5HsM=", "last_login": "2017-05-07T06:57:23.337Z", "username": "ACM2015114575", "real_name": "\u5f90\u9648\u51ef", "email": "862697854@qq.com", "create_time": "2017-03-15T04:41:23.493Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": "4631406523bd93b2f0a284cf29de8e8c", "reset_password_token_create_time": "2017-05-07T06:51:53.780Z", "auth_token": null, "two_factor_auth": false, "tfa_token": "d648970305b013c02f7cfeae35a7e1a7", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 36, "fields": {"password": "pbkdf2_sha256$24000$5Rr4UTMectkd$6D9Q8MxeY+c97tdIKkLQAWYEToyywAgRCWo5jEYu2Gw=", "last_login": "2017-03-16T06:47:13.852Z", "username": "KKK", "real_name": "\u5218\u946b", "email": "1245745035@qq.com", "create_time": "2017-03-15T04:57:55.746Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"11\":1,\"10\":1,\"21\":2,\"17\":2,\"24\":1,\"9\":1,\"8\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 37, "fields": {"password": "pbkdf2_sha256$24000$nYde4LL2NKKI$zAi2oYMXJx0YaazdswknUSDvKe5vtc0xj/PxgAn8W3U=", "last_login": "2017-03-15T05:01:31.935Z", "username": "\u96e8\u591c", "real_name": "\u9773\u7ee7\u7855", "email": "1300825626@qq.com", "create_time": "2017-03-15T05:01:08.965Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"9\":2,\"8\":2,\"17\":2,\"10\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 38, "fields": {"password": "pbkdf2_sha256$24000$U3RgM8ERnyOR$pRvplwFPNlxP2WAHy/hqpvVknmTK5GwxBi/b/vj22x0=", "last_login": "2017-03-18T06:34:56.872Z", "username": "IMloser", "real_name": "\u8042\u81fb", "email": "1145250434@qq.com", "create_time": "2017-03-15T05:08:08.359Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"8\":1,\"17\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 39, "fields": {"password": "pbkdf2_sha256$24000$zf76G2qTrpPu$3rRuxIqUVZ+fg5mHFDb2zxD8VIgZ4k8fNsk34fexKxs=", "last_login": "2017-05-07T07:35:59.397Z", "username": "loving", "real_name": "\u8d75\u6cfe\u9716", "email": "1183081346@qq.com", "create_time": "2017-03-15T06:33:57.698Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 40, "fields": {"password": "pbkdf2_sha256$24000$4GVIxXeVGzqZ$vtlZeipxbkDfQaeo+jF9JVTF25fq2ioTUhVRZPpNP0w=", "last_login": "2017-03-15T08:31:12.044Z", "username": "heiheihei", "real_name": "\u90ed\u4e7e\u5764", "email": "1413601086@qq.com", "create_time": "2017-03-15T08:30:48.763Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2\":2},\"contest_problems\":{\"10\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 41, "fields": {"password": "pbkdf2_sha256$24000$emLJs118f5Qo$PoO2/lMlpAU+ieFR+EYoYyP1Uheij9Ad7dozsuxOgQU=", "last_login": "2017-03-15T11:44:35.098Z", "username": "qwe", "real_name": "what", "email": "1322374083@qq.com", "create_time": "2017-03-15T10:41:31.532Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"9\":1,\"10\":1,\"11\":2,\"8\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 42, "fields": {"password": "pbkdf2_sha256$24000$U9YutDdgjKaQ$C4Nqd7sOobln3xZhEhBzcIoZNNbemqEbgaA1eE5lGKE=", "last_login": "2017-04-14T07:55:02.570Z", "username": "?", "real_name": "1", "email": "123@qq.com", "create_time": "2017-03-15T12:27:16.560Z", "admin_type": 0, "problems_status": "{\"problems\":{\"11\":2,\"12\":2,\"1810\":2,\"1811\":1},\"contest_problems\":{\"16\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 43, "fields": {"password": "pbkdf2_sha256$24000$fdwoKpFYyPSg$XMlc6wA1SyXSMjMv/kD6Pc1JHyr4rk65sntGFizGtck=", "last_login": "2017-03-18T04:05:51.775Z", "username": "ACM2016112632", "real_name": "\u9ec4\u6cf0\u5317", "email": "454257312@qq.com", "create_time": "2017-03-15T13:23:06.812Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1},\"contest_problems\":{\"24\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 44, "fields": {"password": "pbkdf2_sha256$24000$KuoeWlYcVOsW$/dw5GXwVPBuSPuZVsshDcouzRz6j0McdKIaD4a9ZA/I=", "last_login": null, "username": "3.145926", "real_name": "\u5218", "email": "943159380@qq.com", "create_time": "2017-03-15T13:31:07.990Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": "6038056a91dd85dd02317589bd5ea8da", "reset_password_token_create_time": "2017-03-15T13:32:04.297Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 45, "fields": {"password": "pbkdf2_sha256$24000$Wl58MfZubuaj$jqZTzjDMPt7izQJqBb+zBqjAvCQiytA960dfKXfmUdI=", "last_login": "2017-03-15T13:35:06.874Z", "username": "acm2016112446", "real_name": "\u9648\u6167\u806a", "email": "297124268@qq.com", "create_time": "2017-03-15T13:34:56.652Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"2\":1,\"15\":2},\"contest_problems\":{\"24\":1,\"21\":2,\"22\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 46, "fields": {"password": "pbkdf2_sha256$24000$B4recMXxwsD3$FOU24EG1KIdTxwfz/EB/B6AaTcuI+AfwPNVju4M5T/0=", "last_login": "2017-03-15T13:35:26.713Z", "username": "31415926", "real_name": "\u5218", "email": "2574978320@qq.com", "create_time": "2017-03-15T13:35:16.318Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"8\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "4c4fb314c353eeceafb6cdf505a92df6", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 47, "fields": {"password": "pbkdf2_sha256$24000$UmUSUJyufPCL$7ogoh94/lQtFtoy+ozy54999MGatXZnjU9xuPNKxrHs=", "last_login": "2017-05-06T15:58:16.056Z", "username": "luohen", "real_name": "lhw", "email": "1206514319@qq.com", "create_time": "2017-03-15T14:24:36.545Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2352\":2,\"1000\":1},\"contest_problems\":{\"9\":1,\"10\":1,\"27\":2,\"8\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 48, "fields": {"password": "pbkdf2_sha256$24000$nidDX1AwYjxK$u2xyuzzXst6+3SzaD6ScmiPZsUQdgXjlfJP2U/gzhsI=", "last_login": null, "username": "newline", "real_name": "\u674e\u8fbe\u8d24", "email": "771039534@qq.com", "create_time": "2017-03-16T05:12:24.679Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": "1e536e519b0b4b01ef39f36d707d2947", "reset_password_token_create_time": "2017-03-16T05:13:34.882Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 49, "fields": {"password": "pbkdf2_sha256$24000$eQop7ynI8nZY$6BUKjgWoFBweCnA+0SZT7bnr3rpwYVg6DGFBdAy0oFk=", "last_login": "2017-04-20T11:59:54.516Z", "username": "2016112209", "real_name": "\u674e\u8fbe\u8d24", "email": "qq771039534@163.com", "create_time": "2017-03-16T05:18:05.433Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1559\":1,\"18\":2,\"1\":1,\"2\":1,\"1039\":2,\"1562\":1},\"contest_problems\":{\"9\":1,\"24\":1,\"20\":1,\"17\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 50, "fields": {"password": "pbkdf2_sha256$24000$aMRMm5YiEYIy$jNEgWLE99fs7N//WNMSF0gZPqbhRHFMyEpQws6XvJqI=", "last_login": "2017-03-16T05:27:16.939Z", "username": "ACM2016112675", "real_name": "\u9ec4\u96e8\u5a77", "email": "1057811630@qq.com", "create_time": "2017-03-16T05:26:57.345Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 51, "fields": {"password": "pbkdf2_sha256$24000$3XTflQ1XLmSn$TkuUJRUMduX8tBdTHno1Zu/vZw+Pqvk6QYmlD6UJeNw=", "last_login": "2017-04-28T05:18:50.025Z", "username": "ACM2016112207", "real_name": "\u7956\u8f69", "email": "554387008@qq.com", "create_time": "2017-03-16T05:38:54.590Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1559\":1,\"1\":1,\"3\":1,\"2\":1,\"1562\":1,\"1000\":1},\"contest_problems\":{\"24\":1,\"10\":2,\"20\":1,\"17\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 52, "fields": {"password": "pbkdf2_sha256$24000$XiYhO1Ncpwfd$wZL9a6cVIoM3PD3tPlsedK8gD3YYkptfgGjNu917Emg=", "last_login": "2017-03-16T07:35:28.999Z", "username": "15-\u4f53\u80b2-\u5f20\u821c\u5b87", "real_name": "\u5f20\u821c\u5b87", "email": "zsy@acm.swjtu.com", "create_time": "2017-03-16T07:35:09.037Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 53, "fields": {"password": "pbkdf2_sha256$24000$VriqMWksVv0T$XD0nkq0mqCINICvM/b9vdutcdJdD0eiZZ/TfdkU8BAw=", "last_login": "2017-03-16T14:19:25.601Z", "username": "\u67d2\u53f7", "real_name": "\u674e\u5fd7\u9065", "email": "15236608974@163.com", "create_time": "2017-03-16T08:36:42.795Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"8\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 54, "fields": {"password": "pbkdf2_sha256$24000$faQtRA5uugYB$0goOVKKiZB+IJh7D2Jpe/BUHb/bbVHUfYRDVqZH6tnE=", "last_login": "2017-03-16T08:48:05.358Z", "username": "ACM2015111617", "real_name": "\u5f6d\u5b50\u901a", "email": "935887008@qq.com", "create_time": "2017-03-16T08:47:47.452Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": "92ab2dbd76d90216f54e5d7534fe3023", "reset_password_token_create_time": "2017-05-06T05:48:14.895Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 55, "fields": {"password": "pbkdf2_sha256$24000$IPPcKdTn8dV0$OkrVRUllmnj1Oa2Yv8VRRA9oIzFZRraqM64lorX4TrE=", "last_login": "2017-05-09T12:09:28.364Z", "username": "cherrryt", "real_name": "\u5510\u5a67\u5c27", "email": "1569030302@qq.com", "create_time": "2017-03-16T09:34:42.237Z", "admin_type": 0, "problems_status": "{\"problems\":{\"19\":2,\"2316\":1,\"2323\":1,\"2366\":2,\"2317\":1},\"contest_problems\":{\"9\":1,\"8\":2,\"27\":2,\"10\":2,\"24\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 56, "fields": {"password": "pbkdf2_sha256$24000$2rWr3P4SKXSa$ctD7Z+csYZLpHr1WuubWoFKutWSJd2p7ShEbVmnW2+w=", "last_login": "2017-05-07T03:38:00.657Z", "username": "\u6d77\u4e0a\u7075\u5149", "real_name": "\u8096\u6e1d", "email": "2356702206@qq.com", "create_time": "2017-03-16T11:00:00.452Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"3\":1,\"2\":1,\"4\":2,\"1000\":1},\"contest_problems\":{\"9\":1,\"8\":1,\"10\":2,\"17\":2,\"24\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 57, "fields": {"password": "pbkdf2_sha256$24000$9lCZunxSIBZ9$6qPt/1cEv7v1f+rIzpWlRlIIGFPSQA7OUT7Or+l7Mco=", "last_login": "2017-03-18T05:38:03.210Z", "username": "Feng", "real_name": "\u738b\u4e9a\u950b", "email": "905916044@qq.com", "create_time": "2017-03-17T04:12:40.748Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 58, "fields": {"password": "pbkdf2_sha256$24000$7sfgihbPsUuG$+5kOCw8YgZ0bkkks4qwAejvWKwyaj8RmZ413pvmd0/8=", "last_login": "2017-05-06T11:01:22.447Z", "username": "ACM2016115448", "real_name": "\u6768\u9756\u5eb7", "email": "1255754523@qq.com", "create_time": "2017-03-17T06:30:11.828Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"3\":1,\"2\":1},\"contest_problems\":{\"11\":2,\"10\":1,\"27\":1,\"22\":2,\"17\":2,\"24\":1}}", "reset_password_token": "bb4b0bf4988090e901025ba4b165513f", "reset_password_token_create_time": "2017-05-01T11:44:23.525Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 59, "fields": {"password": "pbkdf2_sha256$24000$hOtqJSTc45WB$V+gOroebUTncRW4PpKTAKzWSCAAdgvv0cbX2oDVy+UQ=", "last_login": "2017-03-17T06:43:27.009Z", "username": "ACM20130032", "real_name": "\u738b\u5065\u5168", "email": "675325633@qq.com", "create_time": "2017-03-17T06:43:13.259Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"3\":1,\"2\":1},\"contest_problems\":{\"11\":2,\"10\":1,\"14\":1,\"17\":2,\"22\":2,\"24\":1,\"9\":1,\"8\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 60, "fields": {"password": "pbkdf2_sha256$24000$g5FUOli8BpGf$C9vMJ/wxw8t5lJgrT1/scGbBwsCQ6F3S8wr0//6PhI4=", "last_login": "2017-05-01T05:15:42.352Z", "username": "ACM2016112369", "real_name": "\u4e8e\u5353\u5982", "email": "793951105@qq.com", "create_time": "2017-03-17T10:39:28.999Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"9\":2,\"24\":1,\"21\":2}}", "reset_password_token": "111860ccc9342259ed5cf56f3bc3e52b", "reset_password_token_create_time": "2017-04-30T12:26:41.050Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 61, "fields": {"password": "pbkdf2_sha256$24000$dZjPsCf0l2TD$FPBsweSWTHPMKeBDsKD+uP/qsFmL5I4almb1Y624agg=", "last_login": "2017-04-01T05:02:30.280Z", "username": "ACM2016112626", "real_name": "\u5218\u6d69\u73ae", "email": "liu2016112626@163.com", "create_time": "2017-03-17T12:00:29.993Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"2\":1},\"contest_problems\":{\"24\":1,\"20\":2,\"22\":2,\"17\":2,\"19\":2,\"21\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 62, "fields": {"password": "pbkdf2_sha256$24000$pJYEysM9YwWI$4xFWZvufns9XlvGD7x2NyoJv19m1zKoTcT3HzrcuA/M=", "last_login": "2017-05-11T11:43:02.837Z", "username": "Uranuslight", "real_name": "\u5360\u653e", "email": "570034911@qq.com", "create_time": "2017-03-17T13:53:01.983Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"3\":1,\"2\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 63, "fields": {"password": "pbkdf2_sha256$24000$owBMs9skfUvK$erTq85muANsYpmg/hX3t7dJiqy7nQVESUY9K2b5bfAw=", "last_login": "2017-04-14T02:44:44.145Z", "username": "helloworld", "real_name": "\u9ec4\u94ee", "email": "1241701611@qq.com", "create_time": "2017-03-18T00:40:29.418Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"3\":1,\"2\":1},\"contest_problems\":{\"24\":1,\"20\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 64, "fields": {"password": "pbkdf2_sha256$24000$TgeMUPzH653u$/oxKFeDD+IbZJog3Lw5xVRKSfo8qYm9FjirARp21g/8=", "last_login": "2017-04-10T02:21:56.051Z", "username": "ACM2015111722", "real_name": "\u5218\u5146\u5e74", "email": "1034020281@qq.com", "create_time": "2017-03-18T02:03:26.334Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"2\":1},\"contest_problems\":{\"24\":1,\"20\":2,\"17\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 65, "fields": {"password": "pbkdf2_sha256$24000$4vz4bTUqWKwg$XN3wsvGqKEiGbsaIiD41l31E9eoqd7m29NP7rCJoET0=", "last_login": "2017-05-05T12:31:07.684Z", "username": "Artoria", "real_name": "\u768b\u97eb\u5586", "email": "841662887@qq.com", "create_time": "2017-03-18T03:07:45.478Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"24\":2}}", "reset_password_token": "d437e5e9a8538cbdd505a303d1e3535e", "reset_password_token_create_time": "2017-05-05T12:23:44.911Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 66, "fields": {"password": "pbkdf2_sha256$24000$N1xeGVPQsy0T$lJRrXUVcT6dEylGmWc54x+d79RQZUCunHquiWqrsLN8=", "last_login": "2017-03-18T03:28:52.010Z", "username": "ACM2015111426", "real_name": "\u90d1\u9038\u51e1", "email": "tzefzyf@163.com", "create_time": "2017-03-18T03:28:32.949Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"24\":1,\"20\":2,\"17\":1,\"22\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 67, "fields": {"password": "pbkdf2_sha256$24000$NKOrc0eo7H7a$4WpO1o/JSNpeqosacJ70pztHcFBsTmPmgSvUTVhRDz4=", "last_login": "2017-05-07T10:29:14.770Z", "username": "smilesum", "real_name": "\u6b27\u9e4f", "email": "1125442950@qq.com", "create_time": "2017-03-18T03:37:23.805Z", "admin_type": 0, "problems_status": "{\"problems\":{\"26\":1,\"27\":1,\"28\":1,\"29\":1},\"contest_problems\":{\"24\":1,\"20\":2,\"21\":1,\"17\":2,\"23\":1,\"22\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "18656e8cec384b7dda16f377c5046b77", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 68, "fields": {"password": "pbkdf2_sha256$24000$MpBb0c2GAmoN$QWejcegy6RrSbUVb4aKf+LBvSnQRJh5rr+lcUjtKdII=", "last_login": "2017-05-11T08:12:50.791Z", "username": "qw", "real_name": "\u7941\u7965\u5a01", "email": "38768687@qq.com", "create_time": "2017-03-18T03:42:08.757Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2352\":2,\"2366\":1,\"1001\":2,\"1000\":1},\"contest_problems\":{\"24\":1,\"27\":1,\"20\":2,\"21\":2}}", "reset_password_token": "09bd2820239ce00b611ed2ece409bd61", "reset_password_token_create_time": "2017-04-16T13:06:27.592Z", "auth_token": null, "two_factor_auth": false, "tfa_token": "259c1fd9f41b7683271c1c291c16a639", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 69, "fields": {"password": "pbkdf2_sha256$24000$f3RXLC96EWK4$bFHgclU4ByB71UHACyRCLFcQWlsuckpx6fYdZIPb3FY=", "last_login": "2017-05-08T08:43:00.651Z", "username": "\u83dc\u9e1f\u4e00\u53ea", "real_name": "\u674e\u677e", "email": "15240142453@163.com", "create_time": "2017-03-18T03:55:18.382Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1645\":2,\"1559\":1,\"3\":1,\"1\":1,\"2358\":2,\"2\":2,\"1561\":1,\"1563\":2,\"1000\":1},\"contest_problems\":{\"27\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 70, "fields": {"password": "pbkdf2_sha256$24000$cTVWDrRgR4xO$cdlkePR7VsXccPSV9YTnfwQXnl+TD7MulzBhIkiXSbQ=", "last_login": "2017-03-18T03:57:18.288Z", "username": "Lhf199877", "real_name": "\u5362\u6d77\u4e30", "email": "786780185@qq.com", "create_time": "2017-03-18T03:57:01.331Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 71, "fields": {"password": "pbkdf2_sha256$24000$cr9yGuLAu6bI$ugJ7as/srwYIF1jPyi/hIU82yzjrVV62oOxSQerrG5Q=", "last_login": "2017-03-18T04:02:26.333Z", "username": "ACM2016112444", "real_name": "1", "email": "365089684@qq.com", "create_time": "2017-03-18T04:02:18.065Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"24\":1,\"20\":2,\"17\":1,\"22\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 72, "fields": {"password": "pbkdf2_sha256$24000$12RmZwozalB8$i+3uV7z4DeN/hb3T+RUufp6uXVMSgIkXL0ZoB+7Wnqw=", "last_login": "2017-05-03T10:08:35.415Z", "username": "sickbaimu", "real_name": "\u8d75\u4e50", "email": "597341262@qq.com", "create_time": "2017-03-18T04:05:19.149Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"11\":2,\"3\":1,\"2\":1,\"4\":1},\"contest_problems\":{\"24\":1,\"20\":2,\"21\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 73, "fields": {"password": "pbkdf2_sha256$24000$72wHlQsHcpqB$PNYU/hCx1MPeGLTYVjKY9y8ik4VlbQ9kQXZFhpa+dDU=", "last_login": "2017-03-18T04:33:13.212Z", "username": "acm2016112445", "real_name": "xzy", "email": "1053269420@qq.com", "create_time": "2017-03-18T04:06:51.794Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"24\":1,\"21\":2,\"22\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 74, "fields": {"password": "pbkdf2_sha256$24000$BZrmQXodzoI6$L5bOz5NIEVNEnsO1imAhpYiLQt/pI+VwYH4N9Sysj+w=", "last_login": "2017-05-07T04:25:56.273Z", "username": "acm2016112665", "real_name": "\u95eb\u6d2a\u6d0b", "email": "1036737395@qq.com", "create_time": "2017-03-18T04:07:24.371Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"24\":2}}", "reset_password_token": "8f0262630948a506b5fbd9a7c70fed12", "reset_password_token_create_time": "2017-05-07T04:19:06.123Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 75, "fields": {"password": "pbkdf2_sha256$24000$SGOrbwKR7yjE$kIA8ckNtJFLoJ8NWjBORu9RcLCFIUlhlcHMZ1fotglQ=", "last_login": "2017-05-05T09:14:56.656Z", "username": "zq", "real_name": "\u5468\u7426", "email": "614504572@qq.com", "create_time": "2017-03-18T04:08:00.980Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"24\":1,\"20\":2,\"17\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 76, "fields": {"password": "pbkdf2_sha256$24000$3M3zSBmaalEE$WTQCLDUpFcheeK3s9I51VrHb2iEkKMUX0XRB8z1/Nzo=", "last_login": "2017-03-18T09:06:36.887Z", "username": "ACM2015112210", "real_name": "\u8c2d\u6893\u7426", "email": "525088893@qq.com", "create_time": "2017-03-18T04:09:40.611Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"24\":1,\"23\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 77, "fields": {"password": "pbkdf2_sha256$24000$zoHSVMgQOA7X$sRjFjpxvw/WaneZd4/CuHIcmb0YQVjL3pQEH5LUumWE=", "last_login": "2017-03-18T04:13:04.305Z", "username": "2016112211", "real_name": "\u5218\u6d69", "email": "liu9925@qq.com", "create_time": "2017-03-18T04:12:56.266Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 78, "fields": {"password": "pbkdf2_sha256$24000$bdTwRbmwxoCZ$4FMtosCuVjzk1NroVgC1CPD4yoTYru48317QOmcGJAA=", "last_login": "2017-03-18T04:20:15.367Z", "username": "ACM2015111853", "real_name": "\u8521\u601d\u4f73", "email": "1412490736@qq.com", "create_time": "2017-03-18T04:20:02.369Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 79, "fields": {"password": "pbkdf2_sha256$24000$od0EjMEPPRmg$u3XPfIVfM51/Wg/nqTsZcGh5aTf1TTFmunbdfVt/Xss=", "last_login": "2017-03-18T11:32:30.967Z", "username": "ACM2015111872", "real_name": "\u738b\u6c38\u826f", "email": "m18712017011@163.com", "create_time": "2017-03-18T04:26:47.302Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"24\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 80, "fields": {"password": "pbkdf2_sha256$24000$pvQQV0kSpCZI$bUnVUzBm9JmA1REUDrYSRLqvBiIZMVK+KZuJMpp1E5E=", "last_login": "2017-03-18T07:48:23.904Z", "username": "ACM2016112460", "real_name": "\u5355\u5bcc\u839b", "email": "616602193@qq.com", "create_time": "2017-03-18T04:28:51.909Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"24\":1,\"17\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 81, "fields": {"password": "pbkdf2_sha256$24000$JtQNBYNMh8iL$hlQF1M/B9BfyJMkTWhsp2pWdh65QSAflYEmLLi0VOVA=", "last_login": "2017-03-18T05:04:43.403Z", "username": "\u65e0", "real_name": "\u5170\u7ea2\u6797", "email": "1330725715@qq.com", "create_time": "2017-03-18T05:03:49.017Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"3\":1,\"2\":1},\"contest_problems\":{\"24\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 82, "fields": {"password": "pbkdf2_sha256$24000$oGdfJLMAH4Tk$VQRN0cO03+55X4CpdlSmieSwiTYtaEqf/c9yKc5NF2s=", "last_login": "2017-05-14T03:17:10.613Z", "username": "kinredon", "real_name": "\u9093\u91d1\u7ea2", "email": "kinredon@163.com", "create_time": "2017-03-18T05:08:59.957Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1},\"contest_problems\":{\"27\":1,\"37\":1}}", "reset_password_token": "b8c33394000be5f224ca24a5a92beb24", "reset_password_token_create_time": "2017-04-20T10:48:56.026Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 83, "fields": {"password": "pbkdf2_sha256$24000$92Cz9V20Qh9d$MDy2H8NTFaAEpB7k41ZYSl+XEsXSiPZCFoYYQNfyTQ4=", "last_login": "2017-03-18T05:10:23.813Z", "username": "\u51cc\u8fdf\uff0c", "real_name": "\u8521\u5174\u4e1a", "email": "1156540094@qq.com", "create_time": "2017-03-18T05:10:09.490Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"24\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 84, "fields": {"password": "pbkdf2_sha256$24000$QTIHfwQSNQrh$rNpvBjjQcJirZwI3iCxAjCXpcMgHEDbYNcTouIT/K9s=", "last_login": "2017-05-05T01:13:46.721Z", "username": "ACM_2016112364", "real_name": "\u4e8e\u53ef\u6c57", "email": "njyukehan@126.com", "create_time": "2017-03-18T05:34:01.608Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 85, "fields": {"password": "pbkdf2_sha256$24000$bfryh84PuzrS$nORYqcXKGyoVzNWhuFOgN4i+1UxdePrqnfqXEl2W8iA=", "last_login": "2017-03-19T08:21:24.212Z", "username": "Vega", "real_name": "zhang vega", "email": "805491725@qq.com", "create_time": "2017-03-18T05:43:42.588Z", "admin_type": 0, "problems_status": "{\"problems\":{\"28\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 86, "fields": {"password": "pbkdf2_sha256$24000$wBCZlWVyUtgg$0AnAZO2eNtGx/BNXNfqcklwjdfnnIaz21KMoCzrG05A=", "last_login": "2017-05-07T05:05:47.491Z", "username": "16-\u4f53\u80b2-\u5f20\u821c\u5b87", "real_name": "llz", "email": "zsy@xnjd.avi", "create_time": "2017-03-18T06:12:45.636Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"24\":1,\"20\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 87, "fields": {"password": "pbkdf2_sha256$24000$jlfWJPhQw2kt$WVZNvQA3e8WCEgpgp3f1seQ9Q2ilWP+XjPOgsrqHpK0=", "last_login": "2017-03-18T06:22:32.567Z", "username": "aaaaaaaa", "real_name": "guest", "email": "chonghuagame1@163.com", "create_time": "2017-03-18T06:22:16.439Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 88, "fields": {"password": "pbkdf2_sha256$24000$2YezM7vpsA9I$/iOo9eXlM/s3fPguEqa0WQkaSxLaUZWO4zEQIW7EY98=", "last_login": "2017-05-11T10:40:36.720Z", "username": "Megumin", "real_name": "\u738b\u6797", "email": "a2424986918@foxmail.com", "create_time": "2017-03-18T06:42:51.869Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2366\":2,\"2358\":1,\"2364\":1,\"2363\":1,\"2365\":1},\"contest_problems\":{\"24\":1,\"22\":1,\"17\":1,\"29\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 89, "fields": {"password": "pbkdf2_sha256$24000$lvCpOem7wNrC$peelOMUPOxeGqfpnyDc6Mz75SMONhkKJQfUwHUeqjJA=", "last_login": "2017-03-18T07:01:33.696Z", "username": "ACM+2016112642", "real_name": "\u6587\u8d85\u8c6a", "email": "1284770636@qq.com", "create_time": "2017-03-18T07:00:42.813Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": "58ed828a89d8441cbca57888f91aa15b", "reset_password_token_create_time": "2017-04-26T10:47:50.598Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 90, "fields": {"password": "pbkdf2_sha256$24000$jvUJtGSbwuIb$sQbyiGxM2aP7oPk9XH027Nda1fxEG/gw+MpJSwph5Os=", "last_login": "2017-03-18T07:21:23.058Z", "username": "ACM2016111799", "real_name": "\u5b5f\u4ee4\u5cb3", "email": "731058078@qq.com", "create_time": "2017-03-18T07:21:06.641Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 91, "fields": {"password": "pbkdf2_sha256$24000$U5qVprAfuOna$YObymNjLosHSAXmm9KpHIf5st+wTANqSYTMuRNhpui8=", "last_login": "2017-03-26T12:26:17.012Z", "username": "\u9e8b", "real_name": "\u9e8b", "email": "1051029333@qq.com", "create_time": "2017-03-18T08:57:40.213Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"3\":1,\"2\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 92, "fields": {"password": "pbkdf2_sha256$24000$b7rRp10NFKGJ$fsif9fg6J6WHEuJYXymdr0vptCEM89axq3N0wbzOGU0=", "last_login": "2017-03-18T09:10:02.022Z", "username": "20132185", "real_name": "wz", "email": "404687185@qq.com", "create_time": "2017-03-18T09:09:31.649Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 93, "fields": {"password": "pbkdf2_sha256$24000$i67ITmrkukyw$smTFd5PwF+A4Qr9j0mWmWtVdWBY1I0wZ1fPrmMMHe30=", "last_login": "2017-05-07T04:23:15.454Z", "username": "shiki", "real_name": "\u6f58\u6653\u6ce2", "email": "807266405@qq.com", "create_time": "2017-03-18T10:51:56.983Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"3\":1,\"2\":1,\"29\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "f9e30c019e570461fbc83e1f67a0cb16", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 94, "fields": {"password": "pbkdf2_sha256$24000$fZjCKrwLqvnM$OVA5QnBQggfYaGwbNYsuYdAxDAPvVJ7lrADwZ0Tp+F8=", "last_login": "2017-03-20T13:40:09.265Z", "username": "Prunier", "real_name": "\u6881\u6668", "email": "lc5370@163.com", "create_time": "2017-03-20T13:39:58.616Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 95, "fields": {"password": "pbkdf2_sha256$24000$ReYVTTHIAK33$3oBHV6JKB3r8tRNtfaGlxvZTmIpm0BbfPDVwMBmPF1U=", "last_login": "2017-04-28T02:16:16.793Z", "username": "\u4fde\u7b11\u676d", "real_name": "handsomehow", "email": "handsomehowyxh@gmail.com", "create_time": "2017-03-21T12:57:17.636Z", "admin_type": 1, "problems_status": "{\"contest_problems\":{\"26\":1}}", "reset_password_token": "356c1767fc1e28c85f7aabae6193bf2f", "reset_password_token_create_time": "2017-03-22T11:07:28.551Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 96, "fields": {"password": "pbkdf2_sha256$24000$aoZJG9yWhT9y$uRSsWJr1F35c/aZbLaH4cG43C7ubFkj9Gbyo8hw1fnk=", "last_login": "2017-03-22T03:01:04.784Z", "username": "Desgard_Duan", "real_name": "\u6bb5\u660a\u5b87", "email": "gua@desgard.com", "create_time": "2017-03-22T02:56:47.405Z", "admin_type": 1, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 97, "fields": {"password": "pbkdf2_sha256$24000$WBIdjEUwcvG8$EOHQZgX4n4NI6TITtzVGSn/a56ZxFQgfQY9koiDkbAw=", "last_login": "2017-04-26T10:42:25.216Z", "username": "xmq1991", "real_name": "\u859b\u94ed\u4e7e", "email": "WinterXMQ@gmail.com", "create_time": "2017-03-22T03:23:51.373Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "7a9a685b649fbb1164c311e5fc01e5fe", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 98, "fields": {"password": "pbkdf2_sha256$24000$Dtpv5niDBXHl$C8VkC6FUQzdC+REhxnOTk21rwD4/Lb3S8F3zfHdn15w=", "last_login": "2017-03-22T04:05:15.719Z", "username": "Mango", "real_name": "\u6b65\u76f8\u5e86", "email": "bxqjy@foxmail.com", "create_time": "2017-03-22T04:05:04.443Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 99, "fields": {"password": "pbkdf2_sha256$24000$gP3FX3QJASnQ$lI4miiEQ58YdMW3zpBoahHOhTak9eKn/avejrkKNJR0=", "last_login": "2017-03-22T04:16:26.216Z", "username": "Autwind", "real_name": "\u522b\u52c7", "email": "bieyong864465133@163.com", "create_time": "2017-03-22T04:16:16.061Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"3\":1,\"2\":1,\"5\":2,\"4\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 100, "fields": {"password": "pbkdf2_sha256$24000$bvgxuD4JHU40$TYJ8SR0Sge5MAwglOjjfolgPV4kms0V3qVdeSpfVfi0=", "last_login": "2017-05-07T09:44:34.019Z", "username": "LJDomain", "real_name": "\u5218\u6c5f", "email": "JDomain163@163.com", "create_time": "2017-03-22T04:30:19.067Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"2\":1,\"29\":2,\"17\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 101, "fields": {"password": "pbkdf2_sha256$24000$Z4ZfpMoShL3l$/FVH7jghjmXeK2Em2Hsf9tXqVo555KUSom3vwS/Tuwc=", "last_login": "2017-03-22T04:31:01.443Z", "username": "a63635", "real_name": "\u6731\u6d69\u6960", "email": "1264173925@qq.com", "create_time": "2017-03-22T04:30:48.185Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 102, "fields": {"password": "pbkdf2_sha256$24000$jyJ7cNN5H9Gb$Z9jTBjEsAVYWpSal1OMe1rESYRiVhVjRmEjHgNRbS6Q=", "last_login": "2017-04-28T06:11:02.981Z", "username": "UnkelTao", "real_name": "\u4f60\u731c", "email": "1216446045@qq.com", "create_time": "2017-03-22T04:37:33.954Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 103, "fields": {"password": "pbkdf2_sha256$24000$menr5vdInefu$mfePAzN1JuTfR9CDgaOhY8JwlS1k0pCkUJPp+lm+3tI=", "last_login": "2017-03-22T11:23:04.729Z", "username": "swjtulwy", "real_name": "\u5218\u7ef4\u4eea", "email": "1562955061@qq.com", "create_time": "2017-03-22T11:22:51.102Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 104, "fields": {"password": "pbkdf2_sha256$24000$eX4uYklUuvoL$R7jUBGj0osB2worNAV1SNT2DYWbI1n+Cc21SGHA8KNs=", "last_login": "2017-04-26T15:04:07.205Z", "username": "Kiznaiver", "real_name": "KK", "email": "431496942@qq.com", "create_time": "2017-03-22T13:20:50.539Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 105, "fields": {"password": "pbkdf2_sha256$24000$3xDWVbvehYyV$bV88A4OzifUzJF3etA6CBOeCDoMr8onhTdHbZTEqAcM=", "last_login": "2017-03-25T07:17:17.675Z", "username": "2015121052", "real_name": "\u9648\u987a\u7f18", "email": "1159256399@qq.com", "create_time": "2017-03-25T07:17:15.036Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 106, "fields": {"password": "pbkdf2_sha256$24000$iLWJ76OKD3P8$C5jMOpIcdN8MY6yS5Q1KpiZpHp6ItBVEOST7Ul8lns4=", "last_login": "2017-05-10T03:39:08.799Z", "username": "My_Consciousness", "real_name": "\u59dc\u6da6\u7693", "email": "15520816169@163.com", "create_time": "2017-03-27T14:17:26.643Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2345\":1,\"2347\":2,\"2349\":1,\"2348\":1,\"2350\":1,\"1000\":1},\"contest_problems\":{\"39\":1,\"27\":1,\"37\":1,\"43\":1,\"38\":1}}", "reset_password_token": "bae822e930706a7358f688737c6bc6ad", "reset_password_token_create_time": "2017-04-23T02:58:24.638Z", "auth_token": null, "two_factor_auth": false, "tfa_token": "570e908769ff91efa52800cb6e5a890e", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 107, "fields": {"password": "pbkdf2_sha256$24000$3lYxEyL0lAZD$nXInqu4jc4J1vRt59twM2gHFO6OjEyI/GCT8INZU50A=", "last_login": "2017-03-28T03:34:20.245Z", "username": "\u6234\u5c71", "real_name": "\u6234\u5c71", "email": "15528203353@163.com", "create_time": "2017-03-28T03:34:02.087Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 108, "fields": {"password": "pbkdf2_sha256$24000$BuEZhrmEs2BW$saWLrwekrTcfK9zui0P9lgx2qi8rQ90sODLNzkY3b6Q=", "last_login": "2017-05-07T11:46:22.262Z", "username": "Dandelion", "real_name": "Mr Liao", "email": "hj-liao@qq.com", "create_time": "2017-03-31T13:12:52.696Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 109, "fields": {"password": "pbkdf2_sha256$24000$NQA8O1L0EsnF$iiYomOTXCRdtfgUY6jwzrYvisTtpukOyxBcj7SCDqbA=", "last_login": "2017-04-05T13:11:57.493Z", "username": "\u8def\u75f4\u7684\u6551\u8d4e", "real_name": "\u8def\u75f4", "email": "2466811749@qq.com", "create_time": "2017-04-05T13:11:38.167Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 110, "fields": {"password": "pbkdf2_sha256$24000$rEsKcyn1nVC6$Vz5zJB5qzPYzrbTE5ohAf4mhewHh+s9xYPZJzutRoww=", "last_login": "2017-05-07T02:32:44.630Z", "username": "\u81ea\u95f2", "real_name": "\u7f57\u6587\u6770", "email": "2271425150@qq.com", "create_time": "2017-04-06T07:55:46.019Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 111, "fields": {"password": "pbkdf2_sha256$24000$J36GKA9jjsKP$k4ju3dsVwXN9gu5QHcz6A/0oEnrNRQrtSlYhOJdSauA=", "last_login": "2017-04-06T13:26:35.908Z", "username": "wojiushilym123", "real_name": "LYM", "email": "383480417@qq.com", "create_time": "2017-04-06T13:26:25.794Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 112, "fields": {"password": "pbkdf2_sha256$24000$XTfaos73qFoe$781a08feSzdILVYypI/vmbsuaZGGcOSuzv2QiQnVX1c=", "last_login": "2017-04-06T13:28:14.550Z", "username": "null", "real_name": "\u90d1\u6625\u7693", "email": "2215702430@qq.com", "create_time": "2017-04-06T13:27:16.787Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 113, "fields": {"password": "pbkdf2_sha256$24000$eYQ1qmJwfFJ8$kjFthSs7NJU92YnbS3TR2btIoY36gXOeGZv7QtmKh7A=", "last_login": "2017-04-06T13:28:07.265Z", "username": "jerryovernight", "real_name": "\u6f58\u9510", "email": "1791175008@qq.com", "create_time": "2017-04-06T13:27:56.091Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1\":1,\"3\":1,\"2\":1,\"4\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 114, "fields": {"password": "pbkdf2_sha256$24000$qu4KlOBc3zGb$qiaJ1dcmCgNkpVUXaITrepCUKVuRDf7/3A3f76r3t+E=", "last_login": "2017-04-06T13:28:18.688Z", "username": "niobium041", "real_name": "\u5218\u6797\u5947", "email": "niobium041@yahoo.com", "create_time": "2017-04-06T13:28:02.742Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 115, "fields": {"password": "pbkdf2_sha256$24000$CH97okrrtWis$XMUJuZyZX/7TxF5+FE2jw/bI3iKG0VtHpaXiiUjywQU=", "last_login": "2017-04-08T03:06:14.801Z", "username": "\u5e73\u751f\u672a\u4fe1", "real_name": "\u5218\u5609\u777f", "email": "www.463428180@qq.com", "create_time": "2017-04-08T03:05:50.060Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 116, "fields": {"password": "pbkdf2_sha256$24000$o0whZE7sHVPO$P+ibolLhdRjrCbRrXkd+dmalpAYPDkIiCTAyoAz2j1g=", "last_login": "2017-04-13T01:41:43.305Z", "username": "Andy", "real_name": "\u9a6c\u5143\u6167", "email": "andy@hackswjtu.com", "create_time": "2017-04-13T01:41:27.635Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 117, "fields": {"password": "pbkdf2_sha256$24000$5MIKetSy9fE0$kJYL0SAHDAamvxP9hCSqnjdWfQvjIO8TYbXclqKrzx0=", "last_login": "2017-05-06T12:12:37.150Z", "username": "tommy951113", "real_name": "\u7ae5\u9e23", "email": "imtommy123@163.com", "create_time": "2017-04-14T03:21:53.170Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 118, "fields": {"password": "pbkdf2_sha256$24000$LwrpYmlg4XDm$8Wobr7Ucob9+2h0/t41gwnDsLWyGufi3DGHLJvwsano=", "last_login": "2017-04-14T03:23:27.500Z", "username": "\u4f1a\u5012\u7acb\u7684\u7f8a", "real_name": "\u51af\u5c0f\u5ddd", "email": "820146297@qq.com", "create_time": "2017-04-14T03:23:14.694Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 119, "fields": {"password": "pbkdf2_sha256$24000$DzXuTBugEigk$ubpUlDBY2fZ1WCS4lG8TqxIzd48IlIy96BTrp6czW4U=", "last_login": "2017-04-14T04:21:52.361Z", "username": "\u901a\u54e5\u54e5", "real_name": "\u738b\u901a", "email": "1270447834@qq.com", "create_time": "2017-04-14T04:21:33.223Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 120, "fields": {"password": "pbkdf2_sha256$24000$MSF4pGyKpXil$Cd6Pc+o5nBGojO5YfmS5fnMaj8AV7EZPEE3QBQSkstg=", "last_login": "2017-04-14T16:26:40.696Z", "username": "\u9f9a\u5578\u5929", "real_name": "\u848b\u654f", "email": "2914668703@qq.com", "create_time": "2017-04-14T16:26:23.883Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 121, "fields": {"password": "pbkdf2_sha256$24000$qu2PXEulQS3u$tSYHGuT/I5XMQCHa/dpy8gGdMHWAcJ0LZOBUxnqiEHA=", "last_login": "2017-04-15T01:48:43.790Z", "username": "\u3055\u30e6\u30ea", "real_name": "\uff58\uff58", "email": "942095420@qq.com", "create_time": "2017-04-15T01:48:10.470Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 122, "fields": {"password": "pbkdf2_sha256$24000$WaiX6G6K3qGf$2tGksrvKGYq1OJb6ppbSNteTXHTIh9Sek6Q5XayBpLM=", "last_login": "2017-04-15T10:32:01.044Z", "username": "kagari", "real_name": "\u5f90\u7acb\u5f3a", "email": "xlq19961012@qq.com", "create_time": "2017-04-15T10:31:50.867Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": "84a65b502c5ef9b43efdf842aaae9518", "reset_password_token_create_time": "2017-05-07T03:35:43.935Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 123, "fields": {"password": "pbkdf2_sha256$24000$2UokIbsqQl0a$QNcdr/8A0E/X1KWNZOeJMl1eJ9vEEZV89nBuDakcljQ=", "last_login": "2017-04-17T12:45:06.779Z", "username": "wangjiahao", "real_name": "\u738b\u5609\u8c6a", "email": "1210006731@qq.com", "create_time": "2017-04-17T12:44:56.992Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 124, "fields": {"password": "pbkdf2_sha256$24000$tgLqvjzloujN$4wnBRd5DocWCIjbxoZXHFxkAie7uT3u5ouhLFyVRqUg=", "last_login": "2017-04-20T10:30:27.586Z", "username": "\u4e01\u751f111", "real_name": "\u5415\u4f20\u9f99", "email": "1120052221@qq.com", "create_time": "2017-04-20T10:30:04.718Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 125, "fields": {"password": "pbkdf2_sha256$24000$MiKD61Khmoma$LzC7/5CFcrFW6Z3PhOT26zcfSu/oP5ZCvYKIomHel2E=", "last_login": "2017-04-20T10:49:46.506Z", "username": "swjtu_ykj", "real_name": "\u8881\u51ef\u519b", "email": "yuan1092191693@qq.com", "create_time": "2017-04-20T10:49:32.307Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1001\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 126, "fields": {"password": "pbkdf2_sha256$24000$k8yK81w05LvV$3qRwOPCoVnsMln6nPEqThR7vAV9vaduyGCtqUcuAyws=", "last_login": "2017-04-20T14:49:36.580Z", "username": "1\u7c739\u7684\u4e91\u9171", "real_name": "\u5b8b\u4e91\u6600", "email": "1109129397@qq.com", "create_time": "2017-04-20T14:48:19.627Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1562\":2,\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 127, "fields": {"password": "pbkdf2_sha256$24000$qEWt4AvqpX6N$tfCcrYke8FJFKuJQd+etduR/szXSA1uWlQD8izwb6Ic=", "last_login": "2017-04-20T15:01:25.655Z", "username": "px", "real_name": "px", "email": "1769097023@qq.com", "create_time": "2017-04-20T15:01:17.288Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 128, "fields": {"password": "pbkdf2_sha256$24000$OgQowHSCSGSx$KOdfnbeXlTDCxJZ7HQ7aWQs/lmA26L1f/4i+lBMGa18=", "last_login": "2017-05-06T09:51:09.954Z", "username": "\u5e1d\u8fb9", "real_name": "\u6768\u529b", "email": "yanligh@163.com", "create_time": "2017-04-21T10:44:05.645Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"43\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "51fb3e4008723204bc1f74318a7b4369", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 129, "fields": {"password": "pbkdf2_sha256$24000$6oE4sB2aWXYB$dbANCK8iP8JvuRUKfkRZ3/sMtczBSDNIQO0PCv0gjkk=", "last_login": "2017-04-26T14:13:09.483Z", "username": "lizehanai", "real_name": "\u674e\u6cfd", "email": "lizehanai@aliyun.com", "create_time": "2017-04-25T14:56:30.971Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 130, "fields": {"password": "pbkdf2_sha256$24000$n1CblTs8JcaI$6pP7EHH8KNX1tsWKDtj/bUSOchypmaEfhh1C3mwsCYQ=", "last_login": "2017-05-07T02:47:15.027Z", "username": "120237970", "real_name": "\u6768\u6d69", "email": "120237970@qq.com", "create_time": "2017-04-25T15:27:10.684Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": "9b51951c78a3a9aeeccf770f7f198542", "reset_password_token_create_time": "2017-05-07T02:41:05.524Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 131, "fields": {"password": "pbkdf2_sha256$24000$e7SCdRwhVfmT$9k/NIsWYOrJ5dNYwuSqUMVTqf0Fb+kgngJjjQ4DsXCQ=", "last_login": "2017-04-26T09:43:49.503Z", "username": "qwe123", "real_name": "\u53d1\u751f", "email": "lyc@163.com", "create_time": "2017-04-26T09:43:36.366Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 132, "fields": {"password": "pbkdf2_sha256$24000$2mCd6XR1VlzK$tyQyR3eDSQoQyB2V8LZLiQtFnUG9Ay48AfXvDfIaY3Y=", "last_login": "2017-04-26T11:03:41.748Z", "username": "\u5947\u70b9", "real_name": "\u6587\u8d85\u8c6a", "email": "winhowea@my.swjtu.edu.cn", "create_time": "2017-04-26T11:03:26.516Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 133, "fields": {"password": "pbkdf2_sha256$24000$45YQV4Pnc6PD$090bCTqtyDvGPA47IOi7RH623hEfMVnddM4751vOrA8=", "last_login": "2017-05-05T12:08:14.224Z", "username": "vividbones", "real_name": "\u8bb8\u741b", "email": "nccvividbones@outlook.com", "create_time": "2017-04-26T11:12:14.057Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "377187879d810378b17a755b9625dd88", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 134, "fields": {"password": "pbkdf2_sha256$24000$F9PUvCIfOIYm$B2EoQ8T6UlCvrKrJ77J3Ci9BWm5P21ky1ztmP7DX6cM=", "last_login": "2017-04-26T11:53:24.474Z", "username": "994", "real_name": "\u5f20\u5b50\u822a", "email": "553091892@qq.com", "create_time": "2017-04-26T11:53:14.406Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1},\"contest_problems\":{\"27\":1,\"37\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 135, "fields": {"password": "pbkdf2_sha256$24000$CX4hTcW6pPs3$NMK7jtq4n8sCJmTWFzMk0AoozwsNEJD6cMWvRfsKvZs=", "last_login": "2017-04-29T02:46:50.633Z", "username": "meishitouzhele", "real_name": "meishitouzhele", "email": "meishitouzhele@null.com", "create_time": "2017-04-26T12:32:59.584Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 136, "fields": {"password": "pbkdf2_sha256$24000$ApkNTFBCvSH4$jPgMIeajBNAj5PdHK5R1f0qbS+bo+G6ZT/OItx/MRys=", "last_login": "2017-04-26T13:29:50.410Z", "username": "2016113153", "real_name": "\u6731\u9648", "email": "1834351127@qq.com", "create_time": "2017-04-26T13:29:35.549Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 137, "fields": {"password": "pbkdf2_sha256$24000$Zo7pGkO9RiPS$RMn2oPplz7suaWAu5MlTZjOrab83AYso+OfOJWcA/Dk=", "last_login": "2017-04-26T13:49:42.900Z", "username": "\u53e4\u6708", "real_name": "\u5510\u6811\u6210", "email": "141905477@qq.com", "create_time": "2017-04-26T13:49:26.503Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 138, "fields": {"password": "pbkdf2_sha256$24000$US5mkbmtkakd$AxT+/Csy6ZnnkdxcSv6gAXdmRdbQP60ruaaXRoZvapI=", "last_login": "2017-04-26T14:07:13.301Z", "username": "SS_Yeon", "real_name": "\u9648\u5dcd\u6797", "email": "2532662272@qq.com", "create_time": "2017-04-26T14:06:50.062Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 139, "fields": {"password": "pbkdf2_sha256$24000$oqcXr7WKG9MK$LSurrqVKY15gYzXgm/JYMPNt4/lY9xqZXlgRGO9hSjE=", "last_login": "2017-04-26T15:41:25.550Z", "username": "2894485691", "real_name": "\u90d1\u7fd4", "email": "2894485691@qq.com", "create_time": "2017-04-26T15:41:15.491Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 140, "fields": {"password": "pbkdf2_sha256$24000$14KD7vewObPA$WpDAhvGpxA9XdwuBGPvB5Pn09cLqnTcFDCqU4geRRik=", "last_login": "2017-04-27T02:25:46.228Z", "username": "user", "real_name": "user", "email": "user121314@163.com", "create_time": "2017-04-27T02:25:33.223Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 141, "fields": {"password": "pbkdf2_sha256$24000$T6ZuVBu5tDB6$oXViMpl2gQJ5W+249MjgaHXGGwoRekJzBuE6kiZqIfE=", "last_login": "2017-04-27T02:33:00.558Z", "username": "admin", "real_name": "admin", "email": "userr121314@163.com", "create_time": "2017-04-27T02:32:54.094Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 142, "fields": {"password": "pbkdf2_sha256$24000$0CcRLnYqLLcL$q4dYlbmNMEi/74EKYxA7ImFR3/GovsfS4naOhzfko7w=", "last_login": "2017-04-27T10:11:53.768Z", "username": "youjigang123", "real_name": "\u6e38\u7ee7\u94a2", "email": "97567344@qq.com", "create_time": "2017-04-27T10:11:42.883Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 143, "fields": {"password": "pbkdf2_sha256$24000$pGUknJaS1duS$Rp21zeEiruHRJi2E8fEXY2cEOzDL9lBCW/BMDBw9B14=", "last_login": "2017-05-07T04:09:12.684Z", "username": "dwq1008", "real_name": "\u4e01\u6587\u7426", "email": "1927981708@qq.com", "create_time": "2017-04-27T13:57:20.985Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 144, "fields": {"password": "pbkdf2_sha256$24000$XZBNx7vs6Dxx$+SS4pPuwj6uT1/4HwNZLazQc1ZXR2ly7ONQ/xCGBwZw=", "last_login": "2017-04-27T14:55:05.672Z", "username": "\u5341\u516d", "real_name": "\u5341\u516d", "email": "461611677@qq.com", "create_time": "2017-04-27T14:54:57.416Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 145, "fields": {"password": "pbkdf2_sha256$24000$V1PWpd1KY6kU$hinknFNTmAUCb4oFmmWT871bHl376Tm7ZkgJFMc3A6s=", "last_login": "2017-04-27T14:58:59.545Z", "username": "zhongzihao", "real_name": "\u949f\u6893\u7693", "email": "abzhong@qq.com", "create_time": "2017-04-27T14:58:48.936Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 146, "fields": {"password": "pbkdf2_sha256$24000$LwXm9OK0keaX$1RlevrIfbDHCpoXzgDcG8kDg5LnVvJKq+qxcQL5nvmk=", "last_login": null, "username": "test_13th_final01", "real_name": "no", "email": "test_13th_final01@oj.com", "create_time": "2017-04-27T15:16:08.512Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 147, "fields": {"password": "pbkdf2_sha256$24000$hDIKSzFZ2MNf$MH3fbWZnwIg4tzbnW8VQSOoEuoes9cb6UCI4kEL2UvM=", "last_login": null, "username": "test_13th_final02", "real_name": "no", "email": "test_13th_final02@oj.com", "create_time": "2017-04-27T15:16:08.726Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 148, "fields": {"password": "pbkdf2_sha256$24000$iFrikJBWaBct$Is97hKX9JfwlDVoNumDtynfj6+tSpSfAfg/O/ff0Wso=", "last_login": "2017-05-14T03:58:47.463Z", "username": "13th_team_final01", "real_name": "no", "email": "13th_team_final01@oj.com", "create_time": "2017-04-27T15:45:44.779Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"64\":1,\"66\":2,\"70\":1,\"68\":1,\"73\":1,\"69\":2,\"78\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 149, "fields": {"password": "pbkdf2_sha256$24000$XhpiHJXc9dAn$9pSYd5ZNZFpWnL5C8IokiV+MDPaXLxtUEBr6wqkPtdY=", "last_login": "2017-05-14T04:00:19.523Z", "username": "13th_team_final02", "real_name": "no", "email": "13th_team_final02@oj.com", "create_time": "2017-04-27T15:45:44.969Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"73\":1,\"66\":1,\"70\":1,\"68\":1,\"64\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 150, "fields": {"password": "pbkdf2_sha256$24000$cIlQpbgeh2GQ$QpiLnaHJDP6yuqD/8iR2X2rD+lnGqayzn7ZE6P+MZIY=", "last_login": "2017-05-14T04:00:17.618Z", "username": "13th_team_final03", "real_name": "no", "email": "13th_team_final03@oj.com", "create_time": "2017-04-27T15:45:45.136Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"71\":2,\"44\":1,\"73\":1,\"72\":2,\"66\":1,\"70\":1,\"68\":1,\"64\":1,\"78\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 151, "fields": {"password": "pbkdf2_sha256$24000$Szs0Ij4iPKNN$WM3mJHBi74xJUA6SXgwoHYugrVsNHHqLPJ/cSosjO5o=", "last_login": "2017-05-14T04:01:55.590Z", "username": "13th_team_final04", "real_name": "no", "email": "13th_team_final04@oj.com", "create_time": "2017-04-27T15:45:45.300Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"64\":1,\"72\":2,\"66\":2,\"70\":1,\"68\":1,\"73\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 152, "fields": {"password": "pbkdf2_sha256$24000$ligc49w7Tjkw$sKIqtRlGSKEFGunhmO3hHXGGMBDOU8S+rcSXhKOBIZM=", "last_login": "2017-05-14T03:59:01.520Z", "username": "13th_team_final05", "real_name": "no", "email": "13th_team_final05@oj.com", "create_time": "2017-04-27T15:45:45.486Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"64\":1,\"65\":2,\"66\":1,\"68\":1,\"73\":1,\"78\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 153, "fields": {"password": "pbkdf2_sha256$24000$sPw54bSlOhZq$ZSAhCbo89cyywAFdwduj79c/D75XM0qx2s1K3tZNhpg=", "last_login": "2017-05-14T03:58:12.453Z", "username": "13th_team_final06", "real_name": "no", "email": "13th_team_final06@oj.com", "create_time": "2017-04-27T15:45:45.665Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"64\":1,\"66\":2,\"68\":2,\"73\":1,\"78\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 154, "fields": {"password": "pbkdf2_sha256$24000$8rkSLb4xTeyk$dtUkCDRJVF2lgN+jpG+ILm2VBQaN2FYG5IQnDcV0ccw=", "last_login": "2017-05-14T04:00:24.226Z", "username": "13th_team_final07", "real_name": "no", "email": "13th_team_final07@oj.com", "create_time": "2017-04-27T15:45:45.829Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":1,\"64\":1,\"44\":1,\"73\":1,\"65\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 155, "fields": {"password": "pbkdf2_sha256$24000$0UqvwQEkDaIO$o5S5B0/+MfSnZVpCSXQtpIuGIaSVB1VzKO8mCC9rEFQ=", "last_login": "2017-05-14T03:58:59.151Z", "username": "13th_team_final08", "real_name": "no", "email": "13th_team_final08@oj.com", "create_time": "2017-04-27T15:45:45.989Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"73\":1,\"72\":1,\"71\":2,\"68\":2,\"64\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 156, "fields": {"password": "pbkdf2_sha256$24000$7aSH2MH1ocZs$3P28q06TmXTcFbW1HcW/9XpT7aTeMgWTZEv7k32y3co=", "last_login": "2017-05-14T04:03:25.296Z", "username": "13th_team_final09", "real_name": "no", "email": "13th_team_final09@oj.com", "create_time": "2017-04-27T15:45:46.192Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"64\":1,\"65\":2,\"66\":2,\"68\":1,\"73\":1,\"78\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 157, "fields": {"password": "pbkdf2_sha256$24000$1C5eRjagU9J1$qCDWV08+lXrY4xH2aYJlgMDtVt57aKDURhP0BFf1en0=", "last_login": "2017-05-14T04:03:24.988Z", "username": "13th_team_final10", "real_name": "no", "email": "13th_team_final10@oj.com", "create_time": "2017-04-27T15:45:46.431Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"73\":1,\"66\":2,\"70\":2,\"68\":1,\"64\":2,\"78\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 158, "fields": {"password": "pbkdf2_sha256$24000$wdV3gKI5v2YS$8XHaAjfYVik8IrO6gjiyrxe5ABYccrvTqF8YXB6rIcc=", "last_login": "2017-05-14T04:03:18.004Z", "username": "13th_team_final11", "real_name": "no", "email": "13th_team_final11@oj.com", "create_time": "2017-04-27T15:45:46.628Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"64\":2,\"65\":2,\"66\":2,\"73\":1,\"78\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 159, "fields": {"password": "pbkdf2_sha256$24000$fv3HkrMtgPXQ$yFarHlgDgMM1j0U9z6GV9z1zufCg5gZxG763J2Jy6k8=", "last_login": "2017-05-14T04:01:22.115Z", "username": "13th_team_final12", "real_name": "no", "email": "13th_team_final12@oj.com", "create_time": "2017-04-27T15:45:46.815Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":1,\"64\":1,\"44\":1,\"73\":1,\"69\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 160, "fields": {"password": "pbkdf2_sha256$24000$0PRFfFLOyx2N$02r7SRO34E21ibWhYFf0axNQ+Swb7cOppMuC+JMNGk8=", "last_login": "2017-05-14T03:58:51.486Z", "username": "13th_team_final13", "real_name": "no", "email": "13th_team_final13@oj.com", "create_time": "2017-04-27T15:45:46.986Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"64\":2,\"65\":2,\"66\":2,\"68\":2,\"73\":1,\"78\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 161, "fields": {"password": "pbkdf2_sha256$24000$oumKqRQW6Pwb$LYWzRPmTsimQ9JPad4TdhIAvUQZFxsL4a3oHrYdDpKQ=", "last_login": "2017-05-14T04:07:44.705Z", "username": "13th_team_final14", "real_name": "no", "email": "13th_team_final14@oj.com", "create_time": "2017-04-27T15:45:47.159Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":1,\"73\":1,\"44\":1,\"64\":2,\"71\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 162, "fields": {"password": "pbkdf2_sha256$24000$2UuJfMjevRVI$9VRhUH5AOTw3qA/m+EtAED62FkijFbRyZ9chr0HuxLI=", "last_login": "2017-05-14T07:17:20.605Z", "username": "13th_team_final15", "real_name": "no", "email": "13th_team_final15@oj.com", "create_time": "2017-04-27T15:45:47.333Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":2,\"73\":1,\"44\":1,\"64\":2,\"71\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 163, "fields": {"password": "pbkdf2_sha256$24000$qgfSKGEr54im$TUPRMqZ/RgZKRkFJUZVA1eP1TmNUgZhYjp7nfgv4gdw=", "last_login": "2017-05-14T04:12:52.368Z", "username": "13th_team_final16", "real_name": "no", "email": "13th_team_final16@oj.com", "create_time": "2017-04-27T15:45:47.523Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":2,\"73\":1,\"44\":1,\"64\":1,\"78\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 164, "fields": {"password": "pbkdf2_sha256$24000$bUeiUWODCDJf$8o2QO+8kTCg9WjGxm4UXsBFG6xFgsQ7h6zfmqLoPNoA=", "last_login": "2017-05-14T04:03:51.560Z", "username": "13th_team_final17", "real_name": "no", "email": "13th_team_final17@oj.com", "create_time": "2017-04-27T15:45:47.733Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"64\":2,\"65\":2,\"66\":2,\"73\":1,\"78\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 165, "fields": {"password": "pbkdf2_sha256$24000$scrEHuDM6UVF$jUeELmGiqW7YkdhZTCeOlcDvtNVb2ZhR7glh00m2pFo=", "last_login": "2017-05-14T03:59:52.242Z", "username": "13th_team_final18", "real_name": "no", "email": "13th_team_final18@oj.com", "create_time": "2017-04-27T15:45:47.909Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":2,\"73\":1,\"44\":1,\"64\":2,\"65\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 166, "fields": {"password": "pbkdf2_sha256$24000$mVfygjYvRYIg$DWgNnxtPAy025fa4WLAIml0sWRFeyjB/lRnw21XLdEk=", "last_login": "2017-05-14T04:01:33.951Z", "username": "13th_team_final19", "real_name": "no", "email": "13th_team_final19@oj.com", "create_time": "2017-04-27T15:45:48.124Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"73\":1,\"44\":1,\"64\":2,\"65\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 167, "fields": {"password": "pbkdf2_sha256$24000$9z8uVxSx3VFn$aW/glVdHBlZvQ02l0GwoA9WWUtSwQ5Tib+7ZsRcrVJ0=", "last_login": "2017-05-14T04:04:22.550Z", "username": "13th_team_final20", "real_name": "no", "email": "13th_team_final20@oj.com", "create_time": "2017-04-27T15:45:48.305Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"64\":2,\"44\":1,\"73\":1,\"78\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 168, "fields": {"password": "pbkdf2_sha256$24000$35650sfqiYNb$o9MtunPzhhvcA2b9X8VSj6jsCMfjNqQZJP1G+MSkP8w=", "last_login": "2017-05-14T04:04:57.157Z", "username": "13th_team_final21", "real_name": "no", "email": "13th_team_final21@oj.com", "create_time": "2017-04-27T15:45:48.505Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"71\":2,\"44\":1,\"73\":1,\"66\":1,\"69\":2,\"68\":1,\"64\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 169, "fields": {"password": "pbkdf2_sha256$24000$B1Rgm4B8mGhN$8VJcOM5sIa8KjkQsU+eDvcXiYlSG2fvrcagiun72LZQ=", "last_login": "2017-05-14T04:20:03.739Z", "username": "13th_team_final22", "real_name": "no", "email": "13th_team_final22@oj.com", "create_time": "2017-04-27T15:45:48.688Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":2,\"64\":2,\"44\":1,\"73\":1,\"69\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 170, "fields": {"password": "pbkdf2_sha256$24000$HAxkVnqIKFhI$yXa9J6U6zEQ7EySBrueWHubdHb33TiKkG2cPjiHCFAc=", "last_login": "2017-05-14T07:27:11.112Z", "username": "13th_team_final23", "real_name": "no", "email": "13th_team_final23@oj.com", "create_time": "2017-04-27T15:45:48.869Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":2,\"73\":1,\"44\":1,\"64\":2,\"66\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 171, "fields": {"password": "pbkdf2_sha256$24000$qhMaB9oAWgFL$NHdevEJRgOmWJy5fKNUzsAvGRdWJEsW9uRWPDfxjLKA=", "last_login": "2017-05-14T08:57:20.203Z", "username": "13th_team_final24", "real_name": "no", "email": "13th_team_final24@oj.com", "create_time": "2017-04-27T15:45:49.067Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":2,\"73\":1,\"44\":1,\"64\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 172, "fields": {"password": "pbkdf2_sha256$24000$XimP00xSZRue$QhvlzpmG7Cp771AGprR32lCNxk1fPrhVkSEIR1dWk7Q=", "last_login": "2017-05-14T04:00:40.512Z", "username": "13th_team_final25", "real_name": "no", "email": "13th_team_final25@oj.com", "create_time": "2017-04-27T15:45:49.251Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":2,\"64\":2,\"44\":1,\"73\":1,\"66\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 173, "fields": {"password": "pbkdf2_sha256$24000$uY3rn4YG3T4J$vtp+6YbUf8BUbGp9uQHFcIW63U4DCDd/aH0J5mFX/Hw=", "last_login": "2017-05-14T04:00:19.070Z", "username": "13th_team_final26", "real_name": "no", "email": "13th_team_final26@oj.com", "create_time": "2017-04-27T15:45:49.412Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"64\":1,\"44\":1,\"73\":1,\"65\":2,\"66\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 174, "fields": {"password": "pbkdf2_sha256$24000$8ivsyOkJ0f8x$wWHug37T7QZlvCi+jDbQHWk+Plm+U1MUffZpaDjyAdw=", "last_login": "2017-05-14T04:01:33.006Z", "username": "13th_team_final27", "real_name": "no", "email": "13th_team_final27@oj.com", "create_time": "2017-04-27T15:45:49.594Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"73\":1,\"44\":1,\"78\":2,\"64\":2,\"70\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 175, "fields": {"password": "pbkdf2_sha256$24000$ap512Ej4g2pt$eqBxLneDKsCaCf1tg0fr00faTSQS9/S+7SIv1I7Jl9A=", "last_login": "2017-05-14T04:11:49.911Z", "username": "13th_team_final28", "real_name": "no", "email": "13th_team_final28@oj.com", "create_time": "2017-04-27T15:45:49.751Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":2,\"73\":1,\"44\":1,\"64\":2,\"71\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 176, "fields": {"password": "pbkdf2_sha256$24000$PHBFiCXVoLao$iHF840nzzbOVkzpNv/3oGDjdnDLHu+Fq9ob8/v18plg=", "last_login": "2017-05-14T04:07:47.841Z", "username": "13th_team_final29", "real_name": "no", "email": "13th_team_final29@oj.com", "create_time": "2017-04-27T15:45:49.998Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":2,\"64\":2,\"44\":1,\"73\":1,\"71\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 177, "fields": {"password": "pbkdf2_sha256$24000$ZyGHaLXz4ue0$RfVH/5USxw1UOuADRyRnJE3QzTV+KRsVehGR8UDHx3M=", "last_login": "2017-05-14T04:17:22.741Z", "username": "13th_team_final30", "real_name": "no", "email": "13th_team_final30@oj.com", "create_time": "2017-04-27T15:45:50.203Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":2,\"73\":1,\"44\":1,\"64\":2,\"65\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 178, "fields": {"password": "pbkdf2_sha256$24000$E2D6nDw3XKPL$7lMDpqtNt/IDsRuVIZwhgl2v58EYfe+j5zcSxOJLAxo=", "last_login": "2017-05-14T04:04:36.424Z", "username": "13th_team_final31", "real_name": "no", "email": "13th_team_final31@oj.com", "create_time": "2017-04-27T15:45:50.410Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"71\":2,\"44\":1,\"64\":2,\"65\":2,\"66\":2,\"70\":2,\"73\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 179, "fields": {"password": "pbkdf2_sha256$24000$Mh9KRAYQVo7N$esgpPdKe640F2hD3O4bjZmJ1XUyUX0YWvksQl1FVCME=", "last_login": "2017-05-14T04:04:20.015Z", "username": "13th_team_final32", "real_name": "no", "email": "13th_team_final32@oj.com", "create_time": "2017-04-27T15:45:50.577Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"73\":2,\"65\":2,\"68\":2,\"64\":2,\"78\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 180, "fields": {"password": "pbkdf2_sha256$24000$N81odujHVo4x$hhdjl3tJU+U5I0RYb4HZXNa1+YInlHz+56IdhD8D4js=", "last_login": "2017-05-14T04:03:48.333Z", "username": "13th_team_final33", "real_name": "no", "email": "13th_team_final33@oj.com", "create_time": "2017-04-27T15:45:50.743Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":2,\"73\":1,\"44\":1,\"64\":2,\"66\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 181, "fields": {"password": "pbkdf2_sha256$24000$py9XWVEniKRB$nfsnxSmGGXzY/j8uYzmY/313MLujxp4aw4KnlAfWzt0=", "last_login": "2017-05-14T04:05:32.487Z", "username": "13th_team_final34", "real_name": "no", "email": "13th_team_final34@oj.com", "create_time": "2017-04-27T15:45:50.928Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":1,\"64\":2,\"44\":1,\"73\":1,\"71\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 182, "fields": {"password": "pbkdf2_sha256$24000$x1TbNO1D9DdV$ifVHqsBik66N3VoDZVlpqd7lBGlqPEmbczo+73GJLqc=", "last_login": "2017-05-14T04:02:45.747Z", "username": "13th_team_final35", "real_name": "no", "email": "13th_team_final35@oj.com", "create_time": "2017-04-27T15:45:51.147Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"64\":2,\"44\":1,\"73\":1,\"65\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 183, "fields": {"password": "pbkdf2_sha256$24000$zcGXTzNLMZvW$8qJv6KTn2IIAhX+qiq8gx7k6aH+C4yTRi9uaA9AflYI=", "last_login": "2017-05-14T06:38:15.076Z", "username": "13th_team_final36", "real_name": "no", "email": "13th_team_final36@oj.com", "create_time": "2017-04-27T15:45:51.337Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"73\":1,\"44\":1,\"64\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 184, "fields": {"password": "pbkdf2_sha256$24000$Mu9Q41yCG6Ra$n1Nh6Xx9jwSZxRnDpLhbyIRB3lnj0FsX285EyCayt2o=", "last_login": "2017-05-14T04:15:04.516Z", "username": "13th_team_final37", "real_name": "no", "email": "13th_team_final37@oj.com", "create_time": "2017-04-27T15:45:51.525Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":2,\"64\":2,\"44\":1,\"73\":1,\"78\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 185, "fields": {"password": "pbkdf2_sha256$24000$XOIMybSAsnrr$2wHA9+ZoZG2k4H1NUwOmzAGtDi8mWOoulz5vXJm1uD8=", "last_login": "2017-05-14T04:01:47.928Z", "username": "13th_team_final38", "real_name": "no", "email": "13th_team_final38@oj.com", "create_time": "2017-04-27T15:45:51.702Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"64\":2,\"66\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 186, "fields": {"password": "pbkdf2_sha256$24000$5MK3uqHKtXlS$LZCTWmiuMm1BfPqbI1HHPL9b5x9E1LorBB2HFK/YzME=", "last_login": "2017-05-14T04:00:32.639Z", "username": "13th_team_final39", "real_name": "no", "email": "13th_team_final39@oj.com", "create_time": "2017-04-27T15:45:51.875Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":2,\"73\":1,\"44\":1,\"64\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 187, "fields": {"password": "pbkdf2_sha256$24000$2yerrKW5TG1y$SMpcBPjMAxQVYRMMdnqj5cN99LpIYjKpbuYhuXzIn68=", "last_login": "2017-05-14T04:01:18.159Z", "username": "13th_team_final40", "real_name": "no", "email": "13th_team_final40@oj.com", "create_time": "2017-04-27T15:45:52.079Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":2,\"73\":1,\"44\":1,\"64\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 188, "fields": {"password": "pbkdf2_sha256$24000$1T64kvz1EvFD$sK1x70rMnn8E3slNjppzXT5F9Nr3St+OKws8Q4Pu93o=", "last_login": "2017-05-14T04:01:09.996Z", "username": "13th_team_final41", "real_name": "no", "email": "13th_team_final41@oj.com", "create_time": "2017-04-27T15:45:52.274Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"64\":2,\"72\":1,\"66\":1,\"68\":1,\"73\":1,\"78\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 189, "fields": {"password": "pbkdf2_sha256$24000$OjCtjlqORnRv$XwvO3p6IYSAxc+GL00Fmq1Xqo9zYKl1JmnTCX/dDShw=", "last_login": "2017-05-14T04:03:23.902Z", "username": "13th_team_final42", "real_name": "no", "email": "13th_team_final42@oj.com", "create_time": "2017-04-27T15:45:52.437Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"64\":1,\"44\":1,\"73\":1,\"72\":2,\"66\":2,\"68\":1,\"69\":2,\"78\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 190, "fields": {"password": "pbkdf2_sha256$24000$RjElVIo7uhPn$Dz+EzBQc8ygZbQeX+NwxbsdyGDZJeXk2V0G3ZW4+YBc=", "last_login": "2017-05-14T04:07:09.070Z", "username": "13th_team_final43", "real_name": "no", "email": "13th_team_final43@oj.com", "create_time": "2017-04-27T15:45:52.607Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"73\":1,\"65\":1,\"66\":1,\"70\":1,\"68\":1,\"64\":1,\"72\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 191, "fields": {"password": "pbkdf2_sha256$24000$YHXhZYufuCN4$MAvVgHrzjLte+Z9TrwaRUc0Ln/ShFV64N1X0VosWiyk=", "last_login": "2017-05-14T04:09:53.237Z", "username": "13th_team_final44", "real_name": "no", "email": "13th_team_final44@oj.com", "create_time": "2017-04-27T15:45:52.791Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"73\":1,\"65\":2,\"66\":1,\"70\":1,\"68\":1,\"64\":1,\"78\":2,\"72\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 192, "fields": {"password": "pbkdf2_sha256$24000$6lgidtGxI6jy$tqcP0/ay03DluG9HQ9psKmDD2utqntZYTtoRJ4Wp0Cs=", "last_login": "2017-05-14T04:06:19.759Z", "username": "13th_team_final45", "real_name": "no", "email": "13th_team_final45@oj.com", "create_time": "2017-04-27T15:45:52.985Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"64\":1,\"66\":1,\"70\":2,\"68\":1,\"73\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 193, "fields": {"password": "pbkdf2_sha256$24000$Fwsukm3AGYqE$FUPU9AmphKiMBnqKlXI34lJqKoYWWlTsIZneqeWoKgM=", "last_login": "2017-05-14T04:17:30.514Z", "username": "13th_team_final46", "real_name": "no", "email": "13th_team_final46@oj.com", "create_time": "2017-04-27T15:45:53.210Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":2,\"64\":2,\"44\":1,\"73\":2,\"65\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 194, "fields": {"password": "pbkdf2_sha256$24000$ji5uPWK97Gq6$+8RjYbdmJbWFdLnni8cfn7ZYQla7UVuta0a1hXRJHf4=", "last_login": "2017-05-14T04:03:03.693Z", "username": "13th_team_final47", "real_name": "no", "email": "13th_team_final47@oj.com", "create_time": "2017-04-27T15:45:53.440Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"64\":1,\"66\":1,\"70\":2,\"68\":1,\"73\":1,\"78\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 195, "fields": {"password": "pbkdf2_sha256$24000$9xVFc4JFnrwZ$XBQiJiu96vzVdST5+rIdHi844yeMS8l0R9WTsYpkK0A=", "last_login": "2017-05-14T04:01:21.187Z", "username": "13th_team_final48", "real_name": "no", "email": "13th_team_final48@oj.com", "create_time": "2017-04-27T15:45:53.601Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"68\":2,\"64\":1,\"44\":1,\"73\":1,\"66\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 196, "fields": {"password": "pbkdf2_sha256$24000$uAT3xQMfcRaU$YZhxoM6MT5cUJDbgm5/tsOwBHqwlYu2HgF5QuOuMFoM=", "last_login": "2017-05-14T04:05:43.448Z", "username": "13th_team_final49", "real_name": "no", "email": "13th_team_final49@oj.com", "create_time": "2017-04-27T15:45:53.804Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"44\":1,\"64\":1,\"65\":2,\"66\":2,\"68\":2,\"73\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 197, "fields": {"password": "pbkdf2_sha256$24000$5E8RZyNKLW8s$SJtK+7xVYff5H2HkhfRtmX997qSoKZ46R5KjG++n8YQ=", "last_login": null, "username": "13th_team_final50", "real_name": "no", "email": "13th_team_final50@oj.com", "create_time": "2017-04-27T15:45:53.970Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 198, "fields": {"password": "pbkdf2_sha256$24000$SH2QBhk5PR5G$hLC0saZyhPdkPB17mmOrD3hhbGVnESYW8q2HeiMozp4=", "last_login": null, "username": "13th_team_final51", "real_name": "no", "email": "13th_team_final51@oj.com", "create_time": "2017-04-27T15:45:54.144Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 199, "fields": {"password": "pbkdf2_sha256$24000$r8nLjzcXMHmg$8uI1Aq21Do8/9yHob//nRfiKgLJXQoVrm70R1zWbkKQ=", "last_login": null, "username": "13th_team_final52", "real_name": "no", "email": "13th_team_final52@oj.com", "create_time": "2017-04-27T15:45:54.324Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 200, "fields": {"password": "pbkdf2_sha256$24000$8heZRLzEA8HH$mZ9u/D3R8u3WH4Z9X1nySOrGcHxSpzXCRqxOM1HkOK0=", "last_login": null, "username": "13th_team_final53", "real_name": "no", "email": "13th_team_final53@oj.com", "create_time": "2017-04-27T15:45:54.484Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 201, "fields": {"password": "pbkdf2_sha256$24000$Elv9HOLLNA0J$cwwZ1GlHqfSDS1r5Ss3u6u6Yn1XvT5N1unrX4SysCG4=", "last_login": null, "username": "13th_team_final54", "real_name": "no", "email": "13th_team_final54@oj.com", "create_time": "2017-04-27T15:45:54.664Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 202, "fields": {"password": "pbkdf2_sha256$24000$43MzGs35RWu5$gb3VsQGQpGG1zg3BY3OiZQ6pdIhviB8HPgRJ2sGivFA=", "last_login": null, "username": "13th_team_final55", "real_name": "no", "email": "13th_team_final55@oj.com", "create_time": "2017-04-27T15:45:54.836Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 203, "fields": {"password": "pbkdf2_sha256$24000$tqWZCU980wt5$jE1/vwHzEiwSlPAcYGGJLLWPE59UtVA9R8wZ2YKpIVc=", "last_login": null, "username": "13th_team_final56", "real_name": "no", "email": "13th_team_final56@oj.com", "create_time": "2017-04-27T15:45:55.024Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 204, "fields": {"password": "pbkdf2_sha256$24000$Mjcu8F6XBNZD$HyebefLx9272Z2g0OQ7XSeOyIrMti+FC0WkfNaCvFS4=", "last_login": null, "username": "13th_team_final57", "real_name": "no", "email": "13th_team_final57@oj.com", "create_time": "2017-04-27T15:45:55.180Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 205, "fields": {"password": "pbkdf2_sha256$24000$WoWBiLtrVNSr$w/svcw8zme6fAB9NI8XYg32Jd6QyS+ccmGCkLALSiGk=", "last_login": null, "username": "13th_team_final58", "real_name": "no", "email": "13th_team_final58@oj.com", "create_time": "2017-04-27T15:45:55.369Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 206, "fields": {"password": "pbkdf2_sha256$24000$QhNmTg3UfIgS$qvksNToT/jTzh52KFqOc9Y+fz0etI20Cl94xHgCwwiQ=", "last_login": null, "username": "13th_team_final59", "real_name": "no", "email": "13th_team_final59@oj.com", "create_time": "2017-04-27T15:45:55.560Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 207, "fields": {"password": "pbkdf2_sha256$24000$9INz9Ml82iqg$I7aoUNF4ldAZWqXQq3Awotqynuiq4XHZOfaC+EzOVXA=", "last_login": "2017-05-12T03:28:40.437Z", "username": "13th_team_final60", "real_name": "no", "email": "13th_team_final60@oj.com", "create_time": "2017-04-27T15:45:55.725Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 208, "fields": {"password": "pbkdf2_sha256$24000$dSrB0X1cMO3t$gpsMo6cOlrz/2HpUVklZI0vC3l4EoZ2SozrBVS1wPuQ=", "last_login": "2017-04-27T16:33:43.135Z", "username": "houchuanjiang", "real_name": "\u4faf\u5ddd\u6c5f", "email": "359638966@qq.com", "create_time": "2017-04-27T16:33:31.387Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 209, "fields": {"password": "pbkdf2_sha256$24000$dOg23oT5hxU6$z2Pkp+dr5OpcZwuIX18kJFdxw80DPXY4KXPprZJyKcM=", "last_login": "2017-05-02T11:06:02.121Z", "username": "sub_handsomehow", "real_name": "handsomehow", "email": "sub_handsomehow@oj.com", "create_time": "2017-04-28T01:47:46.925Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"41\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 210, "fields": {"password": "pbkdf2_sha256$24000$fV4oTXnh8lS3$oRvr+2TcNM2k7IMq9TxriJmyVuEAuRkHFfzGuNmsYe4=", "last_login": "2017-05-02T11:09:04.094Z", "username": "handsomehow2", "real_name": "handsomehow", "email": "handsomehow2@oj.com", "create_time": "2017-04-28T01:49:00.870Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 211, "fields": {"password": "pbkdf2_sha256$24000$fsXTKqYzuySJ$yredRDL2cClH+FHH8pX91ixf0T1/+9kVtZ0TANl3XOM=", "last_login": "2017-04-28T02:35:00.471Z", "username": "2014110058", "real_name": "\u9f50\u8fbe", "email": "714881335@qq.com", "create_time": "2017-04-28T02:34:51.042Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 212, "fields": {"password": "pbkdf2_sha256$24000$WUaCjJrtL9Z4$Z3kU0/m8iYnw0CJC6pyOZIDgMFW6DGIujh6xiMI50Sw=", "last_login": "2017-05-07T04:29:29.513Z", "username": "abc", "real_name": "\u5218\u6b63\u7426", "email": "2576781304@qq.com", "create_time": "2017-04-28T02:37:47.845Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": "d011c05f06d911389fd92594b1ceac55", "reset_password_token_create_time": "2017-05-03T11:26:23.352Z", "auth_token": null, "two_factor_auth": false, "tfa_token": "13d14e56f9bb06ba961090a363d7620c", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 213, "fields": {"password": "pbkdf2_sha256$24000$6ObsS5g5RLbk$hQWQyVDQa6TO4I8/o+QYS72dY1SgVzJVqSy4gXwjxws=", "last_login": "2017-04-28T02:40:36.565Z", "username": "2015112111", "real_name": "\u6234\u5c71", "email": "616479200@qq.com", "create_time": "2017-04-28T02:40:20.606Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 214, "fields": {"password": "pbkdf2_sha256$24000$0LT053C2pnkp$k+pciih4e3jy0w3Z4NLfNs8TNxFy+QIo1JdE0xS9oLk=", "last_login": "2017-04-28T02:41:54.629Z", "username": "2017_team_2014110058", "real_name": "\u9f50\u8fbe", "email": "1591151377@qq.com", "create_time": "2017-04-28T02:41:46.268Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"53\":2,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 215, "fields": {"password": "pbkdf2_sha256$24000$DaL7wqrFrHcd$3wdw1mrwd3BSPBIID3QS4lXltznHCqOrh6QjZ1Y6Jvs=", "last_login": "2017-04-28T02:43:28.164Z", "username": "sully_liuyi", "real_name": "\u5218\u707f", "email": "835916033@qq.com", "create_time": "2017-04-28T02:43:12.774Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 216, "fields": {"password": "pbkdf2_sha256$24000$oUky5jIcGCeo$TqzQKM95wT+RpUk48oh7OvlOpjtRVmTo8r4c6s2JA2s=", "last_login": "2017-05-07T04:10:18.133Z", "username": "2017_team_2015112111", "real_name": "\u6234\u5c71", "email": "2248973626@qq.com", "create_time": "2017-04-28T02:49:40.810Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"52\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 217, "fields": {"password": "pbkdf2_sha256$24000$GvlmNfqq0ml2$cluhnDCHx3dek/jh+MGfZv/lt79cTyOmsqZq+UbfP14=", "last_login": "2017-05-14T03:18:00.200Z", "username": "2017_team_2016112458", "real_name": "\u5f20\u821c\u5b87", "email": "3315600969@qq.com", "create_time": "2017-04-28T03:18:44.778Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2366\":1,\"2365\":1,\"2364\":2,\"1000\":2},\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"43\":1,\"53\":1,\"52\":1,\"54\":1,\"50\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 218, "fields": {"password": "pbkdf2_sha256$24000$M1i8XZhub3kM$BOIVWm+AWZ1pBLiDxSmAJtD18H/vU6+q8B+IcuEdjL8=", "last_login": "2017-05-07T04:14:52.133Z", "username": "2017_team_2016112402", "real_name": "\u79e6\u864e", "email": "784264773@qq.com", "create_time": "2017-04-28T03:37:50.477Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"48\":1,\"49\":2,\"46\":1,\"47\":2,\"53\":2,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 219, "fields": {"password": "pbkdf2_sha256$24000$DRm6f55g0tFq$OBynM9THREu0FIbse7PEy2Bp0tUiLi3VYKlX6XO4oko=", "last_login": "2017-04-28T04:26:01.144Z", "username": "\u5434\u4f73\u9e3f", "real_name": "\u5434\u4f73\u9e3f", "email": "1195485846@qq.com", "create_time": "2017-04-28T04:25:53.389Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 220, "fields": {"password": "pbkdf2_sha256$24000$aHF8f2ML0Nz1$iK1RUJ/bwM3luTZf0avooujOV47zfi7kOw7rTyFrQQo=", "last_login": "2017-05-07T04:27:43.347Z", "username": "2017_team_2015112126", "real_name": "\u5434\u4f73\u9e3f", "email": "1444065567@qq.com", "create_time": "2017-04-28T04:31:03.609Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":1,\"52\":2,\"48\":1,\"49\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 221, "fields": {"password": "pbkdf2_sha256$24000$LuMSPzgFocE6$+us6eCx11AfWBjuxTbr8639hQpLvWIUbLpt/6R5i7BY=", "last_login": "2017-05-14T03:15:08.165Z", "username": "2017_team_2016112626", "real_name": "\u5218\u6d69\u73ae", "email": "13618026687@163.com", "create_time": "2017-04-28T04:32:25.828Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1},\"contest_problems\":{\"27\":1,\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 222, "fields": {"password": "pbkdf2_sha256$24000$1hzrDngmq1Hc$3hYTM18lBlPwR9rDHU7ptw1NXEldVFR/cEQDdhVvY1I=", "last_login": "2017-05-04T05:18:21.081Z", "username": "Venchy", "real_name": "\u738b\u6587\u742a", "email": "571971148@qq.com", "create_time": "2017-04-28T04:37:08.859Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "58a46a54068016c60f2bbecbee9f8e69", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 223, "fields": {"password": "pbkdf2_sha256$24000$I9yWpspkJUCh$kSnuAn4eii2jBhWNi1Hu1IdTJ7/p2wCvt4DO+vaTdFw=", "last_login": "2017-05-14T09:09:48.691Z", "username": "2017_team_2016111742", "real_name": "\u738b\u6587\u742a", "email": "939236947@qq.com", "create_time": "2017-04-28T04:48:36.597Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1728\":1,\"1726\":1,\"1727\":1,\"1724\":1,\"1725\":1,\"1722\":1,\"1723\":1,\"1721\":1},\"contest_problems\":{\"39\":1,\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"37\":1,\"43\":2,\"53\":2,\"41\":1,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 224, "fields": {"password": "pbkdf2_sha256$24000$I31lA1uXTicc$REYheiHBVHQnmQXD0rxuDnJkUEhO3iFrJtgMhwUJA50=", "last_login": "2017-05-14T04:03:27.670Z", "username": "2017_team_2014111940", "real_name": "\u5f20\u78a7\u4f9d", "email": "1604773725@qq.com", "create_time": "2017-04-28T04:51:11.642Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1},\"contest_problems\":{\"27\":2,\"48\":1,\"49\":2,\"46\":1,\"47\":1,\"53\":2,\"52\":1,\"75\":2,\"74\":1,\"54\":2}}", "reset_password_token": "0ab589879d737ed53b6e2a6ebe8a1d18", "reset_password_token_create_time": "2017-05-05T11:45:59.317Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 225, "fields": {"password": "pbkdf2_sha256$24000$rrrlZdy7bwVm$8PGSCsYFd3bVbC94aXYq41ioQt21ItESM956f7dX4dk=", "last_login": "2017-05-07T09:35:02.287Z", "username": "2017_team_2015111948", "real_name": "cyberdebut", "email": "15528330350@163.com", "create_time": "2017-04-28T04:52:51.782Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2346\":1,\"2368\":1,\"2367\":1,\"2365\":1,\"2364\":1,\"2363\":1,\"2362\":1,\"2361\":1},\"contest_problems\":{\"48\":1,\"49\":1,\"33\":1,\"54\":1,\"50\":1,\"53\":1,\"52\":1,\"46\":1,\"47\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 226, "fields": {"password": "pbkdf2_sha256$24000$T0FPtGfWOtxe$QUYfaAb+0elAQg27QhzQZh9FTALsavpUZepGtw+WikE=", "last_login": "2017-05-14T03:59:46.246Z", "username": "2017_team_2016112642", "real_name": "\u6587\u8d85\u8c6a", "email": "918125618@qq.com", "create_time": "2017-04-28T04:53:23.102Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"48\":1,\"49\":2,\"46\":1,\"47\":1,\"53\":2,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 227, "fields": {"password": "pbkdf2_sha256$24000$Yuomh8Xz8K4p$LlRdj/JDstnbo88MhJS8g+ZMlQa/aLIqaQqcal4cMOM=", "last_login": null, "username": "2017_tem_2015110069", "real_name": "\u90d1\u8d5b", "email": "1901642568@qq.com", "create_time": "2017-04-28T04:58:44.142Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 228, "fields": {"password": "pbkdf2_sha256$24000$uHVaSbTojh9a$0MhkpIthgsiRApTkW+PZakzvlWHmEEqeXbKwAzemyRI=", "last_login": "2017-05-07T06:40:59.590Z", "username": "2017_team_2015110069", "real_name": "\u90d1\u8d5b", "email": "847891840@163.com", "create_time": "2017-04-28T05:00:46.341Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":2},\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"50\":1,\"53\":1,\"52\":1,\"54\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 229, "fields": {"password": "pbkdf2_sha256$24000$AYQVZLw72VnQ$buRD2fnwEzfblvVTtpBAaZwRkc3pdKHevbwmFFQ20u4=", "last_login": "2017-05-14T04:01:02.431Z", "username": "2017_team_2016112207", "real_name": "\u7956\u8f69", "email": "yanglibiz@163.com", "create_time": "2017-04-28T05:04:03.996Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"39\":1,\"38\":2,\"48\":1,\"49\":1,\"46\":1,\"42\":2,\"37\":1,\"43\":1,\"53\":2,\"41\":1,\"75\":1,\"74\":1,\"47\":1,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 230, "fields": {"password": "pbkdf2_sha256$24000$uB75K2r5xAkO$u4ddUeBH5Px6BtHJkM0hHxYGQFWgbrkY8fR9mtohMNg=", "last_login": "2017-05-07T09:29:06.511Z", "username": "2017_team_2014114187", "real_name": "\u5f20\u536b", "email": "david0077890@qq.com", "create_time": "2017-04-28T05:42:55.172Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1},\"contest_problems\":{\"48\":2,\"49\":2,\"46\":1,\"54\":2,\"53\":2,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 231, "fields": {"password": "pbkdf2_sha256$24000$tVcscpTuTfK1$Gp61GqD0t3WeV5y427ZCHuhJHMTAmRHMJvorEsbqPL0=", "last_login": "2017-05-14T03:31:35.041Z", "username": "2017_team_2016112445", "real_name": "\u8096\u6893\u715c", "email": "745234234@qq.com", "create_time": "2017-04-28T08:01:44.852Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":1,\"49\":1,\"48\":1,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 232, "fields": {"password": "pbkdf2_sha256$24000$ZKXy42VsGMB8$Mkj725or0wiXNSSsgR+XUF/67R3hYVhQqkrvhFbPKxU=", "last_login": "2017-05-07T06:03:36.359Z", "username": "2017_team_2016112650", "real_name": "\u9648\u6668", "email": "528010499@qq.com", "create_time": "2017-04-28T08:38:47.262Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1001\":2,\"1000\":2},\"contest_problems\":{\"46\":1,\"47\":1,\"49\":2,\"48\":1,\"52\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 233, "fields": {"password": "pbkdf2_sha256$24000$L9UqkgT1q9B5$gMh0ZAHydHQW8M844gr3pSsVjFBy/610m15N8pe892U=", "last_login": "2017-04-28T08:42:29.568Z", "username": "500\u7403\u7684\u6885\u7403\u738b", "real_name": "\u675c\u9e4f\u7a0b", "email": "331499321@qq.com", "create_time": "2017-04-28T08:42:01.928Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 234, "fields": {"password": "pbkdf2_sha256$24000$T4r9berVKFhW$B72gCCWilwm5gx6ZSSkJK+ukNXwX4aFoZ+ITBic9OJ0=", "last_login": "2017-04-28T09:01:31.897Z", "username": "2017_team_2016112345", "real_name": "\u675c\u9e4f\u7a0b", "email": "1721873304@qq.com", "create_time": "2017-04-28T09:01:00.994Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"30\":2,\"43\":2,\"41\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 235, "fields": {"password": "pbkdf2_sha256$24000$9Qt1LSrSws6C$u25s/hMlWnlp6Gon+eBYCMh1jv86tWqBVk+fmKW3Mdc=", "last_login": "2017-04-28T09:39:15.587Z", "username": "2017-team-2016112404", "real_name": "\u5e9e\u59dd\u96ef", "email": "919153908@qq.com", "create_time": "2017-04-28T09:38:55.686Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": "2ac0f563470b23090bc63b64dede993a", "reset_password_token_create_time": "2017-05-03T12:21:24.756Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 236, "fields": {"password": "pbkdf2_sha256$24000$2YmaTz0fNdBG$tjWiaPu2mxOeM2xTSZNV2QLZhUEwOOW5Fogy8hQ/LgE=", "last_login": "2017-04-28T14:34:23.801Z", "username": "278023136", "real_name": "\u9ece\u5bb6\u660a", "email": "278023136@qq.com", "create_time": "2017-04-28T14:34:08.511Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": "664c78e85aad3bc63f468405a5555c8a", "reset_password_token_create_time": "2017-05-07T01:44:04.345Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 237, "fields": {"password": "pbkdf2_sha256$24000$mCgnOdImEi0L$0iqt5EVa1dUvHfuUc8Tq93oyPstPKfLcfTY9xK/zwzE=", "last_login": "2017-05-07T08:50:06.304Z", "username": "2017_team_2016112646", "real_name": "\u5510\u8861\u7487", "email": "1094168447@qq.com", "create_time": "2017-04-28T15:17:17.200Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2366\":2},\"contest_problems\":{\"46\":1,\"47\":1,\"49\":2,\"48\":1,\"52\":2}}", "reset_password_token": "627fcbad3e2f3d9fef5bee06bccd95f2", "reset_password_token_create_time": "2017-05-01T10:17:00.305Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 238, "fields": {"password": "pbkdf2_sha256$24000$ErQ1BNT8A4Ll$sIrqMUFRHXPy2pc4T/1tAvj0Zao8W7JfytwEl8YOp6g=", "last_login": "2017-05-07T04:00:44.510Z", "username": "2017_team_2015111833", "real_name": "\u9093\u91d1\u7ea2", "email": "1229010807@qq.com", "create_time": "2017-04-29T02:18:39.554Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2367\":2,\"2368\":2},\"contest_problems\":{\"27\":1,\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"53\":2,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 239, "fields": {"password": "pbkdf2_sha256$24000$7hwXm29lh6Kq$2oM71B5bICq82K7KvPLnL7eOuz4SmdOj4NziOJZy0gI=", "last_login": "2017-05-14T04:09:59.341Z", "username": "2017_team_2016114693", "real_name": "\u51af\u6770\u4ea8", "email": "jasonjay118@vip.qq.com", "create_time": "2017-04-29T02:55:53.264Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1},\"contest_problems\":{\"46\":1,\"47\":1,\"49\":1,\"48\":1,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 240, "fields": {"password": "pbkdf2_sha256$24000$dN0OsT8b8Ax1$OdpCdJrF6Gbgof5pOj6jBcV7nph9tDjwOl6rVR6AJiA=", "last_login": "2017-05-02T05:02:36.915Z", "username": "lalala", "real_name": "lalala", "email": "2205392787@qq.com", "create_time": "2017-04-29T05:41:47.945Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 241, "fields": {"password": "pbkdf2_sha256$24000$BHTw1xQycKAq$2OYlxrwJ6B9b62GOLY6lXhBxuzAsTlagPp5MHdjrL2s=", "last_login": "2017-05-07T04:38:02.150Z", "username": "2017_team_2016112504", "real_name": "\u5f20\u660a", "email": "1287481784@qq.com", "create_time": "2017-04-29T07:21:19.105Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1001\":2,\"1000\":1},\"contest_problems\":{\"48\":1,\"49\":2,\"46\":1,\"47\":1,\"37\":1,\"52\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 242, "fields": {"password": "pbkdf2_sha256$24000$jULoMADpuLZq$sdBhv6RL3Mt9232ULwsuqWErF6NLgFLtgLAgc3aRESI=", "last_login": "2017-05-10T11:00:13.687Z", "username": "oj_root", "real_name": "root", "email": "oj@oj.com", "create_time": "2017-04-29T09:21:53.894Z", "admin_type": 2, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 243, "fields": {"password": "pbkdf2_sha256$24000$5tctaoy2QNWs$0b15e0stVfH4UE4NX/BOJ3fWs22suGIFybQFbThU4Oc=", "last_login": "2017-05-14T02:24:36.156Z", "username": "2017_team_2015111426", "real_name": "\u90d1\u9038\u51e1", "email": "tzefzyf1@163.com", "create_time": "2017-04-29T09:27:46.464Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"53\":2,\"52\":2,\"75\":1,\"74\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 244, "fields": {"password": "pbkdf2_sha256$24000$vf5vfJywKLJa$DsVc3T+5kH97dTrEssTKW05goqNqMaNtZ13ajpIdpVw=", "last_login": "2017-05-07T03:39:29.261Z", "username": "2017_team_2014111852", "real_name": "\u5434\u96e8\u79cb", "email": "512927230@qq.com", "create_time": "2017-04-29T13:37:50.724Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":1,\"49\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 245, "fields": {"password": "pbkdf2_sha256$24000$Twrwx40X6oHA$lzBxtNdEP6I/LqcLYatFBInaP3Hstb4X1dIUXmz4mu0=", "last_login": "2017-05-09T13:43:17.962Z", "username": "yanhk", "real_name": "\u4e25\u6d77\u5eb7", "email": "18382157764@163.com", "create_time": "2017-04-29T13:44:14.672Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1001\":1,\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 246, "fields": {"password": "pbkdf2_sha256$24000$FOs5HIm4Syu4$wIAIg5CFWkZ7yvl3V3RAatdUwO7uMDkgvfu+mTmWyCA=", "last_login": "2017-04-30T06:41:31.287Z", "username": "\u8bd5\u4e00\u8bd5", "real_name": "\u8042\u83b9\u83b9", "email": "1269230886@qq.com", "create_time": "2017-04-30T06:41:14.668Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1},\"contest_problems\":{\"27\":2,\"37\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 247, "fields": {"password": "pbkdf2_sha256$24000$TNJ2kpfxawRs$kKT1eVm3Y8rvsfljwI/OHvOXQ1rcs0iLjtqJFhPgESk=", "last_login": "2017-04-30T07:04:00.220Z", "username": "\u4f55\u6709\u4e1c", "real_name": "\u4f55\u6709\u4e1c", "email": "787428017@qq.com", "create_time": "2017-04-30T07:03:44.946Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 248, "fields": {"password": "pbkdf2_sha256$24000$UjrUkevmHIBL$mpYiN56OQL2aJdlDlEqHsS07EyHwJ9Al8LuRTR+pfZU=", "last_login": "2017-04-30T09:36:01.655Z", "username": "zhanghualin", "real_name": "\u5f20\u534e\u6797", "email": "2642657105@qq.com", "create_time": "2017-04-30T09:35:09.445Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 249, "fields": {"password": "pbkdf2_sha256$24000$ewzmFvcrLTml$9iU9vXF5Bw8yeRAixh3W4sYEeMhDDtF0C4dq+8y74/c=", "last_login": "2017-04-30T13:24:54.230Z", "username": "difenddf", "real_name": "\u4e1b\u4e3d\u9759", "email": "853817640@qq.com", "create_time": "2017-04-30T10:51:51.499Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 250, "fields": {"password": "pbkdf2_sha256$24000$Pm4eYKcc4eEo$61+jUi6wqp+Y3qNiQdG8MCfH+YlVlXZGtJ9NbmWq6pE=", "last_login": "2017-05-14T03:46:41.579Z", "username": "2017_team_2016112366", "real_name": "\u5df4\u4fca\u5cf0", "email": "635697315@qq.com", "create_time": "2017-04-30T12:09:59.072Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"27\":1,\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"37\":1,\"43\":1,\"35\":2,\"41\":1,\"38\":1,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 251, "fields": {"password": "pbkdf2_sha256$24000$iZl3m2mS4mu8$unBJ1K8pACntWghPkTcMX2weffuKCFxJK3a3om8r5tA=", "last_login": "2017-05-14T03:59:05.123Z", "username": "2017_team_2016112369", "real_name": "\u4e8e\u5353\u5982", "email": "yuzhuoru@qq.com", "create_time": "2017-04-30T12:30:05.188Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"38\":2,\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"43\":1,\"53\":2,\"41\":1,\"27\":2,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 252, "fields": {"password": "pbkdf2_sha256$24000$vjgvoIrRu5Wp$rGmJMeT6+FR6VbkEQFsnFvAOmvY+i1QXurIeTvMZwuk=", "last_login": "2017-05-07T15:12:11.520Z", "username": "\u4e4c\u4e91\u8865\u5929", "real_name": "LCR", "email": "1197438287@qq.com", "create_time": "2017-04-30T16:22:16.904Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "0ec777884f042d2b7844d9ee90244de2", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 253, "fields": {"password": "pbkdf2_sha256$24000$ttu7fNb84uLa$o7nfWm7Q33jGg3DnpzBj7j0YpFbgvD22ktlIXGA5NeU=", "last_login": "2017-05-07T09:17:17.901Z", "username": "2017_team_2016112428", "real_name": "\u674e\u627f\u777f", "email": "20100902@163.com", "create_time": "2017-04-30T16:33:39.198Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":1,\"52\":2,\"48\":1,\"49\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 254, "fields": {"password": "pbkdf2_sha256$24000$FQW50r9gAieo$oxtqiFmUryao5C0k4UEekQmLkKRTmiM99S7DlGl3u4o=", "last_login": "2017-05-01T04:23:45.122Z", "username": "Xiaotian_Ma", "real_name": "\u9a6c\u5578\u5929", "email": "405028157@qq.com", "create_time": "2017-05-01T04:23:03.598Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 255, "fields": {"password": "pbkdf2_sha256$24000$gdGCJSNESHpp$Sh7ZH4L3FklOm66OB9Ussdr5kcg2fAH9UD3CpFEDFYE=", "last_login": "2017-05-01T09:00:07.471Z", "username": "\u8bb8\u680b\u4f1f", "real_name": "\u8bb8\u680b\u4f1f", "email": "1659010991@qq.com", "create_time": "2017-05-01T08:57:14.445Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": "f298245fefed11465d3fcc7b5b2872a5", "reset_password_token_create_time": "2017-05-01T08:58:10.334Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 256, "fields": {"password": "pbkdf2_sha256$24000$o58SxNXHgRxe$z8otYf1PX+bXnNGjH/IZghgHnjiiEPQLy85GLw+B720=", "last_login": "2017-05-14T03:54:35.463Z", "username": "2017_team_2016112528", "real_name": "\u8bb8\u680b\u4f1f", "email": "xdwkeep@foxmail.com", "create_time": "2017-05-01T09:07:13.547Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"39\":1,\"38\":1,\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"37\":1,\"53\":2,\"41\":1,\"52\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 257, "fields": {"password": "pbkdf2_sha256$24000$XZYi7RVcXDt9$8SDih573PmFjF2PmhOKn7t1XZIglg6u3DtxyNZWvYjY=", "last_login": "2017-05-01T12:37:05.658Z", "username": "UIbear", "real_name": "UIbear", "email": "799307055@qq.com", "create_time": "2017-05-01T12:36:53.602Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "a3988645c2122d701fd23032e2d9b7d9", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 258, "fields": {"password": "pbkdf2_sha256$24000$zmSEimsLLPmD$9dFmgJ18RE+biThS8vQmELjcvCcYQPyWuoqRlA4Q4v0=", "last_login": "2017-05-07T04:40:46.124Z", "username": "2017_team_2016112365", "real_name": "\u5218\u946b\u54f2", "email": "1119487100@qq.com", "create_time": "2017-05-01T14:10:57.813Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":1,\"27\":1,\"48\":1,\"49\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 259, "fields": {"password": "pbkdf2_sha256$24000$AjTm5vG2apq9$/UR6lRiNXGbAy7trjhgFjezQDqVTP7DaPYzhduzD5dM=", "last_login": "2017-05-03T08:34:06.184Z", "username": "2016_team_2016112368", "real_name": "\u6b66\u745e\u6893", "email": "1195479078@qq.com", "create_time": "2017-05-01T15:59:36.641Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"27\":1,\"29\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 260, "fields": {"password": "pbkdf2_sha256$24000$p53bxiIYgGDZ$SM1CmiZccIEatFQzdxh7rsIVqJyRuWBbeBzrKMH2SbE=", "last_login": "2017-05-01T17:35:57.958Z", "username": "Apps", "real_name": "verihy", "email": "hanyao@outlook.com", "create_time": "2017-05-01T17:35:54.490Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 261, "fields": {"password": "pbkdf2_sha256$24000$igJmAUGPb2OJ$mR2LrOVrOSoZMX8niuxMmWXE+M4MIJSQSpzV/Ht4jTg=", "last_login": "2017-05-07T06:15:33.411Z", "username": "2017_team_2014111927", "real_name": "\u5218\u4e1c\u6797", "email": "1273972467@qq.com", "create_time": "2017-05-02T01:49:11.853Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":2,\"48\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 262, "fields": {"password": "pbkdf2_sha256$24000$B3JhEWkRJ8A6$SJocWh/K2swJ1a4spcZcNAzhd5kiaUScCEcZ/k4MKLM=", "last_login": "2017-05-07T03:59:31.461Z", "username": "2016115060", "real_name": "\u9648\u6587\u677e", "email": "957509991@qq.com", "create_time": "2017-05-02T04:52:37.726Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 263, "fields": {"password": "pbkdf2_sha256$24000$iuVdz1v5XbgU$bG5O8GUNVhaGBPzJpqH6QYnvddaXY0jtPfr44ZQ2rM0=", "last_login": "2017-05-02T05:55:00.645Z", "username": "\u54c8\u54c8\u54c8", "real_name": "\u5e03\u4e3d\u6839", "email": "1820115178@qq.com", "create_time": "2017-05-02T05:54:48.195Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 264, "fields": {"password": "pbkdf2_sha256$24000$jiS4VvfJvdoX$C9w0i9HfbMZI/P++Le8cAOnZmx9zId/2JNN1V+bSiCY=", "last_login": "2017-05-03T10:46:32.900Z", "username": "BD", "real_name": "\u59dc\u9547\u4e1c", "email": "669196680@qq.com", "create_time": "2017-05-02T06:45:39.820Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 265, "fields": {"password": "pbkdf2_sha256$24000$E5PLucJd8Ftl$Y38hPrpotl8QVkhOEr+VXOkrKLNo48tAy+QmbnSYex0=", "last_login": "2017-05-06T13:54:10.874Z", "username": "ProNou", "real_name": "\u5468\u5e05", "email": "837120234@qq.com", "create_time": "2017-05-02T09:07:53.132Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 266, "fields": {"password": "pbkdf2_sha256$24000$wdT2eI8Pi7bE$70U8Fn6oANpjUPmAzGtJqza6WjNoGiU5qYKdlXmHe+o=", "last_login": "2017-05-14T04:05:08.023Z", "username": "2017_team_2016112364", "real_name": "\u4e8e\u53ef\u6c57", "email": "1114211280@qq.com", "create_time": "2017-05-02T12:00:56.264Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"39\":1,\"38\":1,\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"37\":1,\"43\":1,\"40\":1,\"41\":1,\"27\":1,\"35\":2,\"54\":2,\"52\":1,\"53\":2,\"50\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 267, "fields": {"password": "pbkdf2_sha256$24000$XSwZOnmQdOaL$AGTi7w+cFVMK3lZxVb85q3rZW9B7jzzur31+2daxi+Y=", "last_login": "2017-05-08T10:43:35.121Z", "username": "\u88d5reply", "real_name": "\u5ed6\u96c4", "email": "simon__lx@163.com", "create_time": "2017-05-02T13:44:20.164Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "ff1289a92161d69813fb01eeb0e704be", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 268, "fields": {"password": "pbkdf2_sha256$24000$KXOY0kNqhzB8$FgS/xxCpoy6cD3/ADvC8EKnfQrXPk05IzUqfnI6+bZ0=", "last_login": "2017-05-14T03:44:51.912Z", "username": "2017_team_2015111950", "real_name": "\u59dc\u6da6\u7693", "email": "1417520973@qq.com", "create_time": "2017-05-03T01:21:35.284Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2368\":1},\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"50\":2,\"53\":2,\"52\":1,\"54\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "c8109b2184875d1547dbb3c530e69c8c", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 269, "fields": {"password": "pbkdf2_sha256$24000$U9L6DvEqj61i$P2Xy67Bf80PBjEjjwKON8iBEozcmWLVphLy1iieym8Q=", "last_login": "2017-05-03T08:01:47.135Z", "username": "huffman", "real_name": "\u9648\u9526\u71ca", "email": "1132957409@qq.com", "create_time": "2017-05-03T07:59:52.494Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 270, "fields": {"password": "pbkdf2_sha256$24000$pSJ5PUbqu8ze$OkaMweS6l5JeKIuadAGR4hm6Plq2dbNV9aDRBn8edmM=", "last_login": "2017-05-07T06:58:17.433Z", "username": "2017_team_2015111876", "real_name": "\u9648\u9526\u71ca", "email": "876030715@qq.com", "create_time": "2017-05-03T08:02:46.504Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 271, "fields": {"password": "pbkdf2_sha256$24000$4cYs0tcmnhcb$IB9qFuQYIY6JwbSC9eYvaTe+uEKw5Jvq5jVmFe6/nts=", "last_login": null, "username": "01", "real_name": "\u9648\u6668", "email": "1342328996@qq.com", "create_time": "2017-05-03T10:04:09.060Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": "e7d94d103417cabdef2b9e6847f0fc48", "reset_password_token_create_time": "2017-05-03T10:04:52.737Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 272, "fields": {"password": "pbkdf2_sha256$24000$M5K7PXwVn2sW$SFp2Gt/gmv2olCOEGNClQz/cCnRYLUrVJO/WbabZFOM=", "last_login": "2017-05-07T06:02:58.891Z", "username": "2201", "real_name": "CHEN", "email": "2437198575@QQ.COM", "create_time": "2017-05-03T10:07:41.382Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2366\":2,\"2364\":2,\"1001\":2},\"contest_problems\":{\"27\":1,\"37\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 273, "fields": {"password": "pbkdf2_sha256$24000$OUp1uK02QeGi$Htk4BZ3wglMQd+zeOvsTseRIO+k7HpKW6MRFKbPnrRQ=", "last_login": "2017-05-07T10:29:46.480Z", "username": "2017_team_2014111763", "real_name": "OP", "email": "1125442953@qq.com", "create_time": "2017-05-03T11:24:21.525Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"50\":1,\"53\":1,\"52\":1,\"54\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 274, "fields": {"password": "pbkdf2_sha256$24000$oi7i1iuLW2P2$WW/nz4zVbww/vpUiELnB6fP1EcE+FbZyFyvQEyk7Gb8=", "last_login": "2017-05-07T04:42:06.614Z", "username": "2017_team_2016112460", "real_name": "\u5355\u5bcc\u839b", "email": "854357635@qq.com", "create_time": "2017-05-03T11:48:12.318Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2367\":2},\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"53\":2,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 275, "fields": {"password": "pbkdf2_sha256$24000$qYOS5mVLL3Sq$f+cB0/MVbZRct8EQzoelJ2XC3tmhuiJ2jbP3DPYAFE4=", "last_login": "2017-05-14T03:58:09.993Z", "username": "2017_team_2016115060", "real_name": "\u9648\u6587\u677e", "email": "1641632344@qq.com", "create_time": "2017-05-03T12:19:57.232Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1722\":1,\"1723\":1,\"1001\":1,\"1000\":1},\"contest_problems\":{\"48\":2,\"49\":1,\"46\":1,\"47\":1,\"37\":1,\"43\":2,\"53\":2,\"41\":2,\"52\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 276, "fields": {"password": "pbkdf2_sha256$24000$KcNgIVny2Ovn$5eyvop2u8sERRAfpvA5VYjqW4aLl/Cw9w3E7NAI4lq8=", "last_login": "2017-05-03T12:27:58.490Z", "username": "111", "real_name": "luott", "email": "1109640085@qq.com", "create_time": "2017-05-03T12:27:34.464Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "59a0d6bc5aadab2156752e61dc9043b7", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 277, "fields": {"password": "pbkdf2_sha256$24000$OtqCY9zQ8nDK$ADOKkmAFr/15JDNOW6FL4Gdqj/10unc6gzebvFx1DSo=", "last_login": "2017-05-07T04:41:33.622Z", "username": "2017_team_2016112404", "real_name": "\u5e9e\u59dd\u96ef", "email": "exzhenxizzx@163.com", "create_time": "2017-05-03T12:31:45.284Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1004\":2},\"contest_problems\":{\"46\":1,\"47\":2,\"49\":2,\"48\":1,\"52\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 278, "fields": {"password": "pbkdf2_sha256$24000$wqZj5faE9YaB$SNE+GZpP3klMYlyl2D5XFGGjBt4eFRaf7DEUNOeMmn8=", "last_login": "2017-05-07T10:03:32.148Z", "username": "2017_team_2016112444", "real_name": "\u5415\u5143\u5eb6", "email": "sdargbd@163.com", "create_time": "2017-05-03T13:37:58.126Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2362\":1},\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"50\":2,\"53\":1,\"52\":1,\"54\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 279, "fields": {"password": "pbkdf2_sha256$24000$wjCChxCqMpww$jYyn6Fm+JzTuV5w8keatj72SOViX5Z/njrullau+06s=", "last_login": "2017-05-03T14:16:00.661Z", "username": "ugolin", "real_name": "\u8d75\u6bd3\u535a", "email": "1525637754@qq.com", "create_time": "2017-05-03T14:15:48.722Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 280, "fields": {"password": "pbkdf2_sha256$24000$YsuVzVCN2kKd$TYAJNmnWBxV66Z/YWc0WYg255UPy3UDaiX52d9U8ROs=", "last_login": "2017-05-04T04:14:59.025Z", "username": "Celtics", "real_name": "\u674e\u5fd7\u9065", "email": "562546211@qq.com", "create_time": "2017-05-04T04:14:45.867Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 281, "fields": {"password": "pbkdf2_sha256$24000$9r7T5NRJeQXi$1RkaI58peUhccn/u6Wh0K+PwPWzYCaYUEBaqHIly99I=", "last_login": "2017-05-04T04:17:14.094Z", "username": "2017_team_2015110355", "real_name": "\u9a6c\u5578\u5929", "email": "maxiaotian@swjtu.edu.cn", "create_time": "2017-05-04T04:16:57.733Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 282, "fields": {"password": "pbkdf2_sha256$24000$8kGTT5lq5D1H$RxSE44qui7XzPO8jSdb7NsEHRNOlsyrcovdDMU6SoPE=", "last_login": "2017-05-05T13:42:07.120Z", "username": "guyu", "real_name": "\u8c37\u96e8\u9f99", "email": "1318448494@qq.com", "create_time": "2017-05-04T05:37:29.808Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 283, "fields": {"password": "pbkdf2_sha256$24000$Vntg7sFiQpOT$Anv2Umw0aJUdYg1pp0cpryx+ON7R76vffI6r8e1U3Vs=", "last_login": "2017-05-07T04:07:05.092Z", "username": "2017_team_2014111876", "real_name": "\u9ec4\u94ee", "email": "750761626@qq.com", "create_time": "2017-05-04T05:38:35.935Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2358\":1,\"1004\":2,\"1002\":1,\"1001\":1},\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"53\":2,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 284, "fields": {"password": "pbkdf2_sha256$24000$AgHRMxDwhvmr$ou2S4BR1p1nFm1n7sy1FYAVQt6wXTE+sBUJsCujsuSk=", "last_login": "2017-05-07T13:49:33.464Z", "username": "2017_team_2016112328", "real_name": "\u5218\u4e00\u7433", "email": "1751970710@qq.com", "create_time": "2017-05-04T09:54:53.362Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":1,\"48\":1,\"49\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 285, "fields": {"password": "pbkdf2_sha256$24000$U8QFB2Hob1GE$ba9Gm8Jxf06m9fHAYtbtIK0VEsHFyKppSCg0A1ttIQQ=", "last_login": "2017-05-04T10:01:38.166Z", "username": "beicheng1989", "real_name": "\u53f6\u6d69\u7ef4", "email": "272860581@qq.com", "create_time": "2017-05-04T10:01:06.077Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 286, "fields": {"password": "pbkdf2_sha256$24000$XrtJJquqyHRW$JW5Nz0TTYf94+lJNW2ZbM7lrFCgW1wHxzhUd7MV+CLI=", "last_login": "2017-05-07T05:19:34.179Z", "username": "2017_team_2014111567", "real_name": "\u53f6\u6d69\u7ef4", "email": "912431483@qq.com", "create_time": "2017-05-04T10:05:18.827Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":1,\"48\":2,\"49\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 287, "fields": {"password": "pbkdf2_sha256$24000$Y6CGR6xFRdre$1+WTe+M/OVfuFLNrNf0hE3J9zq43qR6tV8v+3ZYYR9w=", "last_login": "2017-05-04T11:45:31.379Z", "username": "\u963f\u5361\u6797", "real_name": "\u963f\u5361\u6797", "email": "sickbaimu@foxmail.com", "create_time": "2017-05-04T11:41:39.066Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 288, "fields": {"password": "pbkdf2_sha256$24000$LS5lHq95Vhe0$tQ+ZWwsNsE/VAUCgBHUtte+LKM8cvegjZZRfj/NYdTo=", "last_login": "2017-05-14T03:57:40.971Z", "username": "2017_team_2015111984", "real_name": "\u8d75\u4e50", "email": "lqlyclvp45073@163.com", "create_time": "2017-05-04T11:45:28.943Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2366\":2},\"contest_problems\":{\"46\":1,\"47\":1,\"49\":1,\"48\":1,\"52\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 289, "fields": {"password": "pbkdf2_sha256$24000$IVcDyIAS2wVw$Uv3NjODpY0fRIG4aqO5sEYnq8RajkLMKktKBH+z6q/w=", "last_login": "2017-05-05T12:19:36.993Z", "username": "2016112233", "real_name": "\u9ec4\u4e4b\u79cb", "email": "529544203@qq.com", "create_time": "2017-05-04T14:14:44.663Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 290, "fields": {"password": "pbkdf2_sha256$24000$4Q8UFlEhQXJ3$g04J6J3q1Kps8ZJ2tGUFznAQmzjpGtcdaA1OSuCjsyk=", "last_login": "2017-05-14T04:17:42.018Z", "username": "2017_team_2015110992", "real_name": "\u9ec4\u5065\u683c", "email": "870587689@qq.com", "create_time": "2017-05-04T15:19:31.423Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":2},\"contest_problems\":{\"46\":1,\"47\":1,\"49\":1,\"48\":1,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 291, "fields": {"password": "pbkdf2_sha256$24000$BYbibjeZOOEk$kOTHP88OJXpRSbhLFuMHNT2MlvWo4JVFoS0haEa+wjY=", "last_login": "2017-05-05T08:27:47.810Z", "username": "845378603", "real_name": "\u738b\u9646\u660e", "email": "ming845378603@qq.com", "create_time": "2017-05-05T08:20:46.888Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 292, "fields": {"password": "pbkdf2_sha256$24000$YTDKGM9EcMjq$bdswIVF1PByAB5Bx1WVzLJrL3KLirfG/XCrwEznvj/w=", "last_login": "2017-05-07T09:26:41.476Z", "username": "2017_team_2016112154", "real_name": "\u738b\u9646\u660e", "email": "ming845378603@126.com", "create_time": "2017-05-05T08:45:10.687Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2364\":1,\"1001\":2,\"1000\":1},\"contest_problems\":{\"46\":1,\"47\":1,\"48\":1,\"49\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 293, "fields": {"password": "pbkdf2_sha256$24000$RAIInl12yPoo$6Cr3u0vIckMHfCfM4/7nSmPIICG/iVlzcl7sCbgvFh8=", "last_login": "2017-05-14T03:58:18.336Z", "username": "2017_team_2016112453", "real_name": "\u5468\u7426", "email": "15528016030@163.com", "create_time": "2017-05-05T09:08:18.600Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"50\":2,\"53\":2,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 294, "fields": {"password": "pbkdf2_sha256$24000$JJ4ljEPoAqXI$QEafmO74ga+RIVo8LXK90e9RS3kdA5HmwOjfT4N3Ju4=", "last_login": "2017-05-05T10:16:54.006Z", "username": "nayangdejiandan", "real_name": "\u5ed6\u68a6", "email": "1968069529@qq.com", "create_time": "2017-05-05T10:16:47.057Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 295, "fields": {"password": "pbkdf2_sha256$24000$2Rtnl3qdxuVA$kGgnJnLJZTYuq/4bzKIqz08HM625OojB8CqEJxLM0jc=", "last_login": "2017-05-08T00:25:59.011Z", "username": "2017-team-2016112426", "real_name": "\u674e\u4ece\u6ea2", "email": "1134008154@qq.com", "create_time": "2017-05-05T10:41:09.376Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":1,\"48\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 296, "fields": {"password": "pbkdf2_sha256$24000$LsDTaHWhVC2n$wAYGccnCWjoezybLrV9OD6iI5GYgg5CVMNIQ00ZcLto=", "last_login": "2017-05-05T11:34:12.220Z", "username": "\u4e94\u4e00", "real_name": "\u8d75\u5efa\u5353", "email": "1754703273@qq.com", "create_time": "2017-05-05T11:34:01.979Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 297, "fields": {"password": "pbkdf2_sha256$24000$Y9Gw0xo31Ecu$ZzMQz02hOHqApb+eysxYsAOGWRc3oaALiuNsDwgR1Ag=", "last_login": "2017-05-05T11:34:39.323Z", "username": "13769517696", "real_name": "\u5510\u745e\u82b3", "email": "192071015@qq.com", "create_time": "2017-05-05T11:34:22.083Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 298, "fields": {"password": "pbkdf2_sha256$24000$IFuivFiXRSwM$rM33SN4MoF/YTOEfdtKFHBWZfDu3koF6aALQ0HQ+HBg=", "last_login": "2017-05-06T18:00:11.176Z", "username": "mier", "real_name": "\u666f\u4e00\u771f", "email": "bujiadi.tian@qq.com", "create_time": "2017-05-05T11:55:46.915Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "386325d67432717c1228fdbdd1311d05", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 299, "fields": {"password": "pbkdf2_sha256$24000$QhbLCIw4dXTq$sBvwiSlUMpm1/k1YlaONB47FkDeU8OMI6/x9jJ4quZo=", "last_login": "2017-05-07T05:06:09.137Z", "username": "2017_team_2016112332", "real_name": "\u8bb8\u741b", "email": "897463801@qq.com", "create_time": "2017-05-05T12:08:33.140Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"48\":1,\"49\":2,\"46\":1,\"47\":1,\"53\":2,\"52\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "b9371f586036d18679910136c2394dd9", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 300, "fields": {"password": "pbkdf2_sha256$24000$I977XaEz5WXN$SCDHPcfgGToULHk452NJy0N+2qkzlLRxy7nb+trWMfU=", "last_login": "2017-05-05T12:10:04.144Z", "username": "mi", "real_name": "\u5218\u96c5\u8c6a", "email": "915996579@qq.com", "create_time": "2017-05-05T12:09:56.330Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 301, "fields": {"password": "pbkdf2_sha256$24000$XoSLLAKaIvId$gbDhUN7uAWiqE4FkF841HNjU3aPb8uo5B+pULIoVdeE=", "last_login": "2017-05-05T12:20:23.336Z", "username": "2017_team_2015111938", "real_name": "\u5218\u6853", "email": "16@my.swjtu.edu.cn", "create_time": "2017-05-05T12:15:21.088Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"50\":1,\"52\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 302, "fields": {"password": "pbkdf2_sha256$24000$ZdpWLL1VH8Xd$3L9hw7jvf66ogtGvkqXnVrVlwYtTU8GoRBWh2+ZUIKY=", "last_login": "2017-05-14T06:37:05.292Z", "username": "2017_team_2015114779", "real_name": "\u5218\u96c5\u8c6a", "email": "1319539376@qq.com", "create_time": "2017-05-05T12:15:23.835Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2364\":2},\"contest_problems\":{\"25\":1,\"48\":1,\"49\":2,\"46\":1,\"47\":1,\"52\":1,\"55\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 303, "fields": {"password": "pbkdf2_sha256$24000$116WnaCB09g7$jNcaykR/Ct2UEC0keMgMq5em/r1OyATjeeDJ8ALUWYk=", "last_login": "2017-05-07T03:53:25.126Z", "username": "\u9ad8\u5c71\u6d41\u6c34\u9047\u77e5\u97f3", "real_name": "\u9676\u6c5f\u5cf0", "email": "2944049150@qq.com", "create_time": "2017-05-05T12:15:35.493Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 304, "fields": {"password": "pbkdf2_sha256$24000$XJ2lgk5Xh604$b9xdHAWiFnkw3g2Vplxe5RwQpnwSeuwTI5WQYIttBB0=", "last_login": "2017-05-05T12:19:20.811Z", "username": "2017-team-2014110736", "real_name": "\u9a6c\u8212\u9662", "email": "3493160892@qq.com", "create_time": "2017-05-05T12:18:55.075Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 305, "fields": {"password": "pbkdf2_sha256$24000$A6De2FQDrgul$sUqUS1nMjIaQNaLWbrO2fSlk0elkX4Xk4baKmbKEceQ=", "last_login": "2017-05-06T10:21:56.659Z", "username": "comet", "real_name": "\u5b8b\u5146", "email": "476664355@qq.com", "create_time": "2017-05-05T12:24:33.483Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1},\"contest_problems\":{\"39\":2,\"38\":2,\"37\":1,\"43\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 306, "fields": {"password": "pbkdf2_sha256$24000$cFzjZDb2VjSQ$2xkhfNIrJ8TLjSTPagigpXDl6ZwzdKp0NdBEmSrZ3OM=", "last_login": "2017-05-07T07:23:27.854Z", "username": "2017_team_2015114326", "real_name": "\u5b8b\u5146", "email": "936714854@qq.com", "create_time": "2017-05-05T12:27:14.833Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"53\":2,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 307, "fields": {"password": "pbkdf2_sha256$24000$iMrUf9e8nDX7$j5Ij04dVhVe7bW2gFgsSVoOmRBTltnAI0RaVRIFeQn4=", "last_login": "2017-05-05T12:34:24.437Z", "username": "\u674e\u767d\u4e0d\u767d", "real_name": "\u5f20\u6653\u4f1f", "email": "1065482852@qq.com", "create_time": "2017-05-05T12:31:15.877Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 308, "fields": {"password": "pbkdf2_sha256$24000$rGvfY1yEMdTe$HX7swHj1GU5ag4FId+d4UeViRwxeq5yNeVIbz7w5d7E=", "last_login": "2017-05-05T12:33:10.214Z", "username": "2017_team_2016112233", "real_name": "\u9ec4\u4e4b\u79cb", "email": "1571852671@qq.com", "create_time": "2017-05-05T12:32:49.002Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1001\":2,\"1000\":1},\"contest_problems\":{\"46\":1,\"47\":1,\"49\":2,\"48\":1,\"52\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 309, "fields": {"password": "pbkdf2_sha256$24000$m5Qjz5aMrKVE$RR3Y0vw35kCNHlvrgNQ4cy2TgHP8CFuPRbTaGDr8rXQ=", "last_login": "2017-05-07T04:13:01.706Z", "username": "2017_team_2016112388", "real_name": "\u5468\u96d5", "email": "zhoudiaodiao@outlook.com", "create_time": "2017-05-05T12:36:06.680Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":2,\"52\":2,\"48\":2,\"49\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 310, "fields": {"password": "pbkdf2_sha256$24000$i1BHpjYw9hm3$4ORpdvTTT5WWpHY8c9/AaPTL4kmcUZRcoea+hP71rJs=", "last_login": "2017-05-07T04:09:49.696Z", "username": "2017_team_2016112399", "real_name": "\u5f20\u6653\u4f1f", "email": "105482852@qq.com", "create_time": "2017-05-05T12:36:15.608Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1001\":2,\"1000\":1},\"contest_problems\":{\"46\":1,\"47\":2,\"48\":1,\"49\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 311, "fields": {"password": "pbkdf2_sha256$24000$9x31YZgFJyED$4WgydT3l/KUGceYITznI1PlYJs9PB60HCS0ryVFUHhU=", "last_login": "2017-05-09T14:35:54.280Z", "username": "2017_team_2014112108", "real_name": "\u4e01\u6587\u7426", "email": "1691176714@qq.com", "create_time": "2017-05-05T12:37:12.080Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1},\"contest_problems\":{\"46\":1,\"47\":2,\"48\":1,\"49\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 312, "fields": {"password": "pbkdf2_sha256$24000$4pQiTBBcoOqx$JqepVuiCSz+/OdqF1xkdidG4WMLAnJIqmKdEZvQ6UlU=", "last_login": "2017-05-14T03:54:13.331Z", "username": "2017_team_2014112021", "real_name": "\u738b\u96ea\u96ea", "email": "846264557@qq.com", "create_time": "2017-05-05T12:37:32.243Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1},\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"50\":2,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 313, "fields": {"password": "pbkdf2_sha256$24000$kCTs19RKl9HL$SykLXJGN9V9b6rOXpODg0aseegfKjEX17NjOE+gc2Fk=", "last_login": "2017-05-05T12:46:53.444Z", "username": "2017_team_2015111926", "real_name": "\u5f20\u6839\u9f50", "email": "15228940449@163.com", "create_time": "2017-05-05T12:46:27.002Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 314, "fields": {"password": "pbkdf2_sha256$24000$POd2lY1F3Oaa$haxBWX1JNccuqff20RkoeUU6pyy1NS6hNw1jvK169tY=", "last_login": "2017-05-05T13:06:56.397Z", "username": "2017_team_2015111929", "real_name": "\u738b\u4e3e", "email": "2430716731@qq.com", "create_time": "2017-05-05T12:51:29.820Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1},\"contest_problems\":{\"46\":1,\"47\":1,\"48\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 315, "fields": {"password": "pbkdf2_sha256$24000$E757jx2QxseM$nGZxx8UfXaRPtCmYVI/RjsEY1pU7SE8/7BCqmAcebQ4=", "last_login": "2017-05-07T09:31:36.737Z", "username": "ly24680", "real_name": "\u6881\u61ff", "email": "501223047@qq.com", "create_time": "2017-05-05T12:53:14.872Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1001\":2,\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 316, "fields": {"password": "pbkdf2_sha256$24000$GtN0D7v55Hdn$ZqagDVEKlNJjJx6k2XQ/9TlhUFMyKMnhhnEG2qbmvVc=", "last_login": "2017-05-07T04:23:29.838Z", "username": "2017_team_2016112268", "real_name": "\u9648\u6631\u748b", "email": "1257197811@qq.com", "create_time": "2017-05-05T12:53:51.088Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"48\":2,\"49\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 317, "fields": {"password": "pbkdf2_sha256$24000$vjBc9Umj4olJ$L3Pa5Hb48hkL8IMq0/V0QSK7jfQHCfhNR55uVfkC92M=", "last_login": "2017-05-05T13:11:35.166Z", "username": "paopao", "real_name": "\u4efb\u946b", "email": "1874313885@qq.com", "create_time": "2017-05-05T12:55:23.992Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 318, "fields": {"password": "pbkdf2_sha256$24000$8d0cLSJu051I$XlDkgG87tgqN1aYpO/5E6fAvmeDA4GBpQiWSVR4tmTI=", "last_login": "2017-05-07T11:39:43.095Z", "username": "wuming", "real_name": "\u9648\u540d\u541b", "email": "312868490@qq.com", "create_time": "2017-05-05T12:58:48.467Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "ffc349d831dc1973d6702454da06fecf", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 319, "fields": {"password": "pbkdf2_sha256$24000$EBZoR0uPe93k$P3JaUEQtFKHrYIR44ShAVjwOm/MPQrOYjuoR8yfgmRI=", "last_login": "2017-05-07T10:53:14.185Z", "username": "2017_team_2016112249", "real_name": "\u9648\u540d\u541b", "email": "996815104@qq.com", "create_time": "2017-05-05T13:17:13.554Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":1,\"48\":1,\"49\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 320, "fields": {"password": "pbkdf2_sha256$24000$p4CBqmceB4UD$wmMqO7e8pDNyJ2G3fJNDxbKqUjDy7DBhJ+4HGNBbSPI=", "last_login": "2017-05-05T13:20:04.466Z", "username": "longlong", "real_name": "\u9648\u9f99", "email": "1161905847@qq.com", "create_time": "2017-05-05T13:19:42.066Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 321, "fields": {"password": "pbkdf2_sha256$24000$UMH6KrGNZMn0$/xi8MVvPqjLvbYYCyY4Q+S76E3h5lSkeW6nO3EsGCpU=", "last_login": "2017-05-05T13:20:42.093Z", "username": "2017_team_2015111970", "real_name": "\u5468\u5b50\u52b2", "email": "945999739@qq.com", "create_time": "2017-05-05T13:20:04.914Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 322, "fields": {"password": "pbkdf2_sha256$24000$VeZJaaXOVQEP$B/Af7BAhjnXuwb1ZjbMfnS/WIVeCZbNi5Ubt7mqGhQo=", "last_login": "2017-05-14T02:36:26.615Z", "username": "sunshuangcheng", "real_name": "\u5b59\u53cc\u6210", "email": "shuangchengsun@163.com", "create_time": "2017-05-05T13:21:41.746Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1078\":1,\"1001\":1,\"1000\":1},\"contest_problems\":{\"75\":1,\"27\":1,\"74\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 323, "fields": {"password": "pbkdf2_sha256$24000$tooaLROfeSPV$Qcgx7CRdPg9APRnz/2QCo0dZXMUdiFm+0ikSVGW/9fw=", "last_login": "2017-05-05T13:22:51.010Z", "username": "\u4eca\u770b\u4e86", "real_name": "\u738b\u7545\u946b", "email": "2568800925@qq.com", "create_time": "2017-05-05T13:22:33.147Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 324, "fields": {"password": "pbkdf2_sha256$24000$h99AoipnJemO$LgR2gDGcfJT7zqFvcgdoMX4cjtrk4ztS6+4tVIgRwv0=", "last_login": "2017-05-07T07:15:09.785Z", "username": "2017_team_2014111613", "real_name": "\u738b\u7545\u946b", "email": "2568800928@qq.com", "create_time": "2017-05-05T13:25:47.976Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "b43b812f11a66066bddccd232d88b380", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 325, "fields": {"password": "pbkdf2_sha256$24000$15pPacfcnD1a$jEFMBMoSDtbazk+iBMVWLr2icxV+ztbONX8rd8nzsug=", "last_login": "2017-05-14T02:11:28.753Z", "username": "2017_team_2015111706", "real_name": "\u674e\u5c55\u9e4f", "email": "15528215172@163.com", "create_time": "2017-05-05T13:32:29.658Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2367\":2},\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"53\":2,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 326, "fields": {"password": "pbkdf2_sha256$24000$MtffMh6fEx6q$XmcffzzsDUB8Ul8YTlYNKsMO7AdA5013o3HynFGuAOQ=", "last_login": "2017-05-14T04:01:07.200Z", "username": "2017_team_2015111941", "real_name": "\u674e\u5b50\u6770", "email": "524268676@qq.com", "create_time": "2017-05-05T13:36:43.205Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1},\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"50\":2,\"53\":2,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 327, "fields": {"password": "pbkdf2_sha256$24000$jMzQedrg6637$2YDXDVlv5W8pn+Y2+H+jqCx9ZTMTKUaaCT6R8AJiCCM=", "last_login": "2017-05-07T05:03:56.346Z", "username": "2017_team_2015114671", "real_name": "\u59dc\u9547\u4e1c", "email": "weinikuqifx@163.com", "create_time": "2017-05-05T13:38:49.513Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":2,\"49\":2,\"48\":1,\"52\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 328, "fields": {"password": "pbkdf2_sha256$24000$gCe1Q3uYdSP6$ZmHIxFhUCc3BINCwdXYxvYP1utCI6or5r2OE2XIMAi8=", "last_login": "2017-05-08T12:59:40.492Z", "username": "llz", "real_name": "\u6881\u5c9a\u5ce5", "email": "lianglanzheng@qq.com", "create_time": "2017-05-05T13:48:00.567Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 329, "fields": {"password": "pbkdf2_sha256$24000$m2PPsWES7EEt$OmOlx9aqnB3T5eY2kzD0Q4wkUXc74Onrgk5QIdNLV1A=", "last_login": "2017-05-14T02:43:40.705Z", "username": "2017_team_2014112181", "real_name": "\u9676\u9704", "email": "1486317473@qq.com", "create_time": "2017-05-05T15:13:51.434Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"48\":1,\"49\":2,\"46\":1,\"47\":1,\"53\":2,\"52\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 330, "fields": {"password": "pbkdf2_sha256$24000$NMmlGPOWjt8r$FYx66f1pMk2hFdVZ/OnyHvxWRp6vfa1idiybr6pGHZ8=", "last_login": "2017-05-05T15:37:43.492Z", "username": "wazrro", "real_name": "\u6234\u4e00\u6d69", "email": "763623534@qq.com", "create_time": "2017-05-05T15:37:38.640Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 331, "fields": {"password": "pbkdf2_sha256$24000$0zJImjX1ak5z$WphKhVJLZN7m2AkfDeazJb0MHWQm0wxHXosQD87EsAw=", "last_login": "2017-05-07T03:05:50.919Z", "username": "\u7075", "real_name": "\u5468\u4e1c\u534e", "email": "2904250241@qq.com", "create_time": "2017-05-05T23:51:25.636Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 332, "fields": {"password": "pbkdf2_sha256$24000$4mpTPUbMUbam$TyGkGp3EwxzDfjhV4unGX/dY+EHfe/WqMqBVqOnFN5I=", "last_login": "2017-05-06T00:31:42.393Z", "username": "x", "real_name": "\u738b\u73a5\u7487", "email": "806706615@qq.com", "create_time": "2017-05-06T00:31:13.884Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 333, "fields": {"password": "pbkdf2_sha256$24000$uvm2eap03fjH$RgxKFyZ5GZ480BlJQ8t/uq6g+WivlOjVey56Ft6srRE=", "last_login": "2017-05-14T03:59:14.612Z", "username": "2017_team_2016110107", "real_name": "\u4efb\u94b0", "email": "1649859811@qq.com", "create_time": "2017-05-06T01:17:02.390Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2320\":2,\"2361\":1,\"1000\":1},\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"52\":2,\"74\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 334, "fields": {"password": "pbkdf2_sha256$24000$qh2NP9gHIyFd$U7T+H/k+YOeHgsMhZK2weAxAAAtSdtitRNhB173W2h0=", "last_login": "2017-05-07T13:13:15.394Z", "username": "\u7267\u6fd1\u7ea2\u8389\u6816", "real_name": "\u674e\u5b50\u741b", "email": "826497357@qq.com", "create_time": "2017-05-06T01:23:54.636Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1001\":1,\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 335, "fields": {"password": "pbkdf2_sha256$24000$BwHqqjW1haEC$2i4dFjFYbzuD+wVAfIjd9PNsMMbyll9g650UiJGimL8=", "last_login": "2017-05-07T06:21:08.487Z", "username": "2017_team_2015111844", "real_name": "\u8463\u821c\u534e", "email": "694761161@qq.com", "create_time": "2017-05-06T01:31:28.010Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":1,\"49\":2,\"48\":1,\"52\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 336, "fields": {"password": "pbkdf2_sha256$24000$uf7n1ROXrMmd$XyXiY4Zju6r8AZkvkehlHEOjTiWVcvthushF5OW2mhE=", "last_login": "2017-05-07T04:02:34.601Z", "username": "smiling", "real_name": "\u5218\u81f4\u8fdc", "email": "smiling826@amazon.cn", "create_time": "2017-05-06T01:48:06.421Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1001\":1,\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 337, "fields": {"password": "pbkdf2_sha256$24000$V2eiN8R2UTj9$N90UO5sdDlZglUN+3eDan7lE3CHrZe8iOpxfAcSB+H4=", "last_login": "2017-05-14T03:26:23.668Z", "username": "2017_team_2014110060", "real_name": "\u5b59\u53cc\u6210", "email": "1015744873@qq.com", "create_time": "2017-05-06T02:35:12.126Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"53\":2,\"52\":1,\"54\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 338, "fields": {"password": "pbkdf2_sha256$24000$BaxF97CDu2xr$J5pdgGB3uhCFdqWQQz5E/Ar1w1Iz2uKsEztPMbqPV7Q=", "last_login": "2017-05-14T02:29:30.517Z", "username": "2017_team_2014111883", "real_name": "\u90ed\u76f8\u6587", "email": "1425660150@qq.com", "create_time": "2017-05-06T02:43:51.417Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1},\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"53\":2,\"52\":1,\"75\":1,\"74\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "07feb6112aedb4ff9d27ca6bc596e198", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 339, "fields": {"password": "pbkdf2_sha256$24000$0WtXybhqKoaz$FaDfD9ZBt2XLpNfk8f6XI9mBX86ra6gjYHbunu22WlQ=", "last_login": "2017-05-07T03:57:42.581Z", "username": "\u58f6\u58f6", "real_name": "\u51af\u4e00\u94ed", "email": "450649825@qq.com", "create_time": "2017-05-06T03:06:32.485Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 340, "fields": {"password": "pbkdf2_sha256$24000$LsRToQT1V3Rm$2Z42bP7QHmuLmKAluu+GzCNi+z4OEWxEEhvq5GugsSE=", "last_login": "2017-05-06T15:58:58.584Z", "username": "\u5c0f\u733f", "real_name": "\u6f58\u79b9", "email": "1377263301@qq.com", "create_time": "2017-05-06T03:53:35.005Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1001\":2,\"1000\":1},\"contest_problems\":{\"27\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 341, "fields": {"password": "pbkdf2_sha256$24000$m6xYSxvo7D2l$D+eew2+7dh0rX/C+zQKHWIHslFWfpiNrvnJgNcL8aBo=", "last_login": "2017-05-06T16:00:31.791Z", "username": "\u848b\u53cc\u5a77", "real_name": "\u848b\u53cc\u5a77", "email": "3209033619@qq.com", "create_time": "2017-05-06T05:44:59.014Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 342, "fields": {"password": "pbkdf2_sha256$24000$FA1sVmkwPWNR$HDJQe7wonwOTfhRkgDLE4S1rY1DYuzQcgHLrfbWLjbw=", "last_login": "2017-05-06T05:54:15.421Z", "username": "2015111617", "real_name": "\u5f6d\u5b50\u901a", "email": "519334736@qq.com", "create_time": "2017-05-06T05:54:02.342Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "bd4096dd51f9bafa5e960f52fd8072b6", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 343, "fields": {"password": "pbkdf2_sha256$24000$txjIBVu1ihha$LCjkAH38o/BWj82YQzxrw+pWXEKn7jwnYk4llomWvMQ=", "last_login": "2017-05-07T09:48:48.802Z", "username": "2017_team_2015111617", "real_name": "\u5f6d\u5b50\u901a", "email": "2636270081@qq.com", "create_time": "2017-05-06T06:01:16.658Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":2,\"48\":1,\"49\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 344, "fields": {"password": "pbkdf2_sha256$24000$S1sefAoj5iaP$WL+D0evtRNbMhEA3fLhabAbX2zgKQONFGPDtvxBQMm8=", "last_login": "2017-05-06T06:52:07.063Z", "username": "\u5355\u540d\u4e00\u4e2a\u7a7a\u683c", "real_name": "\u66fe\u5baa\u9534", "email": "1084808006@qq.com", "create_time": "2017-05-06T06:50:39.207Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 345, "fields": {"password": "pbkdf2_sha256$24000$OmCULNwSCCjk$EVTJYoU5FBRWVT+YWP4K4oV3UOnrB/AJsJHU5E95eAE=", "last_login": "2017-05-06T12:45:57.574Z", "username": "\u5e73\u80f8\u5c0f\u535a\u58eb", "real_name": "\u66f9\u8861", "email": "18298858908@163.com", "create_time": "2017-05-06T12:45:30.058Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 346, "fields": {"password": "pbkdf2_sha256$24000$kzV44LCK9zlc$1snZjnhUxcj3TPHYHcWtK3qj93I4KQ+ot2ga6ybXt44=", "last_login": "2017-05-07T03:57:56.340Z", "username": "wait", "real_name": "\u83ab\u674f\u6980", "email": "214958194@qq.com", "create_time": "2017-05-06T12:47:16.669Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 347, "fields": {"password": "pbkdf2_sha256$24000$JYkHz7FwpPou$++HbwQyUIyzCo5KsTvxnTx3kYIKN5QHLwvPlpqIPOao=", "last_login": "2017-05-07T04:08:34.723Z", "username": "2017_team_2016114265", "real_name": "\u66f9\u8861", "email": "664092067@qq.com", "create_time": "2017-05-06T12:48:23.963Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"48\":2,\"52\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 348, "fields": {"password": "pbkdf2_sha256$24000$49LZ4bBD7kRy$/8tnA3m/wAst3tgtKPwQb+Zq1H778RHFO3mkwwwDQfw=", "last_login": "2017-05-06T12:51:26.551Z", "username": "Auirfey", "real_name": "\u8d39\u715c\u6668", "email": "927370850@qq.com", "create_time": "2017-05-06T12:51:13.642Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 349, "fields": {"password": "pbkdf2_sha256$24000$qH7rL1xKS8ke$lABHzyoYRefYpEYEIxt7dGxQfrQ/r6KdxQyF0Zwd5YE=", "last_login": "2017-05-11T08:19:45.020Z", "username": "abc123", "real_name": "abc123", "email": "269140068@qq.com", "create_time": "2017-05-06T13:00:17.477Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1},\"contest_problems\":{\"37\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 350, "fields": {"password": "pbkdf2_sha256$24000$CEL9JcTXWwYB$xMfv1URji7RgFR1dIFnvaLOMFZ2/GUaRjnDr96aHEVI=", "last_login": "2017-05-14T03:58:14.807Z", "username": "2017_team_2016112515", "real_name": "\u738b\u5609\u8c6a", "email": "1366670253@qq.com", "create_time": "2017-05-06T13:28:13.900Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"37\":2,\"52\":1}}", "reset_password_token": "929196129bc2f678b21cb4c932599425", "reset_password_token_create_time": "2017-05-06T13:29:34.079Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 351, "fields": {"password": "pbkdf2_sha256$24000$BHWa3nFQyBOe$nRu3Q3ilUpfW96JFbAAzkC5UVxWMnDsRQYxI+AkYEfc=", "last_login": "2017-05-07T09:37:13.404Z", "username": "2017_team_2015111836", "real_name": "\u7f57\u8bd7\u827a", "email": "1225086122@qq.com", "create_time": "2017-05-06T13:28:43.212Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":1,\"40\":2,\"48\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 352, "fields": {"password": "pbkdf2_sha256$24000$oTbmGwpdAWRE$lN8v4wBoHa3/ZC6/DbOJ1nXfFcBBFB410mc1hAlTdWU=", "last_login": "2017-05-06T13:55:13.434Z", "username": "2017_team_2016112423", "real_name": "\u5468\u5e05", "email": "2831602305@qq.com", "create_time": "2017-05-06T13:55:04.594Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":2,\"48\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 353, "fields": {"password": "pbkdf2_sha256$24000$FgMfwoZpgFAv$eWkr3392WGhFJh8CNHaifU0JB/87a6y5HO2qY+kNnvw=", "last_login": "2017-05-07T04:01:37.007Z", "username": "2017_team_2015111973", "real_name": "\u6b27\u535a\u96c5", "email": "1628397337@qq.com", "create_time": "2017-05-06T14:30:10.503Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 354, "fields": {"password": "pbkdf2_sha256$24000$rFLGFOuw6yDd$0Zttt2EKU+OGB7H/ac8sxZkFjNpZfO1A1XcamVJwJzM=", "last_login": "2017-05-07T04:13:36.740Z", "username": "2017_team_2015111971", "real_name": "\u5170\u6f9c", "email": "958522554@qq.com", "create_time": "2017-05-06T14:36:35.916Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"52\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 355, "fields": {"password": "pbkdf2_sha256$24000$QW4sWPGehbVh$hg3Z58prLy0NMISvJEhL1G4Yk78qElmFnmTKJKQtTVc=", "last_login": "2017-05-06T14:42:59.897Z", "username": "\u58a8\u67d3\u5c18\u6b87", "real_name": "\u5362\u51b0", "email": "1987558315@qq.com", "create_time": "2017-05-06T14:42:39.687Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 356, "fields": {"password": "pbkdf2_sha256$24000$tz8lKa0nnyVQ$t3cTBe47UYE+LzN4rGHY330/66PEJ6p/9jYqL6m6E0Q=", "last_login": "2017-05-06T15:24:35.435Z", "username": "\u5357\u5ff5", "real_name": "\u738b\u4f73\u4f73", "email": "1986802373@qq.com", "create_time": "2017-05-06T15:24:11.863Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1001\":2,\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 357, "fields": {"password": "pbkdf2_sha256$24000$gtSSnRBdcDZ1$9uWJZHhvD4259pKQzAT4uYo6QjUqCg4RrAfFmtv7hQQ=", "last_login": "2017-05-07T04:58:03.356Z", "username": "\u86cb\u7092\u996d", "real_name": "\u738b\u6d9b", "email": "1819572751@qq.com", "create_time": "2017-05-06T15:28:12.648Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 358, "fields": {"password": "pbkdf2_sha256$24000$NpQhsl2oGCXH$KOooLLtpW2aHYSMRH4NgGy/6vtyqKy93C21iy1J9/9U=", "last_login": "2017-05-06T16:11:18.114Z", "username": "2017_team_2015111974", "real_name": "\u738b\u6587\u6770", "email": "2907784667@qq.com", "create_time": "2017-05-06T16:10:02.217Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 359, "fields": {"password": "pbkdf2_sha256$24000$UxXi7w1kEzuQ$POBHhhg3wi6uEC4yRURAj0dqzOSelNagu7VbsaoT+bQ=", "last_login": "2017-05-14T03:54:47.677Z", "username": "2017_team_2014112023", "real_name": "\u666f\u4e00\u771f", "email": "1065291605@qq.com", "create_time": "2017-05-06T18:02:46.709Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1},\"contest_problems\":{\"48\":1,\"49\":1,\"46\":1,\"47\":1,\"50\":2,\"53\":2,\"52\":1,\"54\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 360, "fields": {"password": "pbkdf2_sha256$24000$ON0BspG3lKeg$D/sQBE3GcGJe4O2teYeJgPu3YrpH3fiZksdgBVT+3Yc=", "last_login": "2017-05-07T01:38:48.415Z", "username": "th", "real_name": "\u5510\u7ff0", "email": "2307222756@qq.com", "create_time": "2017-05-06T23:56:00.575Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 361, "fields": {"password": "pbkdf2_sha256$24000$m9b4KooxAOPK$qx9x7cMTwPqG1zpCQbuRxqhsEY50zPxBgdSnlKICkYM=", "last_login": "2017-05-07T00:33:48.287Z", "username": "2015112045", "real_name": "\u67f3\u6cfd\u6668", "email": "jstzliuzechen@126.com", "create_time": "2017-05-07T00:33:40.119Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 362, "fields": {"password": "pbkdf2_sha256$24000$GiGyaljwgIdB$VxhQKTwqiNnPt74P3PRn4PTZXp6NV3aUWzu/s3+Y5Ag=", "last_login": "2017-05-07T00:44:21.320Z", "username": "\u8881\u5929\u5fc3", "real_name": "\u8881\u5929\u5fc3", "email": "yuantianxin@126.com", "create_time": "2017-05-07T00:44:10.863Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 363, "fields": {"password": "pbkdf2_sha256$24000$G86OwVmaB2Qn$wUj9LGymdvdLvjNf6cPqCMsX+WS1uzwE1g32hmeT7vc=", "last_login": "2017-05-07T04:57:07.873Z", "username": "2017_team_2015111898", "real_name": "\u8bb8\u660e\u534e", "email": "404125822@qq.com", "create_time": "2017-05-07T01:13:54.009Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1078\":2,\"1000\":1},\"contest_problems\":{\"46\":2,\"48\":2,\"49\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 364, "fields": {"password": "pbkdf2_sha256$24000$eRD0MmbjpDWF$KIh3FmQoV1tltArafOjkFiFr8TfhXrfG1g1oFW2J2RM=", "last_login": "2017-05-07T04:11:47.642Z", "username": "2015112266", "real_name": "\u9ece\u5bb6\u660a", "email": "209686221@qq.com", "create_time": "2017-05-07T01:47:45.964Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 365, "fields": {"password": "pbkdf2_sha256$24000$lf4vyXH7PL3d$8NICfBfeUqSQCz4B8vBNJ/1MVCZgKwSxZdSN1LXJFqQ=", "last_login": "2017-05-07T02:37:13.914Z", "username": "1257197811", "real_name": "\u9648\u6631\u748b", "email": "1294727100@qq.com", "create_time": "2017-05-07T02:37:00.704Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 366, "fields": {"password": "pbkdf2_sha256$24000$DWBE1RxdhVmc$7BE41Pb+zQa8HARMOFh2ZKlTWYWg2zrmFmhD4Uke+yA=", "last_login": "2017-05-07T03:04:50.700Z", "username": "keine", "real_name": "\u5f6d\u4eae\u4eae", "email": "1905470093@qq.com", "create_time": "2017-05-07T02:38:09.301Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 367, "fields": {"password": "pbkdf2_sha256$24000$SCKfN6KhjUMa$rn70IVXmPq7fIpV9GQyQGCvU8B9joVsC8XfBiLKplho=", "last_login": "2017-05-07T02:44:07.372Z", "username": "DreamerHM", "real_name": "\u80e1\u68a6", "email": "3193361280@qq.com", "create_time": "2017-05-07T02:43:46.063Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 368, "fields": {"password": "pbkdf2_sha256$24000$mcsrOJKUsLBr$kZQwoPwCsiRb4baGV6xxWumsI/28bqBxHePD4BrLuhk=", "last_login": "2017-05-07T02:49:27.534Z", "username": "\u6697\u5f71", "real_name": "\u4e07\u5929\u4e49", "email": "834667379@qq.com", "create_time": "2017-05-07T02:49:13.386Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 369, "fields": {"password": "pbkdf2_sha256$24000$dA1vwHiEAwh9$+4Iam/obDovcNTD/EuazVu/cT2GsbKXXJ8v1gAnKxjY=", "last_login": "2017-05-07T04:03:55.639Z", "username": "2017_team_2015111847", "real_name": "\u6768\u6d69", "email": "760833092@qq.com", "create_time": "2017-05-07T02:49:24.661Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":1,\"52\":2,\"48\":1,\"49\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 370, "fields": {"password": "pbkdf2_sha256$24000$Co1Y9NnmcnnY$4iOH6KRSKj0Nu64x+P546Tw/gauzYZEB3RBbizFdgR0=", "last_login": "2017-05-07T03:06:56.775Z", "username": "steven", "real_name": "\u5b8b\u53cb\u7965", "email": "493439303@qq.com", "create_time": "2017-05-07T03:05:16.155Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "34a8fda01b89c562ce08617ba3186382", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 371, "fields": {"password": "pbkdf2_sha256$24000$QSIFv5XAQEtA$AxgqPZYk3HfCAGVwfLyqdRbgjqjQr/JbHoTnNGE4RLg=", "last_login": "2017-05-14T03:19:14.600Z", "username": "carbite", "real_name": "\u738b\u521a", "email": "carbite1923@foxmail.com", "create_time": "2017-05-07T03:09:22.300Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 372, "fields": {"password": "pbkdf2_sha256$24000$a9DSrvU8JCPn$OtujuObO0DVxHmbM8M04e8Iz3RW7md7a73qEKYwHTrY=", "last_login": "2017-05-07T04:21:22.407Z", "username": "2017_team_2015111669", "real_name": "\u5b8b\u53cb\u7965", "email": "810193640@qq.com", "create_time": "2017-05-07T03:10:02.673Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":1,\"52\":2,\"48\":1,\"49\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 373, "fields": {"password": "pbkdf2_sha256$24000$Sm1m2UfuWHG7$l+lJIiT/7Xsz99AvLVg+rkkSoqTgwaPR0P/b5tkIzCU=", "last_login": null, "username": "2017-team-205111940", "real_name": "\u5f20\u82e5\u6668", "email": "834559188@qq.con", "create_time": "2017-05-07T03:12:25.344Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 374, "fields": {"password": "pbkdf2_sha256$24000$oa8B0kpEsj6n$DwPufyGNgstM6h9lTHS/BFQ1tybtHOGkRtXToD+zpqo=", "last_login": "2017-05-07T04:11:45.595Z", "username": "2017-team-2015111940", "real_name": "\u5f20\u82e5\u6668", "email": "834559188@qq.com", "create_time": "2017-05-07T03:14:36.449Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 375, "fields": {"password": "pbkdf2_sha256$24000$tu0YAdMyfG6I$Nx8Ww9LSX85Fvv+fSHeTBECDxWzBoviTl6OhSeVETy4=", "last_login": "2017-05-07T04:29:16.797Z", "username": "2017_team_2015111940", "real_name": "\u5f20\u82e5\u6668", "email": "83455918@qq.com", "create_time": "2017-05-07T03:20:06.902Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2363\":1},\"contest_problems\":{\"46\":1,\"47\":1,\"52\":2,\"48\":2,\"49\":2}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 376, "fields": {"password": "pbkdf2_sha256$24000$cdJfkVKsGuls$IQ5rpzXP1t3DySgvoQISWTmFABFqpDkDZT1dKsn1Gkw=", "last_login": "2017-05-07T04:06:50.871Z", "username": "\u5317\u5cad\u4ee5\u5317", "real_name": "\u96f7\u5b87", "email": "1255206452@qq.com", "create_time": "2017-05-07T03:37:47.380Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 377, "fields": {"password": "pbkdf2_sha256$24000$Y4auDlMM1ylh$Y6n6EnjCeKkbWi1NHJPUbE40oA8meRSIv/lzfUEQXlA=", "last_login": "2017-05-07T03:53:03.599Z", "username": "2015111905", "real_name": "\u90ed\u601d\u6770", "email": "542021506@qq.com", "create_time": "2017-05-07T03:52:50.744Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 378, "fields": {"password": "pbkdf2_sha256$24000$4mlw1SZiU48s$5h93eV/Fc43DMPTC81I0TVVvwpUvTZJrqHYJSOF3NuA=", "last_login": "2017-05-08T07:53:23.284Z", "username": "Python", "real_name": "\u738b\u5e7f\u5174", "email": "1597073137@qq.com", "create_time": "2017-05-07T03:55:36.243Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1005\":1,\"1004\":1,\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 379, "fields": {"password": "pbkdf2_sha256$24000$Zbgpx8B6hEax$qjHFgk7HzBbPqrhvbQ8i+qyGoDbKNE4BRdbHoajbKMA=", "last_login": "2017-05-07T04:00:35.303Z", "username": "2015112208", "real_name": "\u5eb7\u745e\u5f3a", "email": "2547936924@qq.com", "create_time": "2017-05-07T04:00:11.776Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 380, "fields": {"password": "pbkdf2_sha256$24000$MWWeznRsgRQI$C8lf7t5nxa3Zb1EntcV5yRFs3oV9A4SfXjjcmI7/KPo=", "last_login": "2017-05-07T04:09:36.960Z", "username": "2017-dreamer-2015111234", "real_name": "leiyu", "email": "943318259@qq.com", "create_time": "2017-05-07T04:09:20.340Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 381, "fields": {"password": "pbkdf2_sha256$24000$0tnfBqNikVgZ$eThAxSH4zbKIfqOfhD2FhlUL0guoNh3izDto52JmM0g=", "last_login": "2017-05-14T05:43:53.148Z", "username": "2017_team_2015112266", "real_name": "\u9ece\u5bb6\u660a", "email": "1659070961@qq.com", "create_time": "2017-05-07T04:11:43.949Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"47\":1,\"52\":1,\"48\":1,\"49\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 382, "fields": {"password": "pbkdf2_sha256$24000$4c69qyTwOJAw$QX47wxYxXi4NoxI/ONICD+L7Gno5O2mVQ0KzlKIZ/Y0=", "last_login": "2017-05-08T15:11:01.949Z", "username": "ZZspark", "real_name": "\u6731\u653f", "email": "one12546@126.com", "create_time": "2017-05-07T04:14:41.202Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2367\":2,\"2366\":1,\"2364\":1}}", "reset_password_token": "26f963abbeda5349f87230f06027bfe6", "reset_password_token_create_time": "2017-05-14T02:27:36.785Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 383, "fields": {"password": "pbkdf2_sha256$24000$uIhniS72d1mj$jCuD7072tw4DdDiczqiVks+gtvLb7qZE0+mMiTA2efo=", "last_login": "2017-05-07T04:39:38.388Z", "username": "2017_\u88d5reply_2015110068", "real_name": "\u5ed6\u96c4", "email": "861851521@qq.com", "create_time": "2017-05-07T04:18:26.314Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 384, "fields": {"password": "pbkdf2_sha256$24000$XOrJxkgEUqv3$W05GZMYW0JXet/H7ble26iQV75pC1t5oKveb2EycUE0=", "last_login": "2017-05-07T13:59:48.548Z", "username": "15608230718", "real_name": "\u8096\u5e73", "email": "1220017567@qq.com", "create_time": "2017-05-07T04:20:26.420Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1006\":2,\"1074\":2,\"1078\":2,\"1001\":1,\"1121\":2}}", "reset_password_token": "f7117851e91c3df9550eaedf694591b2", "reset_password_token_create_time": "2017-05-07T04:21:01.206Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 385, "fields": {"password": "pbkdf2_sha256$24000$2pZUVKZ7Tc7L$eQjAnR1rdgGzJnSfTGuXENySowj9V7yPriyf5GqtZb4=", "last_login": "2017-05-07T10:52:33.220Z", "username": "\u677e\u679c", "real_name": "\u6768\u654f\u677e", "email": "1149471433@qq.com", "create_time": "2017-05-07T04:20:47.357Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1078\":1,\"1088\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 386, "fields": {"password": "pbkdf2_sha256$24000$kMyHqRkhjvyc$vHDRfFrN3P6KQEHFZ+nK4zk5mONVpPl5qNIYOH5/RWg=", "last_login": "2017-05-07T07:03:58.528Z", "username": "2017_team_2014112184", "real_name": "\u6768\u654f\u677e", "email": "songguo2018@gmail.com", "create_time": "2017-05-07T04:29:39.391Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1050\":1,\"1053\":2,\"1078\":1,\"1191\":1,\"1132\":1,\"1074\":2,\"1309\":1,\"1088\":1,\"1307\":2,\"1006\":1,\"1004\":2,\"1296\":1,\"1259\":2,\"1001\":1,\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 387, "fields": {"password": "pbkdf2_sha256$24000$zzPpO2jnMZRz$JskZGh/SIYoOwwX0g+9H3tGtNtR3WEf5HrtX21+7zDY=", "last_login": "2017-05-07T06:50:35.480Z", "username": "2017_team_2016112665", "real_name": "\u95eb\u6d2a\u6d0b", "email": "841496770@qq.com", "create_time": "2017-05-07T04:32:52.948Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"46\":1,\"48\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 388, "fields": {"password": "pbkdf2_sha256$24000$W6T43Yq44FeK$ppXc5yJgRZwyTJUdvl1a14IQsrAExkRaP2BZxmqZzOw=", "last_login": "2017-05-07T04:36:14.593Z", "username": "\u4e91\u9189\u6708\u5fae\u7720", "real_name": "\u5f6d\u65b9\u4e91", "email": "2601220900@qq.com", "create_time": "2017-05-07T04:35:55.549Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 389, "fields": {"password": "pbkdf2_sha256$24000$4JFnANXQUBuO$j0YXiSs/14HDOx65Hh0Me0LbBKQjs9ZPptyDfur5vhU=", "last_login": "2017-05-14T02:32:08.549Z", "username": "2017_team_2015110068", "real_name": "\u5ed6\u96c4", "email": "liaoxiong19961222@gmail.com", "create_time": "2017-05-07T04:45:00.277Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2364\":1},\"contest_problems\":{\"48\":1,\"49\":2,\"46\":1,\"47\":1,\"52\":1,\"75\":2,\"74\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 390, "fields": {"password": "pbkdf2_sha256$24000$kUpf8BOiQd8X$nHa0DjIfB5T0hJTmMWmlhaTPdyyvVL0oDCp5WG75zPo=", "last_login": "2017-05-07T05:06:09.480Z", "username": "qianchang", "real_name": "\u5218\u6653\u8f89", "email": "1195770622@qq.com", "create_time": "2017-05-07T04:53:45.273Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "e6f5751eaa4bed877750bf6d803b4e19", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 391, "fields": {"password": "pbkdf2_sha256$24000$KotitM5AhWUX$OIwTYrKKJZWpfns/7u1/AWBKvQ1xuUcGpwlu00m/uCI=", "last_login": "2017-05-07T11:49:28.221Z", "username": "yhp", "real_name": "\u6768\u6d77\u670b", "email": "2550755865@qq.com", "create_time": "2017-05-07T05:06:41.532Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1006\":1,\"1001\":2,\"1078\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 392, "fields": {"password": "pbkdf2_sha256$24000$ZxOnlZa7XrGL$fA8/lgOEtSVl/uoWMEMZzFJ4itmoRIiQvsccAZd0EKg=", "last_login": "2017-05-07T06:55:18.124Z", "username": "2017_team_2016112259", "real_name": "\u90d1\u5b89\u742a", "email": "184640042@qq.com", "create_time": "2017-05-07T06:55:13.653Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 393, "fields": {"password": "pbkdf2_sha256$24000$tHIsjT6IYgaW$MGJtveI2RAWtzN/BLS+wNYV+zC5SlZMjHbmcRs/Qtl4=", "last_login": "2017-05-07T07:42:21.546Z", "username": "milkbrother", "real_name": "\u674e\u5353\u5143", "email": "937083122@qq.com", "create_time": "2017-05-07T07:42:09.377Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 394, "fields": {"password": "pbkdf2_sha256$24000$kKqVG7ZJ202U$i8NCCvkVp7H4R7xTlvAWgfRQtsnz608Zf6AWErZ/7iE=", "last_login": "2017-05-07T08:02:24.817Z", "username": "sunnyday", "real_name": "\u9633\u6668", "email": "912139486@qq.com", "create_time": "2017-05-07T08:02:01.476Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 395, "fields": {"password": "pbkdf2_sha256$24000$YBv78pmLpu3E$2AH7ircexWjbTJ7Dol7C8KsJOuO2hzMQJ9YLBuRinqA=", "last_login": "2017-05-07T09:52:41.188Z", "username": "2015114017", "real_name": "\u5f20\u6dde\u690d", "email": "847993431@qq.com", "create_time": "2017-05-07T09:52:34.553Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 396, "fields": {"password": "pbkdf2_sha256$24000$s2a5hMAwuzcB$efuIDfaZkAniWKhEzSFabZXHSuXWD5caGaSZphLrc4M=", "last_login": "2017-05-07T10:50:56.885Z", "username": "Astolfo07", "real_name": "\u5355\u5b87\u8d85", "email": "syc_3531@163.com", "create_time": "2017-05-07T10:50:50.707Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 397, "fields": {"password": "pbkdf2_sha256$24000$CiopX6JXO5vg$T2Mh2V7VO8CsE3KgI7AwAO04pJatsYhcswuzuZ3AbUI=", "last_login": "2017-05-07T13:53:51.882Z", "username": "lylj", "real_name": "\u9633\u5e86\u6797", "email": "8402805312@qq.com", "create_time": "2017-05-07T13:53:40.494Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 398, "fields": {"password": "pbkdf2_sha256$24000$geKtWi51rHEn$Z7w8pQwL0ofECRpFNsdf1vkGyjFlYGTUe5Yxv0h98a8=", "last_login": "2017-05-08T14:51:53.492Z", "username": "\u6c49\u5efa\u6709", "real_name": "\u6c49\u5efa\u6709", "email": "506575336@qq.com", "create_time": "2017-05-08T14:51:35.172Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 399, "fields": {"password": "pbkdf2_sha256$24000$m8ytBaFILmKp$2lyNvqQhh/c64oQo/YIBMTmInJH4lfB+osY1e9jnLuE=", "last_login": "2017-05-08T15:44:22.242Z", "username": "\u738b\u79d1", "real_name": "\u738b\u79d1", "email": "3228278955@qq.com", "create_time": "2017-05-08T15:17:29.746Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 400, "fields": {"password": "pbkdf2_sha256$24000$y8FHjG40cAgo$iajRmBnVOHNbLZvAqbTPjsjddDXNb6EN1t9AeoQPkvc=", "last_login": "2017-05-11T00:41:45.955Z", "username": "xgg", "real_name": "\u897f\u74dc", "email": "960448968@qq.com", "create_time": "2017-05-09T04:44:00.039Z", "admin_type": 0, "problems_status": "{\"problems\":{\"2375\":1,\"2369\":1,\"2373\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 401, "fields": {"password": "pbkdf2_sha256$24000$k0yJfa4sJzBE$dCroO+fZo1bmvomzyp5zpaXDDF7CQDRwRxmkm43kWEA=", "last_login": "2017-05-14T02:24:25.027Z", "username": "Nemaleswang", "real_name": "\u738b\u51a0\u6865", "email": "812844840@qq.com", "create_time": "2017-05-09T07:20:15.413Z", "admin_type": 0, "problems_status": "{\"contest_problems\":{\"76\":2,\"75\":1,\"74\":1}}", "reset_password_token": "2723922a3ffb8578344b2c8edadb458a", "reset_password_token_create_time": "2017-05-14T02:00:05.498Z", "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 402, "fields": {"password": "pbkdf2_sha256$24000$OKvCpkUjobyx$XtuGqdff/UkY0bgP9/z3MnzWSfRLNU3IyZ1jOGpH3iw=", "last_login": "2017-05-09T09:46:01.455Z", "username": "kukutou", "real_name": "\u80e1\u4e66\u6e90", "email": "kukutou_mikiya@outlook.com", "create_time": "2017-05-09T09:45:47.572Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 403, "fields": {"password": "pbkdf2_sha256$24000$k4d75uiLlECi$nsNX0DZEMNcLQLMtGtbVs/Y90RVlK1nnijvyHEPW6Eo=", "last_login": "2017-05-09T10:32:28.367Z", "username": "w703710691d", "real_name": "\u674e\u6d0b\u9633", "email": "w703710691d@163.com", "create_time": "2017-05-09T10:32:21.683Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 404, "fields": {"password": "pbkdf2_sha256$24000$4wO6Wq23Ivg9$cy0st2dpRAuhWAKgi02+TTcncg9E82i7tCvCwugT8Ss=", "last_login": "2017-05-11T03:55:18.594Z", "username": "15310320305", "real_name": "\u54c8\u54c8", "email": "631106484@qq.com", "create_time": "2017-05-11T03:55:10.651Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 405, "fields": {"password": "pbkdf2_sha256$24000$qiRn761mojPt$6pwc0sw8+v+oyNvDxew9do1zXL9OiMuFUKWo75Cr814=", "last_login": "2017-05-11T03:58:02.142Z", "username": "dounai", "real_name": "\u4f55\u6e0a", "email": "527621025@qq.com", "create_time": "2017-05-11T03:57:54.133Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 406, "fields": {"password": "pbkdf2_sha256$24000$inelk2JSsvOL$gtgYbnAHrjLR9zSbRZTunMk+dYOk6obMZ2yNrSss/y0=", "last_login": null, "username": "153101202207", "real_name": "\u4f55\u56fd\u5e73", "email": "494013153@qq.com", "create_time": "2017-05-11T03:58:00.213Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 407, "fields": {"password": "pbkdf2_sha256$24000$79v4KBEqvCE0$oEbZwkvSCwwOKzO9htDMlC0efrEamHV+JbdFljt+YkE=", "last_login": "2017-05-11T04:00:59.678Z", "username": "15310120207", "real_name": "\u4f55\u56fd\u5e73", "email": "1785815080@qq.com", "create_time": "2017-05-11T04:00:49.259Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 408, "fields": {"password": "pbkdf2_sha256$24000$c0WSuNZ8nM6O$UdFf2CU/LaRMTeGnL6jhekzuWduOvTwL8TZFrpsa6jo=", "last_login": "2017-05-11T04:02:11.996Z", "username": "shiyilang", "real_name": "\u5f20\u660e\u661f", "email": "1146563605@qq.com", "create_time": "2017-05-11T04:02:00.684Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 409, "fields": {"password": "pbkdf2_sha256$24000$2aO1nh4drLKu$2KlREzKYBoTL0YKCigR1aN9gXvdvsmglU4znDnD98LM=", "last_login": "2017-05-11T04:13:17.575Z", "username": "liuyuqiang", "real_name": "\u5218\u7389\u5f3a", "email": "1759421378@qq.com", "create_time": "2017-05-11T04:12:58.471Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": "4a1b5d4984ca1d89f404d036fe6618ac", "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 410, "fields": {"password": "pbkdf2_sha256$24000$ysqPHUiea0P5$FPdo1/juOlqUNXZNlE84qf7J+hTvaUN+Jx/jDiNBIIk=", "last_login": "2017-05-11T12:22:28.400Z", "username": "NCE", "real_name": "\u5b59\u5b8f\u6d9b", "email": "979944089@qq.com", "create_time": "2017-05-11T04:19:13.930Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 411, "fields": {"password": "pbkdf2_sha256$24000$xBYMXz5ElI1i$mqBdR0g1HT7S0tbtiimrzyA5l6srGHqqEjjuqugSfcM=", "last_login": "2017-05-11T05:24:52.477Z", "username": "brambles", "real_name": "brambles", "email": "1402470320@qq.com", "create_time": "2017-05-11T05:24:38.281Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 412, "fields": {"password": "pbkdf2_sha256$24000$b2qNiJaJy7CN$xyu7ogY2UiaJSJVyVtoq1mxtGrzsT+OXRwkbqvvcjNI=", "last_login": "2017-05-11T05:38:32.209Z", "username": "Echizen", "real_name": "\u5f20\u86cb\u86cb", "email": "553899811@qq.com", "create_time": "2017-05-11T05:38:23.914Z", "admin_type": 0, "problems_status": "{\"problems\":{\"1000\":1}}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 413, "fields": {"password": "pbkdf2_sha256$24000$6vKgUq1tu4vI$b8YRKnWYo6OfaYtBADgUkjXZZl5OJjhQSGDb3kPqQhU=", "last_login": "2017-05-11T05:52:17.778Z", "username": "garbled", "real_name": "tjc", "email": "760529097@qq.com", "create_time": "2017-05-11T05:51:59.238Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 414, "fields": {"password": "pbkdf2_sha256$24000$m4KXCSypDJU1$5v77ZcUHN8BtFDXxCHlu07jY9fPYmoEGu1T8VjwTIrk=", "last_login": "2017-05-11T06:28:50.056Z", "username": "stupid_one", "real_name": "\u5218\u709c\u94ed", "email": "814865841@qq.com", "create_time": "2017-05-11T06:28:43.324Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 415, "fields": {"password": "pbkdf2_sha256$24000$RDhRw3zOEW3b$tLwpu3sZHKOo18DLrXX3ArEpln94mUv19GsZOl5S+SQ=", "last_login": "2017-05-11T10:49:22.243Z", "username": "Challenge1996", "real_name": "Challenge1996", "email": "1443996278@qq.com", "create_time": "2017-05-11T10:49:08.729Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 416, "fields": {"password": "pbkdf2_sha256$24000$xwiCFTxoWsxr$ACyKCCtFNwSOIsdRh7lYmtyb0zt7BfWGwN9AFKZQRhg=", "last_login": "2017-05-11T12:20:14.506Z", "username": "LEL", "real_name": "\u8096\u5fd7\u6587", "email": "634520981@qq.com", "create_time": "2017-05-11T12:20:05.768Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 417, "fields": {"password": "pbkdf2_sha256$24000$aNehhEHeXpPC$fPF+pABMb3/SnNLrBZ/7uM5jg5CEQxz9rOhcT5j/04c=", "last_login": "2017-05-11T12:27:06.320Z", "username": "2016_weichuyu", "real_name": "\u97e6\u521d\u96e8", "email": "2428805329@qq.com", "create_time": "2017-05-11T12:24:18.941Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 418, "fields": {"password": "pbkdf2_sha256$24000$f2xuFK8GOcwd$AQL0TZHJZN0DB/w6I9JIo55ae20LUjsHUAEbqwa28cU=", "last_login": "2017-05-11T15:11:37.608Z", "username": "sunyinkai", "real_name": "\u5b59\u94f6\u51ef", "email": "1091491336@qq.com", "create_time": "2017-05-11T15:11:27.117Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.user", "pk": 419, "fields": {"password": "pbkdf2_sha256$24000$3ATNQYOonvjZ$b4pX0hrv/Q13oVDqXHzAP+mbk7VexmeEchxZulFJBGw=", "last_login": null, "username": "Nemalestext", "real_name": "wgq", "email": "3375878388@qq.com", "create_time": "2017-05-14T02:03:57.258Z", "admin_type": 0, "problems_status": "{}", "reset_password_token": null, "reset_password_token_create_time": null, "auth_token": null, "two_factor_auth": false, "tfa_token": null, "openapi_appkey": null, "is_forbidden": false}}, {"model": "account.userprofile", "pk": 1, "fields": {"user": 1, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 53, "submission_number": 318, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 2, "fields": {"user": 2, "avatar": "/static/img/avatar/avatar-4.png", "blog": "", "mood": "\u6211\u5fae\u7b11\u4e0d\u4ee3\u8868\u6211\u5feb\u4e50--\u672cID\u65e2\u7528\u4e8e\u6d4b\u901f,\u53c8\u53c2\u4e0e\u6392\u540d,\u8c22\u8c22!", "hduoj_username": "", "bestcoder_username": "", "codeforces_username": "", "accepted_problem_number": 14, "submission_number": 65, "problems_status": "{}", "phone_number": "", "school": "", "student_id": ""}}, {"model": "account.userprofile", "pk": 3, "fields": {"user": 3, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 10, "submission_number": 16, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2016112605"}}, {"model": "account.userprofile", "pk": 4, "fields": {"user": 4, "avatar": "/static/img/avatar/avatar-17.png", "blog": "", "mood": "\u6211\u5fae\u7b11\u4ee3\u8868\u6211\u5feb\u4e50--\u672cID\u65e2\u4e0d\u7528\u4e8e\u6d4b\u901f,\u53c8\u4e0d\u53c2\u4e0e\u6392\u540d,\u8c22\u8c22!", "hduoj_username": "", "bestcoder_username": "", "codeforces_username": "", "accepted_problem_number": 23, "submission_number": 134, "problems_status": "{}", "phone_number": "", "school": "", "student_id": ""}}, {"model": "account.userprofile", "pk": 5, "fields": {"user": 5, "avatar": "/static/img/avatar/avatar-1.png", "blog": "", "mood": "Welcome to the cruel world!", "hduoj_username": "", "bestcoder_username": "", "codeforces_username": "", "accepted_problem_number": 26, "submission_number": 100, "problems_status": "{}", "phone_number": "", "school": "SWJTU", "student_id": "2015111948"}}, {"model": "account.userprofile", "pk": 6, "fields": {"user": 6, "avatar": "/static/img/avatar/avatar-5.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 7, "fields": {"user": 7, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "swjtu_EM", "student_id": null}}, {"model": "account.userprofile", "pk": 8, "fields": {"user": 8, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 15, "problems_status": "{}", "phone_number": null, "school": null, "student_id": "2015114374"}}, {"model": "account.userprofile", "pk": 9, "fields": {"user": 9, "avatar": "/static/img/avatar/avatar-12.png", "blog": "", "mood": "\u6211\u5fae\u7b11\u53ef\u80fd\u4ee3\u8868\u6211\u5feb\u4e50--\u672cID\u65e2\u4e0d\u7528\u4e8e\u6d4b\u901f,\u800c\u4e14\u53c2\u4e0e\u6392\u540d,\u8c22\u8c22!", "hduoj_username": "", "bestcoder_username": "", "codeforces_username": "", "accepted_problem_number": 25, "submission_number": 147, "problems_status": "{}", "phone_number": "", "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2016115195"}}, {"model": "account.userprofile", "pk": 10, "fields": {"user": 10, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 25, "submission_number": 103, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2016112596"}}, {"model": "account.userprofile", "pk": 11, "fields": {"user": 11, "avatar": "/static/img/avatar/avatar-2.png", "blog": "", "mood": "\u6211\u5fae\u7b11\u5f53\u7136\u4ee3\u8868\u6211\u5feb\u4e50--\u672cID\u4e0d\u53ef\u80fd\u7528\u4e8e\u6d4b\u901f,\u4e5f\u4e0d\u53ef\u80fd\u53c2\u4e0e\u6392\u540d,\u8c22\u8c22!", "hduoj_username": "", "bestcoder_username": "", "codeforces_username": "", "accepted_problem_number": 20, "submission_number": 95, "problems_status": "{}", "phone_number": "15720968891", "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112633"}}, {"model": "account.userprofile", "pk": 12, "fields": {"user": 12, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 10, "submission_number": 27, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 13, "fields": {"user": 13, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 5, "problems_status": "{}", "phone_number": null, "school": "SWJTU", "student_id": "2016112460"}}, {"model": "account.userprofile", "pk": 14, "fields": {"user": 14, "avatar": "/static/img/avatar/avatar-7.png", "blog": "", "mood": "\u6211\u5fae\u7b11\uff01=\u6211\u5feb\u4e50--\u672cID\u65e2\u7528\u4e8e\u6d4b\u901f,\u53c8\u53c2\u4e0e\u5f81\u5a5a,\u8c22\u8c22!", "hduoj_username": "", "bestcoder_username": "", "codeforces_username": "", "accepted_problem_number": 17, "submission_number": 133, "problems_status": "{}", "phone_number": "", "school": "SWJTU", "student_id": "2016112458"}}, {"model": "account.userprofile", "pk": 15, "fields": {"user": 15, "avatar": "/static/img/avatar/avatar-14.png", "blog": "", "mood": "\u6211\u5fae\u7b11\u53ef\u4ee5\u4ee3\u8868\u6211\u5feb\u4e50--\u672cID\u4e0d\u53ef\u80fd\u7528\u4e8e\u6d4b\u901f,\u4f46\u4e00\u5b9a\u7528\u4e8e\u53c2\u4e0e\u6392\u540d,\u8c22\u8c22!", "hduoj_username": "", "bestcoder_username": "", "codeforces_username": "", "accepted_problem_number": 7, "submission_number": 19, "problems_status": "{}", "phone_number": "", "school": "swjtu", "student_id": "2016112406"}}, {"model": "account.userprofile", "pk": 16, "fields": {"user": 16, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": "2016112444"}}, {"model": "account.userprofile", "pk": 17, "fields": {"user": 17, "avatar": "/static/img/avatar/avatar-2.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 11, "submission_number": 31, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 18, "fields": {"user": 18, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 7, "problems_status": "{}", "phone_number": null, "school": "1", "student_id": "1"}}, {"model": "account.userprofile", "pk": 19, "fields": {"user": 19, "avatar": "/static/img/avatar/avatar-1.png", "blog": "", "mood": "", "hduoj_username": "", "bestcoder_username": "", "codeforces_username": "", "accepted_problem_number": 14, "submission_number": 61, "problems_status": "{}", "phone_number": "", "school": "SWJTU", "student_id": ""}}, {"model": "account.userprofile", "pk": 20, "fields": {"user": 20, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016114126"}}, {"model": "account.userprofile", "pk": 21, "fields": {"user": 21, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112571"}}, {"model": "account.userprofile", "pk": 22, "fields": {"user": 22, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 23, "fields": {"user": 23, "avatar": "/static/img/avatar/avatar-8.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 6, "submission_number": 24, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 24, "fields": {"user": 24, "avatar": "/static/img/avatar/avatar-2.png", "blog": "", "mood": "", "hduoj_username": "", "bestcoder_username": "", "codeforces_username": "", "accepted_problem_number": 4, "submission_number": 11, "problems_status": "{}", "phone_number": "15720968891", "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112633"}}, {"model": "account.userprofile", "pk": 25, "fields": {"user": 25, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112408"}}, {"model": "account.userprofile", "pk": 26, "fields": {"user": 26, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 14, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": null}}, {"model": "account.userprofile", "pk": 27, "fields": {"user": 27, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 28, "fields": {"user": 28, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 3, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112407"}}, {"model": "account.userprofile", "pk": 29, "fields": {"user": 29, "avatar": "/static/img/avatar/avatar-1.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2816112451"}}, {"model": "account.userprofile", "pk": 30, "fields": {"user": 30, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016110141"}}, {"model": "account.userprofile", "pk": 31, "fields": {"user": 31, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 32, "fields": {"user": 32, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 2, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 33, "fields": {"user": 33, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": null}}, {"model": "account.userprofile", "pk": 34, "fields": {"user": 34, "avatar": "/static/img/avatar/avatar-1.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 5, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 35, "fields": {"user": 35, "avatar": "/static/img/avatar/avatar-2.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 36, "fields": {"user": 36, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 23, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 37, "fields": {"user": 37, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 7, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112457"}}, {"model": "account.userprofile", "pk": 38, "fields": {"user": 38, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 10, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112456"}}, {"model": "account.userprofile", "pk": 39, "fields": {"user": 39, "avatar": "/static/img/avatar/avatar-2.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112200"}}, {"model": "account.userprofile", "pk": 40, "fields": {"user": 40, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 2, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 41, "fields": {"user": 41, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 8, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 42, "fields": {"user": 42, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 36, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 43, "fields": {"user": 43, "avatar": "/static/img/avatar/avatar-8.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 12, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112632"}}, {"model": "account.userprofile", "pk": 44, "fields": {"user": 44, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 45, "fields": {"user": 45, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 13, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112446"}}, {"model": "account.userprofile", "pk": 46, "fields": {"user": 46, "avatar": "/static/img/avatar/avatar-12.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 47, "fields": {"user": 47, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 25, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 48, "fields": {"user": 48, "avatar": "/static/img/avatar/avatar-12.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 49, "fields": {"user": 49, "avatar": "/static/img/avatar/avatar-1.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 8, "submission_number": 51, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 50, "fields": {"user": 50, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112675"}}, {"model": "account.userprofile", "pk": 51, "fields": {"user": 51, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 9, "submission_number": 23, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112207"}}, {"model": "account.userprofile", "pk": 52, "fields": {"user": 52, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016119001"}}, {"model": "account.userprofile", "pk": 53, "fields": {"user": 53, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 6, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112361"}}, {"model": "account.userprofile", "pk": 54, "fields": {"user": 54, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111617"}}, {"model": "account.userprofile", "pk": 55, "fields": {"user": 55, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 80, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112434"}}, {"model": "account.userprofile", "pk": 56, "fields": {"user": 56, "avatar": "/static/img/avatar/avatar-20.png", "blog": "", "mood": "", "hduoj_username": "", "bestcoder_username": "", "codeforces_username": "", "accepted_problem_number": 7, "submission_number": 22, "problems_status": "{}", "phone_number": "", "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112376"}}, {"model": "account.userprofile", "pk": 57, "fields": {"user": 57, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112403"}}, {"model": "account.userprofile", "pk": 58, "fields": {"user": 58, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 6, "submission_number": 28, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016115448"}}, {"model": "account.userprofile", "pk": 59, "fields": {"user": 59, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 8, "submission_number": 42, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 60, "fields": {"user": 60, "avatar": "/static/img/avatar/avatar-8.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 9, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 61, "fields": {"user": 61, "avatar": "/static/img/avatar/avatar-12.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 30, "problems_status": "{}", "phone_number": null, "school": "SWJTU", "student_id": null}}, {"model": "account.userprofile", "pk": 62, "fields": {"user": 62, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 5, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111988"}}, {"model": "account.userprofile", "pk": 63, "fields": {"user": 63, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 15, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 64, "fields": {"user": 64, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 19, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": null}}, {"model": "account.userprofile", "pk": 65, "fields": {"user": 65, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 13, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112454"}}, {"model": "account.userprofile", "pk": 66, "fields": {"user": 66, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 25, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 67, "fields": {"user": 67, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 8, "submission_number": 69, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014111760"}}, {"model": "account.userprofile", "pk": 68, "fields": {"user": 68, "avatar": "/static/upload/avatar_3a7e3.jpg", "blog": "", "mood": "\u6211\u5fae\u7b11\u5c31\u4ee3\u8868\u6211\u5feb\u4e50\u5417\uff1f--\u6b64\u8d26\u53f7\u4e0d\u53ef\u80fd\u88ab\u4eba\u770b\u5230\uff0c\u6240\u4ee5\u4e0d\u53c2\u52a0\u6392\u540d\u3002", "hduoj_username": "", "bestcoder_username": "", "codeforces_username": "", "accepted_problem_number": 4, "submission_number": 29, "problems_status": "{}", "phone_number": "", "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2016112657"}}, {"model": "account.userprofile", "pk": 69, "fields": {"user": 69, "avatar": "/static/img/avatar/avatar-19.png", "blog": "", "mood": "", "hduoj_username": "", "bestcoder_username": "", "codeforces_username": "", "accepted_problem_number": 5, "submission_number": 18, "problems_status": "{}", "phone_number": "", "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112385"}}, {"model": "account.userprofile", "pk": 70, "fields": {"user": 70, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112413"}}, {"model": "account.userprofile", "pk": 71, "fields": {"user": 71, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 68, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 72, "fields": {"user": 72, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 34, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111984"}}, {"model": "account.userprofile", "pk": 73, "fields": {"user": 73, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 12, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 74, "fields": {"user": 74, "avatar": "/static/img/avatar/avatar-1.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 3, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 75, "fields": {"user": 75, "avatar": "/static/img/avatar/avatar-9.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 9, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 76, "fields": {"user": 76, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 3, "problems_status": "{}", "phone_number": null, "school": "swjtu", "student_id": "2015112210"}}, {"model": "account.userprofile", "pk": 77, "fields": {"user": 77, "avatar": "/static/img/avatar/avatar-8.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112211"}}, {"model": "account.userprofile", "pk": 78, "fields": {"user": 78, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": "2015111853"}}, {"model": "account.userprofile", "pk": 79, "fields": {"user": 79, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 3, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111872"}}, {"model": "account.userprofile", "pk": 80, "fields": {"user": 80, "avatar": "/static/img/avatar/avatar-1.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 8, "problems_status": "{}", "phone_number": null, "school": "swjtu", "student_id": "2016112460"}}, {"model": "account.userprofile", "pk": 81, "fields": {"user": 81, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 26, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112455"}}, {"model": "account.userprofile", "pk": 82, "fields": {"user": 82, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 12, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 83, "fields": {"user": 83, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 6, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112452"}}, {"model": "account.userprofile", "pk": 84, "fields": {"user": 84, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": null}}, {"model": "account.userprofile", "pk": 85, "fields": {"user": 85, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 6, "problems_status": "{}", "phone_number": null, "school": "SWJTU", "student_id": null}}, {"model": "account.userprofile", "pk": 86, "fields": {"user": 86, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 48, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016119999"}}, {"model": "account.userprofile", "pk": 87, "fields": {"user": 87, "avatar": "/static/img/avatar/avatar-12.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 88, "fields": {"user": 88, "avatar": "/static/img/avatar/avatar-12.png", "blog": "", "mood": "", "hduoj_username": "wl123456789", "bestcoder_username": "", "codeforces_username": "wl1212", "accepted_problem_number": 8, "submission_number": 22, "problems_status": "{}", "phone_number": "", "school": "swjtu", "student_id": "2015110098"}}, {"model": "account.userprofile", "pk": 89, "fields": {"user": 89, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2016112642"}}, {"model": "account.userprofile", "pk": 90, "fields": {"user": 90, "avatar": "/static/img/avatar/avatar-9.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2016111799"}}, {"model": "account.userprofile", "pk": 91, "fields": {"user": 91, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 17, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 92, "fields": {"user": 92, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "swjtu", "student_id": null}}, {"model": "account.userprofile", "pk": 93, "fields": {"user": 93, "avatar": "/static/upload/avatar_ccdf3.jpg", "blog": "", "mood": "", "hduoj_username": "", "bestcoder_username": "", "codeforces_username": "", "accepted_problem_number": 3, "submission_number": 21, "problems_status": "{}", "phone_number": "", "school": "SWJTU", "student_id": ""}}, {"model": "account.userprofile", "pk": 94, "fields": {"user": 94, "avatar": "/static/img/avatar/avatar-5.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u6211\u4ea4", "student_id": null}}, {"model": "account.userprofile", "pk": 95, "fields": {"user": 95, "avatar": "/static/img/avatar/avatar-5.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 3, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 96, "fields": {"user": 96, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "20131850"}}, {"model": "account.userprofile", "pk": 97, "fields": {"user": 97, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014200031"}}, {"model": "account.userprofile", "pk": 98, "fields": {"user": 98, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 99, "fields": {"user": 99, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 13, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014111939"}}, {"model": "account.userprofile", "pk": 100, "fields": {"user": 100, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 14, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 101, "fields": {"user": 101, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2014112219"}}, {"model": "account.userprofile", "pk": 102, "fields": {"user": 102, "avatar": "/static/img/avatar/avatar-10.png", "blog": "http://www.unkeltao.com", "mood": "", "hduoj_username": "", "bestcoder_username": "", "codeforces_username": "", "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": "", "school": "\u4ea4\u5927", "student_id": "1"}}, {"model": "account.userprofile", "pk": 103, "fields": {"user": 103, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014112178"}}, {"model": "account.userprofile", "pk": 104, "fields": {"user": 104, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 105, "fields": {"user": 105, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66\u5ce8\u7709\u6821\u533a", "student_id": "2015121052"}}, {"model": "account.userprofile", "pk": 106, "fields": {"user": 106, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 10, "submission_number": 30, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111950"}}, {"model": "account.userprofile", "pk": 107, "fields": {"user": 107, "avatar": "/static/img/avatar/avatar-2.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2015112111"}}, {"model": "account.userprofile", "pk": 108, "fields": {"user": 108, "avatar": "/static/img/avatar/avatar-8.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "Southwest Jiaotong university", "student_id": null}}, {"model": "account.userprofile", "pk": 109, "fields": {"user": 109, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 110, "fields": {"user": 110, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 7, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014111758"}}, {"model": "account.userprofile", "pk": 111, "fields": {"user": 111, "avatar": "/static/img/avatar/avatar-2.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "SWJTU_EM", "student_id": "2015121861"}}, {"model": "account.userprofile", "pk": 112, "fields": {"user": 112, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 113, "fields": {"user": 113, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 4, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016117773"}}, {"model": "account.userprofile", "pk": 114, "fields": {"user": 114, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "SWJTU", "student_id": "2015120629"}}, {"model": "account.userprofile", "pk": 115, "fields": {"user": 115, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a", "student_id": "2016117774"}}, {"model": "account.userprofile", "pk": 116, "fields": {"user": 116, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2016115243"}}, {"model": "account.userprofile", "pk": 117, "fields": {"user": 117, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 3, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "20133257"}}, {"model": "account.userprofile", "pk": 118, "fields": {"user": 118, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112261"}}, {"model": "account.userprofile", "pk": 119, "fields": {"user": 119, "avatar": "/static/img/avatar/avatar-2.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": "\u534e\u4e2d\u79d1\u6280\u5927\u5b66", "student_id": "281614767"}}, {"model": "account.userprofile", "pk": 120, "fields": {"user": 120, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u4e50\u5e08", "student_id": "1633140408"}}, {"model": "account.userprofile", "pk": 121, "fields": {"user": 121, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 122, "fields": {"user": 122, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015114739"}}, {"model": "account.userprofile", "pk": 123, "fields": {"user": 123, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": null}}, {"model": "account.userprofile", "pk": 124, "fields": {"user": 124, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015210395"}}, {"model": "account.userprofile", "pk": 125, "fields": {"user": 125, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 4, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 126, "fields": {"user": 126, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 2, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 127, "fields": {"user": 127, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 128, "fields": {"user": 128, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112218"}}, {"model": "account.userprofile", "pk": 129, "fields": {"user": 129, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 2, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 130, "fields": {"user": 130, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 3, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2015111847"}}, {"model": "account.userprofile", "pk": 131, "fields": {"user": 131, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 9, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 132, "fields": {"user": 132, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 3, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112642"}}, {"model": "account.userprofile", "pk": 133, "fields": {"user": 133, "avatar": "/static/img/avatar/avatar-9.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112332"}}, {"model": "account.userprofile", "pk": 134, "fields": {"user": 134, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 14, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112450"}}, {"model": "account.userprofile", "pk": 135, "fields": {"user": 135, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 5, "problems_status": "{}", "phone_number": null, "school": "meishitouzhele", "student_id": "1"}}, {"model": "account.userprofile", "pk": 136, "fields": {"user": 136, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016113153"}}, {"model": "account.userprofile", "pk": 137, "fields": {"user": 137, "avatar": "/static/img/avatar/avatar-1.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112447"}}, {"model": "account.userprofile", "pk": 138, "fields": {"user": 138, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112484"}}, {"model": "account.userprofile", "pk": 139, "fields": {"user": 139, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 140, "fields": {"user": 140, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 141, "fields": {"user": 141, "avatar": "/static/img/avatar/avatar-12.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 142, "fields": {"user": 142, "avatar": "/static/img/avatar/avatar-1.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015113979"}}, {"model": "account.userprofile", "pk": 143, "fields": {"user": 143, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014112108"}}, {"model": "account.userprofile", "pk": 144, "fields": {"user": 144, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": null}}, {"model": "account.userprofile", "pk": 145, "fields": {"user": 145, "avatar": "/static/img/avatar/avatar-2.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 146, "fields": {"user": 146, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 147, "fields": {"user": 147, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 148, "fields": {"user": 148, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 16, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 149, "fields": {"user": 149, "avatar": "/static/img/avatar/avatar-5.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 6, "submission_number": 9, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 150, "fields": {"user": 150, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 6, "submission_number": 20, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 151, "fields": {"user": 151, "avatar": "/static/img/avatar/avatar-9.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 13, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 152, "fields": {"user": 152, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 18, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 153, "fields": {"user": 153, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 22, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 154, "fields": {"user": 154, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 16, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 155, "fields": {"user": 155, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 23, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 156, "fields": {"user": 156, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 11, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 157, "fields": {"user": 157, "avatar": "/static/img/avatar/avatar-2.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 15, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 158, "fields": {"user": 158, "avatar": "/static/img/avatar/avatar-5.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 17, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 159, "fields": {"user": 159, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 13, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 160, "fields": {"user": 160, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 17, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 161, "fields": {"user": 161, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 14, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 162, "fields": {"user": 162, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 19, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 163, "fields": {"user": 163, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 12, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 164, "fields": {"user": 164, "avatar": "/static/img/avatar/avatar-8.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 16, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 165, "fields": {"user": 165, "avatar": "/static/img/avatar/avatar-9.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 13, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 166, "fields": {"user": 166, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 9, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 167, "fields": {"user": 167, "avatar": "/static/img/avatar/avatar-9.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 12, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 168, "fields": {"user": 168, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 30, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 169, "fields": {"user": 169, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 14, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 170, "fields": {"user": 170, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 15, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 171, "fields": {"user": 171, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 10, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 172, "fields": {"user": 172, "avatar": "/static/img/avatar/avatar-12.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 25, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 173, "fields": {"user": 173, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 14, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 174, "fields": {"user": 174, "avatar": "/static/img/avatar/avatar-2.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 15, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 175, "fields": {"user": 175, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 8, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 176, "fields": {"user": 176, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 18, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 177, "fields": {"user": 177, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 17, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 178, "fields": {"user": 178, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 17, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 179, "fields": {"user": 179, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 15, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 180, "fields": {"user": 180, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 17, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 181, "fields": {"user": 181, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 27, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 182, "fields": {"user": 182, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 7, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 183, "fields": {"user": 183, "avatar": "/static/img/avatar/avatar-1.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 6, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 184, "fields": {"user": 184, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 11, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 185, "fields": {"user": 185, "avatar": "/static/img/avatar/avatar-1.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 24, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 186, "fields": {"user": 186, "avatar": "/static/img/avatar/avatar-8.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 13, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 187, "fields": {"user": 187, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 8, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 188, "fields": {"user": 188, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 6, "submission_number": 19, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 189, "fields": {"user": 189, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 24, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 190, "fields": {"user": 190, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 8, "submission_number": 15, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 191, "fields": {"user": 191, "avatar": "/static/img/avatar/avatar-12.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 6, "submission_number": 31, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 192, "fields": {"user": 192, "avatar": "/static/img/avatar/avatar-2.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 14, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 193, "fields": {"user": 193, "avatar": "/static/img/avatar/avatar-5.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 27, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 194, "fields": {"user": 194, "avatar": "/static/img/avatar/avatar-8.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 7, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 195, "fields": {"user": 195, "avatar": "/static/img/avatar/avatar-8.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 21, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 196, "fields": {"user": 196, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 13, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 197, "fields": {"user": 197, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 198, "fields": {"user": 198, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 199, "fields": {"user": 199, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 200, "fields": {"user": 200, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 201, "fields": {"user": 201, "avatar": "/static/img/avatar/avatar-8.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 202, "fields": {"user": 202, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 203, "fields": {"user": 203, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 204, "fields": {"user": 204, "avatar": "/static/img/avatar/avatar-5.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 205, "fields": {"user": 205, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 206, "fields": {"user": 206, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 207, "fields": {"user": 207, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 208, "fields": {"user": 208, "avatar": "/static/img/avatar/avatar-2.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 5, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014111558"}}, {"model": "account.userprofile", "pk": 209, "fields": {"user": 209, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 210, "fields": {"user": 210, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 211, "fields": {"user": 211, "avatar": "/static/img/avatar/avatar-8.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014110058"}}, {"model": "account.userprofile", "pk": 212, "fields": {"user": 212, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 213, "fields": {"user": 213, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 214, "fields": {"user": 214, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 13, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014110058"}}, {"model": "account.userprofile", "pk": 215, "fields": {"user": 215, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": null}}, {"model": "account.userprofile", "pk": 216, "fields": {"user": 216, "avatar": "/static/img/avatar/avatar-2.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 17, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 217, "fields": {"user": 217, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 10, "submission_number": 18, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 218, "fields": {"user": 218, "avatar": "/static/img/avatar/avatar-12.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 42, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2016112402"}}, {"model": "account.userprofile", "pk": 219, "fields": {"user": 219, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015112126"}}, {"model": "account.userprofile", "pk": 220, "fields": {"user": 220, "avatar": "/static/img/avatar/avatar-5.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 38, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015112126"}}, {"model": "account.userprofile", "pk": 221, "fields": {"user": 221, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 7, "submission_number": 23, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112626"}}, {"model": "account.userprofile", "pk": 222, "fields": {"user": 222, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016111742"}}, {"model": "account.userprofile", "pk": 223, "fields": {"user": 223, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 18, "submission_number": 120, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016111742"}}, {"model": "account.userprofile", "pk": 224, "fields": {"user": 224, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 6, "submission_number": 34, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014111940"}}, {"model": "account.userprofile", "pk": 225, "fields": {"user": 225, "avatar": "/static/img/avatar/avatar-2.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 17, "submission_number": 37, "problems_status": "{}", "phone_number": null, "school": "swjtu", "student_id": "2015111948"}}, {"model": "account.userprofile", "pk": 226, "fields": {"user": 226, "avatar": "/static/img/avatar/avatar-9.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 43, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "201612642"}}, {"model": "account.userprofile", "pk": 227, "fields": {"user": 227, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "swjtu", "student_id": "2015110069"}}, {"model": "account.userprofile", "pk": 228, "fields": {"user": 228, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 8, "submission_number": 18, "problems_status": "{}", "phone_number": null, "school": "swjtu", "student_id": "2015110069"}}, {"model": "account.userprofile", "pk": 229, "fields": {"user": 229, "avatar": "/static/img/avatar/avatar-2.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 12, "submission_number": 41, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112207"}}, {"model": "account.userprofile", "pk": 230, "fields": {"user": 230, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 32, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 231, "fields": {"user": 231, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 12, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 232, "fields": {"user": 232, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 8, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112650"}}, {"model": "account.userprofile", "pk": 233, "fields": {"user": 233, "avatar": "/static/img/avatar/avatar-12.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112345"}}, {"model": "account.userprofile", "pk": 234, "fields": {"user": 234, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 6, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 235, "fields": {"user": 235, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 236, "fields": {"user": 236, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015112266"}}, {"model": "account.userprofile", "pk": 237, "fields": {"user": 237, "avatar": "/static/img/avatar/avatar-9.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 10, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112646"}}, {"model": "account.userprofile", "pk": 238, "fields": {"user": 238, "avatar": "/static/img/avatar/avatar-5.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 6, "submission_number": 29, "problems_status": "{}", "phone_number": null, "school": "SWJTU", "student_id": "2015111833"}}, {"model": "account.userprofile", "pk": 239, "fields": {"user": 239, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 6, "submission_number": 12, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016114693"}}, {"model": "account.userprofile", "pk": 240, "fields": {"user": 240, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 241, "fields": {"user": 241, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 36, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112504"}}, {"model": "account.userprofile", "pk": 242, "fields": {"user": 242, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 243, "fields": {"user": 243, "avatar": "/static/img/avatar/avatar-5.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 7, "submission_number": 18, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 244, "fields": {"user": 244, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 17, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014111852"}}, {"model": "account.userprofile", "pk": 245, "fields": {"user": 245, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 9, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 246, "fields": {"user": 246, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 21, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014111689"}}, {"model": "account.userprofile", "pk": 247, "fields": {"user": 247, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "20132191"}}, {"model": "account.userprofile", "pk": 248, "fields": {"user": 248, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 249, "fields": {"user": 249, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112636"}}, {"model": "account.userprofile", "pk": 250, "fields": {"user": 250, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 11, "submission_number": 50, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112366"}}, {"model": "account.userprofile", "pk": 251, "fields": {"user": 251, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 7, "submission_number": 62, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112369"}}, {"model": "account.userprofile", "pk": 252, "fields": {"user": 252, "avatar": "/static/img/avatar/avatar-19.png", "blog": "", "mood": "", "hduoj_username": "", "bestcoder_username": "", "codeforces_username": "", "accepted_problem_number": 1, "submission_number": 2, "problems_status": "{}", "phone_number": "", "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2016112428"}}, {"model": "account.userprofile", "pk": 253, "fields": {"user": 253, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 12, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 254, "fields": {"user": 254, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 2, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015110355"}}, {"model": "account.userprofile", "pk": 255, "fields": {"user": 255, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112528"}}, {"model": "account.userprofile", "pk": 256, "fields": {"user": 256, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 8, "submission_number": 34, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 257, "fields": {"user": 257, "avatar": "/static/upload/avatar_a70d0.JPG", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 258, "fields": {"user": 258, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 14, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112365"}}, {"model": "account.userprofile", "pk": 259, "fields": {"user": 259, "avatar": "/static/img/avatar/avatar-8.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 3, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112368"}}, {"model": "account.userprofile", "pk": 260, "fields": {"user": 260, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 261, "fields": {"user": 261, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 3, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014111927"}}, {"model": "account.userprofile", "pk": 262, "fields": {"user": 262, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016115060"}}, {"model": "account.userprofile", "pk": 263, "fields": {"user": 263, "avatar": "/static/img/avatar/avatar-9.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66\u7280\u6d66\u6821\u533a", "student_id": "2014112338"}}, {"model": "account.userprofile", "pk": 264, "fields": {"user": 264, "avatar": "/static/img/avatar/avatar-8.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2015114671"}}, {"model": "account.userprofile", "pk": 265, "fields": {"user": 265, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112423"}}, {"model": "account.userprofile", "pk": 266, "fields": {"user": 266, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 12, "submission_number": 40, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": null}}, {"model": "account.userprofile", "pk": 267, "fields": {"user": 267, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 2, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015110068"}}, {"model": "account.userprofile", "pk": 268, "fields": {"user": 268, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 6, "submission_number": 27, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111950"}}, {"model": "account.userprofile", "pk": 269, "fields": {"user": 269, "avatar": "/static/img/avatar/avatar-1.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111876"}}, {"model": "account.userprofile", "pk": 270, "fields": {"user": 270, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 13, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111876"}}, {"model": "account.userprofile", "pk": 271, "fields": {"user": 271, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 272, "fields": {"user": 272, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 10, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 273, "fields": {"user": 273, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 8, "submission_number": 25, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2014111763"}}, {"model": "account.userprofile", "pk": 274, "fields": {"user": 274, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 26, "problems_status": "{}", "phone_number": null, "school": "swjtu", "student_id": "2016112460"}}, {"model": "account.userprofile", "pk": 275, "fields": {"user": 275, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 9, "submission_number": 52, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 276, "fields": {"user": 276, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 277, "fields": {"user": 277, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 20, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 278, "fields": {"user": 278, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 7, "submission_number": 32, "problems_status": "{}", "phone_number": null, "school": "1", "student_id": "1"}}, {"model": "account.userprofile", "pk": 279, "fields": {"user": 279, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 280, "fields": {"user": 280, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112361"}}, {"model": "account.userprofile", "pk": 281, "fields": {"user": 281, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 282, "fields": {"user": 282, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 283, "fields": {"user": 283, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 9, "submission_number": 28, "problems_status": "{}", "phone_number": null, "school": null, "student_id": "2014111876"}}, {"model": "account.userprofile", "pk": 284, "fields": {"user": 284, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 10, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112328"}}, {"model": "account.userprofile", "pk": 285, "fields": {"user": 285, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014111567"}}, {"model": "account.userprofile", "pk": 286, "fields": {"user": 286, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 14, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014111567"}}, {"model": "account.userprofile", "pk": 287, "fields": {"user": 287, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 288, "fields": {"user": 288, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 17, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111984"}}, {"model": "account.userprofile", "pk": 289, "fields": {"user": 289, "avatar": "/static/img/avatar/avatar-9.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112233"}}, {"model": "account.userprofile", "pk": 290, "fields": {"user": 290, "avatar": "/static/img/avatar/avatar-5.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 11, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": null}}, {"model": "account.userprofile", "pk": 291, "fields": {"user": 291, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112154"}}, {"model": "account.userprofile", "pk": 292, "fields": {"user": 292, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 42, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 293, "fields": {"user": 293, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 22, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 294, "fields": {"user": 294, "avatar": "/static/img/avatar/avatar-12.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 295, "fields": {"user": 295, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 5, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 296, "fields": {"user": 296, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "x", "student_id": null}}, {"model": "account.userprofile", "pk": 297, "fields": {"user": 297, "avatar": "/static/img/avatar/avatar-9.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 298, "fields": {"user": 298, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014112023"}}, {"model": "account.userprofile", "pk": 299, "fields": {"user": 299, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 15, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112332"}}, {"model": "account.userprofile", "pk": 300, "fields": {"user": 300, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 301, "fields": {"user": 301, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 17, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": null}}, {"model": "account.userprofile", "pk": 302, "fields": {"user": 302, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 16, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 303, "fields": {"user": 303, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112421"}}, {"model": "account.userprofile", "pk": 304, "fields": {"user": 304, "avatar": "/static/img/avatar/avatar-5.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": null}}, {"model": "account.userprofile", "pk": 305, "fields": {"user": 305, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 11, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015114326"}}, {"model": "account.userprofile", "pk": 306, "fields": {"user": 306, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 13, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 307, "fields": {"user": 307, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112399"}}, {"model": "account.userprofile", "pk": 308, "fields": {"user": 308, "avatar": "/static/img/avatar/avatar-8.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 16, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112233"}}, {"model": "account.userprofile", "pk": 309, "fields": {"user": 309, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 31, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112389"}}, {"model": "account.userprofile", "pk": 310, "fields": {"user": 310, "avatar": "/static/img/avatar/avatar-9.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 52, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112399"}}, {"model": "account.userprofile", "pk": 311, "fields": {"user": 311, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 19, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014112108"}}, {"model": "account.userprofile", "pk": 312, "fields": {"user": 312, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 6, "submission_number": 23, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014112021"}}, {"model": "account.userprofile", "pk": 313, "fields": {"user": 313, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111926"}}, {"model": "account.userprofile", "pk": 314, "fields": {"user": 314, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 10, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111926"}}, {"model": "account.userprofile", "pk": 315, "fields": {"user": 315, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 3, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112271"}}, {"model": "account.userprofile", "pk": 316, "fields": {"user": 316, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 22, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112268"}}, {"model": "account.userprofile", "pk": 317, "fields": {"user": 317, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 3, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016111180"}}, {"model": "account.userprofile", "pk": 318, "fields": {"user": 318, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 3, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 319, "fields": {"user": 319, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 10, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112249"}}, {"model": "account.userprofile", "pk": 320, "fields": {"user": 320, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014110059"}}, {"model": "account.userprofile", "pk": 321, "fields": {"user": 321, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 322, "fields": {"user": 322, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 6, "submission_number": 49, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014110060"}}, {"model": "account.userprofile", "pk": 323, "fields": {"user": 323, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014111613"}}, {"model": "account.userprofile", "pk": 324, "fields": {"user": 324, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014111613"}}, {"model": "account.userprofile", "pk": 325, "fields": {"user": 325, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 15, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111706"}}, {"model": "account.userprofile", "pk": 326, "fields": {"user": 326, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 6, "submission_number": 15, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 327, "fields": {"user": 327, "avatar": "/static/img/avatar/avatar-5.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 14, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2015114671"}}, {"model": "account.userprofile", "pk": 328, "fields": {"user": 328, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 329, "fields": {"user": 329, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 14, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014112190"}}, {"model": "account.userprofile", "pk": 330, "fields": {"user": 330, "avatar": "/static/img/avatar/avatar-1.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 331, "fields": {"user": 331, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 2, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016114974"}}, {"model": "account.userprofile", "pk": 332, "fields": {"user": 332, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2015111825"}}, {"model": "account.userprofile", "pk": 333, "fields": {"user": 333, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 7, "submission_number": 21, "problems_status": "{}", "phone_number": null, "school": "swjtu", "student_id": null}}, {"model": "account.userprofile", "pk": 334, "fields": {"user": 334, "avatar": "/static/img/avatar/avatar-2.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 17, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 335, "fields": {"user": 335, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 31, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 336, "fields": {"user": 336, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 4, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014111879"}}, {"model": "account.userprofile", "pk": 337, "fields": {"user": 337, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 14, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014110060"}}, {"model": "account.userprofile", "pk": 338, "fields": {"user": 338, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 8, "submission_number": 20, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2014111883"}}, {"model": "account.userprofile", "pk": 339, "fields": {"user": 339, "avatar": "/static/img/avatar/avatar-1.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 340, "fields": {"user": 340, "avatar": "/static/img/avatar/avatar-2.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 16, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112010"}}, {"model": "account.userprofile", "pk": 341, "fields": {"user": 341, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 342, "fields": {"user": 342, "avatar": "/static/img/avatar/avatar-9.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111617"}}, {"model": "account.userprofile", "pk": 343, "fields": {"user": 343, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 8, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111617"}}, {"model": "account.userprofile", "pk": 344, "fields": {"user": 344, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 3, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 345, "fields": {"user": 345, "avatar": "/static/img/avatar/avatar-12.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016114265"}}, {"model": "account.userprofile", "pk": 346, "fields": {"user": 346, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016114266"}}, {"model": "account.userprofile", "pk": 347, "fields": {"user": 347, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 5, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": null}}, {"model": "account.userprofile", "pk": 348, "fields": {"user": 348, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016114274"}}, {"model": "account.userprofile", "pk": 349, "fields": {"user": 349, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 6, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 350, "fields": {"user": 350, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 20, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 351, "fields": {"user": 351, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 13, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 352, "fields": {"user": 352, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 14, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 353, "fields": {"user": 353, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 354, "fields": {"user": 354, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 355, "fields": {"user": 355, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": null}}, {"model": "account.userprofile", "pk": 356, "fields": {"user": 356, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 4, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111848"}}, {"model": "account.userprofile", "pk": 357, "fields": {"user": 357, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": null}}, {"model": "account.userprofile", "pk": 358, "fields": {"user": 358, "avatar": "/static/img/avatar/avatar-5.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 359, "fields": {"user": 359, "avatar": "/static/img/avatar/avatar-9.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 6, "submission_number": 23, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014112023"}}, {"model": "account.userprofile", "pk": 360, "fields": {"user": 360, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112473"}}, {"model": "account.userprofile", "pk": 361, "fields": {"user": 361, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015112045"}}, {"model": "account.userprofile", "pk": 362, "fields": {"user": 362, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 363, "fields": {"user": 363, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 41, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111898"}}, {"model": "account.userprofile", "pk": 364, "fields": {"user": 364, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015112266"}}, {"model": "account.userprofile", "pk": 365, "fields": {"user": 365, "avatar": "/static/img/avatar/avatar-1.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 366, "fields": {"user": 366, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2016112396"}}, {"model": "account.userprofile", "pk": 367, "fields": {"user": 367, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111603"}}, {"model": "account.userprofile", "pk": 368, "fields": {"user": 368, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112398"}}, {"model": "account.userprofile", "pk": 369, "fields": {"user": 369, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 4, "submission_number": 33, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 370, "fields": {"user": 370, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111669"}}, {"model": "account.userprofile", "pk": 371, "fields": {"user": 371, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 2, "problems_status": "{}", "phone_number": null, "school": "SWJTU", "student_id": null}}, {"model": "account.userprofile", "pk": 372, "fields": {"user": 372, "avatar": "/static/img/avatar/avatar-8.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 27, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 373, "fields": {"user": 373, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 374, "fields": {"user": 374, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 375, "fields": {"user": 375, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 54, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 376, "fields": {"user": 376, "avatar": "/static/img/avatar/avatar-9.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111234"}}, {"model": "account.userprofile", "pk": 377, "fields": {"user": 377, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 378, "fields": {"user": 378, "avatar": "/static/img/avatar/avatar-20.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 14, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 379, "fields": {"user": 379, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "swjtu", "student_id": "2015112208"}}, {"model": "account.userprofile", "pk": 380, "fields": {"user": 380, "avatar": "/static/img/avatar/avatar-2.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111234"}}, {"model": "account.userprofile", "pk": 381, "fields": {"user": 381, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 5, "submission_number": 12, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015112266"}}, {"model": "account.userprofile", "pk": 382, "fields": {"user": 382, "avatar": "/static/img/avatar/avatar-12.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 3, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111820"}}, {"model": "account.userprofile", "pk": 383, "fields": {"user": 383, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015110068"}}, {"model": "account.userprofile", "pk": 384, "fields": {"user": 384, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 5, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 385, "fields": {"user": 385, "avatar": "/static/img/avatar/avatar-12.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 4, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 386, "fields": {"user": 386, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 10, "submission_number": 27, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 387, "fields": {"user": 387, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 5, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u5927", "student_id": "2016112665"}}, {"model": "account.userprofile", "pk": 388, "fields": {"user": 388, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014111731"}}, {"model": "account.userprofile", "pk": 389, "fields": {"user": 389, "avatar": "/static/img/avatar/avatar-1.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 6, "submission_number": 25, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015110068"}}, {"model": "account.userprofile", "pk": 390, "fields": {"user": 390, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2016112669"}}, {"model": "account.userprofile", "pk": 391, "fields": {"user": 391, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 3, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2014112166"}}, {"model": "account.userprofile", "pk": 392, "fields": {"user": 392, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 393, "fields": {"user": 393, "avatar": "/static/img/avatar/avatar-6.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 394, "fields": {"user": 394, "avatar": "/static/img/avatar/avatar-16.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 395, "fields": {"user": 395, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015114017"}}, {"model": "account.userprofile", "pk": 396, "fields": {"user": 396, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 397, "fields": {"user": 397, "avatar": "/static/img/avatar/avatar-13.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 398, "fields": {"user": 398, "avatar": "/static/img/avatar/avatar-12.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111843"}}, {"model": "account.userprofile", "pk": 399, "fields": {"user": 399, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u4ea4\u901a\u5927\u5b66", "student_id": "2015111819"}}, {"model": "account.userprofile", "pk": 400, "fields": {"user": 400, "avatar": "/static/img/avatar/avatar-12.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 3, "submission_number": 9, "problems_status": "{}", "phone_number": null, "school": "cuit", "student_id": null}}, {"model": "account.userprofile", "pk": 401, "fields": {"user": 401, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 2, "submission_number": 3, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u77f3\u6cb9\u5927\u5b66", "student_id": null}}, {"model": "account.userprofile", "pk": 402, "fields": {"user": 402, "avatar": "/static/img/avatar/avatar-12.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "SWJTU", "student_id": null}}, {"model": "account.userprofile", "pk": 403, "fields": {"user": 403, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 4, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5357\u79d1\u6280\u5927\u5b66", "student_id": "20131737"}}, {"model": "account.userprofile", "pk": 404, "fields": {"user": 404, "avatar": "/static/img/avatar/avatar-11.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 405, "fields": {"user": 405, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 406, "fields": {"user": 406, "avatar": "/static/img/avatar/avatar-15.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 407, "fields": {"user": 407, "avatar": "/static/img/avatar/avatar-10.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 408, "fields": {"user": 408, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u4e2d\u5317\u5927\u5b66", "student_id": "1505014320"}}, {"model": "account.userprofile", "pk": 409, "fields": {"user": 409, "avatar": "/static/img/avatar/avatar-3.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u5357\u9633\u7406\u5de5\u5b66\u9662", "student_id": "1506915059"}}, {"model": "account.userprofile", "pk": 410, "fields": {"user": 410, "avatar": "/static/img/avatar/avatar-8.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 411, "fields": {"user": 411, "avatar": "/static/img/avatar/avatar-18.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 412, "fields": {"user": 412, "avatar": "/static/img/avatar/avatar-19.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 1, "submission_number": 1, "problems_status": "{}", "phone_number": null, "school": "THU", "student_id": "1329210031"}}, {"model": "account.userprofile", "pk": 413, "fields": {"user": 413, "avatar": "/static/img/avatar/avatar-8.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 414, "fields": {"user": 414, "avatar": "/static/img/avatar/avatar-1.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "scau", "student_id": null}}, {"model": "account.userprofile", "pk": 415, "fields": {"user": 415, "avatar": "/static/img/avatar/avatar-17.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u897f\u5b89\u7535\u5b50\u79d1\u6280\u5927\u5b66", "student_id": "15130127001"}}, {"model": "account.userprofile", "pk": 416, "fields": {"user": 416, "avatar": "/static/img/avatar/avatar-14.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": null, "student_id": null}}, {"model": "account.userprofile", "pk": 417, "fields": {"user": 417, "avatar": "/static/img/avatar/avatar-5.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u957f\u6625\u5de5\u4e1a\u5927\u5b66", "student_id": null}}, {"model": "account.userprofile", "pk": 418, "fields": {"user": 418, "avatar": "/static/img/avatar/avatar-4.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "\u56db\u5ddd\u5927\u5b66", "student_id": "2016141452250"}}, {"model": "account.userprofile", "pk": 419, "fields": {"user": 419, "avatar": "/static/img/avatar/avatar-7.png", "blog": null, "mood": null, "hduoj_username": null, "bestcoder_username": null, "codeforces_username": null, "accepted_problem_number": 0, "submission_number": 0, "problems_status": "{}", "phone_number": null, "school": "swpu", "student_id": "111"}}, {"model": "announcement.announcement", "pk": 1, "fields": {"title": "\u5bd2\u5047\u9a8c\u6536", "content": "<p>\u5bd2\u5047\u9a8c\u6536</p>", "create_time": "2016-12-04T03:15:58.035Z", "created_by": 1, "last_update_time": "2017-03-03T14:10:40.444Z", "visible": true}}, {"model": "announcement.announcement", "pk": 2, "fields": {"title": "\u5173\u4e8e\u4ee3\u7801", "content": "<p>\u7531\u4e8eOJ\u642d\u5efa\u5728\u4e91\u7aef\uff0c\u53d7\u786c\u76d8\u5927\u5c0f\u9650\u5236\uff0c\u4f1a\u4e0d\u5b9a\u671f\u6e05\u9664\u6240\u6709\u7528\u6237\u7684\u63d0\u4ea4\uff0c\u6240\u4ee5\u8bf7\u81ea\u884c\u4fdd\u5b58\u4ee3\u7801\u3002</p><p>\u6ce8\uff1a\u53ea\u662f\u6e05\u9664\u4f60\u63d0\u4ea4\u7684\u4ee3\u7801\uff0c\u4f60\u5728\u6392\u540d\u91cc\u9762\u7684\u6570\u636e\u4f9d\u7136\u662f\u4fdd\u7559\u7684\u3002</p>", "create_time": "2017-03-15T05:30:40.412Z", "created_by": 1, "last_update_time": "2017-04-17T02:55:57.627Z", "visible": false}}, {"model": "announcement.announcement", "pk": 3, "fields": {"title": "\u6bd4\u8d5b\u9898\u89e3", "content": "<p>1.2017\u5e743\u6708\u6708\u8d5b&nbsp;</p><p><a href=\"http://www.handsomehow.com/%E5%A5%97%E9%A2%98/2017/03/18/solution-of-swjtu-month-match.html\" target=\"_blank\" rel=\"nofollow\">http://www.handsomehow.com/%E5%A5%97%E9%A2%98/2017/03/18/solution-of-swjtu-month-match.html</a><br /></p>", "create_time": "2017-03-20T13:42:39.841Z", "created_by": 1, "last_update_time": "2017-03-20T13:42:39.841Z", "visible": true}}, {"model": "announcement.announcement", "pk": 4, "fields": {"title": "OJ\u9898\u76ee\u9ed8\u8ba4\u591a\u7ec4\u6570\u636e", "content": "<p>\u82e5\u65e0\u7279\u6b8a\u8bf4\u660e\uff0c\u8bf7\u8bfb\u5230\u6587\u4ef6\u5c3e</p>", "create_time": "2017-04-17T02:56:33.856Z", "created_by": 1, "last_update_time": "2017-05-05T08:12:23.760Z", "visible": true}}, {"model": "announcement.announcement", "pk": 5, "fields": {"title": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b", "content": "<p>\u6bd4\u8d5b\u65f6\u95f4\u5b89\u6392</p><p>5\u67085\u65e5 \u5ba3\u8bb2\u4f1a 19\uff1a00 \uff08\u5730\u70b9\u77ed\u4fe1\u901a\u77e5\uff09</p><p>5\u67087\u65e5\uff08\u7b2c\u5341\u5468\u5468\u65e5\uff09\u7f51\u7edc\u9884\u9009\u8d5b12\uff1a00~17\uff1a00</p><p>5\u6708 14 \u65e5\uff08\u7b2c\u5341\u4e00\u5468\u5468\u65e5\uff09\u73b0\u573a\u70ed\u8eab\u8d5b 9\uff1a00~11\uff1a00 \u5730\u70b9\uff1aX7507</p><p>5\u6708 14 \u65e5\uff08\u7b2c\u5341\u4e00\u5468\u5468\u65e5\uff09\u73b0\u573a\u51b3\u8d5b 12\uff1a00~17\uff1a00 \u5730\u70b9\uff1aX7507</p><p>\u62a5\u540d\u65b9\u5f0f</p><p>\u73b0\u573a\u62a5\u540d\uff1a4\u670827\u65e5\uff0c5\u67084\u65e5 \u4e2d\u5348\u548c\u665a\u4e0a \u4e8c\u3001\u56db\u98df\u5802\u95e8\u53e3</p><p>\u77ed\u4fe1\u62a5\u540d\uff1a\u5b66\u53f7+\u59d3\u540d+\u5b66\u9662+ACM\u6821\u8d5b \u53d1\u9001\u81f3 13618028214 \u5f20\u540c\u5b66</p><p>\u5fae\u4fe1\u62a5\u540d\uff1a\u5b66\u53f7+\u59d3\u540d+\u5b66\u9662+\u8054\u7cfb\u7535\u8bdd+ACM\u6821\u8d5b</p><p>\u6ce8:\u5c0f\u7ec4\u6240\u6709\u4eba\u4fe1\u606f\u7531\u7ec4\u957f\u4e00\u4eba\u53d1\u9001\u5b8c\u6210\u62a5\u540d\u4ee5\u540e\u5728</p><p>\u672cOJ\u4e0a\u65b9\u7684\u5c0f\u7ec4\u9879\u76ee(<a href=\"http://swjtuoj.cn/groups/\" target=\"_blank\">http://swjtuoj.cn/groups/</a>)</p><p>\u5904\u7533\u8bf7\u52a0\u5165&quot;\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b\u5c0f\u7ec4&quot;</p>", "create_time": "2017-04-28T02:28:06.650Z", "created_by": 1, "last_update_time": "2017-04-28T02:29:51.420Z", "visible": true}}, {"model": "group.group", "pk": 1, "fields": {"name": "admin", "description": "admin", "create_time": "2016-12-04T03:09:52.345Z", "created_by": 1, "join_group_setting": 2, "visible": true}}, {"model": "group.group", "pk": 2, "fields": {"name": "\u6821\u96c6\u8bad\u961f", "description": "ACM\u6821\u96c6\u8bad\u961f\u4e13\u7528\u5c0f\u7ec4", "create_time": "2017-03-18T08:56:31.491Z", "created_by": 1, "join_group_setting": 1, "visible": true}}, {"model": "group.group", "pk": 3, "fields": {"name": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b\u5c0f\u7ec4", "description": "<br>\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b\u5c0f\u7ec4<br><br>\n\u8bf7\u5c0f\u7ec4\u961f\u957f\u7533\u8bf7\u8d26\u53f7<br>\n\u683c\u5f0f\u4e3a:<br><br>2017_team_\u961f\u957f\u5b66\u53f7<br><br>\n\u5982:\n<br><br>2017_team_2016111111<br><br>\n\u7136\u540e\u7528\u8be5\u8d26\u53f7\u7533\u8bf7\u8be5\u5c0f\u7ec4,\u7533\u8bf7\u4fe1\u606f\u5904\u586b\u5199 \n<br>\n<br>\u961f\u54581\u59d3\u540d<br>\u961f\u54582\u59d3\u540d<br>\u961f\u54583\u59d3\u540d<br>\n<br>\n\u5982\uff1a\n<br><br>\n\u5f20\u4e09\n<br>\n\u674e\u56db\n<br>\n\u738b\u4e94\n<br>\n<br>\n\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u4e00\u5f8b\u62d2\u7edd\n<br>\u5982\u6709\u7591\u95ee\u8bf7\u5728Q\u7fa4198757793\u63d0\u95ee<br>", "create_time": "2017-04-28T01:23:27.635Z", "created_by": 1, "join_group_setting": 1, "visible": true}}, {"model": "group.group", "pk": 4, "fields": {"name": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u73b0\u573a\u8d5b\u5c0f\u7ec4", "description": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u73b0\u573a\u8d5b\u5c0f\u7ec4", "create_time": "2017-04-28T02:06:46.007Z", "created_by": 1, "join_group_setting": 1, "visible": true}}, {"model": "group.usergrouprelation", "pk": 1, "fields": {"group": 1, "user": 2, "join_time": "2016-12-04T03:10:22.065Z"}}, {"model": "group.usergrouprelation", "pk": 2, "fields": {"group": 2, "user": 95, "join_time": "2017-04-28T01:47:07.808Z"}}, {"model": "group.usergrouprelation", "pk": 7, "fields": {"group": 3, "user": 214, "join_time": "2017-05-03T11:11:07.573Z"}}, {"model": "group.usergrouprelation", "pk": 8, "fields": {"group": 3, "user": 218, "join_time": "2017-05-03T11:12:53.255Z"}}, {"model": "group.usergrouprelation", "pk": 9, "fields": {"group": 3, "user": 220, "join_time": "2017-05-03T11:13:09.886Z"}}, {"model": "group.usergrouprelation", "pk": 10, "fields": {"group": 3, "user": 221, "join_time": "2017-05-03T11:13:26.023Z"}}, {"model": "group.usergrouprelation", "pk": 11, "fields": {"group": 3, "user": 223, "join_time": "2017-05-03T11:13:38.672Z"}}, {"model": "group.usergrouprelation", "pk": 12, "fields": {"group": 3, "user": 225, "join_time": "2017-05-03T11:14:27.284Z"}}, {"model": "group.usergrouprelation", "pk": 13, "fields": {"group": 3, "user": 228, "join_time": "2017-05-03T11:15:17.015Z"}}, {"model": "group.usergrouprelation", "pk": 14, "fields": {"group": 3, "user": 224, "join_time": "2017-05-03T11:15:39.473Z"}}, {"model": "group.usergrouprelation", "pk": 15, "fields": {"group": 3, "user": 231, "join_time": "2017-05-03T11:15:52.743Z"}}, {"model": "group.usergrouprelation", "pk": 16, "fields": {"group": 3, "user": 238, "join_time": "2017-05-03T11:16:27.795Z"}}, {"model": "group.usergrouprelation", "pk": 17, "fields": {"group": 3, "user": 270, "join_time": "2017-05-03T11:16:50.984Z"}}, {"model": "group.usergrouprelation", "pk": 18, "fields": {"group": 3, "user": 268, "join_time": "2017-05-03T11:17:01.621Z"}}, {"model": "group.usergrouprelation", "pk": 19, "fields": {"group": 3, "user": 258, "join_time": "2017-05-03T11:17:15.863Z"}}, {"model": "group.usergrouprelation", "pk": 20, "fields": {"group": 3, "user": 256, "join_time": "2017-05-03T11:17:27.842Z"}}, {"model": "group.usergrouprelation", "pk": 21, "fields": {"group": 3, "user": 253, "join_time": "2017-05-03T11:17:42.110Z"}}, {"model": "group.usergrouprelation", "pk": 22, "fields": {"group": 3, "user": 251, "join_time": "2017-05-03T11:17:54.780Z"}}, {"model": "group.usergrouprelation", "pk": 23, "fields": {"group": 3, "user": 250, "join_time": "2017-05-03T11:18:06.753Z"}}, {"model": "group.usergrouprelation", "pk": 24, "fields": {"group": 3, "user": 244, "join_time": "2017-05-03T11:18:22.124Z"}}, {"model": "group.usergrouprelation", "pk": 25, "fields": {"group": 3, "user": 243, "join_time": "2017-05-03T11:18:31.406Z"}}, {"model": "group.usergrouprelation", "pk": 26, "fields": {"group": 3, "user": 217, "join_time": "2017-05-03T11:46:11.620Z"}}, {"model": "group.usergrouprelation", "pk": 27, "fields": {"group": 3, "user": 226, "join_time": "2017-05-03T11:46:22.741Z"}}, {"model": "group.usergrouprelation", "pk": 28, "fields": {"group": 3, "user": 229, "join_time": "2017-05-03T11:46:37.963Z"}}, {"model": "group.usergrouprelation", "pk": 29, "fields": {"group": 3, "user": 232, "join_time": "2017-05-03T11:46:51.401Z"}}, {"model": "group.usergrouprelation", "pk": 30, "fields": {"group": 3, "user": 239, "join_time": "2017-05-03T11:47:04.751Z"}}, {"model": "group.usergrouprelation", "pk": 31, "fields": {"group": 3, "user": 241, "join_time": "2017-05-03T11:47:18.048Z"}}, {"model": "group.usergrouprelation", "pk": 32, "fields": {"group": 3, "user": 273, "join_time": "2017-05-03T11:47:40.859Z"}}, {"model": "group.usergrouprelation", "pk": 33, "fields": {"group": 3, "user": 216, "join_time": "2017-05-03T11:54:56.052Z"}}, {"model": "group.usergrouprelation", "pk": 34, "fields": {"group": 3, "user": 274, "join_time": "2017-05-03T11:55:15.547Z"}}, {"model": "group.usergrouprelation", "pk": 36, "fields": {"group": 3, "user": 275, "join_time": "2017-05-03T12:34:27.652Z"}}, {"model": "group.usergrouprelation", "pk": 37, "fields": {"group": 3, "user": 277, "join_time": "2017-05-03T12:34:42.820Z"}}, {"model": "group.usergrouprelation", "pk": 38, "fields": {"group": 3, "user": 278, "join_time": "2017-05-03T14:04:24.579Z"}}, {"model": "group.usergrouprelation", "pk": 39, "fields": {"group": 3, "user": 281, "join_time": "2017-05-04T05:45:16.863Z"}}, {"model": "group.usergrouprelation", "pk": 40, "fields": {"group": 3, "user": 284, "join_time": "2017-05-04T10:24:13.814Z"}}, {"model": "group.usergrouprelation", "pk": 41, "fields": {"group": 3, "user": 266, "join_time": "2017-05-04T13:24:32.005Z"}}, {"model": "group.usergrouprelation", "pk": 42, "fields": {"group": 3, "user": 286, "join_time": "2017-05-04T14:05:30.585Z"}}, {"model": "group.usergrouprelation", "pk": 43, "fields": {"group": 3, "user": 288, "join_time": "2017-05-04T14:05:43.029Z"}}, {"model": "group.usergrouprelation", "pk": 44, "fields": {"group": 3, "user": 290, "join_time": "2017-05-05T04:37:47.955Z"}}, {"model": "group.usergrouprelation", "pk": 45, "fields": {"group": 3, "user": 293, "join_time": "2017-05-05T09:17:03.239Z"}}, {"model": "group.usergrouprelation", "pk": 46, "fields": {"group": 3, "user": 292, "join_time": "2017-05-05T12:09:38.013Z"}}, {"model": "group.usergrouprelation", "pk": 47, "fields": {"group": 2, "user": 86, "join_time": "2017-05-05T12:48:31.756Z"}}, {"model": "group.usergrouprelation", "pk": 48, "fields": {"group": 2, "user": 5, "join_time": "2017-05-05T12:48:34.681Z"}}, {"model": "group.usergrouprelation", "pk": 49, "fields": {"group": 2, "user": 16, "join_time": "2017-05-05T13:14:10.923Z"}}, {"model": "group.usergrouprelation", "pk": 50, "fields": {"group": 2, "user": 9, "join_time": "2017-05-05T13:14:13.351Z"}}, {"model": "group.usergrouprelation", "pk": 51, "fields": {"group": 3, "user": 295, "join_time": "2017-05-05T13:16:57.166Z"}}, {"model": "group.usergrouprelation", "pk": 52, "fields": {"group": 3, "user": 299, "join_time": "2017-05-05T13:17:07.612Z"}}, {"model": "group.usergrouprelation", "pk": 53, "fields": {"group": 3, "user": 302, "join_time": "2017-05-05T13:17:27.446Z"}}, {"model": "group.usergrouprelation", "pk": 54, "fields": {"group": 3, "user": 306, "join_time": "2017-05-05T13:17:39.940Z"}}, {"model": "group.usergrouprelation", "pk": 55, "fields": {"group": 3, "user": 308, "join_time": "2017-05-05T13:17:49.346Z"}}, {"model": "group.usergrouprelation", "pk": 56, "fields": {"group": 3, "user": 310, "join_time": "2017-05-05T13:17:59.554Z"}}, {"model": "group.usergrouprelation", "pk": 57, "fields": {"group": 3, "user": 311, "join_time": "2017-05-05T13:18:08.945Z"}}, {"model": "group.usergrouprelation", "pk": 58, "fields": {"group": 3, "user": 283, "join_time": "2017-05-05T13:18:24.096Z"}}, {"model": "group.usergrouprelation", "pk": 59, "fields": {"group": 3, "user": 314, "join_time": "2017-05-05T13:18:45.421Z"}}, {"model": "group.usergrouprelation", "pk": 60, "fields": {"group": 3, "user": 309, "join_time": "2017-05-05T13:18:59.475Z"}}, {"model": "group.usergrouprelation", "pk": 61, "fields": {"group": 3, "user": 316, "join_time": "2017-05-05T13:19:08.195Z"}}, {"model": "group.usergrouprelation", "pk": 63, "fields": {"group": 2, "user": 88, "join_time": "2017-05-05T13:30:20.692Z"}}, {"model": "group.usergrouprelation", "pk": 64, "fields": {"group": 3, "user": 319, "join_time": "2017-05-05T13:31:14.417Z"}}, {"model": "group.usergrouprelation", "pk": 65, "fields": {"group": 3, "user": 321, "join_time": "2017-05-05T13:31:24.813Z"}}, {"model": "group.usergrouprelation", "pk": 66, "fields": {"group": 3, "user": 325, "join_time": "2017-05-05T13:36:19.580Z"}}, {"model": "group.usergrouprelation", "pk": 67, "fields": {"group": 2, "user": 8, "join_time": "2017-05-05T13:36:53.946Z"}}, {"model": "group.usergrouprelation", "pk": 68, "fields": {"group": 3, "user": 327, "join_time": "2017-05-05T13:40:12.999Z"}}, {"model": "group.usergrouprelation", "pk": 70, "fields": {"group": 3, "user": 312, "join_time": "2017-05-05T13:44:32.818Z"}}, {"model": "group.usergrouprelation", "pk": 71, "fields": {"group": 2, "user": 328, "join_time": "2017-05-05T13:53:09.592Z"}}, {"model": "group.usergrouprelation", "pk": 72, "fields": {"group": 3, "user": 301, "join_time": "2017-05-05T15:08:42.206Z"}}, {"model": "group.usergrouprelation", "pk": 73, "fields": {"group": 3, "user": 324, "join_time": "2017-05-05T15:08:44.552Z"}}, {"model": "group.usergrouprelation", "pk": 74, "fields": {"group": 3, "user": 329, "join_time": "2017-05-05T15:23:11.325Z"}}, {"model": "group.usergrouprelation", "pk": 75, "fields": {"group": 3, "user": 230, "join_time": "2017-05-05T15:23:22.045Z"}}, {"model": "group.usergrouprelation", "pk": 76, "fields": {"group": 2, "user": 14, "join_time": "2017-05-06T01:52:19.848Z"}}, {"model": "group.usergrouprelation", "pk": 77, "fields": {"group": 3, "user": 335, "join_time": "2017-05-06T01:52:22.766Z"}}, {"model": "group.usergrouprelation", "pk": 78, "fields": {"group": 3, "user": 333, "join_time": "2017-05-06T01:52:24.475Z"}}, {"model": "group.usergrouprelation", "pk": 79, "fields": {"group": 3, "user": 338, "join_time": "2017-05-06T03:53:22.530Z"}}, {"model": "group.usergrouprelation", "pk": 80, "fields": {"group": 3, "user": 337, "join_time": "2017-05-06T03:53:24.014Z"}}, {"model": "group.usergrouprelation", "pk": 81, "fields": {"group": 3, "user": 343, "join_time": "2017-05-06T06:26:33.593Z"}}, {"model": "group.usergrouprelation", "pk": 82, "fields": {"group": 3, "user": 347, "join_time": "2017-05-06T13:16:23.104Z"}}, {"model": "group.usergrouprelation", "pk": 83, "fields": {"group": 3, "user": 351, "join_time": "2017-05-06T16:35:33.004Z"}}, {"model": "group.usergrouprelation", "pk": 84, "fields": {"group": 3, "user": 350, "join_time": "2017-05-06T16:35:35.071Z"}}, {"model": "group.usergrouprelation", "pk": 85, "fields": {"group": 3, "user": 352, "join_time": "2017-05-06T16:35:37.313Z"}}, {"model": "group.usergrouprelation", "pk": 86, "fields": {"group": 3, "user": 353, "join_time": "2017-05-06T16:35:39.882Z"}}, {"model": "group.usergrouprelation", "pk": 87, "fields": {"group": 3, "user": 354, "join_time": "2017-05-06T16:35:42.667Z"}}, {"model": "group.usergrouprelation", "pk": 89, "fields": {"group": 3, "user": 359, "join_time": "2017-05-07T00:26:43.557Z"}}, {"model": "group.usergrouprelation", "pk": 90, "fields": {"group": 3, "user": 363, "join_time": "2017-05-07T01:33:10.915Z"}}, {"model": "group.usergrouprelation", "pk": 91, "fields": {"group": 3, "user": 369, "join_time": "2017-05-07T03:32:27.757Z"}}, {"model": "group.usergrouprelation", "pk": 92, "fields": {"group": 3, "user": 372, "join_time": "2017-05-07T03:32:29.533Z"}}, {"model": "group.usergrouprelation", "pk": 93, "fields": {"group": 3, "user": 375, "join_time": "2017-05-07T03:32:31.642Z"}}, {"model": "group.usergrouprelation", "pk": 95, "fields": {"group": 3, "user": 237, "join_time": "2017-05-07T03:52:35.212Z"}}, {"model": "group.usergrouprelation", "pk": 96, "fields": {"group": 3, "user": 2, "join_time": "2017-05-07T04:01:02.393Z"}}, {"model": "group.usergrouprelation", "pk": 97, "fields": {"group": 3, "user": 326, "join_time": "2017-05-07T04:04:00.182Z"}}, {"model": "group.usergrouprelation", "pk": 98, "fields": {"group": 3, "user": 381, "join_time": "2017-05-07T04:13:02.139Z"}}, {"model": "group.usergrouprelation", "pk": 99, "fields": {"group": 3, "user": 387, "join_time": "2017-05-07T04:34:41.803Z"}}, {"model": "group.usergrouprelation", "pk": 101, "fields": {"group": 3, "user": 389, "join_time": "2017-05-07T04:46:19.001Z"}}, {"model": "group.usergrouprelation", "pk": 102, "fields": {"group": 3, "user": 261, "join_time": "2017-05-07T05:14:35.653Z"}}, {"model": "group.usergrouprelation", "pk": 103, "fields": {"group": 3, "user": 386, "join_time": "2017-05-07T06:43:02.180Z"}}, {"model": "group.usergrouprelation", "pk": 104, "fields": {"group": 3, "user": 392, "join_time": "2017-05-07T07:08:26.103Z"}}, {"model": "group.usergrouprelation", "pk": 105, "fields": {"group": 4, "user": 148, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 106, "fields": {"group": 4, "user": 149, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 107, "fields": {"group": 4, "user": 150, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 108, "fields": {"group": 4, "user": 151, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 109, "fields": {"group": 4, "user": 152, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 110, "fields": {"group": 4, "user": 153, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 111, "fields": {"group": 4, "user": 154, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 112, "fields": {"group": 4, "user": 155, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 113, "fields": {"group": 4, "user": 156, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 114, "fields": {"group": 4, "user": 157, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 115, "fields": {"group": 4, "user": 158, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 116, "fields": {"group": 4, "user": 159, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 117, "fields": {"group": 4, "user": 160, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 118, "fields": {"group": 4, "user": 161, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 119, "fields": {"group": 4, "user": 162, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 120, "fields": {"group": 4, "user": 163, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 121, "fields": {"group": 4, "user": 164, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 122, "fields": {"group": 4, "user": 165, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 123, "fields": {"group": 4, "user": 166, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 124, "fields": {"group": 4, "user": 167, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 125, "fields": {"group": 4, "user": 168, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 126, "fields": {"group": 4, "user": 169, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 127, "fields": {"group": 4, "user": 170, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 128, "fields": {"group": 4, "user": 171, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 129, "fields": {"group": 4, "user": 172, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 130, "fields": {"group": 4, "user": 173, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 131, "fields": {"group": 4, "user": 174, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 132, "fields": {"group": 4, "user": 175, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 133, "fields": {"group": 4, "user": 176, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 134, "fields": {"group": 4, "user": 177, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 135, "fields": {"group": 4, "user": 178, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 136, "fields": {"group": 4, "user": 179, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 137, "fields": {"group": 4, "user": 180, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 138, "fields": {"group": 4, "user": 181, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 139, "fields": {"group": 4, "user": 182, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 140, "fields": {"group": 4, "user": 183, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 141, "fields": {"group": 4, "user": 184, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 142, "fields": {"group": 4, "user": 185, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 143, "fields": {"group": 4, "user": 186, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 144, "fields": {"group": 4, "user": 187, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 145, "fields": {"group": 4, "user": 188, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 146, "fields": {"group": 4, "user": 189, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 147, "fields": {"group": 4, "user": 190, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 148, "fields": {"group": 4, "user": 191, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 149, "fields": {"group": 4, "user": 192, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 150, "fields": {"group": 4, "user": 193, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 151, "fields": {"group": 4, "user": 194, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 152, "fields": {"group": 4, "user": 195, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 153, "fields": {"group": 4, "user": 196, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 154, "fields": {"group": 4, "user": 197, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 155, "fields": {"group": 4, "user": 198, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 156, "fields": {"group": 4, "user": 199, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 157, "fields": {"group": 4, "user": 200, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 158, "fields": {"group": 4, "user": 201, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 159, "fields": {"group": 4, "user": 202, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 160, "fields": {"group": 4, "user": 203, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 161, "fields": {"group": 4, "user": 204, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 162, "fields": {"group": 4, "user": 205, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 163, "fields": {"group": 4, "user": 206, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.usergrouprelation", "pk": 164, "fields": {"group": 4, "user": 207, "join_time": "2017-05-13T00:00:00Z"}}, {"model": "group.admingrouprelation", "pk": 1, "fields": {"user": 1, "group": 1}}, {"model": "group.admingrouprelation", "pk": 2, "fields": {"user": 2, "group": 1}}, {"model": "group.admingrouprelation", "pk": 3, "fields": {"user": 1, "group": 2}}, {"model": "group.admingrouprelation", "pk": 4, "fields": {"user": 1, "group": 3}}, {"model": "group.admingrouprelation", "pk": 5, "fields": {"user": 95, "group": 2}}, {"model": "group.admingrouprelation", "pk": 8, "fields": {"user": 210, "group": 2}}, {"model": "group.admingrouprelation", "pk": 10, "fields": {"user": 2, "group": 2}}, {"model": "group.admingrouprelation", "pk": 11, "fields": {"user": 1, "group": 4}}, {"model": "group.joingrouprequest", "pk": 1, "fields": {"group": 1, "user": 2, "message": "admin", "create_time": "2016-12-04T03:10:10.932Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 2, "fields": {"group": 2, "user": 113, "message": "\u6f58\u9510", "create_time": "2017-04-08T05:26:39.486Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 3, "fields": {"group": 2, "user": 95, "message": "handsomehow", "create_time": "2017-04-28T01:47:01.638Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 4, "fields": {"group": 2, "user": 210, "message": "2015111995 \u4fde\u7b11\u676d", "create_time": "2017-04-28T01:50:10.712Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 5, "fields": {"group": 2, "user": 2, "message": "me", "create_time": "2017-04-28T01:54:00.427Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 6, "fields": {"group": 2, "user": 2, "message": "me", "create_time": "2017-04-28T01:54:27.969Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 7, "fields": {"group": 3, "user": 1, "message": "\u4f60\u597d\u554a", "create_time": "2017-04-28T02:47:35.997Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 8, "fields": {"group": 3, "user": 214, "message": "\u9f50\u8fbe\n\u9648\u9f99\n\u89e3\u664b", "create_time": "2017-04-28T02:50:27.883Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 9, "fields": {"group": 3, "user": 216, "message": "\u6234\u5c712015112111\n\u5f20\u6d2a\u658c2015112105", "create_time": "2017-04-28T02:53:11.985Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 10, "fields": {"group": 3, "user": 217, "message": "\u5f20\u821c\u5b87\n\u5305\u9534\u6960\n\u5434\u767b\u8f72", "create_time": "2017-04-28T03:19:50.901Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 11, "fields": {"group": 3, "user": 218, "message": "\u79e6\u864e\n\u738b\u4e9a\u950b\n\u6768\u6668\u5578", "create_time": "2017-04-28T03:40:18.361Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 12, "fields": {"group": 3, "user": 220, "message": "\u5434\u4f73\u9e3f\n\u9648\u5b89\n\u59dc\u96c4", "create_time": "2017-04-28T04:32:14.008Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 13, "fields": {"group": 3, "user": 221, "message": "\u5218\u6d69\u73ae\n\u77f3\u5fd7\u4e07\n\u7941\u7965\u5a01", "create_time": "2017-04-28T04:34:31.408Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 14, "fields": {"group": 3, "user": 223, "message": "\u738b\u6587\u742a\n\u6768\u6d9b\n\u8c37\u96e8\u9f99", "create_time": "2017-04-28T04:50:29.408Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 15, "fields": {"group": 3, "user": 225, "message": "\u738b\u79cb\u950b\n\u738b\u6797\n\u66fe\u662d\u7ff0", "create_time": "2017-04-28T04:54:09.698Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 16, "fields": {"group": 3, "user": 226, "message": "\u6587\u8d85\u8c6a\n\u51af\u5eb7\u6849\n\u738b\u6668\u66e6", "create_time": "2017-04-28T04:55:15.730Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 17, "fields": {"group": 3, "user": 228, "message": "\u90d1\u8d5b\n\u5f20\u97e6\u5609", "create_time": "2017-04-28T05:01:50.128Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 18, "fields": {"group": 3, "user": 229, "message": "\u7956\u8f69\n\u6768\u529b\n\u674e\u8fbe\u8d24", "create_time": "2017-04-28T05:04:46.549Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 19, "fields": {"group": 3, "user": 224, "message": "\u5f20\u78a7\u4f9d\n\u79e6\u5c0f\u4e91\n\u5f6d\u6f47", "create_time": "2017-04-28T06:22:53.831Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 20, "fields": {"group": 3, "user": 231, "message": "\u8096\u6893\u715c\n\u5f20\u5b50\u822a\n\u5f20\u6b23\u7389", "create_time": "2017-04-28T08:03:12.013Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 21, "fields": {"group": 3, "user": 232, "message": "\u9648\u6668\n\u5c27\u6bc5\n\u9a86\u654f", "create_time": "2017-04-28T08:40:42.651Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 22, "fields": {"group": 3, "user": 234, "message": "\u675c\u9e4f\u7a0b", "create_time": "2017-04-28T09:02:52.429Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 23, "fields": {"group": 3, "user": 238, "message": "\u9093\u91d1\u7ea2\n\u738b\u521a\n\u9f99\u6676", "create_time": "2017-04-29T02:24:27.734Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 24, "fields": {"group": 3, "user": 239, "message": "\u51af\u6770\u4ea8\n\u6c5f\u5b87\n\u9ad8\u79cb\u5b9e", "create_time": "2017-04-29T02:57:30.360Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 25, "fields": {"group": 3, "user": 241, "message": "\u5f20\u660a\n\u5b8b\u4e91\u6600\n\u5510\u7ff0", "create_time": "2017-04-29T07:23:07.729Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 26, "fields": {"group": 3, "user": 243, "message": "\u90d1\u9038\u51e1\n\u67f3\u6cfd\u6668", "create_time": "2017-04-29T09:29:06.661Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 27, "fields": {"group": 3, "user": 244, "message": "\u5434\u96e8\u79cb\n\u80e1\u6770\u6587\n\u7504\u8bda", "create_time": "2017-04-29T13:39:38.105Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 28, "fields": {"group": 3, "user": 250, "message": "\u5df4\u4fca\u5cf0\n\u8096\u6e1d\n\u5434\u5195", "create_time": "2017-04-30T12:15:25.638Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 29, "fields": {"group": 3, "user": 251, "message": "\u4e8e\u5353\u5982\n\u6b66\u745e\u6893\n\u5eb7\u7389\u7af9", "create_time": "2017-04-30T12:32:49.855Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 30, "fields": {"group": 3, "user": 253, "message": "\u674e\u627f\u777f\n\u5f20\u5409\u6797\n\u9676\u6c5f\u5cf0", "create_time": "2017-04-30T16:35:10.322Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 31, "fields": {"group": 4, "user": 209, "message": "hh", "create_time": "2017-05-01T07:35:03.860Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 32, "fields": {"group": 3, "user": 256, "message": "\u8bb8\u680b\u4f1f\n\u9c81\u60df\u6dfc", "create_time": "2017-05-01T09:09:28.058Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 33, "fields": {"group": 3, "user": 258, "message": "\u5218\u946b\u54f2\n\u90ed\u99a5\u4f69\n\u738b\u4f73\u96ef", "create_time": "2017-05-01T14:11:59.426Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 34, "fields": {"group": 3, "user": 268, "message": "\u961f\u54581\uff1a\u59dc\u6da6\u7693\n\u961f\u54582\uff1a\u5f90\u7acb\u5f3a\n\u961f\u54583\uff1a\u7fc1\u723d", "create_time": "2017-05-03T01:30:33.574Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 35, "fields": {"group": 3, "user": 270, "message": "\u9648\u9526\u71ca\n\u5434\u5fb7\u6210\n\u8d75\u7532", "create_time": "2017-05-03T08:08:30.416Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 36, "fields": {"group": 3, "user": 273, "message": "\u6b27\u9e4f\n\u7530\u53cb\u4e3d", "create_time": "2017-05-03T11:25:07.571Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 37, "fields": {"group": 3, "user": 274, "message": "\u5355\u5bcc\u839b\n\u9648\u6167\u806a\n\u9ad8\u56fd\u5f6c", "create_time": "2017-05-03T11:49:14.941Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 38, "fields": {"group": 3, "user": 275, "message": "\u9648\u6587\u677e\n\u675c\u9e4f\u7a0b\n\u9648\u9038\u98de", "create_time": "2017-05-03T12:24:43.354Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 39, "fields": {"group": 3, "user": 277, "message": "\u5e9e\u59dd\u96ef\n\u7f57\u5a77\u5a77\n\u5f20\u73cd\u831c", "create_time": "2017-05-03T12:32:58.477Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 40, "fields": {"group": 3, "user": 278, "message": "\u5415\u5143\u5eb6\n\u53f6\u6b63\u8302\n\u5218\u6625\u9633", "create_time": "2017-05-03T13:39:31.518Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 41, "fields": {"group": 3, "user": 281, "message": "\u9a6c\u5578\u5929", "create_time": "2017-05-04T04:17:36.173Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 42, "fields": {"group": 3, "user": 284, "message": "\u5218\u4e00\u7433\n\u5218\u6b63\u7426\n\u4e54\u9732", "create_time": "2017-05-04T10:05:39.826Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 43, "fields": {"group": 3, "user": 286, "message": "\u53f6\u6d69\u7ef4\n\u4faf\u5ddd\u6c5f\n\u7126\u4e3d\u9999", "create_time": "2017-05-04T10:06:11.694Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 44, "fields": {"group": 3, "user": 288, "message": "\u8d75\u4e50\n\u5360\u653e\n\u5f20\u6dde\u690d", "create_time": "2017-05-04T11:46:30.919Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 45, "fields": {"group": 3, "user": 266, "message": "\u4e8e\u53ef\u6c57\n\u6768\u9756\u5eb7 2016115448\n\u961f\u54583:\u6ca1", "create_time": "2017-05-04T13:13:31.900Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 46, "fields": {"group": 3, "user": 290, "message": "\u9ec4\u5065\u683c\n\u90ed\u601d\u6770\n\u5ed6\u6d69", "create_time": "2017-05-04T15:24:20.781Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 47, "fields": {"group": 3, "user": 292, "message": "\u738b\u9646\u660e", "create_time": "2017-05-05T08:47:02.840Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 48, "fields": {"group": 3, "user": 293, "message": "\u5510\u5a67\u5c27\n\u5468\u7426", "create_time": "2017-05-05T09:10:44.386Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 49, "fields": {"group": 3, "user": 295, "message": "\u674e\u4ece\u6ea2\n\u90ed\u6d0b", "create_time": "2017-05-05T10:43:11.574Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 50, "fields": {"group": 3, "user": 296, "message": "\u5b66\u53f7:2016112362\u59d3\u540d:\u8d75\u5efa\u5353", "create_time": "2017-05-05T11:35:47.263Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 51, "fields": {"group": 3, "user": 299, "message": "\u8bb8\u741b\n\u8096\u5cf0", "create_time": "2017-05-05T12:10:18.435Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 52, "fields": {"group": 3, "user": 301, "message": "\u5218\u6853\n\u5f90\u8087\u6587", "create_time": "2017-05-05T12:15:59.385Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 53, "fields": {"group": 3, "user": 302, "message": "\u5218\u96c5\u8c6a\n\u674e\u5b50\u741b\n\u5f20\u8dc3\u6881", "create_time": "2017-05-05T12:21:13.353Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 54, "fields": {"group": 3, "user": 306, "message": "\u5b8b\u5146\n\u59da\u502a\u7acb\n\u8096\u7eb5", "create_time": "2017-05-05T12:27:58.629Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 55, "fields": {"group": 3, "user": 308, "message": "\u9ec4\u4e4b\u79cb\n\u590f\u5609\u4f1f\n\u5b59\u6d9b", "create_time": "2017-05-05T12:34:31.498Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 56, "fields": {"group": 3, "user": 310, "message": "\u5f20\u6653\u4f1f\n\u4e07\u5929\u4e49\n\u9e4f\u4eae\u4eae", "create_time": "2017-05-05T12:37:12.780Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 57, "fields": {"group": 3, "user": 86, "message": "\u661f\u53f7\u8650\u573a", "create_time": "2017-05-05T12:37:44.545Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 58, "fields": {"group": 3, "user": 311, "message": "\u4e01\u6587\u7426\n\u97e9\u5b81\n\u8c2d\u822a", "create_time": "2017-05-05T12:37:54.165Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 59, "fields": {"group": 3, "user": 312, "message": "\u738b\u96ea\u96ea\n\u674e\u9e4f\n\u7a0b\u8d24\u5175", "create_time": "2017-05-05T12:40:46.455Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 60, "fields": {"group": 3, "user": 283, "message": "\u9ec4\u94ee\n\u4e25\u6d77\u5eb7\n\u5218\u81f4\u8fdc", "create_time": "2017-05-05T12:42:02.823Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 61, "fields": {"group": 2, "user": 86, "message": "\u5973\u88c5\u7533\u8bf7", "create_time": "2017-05-05T12:42:36.984Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 62, "fields": {"group": 2, "user": 5, "message": "\u542c\u8bf4\u961f\u957f\u8981\u5973\u88c5\uff1f", "create_time": "2017-05-05T12:45:42.738Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 63, "fields": {"group": 2, "user": 16, "message": "\u60f3\u770b\u5973\u88c5zsy", "create_time": "2017-05-05T12:48:22.688Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 64, "fields": {"group": 3, "user": 314, "message": "\u5f20\u672c\u8d35\n\u9ec4\u5723\u51ef", "create_time": "2017-05-05T12:53:16.684Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 65, "fields": {"group": 3, "user": 309, "message": "\u6b27\u9633\u5b81\u851a\n\u5468\u96d5\n\u4ee4\u96f2\u5f3a", "create_time": "2017-05-05T12:55:34.221Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 66, "fields": {"group": 3, "user": 316, "message": "\u9648\u6631\u748b\n\u5218\u886c\u6e05\n\u6881\u61ff", "create_time": "2017-05-05T12:56:20.220Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 67, "fields": {"group": 2, "user": 9, "message": "a\u2006a\u2006a\u2006a\u2006a", "create_time": "2017-05-05T12:58:04.811Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 68, "fields": {"group": 3, "user": 313, "message": "\u5f20\u6839\u9f50", "create_time": "2017-05-05T13:00:49.239Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 69, "fields": {"group": 3, "user": 319, "message": "\u9648\u540d\u541b\n\u6234\u8d8a\n\u5f90\u8fea\u7f18", "create_time": "2017-05-05T13:19:36.446Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 70, "fields": {"group": 3, "user": 321, "message": "\u5468\u5b50\u52b2\n\u6b66\u68a6\u6770\n\u4e25\u5609\u7487", "create_time": "2017-05-05T13:22:07.527Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 71, "fields": {"group": 2, "user": 88, "message": "\u738b\u6797 2015110098", "create_time": "2017-05-05T13:24:25.798Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 72, "fields": {"group": 3, "user": 324, "message": "\u738b\u7545\u946b", "create_time": "2017-05-05T13:26:49.696Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 73, "fields": {"group": 2, "user": 8, "message": "shi wo,wo jiao zhang shunyu", "create_time": "2017-05-05T13:33:40.114Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 74, "fields": {"group": 3, "user": 325, "message": "\u674e\u5c55\u9e4f\n\u738b\u6c38\u826f\n\u5218\u5146\u5e74", "create_time": "2017-05-05T13:34:31.098Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 75, "fields": {"group": 3, "user": 327, "message": "\u961f\u54581\u59dc\u9547\u4e1c\n\u961f\u54582\u90b9\u8363\u8a89\n\u961f\u54583\u5f20\u6839\u9f50", "create_time": "2017-05-05T13:40:06.108Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 76, "fields": {"group": 3, "user": 296, "message": "2017_team_2016112362", "create_time": "2017-05-05T13:40:14.512Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 77, "fields": {"group": 3, "user": 327, "message": "\u961f\u54581\u59dc\u9547\u4e1c\n\u961f\u54582\u90b9\u8363\u8a89\n\u961f\u54583\u5f20\u6839\u9f50", "create_time": "2017-05-05T13:40:26.568Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 78, "fields": {"group": 2, "user": 328, "message": "\u6881\u5c9a\u5ce5", "create_time": "2017-05-05T13:48:28.369Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 79, "fields": {"group": 3, "user": 329, "message": "\u9676\u9704\n\u5218\u5cf0\n\u6234\u4e00\u6d69", "create_time": "2017-05-05T15:16:03.769Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 80, "fields": {"group": 3, "user": 230, "message": "\u5f20\u536b\n\u738b\u4f73\u4f73\n\u5362\u7ea2\u971e", "create_time": "2017-05-05T15:16:57.014Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 81, "fields": {"group": 2, "user": 14, "message": "\u5f20\u821c\u5b87", "create_time": "2017-05-06T01:16:28.745Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 82, "fields": {"group": 3, "user": 333, "message": "\u4efb\u94b0\n\u4efb\u946b\n\u8c0c\u6c82\u9633", "create_time": "2017-05-06T01:19:35.482Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 83, "fields": {"group": 3, "user": 335, "message": "\u8463\u821c\u534e\n\u80e1\u6653\u521a\n\u7f57\u7518", "create_time": "2017-05-06T01:33:04.510Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 84, "fields": {"group": 3, "user": 337, "message": "\u5b59\u53cc\u6210\n\u738b\u5e7f\u5174\n\u9ec4\u94b2\u6797", "create_time": "2017-05-06T02:43:45.872Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 85, "fields": {"group": 3, "user": 338, "message": "\u90ed\u76f8\u6587\n\u7ae5\u9e23\n\u51af\u4e00\u9e23", "create_time": "2017-05-06T02:46:41.244Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 86, "fields": {"group": 3, "user": 343, "message": "\u5f6d\u5b50\u901a\n\u90d1\u601d\u5b87\n\u6768\u65ed", "create_time": "2017-05-06T06:02:37.618Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 87, "fields": {"group": 3, "user": 347, "message": "\u66f9\u8861\n\u8d39\u715c\u6668\n\u83ab\u674f\u6980", "create_time": "2017-05-06T12:49:16.666Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 88, "fields": {"group": 3, "user": 351, "message": "\u961f\u54581\uff1a\u7f57\u8bd7\u827a\n\u961f\u54582\uff1a\u848b\u53cc\u5a77", "create_time": "2017-05-06T13:30:31.245Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 89, "fields": {"group": 3, "user": 350, "message": "\u738b\u5609\u8c6a\n\u66f9\u8d8a\n\u5218\u946b", "create_time": "2017-05-06T13:52:31.591Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 90, "fields": {"group": 3, "user": 352, "message": "\u5468\u5e05", "create_time": "2017-05-06T13:55:34.106Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 91, "fields": {"group": 3, "user": 353, "message": "\u6b27\u535a\u96c5\n\u5b8b\u817e\u817e\n\u5218\u5bb9", "create_time": "2017-05-06T14:32:47.647Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 92, "fields": {"group": 3, "user": 354, "message": "\u5170\u6f9c\n\u7518\u4f73\u96e8\n\u4f55\u6e05\u99a8", "create_time": "2017-05-06T14:38:01.209Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 93, "fields": {"group": 3, "user": 357, "message": "2017_team_2016112420\n\u738b\u6d9b\n\u5468\u8fd0\n\u738b\u7acb\u743c", "create_time": "2017-05-06T15:30:45.468Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 94, "fields": {"group": 3, "user": 359, "message": "\u666f\u4e00\u771f\n\u5b8b\u601d\u96e8\n\u5218\u6c5f", "create_time": "2017-05-06T18:03:47.675Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 95, "fields": {"group": 3, "user": 363, "message": "\u8bb8\u660e\u534e\n\u9ec4\u7a0b\n\u9648\u5468\u64ce", "create_time": "2017-05-07T01:16:09.135Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 96, "fields": {"group": 3, "user": 369, "message": "\u6768\u6d69\n\u738b\u73a5\u7487\n\u5468\u4e1c\u534e", "create_time": "2017-05-07T02:50:39.243Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 97, "fields": {"group": 3, "user": 372, "message": "\u5b8b\u53cb\u7965\n\u66fe\u6d2a\u54f2\n\u5b59\u6e90\u6d41", "create_time": "2017-05-07T03:11:06.963Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 98, "fields": {"group": 3, "user": 374, "message": "\u5f20\u82e5\u6668\n\u8463\u6cfd\u65b0\n\u6c88\u6625\u9633", "create_time": "2017-05-07T03:16:18.645Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 99, "fields": {"group": 3, "user": 375, "message": "\u5f20\u82e5\u6668\n\u8463\u6cfd\u65b0\n\u6c88\u6625\u9633", "create_time": "2017-05-07T03:21:37.616Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 100, "fields": {"group": 3, "user": 267, "message": "2017_\u4ec0\u4e48\u961f_2015110068\n\u5ed6\u96c4\n\u6731\u653f\n\u5f6d\u65b9\u4e91", "create_time": "2017-05-07T03:50:50.134Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 101, "fields": {"group": 3, "user": 237, "message": "\u5510\u8861\u7487\n\u845b\u60a6\n\u4e1b\u4e3d\u9759", "create_time": "2017-05-07T03:52:17.918Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 102, "fields": {"group": 3, "user": 2, "message": "1", "create_time": "2017-05-07T03:59:55.513Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 103, "fields": {"group": 3, "user": 326, "message": "\u961f\u54581 \u674e\u5b50\u6770\n\u961f\u54582 \u5218\u660e\u6853 \n\u961f\u54583 \u738b\u6587\u6770", "create_time": "2017-05-07T04:01:56.894Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 104, "fields": {"group": 3, "user": 364, "message": "2017_team_2015112266", "create_time": "2017-05-07T04:03:04.888Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 105, "fields": {"group": 2, "user": 376, "message": "\u4ea4\u5927\u53c2\u8d5b\u961f\u5458", "create_time": "2017-05-07T04:04:38.309Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 106, "fields": {"group": 3, "user": 364, "message": "\u9ece\u5bb6\u660a\n\u8c2d\u6893\u7426\n\u53f2\u6668\u9633", "create_time": "2017-05-07T04:07:17.129Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 107, "fields": {"group": 3, "user": 380, "message": "\u96f7\u5b87", "create_time": "2017-05-07T04:10:41.083Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 108, "fields": {"group": 3, "user": 267, "message": "2017_\u4ec0\u4e48\u961f_2015110068", "create_time": "2017-05-07T04:10:44.690Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 109, "fields": {"group": 3, "user": 381, "message": "\u9ece\u5bb6\u660a\n\u8c2d\u6893\u7426\n\u53f2\u6668\u9633", "create_time": "2017-05-07T04:12:23.204Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 110, "fields": {"group": 3, "user": 383, "message": "\u5ed6\u96c4\n\u6731\u653f\n\u5f6d\u65b9\u4e91", "create_time": "2017-05-07T04:19:11.218Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 111, "fields": {"group": 3, "user": 383, "message": "\u5ed6\u96c4\n\u6731\u653f\n\u5f6d\u65b9\u4e91", "create_time": "2017-05-07T04:28:43.268Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 112, "fields": {"group": 3, "user": 387, "message": "\u95eb\u6d2a\u6d0b\n\u9ec4\u8d85\n\u5218\u514b\u5d07", "create_time": "2017-05-07T04:34:05.977Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 113, "fields": {"group": 3, "user": 383, "message": "\u5ed6\u96c4\n\u6731\u653f\n\u5f6d\u65b9\u4e91", "create_time": "2017-05-07T04:35:55.977Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 114, "fields": {"group": 3, "user": 387, "message": "\u95eb\u6d2a\u6d0b\n\u9ec4\u8d85\n\u5218\u514b\u5d07", "create_time": "2017-05-07T04:36:10.510Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 115, "fields": {"group": 3, "user": 389, "message": "\u5ed6\u96c4\n\u6731\u653f\n\u5f6d\u65b9\u4e91", "create_time": "2017-05-07T04:45:56.322Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 116, "fields": {"group": 3, "user": 261, "message": "\u7533\u8bf7\u52a0\u5165", "create_time": "2017-05-07T05:06:34.255Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 117, "fields": {"group": 3, "user": 386, "message": "\u6768\u654f\u677e\n\u8096\u5e73\n\u6768\u6d77\u9e4f", "create_time": "2017-05-07T06:30:41.829Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 118, "fields": {"group": 3, "user": 392, "message": "\u9093\u5b50\u9038\n\u90d1\u5b89\u742a\n\u90ed\u695a\u9065", "create_time": "2017-05-07T06:57:04.172Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 119, "fields": {"group": 3, "user": 399, "message": "2017_team_2015111819", "create_time": "2017-05-08T15:50:29.322Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 120, "fields": {"group": 4, "user": 1, "message": "123", "create_time": "2017-05-13T05:17:45.681Z", "status": true, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 121, "fields": {"group": 4, "user": 1, "message": "123", "create_time": "2017-05-13T05:17:54.283Z", "status": true, "accepted": true}}, {"model": "group.joingrouprequest", "pk": 122, "fields": {"group": 4, "user": 338, "message": "27\u7ec4\n\u90ed\u76f8\u6587\n\u51af\u4e00\u94ed\n\u7ae5\u9e23", "create_time": "2017-05-14T03:59:18.469Z", "status": false, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 123, "fields": {"group": 4, "user": 288, "message": "31\u7ec4", "create_time": "2017-05-14T04:00:04.636Z", "status": false, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 124, "fields": {"group": 4, "user": 326, "message": "l", "create_time": "2017-05-14T04:01:28.299Z", "status": false, "accepted": false}}, {"model": "group.joingrouprequest", "pk": 125, "fields": {"group": 4, "user": 239, "message": "123", "create_time": "2017-05-14T04:18:26.089Z", "status": false, "accepted": false}}, {"model": "problem.problemtag", "pk": 1, "fields": {"name": "\u6a21\u62df"}}, {"model": "problem.problemtag", "pk": 2, "fields": {"name": "\u4e8c\u5206"}}, {"model": "problem.problemtag", "pk": 3, "fields": {"name": "\u641c\u7d22"}}, {"model": "problem.problemtag", "pk": 4, "fields": {"name": "\u6570\u636e\u7ed3\u6784"}}, {"model": "problem.problemtag", "pk": 5, "fields": {"name": "\u7ebf\u6bb5\u6811"}}, {"model": "problem.problemtag", "pk": 6, "fields": {"name": "\u8d2a\u5fc3"}}, {"model": "problem.problemtag", "pk": 7, "fields": {"name": "tag"}}, {"model": "problem.problemtag", "pk": 8, "fields": {"name": "\u6570\u5b66"}}, {"model": "problem.problemtag", "pk": 9, "fields": {"name": "\u52a8\u6001\u89c4\u5212"}}, {"model": "problem.problemtag", "pk": 10, "fields": {"name": "\u5176\u4ed6"}}, {"model": "problem.problemtag", "pk": 11, "fields": {"name": "\u66b4\u529b"}}, {"model": "problem.problemtag", "pk": 12, "fields": {"name": "\u4f4d\u8fd0\u7b97"}}, {"model": "problem.problemtag", "pk": 13, "fields": {"name": "\u6784\u9020"}}, {"model": "problem.problemtag", "pk": 14, "fields": {"name": "brute force"}}, {"model": "problem.problemtag", "pk": 15, "fields": {"name": "two pointers"}}, {"model": "problem.problemtag", "pk": 16, "fields": {"name": "bitmasks"}}, {"model": "problem.problemtag", "pk": 17, "fields": {"name": "dp"}}, {"model": "problem.problemtag", "pk": 18, "fields": {"name": "tbd"}}, {"model": "problem.problemtag", "pk": 19, "fields": {"name": "string"}}, {"model": "problem.problemtag", "pk": 20, "fields": {"name": "data structure"}}, {"model": "problem.problemtag", "pk": 21, "fields": {"name": "math"}}, {"model": "problem.problemtag", "pk": 22, "fields": {"name": "dfs"}}, {"model": "problem.problemtag", "pk": 23, "fields": {"name": "greedy"}}, {"model": "problem.problemtag", "pk": 24, "fields": {"name": "bfs"}}, {"model": "problem.problemtag", "pk": 25, "fields": {"name": "dsu"}}, {"model": "problem.problemtag", "pk": 26, "fields": {"name": "graphs"}}, {"model": "problem.problem", "pk": 1000, "fields": {"title": "A+B Problem", "description": "Calculate a + b.", "input_description": "Two integers a, b (0 <= a, b <= 10).", "output_description": "Output a + b.", "samples": "[{\"input\": \"1 2\", \"output\": \"3\"}]", "test_case_id": "1000", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 6181, "total_accepted_number": 2849, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1001, "fields": {"title": "Prime Cuts", "description": "<p>A prime number is a counting number (1, 2, 3, ...) that is evenly divisible only by 1 and itself. In this problem you are to write a program that will cut some number of prime numbers from the list of prime numbers between (and including) 1 and N. Your program will read in a number N; determine the list of prime numbers between 1 and N; and print the C*2 prime numbers from the center of the list if there are an even number of prime numbers or (C*2)-1 prime numbers from the center of the list if there are an odd number of prime numbers in the list.</p>", "input_description": "Each input set will be on a line by itself and will consist of 2 numbers. The first number (1 <= N <= 1000) is the maximum number in the complete list of prime numbers between 1 and N. The second number (1 <= C <= N) defines the C*2 prime numbers to be printed from the center of the list if the length of the list is even; or the (C*2)-1 numbers to be printed from the center of the list if the length of the list is odd.", "output_description": "For each input set, you should print the number N beginning in column 1 followed by a space, then by the number C, then by a colon (:), and then by the center numbers from the list of prime numbers as defined above. If the size of the center list exceeds the limits of the list of prime numbers between 1 and N, the list of prime numbers between 1 and N (inclusive) should be printed. Each number from the center of the list should be preceded by exactly one blank. Each line of output should be followed by a blank line. Hence, your output should follow the exact format shown in the sample output.", "samples": "[{\"input\": \"21 2\\n18 2\\n18 18\\n100 7\\n\", \"output\": \"21 2: 5 7 11\\n\\n18 2: 3 5 7 11\\n\\n18 18: 1 2 3 5 7 11 13 17\\n\\n100 7: 13 17 19 23 29 31 37 41 43 47 53 59 61 67\\n\\n\\n\"}]", "test_case_id": "04d766789f589a8d76493f9d36ebc471", "hint": "<p>\u8bf7\u4ed4\u7ec6\u9605\u8bfb\u8f93\u51fa\u683c\u5f0f\u8981\u6c42</p>", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-05-05T14:40:37.460Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 3676, "total_accepted_number": 629, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 1002, "fields": {"title": "Numerically Speaking", "description": "A developer of crossword puzzles (and other similar word games) has decided to develop a mapping between every possible word with from one to twenty characters and unique integers. The mapping is very simple, with the ordering being done first by the length of the word, and then alphabetically. Part of the list is shown below. <p></p>   a          1<p></p>   b          2<p></p>   ...<p></p>   z          26<p></p>   aa         27<p></p>   ab         28<p></p>   ...<p></p>   snowfall   157,118,051,752<p></p>   ...<p></p>Your job in this problem is to develop a program which can translate, bidirectionally, between the unique word numbers and the corresponding words.<p></p>", "input_description": "Input to the program is a list of words and numbers, one per line starting in column one, followed by a line containing a single asterisk in column one. A number will consist only of decimal digits (0 through 9) followed immediately by the end of line (that is, there will be no commas in input numbers). A word will consist of between one and twenty lowercase alphabetic characters (a through z).", "output_description": "The output is to contain a single line for each word or number in the input data. This line is to contain the word starting in column one, followed by an appropriate number of blanks, and the corresponding word number starting in column 23. Word numbers that have more than three digits must be separated by commas at thousands, millions, and so forth.", "samples": "[{\"input\": \"29697684282993\\ntranscendental\\n28011622636823854456520\\ncomputationally\\nzzzzzzzzzzzzzzzzzzzz\\n*\\n\", \"output\": \"elementary            29,697,684,282,993\\ntranscendental        51,346,529,199,396,181,750\\nprestidigitation      28,011,622,636,823,854,456,520\\ncomputationally       232,049,592,627,851,629,097\\nzzzzzzzzzzzzzzzzzzzz  20,725,274,851,017,785,518,433,805,270\\n\\n\"}]", "test_case_id": "1002", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 328, "total_accepted_number": 133, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1004, "fields": {"title": "Excuses, Excuses!", "description": "Judge Ito is having a problem with people subpoenaed for jury duty giving rather lame excuses in order to avoid serving. In order to reduce the amount of time required listening to goofy excuses, Judge Ito has asked that you write a program that will search for a list of keywords in a list of excuses identifying lame excuses. Keywords can be matched in an excuse regardless of case.", "input_description": "Input to your program will consist of multiple sets of data. \nLine 1 of each set will contain exactly two integers. The first number (1 <= K <= 20) defines the number of keywords to be used in the search. The second number (1 <= E <= 20) defines the number of excuses in the set to be searched.\n\nLines 2 through K+1 each contain exactly one keyword.\n\nLines K+2 through K+1+E each contain exactly one excuse.\n\nAll keywords in the keyword list will contain only contiguous lower case alphabetic characters of length L (1 <= L <= 20) and will occupy columns 1 through L in the input line.\n\nAll excuses can contain any upper or lower case alphanumeric character, a space, or any of the following punctuation marks [SPMamp\".,!?&] not including the square brackets and will not exceed 70 characters in length.\n\nExcuses will contain at least 1 non-space character. \n", "output_description": "For each input set, you are to print the worst excuse(s) from the list. \nThe worst excuse(s) is/are defined as the excuse(s) which contains the largest number of incidences of keywords.\n\nIf a keyword occurs more than once in an excuse, each occurrence is considered a separate incidence.\n\nA keyword ``occurs\" in an excuse if and only if it exists in the string in contiguous form and is delimited by the beginning or end of the line or any non-alphabetic character or a space. \n\nFor each set of input, you are to print a single line with the number of the set immediately after the string ``Excuse Set #\". (See the Sample Output). The following line(s) is/are to contain the worst excuse(s) one per line exactly as read in. If there is more than one worst excuse, you may print them in the order listed in input.\nAfter each set of output, you should print a blank line. \n", "samples": "[{\"input\": \"5 3\\ndog\\nate\\nhomework\\ncanary\\ndied\\nMy dog ate my homework.\\nCan you believe my dog died after eating my canary... AND MY HOMEWORK?\\nThis excuse is so good that it contain 0 keywords.\\n6 5\\nsuperhighway\\ncrazy\\nthermonuclear\\nbedroom\\nwar\\nbuilding\\nI am having a superhighway built in my bedroom.\\nI am actually crazy.\\n1234567890.....,,,,,0987654321?????!!!!!!\\nThere was a thermonuclear war!\\nI ate my dog, my canary, and my homework ... note outdated keywords?\\n\", \"output\": \"Excuse Set #1\\nCan you believe my dog died after eating my canary... AND MY HOMEWORK?\\n\\nExcuse Set #2\\nI am having a superhighway built in my bedroom.\\nThere was a thermonuclear war!\\n\\n\"}]", "test_case_id": "1004", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 305, "total_accepted_number": 88, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1005, "fields": {"title": "Last Digits", "description": "Exponentiation of one integer by another often produces very large results. In this problem, we will compute a function based on repeated exponentiation, but output only the last n digits of the result. Doing this efficiently requires careful thought about how to avoid computing the full answer. <p></p><p></p>Given integers b, n, and i, we define the function f(x) recursively by f(x) = b^f(x-1) if x &gt; 0, and f(0)=1. Your job is to efficiently compute the last n decimal digits of f(i). <p></p><p></p>", "input_description": "The input consists of a number of test cases. Each test case starts with the integer b (1 <= b <= 100) called the\nbase. On the next line is the integer i (1 <= i <= 100) called the iteration count. And finally, the last line\ncontains the number n (1 <= n <= 7), which is the number of decimal digits to output. The input is terminated\nwhen b = 0.", "output_description": "For each test case, print on one line the last n digits of f(i) for the base b specified. If the result has fewer than\nn digits, pad the result with zeroes on the left so that there are exactly n digits.", "samples": "[{\"input\": \"2\\n4\\n7\\n10\\n10\\n6\\n3\\n10\\n7\\n0\", \"output\": \"0065536\\n000000\\n4195387\"}]", "test_case_id": "1005", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 116, "total_accepted_number": 49, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1006, "fields": {"title": "Smallest Difference", "description": "Given a number of distinct decimal digits, you can form one integer by choosing a non&#8722;empty subset of these digits and writing them in some order. The remaining digits can be written down in some order to form a second integer. Unless the resulting integer is 0, the integer may not start with the digit 0.<p></p><p></p>For example, if you are given the digits 0, 1, 2, 4, 6 and 7, you can write the pair of integers 10 and 2467. Of course, there are many ways to form such pairs of integers: 210 and 764, 204 and 176, etc. The absolute value of the difference between the integers in the last pair is 28, and it turns out that no other pair formed by the rules above can achieve a smaller difference.", "input_description": "The first line of input contains the number of cases to follow. For each case, there is one line of input containing at least two but no more than 10 decimal digits. (The decimal digits are 0, 1, ..., 9.) No digit appears more than once in one line of the input. The digits will appear in increasing order, separated by exactly one blank space.", "output_description": "For each test case, write on a single line the smallest absolute difference of two integers that can be written from the given digits as described by the rules above.", "samples": "[{\"input\": \"1\\n0 1 2 4 6 7\\n\", \"output\": \"28\\n\"}]", "test_case_id": "1006", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 339, "total_accepted_number": 194, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1007, "fields": {"title": "Faulty Odometer", "description": "You are given a car odometer which displays the miles traveled as an integer. The odometer has a defect,<p></p>however: it proceeds from the digit 3 to the digit 5, always skipping over the digit 4. This defect shows up in<p></p>all positions (the one&#039;s, the ten&#039;s, the hundred&#039;s, etc.). For example, if the odometer displays 15339 and the car<p></p>travels one mile, odometer reading changes to 15350 (instead of 15340).", "input_description": "Each line of input contains a positive integer in the range 1..999999999 which represents an odometer\nreading. (Leading zeros will not appear in the input.) The end of input is indicated by a line containing a\nsingle 0. You may assume that no odometer reading will contain the digit 4.", "output_description": "Each line of input will produce exactly one line of output, which will contain: the odometer reading from the\ninput, a colon, one blank space, and the actual number of miles traveled by the car.", "samples": "[{\"input\": \"13\\n15\\n2003\\n2005\\n239\\n250\\n1399\\n1500\\n999999\\n0\\n\", \"output\": \"13: 12\\n15: 13\\n2003: 1461\\n2005: 1462\\n239: 197\\n250: 198\\n1399: 1052\\n1500: 1053\\n999999: 531440\\n\"}]", "test_case_id": "1007", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 484, "total_accepted_number": 255, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1008, "fields": {"title": "Open and Close", "description": "Morphological operations are tools that are used for extracting image components to represent and describe <br />region shapes. Two common morphological operations are open and close. Before we define these operations, <br />we first have to define how images are represented. <br />Given a binary image A with M rows and N columns, we can represent A as a set of the coordinates (r, c) (1 <br />&lt;= r &lt;= M, 1 &lt;= c &lt;= N) such that the pixel at the specified coordinates is 1. The coordinates of the top&#8722;left <br />corner are (1, 1). We are also given a binary image B (called the structuring element) with 2S+1 rows and <br />columns. The structuring element can be represented as a set as before, except that (&#8722;S,&#8722;S) are the <br />coordinates of the pixel at the top&#8722;left corner. <br />Two operations important in morphological image processing are dilation and erosion. Dilation of an image A <br />by the structuring element B is defined by: <br />A ^ B = { a + b | a in A, b in B } intersect Z <br />where the addition of coordinates is defined componentwise, and Z is the set of coordinates (i,j) with 1 &lt;= i <br />&lt;= M and 1 &lt;= j &lt;= N. Similarly, erosion of A by B is defined by: <br />A v B = { w | w + b in A for every b in B } <br />With these two operations defined, the opening of A by B is defined by <br />A o B = (A v B) ^ B <br />and the closing of A by B is defined by <br />A . B = (A ^ B) v B <br />Roughly speaking, the opening operation is used to remove small details while preserving the overall shape. <br />The closing operation is used to fill in gaps while preserving the overall shape.", "input_description": "The input consists of a number of cases. Each case starts with a line containing the integers M, N, and S\nseparated by spaces (10 <= M, N <= 256, 1 <= S <= 4). The next M lines contain the rows of the image A\nspecified by N characters that are '.' (0) or '*' (1). The next 2S+1 lines specify the structuring element B in a\nsimilar manner. The input is terminated by M = N = S = 0.", "output_description": "For each case, print the case number followed by a blank line. Then display the result of A o B followed by a\nblank line, followed by the result of A . B. The format of the resulting images is the same as those of the\ninput images. Separate the output for different cases by a line consisting of 75 equal signs (=).", "samples": "[{\"input\": \"10 12 1\\n............\\n..*.........\\n.***...***..\\n.***...***..\\n.*********..\\n.**********.\\n.*********..\\n.***...*.*..\\n............\\n............\\n***\\n***\\n***\\n10 12 1\\n............\\n..*.........\\n.***...***..\\n.***...***..\\n.*********..\\n.**********.\\n.*********..\\n.***...*.*..\\n............\\n............\\n.*.\\n***\\n.*.\\n0 0 0\\n\", \"output\": \"Case 1\\n\\n............\\n............\\n.***...***..\\n.***...***..\\n.*********..\\n.*********..\\n.*********..\\n.***........\\n............\\n............\\n............\\n..*.........\\n.***...***..\\n.***...***..\\n.*********..\\n.**********.\\n.*********..\\n.***...***..\\n............\\n............\\n===========================================================================\\nCase 2\\n\\n............\\n..*.........\\n.***....*...\\n.***...***..\\n.*********..\\n.**********.\\n.*********..\\n..**...*....\\n............\\n............\\n\\n............\\n..*.........\\n.***...***..\\n.****.****..\\n.*********..\\n.**********.\\n.*********..\\n.***...*.*..\\n............\\n............\\n\"}]", "test_case_id": "1008", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 21, "total_accepted_number": 13, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1009, "fields": {"title": "Paint Mix", "description": "You are given two large pails. One of them (known as the black pail) contains B gallons of black paint. The<p></p>other one (known as the white pail) contains W gallons of white paint. You will go through a number of<p></p>iterations of pouring paint first from the black pail into the white pail, then from the white pail into the black<p></p>pail. More specifically, in each iteration you first pour C cups of paint from the black pail into the white pail<p></p>(and thoroughly mix the paint in the white pail), then pour C cups of paint from the white pail back into the<p></p>black pail (and thoroughly mix the paint in the black pail). B, W, and C are positive integers; each of B and W<p></p>is less than or equal to 50, and C &lt; 16 * B (recall that 1 gallon equals 16 cups). The white pail&#039;s capacity is at<p></p>least B+W.<p></p>As you perform many successive iterations, the ratio of black paint to white paint in each pail will approach<p></p>B/W. Although these ratios will never actually be equal to B/W one can ask: how many iterations are needed to<p></p>make sure that the black&#8722;to&#8722;white paint ratio in each of the two pails differs from B/W by less than a certain<p></p>tolerance. We define the tolerance to be 0.00001.", "input_description": "The input consists of a number of lines. Each line contains input for one instance of the problem: three\npositive integers representing the values for B, W, and C, as described above. The input is terminated with a\nline where B = W = C = 0.", "output_description": "Print one line of output for each instance. Each line of output will contain one positive integer: the smallest\nnumber of iterations required such that the black&#8722;to&#8722;white paint ratio in each of the two pails differs from\nB/W by less than the tolerance value.", "samples": "[{\"input\": \"2 1 1\\n2 1 4\\n3 20 7\\n0 0 0\\n\", \"output\": \"145\\n38\\n66\\n\"}]", "test_case_id": "1009", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 251, "total_accepted_number": 154, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1010, "fields": {"title": "Random Walk", "description": "Random walks are used to model a wide range of phenomena, from Brownian motion to gambling. For<p></p>example, a gambler who bets on heads or tails on a coin toss wins or loses his bet each turn. The amount of<p></p>money the gambler has throughout the game is a random walk. Although the bets in each turn may be<p></p>different, it is easy to see that the gambler wins the maximum amount of money if he wins every turn.<p></p>Similarly, he loses the maximum amount if he loses every turn.<p></p>We consider the following two&#8722;dimensional variation of the random walk. We are given n two&#8722;dimensional<p></p>nonzero vectors vi = (xi, yi), no two of which are parallel. In step i, a coin is flipped. If it is heads, we move xi<p></p>meters in the x direction and yi meters in the y direction. If it is tails, we move &#8722;xi and &#8722;yi meters in the x and<p></p>y directions.<p></p>We are interested in computing the maximum distance we can be away from our starting point. This is easy in<p></p>one&#8722;dimension, but it is not so easy in the two&#8722;dimensional version.", "input_description": "The input consists of a number of test cases. Each test case starts with a line containing the integer n, which is\nat most 100. Each of the next n lines gives a pair of integers xi and yi specifying vi. The coordinates are less\nthan 1000 in magnitude. The end of input is specified by n = 0.", "output_description": "For each test case, print on a line the maximum distance we can be away from the starting point, in the format\nshown below. Output the answer to 3 decimal places.", "samples": "[{\"input\": \"3\\n1 1\\n0 1\\n&#8722;1 1\\n2\\n4 0\\n1 1\\n7\\n1 3\\n&#8722;2 &#8722;7\\n7 8\\n&#8722;2 9\\n&#8722;7 &#8722;3\\n4 &#8722;3\\n&#8722;2 &#8722;2\\n0\\n\", \"output\": \"Maximum distance = 3.000 meters.\\nMaximum distance = 5.099 meters.\\nMaximum distance = 37.336 meters.\\n\"}]", "test_case_id": "1010", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 273, "total_accepted_number": 169, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1011, "fields": {"title": "Suit Distribution", "description": "Bridge is a 4&#8722;player (two teams of two) card game with many complicated conventions that even experienced<p></p>players have difficulty keeping track of. Fortunately, we are not interested in these conventions for this<p></p>problem. In fact, it is not even important if you understand how to play the game.<p></p>What is important to know is that the way the cards are distributed among your two opponents often<p></p>determine whether you will be successful in your game. For example, suppose you and your partner hold 8<p></p>spades. The remaining 5 spades are held by your opponents (since there are 13 cards in each suit) and can be<p></p>distributed in the following ways: 0&#8722;5, 1&#8722;4, 2&#8722;3. Notice that a 0&#8722;5 &quot;split&quot; can be realized in two<p></p>ways&#8722;&#8722;&#8722;opponent 1 has no spade and opponent 2 has 5 spades, or vice versa.<p></p>Good bridge players know that the best line of play often depends on the distribution. Sometimes good<p></p>players can &quot;read their opponents&#039; cards&quot; and determine the distribution, but sometimes even good players<p></p>have to guess. In those cases, knowing the probability of the different distributions would be useful in making<p></p>an educated guess.<p></p>You can assume that the 52 cards in a deck are dealt out randomly to 4 players, so that every player has 13<p></p>cards, and that you know which 26 cards your team holds.", "input_description": "The input consists of a number of cases. Each case consists of two integers a, b (0 <= a, b <= 13, a + b <=\n13). The input is terminated by a = b = &#8722;1.", "output_description": "For each case, print the probability of a split of a+b cards so that one opponent has a cards and the other has b\ncards in the format as shown in the sample output. You may assume that the remaining cards in the suit are\nheld by you and your partner. Output the probabilities to 8 decimal places.", "samples": "[{\"input\": \"2 2\\n3 3\\n4 2\\n&#8722;1 &#8722;1\\n\", \"output\": \"2&#8722;2 split: 0.40695652\\n3&#8722;3 split: 0.35527950\\n4&#8722;2 split: 0.48447205\\n\"}]", "test_case_id": "1011", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 98, "total_accepted_number": 67, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1012, "fields": {"title": "Biker\u2019s Trip Odometer", "description": "Most bicycle speedometers work by using a Hall Effect sensor fastened to the front fork of the bicycle. A magnet isattached to one of the spokes on the front wheel so that it will line up with the Hall Effect switch once per revolutionof the wheel. The speedometer monitors the sensor to count wheel revolutions. If the diameter of the wheel isknown, the distance traveled can be easily be calculated if you know how many revolutions the wheel has made. Inaddition, if the time it takes to complete the revolutions is known, the average speed can also be calculated. For this problem, you will write a program to determine the total distance traveled (in miles) and the average speed(in Miles Per Hour) given the wheel diameter, the number of revolutions and the total time of the trip. You can assume that the front wheel never leaves the ground, and there is no slipping or skidding.", "input_description": "Input consists of multiple datasets, one per line, of the form:\ndiameter revolutions time\nThe diameter is expressed in inches as a floating point value. The revolutions is an integer value. The time is expressed in seconds as a floating point value. Input ends when the value of revolutions is 0 (zero).\n", "output_description": "For each data set, print:\nTrip #N: distance MPH\nOf course N should be replaced by the data set number, distance by the total distance in miles (accurate to 2 decimal places) and MPH by the speed in miles per hour (accurate to 2 decimal places). Your program should not generate any output for the ending case when revolutions is 0.\nConstants\nFor p use the value: 3.1415927.\nThere are 5280 feet in a mile.\nThere are 12 inches in a foot.\nThere are 60 minutes in an hour.\nThere are 60 seconds in a minute.\nThere are 201.168 meters in a furlong.\n", "samples": "[{\"input\": \"26 1000 5\\n27.25 873234 3000\\n26 0 1000\\n\", \"output\": \"Trip #1: 1.29 928.20\\nTrip #2: 1179.86 1415.84\\n\\n\"}]", "test_case_id": "1012", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 339, "total_accepted_number": 190, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1013, "fields": {"title": "Candy Sharing Game", "description": "A number of students sit in a circle facing their teacher in the center. Each student initially has an even number of pieces of candy. When the teacher blows a whistle, each student simultaneously gives half of his or her candy to the neighbor on the right. Any student, who ends up with an odd number of pieces of candy, is given another piece by the teacher. The game ends when all students have the same number of pieces of candy. Write a program which determines the number of times the teacher blows the whistle and the final number of pieces of candy for each student from the amount of candy each child starts with.", "input_description": "The input may describe more than one game. For each game, the input begins with the number N of students, followed by N (even) candy counts for the children counter-clockwise around the circle. The input ends with a student count of 0. Each input number is on a line by itself.", "output_description": "For each game, output the number of rounds of the game followed by the amount of candy each child ends up with, both on one line.", "samples": "[{\"input\": \"6\\n36\\n2\\n2\\n2\\n2\\n2\\n11\\n22\\n20\\n18\\n16\\n14\\n12\\n10\\n8\\n6\\n4\\n2\\n4\\n2\\n4\\n6\\n8\\n0\\n\", \"output\": \"15 14\\n17 22\\n4 8\\n\"}]", "test_case_id": "1013", "hint": "The game ends in a finite number of steps because:\\n1. The maximum candy count can never increase.\\n2. The minimum candy count can never decrease.\\n3. No one with more than the minimum amount will ever decrease to the minimum.\\n4. If the maximum and minimum candy count are not the same, at least one student with the minimum amount must have their count increase\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 543, "total_accepted_number": 231, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1014, "fields": {"title": "Peg Game", "description": "You are given a 7-by-7 board of holes. Some holes are filled with pegs, and some are not. You may jump a peg over an adjacent peg, as long as the hole the jumping peg lands in is unoccupied. The jumped peg is removed. Your goal is to leave the board with only one peg in it, and the peg must end up in the specified location. The board is specified as a 7-by-7 array of characters, with the following meanings:<p></p>x : this hole may never be occupied by a peg<p></p>e : this hole is initially empty<p></p>o : this hole is initially occupied by a peg<p></p>E : this hole is initially empty, and the last peg should end here<p></p>O : this hole is initially occupied, and the last peg should end here<p></p>For example, consider the following board:<p></p>x x e e e x x<p></p>x x o e e x x<p></p>e e o e e e e<p></p>e e o O e e e<p></p>e e e e e e e<p></p>x x e e e x x<p></p>x x e e e x x<p></p>You can see that there are initially 4 pegs in the board, and the last peg should end up in the middle of the board.<p></p>The winning sequence of moves is:<p></p>1. (4, 4) to (2, 4)<p></p>2. (3, 2) to (3, 4)<p></p>3. (2, 4) to (4, 4)<p></p>Where coordinates are given as (x, y).<p></p>", "input_description": "The first line of input is the number of datasets to follow. Each dataset should be processed the same.\nThe input for each dataset consists of 7 lines; each line consists of 7 characters from the set {x, e, o, E, O} with blanks between them. You are guaranteed that exactly one 'E' or 'O' will appear, and that two or more 'o' or 'O' will appear.\n", "output_description": "For each dataset, output a line containing the data set number. If a sequence of valid moves exists that leaves only one peg on the board, and leaves that peg in the desired location, print out the sequence of moves, as shown in the above example. If no sequence exists, print \u201cNo solution\". Leave a blank line between datasets.", "samples": "[{\"input\": \"2\\nx x e e e x x\\nx x o e e x x\\ne e o e e e e\\ne e o O e e e\\ne e e e e e e\\nx x e e e x x\\nx x e e e x x\\nx x e E e e e\\nx e e e e e e\\ne e e o o e e\\ne e e x e e e\\ne e e e e e e\\ne e e e e e e\\ne e e e e e e\\n\\n\", \"output\": \"Dataset 1:\\n1. (4, 4) to (2, 4)\\n2. (3, 2) to (3, 4)\\n3. (2, 4) to (4, 4)\\nDataset 2:\\nNo solution.\\n\"}]", "test_case_id": "1014", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 24, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1015, "fields": {"title": "Happy 2004", "description": "   Consider a positive integer X,and let S be the sum of all positive integer divisors of 2004^X. Your job is to determine S modulo 29 (the rest of the division of S by 29).<p></p>   Take X = 1 for an example. The positive integer divisors of 2004^1 are 1, 2, 3, 4, 6, 12, 167, 334, 501, 668, 1002 and 2004. Therefore S = 4704 and S modulo 29 is equal to 6.<p></p>", "input_description": "   The input consists of several test cases. Each test case contains a line with the integer X (1 <= X <= 10000000). \nA test case of X = 0 indicates the end of input, and should not be processed.\n", "output_description": "   For each test case, in a separate line, please output the result of S modulo 29.", "samples": "[{\"input\": \"1\\n10000\\n0\\n\", \"output\": \"6\\n10\\n\"}]", "test_case_id": "1015", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 346, "total_accepted_number": 178, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1016, "fields": {"title": "City hall", "description": "Because of its age, the City Hall has suffered damage to one of its walls. A matrix with M rows and N columns represents the encoded image of that wall, where 1 represents an intact wall and 0 represents a damaged wall (like in Figure-1).<p></p><p></p>1110000111<p></p>1100001111<p></p>1000000011<p></p>1111101111<p></p>1110000111<p></p><p></p>Figure-1<p></p><p></p>To repair the wall, the workers will place some blocks vertically into the damaged area. They can use blocks with a fixed width of 1 and different heights of {1,2, ..., M}. <p></p><p></p>For a given image of the City Hall\u2019s wall, your task is to determine how many blocks of different heights are needed to fill in the damaged area of the wall, and to use the least amount of blocks.<p></p>", "input_description": "There is only one test case. The case starts with a line containing two integers M and N (1 <= M, N <= 200). Each of the following M lines contains a string with length of N, which consists of \u201c1\u201ds and/or \u201c0\u201ds. These M lines represent the wall.", "output_description": "You should output how many blocks of different heights are needed. Use separate lines of the following format:\n\nk Ck\n\nwhere k&#61646;{1,2, ..., M} means the height of the block, and Ck means the amount of blocks of height k that are needed. You should not output the lines where Ck = 0. The order of lines is in the ascending order of k.\n", "samples": "[{\"input\": \"5 10\\n1110000111\\n1100001111\\n1000000011\\n1111101111\\n1110000111\\n\", \"output\": \"1 7\\n2 1\\n3 2\\n5 1\\n\"}]", "test_case_id": "1016", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 466, "total_accepted_number": 201, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1017, "fields": {"title": "Count the nmubers", "description": "Given two integers a and b, we write the numbers between a and b, inclusive, in a list. Your task is to calculate the number of occurrences of each digit. For example, if a = 1024 and b = 1032, the list will be <p></p>1024 1025 1026 1027 1028 1029 1030 1031 1032 <p></p><p></p>there are ten 0&#039;s in the list, ten 1&#039;s, seven 2&#039;s, three 3&#039;s, and etc. <p></p>", "input_description": "The input consists of up to 500 lines. Each line contains two numbers a and b where 0 < a, b < 100000000. The input is terminated by a line `0 0', which is not considered as part of the input.", "output_description": "For each pair of input, output a line containing ten numbers separated by single spaces. The first number is the number of occurrences of the digit 0, the second is the number of occurrences of the digit 1, etc. ", "samples": "[{\"input\": \"1 10\\n44 497\\n346 542\\n1199 1748\\n1496 1403\\n1004 503\\n1714 190\\n1317 854\\n1976 494\\n1001 1960\\n0 0\\n\", \"output\": \"1 2 1 1 1 1 1 1 1 1\\n85 185 185 185 190 96 96 96 95 93\\n40 40 40 93 136 82 40 40 40 40\\n115 666 215 215 214 205 205 154 105 106\\n16 113 19 20 114 20 20 19 19 16\\n107 105 100 101 101 197 200 200 200 200\\n413 1133 503 503 503 502 502 417 402 412\\n196 512 186 104 87 93 97 97 142 196\\n398 1375 398 398 405 499 499 495 488 471\\n294 1256 296 296 296 296 287 286 286 247\\n\"}]", "test_case_id": "1017", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 226, "total_accepted_number": 48, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1018, "fields": {"title": "Ride to School", "description": "Many graduate students of Peking University are living in Wanliu Campus, which is 4.5 kilometers from the main campus ? Yanyuan. Students in Wanliu have to either take a bus or ride a bike to go to school. Due to the bad traffic in Beijing, many students choose to ride a bike. <p></p><p></p>We may assume that all the students except &quot;Charley&quot; ride from Wanliu to Yanyuan at a fixed speed. Charley is a student with a different riding habit ? he always tries to follow another rider to avoid riding alone. When Charley gets to the gate of Wanliu, he will look for someone who is setting off to Yanyuan. If he finds someone, he will follow that rider, or if not, he will wait for someone to follow. On the way from Wanliu to Yanyuan, at any time if a faster student surpassed Charley, he will leave the rider he is following and speed up to follow the faster one. <p></p><p></p>We assume the time that Charley gets to the gate of Wanliu is zero. Given the set off time and speed of the other students, your task is to give the time when Charley arrives at Yanyuan. <p></p>", "input_description": "There are several test cases. The first line of each case is N (1 <= N <= 10000) representing the number of riders (excluding Charley). N = 0 ends the input. The following N lines are information of N different riders, in such format: \n\nVi [TAB] Ti \n\nVi is a positive integer <= 40, indicating the speed of the i-th rider (kph, kilometers per hour). Ti is the set off time of the i-th rider, which is an integer and counted in seconds. In any case it is assured that there always exists a nonnegative Ti. \n", "output_description": "Output one line for each case: the arrival time of Charley. Round up (ceiling) the value when dealing with a fraction.", "samples": "[{\"input\": \"4\\n20\t0\\n25\t-155\\n27\t190\\n30\t240\\n2\\n21\t0\\n22\t34\\n0\\n\", \"output\": \"780\\n771\\n\"}]", "test_case_id": "1018", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 357, "total_accepted_number": 135, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1020, "fields": {"title": "The Treasure", "description": "We have arrived at the age of the Internet. Many software applications have transformed from stand-alone to online applications. Computer games are following this trend as well. Online games are becoming more and more popular, not only because they are more intelligent, but also because they can bring great profits. &quot;The computer game industry is developing rapidly in China. Online game revenues amounted to 1.3 billion Yuan last year and are expected to reach 6.7 billion Yuan by 2007.&quot; reported by China Daily in 2004. <p></p><p></p>However, good games originate from good programmers. We take for example that there is a RPG (Role Playing Game) and your boss asks you to implement some tasks. For simplicity\u2019s sake, we assume there are two kinds of roles in this game: one is player and the other is monster. You should help the player to achieve the goal: reach the place where treasure is positioned as early as possible and get the treasure. <p></p><p></p>The map of the game is a matrix of N * M identical cells. Some cells are passable blocks, and others are non-passable rocks. At any time, there is at most one role occupying a block. <p></p>At the beginning, the time is set to 0, and the player is at a certain block. He then moves towards the treasure. At each turn, we have some rules: <p></p>&#8226;\tThe player can stay in the same block during the next one-second time duration, or he can walk or run towards the east, south, west, north, northeast, northwest, southeast, and southwest. <p></p>&#8226;\tWith walking, the player can arrive at the corresponding passable blocks around him . Each move takes 1 second. <p></p>&#8226;\tWith running, the player can arrive at the corresponding passable blocks 2 cells away from him . Each run takes 1 second. If a neighbor cell is not passable, the player cannot run in that direction. For example, if cell 2 is a rock, running from 1 to 3 is impossible. <p></p>&#8226;\tThe monsters are classified into aggressive and non-aggressive. If a monster occupies a cell, the player cannot move into that cell or run through that cell. In addition, the player cannot move into the cells surrounding an aggressive monster, because it will attack the player near it. If there is an aggressive monster in 5, then the cell 1, 2, 3, 4, 6, 7, 8 and 9 are in its attacking region, so the player cannot stay in or pass through these cells. <p></p>&#8226;\tMonsters change their positions each turn. Each monster appears by its position sequence iteratively. That&#039;s to say, given the position sequence of monster i: (x1, y1), (x2, y2), ..., (xs, ys), its initial position is (x1, y1) at time 0, then it appears in (x2, y2) at time 1, and so on. When monster i arrives at (xs, ys) at time s-1, it will arrive in (x1, y1) at time s, and start to repeat. <p></p>&#8226;\tAt the start of each turn, all the monsters change their positions first (the way of changing is given above). If a monster appears in the player&#039;s cell, or if an aggressive monster appears near the player to put him in its attacking region, the player will die, and the goal cannot be achieved. After all the monsters change their positions, the player makes a move or stays in the same cell. In his move, the moving path should not be occupied by any rocks or monsters or in the attacking region of any aggressive monsters. When counting the total time, we can neglect the time between monsters&#039; position change and the player&#039;s move.<p></p>Given the map of the game, the player&#039;s starting position, the treasure position and all the monsters&#039; positions in every second, your task is to write a program to find the minimum time that the player gets the treasure. <p></p>", "input_description": "The input consists of several test cases. The first line of each case contains two integers N and M (1 <= N, M <= 100), where N is the height of the map and M is the width of the map. This is followed by N lines each containing M characters representing the map. A '#' represents a rock, a '.' is a free block, 'p' is the starting position of the player, 't' is the position of the treasure, 'n' is the initial position of a non-aggressive monster, and an 'a' stands for the initial position of an aggressive monster. \n<img src=uploadFiles\\1020.jpg\n\nThe cell (i, j) is the j-th cell on the i-th row counting from left to right. The rows are counted from 1 to N starting from the first line of the matrix. We can number all the monsters as 1, 2, 3\u2026 according to their initial position, sorting first by row, then by column. \nThe (n+2)-th line contains an integer p (0 <= p <= 100), which is the total number of monsters (i.e. the total number of 'n's and 'a's in the matrix). It is followed by p lines each specifying a monster's position sequence in the following format: the i-th (1 <= i <= p) line corresponds to monster i, which begins with an integer s (1 <= s <= 100), meaning the length of position sequence. Then s pairs of integers x1, y1, x2, y2, \u2026, xs, ys are followed, separated by blanks. Each pair is a free block in the map, (i.e. a monster never goes to a rock cell). \nIt is assured that none of the aggressive monsters' initial position is around the player. Two consecutive cases are separated by a blank line. The input is terminated by a line containing a pair of zeros. ", "output_description": "For each test case, output the minimum total time required for the player to get the treasure, in seconds. If it's not possible to get the treasure, or the minimum required time is greater than 100 seconds, please print a line just containing the string \"impossible\". Two consecutive cases should be separated by a blank line.", "samples": "[{\"input\": \"7 8\\n#.#####.\\n#.t#..p.\\n#..#....\\n..#a.#.#\\n#...##.n\\n.#......\\n........\\n2\\n2 4 4 5 4\\n3 5 8 6 8 5 7\\n\\n3 3\\np#.\\n##.\\nt..\\n0\\n\\n2 2\\n#t\\np#\\n0\\n\\n0 0\\n\", \"output\": \"8\\n\\nimpossible\\n\\n1\\n\"}]", "test_case_id": "1020", "hint": "In the first sample case, the player can follow (2,7), (4,7), stay in (4,7), (6,7), (7,6), (7,4), (5,2), (3,2) and (2,3) to get the treasure with the minimum time (8 seconds). ", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 28, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1029, "fields": {"title": "Argus", "description": "A data stream is a real-time, continuous, ordered sequence of items. Some examples include sensor data, Internet traffic, financial tickers, on-line auctions, and transaction logs such as Web usage logs and telephone call records. Likewise, queries over streams run continuously over a period of time and incrementally return new results as new data arrives. For example, a temperature detection system of a factory warehouse may run queries like the following. <p></p><p></p><p></p>Query-1: &quot;Every five minutes, retrieve the maximum temperature over the past five minutes.&quot; <p></p>Query-2: &quot;Return the average temperature measured on each floor over the past 10 minutes.&quot;<p></p><p></p>We have developed a Data Stream Management System called Argus, which processes the queries over the data streams. Users can register queries to the Argus. Argus will keep the queries running over the changing data and return the results to the corresponding user with the desired frequency. <p></p><p></p>For the Argus, we use the following instruction to register a query: <p></p><p></p>Register Q_num Period<p></p><p></p>Q_num (0 &lt; Q_num &lt;= 3000) is query ID-number, and Period (0 &lt; Period &lt;= 3000) is the interval between two consecutive returns of the result. After Period seconds of register, the result will be returned for the first time, and after that, the result will be returned every Period seconds. <p></p><p></p>Here we have several different queries registered in Argus at once. It is confirmed that all the queries have different Q_num. Your task is to tell the first K queries to return the results. If two or more queries are to return the results at the same time, they will return the results one by one in the ascending order of Q_num. <p></p><p></p>", "input_description": "The first part of the input are the register instructions to Argus, one instruction per line. You can assume the number of the instructions will not exceed 1000, and all these instructions are executed at the same time. This part is ended with a line of \"#\". \n\nThe second part is your task. This part contains only one line, which is one positive integer K (<= 10000). \n\n", "output_description": "You should output the Q_num of the first K queries to return the results, one number per line.\n", "samples": "[{\"input\": \"Register 2004 200\\nRegister 2005 300\\n#\\n5\\n\", \"output\": \"2004\\n2005\\n2004\\n2004\\n2005\\n\"}]", "test_case_id": "1029", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 30000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 106, "total_accepted_number": 49, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1034, "fields": {"title": "ACM(ACronymMaker)", "description": "The sadists who design problems for ACM programming contests often like to include the abbre-viation &quot;ACM&quot; somewhere in their problem descriptions. Thus, in years past, the World Finals has had problems involving &quot;Apartment Construction Management,&quot; the &quot;Atheneum of Culture and Movies,&quot; the &quot;Association of Cover Manufacturers,&quot; &quot;ACM Airlines,&quot; the &quot;Association for Computa- tional Marinelife,&quot; and even an insect named &quot;Amelia Cheese Mite.&quot; However, the number of word combinations beginning with A, C, and M that make sense is finite and the problem writers are starting to run out of ideas (it&#039;s hard to think of problems about &quot;Antidisestablishmentarianistic Chthonian Metalinguistics&quot;). Fortunately, modern culture allows more flexibility in designing abbreviations -- consider, for example: <p></p>GDB -- Gnu DeBugger <p></p>LINUX -- either &quot;LINus&#039;s UniX&quot; or &quot;LINUs&#039;s miniX&quot; or &quot;Linux Is Not UniX&quot; <p></p>SNOBOL -- StriNg Oriented symBOlic Language <p></p>SPITBOL -- SPeedy ImplemenTation of snoBOL <p></p>The rules used in these examples seem to be: <p></p><p></p><p></p>Insignificant words (such as &quot;of&quot;, &quot;a&quot;, &quot;the&quot;, etc.) are ignored. <p></p><p></p>The letters of the abbreviation must appear, in the correct order, as an ordered sublist of the letters in the significant words of the phrase to be abbreviated. <p></p><p></p>At least one letter of the abbreviation must come from every significant word (multiple occurrences of a letter are, of course, treated as distinct).<p></p><p></p>Of course these rules are often broken in real life. For instance, RADAR is an abbreviation for &quot;RAdio Detecting And Ranging&quot;. Under our rules (assuming that &quot;and&quot; is an insignificant word), this would not be a valid abbreviation (however, RADR or RADRAN or DODGING would be valid). You have been asked to take a list of insignificant words and a list of abbreviations and phrases and to determine in how many ways each abbreviation can be formed from the corresponding phrase according to the rules above.", "input_description": "The input file consists of multiple scenarios. Each scenario begins with an integer 100 >= n >= 1 followed by n insignificant words, all in lower case, one per line with no extra white space. (A line containing 0 indicates end of input.) Following this are one or more test cases for this scenario, one per line, followed by a line containing the phrase \"LAST CASE\". Each line containing a test case begins with an abbreviation (uppercase letters only) followed by a phrase (lowercase letters and spaces only). The abbreviation has length at least 1 and the phrase contains at least one significant word. No input line (including abbreviation, phrase, and spaces) will contain more than 150 characters. Within these limits, however, abbreviations and phrase words may be any length.\n", "output_description": "For each test case, output the abbreviation followed by either \nis not a valid abbreviation \nor \ncan be formed in i ways \nwhere i is the number of different ways in which the letters of the abbreviation may be assigned to the letters in the phrase according to the rules above. The value of i will not exceed the range of a 32-bit signed integer.\n", "samples": "[{\"input\": \"2\\nand\\nof\\nACM academy of computer makers\\nRADAR radio detection and ranging\\nLAST CASE\\n2\\na\\nan\\nAPPLY an apple a day\\nLAST CASE\\n0\\n\", \"output\": \"ACM can be formed in 2 ways\\nRADAR is not a valid abbreviation\\nAPPLY can be formed in 1 ways\\n\"}]", "test_case_id": "1034", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 13, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1035, "fields": {"title": "Countdown", "description": "Ann Sister owns a genealogical database service, which maintains family tree history for her clients. When clients login to the system, they are presented with a variety of services: searching, printing, querying, etc. One recent question that came up which the system was not quite prepared for was the following: &quot;Which member of my family had the most grandchildren?&quot; The client who posed this question eventually had to answer it by manually searching the family tree database herself. Ann decided to have software written in case this question (or ones similar to it asking for great-grandchildren, or great-great-grandchildren, etc.) is asked in the future.<p></p>", "input_description": "Input will consist of multiple test cases. The first line of the input will contain a single integer indicating the number of test cases. Each test case starts with a single line containing two positive integers n and d, where n indicates the number of lines to follow containing information about the family tree, and d indicates the specific question being asked about the tree: if d = 1, then we are interested in persons with the most children (1 generation away); if d = 2, then we are interested in persons with the most grandchildren (2 generations away), and so on. The next n lines are of the form \nname m dname1 dname2 ... dnamem \nwhere name is one of the family members' names, m is the number of his/her children, and dname1 through dnamem are the names of the children. These lines will be given in no particular order. You may assume that all n lines describe one single, connected tree. There will be no more than 1000 people in any one tree, and all names will be at most 10 characters long.\n", "output_description": "For each test case, output the three names with the largest number of specified descendants in order of number of descendants. If there are ties, output the names within the tie in alphabetical order. Print fewer than three names if there are fewer than three people who match the problem criteria (you should not print anyone's name who has 0 of the specified descendants), and print more than three if there is a tie near the bottom of the list. Print each name one per line, followed by a single space and then the number of specified descendants. The output for each test case should start with the line \nTree i: \nwhere i is the test case number (starting at 1). Separate the output for each problem with a blank line.\n", "samples": "[{\"input\": \"3\\n8 2\\nBarney 2 Fred Ginger\\nIngrid 1 Nolan\\nCindy 1 Hal\\nJeff 2 Oliva Peter\\nDon 2 Ingrid Jeff\\nFred 1 Kathy\\nAndrea 4 Barney Cindy Don Eloise\\nHal 2 Lionel Mary\\n6 1\\nPhillip 5 Jim Phil Jane Joe Paul\\nJim 1 Jimmy\\nPhil 1 Philly\\nJane 1 Janey\\nJoe 1 Joey\\nPaul 1 Pauly\\n6 2\\nPhillip 5 Jim Phil Jane Joe Paul\\nJim 1 Jimmy\\nPhil 1 Philly\\nJane 1 Janey\\nJoe 1 Joey\\nPaul 1 Pauly\\n\", \"output\": \"Tree 1:\\nAndrea 5\\nDon 3\\nCindy 2\\n\\nTree 2:\\nPhillip 5\\nJane 1\\nJim 1\\nJoe 1\\nPaul 1\\nPhil 1\\n\\nTree 3:\\nPhillip 5\\n\"}]", "test_case_id": "1035", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 24, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1038, "fields": {"title": "Reliable Nets", "description": "You&#039;re in charge of designing a campus network between buildings and are very worried about its reliability and its cost. So, you&#039;ve decided to build some redundancy into your network while keeping it as inexpensive as possible. Specifically, you want to build the cheapest network so that if any one line is broken, all buildings can still communicate. We&#039;ll call this a minimal reliable net.<p></p>", "input_description": "There will be multiple test cases for this problem. Each test case will start with a pair of integers n (<= 15) and m (<= 20) on a line indicating the number of buildings (numbered 1 through n) and the number of potential inter-building connections, respectively. (Values of n = m = 0 indicate the end of the problem.) The following m lines are of the form b1 b2 c (all positive integers) indicating that it costs c to connect building b1 and b2. All connections are bidirectional.\n", "output_description": "For each test case you should print one line giving the cost of a minimal reliable net. If there is a minimal reliable net, the output line should be of the form: \nThe minimal cost for test case p is c. \nwhere p is the number of the test case (starting at 1) and c is the cost. If there is no reliable net possible, output a line of the form: \nThere is no reliable net possible for test case p.\n", "samples": "[{\"input\": \"4 5\\n1 2 1\\n1 3 2\\n2 4 2\\n3 4 1\\n2 3 1\\n2 1\\n1 2 5\\n0 0\\n\", \"output\": \"The minimal cost for test case 1 is 6.\\nThere is no reliable net possible for test case 2.\\n\\n\"}]", "test_case_id": "1038", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 11, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1039, "fields": {"title": "Swamp Things", "description": "Hugh F. Oh, in his never-ending quest to prove the existence of extraterrestrials, has gotten hold of a number of nighttime photographs taken by a research group that is examining glowing swamp gas. Hugh wants to see if any of the photos show, not swamp gas, but Little Grey Men in glowing suits. The photographs consist of bright dots appearing against a black background. Unfortunately, at the time the photos were taken, trains were travelling through the area (there is a train trestle over the swamp), and occasional lights from the train windows also appear in the photographs. Hugh, being a fastidious researcher, wants to eliminate these spots from the images. He can&#039;t tell from the photos exactly where the tracks are, or from what direction the photos were taken, but he knows that the tracks in that area are perfectly straight, so he&#039;s decided on the following approach: he will find the line with the maximum number of spots lying on it and, if there are four or more spots on the line, he will eliminate those points from his calculations, assuming that those are windows on the train. If two or more lines have the maximum number of points, Hugh will just randomly select one such set and delete it from the photo (he&#039;s not all that fastidious ? after all, he believes in Little Grey Men). If there are fewer than four points lying along a common line, Hugh will assume that there is no train in the photograph and won&#039;t delete any points. Please write a program for him to process a set of photographs.<p></p>", "input_description": "There will be a series of test cases. Each test case is one photograph described by a line containing a positive integer n (<= 1000), the number of distinct spots in the photograph, followed by n lines containing the integer coordinates of the spots, one (x, y) pair per line. All coordinates are between 0 and 10000. The last photo description is followed by a line containing a zero, marking the end of the input. This line should not be processed.\n", "output_description": "For each test case, output the photo number followed by the number of points eliminated from the photograph. Imitate the sample output below.\n", "samples": "[{\"input\": \"6\\n0 1\\n0 2\\n1 2\\n2 2\\n4 5\\n5 6\\n4\\n3 5\\n4 4\\n6 5\\n7 4\\n0\\n\", \"output\": \"Photo 1: 4 points eliminated\\nPhoto 2: 0 points eliminated\\n\"}]", "test_case_id": "1039", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 37, "total_accepted_number": 13, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1041, "fields": {"title": "Two Ends", "description": "In the two-player game &quot;Two Ends&quot;, an even number of cards is laid out in a row. On each card, face up, is written a positive integer. Players take turns removing a card from either end of the row and placing the card in their pile. The player whose cards add up to the highest number wins the game. Now one strategy is to simply pick the card at the end that is the largest -- we&#039;ll call this the greedy strategy. However, this is not always optimal, as the following example shows: (The first player would win if she would first pick the 3 instead of the 4.) <p></p>3 2 10 4 <p></p>You are to determine exactly how bad the greedy strategy is for different games when the second player uses it but the first player is free to use any strategy she wishes.<p></p>", "input_description": "There will be multiple test cases. Each test case will be contained on one line. Each line will start with an even integer n followed by n positive integers. A value of n = 0 indicates end of input. You may assume that n is no more than 1000. Furthermore, you may assume that the sum of the numbers in the list does not exceed 1,000,000.\n", "output_description": "For each test case you should print one line of output of the form: \nIn game m, the greedy strategy might lose by as many as p points. \nwhere m is the number of the game (starting at game 1) and p is the maximum possible difference between the first player's score and second player's score when the second player uses the greedy strategy. When employing the greedy strategy, always take the larger end. If there is a tie, remove the left end.\n", "samples": "[{\"input\": \"4 3 2 10 4\\n8 1 2 3 4 5 6 7 8\\n8 2 2 1 5 3 8 7 3\\n0\\n\", \"output\": \"In game 1, the greedy strategy might lose by as many as 7 points.\\nIn game 2, the greedy strategy might lose by as many as 4 points.\\nIn game 3, the greedy strategy might lose by as many as 5 points.\\n\"}]", "test_case_id": "1041", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 155, "total_accepted_number": 59, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1043, "fields": {"title": "The Bank of Kalii", "description": "Customers of the Bank of Kalii handle their banking transactions similar to the way they handle their taxes: be as terse as possible. As a result, when a customer writes a check or fills out a deposit or withdrawal form, they leave off the year on any date they write down. So, instead of writing: 09/20/2005, they would write: 9/20 and be done with it. In general, the year can be inferred since it will be relatively close to the date the transaction is actually processed by the bank. Without going into the intricate details of how the Bank of Kalii calculates interest and banking fees (that is a problem for another time...), suffice to say the bank must determine the actual date the customer wrote on the check or form, and calculate the number of days prior (or in the future) the document is dated. You see, Kaliian bankers, like their government officials, are overworked, so they may not get around to processing transactions for up to a week. The customers know this, so they often date their checks and forms a several days in the future ?this complicates the bankers\u2019 duties as well. Your job is to write a program to compare a date written on a check or form with the date the transaction is being processed, and, determine the full date the customer meant as well as how many days prior (or in the future) the document is dated.", "input_description": "The first line of input contains an integer N which is the number of datasets that follow (1 <= N <= 1000). Each dataset consists of a single line containing two dates: the transaction date and the document date; there is a single space between them. The transaction date is of the form M/D/Y where M is the month number (1 <= M <= 12), D is the day of month (1 <= D <= md1) and Y is the year (2000 <= Y <= 2200). The document date is of the form m/d where m is the month number (1 <= m <= 12) and d is the day of month (1 <= d <= md2). The values of md1 and md2 will not exceed the number of days in the respective months M and m.", "output_description": "For each dataset print out the dataset number followed by a space followed by the result of the date comparison as shown in the table below:\n\n<img src=uploadFiles\\1043.jpg>\n\nNotes: When printing the result date, m/d/y, you will have to determine the year value y (1999 <= y <= 2201). This is not necessarily the same as the transaction date\u2019s year value Y. Since the Kalii taxation fiasco a couple of years back, the Kaliian government decided to switch to the standard Gregorian calendar. As such, Gregorian leap year rules apply. A year is a leap year (February has 29 days instead of 28) if the year if evenly divisible by 4, except for century years (those ending in 00), which are leap years only if they are evenly divisible by 400. 2000 and 2004 are leap years, but 2100 and 2101 are not. For those who do not know, the months of January, March, May, July, August, October and December all have 31 days in them. February has 28 days (unless in a leap year, then it has 29). The remainder of the months has 30 days.", "samples": "[{\"input\": \"7\\n11/20/2005 11/21\\n11/20/2005 11/17\\n11/20/2005 11/20\\n11/20/2005 11/13\\n11/20/2005 11/28\\n1/2/2005 12/30\\n12/31/2100 1/3\\n\", \"output\": \"1 11/21/2005 IS 1 DAY AFTER \\n2 11/17/2005 IS 3 DAYS PRIOR\\n3 SAME DAY\\n4 11/13/2005 IS 7 DAYS PRIOR\\n5 OUT OF RANGE\\n6 12/30/2004 IS 3 DAYS PRIOR\\n7 1/3/2101 IS 3 DAYS AFTER\"}]", "test_case_id": "1043", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 128, "total_accepted_number": 46, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1044, "fields": {"title": "The Cubic End", "description": "Given any string of decimal digits, ending in 1, 3, 7 or 9, there is always a decimal number, which when cubed has a decimal expansion ending in the original given digit string. The number need never have more digits than the given digit string. Write a program, which takes as input a string of decimal digits ending in 1, 3, 7 or 9 and finds a number of at most the same number of digits, which when cubed, ends in the given digit string.", "input_description": "The input begins with a line containing only the count of problem instances, nProb, as a decimal integer, 1 <= nProb <= 1000. This is followed by nProb lines, each of which contains a string of between 1 and 10 decimal digits ending in 1, 3, 7 or 9.", "output_description": "For each problem instance, there should be one line of output consisting of the number, which when cubed, ends in the given digit string. The number should be output as a decimal integer with no leading spaces and no leading zeroes.", "samples": "[{\"input\": \"4 \\n123 \\n1234567\\n435621\\n9876543213\", \"output\": \"947\\n2835223\\n786941\\n2916344917\"}]", "test_case_id": "1044", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 58, "total_accepted_number": 23, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1048, "fields": {"title": "No Fold'em Hold'em", "description": "The recent Texas Hold\u2019em craze has spawned a bunch of on-line Poker sites. These sites tend to breed a group of poor players whose primary strategy is to never fold or throw away a hand. These players will always play and bet on every card on every hand ? no matter what the cost or what cards they have. You have decided to take advantage of these stupid players by developing your own poker site that allows you to always beat these players. <p></p><p></p>The way your site will work is: there are only two players in each game: you and your opponent (this is called a heads-up game). Each of the two players will get two \u201chole cards\u201d; these cards are dealt face down so, presumably, only the player can see them. Four of the five community cards (cards shared by both players) will be dealt face up on the table. We will dispense with any betting for the purpose of this problem: it is irrelevant since each player will always call every bet right to the \u201criver\u201d (the fifth and final community card). You will always be seated at position 1, and your opponent at position 2. The program knows what seat you are sitting at and the hole cards for both players, therefore, it can compute all the cards that remain in the deck that will maximize the amount of money you would get playing the hand ? folding is not an option. In the event there is no card that would allow you to win or tie the hand, you will be forced to take a loss on that hand (after all, it looks good if you lose sometimes).", "input_description": "The first line of input contains an integer N which is the number of data sets that follow (1 <= N <= 100). Each data set consists of three lines. The first line of each dataset specifies your two hole cards. The second line is your opponent\u2019s hole cards. The third line is the four community cards. A card is specified by two characters: it\u2019s rank (A,2,3,4,5,6,7,8,9,T,J,Q,K) and it\u2019s suit (S,D,H,C) for Spades, Diamonds, Hearts, and Clubs respectively. For example, the Ace of Hearts would be AH, the Nine of Spades would be 9S. Within a line, there are no spaces or invalid characters. All input will be valid.", "output_description": "For each data set, your program will output (on a new line) the data set number followed by a colon, followed by a space, and a list of card(s) that will maximize the amount of money you could get playing the hand. If no card will allow you to win or tie, just display \u201cLOSER\u201d instead of the cards. Each card should be separated by a single space. Your program will display up to 15 cards on each output line. If more than one output line is required for a dataset, additional lines should be indented by exactly 3 spaces. Cards should be output in suit order (S,D,H,C) and rank order within each suit (Ace high).", "samples": "[{\"input\": \"3\\nJD3S\\nKH5S\\nKDAC2DQD\\n2S3S\\n2C3C\\n4D5DJHAH\\n4S7D\\nKHKD\\nAHADKSKC\", \"output\": \"1: TS 3D 4D 5D 6D 7D 8D 9D TD AD TH TC\\n2: 4S 5S 6S 7S 8S 9S TS JS QS KS AS 2D 3D 6D 7D\\n   8D 9D TD JD QD KD AD 2H 3H 4H 5H 6H 7H 8H 9H\\n   TH QH KH 4C 5C 6C 7C 8C 9C TC JC QC KC AC\\n3: LOSER\"}]", "test_case_id": "1048", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1049, "fields": {"title": "Model Rocket Height", "description": "One method used to determine the height achieved by a model rocket is the geodesic method. Two observers A and B are spaced 100 feet apart along a base line along one edge of the flat test field. The launch platform is equidistant from observers A and B and 50 feet from the base line. Each observer has a theodolite or some other device for measuring angle above the horizontal (elevation angle) of a distant object and the azimuth angle (the angle the vertical plane of the sight line makes with the line from A through B measured counter-clockwise). Each measuring device is on a stand. A\u2019s device is HA feet above the launch platform and B\u2019s device is HB feet above the launch platform. When a rocket is fired, near the top of its flight, it deploys a parachute and emits a puff of smoke. Each observer measures the elevation angle and azimuth angle of the puff of smoke from their location. If the peak location is on the wrong side of the baseline or outside the lines determined by A and B perpendicular to the base line, it is out of bounds and disqualified. From this information, the height of the rocket may be determined as follows: <p></p><p></p>On each sight line, find the point on that sight line closest to the other sight line. The point halfway between these two points is assumed to be the location of the rocket at the top of its flight. The height achieved by the rocket is the vertical distance of this point above the launch platform. <p></p><p></p>This problem is to write a program which, given the parameters HA (the distance of the measuring device A above the launch platform in feet), HB (the distance of the measuring device B above the launch platform in feet), \u03b1 (the elevation angle of the rocket in degrees measured by the left observer A), \u03b2 (the elevation angle of the rocket in degrees observed by the right observer B), \u03b3 (the azimuth angle in degrees measured by the left observer A) and \u03b4 (the azimuth angle in degrees measured by the right observer B), computes the height of the rocket above the launch platform in feet to the nearest foot.", "input_description": "The first line of input contains the number of shots that follow N (1 <= N <= 100) and the parameters HA and HB in that order as decimal values (the values are separated by one or more spaces). These values would be measured once at the beginning of the day and remain fixed through all N rocket shots. Each succeeding line of input will contain the angles \u03b1, \u03b2, \u03b3 and \u03b4 in that order (measured in degrees) as decimal values. The angles \u03b1, \u03b2 and \u03b3 will be strictly between 0 and 90 degrees and \u03b4 will be strictly between 90 degrees and 180 degrees.", "output_description": "For each set of four angles (other than the end indicator), the output contains a line with the shot number, (1...N), a colon, a space and finally the height above the field in feet to the nearest foot with no leading spaces.", "samples": "[{\"input\": \"4 5.25 2.92\\n39.6 36.0 35.4 151.2\\n65.1 71.2 16.5 160.6\\n59.4 59.5 43.8 139.0\\n45.0 41.2 32.9 152.6\", \"output\": \"1: 50\\n2: 135\\n3: 119\\n4: 58\"}]", "test_case_id": "1049", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 8, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1050, "fields": {"title": "Sequence Sum Possibilities", "description": "Most positive integers may be written as a sum of a sequence of at least two consecutive positive integers. For instance, <p></p>        6 = 1 + 2 + 3<p></p>        9 = 5 + 4 = 2 + 3 + 4 <p></p>but 8 cannot be so written.<p></p>Write a program which will compute how many different ways an input number may be written as a sum of a sequence of at least two consecutive positive integers.", "input_description": "The first line of input will contain the number of problem instances N on a line by itself, (1 <= N <= 1000). This will be followed by N lines, one for each problem instance. Each problem line will have the problem number, a single space and the number to be written as a sequence of consecutive positive integers. The second number will be less than 2^31 (so will fit in a 32-bit integer).", "output_description": "The output for each problem instance will be a single line containing the problem number, a single space and the number of ways the input number can be written as a sequence of consecutive positive integers.", "samples": "[{\"input\": \"7\\n1 6\\n2 9\\n3 8\\n4 1800\\n5 987654321\\n6 987654323\\n7 987654325\\n\", \"output\": \"1 1\\n2 2\\n3 0\\n4 8\\n5 17\\n6 1\\n7 23\"}]", "test_case_id": "1050", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 291, "total_accepted_number": 160, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1051, "fields": {"title": "Automatic Editing", "description": "Text-processing tools like awk and sed allow you to automatically perform a sequence of editing operations based on a script. For this problem we consider the specific case in which we want to perform a series of string replacements, within a single line of text, based on a fixed set of rules. Each rule specifies the string to find, and the string to replace it with, as shown below. <p></p><p></p>Rule  Find  Replace-by <p></p>1.    ban   bab <p></p>2.    baba  be <p></p>3.    ana   any <p></p>4.    ba b  hind the g<p></p><p></p>To perform the edits for a given line of text, start with the first rule. Replace the first occurrence of the find string within the text by the replace-by string, then try to perform the same replacement again on the new text. Continue until the find string no longer occurs within the text, and then move on to the next rule. Continue until all the rules have been considered. Note that (1) when searching for a find string, you always start searching at the beginning of the text, (2) once you have finished using a rule (because the find string no longer occurs) you never use that rule again, and (3) case is significant.<p></p><p></p>For example, suppose we start with the line<p></p><p></p>banana boat<p></p><p></p>and apply these rules. The sequence of transformations is shown below, where occurrences of a find string are underlined and replacements are boldfaced. Note that rule 1 was used twice, then rule 2 was used once, then rule 3 was used zero times, and then rule 4 was used once.<p></p><p></p>Before      After <p></p>banana boat babana boat <p></p>babana boat bababa boat <p></p>bababa boat beba boat <p></p>beba boat   behind the goat <p></p><p></p>", "input_description": "The input contains one or more test cases, followed by a line containing only 0 (zero) that signals the end of the file. Each test case begins with a line containing the number of rules, which will be between 1 and 10. Each rule is specified by a pair of lines, where the first line is the find string and the second line is the replace-by string. Following all the rules is a line containing the text to edit.\n\n", "output_description": "For each test case, output a line containing the final edited text.\n\nBoth find and replace-by strings will be at most 80 characters long. Find strings will contain at least one character, but replace-by strings may be empty (indicated in the input file by an empty line). During the edit process the text may grow as large as 255 characters, but the final output text will be less than 80 characters long.\n\nThe first test case in the sample input below corresponds to the example shown above\n", "samples": "[{\"input\": \"4\\nban\\nbab\\nbaba\\nbe\\nana\\nany\\nba b\\nhind the g\\nbanana boat\\n1\\nt\\nsh\\ntoe or top\\n0\\n\\n\", \"output\": \"behind the goat\\nshoe or shop\\n\"}]", "test_case_id": "1051", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 32768, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 113, "total_accepted_number": 56, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1052, "fields": {"title": "Exchange Rates", "description": "Using money to pay for goods and services usually makes life easier, but sometimes people prefer to trade items directly without any money changing hands. In order to ensure a consistent &quot;price&quot;, traders set an exchange rate between items. The exchange rate between two items A and B is expressed as two positive integers m and n, and says that m of item A is worth n of item B. For example, 2 stoves might be worth 3 refrigerators. (Mathematically, 1 stove is worth 1.5 refrigerators, but since it&#039;s hard to find half a refrigerator, exchange rates are always expressed using integers.) <p></p>Your job is to write a program that, given a list of exchange rates, calculates the exchange rate between any two items.<p></p>", "input_description": "The input file contains one or more commands, followed by a line beginning with a period that signals the end of the file. Each command is on a line by itself and is either an assertion or a query. An assertion begins with an exclamation point and has the format \n\n! m itema = n itemb\n\nwhere itema and itemb are distinct item names and m and n are both positive integers less than 100. This command says that m of itema are worth n of itemb. A query begins with a question mark, is of the form \n\n? itema = itemb\n\nand asks for the exchange rate between itema and itemb, where itema and itemb are distinct items that have both appeared in previous assertions (although not necessarily the same assertion). \n\n", "output_description": "For each query, output the exchange rate between itema and itemb based on all the assertions made up to that point. Exchange rates must be in integers and must be reduced to lowest terms. If no exchange rate can be determined at that point, use question marks instead of integers. Format all output exactly as shown in the example. \n\nNote: \n\n>Item names will have length at most 20 and will contain only lowercase letters. \n>Only the singular form of an item name will be used (no plurals). \n>There will be at most 60 distinct items. \n>There will be at most one assertion for any pair of distinct items. \n>There will be no contradictory assertions. For example, \"2 pig = 1 cow\", \"2 cow = 1 horse\", and \"2 horse = 3 pig\" are contradictory. \n>Assertions are not necessarily in lowest terms, but output must be. \n>Although assertions use numbers less than 100, queries may result in larger numbers that will not exceed 10000 when reduced to lowest terms. \n\n", "samples": "[{\"input\": \"! 6 shirt = 15 sock\\n! 47 underwear = 9 pant\\n? sock = shirt\\n? shirt = pant\\n! 2 sock = 1 underwear\\n? pant = shirt\\n.\\n\", \"output\": \"Printing order for 1 pages:\\nSheet 1, front: Blank, 1\\n5 sock = 2 shirt\\n? shirt = ? pant\\n45 pant = 188 shirt\\n\"}]", "test_case_id": "1052", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 32768, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 36, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1053, "fields": {"title": "Loansome Car Buyer", "description": "Kara Van and Lee Sabre are lonesome. A few months ago they took out a loan to buy a new car, but now they&#039;re stuck at home on Saturday night without wheels and without money. You see, there was a wreck and the car was totaled. Their insurance paid $10,000, the current value of the car. The only problem is that they owed the bank $15,000, and the bank wanted payment immediately, since there was no longer a car for collateral. In just a few moments, this unfortunate couple not only lost their car, but lost an additional $5,000 in cash too. <p></p>What Kara and Lee failed to account for was depreciation, the loss in value as the car ages. Each month the buyer&#039;s loan payment reduces the amount owed on the car. However, each month, the car also depreciates as it gets older. Your task is to write a program that calculates the first time, measured in months, that a car buyer owes less money than a car is worth. For this problem, depreciation is specified as a percentage of the previous month&#039;s value.<p></p><p></p>", "input_description": "Input consists of information for several loans. Each loan consists of one line containing the duration in months of the loan, the down payment, the amount of the loan, and the number of depreciation records that follow. All values are nonnegative, with loans being at most 100 months long and car values at most $75,000. Since depreciation is not constant, the varying rates are specified in a series of depreciation records. Each depreciation record consists of one line with a month number and depreciation percentage, which is more than 0 and less than 1. These are in strictly increasing order by month, starting at month 0. Month 0 is the depreciation that applies immediately after driving the car off the lot and is always present in the data. All the other percentages are the amount of depreciation at the end of the corresponding month. Not all months may be listed in the data. If a month is not listed, then the previous depreciation percentage applies. The end of the input is signalled by a negative loan duration - the other three values will be present but indeterminate.\n\nFor simplicity, we will assume a 0% interest loan, thus the car's initial value will be the loan amount plus the down payment. It is possible for a car's value and amount owed to be positive numbers less than $1.00. Do not round values to a whole number of cents ($7,347.635 should not be rounded to $7,347.64). \n\nConsider the first example below of borrowing $15,000 for 30 months. As the buyer drives off the lot, he still owes $15,000, but the car has dropped in value by 10% to $13,950. After 4 months, the buyer has made 4 payments, each of $500, and the car has further depreciated 3% in months 1 and 2 and 0.2% in months 3 and 4. At this time, the car is worth $13,073.10528 and the borrower only owes $13,000. \n", "output_description": "For each loan, the output is the number of complete months before the borrower owes less than the car is worth. Note that English requires plurals (5 months) on all values other than one (1 month).\n\n", "samples": "[{\"input\": \"30 500.0 15000.0 3\\n0 .10\\n1 .03\\n3 .002\\n12 500.0 9999.99 2\\n0 .05\\n2 .1\\n60 2400.0 30000.0 3\\n0 .2\\n1 .05\\n12 .025\\n-99 0 17000 1\\n\\n\", \"output\": \"4 months\\n1 month\\n49 months\"}]", "test_case_id": "1053", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 32768, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 33, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1056, "fields": {"title": "Find the Winning Move", "description": "4x4 tic-tac-toe is played on a board with four rows (numbered 0 to 3 from top to bottom) and four columns (numbered 0 to 3 from left to right). There are two players, x and o, who move alternately with x always going first. The game is won by the first player to get four of his or her pieces on the same row, column, or diagonal. If the board is full and neither player has won then the game is a draw. <p></p>Assuming that it is x&#039;s turn to move, x is said to have a forced win if x can make a move such that no matter what moves o makes for the rest of the game, x can win. This does not necessarily mean that x will win on the very next move, although that is a possibility. It means that x has a winning strategy that will guarantee an eventual victory regardless of what o does. <p></p><p></p>Your job is to write a program that, given a partially-completed game with x to move next, will determine whether x has a forced win. You can assume that each player has made at least two moves, that the game has not already been won by either player, and that the board is not full. <p></p><p></p>", "input_description": "The input file contains one or more test cases, followed by a line beginning with a dollar sign that signals the end of the file. Each test case begins with a line containing a question mark and is followed by four lines representing the board; formatting is exactly as shown in the example. The characters used in a board description are the period (representing an empty space), lowercase x, and lowercase o. For each test case, output a line containing the (row, column) position of the first forced win for x, or '#####' if there is no forced win. Format the output exactly as shown in the example.", "output_description": "For this problem, the first forced win is determined by board position, not the number of moves required for victory. Search for a forced win by examining positions (0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), ..., (3, 2), (3, 3), in that order, and output the first forced win you find. In the second test case below, note that x could win immediately by playing at (0, 3) or (2, 0), but playing at (0, 1) will still ensure victory (although it unnecessarily delays it), and position (0, 1) comes first.\n\n", "samples": "[{\"input\": \"?\\n....\\n.xo.\\n.ox.\\n....\\n?\\no...\\n.ox.\\n.xxx\\nxooo\\n$\\n\", \"output\": \"#####\\n(0,1)\\n\"}]", "test_case_id": "1056", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 32768, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 18, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1059, "fields": {"title": "Instruens Fabulam", "description": "Instruens Fabulam means drawing a chart (or table) in Latin. That&#039;s what you will do for this problem.", "input_description": "The input consists of one or more table descriptions, followed by a line whose first character is '*', which signals the end of the file. Each description begins with a header line containing one or more characters that define the number and alignment of columns in the table. Each character in the header line is either '<', '=', or '>', and indicates a left-justified, centered, or right-justified column. Following the header are at least two and at most 21 data lines that contain the entries for each row. Each data line consists of one or more nonempty entries separated by an ampersand ('&'), where the number of entries is equal to the number of columns defined in the header line. The first data line contains entries for the column titles, and the remaining data lines contain entries for the body of the table. Spaces may appear within an entry, but never at the beginning or end of an entry. The characters '<', '=', '>', '&', and '*' will not appear in the input except where indicated above.\n", "output_description": "For each table description, output the table using the exact format shown in the examples. Note that\n\n> The total width of the table will never exceed 79 characters (not counting end-of-line).\n> Dashes ('-') are used to draw horizontal lines, not underscores ('_'). 'At' signs ('@') appear at each of the four outer corners. Plus signs ('+') appear at intersections within the line separating the title from the body.\n> The largest entry in a column is always separated from the enclosing bars ('|') by exactly one space.\n> If a centered entry cannot be exactly centered within a column, the extra space goes on the right of the entry.\n\nInput and correct output files satisfy all the requirements listed in Notes to Teams, except that the output may contain two or more consecutive spaces. There are no spaces at the beginning or end of lines, and only spaces are used (never tabs).\n", "samples": "[{\"input\": \"<>=>\\nTITLE&VERSION&OPERATING SYSTEM&PRICE\\nSlug Farm&2.0&FreeBSD&49.99\\nFigs of Doom&1.7&Linux&9.98\\nSmiley Goes to Happy Town&11.0&Windows&129.25\\nWheelbarrow Motocross&1.0&BeOS&34.97\\n>\\nWhat is the answer?\\n42\\n<>\\nTweedledum&Tweedledee\\n\"Knock, knock.\"&\"Who$(quat)s there?\"\\n\"Boo.\"&\"Boo who?\"\\n\"Don$(quat)t cry, it$(quat)s only me.\"&(groan)\\n*\\n\\n\", \"output\": \"@-----------------------------------------------------------------@\\n| TITLE                     | VERSION | OPERATING SYSTEM |  PRICE |\\n|---------------------------+---------+------------------+--------|\\n| Slug Farm                 |     2.0 |     FreeBSD      |  49.99 |\\n| Figs of Doom              |     1.7 |      Linux       |   9.98 |\\n| Smiley Goes to Happy Town |    11.0 |     Windows      | 129.25 |\\n| Wheelbarrow Motocross     |     1.0 |       BeOS       |  34.97 |\\n@-----------------------------------------------------------------@\\n@---------------------@\\n| What is the answer? |\\n|---------------------|\\n|                  42 |\\n@---------------------@\\n@---------------------------------------------@\\n| Tweedledum                 |     Tweedledee |\\n|----------------------------+----------------|\\n| \"Knock, knock.\"            | \"Who$(quat)s there?\" |\\n| \"Boo.\"                     |     \"Boo who?\" |\\n| \"Don$(quat)t cry, it$(quat)s only me.\" |        (groan) |\\n@---------------------------------------------@\\n\"}]", "test_case_id": "1059", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 32768, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 23, "total_accepted_number": 17, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1061, "fields": {"title": "Easier Done than Said?", "description": "Password security is a tricky thing. Users prefer simple passwords that are easy to remember (like buddy), but such passwords are often insecure. Some sites use random computer-generated passwords (like xvtpzyo), but users have a hard time remembering them and sometimes leave them written on notes stuck to their computer. One potential solution is to generate &quot;pronounceable&quot; passwords that are relatively secure but still easy to remember.<p></p><p></p>FnordCom is developing such a password generator. You work in the quality control department, and it&#039;s your job to test the generator and make sure that the passwords are acceptable. To be acceptable, a password must satisfy these three rules:<p></p><p></p>It must contain at least one vowel.<p></p><p></p>It cannot contain three consecutive vowels or three consecutive consonants.<p></p><p></p>It cannot contain two consecutive occurrences of the same letter, except for &#039;ee&#039; or &#039;oo&#039;.<p></p><p></p>(For the purposes of this problem, the vowels are &#039;a&#039;, &#039;e&#039;, &#039;i&#039;, &#039;o&#039;, and &#039;u&#039;; all other letters are consonants.) Note that these rules are not perfect; there are many common/pronounceable words that are not acceptable.<p></p><p></p>", "input_description": "The input consists of one or more potential passwords, one per line, followed by a line containing only the word 'end' that signals the end of the file. Each password is at least one and at most twenty letters long and consists only of lowercase letters.\n", "output_description": "For each password, output whether or not it is acceptable, using the precise format shown in the example. ", "samples": "[{\"input\": \"a\\ntv\\nptoui\\nbontres\\nzoggax\\nwiinq\\neep\\nhouctuh\\nend\\n\", \"output\": \"<img src=uploadFiles\\1061.jpg>\"}]", "test_case_id": "1061", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 225, "total_accepted_number": 121, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1062, "fields": {"title": "Double Vision", "description": "The DoubleVision company designs inks and fonts that can be easily read by both humans and machines. They design their fonts on a rectangular grid. Shown below is a very simple 5x3 design for the first five digits. <p></p><p></p><pre><p></p><br />.o. .o. oo. oo. o.o<p></p><br />o.o .o. ..o ..o o.o<p></p><br />o.o .o. .o. oo. ooo<p></p><br />o.o .o. o.. ..o ..o<p></p><br /> .o. .o. ooo oo. ..o</pre><p></p><p></p>The ink appears to be normal black ink, but just underneath the surface DoubleVision adds a special polymer that can be detected by an infrared scanner. A human sees the black ink but not the polymer, and a machine sees the polymer but not the black ink. The only problem is that the polymer is much more expensive than the ink, so DoubleVision wants to use as little of it as possible. They have discovered that with many fonts, each symbol can be uniquely identified by at most two pixels. By only adding the polymer to one or two pixels per symbol, they drastically lower costs while still ensuring 100% accuracy in their scanners. The font shown above has this property; pixels that uniquely identify each letter are highlighted with &#039;#&#039;. (There are other choices that would work as well.) <p></p><p></p><pre><p></p><br />.#. .o. #o. oo. o.#<p></p><br />#.o .#. ..o ..o o.o<p></p><br />o.o .o. .o. #o. ooo<p></p><br />o.o .o. #.. ..o ..o<p></p><br /> .o. .o. ooo #o. ..o</pre><p></p><p></p>Your job is to write a program to determine if a given font has this property, and if so highlight the pixels. <p></p>", "input_description": "The input consists of one or more test cases, followed by a line containing '0 0 0' (three zeros) that signals the end of the input. Each test case begins with a line containing three positive integers n, r, and c, separated by a space: n is the number of symbols in the font, r is the number of rows in each grid, and c is the number of columns in each grid. The next r lines contain the image of each symbol, using the exact format shown in the examples: a dot '.' represents an empty part of the grid, a lowercase 'o' represents a pixel, and adjacent grids are separated by a space. The total width of each line will be at most 79 characters (not counting end-of-line characters), and r will be at most 10. The test cases are implicitly numbered starting with 1.\n", "output_description": "For test case i, first output a line that says 'Test i'. Then determine if each symbol can be uniquely identified with one or two pixels. If not, output a line with the word 'impossible'. Otherwise, output the font in the same format except that the identifying pixels for each symbol are replaced with '#'. \n\nIn general there may be several different pixels or pixel pairs that uniquely identify a symbol. To ensure that the output is unique, we add the following definition and rules. When comparing two pixels, the topmost-leftmost pixel is the one closest to the top of the grid. If both pixels are on the same row, then the topmost-leftmost is the one closest to the left of the grid. \n\nIf one pixel will work, highlight the topmost-leftmost pixel that works. Never highlight a two-pixel solution if a one-pixel solution is possible. If two pixels are needed, highlight the pair with the topmost-leftmost pixel. If two or more pairs have the same topmost-leftmost pixel, highlight the one with the topmost-leftmost other pixel. \n", "samples": "[{\"input\": \"3 2 2\\noo oo .o\\no. .o o.\\n3 2 2\\noo oo .o\\no. .o oo\\n5 5 3\\n.o. .o. oo. oo. o.o\\no.o .o. ..o ..o o.o\\no.o .o. .o. oo. ooo\\no.o .o. o.. ..o ..o\\n.o. .o. ooo oo. ..o\\n1 2 4\\n.o..\\n...o\\n0 0 0\\n\", \"output\": \"Test 1\\nimpossible\\nTest 2\\n#o #o .o\\n#. .# ##\\nTest 3\\n.#. .o. #o. oo. o.#\\n#.o .#. ..o ..o o.o\\no.o .o. .o. #o. ooo\\no.o .o. #.. ..o ..o\\n.o. .o. ooo #o. ..o\\nTest 4\\n.#..\\n...o\\n\"}]", "test_case_id": "1062", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 3, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1065, "fields": {"title": "Index Generation", "description": "Most nonfiction and reference books have an index to help readers find references to specific terms or concepts in the text. Here is a sample index. <p></p><p></p>larch, 4, 237, 238, 414 <p></p>+ Monty Python and, 64, 65, 66 <p></p>+ planting of, 17 <p></p>Lenny Kravitz, 50 <p></p>+ going his way, 53 <p></p>lumbago, 107 <p></p>mango <p></p>+ Chris Kattan, 380 <p></p>+ storage of, 87, 90 <p></p>+ use in Nethack, 500, 501 <p></p>+ Vitamin C content, 192 <p></p><p></p>Each index entry contains a primary entry followed by zero or more secondary entries, which begin with a &#039;+&#039;. Entries will normally be followed by a list of page references, but a primary entry might not be if at least one secondary entry is present (as is the case with mango, above). Primary entries are sorted, and secondary entries following a primary entry are also sorted. Sorting is case-insensitive. Page references for an entry are in ascending order and do not include duplicates. (A duplicate could occur if there are two or more identical entries on the same page.) <p></p><p></p>Your task is to read a document that has index information embedded within it and produce the index. Documents consist of one or more lines of ASCII text. The page number starts at 1, and the character &#039;&&#039; indicates the start of a new page (which adds 1 to the current page number). Index entries are indicated by a marker, which in its most elaborate form has the following syntax: <p></p><p></p>{text%primary$secondary} <p></p>Here text is the text to be indexed, primary is an alternative primary entry, and secondary is a secondary entry. Both &#039;%primary&#039; and &#039;$secondary&#039; are optional, but if both are present they must appear in the order given. If primary is present then it is used as the primary entry, and if not then text is used as the primary entry. If secondary is present then the marker adds a page reference for that secondary entry; otherwise it adds a page reference for the primary entry. A single marker cannot add a page reference for both a primary and secondary entry. Here are examples of each of the four possible types of marker, which correspond to four of the entries in the sample index above. <p></p><p></p>... his {lumbago} was acting up, so ... <p></p>... {Lenny%Lenny Kravitz} lit up the crowd with his version of ... <p></p>... Monty Python often used the {larch$Monty Python and} in ... <p></p>... when storing {mangos%mango$storage of}, be sure to ... <p></p>", "input_description": "The input consists of one or more documents, followed by a line containing only '**' that signals the end of the input. Documents are implictly numbered starting with 1. Each document consists of one or more lines of text followed by a line containing only '*'. Each line of text will be at most 79 characters long, not counting end-of-line characters. For document i, output the line 'DOCUMENT i' followed by the sorted index using the exact output format shown in the examples.\n", "output_description": "Note: \n\nA document will contain at most 100 markers, with at most 20 primary entries. \nA primary entry will have at most 5 secondary entries. \nAn entry will have at most 10 unique page references (not including duplicates). \nThe character '&' will not appear anywhere within a marker, and will appear at most 500 times within a document. \nThe character '*' is used only to signal the end of a document or the end of the input. \nThe characters '{', '}', '%', and '$' will only be used to define markers, and will not appear in any text or entries. \nA marker may span one or more lines. Every end-of-line within a marker must be converted to a single space. \nA space within a marker (including a converted end-of-line) is normally included in the text/entry, just like any other character. However, any space that immediately follows '{', immediately precedes '}', or is immediately adjacent to '%' or '$' must be ignored. \nThe total length of a marker, measured from the opening '{' to the closing '}', and in which all embedded end-of-lines are converted to spaces, will be at most 79 characters. \n", "samples": "[{\"input\": \"Call me Ishmael.\\n*\\nOne {fish $unary}, two {fish$ binary},&red {fish $ scarlet}, blue {fish$\\nazure}. & By { Dr. Seuss }.\\n*\\nThis is a {simple } & & { document} that &{\\nsimply %simple\\n$adverb\\n} & {illustrates %vision} &&&&& one {simple-minded% simple} {Judge}$(quat)s {vision} \\nfor what a {document } might { look % vision} like.\\n*\\n**\\n\", \"output\": \"DOCUMENT 1\\nDOCUMENT 2\\nDr. Seuss, 3\\nfish\\n+ azure, 2\\n+ binary, 1\\n+ scarlet, 2\\n+ unary, 1\\nDOCUMENT 3\\ndocument, 3, 10\\nJudge, 10\\nsimple, 1, 10\\n+ adverb, 4\\nvision, 5, 10\\n\"}]", "test_case_id": "1065", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 4, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1072, "fields": {"title": "Oil Pipeline", "description": "Rocky Oil owns several rectangular oil fields in which it is drilling new wells. It wants to connect all wells in a field to a single East-West pipeline using straight North-South pipes. Your task is to write a program that first finds the location of the E-W pipeline such that the total length of the N-S pipes in the field is minimal; then it must draw a map of the oil field, if possible. <p></p><p></p>Each rectangular oil field is a grid 94 units long in the E-W direction and 73 units long in the N-S direction. The grid uses integer coordinates, with the SW corner at (1,1) and the NE corner at (94,73). Oil wells may be at any integer coordinates within the grid, and all wells will appear at different positions. The E-W pipeline will stretch across the entire field at an integer N-S coordinate. Wells with the same E-W coordinate share the same pipe. In case there are multiple positions for the E-W pipeline giving the same minimal length, always choose the one furthest south (i.e., with the lowest N-S coordinate). <p></p><p></p>Consider the first input example below. With the E-W pipeline at 11, the well at E-W position 1 is on the pipeline and has length zero. The two wells at E-W position 69 can share a single pipe of length 18. The total length for all three wells is 18. If the E-W pipeline were at 20 there would be two N-S pipes, one of length 9 at position 1 and another of length 9 at position 69, again with a total length of 18. In fact, any E-W pipeline located from 11 to 20 results in a total length of 18, which is minimal. Since there is more than one position for the pipeline that minimizes the length, choose the southernmost position, which is 11. <p></p><p></p>Any map drawn must occupy at most 69 columns and 19 rows (not counting borders and labels) so it fits on a standard-sized display. The map must include the E-W pipeline, all wells, and all N-S pipes. Only that portion of the field actually containing wells should be drawn, using the smallest bounding rectangle whose edges are multiples of 5. The E-W pipeline will always stretch across the entire map, regardless of its width. Wells must be inside the bounding rectangle, not on any of its edges. These constraints may make it impossible to draw some oil fields. The first input example shows the largest map possible. <p></p>", "input_description": "The input consists of data for one or more oil fields, followed by a line containing 0 0 which signals the end of the input. Data for each oil field consists of one or more pairs of positive integers, one pair per line, representing the positions of oil wells in the field. The pair -1 -1 indicates the end of the data for a field. \n", "output_description": "For each oil field, output a line with a numbered header. Then output the map of the oil field, if possible. Otherwise, output a sentence with the location of the pipeline. Use the exact format shown below. \n\nUse '@' to represent an oil well, '*' to represent a pipe, and '.' (a period) to represent an empty grid location. Wells take precedence over pipes, so if a well and a pipe occupy the same location, use '@'. Draw a border around the mapped oil field, using '|' (a vertical bar) for N-S edges and '-' (a dash) for E-W edges, but mark every 5th grid position with '+', as shown in the examples. Label each '+' with its position in the oil field. The label for each N-S '+' comes immediately before the '+' sign. The label for the northernmost '+' must start at the beginning of the first line of output. Labels for an E-W '+' must always have the most significant digit immediately below the '+'. Contrary to the usual output conventions, some of the lines in the map will have leading blanks. \n\n", "samples": "[{\"input\": \"1 11\\n69 29\\n69 20\\n-1 -1\\n35 35\\n-1 -1\\n1 1\\n94 73\\n1 73\\n94 1\\n-1 -1\\n2 2\\n3 7\\n4 4\\n6 1\\n-1 -1\\n0 0\\n\", \"output\": \"OIL FIELD 1\\n30+----+----+----+----+----+----+----+----+----+----+----+----+----+----+\\n  |....................................................................@|\\n  |....................................................................*|\\n  |....................................................................*|\\n  |....................................................................*|\\n25+....................................................................*+\\n  |....................................................................*|\\n  |....................................................................*|\\n  |....................................................................*|\\n  |....................................................................*|\\n20+....................................................................@+\\n  |....................................................................*|\\n  |....................................................................*|\\n  |....................................................................*|\\n  |....................................................................*|\\n15+....................................................................*+\\n  |....................................................................*|\\n  |....................................................................*|\\n  |....................................................................*|\\n  |@********************************************************************|\\n10+----+----+----+----+----+----+----+----+----+----+----+----+----+----+\\n  0    5    10   15   20   25   30   35   40   45   50   55   60   65   70\\nOIL FIELD 2\\n40+----+----+\\n  |.........|\\n  |.........|\\n  |.........|\\n  |.........|\\n35+****@****+\\n  |.........|\\n  |.........|\\n  |.........|\\n  |.........|\\n30+----+----+\\n  30   35   40\\nOIL FIELD 3\\nMap is too big to draw for pipeline at 1\\nOIL FIELD 4\\n10+----+----+\\n  |.........|\\n  |.........|\\n  |..@......|\\n  |..*......|\\n 5+..*......+\\n  |..*@.....|\\n  |..**.....|\\n  |*@*******|\\n  |.....@...|\\n 0+----+----+\\n  0    5    10\\n\"}]", "test_case_id": "1072", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1073, "fields": {"title": "Programmer, Rank Thyself", "description": "Implement a ranking program similar to the one used for this programming contest. <p></p>", "input_description": "The input file contains one or more contests followed by a line containing only zero that signals the end of the file. Each contest begins with a line containing a positive integer c no greater than 20 indicating the number of teams in the contest, and is followed by c lines that contain a team name and the solution times for seven problems, separated by spaces. Team names consist of between one and ten letters. All team names within a contest are unique. Times are nonnegative integers no greater than 500. \n\nAs described in the Notes to Teams, teams are ranked first by greatest number of problems solved, then by least total time, then by least geometric mean of all nonzero times. Teams that are still tied are given the same numeric ranking and are listed in alphabetical order, using case-sensitive string comparison. The numeric ranking for a team is always one more than the number of teams ranked ahead of (not tied with) that team. For this problem all geometric means will be rounded to an integer as described below, and only the rounded value will be used when computing rankings and displaying results. \n\nIf all times are zero, then the geometric mean is also zero. Otherwise, if there are n nonzero times t1, ..., tn, then the geometric mean is defined to be \n\nexp ((ln t1 + ln t2 + ... + ln tn) / n) \n\nwhere exp x means ex and ln x means the natural logarithm of x. (There are other mathematically equivalent definitions of the geometric mean, but they may produce slightly different answers due to roundoff and/or overflow problems. Use this definition to get the same answers as the judges.) After computing the geometric mean, round it to an integer by adding 0.5 and truncating any fractional digits. (C/C++ and Java automatically truncate fractions when casting a floating-point type to an integral type. In Pascal use the trunc function.) \n\n", "output_description": "For each contest you must output the rankings in a table. All tables will have the same width, with the length equal to the number of teams entered in the contest. Use the exact format shown in the examples. Each contest has a numbered header followed by a table with one team entry per line. Each entry contains the ranking, team name, problems solved, total time, geometric mean, and then the individual solution times in the same order they appeared in the input. In the first example all values completely fill their fields. In general you may need to pad values with spaces (never tabs) so that they have the correct field width. The team name is left-justified, and all other fields are right-justified. The ranking always has two digits, including a leading zero if necessary. Spaces will never appear at the beginning or end of lines. \n", "samples": "[{\"input\": \"1\\nPlutonians 123 234 345 456 167 278 389\\n4\\nXap 0 0 0 0 0 0 0\\nFoo 20 30 0 50 40 0 10\\nBar 0 50 20 0 10 40 30\\nBaz 0 0 0 0 0 0 0\\n3\\nVenus 213 0 0 57 0 0 0\\nNeptune 0 0 0 117 153 0 0\\nMars 0 150 0 0 0 0 120\\n0\\n\", \"output\": \"CONTEST 1\\n01 Plutonians 7 1992 261 123 234 345 456 167 278 389\\nCONTEST 2\\n01 Bar        5  150  26   0  50  20   0  10  40  30\\n01 Foo        5  150  26  20  30   0  50  40   0  10\\n03 Baz        0    0   0   0   0   0   0   0   0   0\\n03 Xap        0    0   0   0   0   0   0   0   0   0\\nCONTEST 3\\n01 Venus      2  270 110 213   0   0  57   0   0   0\\n02 Mars       2  270 134   0 150   0   0   0   0 120\\n02 Neptune    2  270 134   0   0   0 117 153   0   0\\n\"}]", "test_case_id": "1073", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 66, "total_accepted_number": 27, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1074, "fields": {"title": "Safecracker", "description": "&quot;The item is locked in a Klein safe behind a painting in the second-floor library. Klein safes are extremely rare; most of them, along with Klein and his factory, were destroyed in World War II. Fortunately old Brumbaugh from research knew Klein&#039;s secrets and wrote them down before he died. A Klein safe has two distinguishing features: a combination lock that uses letters instead of numbers, and an engraved quotation on the door. A Klein quotation always contains between five and twelve distinct uppercase letters, usually at the beginning of sentences, and mentions one or more numbers. Five of the uppercase letters form the combination that opens the safe. By combining the digits from all the numbers in the appropriate way you get a numeric target. (The details of constructing the target number are classified.) To find the combination you must select five letters v, w, x, y, and z that satisfy the following equation, where each letter is replaced by its ordinal position in the alphabet (A=1, B=2, ..., Z=26). The combination is then vwxyz. If there is more than one solution then the combination is the one that is lexicographically greatest, i.e., the one that would appear last in a dictionary.&quot; <p></p><p></p>v - w2 + x3 - y4 + z5 = target <p></p><p></p>&quot;For example, given target 1 and letter set ABCDEFGHIJKL, one possible solution is FIECB, since 6 - 9&gt;2 + 53 - 34 + 25 = 1. There are actually several solutions in this case, and the combination turns out to be LKEBA. Klein thought it was safe to encode the combination within the engraving, because it could take months of effort to try all the possibilities even if you knew the secret. But of course computers didn&#039;t exist then.&quot; <p></p><p></p><p></p>&quot;Develop a program to find Klein combinations in preparation for field deployment. Use standard test methodology as per departmental regulations. <p></p>", "input_description": "Input consists of one or more lines containing a positive integer target less than twelve million, a space, then at least five and at most twelve distinct uppercase letters. The last line will contain a target of zero and the letters END; this signals the end of the input. \n", "output_description": "For each line output the unique Klein combination, or 'no solution' if there is no correct combination. Use the exact format shown below.\" \n\n", "samples": "[{\"input\": \"1 ABCDEFGHIJKL\\n11700519 ZAYEXIWOVU\\n3072997 SOUGHT\\n1234567 THEQUICKFROG\\n0 END\", \"output\": \"LKEBA\\nYOXUZ\\nGHOST\\nno solution\"}]", "test_case_id": "1074", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 34, "total_accepted_number": 18, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1075, "fields": {"title": "Tanning Salon", "description": "Tan Your Hide, Inc., owns several coin-operated tanning salons. Research has shown that if a customer arrives and there are no beds available, the customer will turn around and leave, thus costing the company a sale. Your task is to write a program that tells the company how many customers left without tanning. <p></p><p></p>", "input_description": "The input consists of data for one or more salons, followed by a line containing the number 0 that signals the end of the input. Data for each salon is a single line containing a positive integer, representing the number of tanning beds in the salon, followed by a space, followed by a sequence of uppercase letters. Letters in the sequence occur in pairs. The first occurrence indicates the arrival of a customer, the second indicates the departure of that same customer. No letter will occur in more than one pair. Customers who leave without tanning always depart before customers who are currently tanning. There are at most 20 beds per salon. \n", "output_description": "For each salon, output a sentence telling how many customers, if any, walked away. Use the exact format shown below. \n\n", "samples": "[{\"input\": \"2 ABBAJJKZKZ\\n3 GACCBDDBAGEE\\n3 GACCBGDDBAEE\\n1 ABCBCA\\n0\\n\", \"output\": \"All customers tanned successfully.\\n1 customer(s) walked away.\\nAll customers tanned successfully.\\n2 customer(s) walked away.\\n\"}]", "test_case_id": "1075", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 184, "total_accepted_number": 96, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1077, "fields": {"title": "Clay Bully", "description": "Ms. Terry is a pre-school art teacher who likes to have her students work with clay. One of her assignments is to form a lump of clay into a block and then measure the dimensions of the block. However, in every class, there is always one child who insists on taking some clay from some other child. Since Ms. Terry always gives every child in a class the same amount of clay to begin with, you can write a program that helps Ms. Terry find the bully and victim after she measures each child&#039;s finished block. <p></p>", "input_description": "There are one or more classes of students, followed by a final line containing only the value -1. Each class starts with a line containing an integer, n, which is the number of students in the class, followed by n lines of student information. Each line of student information consists of three positive integers, representing the dimensions of the clay block, followed by the student's first name. There can never be more than 9 students nor less than 2 students in any class. Each student's name is at most 8 characters. Ms. Terry always gives each student at most 250 cubic units of clay. There is exactly one bully and one victim in each class. \n", "output_description": "For each class print a single line exactly as shown in the sample output. ", "samples": "[{\"input\": \"3\\n10 10 2 Jill\\n5 3 10 Will\\n5 5 10 Bill\\n4\\n2 4 10 Cam\\n4 3 7 Sam\\n8 11 1 Graham\\n6 2 7 Pam\\n-1\\n\", \"output\": \"Bill took clay from Will.\\nGraham took clay from Cam.\"}]", "test_case_id": "1077", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 277, "total_accepted_number": 155, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1078, "fields": {"title": "Doubles", "description": "As part of an arithmetic competency program, your students will be given randomly generated lists of from 2 to 15 unique positive integers and asked to determine how many items in each list are twice some other item in the same list. You will need a program to help you with the grading. This program should be able to scan the lists and output the correct answer for each one. For example, given the list <p></p><p></p>1 4 3 2 9 7 18 22<p></p><p></p>your program should answer 3, as 2 is twice 1, 4 is twice 2, and 18 is twice 9. ", "input_description": "The input will consist of one or more lists of numbers. There will be one list of numbers per line. Each list will contain from 2 to 15 unique positive integers. No integer will be larger than 99. Each line will be terminated with the integer 0, which is not considered part of the list. A line with the single number -1 will mark the end of the file. The example input below shows 3 separate lists. Some lists may not contain any doubles.\n", "output_description": "The output will consist of one line per input list, containing a count of the items that are double some other item. ", "samples": "[{\"input\": \"1 4 3 2 9 7 18 22 0\\n2 4 8 10 0\\n7 5 11 13 1 3 0\\n-1\\n\", \"output\": \"3\\n2\\n0\"}]", "test_case_id": "1078", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 440, "total_accepted_number": 237, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1088, "fields": {"title": "Bowlstack", "description": "Baking bread is my favourite spare-time pursuit. I have a number of stainless steel mixing bowls with straight sides, a circular bottom and a wider circular top opening. Geometrically, my bowls are truncated circular cones and for this problem, the thickness of the metal may be disregarded. <p></p><p></p>I store these bowls stacked in the natural way, that is with a common vertical axis, and I stack them in an order that minimises the total height of the stack. Finding this minimum is the purpose of your program. <p></p><p></p>", "input_description": "On the first line of the input is a positive integer, telling the number of test cases to follow. Each case starts with one line containing an integer n, the number of bowls (2 \u2264 n \u2264 9). The following n lines each contain three positive integers h, r, R, specifying the height, the bottom radius and the top radius of the bowl, and r < R holds true. You may also assume that h, r, R < 1000. \n", "output_description": "For each test case, output one line containing the minimal stack height, truncated to an integer (note: truncated, not rounded). \n\n<img src=uploadFiles\\1088.jpg>", "samples": "[{\"input\": \"2\\n2\\n60 20 30\\n40 10 50\\n3\\n50 30 80\\n35 25 70\\n40 10 90\", \"output\": \"70\\n55\\n\"}]", "test_case_id": "1088", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 21, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1090, "fields": {"title": "Reduced ID Numbers", "description": "T. Chur teaches various groups of students at university U. Every U-student has a unique Student Identification Number (SIN). A SIN s is an integer in the range 0 \u2264 s \u2264 MaxSIN with MaxSIN = 106-1. T. Chur finds this range of SINs too large for identification within her groups. For each group, she wants to find the smallest positive integer m, such that within the group all SINs reduced modulo m are unique. <p></p>", "input_description": "On the first line of the input is a single positive integer N, telling the number of test cases (groups) to follow. Each case starts with one line containing the integer G (1 \u2264 G \u2264 300): the number of students in the group. The following G lines each contain one SIN. The SINs within a group are distinct, though not necessarily sorted. ", "output_description": "For each test case, output one line containing the smallest modulus m, such that all SINs reduced modulo m are distinct. ", "samples": "[{\"input\": \"2\\n1\\n124866\\n3\\n124866\\n111111\\n987651\\n\\n\", \"output\": \"1\\n8\"}]", "test_case_id": "1090", "hint": "\\n\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 422, "total_accepted_number": 142, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1092, "fields": {"title": "Guardian of Decency", "description": "Frank N. Stein is a very conservative high-school teacher. He wants to take some of his students on an excursion, but he is afraid that some of them might become couples. While you can never exclude this possibility, he has made some rules that he thinks indicates a low probability two persons will become a couple: <p></p><p></p><p></p>Their height differs by more than 40 cm. <p></p><p></p>They are of the same sex. <p></p><p></p>Their preferred music style is different. <p></p><p></p>Their favourite sport is the same (they are likely to be fans of different teams and that would result in fighting). <p></p><p></p><p></p>So, for any two persons that he brings on the excursion, they must satisfy at least one of the requirements above. Help him find the maximum number of persons he can take, given their vital information. <p></p>", "input_description": "The first line of the input consists of an integer T \u2264 100 giving the number of test cases. The first line of each test case consists of an integer N \u2264 500 giving the number of pupils. Next there will be one line for each pupil consisting of four space-separated data items: \n\n\nan integer h giving the height in cm; \n\na character 'F' for female or 'M' for male; \n\na string describing the preferred music style; \n\na string with the name of the favourite sport. \n\n\nNo string in the input will contain more than 100 characters, nor will any string contain any whitespace. \n", "output_description": "For each test case in the input there should be one line with an integer giving the maximum number of eligible pupils. ", "samples": "[{\"input\": \"2\\n4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\\n8\\n27 M romance programming\\n194 F baroque programming\\n67 M baroque ping-pong\\n51 M classicism programming\\n80 M classicism Paintball\\n35 M baroque ping-pong\\n39 F romance ping-pong\\n110 M romance Paintball\\n\\n\", \"output\": \"3\\n7\"}]", "test_case_id": "1092", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 60, "total_accepted_number": 14, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1095, "fields": {"title": "Consecutive Digits in a Rational Number", "description": "As a recruiting ploy, Google once posted billboards in Harvard Square and in the Silicon Valley area just stating \u201c{first 10-digit prime found in consecutive digits of e}.com\u201d. In other words, find that 10-digit sequence and then connect to the web site ? and find out that Google is trying to hire people who can solve a particular kind of problem. <br /><br />Not to be outdone, Gaggle (a loosy-goosy fuzzy logic search firm), has devised its own recruiting problem. Consider the base 7 expansion of a rational number. For example, the first few digits of the base 7 expansion of 1/5<sub>10</sub> = 0.12541...<sub>7</sub>, 33/4<sub>10 </sub>= 11.15151...<sub>7</sub>, and 6/49<sub>10</sub> = 0.06000...<sub>7</sub>, From this expansion, find the digits in a particular range of positions to the right of the decimal point. <br /><br />", "input_description": "The input file begins with a line containing a single integer specifying the number of problem sets in the file. Each problem set is specified by four base 10 numbers on a single line, n d b e, where n and d are the numerator and denominator of the rational number and 0 <= n <= 5,000 and 1 <= d <= 5,000. b and e are the beginning and ending positions for the desired range of digits, with 0 <= b,e <= 250 and 0 <= (e-b) <= 20. Note that 0 is the position immediately to the right of the decimal point. ", "output_description": "Each problem set will be numbered (beginning at one) and will generate a single line: \n\n           Problem set k: n / d, base 7 digits b through e: result \n\nwhere k is replaced by the problem set number, result is your computed result, and the other values are the corresponding input values", "samples": "[{\"input\": \"4\\n1 5 0 0\\n6 49 1 3\\n33 4 2 7\\n511 977 122 126\\n\\n\", \"output\": \"Problem set 1: 1 / 5, base 7 digits 0 through 0: 1\\nProblem set 2: 6 / 49, base 7 digits 1 through 3: 600\\nProblem set 3: 33 / 4, base 7 digits 2 through 7: 151515\\nProblem set 4: 511 / 977, base 7 digits 122 through 126: 12425\\n\\n\"}]", "test_case_id": "1095", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 62, "total_accepted_number": 28, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1096, "fields": {"title": "Leapin' Lizards", "description": "Your platoon of wandering lizards has entered a strange room in the labyrinth you are exploring. As you are looking around for hidden treasures, one of the rookies steps on an innocent-looking stone and the room&#039;s floor suddenly disappears! Each lizard in your platoon is left standing on a fragile-looking pillar, and a fire begins to rage below... <p></p><p></p>Leave no lizard behind! Get as many lizards as possible out of the room, and report the number of casualties. <p></p><p></p>The pillars in the room are aligned as a grid, with each pillar one unit away from the pillars to its east, west, north and south. Pillars at the edge of the grid are one unit away from the edge of the room (safety). Not all pillars necessarily have a lizard. A lizard is able to leap onto any unoccupied pillar that is within d units of his current one. A lizard standing on a pillar within leaping distance of the edge of the room may always leap to safety... but there&#039;s a catch: each pillar becomes weakened after each jump, and will soon collapse and no longer be usable by other lizards. Leaping onto a pillar does not cause it to weaken or collapse; only leaping off of it causes it to weaken and eventually collapse. Only one lizard may be on a pillar at any given time.<p></p>", "input_description": "The input file will begin with a line containing a single integer representing the number of test cases, which is at most 25. Each test case will begin with a line containing a single positive integer n representing the number of rows in the map, followed by a single non-negative integer d representing the maximum leaping distance for the lizards. Two maps will follow, each as a map of characters with one row per line. The first map will contain a digit (0-3) in each position representing the number of jumps the pillar in that position will sustain before collapsing (0 means there is no pillar there). The second map will follow, with an 'L' for every position where a lizard is on the pillar and a '.' for every empty pillar. There will never be a lizard on a position where there is no pillar. \n\nEach input map is guaranteed to be a rectangle of size n x m, where 1 <= n <= 20 and 1 <= m <= 20. The leaping distance is always 1 <= d <= 3.\n", "output_description": "For each input case, print a single line containing the number of lizards that could not escape. The format should follow the samples provided below.\n", "samples": "[{\"input\": \"4\\n3 1\\n1111\\n1111\\n1111\\nLLLL\\nLLLL\\nLLLL\\n3 2\\n00000\\n01110\\n00000\\n.....\\n.LLL.\\n.....\\n3 1\\n00000\\n01110\\n00000\\n.....\\n.LLL.\\n.....\\n5 2\\n00000000\\n02000000\\n00321100\\n02000000\\n00000000\\n........\\n........\\n..LLLL..\\n........\\n........\\n\\n\", \"output\": \"Case #1: 2 lizards were left behind.\\nCase #2: no lizard was left behind.\\nCase #3: 3 lizards were left behind.\\nCase #4: 1 lizard was left behind.\\n\\n\"}]", "test_case_id": "1096", "hint": "Brute force methods examining every path will likely exceed the allotted time limit.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 15, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1098, "fields": {"title": "Who needs 8 Queens when you can have N?", "description": "The N-Queens problem is an obvious expansion of the eight-queens problem that has been around for a long time: Given a board with NxN squares and N queens, position the queens on the board such that no two queens can attack each other; in other words, so that no two queens sit on the same horizontal row, vertical column, or along either possible diagonal (row+column = k for one, row?column = k for the other).<p></p><p></p>Finding all the solutions to the problem for a given N is known to be worse than exponential in difficulty \u2015 O(N!). One can, however, find a single solution to the problem in significantly less time if one looks beyond the standard backtracking solution to another possible solution strategy.<p></p><p></p>This problem asks you to find such a solution strategy. Note that the solution found may not necessarily be the one obtained first in the backtracking approach.<p></p><p></p>Since there is a huge number of candidate solutions for any but the very smallest values of N, the judges have access to a solution validation program. Consequently it is critical that you abide by the output specifications, since they constitute the input specifications for the validator.", "input_description": "The input file begins with a line containing a single integer (no white space) specifying the number of problem specifications in the file. Exactly that many lines follow, each giving the value of N (with no white space) for which you are to solve the N-queens problem. The values of N may range from 4 up through 300; in other words, you should be able to find some solution to the 300-Queens problem in less than 120 seconds.", "output_description": "For each problem, output on a single line that number (N). Following that, give the permutation vector of column positions (0 through N?1) that specify the queen\u2019s position on each succeeding row. The permutation vector is to be of N integers separated by white space. You may choose for yourself whether you use simple blanks for white space (giving the solution vector on one line) or you put each value on a separate line. In the interest of printing, the sample output here will use an approach that generates lines of values that do not exceed 65 characters in length.\nYou are not held to that format.", "samples": "[{\"input\": \"4\\n4\\n8\\n25\\n50\", \"output\": \"4\\n2 0 3 1\\n8\\n2 7 3 6 0 5 1 4\\n25\\n14 7 18 22 13 10 24 11 1 20 6 0 15 8 5 16 23 17 4 21 12 2 19 3 9\\n50\\n22 13 15 44 27 3 1 4 19 40 20 5 31 49 7 29 18 6 2 36 28 12 38 43\\n39 11 26 14 0 30 34 8 41 9 16 10 17 33 45 42 46 24 47 35 32 23\\n25 37 21 48\\n\"}]", "test_case_id": "1098", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 3, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1099, "fields": {"title": "Time to Graduate", "description": "A prospective CS student is investigating how many semesters it will take to graduate from a variety of different universities. Each university provides a list of required courses, their prerequisites, and when each course is offered. Given this information, determine the minimum number of semesters to graduate. <p></p><p></p>Consider the following example. A student is required to take 4 courses, mt42, cs123, cs456, and cs789. mt42 is only offered in the fall semester and has no prerequisites. Similarly, cs123 is only offered in the spring semester and has no prerequisites. cs456 is only offered in the spring semester and has both cs123 and mt42 as prerequisites. Finally, cs789 is offered in both fall and spring and has cs456 as its only prerequisite. The shortest time to graduate is 5 semesters, by taking mt42 in the fall, cs123 in the next spring, cs456 the following spring (since it is not offered in the fall) and finally cs789 the following fall. <p></p><p></p>For this problem, there are only two semesters, fall and spring. Always start counting semesters from the fall. <p></p><p></p>In addition to the fall/spring scheduling issues, there is one slight complication. In order to keep the dormitories full, each university limits the number of courses that can be taken in any semester. This limit appears as part of the input data. The third example below illustrates this issue.<p></p>", "input_description": "There are one to twenty-five data sets, followed by a final line containing only the integers -1 -1. A data set starts with a line containing two positive integers n, 1 <= n <= 12, which is the number of courses in this data set and m, 2 <= m <= 6, which is the maximum number of courses that can be taken in any single semester. The next line contains the n course identifiers. Each is a 1-5 character string from the set {a-z, 0-9}. Following the course identifiers is the individual course information. This consists of n lines, one line for each course, containing the course identifier, semester offered ('F'=Fall, 'S'=Spring, 'B'=Both semesters), the number of prerequisite courses, p, 0 <= p <= 5, and finally p prerequisite course identifiers. The first example data set below corresponds to the problem described above. \n", "output_description": "The output contains one line for each data set, formatted as shown in the sample output.", "samples": "[{\"input\": \"4 6\\ncs123 mt42 cs456 cs789\\nmt42 F 0\\ncs123 S 0\\ncs456 S 2 cs123 mt42\\ncs789 B 1 cs456\\n3 6\\nmath1 comp2 comp3\\ncomp3 S 1 comp2\\nmath1 S 0\\ncomp2 F 1 math1\\n4 3\\nm10 m20 c33 c44\\nm10 B 0\\nm20 B 0\\nc33 B 0\\nc44 B 0\\n-1 -1\\n\\n\", \"output\": \"The minimum number of semesters required to graduate is 5.\\nThe minimum number of semesters required to graduate is 4.\\nThe minimum number of semesters required to graduate is 2.\\n\"}]", "test_case_id": "1099", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 26, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1100, "fields": {"title": "Copier Reduction", "description": "What do you do if you need to copy a 560x400mm image onto a standard sheet of US letter-size paper (which is about 216x280mm), while keeping the image as large as possible? You can rotate the image 90 degrees (so that it is in &quot;landscape&quot; mode), then reduce it to 50% of its original size so that it is 200x280mm. Then it will fit on the paper without overlapping any edges. Your job is to solve this problem in general.<p></p>", "input_description": "The input consists of one or more test cases, each of which is a single line containing four positive integers A, B, C, and D, separated by a space, representing an AxBmm image and a CxDmm piece of paper. All inputs will be less than one thousand. Following the test cases is a line containing four zeros that signals the end of the input.\n", "output_description": "For each test case, if the image fits on the sheet of paper without changing its size (but rotating it if necessary), then the output is 100%. If the image must be reduced in order to fit, the output is the largest integer percentage of its original size that will fit (rotating it if necessary). Output the percentage exactly as shown in the examples below. You can assume that no image will need to be reduced to less than 1% of its original size, so the answer will always be an integer percentage between 1% and 100%, inclusive.\n", "samples": "[{\"input\": \"560 400 218 280\\n10 25 88 10\\n8 13 5 1\\n9 13 10 6\\n199 333 40 2\\n75 90 218 280\\n999 99 1 10\\n0 0 0 0\", \"output\": \"50%\\n100%\\n12%\\n66%\\n1%\\n100%\\n1%\\n\\n\"}]", "test_case_id": "1100", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 387, "total_accepted_number": 166, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1101, "fields": {"title": "Overflowing Bookshelf", "description": "Agnes C. Mulligan is a fanatical bibliophile ? she is constantly buying new books, and trying to find space for those books. In particular, she has a shelf for her &quot;to be read&quot; books, where she puts her newest books. When she decides to read one of these books, she removes it from the shelf, making space for more books. Sometimes, however, she buys a new book and puts it on the shelf, but because of limited space, this pushes one or more books off the shelf at the other end. She always adds books on the left side of the shelf, making books fall off the right side. Of course, she can remove a book from any location on the shelf when she wants to read one. <p></p><p></p>Your task will be to write a simulator that will keep track of books added and removed from a shelf. At the end of the simulation, display the books remaining on the shelf, in order from left to right. Books in each simulation will be identified by a unique, positive integer, 0 &lt; I &lt;= 100. There are three types of events in the simulation: <p></p><p></p><p></p>Add: A new book is pushed on the left end of the shelf, pushing other books to the right as needed. No book moves to the right unless it is pushed by an adjacent (touching) book on its left. Any book that is not entirely on the shelf falls off the right edge. No single book will ever be wider than the given shelf. No book that is currently on the shelf will be added again. <p></p><p></p>Remove: If the book is on the shelf, then the book is removed from the shelf, leaving a hole. If the book isn&#039;t on the shelf, the operation is ignored. <p></p><p></p>End: End the simulation for this case and print the contents of the shelf. <p></p>", "input_description": "The input file will contain data for one or more simulations. The end of the input is signalled by a line containing -1. Each simulation will begin with the integer width of the shelf, s, 5 <= s <= 100, followed by a series of add and remove events. An add event is a single line beginning with an upper case 'A' followed by the book ID, followed by the integer width of the book, w, 0 < w <= s. A remove event is a single line beginning with an upper case 'R' followed by the the book ID. Finally, the end event is a line containing only a single upper case 'E'. Each number in an event is preceded by a single blank.\n", "output_description": "For each simulation case, print a single line containing a label (as shown in the output sample), followed by the list of IDs of books remaining on the shelf, in order from left to right.\n", "samples": "[{\"input\": \"10\\nR 3\\nA 6 5\\nA 42 3\\nA 3 5\\nA 16 2\\nA 15 1\\nR 16\\nE\\n7\\nA 49 6\\nA 48 2\\nR 48\\nE\\n5\\nA 1 1\\nA 2 1\\nA 3 1\\nR 2\\nA 4 1\\nA 5 1\\nR 5\\nR 4\\nA 6 1\\nA 7 4\\nE\\n-1\\n\\n\", \"output\": \"PROBLEM 1: 15 3\\nPROBLEM 2:\\nPROBLEM 3: 7 6\\n\"}]", "test_case_id": "1101", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 70, "total_accepted_number": 37, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1102, "fields": {"title": "Netiquette", "description": "Mr. Manners teaches netiquette (&quot;net etiquette&quot;, particularly as it applies to email) at the local community college. There are many different aspects to proper netiquette, including courtesy, correct spelling, and correct grammar. Through experience Mr. Manners has found that his college&#039;s email system does a good job of catching most spelling and grammatical errors, and he&#039;s also found that most of his students are courteous. So there are four violations of netiquette that Mr. Manners pays careful attention to, and he&#039;s devised a quick way to test for them. A message is suspicious if it contains any of the following: <p></p><p></p><p></p>1.two adjacent uppercase letters, <p></p>(because you might be SHOUTING) <p></p><p></p>2.a digit adjacent to a letter, <p></p>(because you might be l33t, d00d) <p></p><p></p>3.an isolated character other than a, A, or I, <p></p>(because u r probably abbreviating words; the spell checker doesn&#039;t catch this for some reason) <p></p><p></p>4.two adjacent punctuation marks, unless one of them is a double quote (the character &quot;). <p></p>(because you might be using an emoticon :-) <p></p><p></p>For this problem, all characters in an email message are printable ASCII characters with codes in the range 32..126 (inclusive). A punctuation mark is any character other than a letter, digit, or space. Two characters are adjacent if they are right next to each other, with no characters in between. An isolated character is one whose only adjacent characters (if any) are spaces. Your job is to write a program that can tell if a one-line email message is suspicious. <p></p>", "input_description": "The input consists of one or more email messages, followed by a line containing only # that signals the end of the input. Each message is on a line by itself, does not begin or end with a space, and does not contain consecutive spaces. End-of-line characters occur at the end of every line (of course), but they are not considered to be part of the message. A message will contain 1..80 characters.\n", "output_description": "For each message, output suspicious if it meets one or more of the four criteria defined above, and output OK otherwise. In the examples below, the second email meets all four criteria, and the fourth and sixth emails meet one criterion each.\n", "samples": "[{\"input\": \"\"This is a safe message,\" said 50 wise men.\\nDON$(quat)T b l8 for the Apple ][ user$(quat)s group meeting.\\nI ate at \"Al$(quat)s Big Burritos\" for lunch!\\nIt$(quat)s not OK to burp at your grandmother.\\n*BuT* YoU _CaN_ Do ThIs, YoU KnOw.\\nWe 8 eight oranges.\\n#\\n\\n\", \"output\": \"OK\\nsuspicious\\nOK\\nsuspicious\\nOK\\nsuspicious\\n\\n\"}]", "test_case_id": "1102", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 155, "total_accepted_number": 37, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1103, "fields": {"title": "Painter", "description": "The local toy store sells small fingerpainting kits with between three and twelve 50ml bottles of paint, each a different color. The paints are bright and fun to work with, and have the useful property that if you mix X ml each of any three different colors, you get X ml of gray. (The paints are thick and &quot;airy&quot;, almost like cake frosting, and when you mix them together the volume doesn&#039;t increase, the paint just gets more dense.) None of the individual colors are gray; the only way to get gray is by mixing exactly three distinct colors, but it doesn&#039;t matter which three. Your friend Emily is an elementary school teacher and every Friday she does a fingerpainting project with her class. Given the number of different colors needed, the amount of each color, and the amount of gray, your job is to calculate the number of kits needed for her class.<p></p>", "input_description": "The input consists of one or more test cases, followed by a line containing only zero that signals the end of the input. Each test case consists of a single line of five or more integers, which are separated by a space. The first integer N is the number of different colors (3 <= N <= 12). Following that are N different nonnegative integers, each at most 1,000, that specify the amount of each color needed. Last is a nonnegative integer G <= 1,000 that specifies the amount of gray needed. All quantities are in ml. \n\n", "output_description": "For each test case, output the smallest number of fingerpainting kits sufficient to provide the required amounts of all the colors and gray. Note that all grays are considered equal, so in order to find the minimum number of kits for a test case you may need to make grays using different combinations of three distinct colors.", "samples": "[{\"input\": \"3 40 95 21 0\\n7 25 60 400 250 0 60 0 500\\n4 90 95 75 95 10\\n4 90 95 75 95 11\\n5 0 0 0 0 0 333\\n0\\n\\n\", \"output\": \"2\\n8\\n2\\n3\\n4\\n\\n\"}]", "test_case_id": "1103", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 66, "total_accepted_number": 33, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1106, "fields": {"title": "Symmetric Order", "description": "In your job at Albatross Circus Management (yes, it&#039;s run by a bunch of clowns), you have just finished writing a program whose output is a list of names in nondescending order by length (so that each name is at least as long as the one preceding it). However, your boss does not like the way the output looks, and instead wants the output to appear more symmetric, with the shorter strings at the top and bottom and the longer strings in the middle. His rule is that each pair of names belongs on opposite ends of the list, and the first name in the pair is always in the top part of the list. In the first example set below, Bo and Pat are the first pair, Jean and Kevin the second pair, etc. ", "input_description": "The input consists of one or more sets of strings, followed by a final line containing only the value 0. Each set starts with a line containing an integer, n, which is the number of strings in the set, followed by n strings, one per line, sorted in nondescending order by length. None of the strings contain spaces. There is at least one and no more than 15 strings per set. Each string is at most 25 characters long. \n", "output_description": "For each input set print \"SET n\" on a line, where n starts at 1, followed by the output set as shown in the sample output.", "samples": "[{\"input\": \"7\\nBo\\nPat\\nJean\\nKevin\\nClaude\\nWilliam\\nMarybeth\\n6\\nJim\\nBen\\nZoe\\nJoey\\nFrederick\\nAnnabelle\\n5\\nJohn\\nBill\\nFran\\nStan\\nCece\\n0\\n\\n\", \"output\": \"SET 1\\nBo\\nJean\\nClaude\\nMarybeth\\nWilliam\\nKevin\\nPat\\nSET 2\\nJim\\nZoe\\nFrederick\\nAnnabelle\\nJoey\\nBen\\nSET 3\\nJohn\\nFran\\nCece\\nStan\\nBill\\n\\n\"}]", "test_case_id": "1106", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 30000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 346, "total_accepted_number": 185, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1108, "fields": {"title": "Primary X-Subfactor Series", "description": "Let n be any positive integer. A factor of n is any number that divides evenly into n, without leaving a remainder. For example, 13 is a factor of 52, since 52/13 = 4. A subsequence of n is a number without a leading zero that can be obtained from n by discarding one or more of its digits. For example, 2, 13, 801, 882, and 1324 are subsequences of 8013824, but 214 is not (you can&#039;t rearrange digits), 8334 is not (you can&#039;t have more occurrences of a digit than appear in the original number), 8013824 is not (you must discard at least one digit), and 01 is not (you can&#039;t have a leading zero). A subfactor of n is an integer greater than 1 that is both a factor and a subsequence of n. 8013824 has subfactors 8, 13, and 14. Some numbers do not have a subfactor; for example, 6341 is not divisible by 6, 3, 4, 63, 64, 61, 34, 31, 41, 634, 631, 641, or 341. <p></p><p></p>An x-subfactor series of n is a decreasing series of integers n1, ..., nk, in which (1) n = n1, (2) k &gt;= 1, (3) for all 1 &lt;= i &lt; k, ni+1 is obtained from ni by first discarding the digits of a subfactor of ni, and then discarding leading zeros, if any, and (4) nk has no subfactor. The term &quot;x-subfactor&quot; is meant to suggest that a subfactor gets x&#039;ed, or discarded, as you go from one number to the next. For example, 2004 has two distinct x-subfactor series, the second of which can be obtained in two distinct ways. The highlighted digits show the subfactor that was removed to produce the next number in the series. <p></p><p></p><p></p>2004   4<p></p>2004   200   0<p></p>2004   200   0 <p></p><p></p>The primary x-subfactor series has maximal length (the largest k possible, using the notation above). If there are two or more maximal-length series, then the one with the smallest second number is primary; if all maximal-length series have the same first and second numbers, then the one with the smallest third number is primary; and so on. Every positive integer has a unique primary x-subfactor series, although it may be possible to obtain it in more than one way, as is the case with 2004. <p></p>", "input_description": "The input consists of one or more positive integers, each less than one billion, without leading zeroes, and on a line by itself. Following is a line containing only \"0\" that signals the end of the input. \n\n", "output_description": "For each positive integer, output its primary x-subfactor series using the exact format shown in the examples below.\n", "samples": "[{\"input\": \"123456789\\n7\\n2004\\n6341\\n8013824\\n0\\n\\n\", \"output\": \"123456789 12345678 1245678 124568 12456 1245 124 12 1\\n7\\n2004 200 0\\n6341\\n8013824 13824 1324 132 12 1\"}]", "test_case_id": "1108", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 30000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 2, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1111, "fields": {"title": "Crashing Robots", "description": "In a modernized warehouse, robots are used to fetch the goods. Careful planning is needed to ensure that the robots reach their destinations without crashing into each other. Of course, all warehouses are rectangular, and all robots occupy a circular floor space with a diameter of 1 meter. Assume there are N robots, numbered from 1 through N. You will get to know the position and orientation of each robot, and all the instructions, which are carefully (and mindlessly) followed by the robots. Instructions are processed in the order they come. No two robots move simultaneously; a robot always completes its move before the next one starts moving. <p></p>A robot crashes with a wall if it attempts to move outside the area of the warehouse, and two robots crash with each other if they ever try to occupy the same spot.", "input_description": "The first line of input is K, the number of test cases. Each test case starts with one line consisting of two integers, 1 <= A, B <= 100, giving the size of the warehouse in meters. A is the length in the EW-direction, and B in the NS-direction. \nThe second line contains two integers, 1 <= N, M <= 100, denoting the numbers of robots and instructions respectively. \nThen follow N lines with two integers, 1 <= Xi <= A, 1 <= Yi <= B and one letter (N, S, E or W), giving the starting position and direction of each robot, in order from 1 through N. No two robots start at the same position. \n\n<img src=uploadFiles\\1111.jpg>\n\nFinally there are M lines, giving the instructions in sequential order. \nAn instruction has the following format: \n< robot #> < action> < repeat> \nWhere is one of \n\nL: turn left 90 degrees, \n\nR: turn right 90 degrees, or \n\nF: move forward one meter,\n\nand 1 <= < repeat> <= 100 is the number of times the robot should perform this single move.\n", "output_description": "Output one line for each test case: \n\n\n   Robot i crashes into the wall, if robot i crashes into a wall. (A robot crashes into a wall if Xi = 0, Xi = A + 1, Yi = 0 or Yi = B + 1.) \n\n   Robot i crashes into robot j, if robots i and j crash, and i is the moving robot. \n\n   OK, if no crashing occurs.\n\nOnly the first crash is to be reported.", "samples": "[{\"input\": \"4\\n5 4\\n2 2\\n1 1 E\\n5 4 W\\n1 F 7\\n2 F 7\\n5 4\\n2 4\\n1 1 E\\n5 4 W\\n1 F 3\\n2 F 1\\n1 L 1\\n1 F 3\\n5 4\\n2 2\\n1 1 E\\n5 4 W\\n1 L 96\\n1 F 2\\n5 4\\n2 3\\n1 1 E\\n5 4 W\\n1 F 4\\n1 L 1\\n1 F 20\\n\", \"output\": \"Robot 1 crashes into the wall\\nRobot 1 crashes into robot 2\\nOK\\nRobot 1 crashes into robot 2\\n\"}]", "test_case_id": "1111", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 100, "total_accepted_number": 52, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1121, "fields": {"title": "Dividing", "description": "Marsha and Bill own a collection of marbles. They want to split the collection among themselves so that both receive an equal share of the marbles. This would be easy if all the marbles had the same value, because then they could just split the collection in half. But unfortunately, some of the marbles are larger, or more beautiful than others. So, Marsha and Bill start by assigning a value, a natural number between one and six, to each marble. Now they want to divide the marbles so that each of them gets the same total value. Unfortunately, they realize that it might be impossible to divide the marbles in this way (even if the total value of all marbles is even). For example, if there are one marble of value 1, one of value 3 and two of value 4, then they cannot be split into sets of equal value. So, they ask you to write a program that checks whether there is a fair partition of the marbles. <p></p>", "input_description": "Each line in the input file describes one collection of marbles to be divided. The lines contain six non-negative integers n1 , . . . , n6 , where ni is the number of marbles of value i. So, the example from above would be described by the input-line \"1 0 1 2 0 0\". The maximum total number of marbles will be 20000. \nThe last line of the input file will be \"0 0 0 0 0 0\"; do not process this line. \n", "output_description": "For each collection, output \"Collection #k:\", where k is the number of the test case, and then either \"Can be divided.\" or \"Can't be divided.\". \nOutput a blank line after each test case. \n", "samples": "[{\"input\": \"1 0 1 2 0 0 \\n1 0 0 0 1 1 \\n0 0 0 0 0 0 \\n\", \"output\": \"Collection #1:\\nCan$(quat)t be divided.\\n\\nCollection #2:\\nCan be divided.\\n\"}]", "test_case_id": "1121", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 225, "total_accepted_number": 70, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1122, "fields": {"title": "Dreisam Equations", "description": "During excavations in the Dreisamwuste, a desert on some far away and probably uncivilized planet, sheets of paper containing mysterious symbols had been found. After a long investigation, the project scientists have concluded that the symbols might be parts of equations. If this were true, it would be proof that the Dreisamwuste was civilized a long long time ago. <p></p>The problem, however, is that the only symbols found on the sheets are digits, parantheses and equality signs. There is strong evidence that the people living in the Dreisamwuste knew only of three arithmetic operations: addition, subtraction, and multiplication. It is also known that the people of the Dreisamwuste did not have prioritization rules for arithmetic operations - they evaluate all terms strictly left to right. For example, for them the term 3 + 3 * 5 would be equal to 30, and not 18. <p></p><p></p>But currently, the sheets do not contain any arithmetic operators. So if the hypothesis is true, and the numbers on the sheets form equations, then the operators must have faded away over time. <p></p><p></p>You are the computer expert who is supposed to find out whether the hypothesis is sensible or not. For some given equations (without arithmetic operators) you must find out if there is a possibility to place +, -, and * in the expression, so that it yields a valid equation. For example, on one sheet, the string &quot;18=7 (5 3) 2&quot; has been discovered. Here, one possible solution is &quot;18=7+(5-3)*2&quot;. But if there was a sheet containing &quot;5=3 3&quot;, then this would mean that the Dreisamwuste people did not mean an equation when writing this. <p></p>", "input_description": "Each equation to deal with occupies one line in the input. Each line begins with a positive integer (less than 230) followed by an equality sign =. (For your convenience, the Dreisamwuste inhabitants used equations with trivial left sides only.) This is followed by up to 12 positive integers forming the right side of the equation. (The product of these numbers will be less than 230.) There might be some parentheses around groups of one or more numbers. There will be no line containing more than 80 characters. There is no other limit for the amount of the parentheses in the equation. There will always be at least one space or parenthesis between two numbers, otherwise the occurrence of white space is unrestricted. \n\nThe line containing only the number 0 terminates the input, it should not be processed. \n", "output_description": "For each equation, output the line \"Equation #n:\", where n is the number of the equation. Then, output one line containing a solution to the problem, i. e. the equation with the missing +, -, and * signs inserted. Do not print any white space in the equation. \n\nIf there is no way to insert operators to make the equation valid, then output the line \"Impossible\". \n\nOutput one blank line after each test case. \n", "samples": "[{\"input\": \"18 = 7 (5 3) 2\\n30 = 3 3 5\\n18 = 3 3 5\\n5 = 3 3\\n0\\n\", \"output\": \"Equation #1:\\n18=7+(5-3)*2\\n\\nEquation #2:\\n30=3+3*5\\n\\nEquation #3:\\nImpossible\\n\\nEquation #4:\\nImpossible\\n\"}]", "test_case_id": "1122", "hint": "In case of mutiple answers, output the least one in order (+ &lt; - &lt; *).\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 22, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1123, "fields": {"title": "Formatting Text", "description": "Writings e-mails is fun, but, unfortunately, they do not look very nice, mainly because not all lines have the same lengths. In this problem, your task is to write an e-mail formatting program which reformats a paragraph of an e-mail (e.g. by inserting spaces) so that, afterwards, all lines have the same length (even the last one of each paragraph). <p></p>The easiest way to perform this task would be to insert more spaces between the words in lines which are too short. But this is not the best way. Consider the following example: <p></p><p></p>**************************** <p></p>This is the example you are <p></p>actually considering. <p></p><p></p>Let us assume that we want to get lines as long as the row of stars. Then, by simply inserting spaces, we would get <p></p><p></p>**************************** <p></p>This is the example you are <p></p>actually considering. <p></p><p></p>But this looks rather odd because of the big gap in the second line. By moving the word ``are&#039;&#039; from the first to the second line, we get a better result: <p></p><p></p>**************************** <p></p>This is the example you <p></p>are actually considering. <p></p><p></p>Of course, this has to be formalized. To do this, we assign a badness to each gap between words. The badness assigned to a gap of n spaces is (n - 1)^2. The goal of the program is to minimize the sum of all badnesses. For example, the badness of the first example is 1 + 7^2 = 50 whereas the badness of the second one is only 1 + 1 + 1 + 4 + 1 + 4 = 12. <p></p><p></p>In the output, every line has to start and to end with a word. (I.e. there cannot be a gap at the beginning or the end of a line.) The only exception to this is the following: <p></p><p></p>If a line contains only one word this word shall be put at the beginning of the line, and a badness of 500 is assigned to this line if it is shorter than it should be. (Of course, in this case, the length of the line is simply the length of the word.) <p></p><p></p>", "input_description": "The input contains a text consisting of several paragraphs. Each paragraph is preceded by a line containing a single integer n, the desired width of the paragraph (1 <= n <= 80). \n\nParagraphs consist of one or more lines which contain one or more words each. Words consist of characters with ASCII codes between 33 and 126, inclusive, and are separated by spaces (possibly more than one). No word will be longer than the desired width of the paragraph. The total length of all words of one paragraph will not be more than 10000 characters. \n\nEach paragraph is terminated by exactly one blank line. There is no limit on the number of paragraphs in the input file. \n\nThe input file will be terminated by a paragraph description starting with n=0. This paragraph should not be processed. \n", "output_description": "Output the same text, formatted in the way described above (processing each paragraph separately). \n\nIf there are several ways to format a paragraph with the same badness, use the following algorithm to choose which one to output: Let A and B be two solutions. Find the first gap which has not the same length in A and B. Do not output the solution in which this gap is bigger. \n\nOutput a blank line after each paragraph. \n\n", "samples": "[{\"input\": \"28\\nThis is the example you are\\nactually considering.\\n\\n25\\nWriting e-mails is fun, and with this program,\\nthey even look nice.\\n\\n0\\n\\n\", \"output\": \"This  is  the  example   you\\nare  actually   considering.\\n\\nWriting e-mails  is  fun,\\nand  with  this  program,\\nthey  even   look   nice.\\n\"}]", "test_case_id": "1123", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 23, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1125, "fields": {"title": "LC-Display", "description": "A friend of you has just bought a new computer. Until now, the most powerful computer he ever used has been a pocket calculator. Now, looking at his new computer, he is a bit disappointed, because he liked the LC-display of his calculator so much. So you decide to write a program that displays numbers in an LC-display-like style on his computer. <p></p>", "input_description": "The input contains several lines, one for each number to be displayed. Each line contains two integers s, n (1 <= s <= 10, 0 <= n <= 99 999 999), where n is the number to be displayed and s is the size in which it shall be displayed. \n\nThe input file will be terminated by a line containing two zeros. This line should not be processed. \n", "output_description": "Output the numbers given in the input file in an LC-display-style using s \"-\" signs for the horizontal segments and s \"|\" signs for the vertical ones. Each digit occupies exactly s+2 columns and 2s+3 rows. (Be sure to fill all the white space occupied by the digits with blanks, also for the last digit.) There has to be exactly one column of blanks between two digits. \n\nOutput a blank line after each number. (You will find a sample of each digit in the sample output.) \n", "samples": "[{\"input\": \"2 12345\\n3 67890\\n0 0\\n\", \"output\": \"      --   --        -- \\n   |    |    | |  | | \\n   |    |    | |  | | \\n      --   --   --   -- \\n   | |       |    |    |\\n   | |       |    |    |\\n      --   --        -- \\n\\n ---   ---   ---   ---   --- \\n|         | |   | |   | |   |\\n|         | |   | |   | |   |\\n|         | |   | |   | |   |\\n ---         ---   --- \\n|   |     | |   |     | |   |\\n|   |     | |   |     | |   |\\n|   |     | |   |     | |   |\\n ---         ---   ---   ---\\n\"}]", "test_case_id": "1125", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 196, "total_accepted_number": 86, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1126, "fields": {"title": "Date bugs", "description": "There are rumors that there are a lot of computers having a problem with the year 2000. As they use only two digits to represent the year, the date will suddenly turn from 1999 to 1900. In fact, there are also many other, similar problems. On some systems, a 32-bit integer is used to store the number of seconds that have elapsed since a certain fixed date. In this <p></p>way, when 2^32 seconds (about 136 Years) have elapsed, the date will jump back to whatever the fixed date is. <p></p>Now, what can you do about all that mess? Imagine you have two computers C1 and C with two different bugs: One with the ordinary Y2K-Bug (i. e. switching to a1 := 1900 instead of b1 := 2000) and one switching to a2 := 1904 instead of b2 := 2040. Imagine that the C1 displays the year y1 := 1941 and C2 the year y2 := 2005. Then you know the following (assuming that there are no other bugs): the real year can&#039;t be 1941, since, then, both computers would show the (same) right date. If the year would be 2005, y1 would be 1905, so this is impossible, too. Looking only at C1 , we know that the real year is one of the following: 1941, 2041, 2141, etc. We now can calculate what C2 would display in these years: 1941, 1905, 2005, etc. So in fact, it is possible that the actual year is 2141. <p></p>To calculate all this manually is a lot of work. (And you don&#039;t really want to do it each time you forgot the actual year.) So, your task is to write a program which does the calculation for you: find the first possible real year, knowing what some other computers say (yi) and knowing their bugs (switching to ai instead of bi ). Note that the year ai is definitely not after the year the computer was built. Since the actual year can&#039;t be before the year the computers were built, the year your program is looking for can&#039;t be before any ai . <p></p>", "input_description": "The input file contains several test cases, in which the actual year has to be calculated. The description of each case starts with a line containing an integer n (1 <= n <= 20), the number of computers. Then, there is one line containing three integers yi,ai,bi for each computer (0 <= ai <= yi < bi < 10000). yi is the year the computer displays, bi is the year in which the bug happens (i. e. the first year which can't be displayed by this computer) and ai is the year that the computer displays instead of bi . \nThe input is terminated by a test case with n = 0. It should not be processed. \n", "output_description": "For each test case, output output the line \"Case #k:\", where k is the number of the situation. Then, output the line \"The actual year is z.\", where z is the smallest possible year (satisfying all computers and being greater or equal to u). If there is no such year less than 10000, output \"Unkown bugs detected.\". Output a blank line after each case. \n", "samples": "[{\"input\": \"2 \\n1941 1900 2000 \\n2005 1904 2040 \\n2 \\n1998 1900 2000 \\n1999 1900 2000 \\n0 \", \"output\": \"Case #1: \\nThe actual year is 2141. \\n\\nCase #2: \\nUnknown bugs detected. \\n\\n\"}]", "test_case_id": "1126", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 32, "total_accepted_number": 24, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1128, "fields": {"title": "Robbery", "description": "Inspector Robstop is very angry. Last night, a bank has been robbed and the robber has not been caught. And this happened already for the third time this year, even though he did everything in his power to stop the robber: as quickly as possible, all roads leading out of the city were blocked, making it impossible for the robber to escape. Then, the inspector asked all the people in the city to watch out for the robber, but the only messages he got were of the form &quot;We don&#039;t see him.&quot; <p></p>But this time, he has had enough! Inspector Robstop decides to analyze how the robber could have escaped. To do that, he asks you to write a program which takes all the information the inspector could get about the robber in order to find out where the robber has been at which time. <p></p><p></p>Coincidentally, the city in which the bank was robbed has a rectangular shape. The roads leaving the city are blocked for a certain period of time t, and during that time, several observations of the form &quot;The robber isn&#039;t in the rectangle Ri at time ti&quot; are reported. Assuming that the robber can move at most one unit per time step, your program must try to find the exact position of the robber at each time step. <p></p>", "input_description": "The input contains the description of several robberies. The first line of each description consists of three numbers W, H, t (1 <= W,H,t <= 100) where W is the width, H the height of the city and t is the time during which the city is locked. \n\nThe next contains a single integer n (0 <= n <= 100), the number of messages the inspector received. The next n lines (one for each of the messages) consist of five integers ti, Li, Ti, Ri, Bi each. The integer ti is the time at which the observation has been made (1 <= ti <= t), and Li, Ti, Ri, Bi are the left, top, right and bottom respectively of the (rectangular) area which has been observed. (1 <= Li <= Ri <= W, 1 <= Ti <= Bi <= H; the point (1, 1) is the upper left hand corner, and (W, H) is the lower right hand corner of the city.) The messages mean that the robber was not in the given rectangle at time ti. \n\nThe input is terminated by a test case starting with W = H = t = 0. This case should not be processed. \n", "output_description": "For each robbery, first output the line \"Robbery #k:\", where k is the number of the robbery. Then, there are three possibilities: \n\nIf it is impossible that the robber is still in the city considering the messages, output the line \"The robber has escaped.\" \n\nIn all other cases, assume that the robber really is in the city. Output one line of the form \"Time step : The robber has been at x,y.\" for each time step, in which the exact location can be deduced. (x and y are the column resp. row of the robber in time step .) Output these lines ordered by time . \n\nIf nothing can be deduced, output the line \"Nothing known.\" and hope that the inspector will not get even more angry. \n\nOutput a blank line after each processed case. \n", "samples": "[{\"input\": \"4 4 5\\n4\\n1 1 1 4 3\\n1 1 1 3 4\\n4 1 1 3 4\\n4 4 2 4 4\\n10 10 3\\n1\\n2 1 1 10 10\\n0 0 0\\n\", \"output\": \"Robbery #1:\\nTime step 1: The robber has been at 4,4.\\nTime step 2: The robber has been at 4,3.\\nTime step 3: The robber has been at 4,2.\\nTime step 4: The robber has been at 4,1.\\n\\nRobbery #2:\\nThe robber has escaped.\"}]", "test_case_id": "1128", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 6, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1130, "fields": {"title": "Atlantis", "description": "There are several ancient Greek texts that contain descriptions of the fabled island Atlantis. Some of these texts even include maps of parts of the island. But unfortunately, these maps describe different regions of Atlantis. Your friend Bill has to know the total area for which maps exist. You (unwisely) volunteered to write a program that calculates this quantity.<p></p>", "input_description": "The input consists of several test cases. Each test case starts with a line containing a single integer n (1 <= n <= 100) of available maps. The n following lines describe one map each. Each of these lines contains four numbers x1;y1;x2;y2 (0 <= x1 < x2 <= 100000;0 <= y1 < y2 <= 100000), not necessarily integers. The values (x1; y1) and (x2;y2) are the coordinates of the top-left resp. bottom-right corner of the mapped area. \nThe input file is terminated by a line containing a single 0. Don't process it.", "output_description": "For each test case, your program should output one section. The first line of each section must be \"Test case #k\", where k is the number of the test case (starting with 1). The second one must be \"Total explored area: a\", where a is the total explored area (i.e. the area of the union of all rectangles in this test case), printed exact to two digits to the right of the decimal point. \nOutput a blank line after each test case.\n", "samples": "[{\"input\": \"2\\n10 10 20 20\\n15 15 25 25.5\\n0\\n\", \"output\": \"Test case #1\\nTotal explored area: 180.00 \\n\"}]", "test_case_id": "1130", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 138, "total_accepted_number": 60, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1132, "fields": {"title": "Erdos Numbers", "description": "The Hungarian Paul Erdos (1913-1996, pronounced as &quot;Ar-dish&quot;) was not only one of the strangest mathematicians of the 20th century, he was also among the most famous ones. He kept on publishing widely circulated papers up to a very high age, and every mathematician having the honor of being a co-author to Erdos is well respected. <p></p><p></p>Not everybody got a chance to co-author a paper with Erdos, so many people were content if they managed to publish a paper with somebody who had published a paper with Erdos. This gave rise to the so-called Erdos numbers. An author who has jointly published with Erdos had Erdos number 1. An author who had not published with Erdos but with somebody with Erdos number 1 obtained Erdos number 2, and so on. Today, nearly everybody wants to know what Erdos number he or she has. Your task is to write a program that computes Erdos numbers for a given set of scientists. <p></p>", "input_description": "The input file contains a sequence of scenarios, each scenario consisting of a paper database and a list of names. A scenario begins with the line \"p n\", where p and n are natural numbers with 1<=p<=32000;1<=n<=3000. Following this line are p lines containing descriptions of papers (this is the paper database). A paper is described by a line of the following form: \n\nLastName1, FirstName1, LastName2, Firstname2, . . . : TitleOfThePaper \n\nThe names and the title may contain any ASCII characters between 32 and 126 except commas and colons. There will always be exactly one space character following each comma. The first name may be abbreviated, but the same name will always be written in the same way. In particular, Erdos' name is always written as \"Erdos, P.\". (Umlauts like '\u00a8o','\u00a8a',. . . are simply written as 'o','a', . . . .) \n\nExample: \n\nSmith, M.N., Martin, G., Erdos, P.: Newtonian forms of prime factors matrices. \n\nAfter the p papers follow n lines each containing exactly one name in the same format as in the paper database. \n\nThe line '0 0' terminates the input. \n\nNo name will consist of more than 40 characters. No line in the input file contains more than 250 characters. In each scenario there will be at most 10 000 different authors. \n", "output_description": "For every scenario first print the number of the scenario in the format shown in the sample output. Then print for every author name in the list of names their Erdos number based on the papers in the paper database of the scenario. The authors should be output in the order given in the input file. Authors that do not have any relation to Erdos via the papers have Erdos number infinity. Adhere to the format shown in the sample output. \n\nPrint a blank line after each case. \n", "samples": "[{\"input\": \"2 2\\nSmith, M.N., Martin, G., Erdos, P.: Newtonian forms of prime factors matrices.\\nGardner, M., Martin, G.: Commuting Names\\nSmith, M.N.\\nGardner, M.\\n0 0\\n\", \"output\": \"Database #1\\nSmith, M.N.: 1\\nGardner, M.: 2 \\n\\n\"}]", "test_case_id": "1132", "hint": "Huge input,scanf is recommended.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 2, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1133, "fields": {"title": "Number Game", "description": "Christine and Matt are playing an exciting game they just invented: the Number Game. The rules of this game are as follows. <p></p>The players take turns choosing integers greater than 1. First, Christine chooses a number, then Matt chooses a number, then Christine again, and so on. The following rules restrict how new numbers may be chosen by the two players: <p></p><p></p><p></p><p></p><p></p>A number which has already been selected by Christine or Matt, or a multiple of such a number,cannot be chosen. <p></p><p></p>A sum of such multiples cannot be chosen, either.<p></p><p></p>If a player cannot choose any new number according to these rules, then that player loses the game. <p></p>Here is an example: Christine starts by choosing 4. This prevents Matt from choosing 4, 8, 12, etc.Let&#039;s assume that his move is 3. Now the numbers 3, 6, 9, etc. are excluded, too; furthermore, numbers like: 7 = 3+4;10 = 2*3+4;11 = 3+2*4;13 = 3*3+4;... are also not available. So, in fact, the only numbers left are 2 and 5. Christine now selects 2. Since 5=2+3 is now forbidden, she wins because there is no number left for Matt to choose. <p></p>Your task is to write a program which will help play (and win!) the Number Game. Of course, there might be an infinite number of choices for a player, so it may not be easy to find the best move among these possibilities. But after playing for some time, the number of remaining choices becomes finite, and that is the point where your program can help. Given a game position (a list of numbers which are not yet forbidden), your program should output all winning moves. <p></p>A winning move is a move by which the player who is about to move can force a win, no matter what the other player will do afterwards. More formally, a winning move can be defined as follows. <p></p><p></p><p></p><p></p>A winning move is a move after which the game position is a losing position. <p></p><p></p>A winning position is a position in which a winning move exists. A losing position is a position in which no winning move exists. <p></p><p></p>In particular, the position in which all numbers are forbidden is a losing position. (This makes sense since the player who would have to move in that case loses the game.)<p></p>", "input_description": "The input consists of several test cases. Each test case is given by exactly one line describing one position. \nEach line will start with a number n (1 <= n <= 20), the number of integers which are still available. The remainder of this line contains the list of these numbers a1;...;an(2 <= ai <= 20). \nThe positions described in this way will always be positions which can really occur in the actual Number Game. For example, if 3 is not in the list of allowed numbers, 6 is not in the list, either. \nAt the end of the input, there will be a line containing only a zero (instead of n); this line should not be processed.\n", "output_description": "For each test case, your program should output \"Test case #m\", where m is the number of the test case (starting with 1). Follow this by either \"There's no winning move.\" if this is true for the position described in the input file, or \"The winning moves are: w1 w2 ... wk\" where the wi are all winning moves in this position, satisfying wi < wi+1 for 1 <= i < k. After this line, output a blank line.\n", "samples": "[{\"input\": \"2 2 5\\n2 2 3\\n5 2 3 4 5 6\\n0\\n\", \"output\": \"Test Case #1\\nThe winning moves are: 2\\n\\nTest Case #2\\nThere$(quat)s no winning move.\\n\\nTest Case #3\\nThe winning moves are: 4 5 6\"}]", "test_case_id": "1133", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 9, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1136, "fields": {"title": "Railroad", "description": "It is Friday evening and Jill hates two things which are common to all trains: <p></p><p></p>1. They are always late. <p></p><p></p>2. The posted schedule is always wrong. <p></p><p></p>Nevertheless, tomorrow in the early morning hours Jill will have to travel from Tuttlingen to Freiburg in order to get to the Regional Programming Contest. Since she is afraid of arriving too late and being excluded from the contest, she is looking for the train which gets her to Freiburg as early as possible. <p></p><p></p>However, she dislikes getting to the station too early, so if there are several schedules with the same arrival time, she will choose the one with the latest departure time. <p></p><p></p>Jill asks you to help her with her problem, so that she can sleep a bit longer tomorrow. You are given a set of railroad schedules from which you have to compute the fastest connection among those with the earliest arrival time for going from one location to another. One good thing: Jill is very experienced in switching trains: she can do this instantaneously, i.e., in zero time!!! <p></p><p></p><p></p>", "input_description": "The input file contains several scenarios. Each of them consists of three parts. \n\nPart one lists the names of all cities connected by the railroads. It starts with a line containing an integer C (1 <= C <= 100) followed by C lines containing city names. These names consist of letters. \n\nPart two describes all the trains running during the day. It starts with a number T <= 1000 followed by T train descriptions. Each train description consists of one line with a number ti <= 100 and ti more lines with a time and a city name, meaning that passengers can get on or off the train at that time at that city. The times are given in the 24-hour format hhmm. \n\nPart three consists of three lines: Line one contains the earliest possible starting time for the journey, line two the name of the city where she starts, and line three the destination city. The two cities are always different. \n\nThe end of the input file is marked by a line containing only a zero (instead of C). Do not process this line. \n\n", "output_description": "For each scenario print the line \"Scenario #n\" where n is the number of the scenario starting at 1. \n\nIf a connection exists then print the two lines containing zero padded timestamps and locations as shown in the sample output. Use blanks to achieve the indentation. If no connection exists on the same day (i.e., arrival before midnight), then print a line containing \"No connection\". \n\nAfter each scenario print a blank line. \n", "samples": "[{\"input\": \"3\\nTuttlingen\\nConstance\\nFreiburg\\n3\\n2\\n0949 Tuttlingen\\n1006 Constance\\n2\\n1325 Tuttlingen\\n1550 Freiburg\\n2\\n1205 Constance\\n1411 Freiburg\\n0800\\nTuttlingen\\nFreiburg\\n2\\nUlm\\nVancouver\\n1\\n2\\n0100 Ulm\\n2300 Vancouver\\n0800\\nUlm\\nVancouver\\n0\\n\\n\", \"output\": \"Scenario #1\\nDeparture 0949 Tuttlingen\\nArrival   1411 Freiburg\\n\\nScenario #2\\nNo connection \"}]", "test_case_id": "1136", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 8, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1137, "fields": {"title": "Smith Numbers", "description": "While skimming his phone directory in 1982, Albert Wilansky, a mathematician of Lehigh University,noticed that the telephone number of his brother-in-law H. Smith had the following peculiar property: The sum of the digits of that number was equal to the sum of the digits of the prime factors of that number. Got it? Smith&#039;s telephone number was 493-7775. This number can be written as the product of its prime factors in the following way: <p></p><p></p>4937775= 3*5*5*65837<p></p><p></p>The sum of all digits of the telephone number is 4+9+3+7+7+7+5= 42,and the sum of the digits of its prime factors is equally 3+5+5+6+5+8+3+7=42. Wilansky was so amazed by his discovery that he named this kind of numbers after his brother-in-law: Smith numbers. <p></p>As this observation is also true for every prime number, Wilansky decided later that a (simple and unsophisticated) prime number is not worth being a Smith number, so he excluded them from the definition. <p></p>Wilansky published an article about Smith numbers in the Two Year College Mathematics Journal and was able to present a whole collection of different Smith numbers: For example, 9985 is a Smith number and so is 6036. However,Wilansky was not able to find a Smith number that was larger than the telephone number of his brother-in-law. It is your task to find Smith numbers that are larger than 4937775!", "input_description": "The input file consists of a sequence of positive integers, one integer per line. Each integer will have at most 8 digits. The input is terminated by a line containing the number 0.\n", "output_description": "For every number n > 0 in the input, you are to compute the smallest Smith number which is larger than n,and print it on a line by itself. You can assume that such a number exists.\n", "samples": "[{\"input\": \"4937774\\n0\\n\", \"output\": \"4937775\\n\"}]", "test_case_id": "1137", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 152, "total_accepted_number": 59, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1138, "fields": {"title": "Stockbroker Grapevine", "description": "Stockbrokers are known to overreact to rumours. You have been contracted to develop a method of spreading disinformation amongst the stockbrokers to give your employer the tactical edge in the stock market. For maximum effect, you have to spread the rumours in the fastest possible way. <p></p><p></p>Unfortunately for you, stockbrokers only trust information coming from their &quot;Trusted sources&quot; This means you have to take into account the structure of their contacts when starting a rumour. It takes a certain amount of time for a specific stockbroker to pass the rumour on to each of his colleagues. Your task will be to write a program that tells you which stockbroker to choose as your starting point for the rumour, as well as the time it will take for the rumour to spread throughout the stockbroker community. This duration is measured as the time needed for the last person to receive the information.<p></p>", "input_description": "Your program will input data for different sets of stockbrokers. Each set starts with a line with the number of stockbrokers. Following this is a line for each stockbroker which contains the number of people who they have contact with, who these people are, and the time taken for them to pass the message to each person. The format of each stockbroker line is as follows: The line starts with the number of contacts (n), followed by n pairs of integers, one pair for each contact. Each pair lists first a number referring to the contact (e.g. a '1' means person number one in the set), followed by the time in minutes taken to pass a message to that person. There are no special punctuation symbols or spacing rules. \n\nEach person is numbered 1 through to the number of stockbrokers. The time taken to pass the message on will be between 1 and 10 minutes (inclusive), and the number of contacts will range between 0 and one less than the number of stockbrokers. The number of stockbrokers will range from 1 to 100. The input is terminated by a set of stockbrokers containing 0 (zero) people. \n\n\n", "output_description": "For each set of data, your program must output a single line containing the person who results in the fastest message transmission, and how long before the last person will receive any given message after you give it to this person, measured in integer minutes. \nIt is possible that your program will receive a network of connections that excludes some persons, i.e. some people may be unreachable. If your program detects such a broken network, simply output the message \"disjoint\". Note that the time taken to pass the message from person A to person B is not necessarily the same as the time taken to pass it from B to A, if such transmission is possible at all. \n", "samples": "[{\"input\": \"3\\n2 2 4 3 5\\n2 1 2 3 6\\n2 1 2 2 2\\n5\\n3 4 4 2 8 5 3\\n1 5 8\\n4 1 6 4 10 2 7 5 2\\n0\\n2 2 5 1 5\\n0\\n\", \"output\": \"3 2\\n3 10\\n\"}]", "test_case_id": "1138", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 52, "total_accepted_number": 42, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1140, "fields": {"title": "Channel Allocation", "description": "When a radio station is broadcasting over a very large area, repeaters are used to retransmit the signal so that every receiver has a strong signal. However, the channels used by each repeater must be carefully chosen so that nearby repeaters do not interfere with one another. This condition is satisfied if adjacent repeaters use different channels. <p></p><p></p>Since the radio frequency spectrum is a precious resource, the number of channels required by a given network of repeaters should be minimised. You have to write a program that reads in a description of a repeater network and determines the minimum number of channels required.<p></p>", "input_description": "The input consists of a number of maps of repeater networks. Each map begins with a line containing the number of repeaters. This is between 1 and 26, and the repeaters are referred to by consecutive upper-case letters of the alphabet starting with A. For example, ten repeaters would have the names A,B,C,...,I and J. A network with zero repeaters indicates the end of input. \n\nFollowing the number of repeaters is a list of adjacency relationships. Each line has the form: \n\nA:BCDH \n\nwhich indicates that the repeaters B, C, D and H are adjacent to the repeater A. The first line describes those adjacent to repeater A, the second those adjacent to B, and so on for all of the repeaters. If a repeater is not adjacent to any other, its line has the form \n\nA: \n\nThe repeaters are listed in alphabetical order. \n\nNote that the adjacency is a symmetric relationship; if A is adjacent to B, then B is necessarily adjacent to A. Also, since the repeaters lie in a plane, the graph formed by connecting adjacent repeaters does not have any line segments that cross. \n\n", "output_description": "For each map (except the final one with no repeaters), print a line containing the minumum number of channels needed so that no adjacent channels interfere. The sample output shows the format of this line. Take care that channels is in the singular form when only one channel is required.\n", "samples": "[{\"input\": \"2\\nA:\\nB:\\n4\\nA:BC\\nB:ACD\\nC:ABD\\nD:BC\\n4\\nA:BCD\\nB:ACD\\nC:ABD\\nD:ABC\\n0\\n\", \"output\": \"1 channel needed.\\n3 channels needed.\\n4 channels needed.\"}]", "test_case_id": "1140", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 66, "total_accepted_number": 40, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1142, "fields": {"title": "Octal Fractions", "description": "Fractions in octal (base 8) notation can be expressed exactly in decimal notation. For example, 0.75 in octal is 0.963125 (7/8 + 5/64) in decimal. All octal numbers of n digits to the right of the octal point can be expressed in no more than 3n decimal digits to the right of the decimal point. <p></p><p></p>Write a program to convert octal numerals between 0 and 1, inclusive, into equivalent decimal numerals. ", "input_description": "The input to your program will consist of octal numbers, one per line, to be converted. Each input number has the form 0.d1d2d3 ... dk, where the di are octal digits (0..7). There is no limit on k.\n", "output_description": "Your output will consist of a sequence of lines of the form \n\n\n\n0.d1d2d3 ... dk [8] = 0.D1D2D3 ... Dm [10]\n\n\nwhere the left side is the input (in octal), and the right hand side the decimal (base 10) equivalent. There must be no trailing zeros, i.e. Dm is not equal to 0.", "samples": "[{\"input\": \"0.75\\n0.0001\\n0.01234567\\n\", \"output\": \"0.75 [8] = 0.953125 [10]\\n0.0001 [8] = 0.000244140625 [10]\\n0.01234567 [8] = 0.020408093929290771484375 [10]\\n\"}]", "test_case_id": "1142", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 161, "total_accepted_number": 120, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1143, "fields": {"title": "IBM minus one", "description": "You may have heard of the book \u20182001 - A Space Odyssey\u2019 by Arthur C. Clarke, or the film of the same name by Stanley Kubrick. In it a spaceship is sent from Earth to Saturn. The crew is put into stasis for the long flight, only two men are awake, and the ship is controlled by the intelligent computer HAL. But during the flight HAL is acting more and more strangely, and even starts to kill the crew on board. We won\u2019t tell you how the story ends, in case you want to read the book for yourself :-)<p></p><p></p>After the movie was released and became very popular, there was some discussion as to what the name \u2018HAL\u2019 actually meant. Some thought that it might be an abbreviation for \u2018Heuristic ALgorithm\u2019. But the most popular explanation is the following: if you replace every letter in the word HAL by its successor in the alphabet, you get . . . IBM.<p></p><p></p>Perhaps there are even more acronyms related in this strange way! You are to write a program that may help to find this out.", "input_description": "The input file starts with the integer n on a line by itself - this is the number of strings to follow. The following n lines each contain one string of at most 50 upper-case letters.", "output_description": "For each string in the input, first output the number of the string, as shown in the sample output. The print the string that is derived from the input string by replacing every letter by the following letter in the alphabet, and replacing \u2018Z\u2019 by \u2018A\u2019.\n\nPrint a blank line after each string.", "samples": "[{\"input\": \"2\\nHAL\\nSWERC\", \"output\": \"String #1\\nIBM\\n\\nString #2\\nTXFSD\"}]", "test_case_id": "1143", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 388, "total_accepted_number": 197, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1147, "fields": {"title": "Definite Values", "description": "A common error in programming is to use variables that have not been initialized before. For example, in C and C++, all variables have an indefinite value after declaration ? their value can be anything. Thus, the following program<p></p><p></p><p></p>main()<p></p>{<p></p>    int x;<p></p>    printf(&quot;%d<p></p>&quot;,x);<p></p>}<p></p><p></p>could print any number. But even in languages such as Pascal, where all values are initialized to zero, it is useful to give variables definite values before using them, to avoid side effects when your code portion is placed into a different context.<p></p><p></p>Generally, the problem of deciding for a given program whether all variables have been assigned values before they are read out, is undecidable. But if you, as in this problem, consider only a sequence of assignments, the problem becomes solvable.", "input_description": "The input file contains several program parts. Each part starts with a number n on a line by itself, the number of lines in the program part. The following n lines contain each an assignment of the form \u201cvariable1 = variable2\u201d, where the variablei\u2019s are lower-case letters.\n\nThe input is terminated by a test case starting with n \u0002 0.", "output_description": "Assume that before the execution of the given program part, variable a has some definite value, while all other variables are undefined. You have to print the names of the variables which have a definite value after the execution of the program part. More specifically, format your output as follows.\n\nFor each program part in the input, first print the number of the program, as shown in the sample output. Then print a line containing the names of the variables which have a definite value after the execution of the given program part. Print them in alphabetically sorted order, and leave one blank after each variable name. If none of the variables has a definite value after the execution of the program part, print the word \u201cnone\u201d.\n\nPrint a blank line after each test case.", "samples": "[{\"input\": \"4\\nb = a\\nc = d\\nd = b\\ne = f\\n1\\na = b\\n0\", \"output\": \"Program #1\\na b d\\n\\nProgram #2\\nnone\"}]", "test_case_id": "1147", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 177, "total_accepted_number": 68, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1148, "fields": {"title": "Stars", "description": "On a clear moon-less night, you can see millions of stars glimmering in the sky. Faced with this overwhelming number, the Greeks started nearly 2,000 years ago to bring some order to the chaos. They identified groups of stars, called constellations, and gave them names, mostly from the Greek mythology, that are still in use today. Examples are ``Ursa Minor&#039;&#039;, ``Pisces&#039;&#039;, ``Cancer&#039;&#039;, and many others. <p></p><p></p>Given a sketch of the constellation, it is not easy for the amateur to actually find the constellation in the sky. Moreover, simple constellations, such as ``Triangulum&#039;&#039; (triangle,) which consists of only three stars, may appear several times in the sky. Again, singling out the ``correct&#039;&#039; occurrence is not easy. <p></p><p></p>Traditionally, maps were printed for just this purpose. But in this problem, we will see how the computer can help us find constellations in the sky. <p></p><p></p>You will be given a star map; for simplicity this will be a collection of points in the plane, each having a certain brightness associated with it. Then, given a constellation, also as a set of points in the plane, you are to determine: <p></p><p></p><p></p>the number of occurrences of the constellation in the star map, and <p></p><p></p>the position of the brightest occurrence, if one exists. (The rationale behind this is as follows: if a constellation seems to appear several times in the sky, the brightest one is most likely to be the real one, since it is the most eye-catching one.) <p></p><p></p><p></p>An occurrence is a subset of stars from the map that forms a (possibly) arbitrarily rotated and/or scaled copy of the stars in the constellation. <p></p><p></p>The brightness of an occurrence is the average brightness of the stars it consists of, i.e. the sum of individual brightnesses divided by the number of stars in the constellation. <p></p>", "input_description": "The input file contains the descriptions of several star maps. Each map starts with a line containing a single integer n, specifying the number of stars in the map (1 <= n < 1000). The following n lines contain three integers each, namely the x- and y-coordinates and the brightness of every star. The larger the value, the brighter the star shines. \n\nThe next line contains a single integer m, the number of constellations to follow (1 <= m < 50). Each constellation description starts with a line containing an integer si, the number of stars in constellation i, and a string Ni, the name of the constellation. (Ni will consist of no more than 40 characters and contain no blanks.) The following si lines then contain the coordinates of the constellation, again as x/y-pairs. \n\nA blank line separates the star map from the next map. The input file ends with an empty map (having n = 0), which should not be processed. \n\nN.B.: Since all star coordinates are integer numbers, you can easily rule out any rotated or scaled constellation whose points do not fall on integer coordinates. \n", "output_description": "For each star map first output the number of the map ('Map #1', 'Map #2', etc.) on a line of its own. \n\nFor each constellation, in the same order as in the input, output first its name and how many times it occurs in the map on one line, as shown in the output sample. \n\nIf there is at least one occurrence, output the position of the brightest occurrence by listing the positions of the stars that form the brightest occurrence. The star positions have to be printed in ascending x-order. Positions having the same x-coordinates must be sorted in ascending y-order. If there are several equally bright solutions, output only one of them. Adhere to the format shown in the sample output. \n\nOutput a blank line before each constellation and a line of 5 dashes ('-----') after every star map. \n", "samples": "[{\"input\": \"6\\n1 2 1\\n2 1 4\\n2 4 3\\n3 2 1\\n4 1 5\\n4 3 2\\n2\\n3 Triangulum\\n1 1\\n3 1\\n2 4\\n4 Cancer\\n1 3\\n4 3\\n6 1\\n7 5\\n\\n0\\n\", \"output\": \"Map #1\\n\\nTriangulum occurs 2 time(s) in the map.\\nBrightest occurrence: (1,2) (4,1) (4,3)\\n\\nCancer occurs 0 time(s) in the map.\\n-----\\n\"}]", "test_case_id": "1148", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 4, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1150, "fields": {"title": "Domino Effect", "description": "Did you know that you can use domino bones for other things besides playing Dominoes? Take a number of dominoes and build a row by standing them on end with only a small distance in between. If you do it right, you can tip the first domino and cause all others to fall down in succession (this is where the phrase ``domino effect&#039;&#039; comes from). <p></p><p></p>While this is somewhat pointless with only a few dominoes, some people went to the opposite extreme in the early Eighties. Using millions of dominoes of different colors and materials to fill whole halls with elaborate patterns of falling dominoes, they created (short-lived) pieces of art. In these constructions, usually not only one but several rows of dominoes were falling at the same time. As you can imagine, timing is an essential factor here. <p></p><p></p>It is now your task to write a program that, given such a system of rows formed by dominoes, computes when and where the last domino falls. The system consists of several ``key dominoes&#039;&#039; connected by rows of simple dominoes. When a key domino falls, all rows connected to the domino will also start falling (except for the ones that have already fallen). When the falling rows reach other key dominoes that have not fallen yet, these other key dominoes will fall as well and set off the rows connected to them. Domino rows may start collapsing at either end. It is even possible that a row is collapsing on both ends, in which case the last domino falling in that row is somewhere between its key dominoes. You can assume that rows fall at a uniform rate. <p></p>", "input_description": "The input file contains descriptions of several domino systems. The first line of each description contains two integers: the number n of key dominoes (1 <= n < 500) and the number m of rows between them. The key dominoes are numbered from 1 to n. There is at most one row between any pair of key dominoes and the domino graph is connected, i.e. there is at least one way to get from a domino to any other domino by following a series of domino rows. \n\nThe following m lines each contain three integers a, b, and l, stating that there is a row between key dominoes a and b that takes l seconds to fall down from end to end. \n\nEach system is started by tipping over key domino number 1. \n\nThe file ends with an empty system (with n = m = 0), which should not be processed. \n", "output_description": "For each case output a line stating the number of the case ('System #1', 'System #2', etc.). Then output a line containing the time when the last domino falls, exact to one digit to the right of the decimal point, and the location of the last domino falling, which is either at a key domino or between two key dominoes(in this case, output the two numbers in ascending order). Adhere to the format shown in the output sample. The test data will ensure there is only one solution. Output a blank line after each system. ", "samples": "[{\"input\": \"2 1\\n1 2 27\\n3 3\\n1 2 5\\n1 3 5\\n2 3 5\\n0 0\\n\", \"output\": \"System #1\\nThe last domino falls after 27.0 seconds, at key domino 2.\\n\\nSystem #2\\nThe last domino falls after 7.5 seconds, between key dominoes 2 and 3.\\n\"}]", "test_case_id": "1150", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 36, "total_accepted_number": 14, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1151, "fields": {"title": "Pendulum", "description": "Consider a pendulum hanging on a string from a hook on a wall. When pushed, this pendulum will swing back and forth. Now imagine other hooks on the wall, placed in the path of our pendulum&#039;s string. The pendulum will bend around them, possibly even loop around them. In general, it will follow a much more complex path than before. After some time, the pendulum&#039;s motion will repeat, the pendulum will follow a periodic orbit. What we would like you to do is to compute the distance travelled by the pendulum as it completes one cycle of the orbit. <p></p><p></p>More formally, we place a cartesian coordinate system on the wall. The pendulum&#039;s string is affixed at the origin (0, 0). As usual, the x-axis points to the right and the y-axis points upwards. The string of the pendulum has a length of r. The pendulum is released at position (-r, 0) and therefore starts swinging to the right. Furthermore, there are n additional hooks distributed over the plane which may influence the path of the pendulum. <p></p><p></p>In our ideal world, the following assumptions are true: <p></p><p></p><p></p>The diameters of the hooks and of the string are zero. <p></p><p></p>The pendulum loses no energy (e.g. by friction). <p></p><p></p>The pendulum will never hit a hook, only its string will. <p></p><p></p>The pendulum&#039;s string is made of some futuristic material that only bends where it touches a hook but is otherwise rigid. <p></p><p></p><p></p>Your program should simulate the movement of the pendulum and output the spatial length of the periodic orbit that it finally enters. As you may remember from physics: due to gravity, the pendulum will never reach a height greater than the one it started from! That is, it will never get above the x-axis. It will either reach its initial height again or circle endlessly around a hook in the wall. <p></p>", "input_description": "The input file contains several test cases. Each case begins with a line containing an integer n (the number of hooks, 1 <= n < 500) and a real r (the length of the pendulum's string). The following n lines each contain two integers specifying the x- and y-coordinate of the corresponding hook. \n\nThe file ends with a case having r = 0, which should not be processed. \n", "output_description": "For each case output a line containing the number of the case ('Pendulum #1', 'Pendulum #2', etc.). \n\nThen print a line that contains the distance which the pendulum travels for completing one cycle of its periodic orbit. Do not count the distance travelled to reach the starting point of the orbit. (Adhere to the format shown in the output sample.) The distance should be exact to two digits to the right of the decimal point. \n\nOutput a blank line after each test case. \n", "samples": "[{\"input\": \"2 16.0\\n3 -4\\n-3 -4\\n1 18.0\\n5 -12\\n0 0\\n\", \"output\": \"Pendulum #1\\nLength of periodic orbit = 87.66\\n\\nPendulum #2\\nLength of periodic orbit = 31.42\\n\"}]", "test_case_id": "1151", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1153, "fields": {"title": "The New Villa", "description": "Mr. Black recently bought a villa in the countryside. Only one thing bothers him: although there are light switches in most rooms, the lights they control are often in other rooms than the switches themselves. While his estate agent saw this as a feature, Mr. Black has come to believe that the electricians were a bit absent-minded (to put it mildly) when they connected the switches to the outlets. <p></p><p></p>One night, Mr. Black came home late. While standing in the hallway, he noted that the lights in all other rooms were switched off. Unfortunately, Mr. Black was afraid of the dark, so he never dared to enter a room that had its lights out and would never switch off the lights of the room he was in. <p></p><p></p>After some thought, Mr. Black was able to use the incorrectly wired light switches to his advantage. He managed to get to his bedroom and to switch off all lights except for the one in the bedroom. <p></p><p></p>You are to write a program that, given a description of a villa, determines how to get from the hallway to the bedroom if only the hallway light is initially switched on. You may never enter a dark room, and after the last move, all lights except for the one in the bedroom must be switched off. If there are several paths to the bedroom, you have to find the one which uses the smallest number of steps, where &quot;move from one room to another&quot;, &quot;switch on a light&quot; and &quot;switch off a light&quot; each count as one step. <p></p>", "input_description": "The input file contains several villa descriptions. Each villa starts with a line containing three integers r, d, and s. r is the number of rooms in the villa, which will be at most 10. d is the number of doors/connections between the rooms and s is the number of light switches in the villa. The rooms are numbered from 1 to r; room number 1 is the hallway, room number r is the bedroom. \n\nThis line is followed by d lines containing two integers i and j each, specifying that room i is connected to room j by a door. Then follow s lines containing two integers k and l each, indicating that there is a light switch in room k that controls the light in room l. \n\nA blank line separates the villa description from the next one. The input file ends with a villa having r = d = s = 0, which should not be processed. \n", "output_description": "For each villa, first output the number of the test case ('Villa #1', 'Villa #2', etc.) in a line of its own. \n\nIf there is a solution to Mr. Black's problem, output the shortest possible sequence of steps that leads him to his bedroom and only leaves the bedroom light switched on. (Output only one shortest sequence if you find more than one.) Adhere to the output format shown in the sample below. \n\nIf there is no solution, output a line containing the statement `The problem cannot be solved.' \n\nOutput a blank line after each test case. \n", "samples": "[{\"input\": \"3 3 4\\n1 2\\n1 3\\n3 2\\n1 2\\n1 3\\n2 1\\n3 2\\n\\n2 1 2\\n2 1\\n1 1\\n1 2\\n\\n0 0 0\\n\", \"output\": \"Villa #1\\nThe problem can be solved in 6 steps:\\n- Switch on light in room 2.\\n- Switch on light in room 3.\\n- Move to room 2.\\n- Switch off light in room 1.\\n- Move to room 3.\\n- Switch off light in room 2.\\n\\nVilla #2\\nThe problem cannot be solved.\\n\\n\"}]", "test_case_id": "1153", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 43, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1154, "fields": {"title": "Ships", "description": "Probably everyone who ever attended school knows the game where two opposing players place a set of ships on a sheet of paper and try to eliminate each other&#039;s ships by guessing their location. <p></p><p></p>In our version of the game, your opponent has distributed the following seven ship patterns over a rectangular grid of squares: <p></p><p></p>xx xx xx x x x <p></p>xx xx xx xxx xxx xxx xxxx <p></p><p></p>Each ship pattern covers exactly four squares. The patterns may be rotated but not mirrored. All patterns are guaranteed to be placed completely within the boundaries of the rectangle and not to overlap each other, whereas touching another pattern or the border is allowed. <p></p><p></p>We assume that we are in the middle of the game and that several squares have already been uncovered. You will be given a rectangular grid of squares representing your current knowledge about the positions of your enemy&#039;s ships. Every square is marked by one of the following characters: <p></p><p></p><p></p>&#039;x&#039; if a ship covers the square <p></p><p></p>&#039;o&#039; if no ship covers the square <p></p><p></p>&#039;.&#039; if the square has not yet been uncovered <p></p><p></p><p></p>Given that information, you are to decide whether you can determine all remaining &#039;x&#039; squares with at most one miss, i.e. whether you could uncover the &#039;.&#039; squares without getting more than one &#039;o&#039; square before you had all &#039;x&#039; squares uncovered. This means you are allowed to hit a &#039;o&#039; if then the solution becomes unique. <p></p>", "input_description": "The input file contains several game situations. Every test case starts with a line containing two integers h and w. These define width and height of the game rectangle, where 2 <= w, h <= 16. \n\nEach of the next h lines contains a string of w characters. Each of these characters is either `x', `o' or `.', depending on the state of the corresponding square. \n\nA blank line separates each game from the next. The input file ends with a game having w = 0 and h = 0. This game should not be processed.\n", "output_description": "For each test case you should first output a line containing the number of the game, followed by a line containing either `yes.' (if you can determine all `x' with at most one miss) or `no.' (if you cannot determine all `x' without at least two misses). \n\nOutput a blank line after every game. \n", "samples": "[{\"input\": \"10 10\\n.x..x.....\\noooooxoooo\\noxooxxx...\\nxxoooooo..\\nxoooxooo..\\nooxxxxoo..\\noooooxxoox\\nooooooxoox\\nooooooooxx\\noooooooooo\\n\\n0 0\\n\", \"output\": \"Game #1\\nyes.\\n\"}]", "test_case_id": "1154", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1157, "fields": {"title": "Jetpack Sniper 3000 Fragfest Extreme", "description": "You are a beta tester for a new online game, Jetpack Sniper 3000 Fragfest Extreme. In this game, players with jetpacks fly around major metropolitan areas and attempt to shoot each other with laser guns. The only obstacles behind which players can hide are the ever-present glass towers of cubicle farms, skyscrapers. <p></p><p></p>To assist you in playing the game, you&#039;ve written a program that will tell you which players could currently shoot (or be shot) by you. These are the players who have an unobstructed view of your position. <p></p>", "input_description": "Input to this problem will begin with a line containing a single integer n indicating the number of cities in the input. Each city is made of 100 city blocks (10x10), each of which contains a skyscraper of an integer height from 0 to 9. A city is represented in the input as 10 lines of 10 integers, where the integers are the height values of the corresponding skyscrapers. This is followed by one line with four sets of coordinates. The first denotes your position; the other three denote the positions of players A, B, and C, respectively. Positions are given in the format (x, y, height), where x is measured from left to right on the input city grid, y is measured from top to bottom, height is measured from the ground up, and (0,0,0) is at the top left of the input city grid at ground level. \n\nNote: \n\nThe coordinates of player positions may contain floating point numbers. \n\nNeither you nor any of the other players will ever be inside a building or on one of its edges or sides. Your line of sight to another player will never be tangent to the side, edge, or corner of a building in such a way that it changes the outcome of the program. \n", "output_description": "For each city in the input, output the header \"Fragfest City #X\" where X is 1 for the first city, 2 for the second, etc. Follow this line with one line for each of players A, B, and C and print either \"Player Y is in sight\" or \"Player Y is hiding\" depending on whether or not a building obstructs your view of that player. \n\nPlease make these two simplifying assumptions: \n\nA skyscraper is a rectangular solid with dimensions 1x1xheight; \n\na player is the size and shape of a point; \n\nand a player does not block the view of another player. \n", "samples": "[{\"input\": \"2\\n0000005000\\n0000005000\\n0000005000\\n0000005000\\n9999999999\\n0000000000\\n0000000000\\n0000000000\\n0000000000\\n0000000000\\n(0,0,0) (10, 10, 10) (5.5, 5.5, 5.5) (9, 1.0, 9)\\n0123456789\\n1000000000\\n2064646400\\n3045555600\\n4065005400\\n5045005600\\n6065555400\\n7046464600\\n8000000000\\n9123456789\\n(4.5, 4.5, 5.5) (7.5, 4.5, 5.5) (1.5, 4.5, 5.1) (7.5, 4.5, 6.5)\\n\", \"output\": \"Fragfest City #1\\nPlayer A is hiding\\nPlayer B is hiding\\nPlayer C is in sight\\nFragfest City #2\\nPlayer A is in sight\\nPlayer B is hiding\\nPlayer C is in sight\\n\"}]", "test_case_id": "1157", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1160, "fields": {"title": "Bingo!", "description": "Bingo is a game in which players try to form patterns on a 5 x 5 grid (or card). Each column on the card is represented by a letter in the game&#039;s namesake: B, I, N, G, or O. Each square on the grid contains a number. Players mark numbers as they are chosen randomly until a person has a card with a winning pattern marked (or bingo). An exception to this is the center square in the grid, which is a free spot and is already marked for all players at the beginning of each game. The possible numbers called are 1-75, inclusive, with each set of fifteen numbers corresponding to a letter: B for 1-15, I for 16-30, N for 31-45, G for 46-60, and O for 61-75. <p></p><p></p>Given the amount of numbers for each letter already called and information used to determine the set of winning patterns, write a program to determine the fewest amount of numbers that still need to be called for a possible bingo. <p></p>", "input_description": "Input to this problem will begin with a line containing a single integer n indicating the number of data sets. The first line in each data set will be in the format B I N G O X Y where: \n\n\nB is the amount of numbers in the B category that have already been called; \n\nI is the amount of numbers in the I category that have already been called; \n\nN is the amount of numbers in the N category that have already been called; \n\nG is the amount of numbers in the G category that have already been called; \n\nO is the amount of numbers in the O category that have already been called; \n\nX (where 1 <= X <= 19) is the number of input patterns (the winning patterns are described through combinations of the input patterns); \n\nand Y (where 1 <= Y <= minimum (5, X)) is the minimum number of input patterns that must be combined to form a winning pattern. \nThe next 5 lines in each data set will be a series of 5 x 5 grids of the input patterns in a format where X represents a square that must be marked and O represents a square that does not have to be marked. Using the input patterns and Y given above, the entire set of winning patterns can be determined. \nFor example, given an X of 4, a Y of 2, and a set of input patterns as follows: \n\nXXOOO OOOXX OOOOO OOOOO\nXXOOO OOOXX OOOOO OOOOO\nOOOOO OOOOO OOOOO OOOOO\nOOOOO OOOOO XXOOO OOOXX\nOOOOO OOOOO XXOOO OOOXX\nthe set of winning patterns (of which only one must be marked to have a bingo) is: \n\nXXOXX XXOOO XXOOO OOOXX OOOXX OOOOO\nXXOXX XXOOO XXOOO OOOXX OOOXX OOOOO\nOOOOO OOOOO OOOOO OOOOO OOOOO OOOOO\nOOOOO XXOOO OOOXX XXOOO OOOXX XXOXX\nOOOOO XXOOO OOOXX XXOOO OOOXX XXOXX\n", "output_description": "For each data set, output a single line containing the fewest amount of numbers that still need to be called to form a bingo.", "samples": "[{\"input\": \"3\\n0 1 0 2 1 4 2\\nXXOOO OOOXX OOOOO OOOOO\\nXXOOO OOOXX OOOOO OOOOO\\nOOOOO OOOOO OOOOO OOOOO\\nOOOOO OOOOO XXOOO OOOXX\\nOOOOO OOOOO XXOOO OOOXX\\n1 1 0 1 1 5 1\\nXXXXX OOOOO OOOOO OOOOO OOOOO\\nOOOOO XXXXX OOOOO OOOOO OOOOO\\nOOOOO OOOOO XXXXX OOOOO OOOOO\\nOOOOO OOOOO OOOOO XXXXX OOOOO\\nOOOOO OOOOO OOOOO OOOOO XXXXX\\n15 15 15 15 4 1 1\\nXXXXX\\nXXXXX\\nXXXXX\\nXXXXX\\nXXXXX\\n\", \"output\": \"4\\n0\\n1\\n\\n\\n\"}]", "test_case_id": "1160", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1162, "fields": {"title": "It's My Derivative", "description": "As an unnamed space agency endured the ridicule following their now-infamous metric/English unit conversion, they made a vow to never let that error happen again. Unfortunately, they over-hired poor college students with excellent metric/English unit conversion skills but not calculus skills. In fact, nobody at this agency can now remember how to calculate the derivative of a polynomial, let alone evaluate the derivative of a polynomial for a given value of x. <p></p><p></p>As any good government agency would do in this case, they&#039;ve decided to outsource the task...to you. And not only do they want you to do the work, they want you to show how you did each step of your calculation so that they might re-learn the skill. <p></p>", "input_description": "Input to this problem will begin with a line containing a single integer n indicating the number of input polynomials. Each of the following n lines contain: \n\n\na value of x at which the first derivative of the polynomial is to be evaluated; \n\nand the polynomial. \nAll polynomials are expressed in terms of x, with single-digit integer coefficients (positive or negative) and non-negative single-digit integer powers of x. Polynomials do not contain spaces. Coefficients and powers of 1 (and powers of 0) are omitted from the notation, as is any \"+\" sign that might apply to the leading term. The leading term has the highest order, and is followed by the one (if any) with the next-highest order and so on. \n", "output_description": "For each polynomial in the input, output the following lines: \n\n\nThe string \"POLYNOMIAL N\" where N is 1 for the first polynomial, 2 for the second, etc.; \n\nThe polynomial, exactly as in the input; \n\nThe first derivative of the polynomial from line 2; \n\nThe polynomial in line 3 with x replaced by its value in parenthesis (e.g., if x is 6, \"2x^3\" becomes \"2(6)^3\"); \n\nThe polynomial in step 4 with each term fully evaluated; \n\nand the resulting integer, which is equivalent to f'(x) evaluated at the given value of x. \n\n", "samples": "[{\"input\": \"3\\n5 2x^7+x^2+3x-9\\n0 -5x^7+x^3+1\\n-3 5\\n\", \"output\": \"POLYNOMIAL 1\\n2x^7+x^2+3x-9\\n14x^6+2x+3\\n14(5)^6+2(5)+3\\n218750+10+3\\n218763\\nPOLYNOMIAL 2\\n-5x^7+x^3+1\\n-35x^6+3x^2\\n-35(0)^6+3(0)^2\\n0+0\\n0\\nPOLYNOMIAL 3\\n5\\n0\\n0\\n0\\n0\\n\"}]", "test_case_id": "1162", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 28, "total_accepted_number": 14, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1163, "fields": {"title": "Multiplying by Rotation", "description": "Multiplication of natural numbers in general is a cumbersome operation. In some cases however the product can be obtained by moving the last digit to the front. <p></p><p></p>Example: 179487 * 4 = 717948 <p></p><p></p>Of course this property depends on the numbersystem you use, in the above example we used the decimal representation. In base 9 we have a shorter example: <p></p><p></p>17 * 4 = 71 (base 9) <p></p><p></p>as (9 + 7) * 4 = 7 * 9 +1 <p></p><p></p>", "input_description": "The input for your program is a textfile. Each line consists of three numbers separated by a space: the base of the number system, the least significant digit of the first factor, and the second factor. This second factor is one digit only hence less than the base. The input file ends with the standard end-of-file marker. \n\n", "output_description": "Your program determines for each input line the number of digits of the smallest first factor with the rotamultproperty. The output-file is also a textfile. Each line contains the answer for the corresponding input line.", "samples": "[{\"input\": \"10 7 4\\n9 7 4\\n17 14 12\\n\", \"output\": \"6\\n2\\n4\\n\"}]", "test_case_id": "1163", "hint": "Warning: Not all numbers in this problem are decimal numbers! \\n\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 16, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1164, "fields": {"title": "Nesting a Bunch of Brackets", "description": "In this problem we consider expressions containing brackets that are properly nested. These expressions are obtained by juxtaposition of properly netsted expressions in a pair of matching brackets, the left one an opening and the right one a closing bracket. <p></p><p></p>( a + $ ( b = ) ( a ) ) is properly nested <p></p><p></p>( a + $ ) b = ) ( a ( ) is not. <p></p><p></p>In this problem we have several pairs of brackets, so we have to impose a second condition on the expression: the matching brackets should be of the same kind. Consequently (()) is OK, but ([)) is not. The pairs of brackets are: <p></p><p></p> (    )<p></p> [    ]<p></p> {    }<p></p> &lt;    &gt;<p></p> (*   *)<p></p><p></p>The two characters &#039;(*&#039; should be interpreted as one symbol, not as an opening bracket &#039;(&#039; followed immediately by an asterisk, and similarly for &#039;*)&#039;. The combination &#039;(*)&#039; should be interpreted as &#039;(*&#039; followed by &#039;)&#039;. <p></p>Write a program that checks wheter expressions are properly nested. If the expression is not properly nested your program should determine the position of the offending bracket, that is the length of the shortest prefix of the expression that can not be extended to a properly nested expression. Don&#039;t forget &#039;(*&#039; counts as one, as does &#039;*)&#039;. The characters that are not brackets also count as one. <p></p><p></p>", "input_description": "The input is a text-file. Each line contains an expression to be checked followed by and end-of-line marker. No line contains more than 3000 characters. The input ends with a standard end-of-file marker.", "output_description": "The output is a textfile. Each line contains the result of the check of the corresponding inputline, that is YES (in upper case), if the expression is OK, and (if it is not OK) NO \n\n", "samples": "[{\"input\": \"(*a++(*)\\n(*a{+}*)\", \"output\": \"NO\\nYES\\n\"}]", "test_case_id": "1164", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 229, "total_accepted_number": 44, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1165, "fields": {"title": "Filling the Gaps", "description": "At the largest conference on coding and cryptography the following theorem needed a proof or a counterexample: Suppose you are given a set of words of equal length; each word consisting of 0&#039;s, 1&#039;s and/or *&#039;s. Furthermore suppose the pattern of *&#039;s is different for all words in the set. By this we mean: if you replace all 0&#039;s and 1&#039;s by say $ you obtain different words. <p></p><p></p>The claim is: if you replace the *&#039;s by 0&#039;s and 1&#039;s in all possible ways, then you obtain a set that is at least as big as the set you started with. <p></p><p></p>Example: <p></p><p></p>{ 10*, *0*, *00 } produces { 100, 101, 000, 001 } <p></p><p></p>{ 100, 101, 10* } produces { 100, 101 } <p></p><p></p>Notice that the set in the latter example does not satisfy the condidtion mentioned above, so it does not provide a counterexample. <p></p><p></p>You program has to check for a number of cases: <p></p><p></p>Whether the pattern of *&#039;s is different for all words in the set and: <p></p>Compute the number of words obtained by replacing the *&#039;s by 0&#039;s and 1&#039;s. <p></p>The words will not be longer than 15 symbols.", "input_description": "The input is a text-file that presents a sequence of sets. Each set is described as follows. The first line gives two integers: the length of the words and the number of the words. Then follow the words, each on a separate line. The end of the sequence of sets is indicated by a set with wordlength 0 and number of words equal to 0. \n\n", "output_description": "The output is a textfile that contains one line for each set. if the pattern of *'s is different for all the words in this set this line should contain YES (in uppercase), followed by a space and the number of obtained words, otherwise it should contain NO (uppercase) only.", "samples": "[{\"input\": \"3 3\\n10*\\n*0*\\n*00\\n4 3\\n1100\\n1101\\n110*\\n0 0\\n\", \"output\": \"YES 4\\nNO\\n\"}]", "test_case_id": "1165", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 11, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1166, "fields": {"title": "Cabinets", "description": "Well-Built Cabinet Distributors, Inc. recently received an electronic catalog of cabinets from their leading manufacturer, Woodcraft. Unfortunately, the format of the data is not consistent with that expected by Well-Built&#039;s inventory software. For this problem, you will construct a program that reformats the Woodcraft catalog for use by the inventory software.", "input_description": "nput will be formatted as from a comma-delimited ASCII file. Your program must read all input from the standard input file. Each line in the input has a maximum length of 64 characters and contains the following fields:\n\nField         Length   Explanation\n----------------------------------------------------------------------------\nStyle Code    1-3      Code specifying the cabinet's style.\nStyle Name    0-15     Name for cabinet style.\nDescription   1-15     Code describing type of cabinet.\nExtension     0-25     Additional information about cabinet.\nUnit Price    0-6      Manufacturer's suggested retail price (dollars x 100).\n\n   The records are presented in ascending order by Style Code. You may   assume that all fields will be consistent with the lengths given, and   that all fields will contain appropriate characters.\n", "output_description": "Output will consist of a reformatted catalog. The reformatted catalog file will be a comma-delimited ASCII file. The first record in the file must be the following:\n\nItem Id,Item Desc,Item Price\n\n   Each remaining record in the file will have a maximum length of 50 characters and contain the following fields:\n\nField         Length   Explanation\n----------------------------------------------------------------------------\nItem Id       4-13     Unique identification code for inventory database.\nItem Desc     1-30     Inventory description of cabinet.\nItem Price    4-7      Manufacturer's suggested retail price.\n\n   The Item Id is formed by concatenating the Style Code and the Description. If the Style Code is less than three characters long, it must be left-filled with zeros to three characters. If the Item Id exceeds 13 characters, then the record is rejected.\n   \n   The Item Desc is formed by concatenating the Style Name, a hyphen, and the Extension. If the Style Name is missing, use the Style Name from the first record of the corresponding Style Code group. If this first record has no Style Name either, then reject the record. If the Extension is not present, then Item Desc is the same as Style Name (no hyphen). If Item Desc exceeds 30 characters, then it must be truncated on the right.\n   \n   The Item Price is formed by formatting the Unit Price as dollars and cents. If Unit Price is not present, then Item Price = 0.00.\n", "samples": "[{\"input\": \"23,CHAMPAGNE,BASE36,3\" RECESSED TOE KICK,8900\\n23,,BASE54,,11000\\n25,LAUREL,CNR24LT,,15000\\n107,COLONIAL,BASE54WSIDEJAM\\n202,SAGEBRUSH,OVRHD54P,USE WITH HDWARE KIT #3207\\n221,ALVEA MODERN,BASE36\\n221,ALVEA MODERN,OVRHD54WCAP\\n\", \"output\": \"Item Id,Item Desc,Item Price\\n023BASE36,CHAMPAGNE-3\" RECESSED TOE KICK,89.00\\n023BASE54,CHAMPAGNE,110.00\\n025CNR24LT,LAUREL,150.00\\n202OVRHD54P,SAGEBRUSH-USE WITH HDWARE KIT ,0.00\\n221BASE36,ALVEA MODERN,0.00\\n\"}]", "test_case_id": "1166", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 5, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1167, "fields": {"title": "Matching Meetings", "description": "\u201cArgh! I can\u2019t stand it anymore!\u201d exclaimed Dan Hanson, CS Department administrative assistant,<p></p>as he slammed down the phone.<p></p>\u201cWhat\u2019s the matter, Dan?\u201d asked Valentine McKee, who happened to be in the office making<p></p>some copies.<p></p>\u201cProfessors and scheduling. I\u2019m trying to schedule this SSC meeting but as soon as I pick a<p></p>time and start making calls to confirm it, one of the committee members has a conflict. I feel<p></p>like this is going to go on forever!\u201d He Said.<p></p>\u201cMaybe the computer can help,\u201d suggested Valentine. \u201cThis is the computer science department,<p></p>after all,\u201d she Said.<p></p>", "input_description": "The first line of input will be the \u201ccurrent\u201d date.\nAll dates will be specified in the form: dayname month date, where:\n&#8226; dayname is single character fromthe set f M, T, W, R, F g representing Monday, Tuesday, Wednesday, Thursday, and Friday, respectively.\n&#8226; month is an integer such that 1 \u2264 month \u2264 12.\n&#8226; date is an integer such that 1 \u2264 date \u2264 31.\nThe next line of input will contain two integers, n and t. n specifies how many meetings should be scheduled, while t indicates how long each meeting will last. t will be specified in increments of 15 minutes.\nAll times will be specified as zero padded 4 digit integers in military time. The first two digits indicate the hour (00 corresponds to midnight). The appointment times in the input will be in the range of 09 \u2264 hour \u2264 17. The last two digits indicate the minute, and will be in the be from the set f 00, 15, 30, 45 g.\nYou may assume that date, while formally bounded by 31, will not be greater than the number of days in the month. You may also assume that all years will not be leap years. The rest of the input will contain the schedules for at most 100 individuals. Each schedule will begin with a line specifying the individual\u2019s name, followed by a list of appointments for that individual, ending with the word \u201cdone\u201d on a line by itself. No individual will have more than 100 ppointments scheduled. Each appointment will be a date followed by a start time and an end time. No appointment will extend before 9am or after 5pm.\nThe last line of input will be the word \u201cdone\u201d on a line by itself.\nNo appointment will be before the current date, or more than 1 year after the current date.", "output_description": "Your program should output the first n possible meeting times when all the people from the input can meet for the specified amount of time (t). Each line of output should contain one meeting date and time. Once a commonmeeting time is found, it should be considered allocated for all people, and cannot be used to schedule other meetings.\nThe meetings should be sorted by date and time, with the earliest meeting first. \nIf less than n meeting times are available, print all possible meeting times followed by \u201cNo more times available\u201d.", "samples": "[{\"input\": \"M 8 21\\n2 60\\nJack Casey\\nM 8 21 0900 1015\\ndone\\nJack Ross\\nM 8 21 1000 1100\\nM 8 21 1200 1700\\ndone\\nJack Swigert\\nM 8 21 1600 1700\\nT 8 22 0900 1000\\ndone\\ndone\\n\", \"output\": \"M 8 21 1100\\nT 8 22 1000\\n\"}]", "test_case_id": "1167", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 73, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1168, "fields": {"title": "Simply Syntax", "description": "In the land of Hedonia the o_cial language is Hedonian, A Hedonian professorhad noticed that many of her students still did not master the syntax of Hedonian well. Tired of correcting the many syntactical mistakes, she decided to challenge the students and asked them to write a program that could check the syntactical correctness of any sentence they wrote. Similar to the nature of Hedonians, the syntax of Hedonian is also pleasantly simple. Here are the rules:<p></p>1.\tThe only characters in the language are the characters p through z and N, C, D, E, and I.<p></p>2.\tEvery character from p through z is a correct sentence.<p></p>3.\tIf s is a correct sentence, then so is Ns.<p></p>4.\tIf s and t are correct sentences, then so are Cst, Dst, Est and Ist.<p></p>5.\tRules 1 to 4 are the only rules to determine the syntactical correctness of a sentence.<p></p>You are asked to write a program that checks if sentences satisfy the syntax rules given in Rule 1 to Rule 5.<p></p>", "input_description": "The input consists of a number of sentences consisting only of characters p through z and N, C, D, E and I.  Each sentence is ended by a new line character. The collection of sentences is terminated by the end-of-file character.  If necessary, you may assume that each sentence has at most 256 characters and at least 1 character.", "output_description": "The output consists of the answers YES for each well_formed sentence and NO for each not-well-formed sentence, The answers are given in the same order as the sentences. Each answer is followed by a new-line character and the list of answers is followed by an end-of-file character.", "samples": "[{\"input\": \"Cp\\nIsz\\nNIsz\\nCqpq\\n\", \"output\": \"NO\\nYES\\nYES\\nNO\\n\"}]", "test_case_id": "1168", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 136, "total_accepted_number": 58, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1169, "fields": {"title": "TEX Quotes", "description": "TEX is a typesetting language developed by Donald Knuth_ It takes source text together with a few typesetting instructions and produces, one hopes, a beautiful document.  Beautiful documents use \u201cand\u201d to delimit quotations, rather than the mundane \u201c which is what is provided by most keyboards. Keyboards typically do not have an oriented double quote, but they do have a left-single-quote \u2018 and a right_single_quote \u2019. Check your keyboard now to locate the left-single-quote key. sometimes called the backquote key and the right_single_quote key.(sometimes called the \u201capostrophe\u201d or just \u201cquote\u201d). Be careful not to confuse the left-single-quote with the backslash key. TEX lets the user type two left-single-quotes to create a left-double-quote and two right-single-quotes to create a right-double-quote. Most typists however are accustomed to delimiting their quotations with the unoriented double-quote.<p></p>If the source contained<p></p>\t\u201cTo be or not to be,\u201d quoth the bard, \u201cthat is the question.\u201d<p></p>then the typeset document produced by TEX would not contain the desired form. \u201cTo be or not to be,\u201d quoth the bard, \u201cthat is the question.\u201d In order to produce the desired form, the source file must contain the sequence<p></p>``To be or not to be,\u2019\u2019 quoth the bard, ``that is the question.\u2019\u2019<p></p><p></p>You are to write a program which converts text containing double quote characters into text that is identical except that double quotes have been replaced by the two character sequences required by TEX for delimiting quotations with oriented double quotes. The double quote characters should be replaced appropriately by either \u2018\u2018 if the \u201c opens a quotation and by \u2019\u2019 if the \u201c closes a quotation. Notice that the question of nested quotations does not arise. The first \u201c must be replaced by ``.  the next by\u2019\u2019. the next by \u2018\u2018,  the next by \u2019\u2019, the next by``, the next by\u2019\u2019, and so on.<p></p>", "input_description": "Input will consist of several lines of text containing an even number of double quote characters. Input is ended with an end of file character.", "output_description": "The text must be output exactly as it was input except that the first \u201c in each pair is replaced by two `` characters and the second \" in each pair is replaced by two ' characters.\n", "samples": "[{\"input\": \"u201cTo be or not to be,u201d quoth the Bard, u201cthat\\nis the question.u201d\\nThe programming contestant replied: u201cI must disagree.\\nTo u2018Cu2019 or not to u2018Cu2019, that is The Question!u201d\\n\", \"output\": \"``To be or not to be,$(quat)$(quat) quoth the Bard, ``that\\nis the question.$(quat)$(quat)\\nThe programming contestant replied: ``I must disagree.\\nTo `C$(quat) or not to `C$(quat) that is The Question!$(quat)$(quat)\\n\\n\"}]", "test_case_id": "1169", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 141, "total_accepted_number": 84, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1170, "fields": {"title": "Jack Straws", "description": "In the game of Jack Straws, a number of plastic or wooden &quot;straws&quot; are   dumped on the table and players try to remove them one-by-one without   disturbing the other straws. Here, we are only concerned with if   various pairs of straws are connected by a path of touching straws. You will be given a list of the endpoints for some straws (as if they were dumped on a large piece of graph paper) and then will be asked if various pairs of straws are connected. Note that touching is connecting, but also two straws can be connected indirectly via other connected straws.", "input_description": "A problem consists of multiple lines of input. The first line will be    an integer n (1 < n < 13) giving the number of straws on the table. Each of the next n lines contain 4 positive integers, x1 , y1 , x2 and y2 , giving the coordinates, (x1 ; y1 ); (x2 ; y2 ) of the endpoints of a single straw. All coordinates will be less than 100. (Note that the straws will be of varying lengths.) The first straw entered will be known as straw #1, the second as straw #2, and so on. The remaining lines of input (except for the final line) will each contain two positive integers, a and b, both between 1 and n, inclusive. You are to determine if straw a can be connected to straw b. When a = 0 = b, the input is terminated. There will be no illegal input and there are no zero-length straws.", "output_description": "You should generate a line of output for each line containing a pair a and b, except the final line where a = 0 = b. The line should say simply \"CONNECTED\", if straw a is connected to straw b, or \"NOT CONNECTED\", if straw a is not connected to straw b. For our purposes, a straw is considered connected to itself.", "samples": "[{\"input\": \"7\\n1 6 3 3\\n4 6 4 9\\n4 5 6 7\\n1 4 3 5\\n3 5 5 5\\n5 2 6 3\\n5 4 7 2\\n1 4\\n1 6\\n3 3\\n6 7\\n2 3\\n1 3\\n0 0\\n\", \"output\": \"CONNECTED\\nNOT CONNECTED\\nCONNECTED\\nCONNECTED\\nNOT CONNECTED\\nCONNECTED\\n\"}]", "test_case_id": "1170", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 42, "total_accepted_number": 16, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1171, "fields": {"title": "Cat and Mouse", "description": "In a house with many rooms live a cat and a mouse. The cat and the    mouse each have chosen one room as their &quot;home&quot;. From their &quot;home&quot; they regularly walk through the house. A cat can go from room A to room B if and only if there is a cat door from room A to room B. Cat doors can only be used in one direction. Similarly a mouse can go from room A to room B if and only if there is a mouse door from room A to room B. Also mouse doors can be used in only one direction.   Furthermore, cat doors cannot be used by a mouse, and mouse doors cannot be used by a cat.<p></p>   <p></p>   Given a map of the house you are asked to write a program that finds   out<p></p>    1. if there exist walks for the cat and mouse where they meet each       other in some room, and<p></p>    2.<p></p>    3. if the mouse can make a walk through at least two rooms, end in       its &quot;home&quot; room again, and along the way cannot ever meet the cat.       (Here, the mouse may not ever meet the cat, whatever the cat does.)<p></p>  <p></p>  ", "input_description": "The input consists of integers and defines the configuration of the   house. The first line has three integers separated by blanks: the first integer defines the number of rooms, the second the initial room of the cat (the cat's \"home\"), and the third integer defines the initial room of the mouse (the mouse's \"home\"). Next there are zero or more lines, each with two positive integers separated by a blank. These lines are followed by a line with two _1's separated by a blank. The pairs of positive integers define the cat doors. The pair A B represents the presence of a cat door from room A to room B . Finally there are zero or more lines, each with two positive integers separated by a blank. These pairs of integers define the mouse doors.\n   Here, the pair A B represents the presence of a mouse door from room A to room B .\n   \n   The number of rooms is at least one and at most 100. All rooms are   numbered consecutively starting at 0. You may assume that all positive   integers in the input are legal room numbers.\n", "output_description": "The output consists of two characters separated by a blank and ended   by a new-line character. The first character is Y if there exist walks  for the cat and mouse where they meet each other in some room. Otherwise, it is N. The second character is Y if the mouse can make a walk through at least two rooms, end in its \"home\" room again, and along the way cannot ever meet the cat. Otherwise, it is N.", "samples": "[{\"input\": \"5 2 4\\n0 1\\n1 0\\n2 0\\n3 2\\n4 1\\n-1 -1\\n0 2\\n1 4\\n2 3\\n3 0\\n3 1\\n3 4\\n4 3\\n\", \"output\": \"Y Y\\n\"}]", "test_case_id": "1171", "hint": " For example, in the map, the cat can meet the mouse in rooms 0, 1, and 2. Also, the mouse can make a walk through two rooms without ever meeting the cat, viz., a round trip from room 4 to 3 and back\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 39, "total_accepted_number": 14, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1172, "fields": {"title": "Expanding Fractions", "description": "In this problem you are to print the decimal expansion of a quotient of two integers. As you well know, the decimal expansions of many integer quotients result in decimal expansions with repeating sequences of digits. You must identify these. You will print the decimal expansion of the integer quotient given, stopping just as the expansion terminates or just as the repeating pattern is to repeat itself for the first time. If there is a repeating pattern, you will say how many of the digits are in the repeating pattern.", "input_description": "There will be multiple input instances, each instance consists of two positive integers on a line. The first integer represents the numerator of the fraction and the second represents the denominator. In this problem, the numerator will always be less than the denominator and the denominator will be less than 1000. Input terminates when numerator and denominator are both zero.", "output_description": " For each input instance, the output should consist of the decimal expansion of the fraction, starting with the decimal point. If the  expansion terminates, you should print the complete decimal expansion.  If the expansion is infinite, you should print the decimal expansion up to, but not including the digit where the repeated pattern first repeats itself. For instance, 4/11 = .3636363636..., should be printed as .36. (Note that the shortest repeating pattern should be found. In the above example, 3636 and 363636, among others, are repeating patterns, but the shortest repeating pattern is 36.) Since some of these expansions may be quite long, multiple line expansions should each contain exactly 50 characters on each line (except the last line, which, of course, may be shorter) | that includes the beginning decimal point. (Helpful hint: The number of digits before the pattern is repeated will never be more than the value of the denominator.) On the line immediately following the last line of the decimal expansion there should be a line saying either \"This expansion terminates.\", or \"The last n digits repeat forever.\", where n is the number of digits in the repeating pattern.   ", "samples": "[{\"input\": \"3 7\\n345 800\\n112 990\\n53 122\\n0 0\\n\", \"output\": \".428571\\nThe last 6 digits repeat forever.\\n.43125\\nThis expansion terminates.\\n.113\\nThe last 2 digits repeat forever.\\n.4344262295081967213114754098360655737704918032786\\n885245901639\\nThe last 60 digits repeat forever.\\n\\n\\n\"}]", "test_case_id": "1172", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 156, "total_accepted_number": 48, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1173, "fields": {"title": "Egyptian Multiplication", "description": "In 1858, A. Henry Rhind, a Scottish antiquary, came into possession of a document which is now called the Rhind Papyrus. Titled &quot;Directions for Attaining Knowledge into All Obscure Secrets&quot;, the document provides important clues as to how the ancient Egyptians performed arithmetic.<p></p>   <p></p>   There is no zero in the number system. There are separate characters denoting ones, tens, hundreds, thousands, ten-thousands, hundred-thousands, millions and ten-millions. For the purposes of this   problem, we use near ASCII equivalents for the symbols:<p></p>     * | for one (careful, it&#039;s a vertical line, not 1)<p></p>     * n for ten<p></p>     * 9 for hundred<p></p>     * 8 for thousand<p></p>     * r for ten-thousand<p></p>       <p></p>   (The actual Egyptian hieroglyphs were more picturesque but followed   the general shape of these modern symbols. For the purpose of this  problem, we will not consider numbers greater than 99,999.)<p></p>   Numbers were written as a group of ones preceded in turn by groups of tens, hundreds, thousands and ten-thousands. Thus our number 4,023 would be rendered: ||| nn 8888. Notice that a zero digit is indicated by a group consisting of none of the corresponding symbol. The number 40,230 would thus be rendered: nnn 99 rrrr. (In the Rhind Papyrus, the groups are drawn more picturesquely, often spread across more than one horizontal line; but for the purposes of this problem, you should write numbers all on a single line.)<p></p>   <p></p>   To multiply two numbers a and b, the Egyptians would work with two columns of numbers. They would begin by writing the number | in the left column beside the number a in the right column. They would proceed to form new rows by doubling the numbers in both columns. Notice that doubling can be effected by copying symbols and normalizing by a carrying process if any group of symbols is larger than 9 in size. Doubling would continue as long as the number in the left column does not exceed the other multiplicand b. The numbers in the first column that summed to the multiplicand b were marked with an asterisk. The numbers in the right column alongside the asterisks were then added to produce the result. Below, we show the steps corresponding to the multiplication of 483 by 27:<p></p>| *                             ||| nnnnnnnn 9999<p></p>|| *                            |||||| nnnnnn 999999999<p></p>||||                            || nnn 999999999 8<p></p>|||||||| *                      |||| nnnnnn 99999999 888<p></p>|||||| n *                      |||||||| nn 9999999 8888888<p></p>The solution is: | nnnn 888 r<p></p><p></p>   (The solution came from adding together:<p></p>||| nnnnnnnn 9999<p></p>|||||| nnnnnn 999999999<p></p>|||| nnnnnn 99999999 888<p></p>|||||||| nn 9999999 8888888.)<p></p><p></p>   You are to write a program to perform this Egyptian multiplication.<p></p>", "input_description": "Input will consist of several pairs of nonzero numbers written in the Egyptian system described above. There will be one number per line; each number will consist of groups of symbols, and each group is terminated by a single space (including the last group). Input will be terminated by a blank line.", "output_description": "For each pair of numbers, your program should print the steps described above used in Egyptian multiplication. Numbers in the left column should be ush with the left margin. Each number in the left and right column will be represented by groups of symbols, and each group is terminated by a single space (including the last group). If there is an asterisk in the left column, it should be separated from the end of the left number by a single space. Up to the 40th character position should then be filled with spaces. Numbers in the right column should begin at the 41st character position on the line and end with a newline character. Test data will be chosen to ensure that no overlap can occur. After showing each of the doubling steps, your program should print the string: \"The solution is: \" followed by the product of the two numbers in Egyptian notation.", "samples": "[{\"input\": \"||\\n||\\n|||\\n||||\\nnnnnnn 9\\n||| n\\nn\\n9\\n|||\\n8\\n\", \"output\": \"|                                 ||\\n|| *                              ||||\\nThe solution is: ||||\\n|                                 |||\\n||                                ||||||\\n|||| *                            || n\\nThe solution is: || n\\n| *                               nnnnnn 9\\n||                                nn 999\\n|||| *                            nnnn 999999\\n|||||||| *                        nnnnnnnn 99 8\\nThe solution is: nnnnnnnn 88\\n|                                 n\\n||                                nn\\n|||| *                            nnnn\\n||||||||                          nnnnnnnn\\n|||||| n                          nnnnnn 9\\n|| nnn *                          nn 999\\n|||| nnnnnn *                     nnnn 999999\\nThe solution is: 8\\n|                                 |||\\n||                                ||||||\\n||||                              || n\\n|||||||| *                        |||| nn\\n|||||| n                          |||||||| nnnn\\n|| nnn *                          |||||| nnnnnnnnn\\n|||| nnnnnn *                     || nnnnnnnnn 9\\n|||||||| nn 9 *                   |||| nnnnnnnn 999\\n|||||| nnnnn 99 *                 |||||||| nnnnnn 9999999\\n|| n 99999 *                      |||||| nnn 99999 8\\nThe solution is: 888\\n\"}]", "test_case_id": "1173", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 6, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1175, "fields": {"title": "Company", "description": "company pays different hourly wages for different job types. Each week the company keeps evidence of the total number of work hours for every job type and the total amount paid to all employees for that week. In different weeks different job types can be accomplished. The hourly wage for any job type in the same company remains unchanged. The hourly wage for any job type is a positive integer and the ratio between the maximum wage and the minimum wage is less than 6. <p></p><p></p>You are asked to write a program that computes the hourly wage for every job type using the data collected a period of time (one or several weeks). The number of job types is limited to 200 and the number of weeks in one data set is limited to 50.<p></p>", "input_description": "The input contains several data sets in text format. \n\nThe format for the data set is: \n\nThe number of lines for the data set; \ninformation_for__one_or_more_weeks \nThe format of the information for a week is the following: \njob_type1 number_of _hours1 \njob_type2 number_of _hours2 \njob_type3 number_of _hours3 \n... ... \n. total_paid ( the dot marks the ending of info for a week) \n\nThe job type is represented as a string of characters (limited to 20). The number of hours is a positive integer (smaller than 1E5). The total paid is a positive integer (smaller than 2E10). \n\n", "output_description": "The program should write to standard output (for every job type involved in the data set) a line containing the job type and the hourly wage. The output for a data set ends with a line containing a dot. \n\nIf the program cannot compute a unique hourly wage for every job type it will print \"Incomplete data\" and if it cannot compute an integer hourly wage it will print \"Inconsistent data\" \n\nAn example is given in the following: \n\n", "samples": "[{\"input\": \"5\\njob1 6\\njob2 5\\njob8 4\\njob10 3\\n. 100\\n13\\njob3 1\\njob2 2\\n. 40\\njob1 3\\njob2 1\\n. 100\\njob1 1\\njob3 2\\njob2 3\\n. 100\\njob1 1\\njob2 5\\n. 80\\n\", \"output\": \"Incomplete data\\n.\\njob3 20\\njob2 10\\njob1 30\\n.\\n\"}]", "test_case_id": "1175", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1176, "fields": {"title": "Multiple", "description": "a program that, given a natural number N between 0 and 4999 (inclusively), and M distinct decimal digits X1,X2..XM (at least one), finds the smallest strictly positive multiple of N that has no other digits besides X1,X2..XM (if such a multiple exists).<p></p>", "input_description": "The input has several data sets separated by an empty line, each data set having the following format: \n\nOn the first line - the number N \nOn the second line - the number M \nOn the following M lines - the digits X1,X2..XM.\n", "output_description": "For each data set, the program should write to standard output on a single line the multiple, if such a multiple exists, and 0 otherwise. \n\nAn example of input and output: \n", "samples": "[{\"input\": \"22\\n3\\n7\\n0\\n1\\n\\n2\\n1\\n1\\n\", \"output\": \"110\\n0\\n\"}]", "test_case_id": "1176", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 32768, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 50, "total_accepted_number": 13, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1177, "fields": {"title": "Girls and Boys", "description": "In the second year of the university somebody started a study on the romantic relations between the students. The relation &quot;romantically involved&quot; is defined between one girl and one boy. For the study reasons it is necessary to find out the maximum set satisfying the condition: there are no two students in the set who have been &quot;romantically involved&quot;. The result of the program is the number of students in such a set.<p></p>", "input_description": "The input contains several data sets in text format. Each data set represents one set of subjects of the study, with the following description: \n\nthe number of students \nthe description of each student, in the following format \nstudent_identifier:(number_of_romantic_relations) student_identifier1 student_identifier2 student_identifier3 ... \nor \nstudent_identifier:(0) \n\nThe student_identifier is an integer number between 0 and n-1 (n <=500 ), for n subjects.\n", "output_description": "For each given data set, the program should write to standard output a line containing the result.", "samples": "[{\"input\": \"7\\n0: (3) 4 5 6\\n1: (2) 4 6\\n2: (0)\\n3: (0)\\n4: (2) 0 1\\n5: (1) 0\\n6: (2) 0 1\\n3\\n0: (2) 1 2\\n1: (1) 0\\n2: (1) 0\\n\", \"output\": \"5\\n2\"}]", "test_case_id": "1177", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 58, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1178, "fields": {"title": "Symbolic Derivation", "description": "Write a program that performs symbolic derivation f&#039;(x) = df(x)/dx of a given function f(x). The function f(x) is defined by an expression which may contain the following operations: + (addition), - (subtraction), * (multiplication), / (division), and ln (natural logarithm). Besides, the operands may be the variable x and numerical constants. The expression may contain arbitrarily nested sub-expressions in parentheses ( ). The expression is given in a usual, infix form, such as: <p></p>(2*ln(x+1.7)-x*x)/((-7)+3.2*x*x)+(x+3*x)*x <p></p><p></p>Numerical constants have the form d.d, with an optional sign (+ or -), where the number of digits both in integer and decimal parts are arbitrary. The input expression is guaranteed to be correct (no syntax error can occur). <p></p><p></p>The output expression should be written in infix form. It should not be optimized for human reading. This means, it can contain redundancies, such as 0*x, 1*x, 0+x, etc. The derivation should be performed using the following rules: <p></p><p></p>1. The operators * and / are of higher priority than the operators + and -. Parentheses may change the priorities as usually. <p></p><p></p>2. The operators +, -, *, and / are left-associative, meaning that they group from left to right: <p></p>a*b*c = (a*b)*c, a/b/c = (a/b)/c, a/b*c = (a/b)*c, etc. <p></p><p></p>3. The rules for derivation are: <p></p><p></p><p></p>(a + b)&#039; = a&#039; + b&#039;<p></p>(a - b)&#039; = a&#039; - b&#039;<p></p>(a * b)&#039; = (a&#039; * b + a * b&#039;)<p></p>(a / b)&#039; = (a&#039; * b - a * b&#039;) / b^2\t\tNote: use b^2 and not (b*b) for presentation<p></p>ln(a)&#039; = (a&#039;)/(a)<p></p>x&#039; = 1<p></p>const&#039; = 0<p></p><p></p><p></p>4. While producing the symbolic derivation, use parentheses for output strictly as stated in the previous rule. Do not perform presentation optimizations, such as 0*a = 0, 1*a = a, etc. <p></p>", "input_description": "The input is a textual file which has one f(x) definition per line. The input lines do not have blanks.", "output_description": "The output should contain lines with corresponding symbolic derivations f\u2019=df/dx, one line for each f. The strings representing f(x) and f \u2019(x) are guaranteed to have no more than 100 characters. \n", "samples": "[{\"input\": \"x*x/x\\n-45.78*x+x\\n-2.45*x*x+ln(x-3)\", \"output\": \"((1*x+x*1)*x-x*x*1)/x^2\\n(0*x-45.78*1)+1\\n((0*x-2.45*1)*x-2.45*x*1)+(1-0)/(x-3)\\n\"}]", "test_case_id": "1178", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1179, "fields": {"title": "Rectangles", "description": "A specialist in VLSI design testing must decide if there are some components that cover each other for a given design. A component is represented as a rectangle. Assume that each rectangle is rectilinearly oriented (sides parallel to the x and y axis), so that the representation of a rectangle consists of its minimum and maximum x and y coordinates. <p></p>Write a program that counts the rectangles that are entirely covered by another rectangle. ", "input_description": "The input contains the text description of several sets of rectangles. The specification of a set consists of the number of rectangles in the set and the list of rectangles given by the minimum and maximum x and y coordinates separated by white spaces, in the format: \n\nnr_rectangles \nxmin1 xmax1 ymin1 ymax1 \nxmin2 xmax2 ymin2 ymax2 \n... \nxminn xmaxn yminn ymaxn \n\nFor each set,there will be less than 5000 rectangles.\n", "output_description": "The output should be printed on the standard output. For each given input data set, print one integer number in a single line that gives the result (the number of rectangles that are covered). ", "samples": "[{\"input\": \"3\\n100 101 100 101\\n0 3 0 101\\n20 40 10 400\\n4\\n10 20 10 20\\n10 20 10 20\\n10 20 10 20\\n10 20 10 20\\n\", \"output\": \"0\\n4\"}]", "test_case_id": "1179", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 377, "total_accepted_number": 99, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1180, "fields": {"title": "COURSES", "description": "Consider a group of N students and P courses. Each student visits zero, one or more than one courses. Your task is to determine whether it is possible to form a committee of exactly P students that satisfies simultaneously the conditions: <p></p><p></p><p></p>every student in the committee represents a different course (a student can represent a course if he/she visits that course) <p></p><p></p>each course has a representative in the committee <p></p><p></p>", "input_description": "Your program should read sets of data from the std input. The first line of the input contains the number of the data sets. Each data set is presented in the following format: \n\nP N \nCount1 Student1 1 Student1 2 ... Student1 Count1 \nCount2 Student2 1 Student2 2 ... Student2 Count2 \n... \nCountP StudentP 1 StudentP 2 ... StudentP CountP \n\nThe first line in each data set contains two positive integers separated by one blank: P (1 <= P <= 100) - the number of courses and N (1 <= N <= 300) - the number of students. The next P lines describe in sequence of the courses ?from course 1 to course P, each line describing a course. The description of course i is a line that starts with an integer Count i (0 <= Count i <= N) representing the number of students visiting course i. Next, after a blank, you\uf8e9ll find the Count i students, visiting the course, each two consecutive separated by one blank. Students are numbered with the positive integers from 1 to N. \nThere are no blank lines between consecutive sets of data. Input data are correct. \n\n", "output_description": "The result of the program is on the standard output. For each input data set the program prints on a single line \"YES\" if it is possible to form a committee and \"NO\" otherwise. There should not be any leading blanks at the start of the line. \n", "samples": "[{\"input\": \"2\\n3 3\\n3 1 2 3\\n2 1 2\\n1 1\\n3 3\\n2 1 3\\n2 1 3\\n1 1\\n\", \"output\": \"YES\\nNO\\n\"}]", "test_case_id": "1180", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 45, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1181, "fields": {"title": "Closest Common Ancestors", "description": "Write a program that takes as input a rooted tree and a list of pairs of vertices. For each pair (u,v) the program determines the closest common ancestor of u and v in the tree. The closest common ancestor of two nodes u and v is the node w that is an ancestor of both u and v and has the greatest depth in the tree. A node can be its own ancestor (for example in Figure 1 the ancestors of node 2 are 2 and 5)", "input_description": "The data set, which is read from a the std input, starts with the tree description, in the form: \n\nnr_of_vertices \nvertex:(nr_of_successors) successor1 successor2 ... successorn \n... \nwhere vertices are represented as integers from 1 to n ( n <= 900 ). The tree description is followed by a list of pairs of vertices, in the form: \nnr_of_pairs \n(u v) (x y) ... \n\nThe input file contents several data sets (at least one). \nNote that white-spaces (tabs, spaces and line breaks) can be used freely in the input.\n", "output_description": "For each common ancestor the program prints the ancestor and the number of pair for which it is an ancestor. The results are printed on the standard output on separate lines, in to the ascending order of the vertices, in the format: ancestor:times \nFor example, for the following tree: \n\n<img src=uploadFiles\\1181.jpg>", "samples": "[{\"input\": \"5\\n5:(3) 1 4 2\\n1:(0)\\n4:(0)\\n2:(1) 3\\n3:(0)\\n6\\n(1 5) (1 4) (4 2)\\n      (2 3)\\n(1 3) (4 3)\\n\", \"output\": \"2:1\\n5:5\"}]", "test_case_id": "1181", "hint": "Huge input, scanf is recommended.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 32, "total_accepted_number": 13, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1184, "fields": {"title": "Anagram", "description": "You are to write a program that has to generate all possible words from a given set of letters. <p></p>Example: Given the word &quot;abc&quot;, your program should - by exploring all different combination of the three letters - output the words &quot;abc&quot;, &quot;acb&quot;, &quot;bac&quot;, &quot;bca&quot;, &quot;cab&quot; and &quot;cba&quot;. <p></p>In the word taken from the input file, some letters may appear more than once. For a given word, your program should not produce the same word more than once, and the words should be output in alphabetically ascending order. <p></p><p></p>", "input_description": "The input consists of several words. The first line contains a number giving the number of words to follow. Each following line contains one word. A word consists of uppercase or lowercase letters from A to Z. Uppercase and lowercase letters are to be considered different. The length of each word is less than 13.\n", "output_description": "For each word in the input, the output should contain all different words that can be generated with the letters of the given word. The words generated from the same input word should be output in alphabetically ascending order. An upper case letter goes before the corresponding lower case letter. \n", "samples": "[{\"input\": \"3\\naAb\\nabc\\nacba\\n\\n\", \"output\": \"Aab\\nAba\\naAb\\nabA\\nbAa\\nbaA\\nabc\\nacb\\nbac\\nbca\\ncab\\ncba\\naabc\\naacb\\nabac\\nabca\\nacab\\nacba\\nbaac\\nbaca\\nbcaa\\ncaab\\ncaba\\ncbaa\\n\\n\"}]", "test_case_id": "1184", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 134, "total_accepted_number": 72, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1185, "fields": {"title": "Peter's Calculator", "description": "Unfortunately, Peter&#039;s Calculator broke down last week. Now Peter is left with his computer, which has no calculator application, and paper and pencil, which is too tiresome for an engineer. As one of Peter&#039;s friends, you are asked to write him a calculator application. After talking to him, you figure out the following: <p></p><p></p><p></p><p></p><p></p>Peter does only integer arithmetic. The operations he needs are addition, subtraction and multiplication. <p></p><p></p>He would like to use an arbitrary number of variables whose names are not longer than 50 characters. <p></p><p></p>His main way of doing calculations are to type in a few formulas and to assign them to variables. Some formulas are complicated expressions, which can refer to yet undefined variables, while other formulas consist of a single number. Then Peter asks for the value of some variables, i.e. he evaluates the formulas. <p></p><p></p>Peters wants to redefine some variables and then to reevaluate formulas that depend on these variables. <p></p><p></p><p></p>The input strictly adheres to the following syntax (given in EBNF): <p></p><p></p>file = line { line } .<p></p>line = [ assignment | print | reset ] .<p></p>assignment = var &quot;:=&quot; expression.<p></p>print = &quot;PRINT&quot; var.<p></p>reset = &quot;RESET&quot;.<p></p>expression = term { addop term }.<p></p>term = factor { mulop factor }.<p></p>factor = &quot;(&quot; expression &quot;)&quot; | var | number.<p></p>addop = &quot;+&quot; | &quot;-&quot;.<p></p>mulop = &quot;*&quot;. <p></p><p></p><p></p><p></p>In the Extended Backus-Naur Formalism (EBNF), A = B C declares that the grammatical construct A consists of a B followed by a C. A = B | C means that A consists of a B or, alternatively, of a C. A = [ B ] defines construct A to be either a B or nothing and A = { B } tells you that A consists of the concatenation of any number of Bs (including none). <p></p><p></p>The production var stands for the name of a variable, which starts with a letter followed by up to 49 letters or digits. Letters may be uppercase or lowercase. The production number stands for a integer number. The precise syntax for these productions are given below. The case of letters is important for both variables and statements. <p></p><p></p>var = letter { letter | digit }.<p></p>number = [ &quot;-&quot; ] digit { digit }.<p></p>letter = &quot;A&quot; | &quot;B&quot; | ... | &quot;Z&quot; | &quot;a&quot; | &quot;b&quot; | ... | &quot;z&quot;.<p></p>digit = &quot;0&quot; | &quot;1&quot; | ... | &quot;8&quot; | &quot;9&quot;.<p></p><p></p><p></p><p></p>Between the parts of a grammatical construct but not within the names of variables or integer numbers, any number of spaces may appear. stands for the end of the input file and stands for the new-line character. All lines in the input file are shorter than 200 characters. <p></p><p></p>The value of a variable is said to be undefined: <p></p><p></p><p></p>if it has not yet been defined or it refers to a variable, which has not yet been defined; <p></p><p></p>if the definition of the variable contains a cycle. <p></p><p></p><p></p>Your are to write a program that implements Peter&#039;s calculator. It should store all variable definitions and for each &quot;PRINT&quot; statement evaluate the specified variable based on the latest variable definitions. If your program encounters a &quot;RESET&quot; statement, it should delete all stored variables so that all variables become undefined. ", "input_description": "The input contains calculations adhering to the syntax given above. Each line contains either an assignment to a variable, a \"PRINT\" statement, a \"RESET\" statement or nothing. \n", "output_description": "For each \"PRINT\" statement found in the input, your program should output a line containing the numerical value of the specified variable or the word \"UNDEF\" if the variable is undefined. \n", "samples": "[{\"input\": \"a := b + c\\nb := 3\\nc := 5\\nPRINT d\\nPRINT a\\nb := 8\\nPRINT a\\nRESET\\nPRINT a\\n\\n\", \"output\": \"UNDEF\\n8\\n13\\nUNDEF\"}]", "test_case_id": "1185", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1191, "fields": {"title": "It's not a Bug, it's a Feature!", "description": "It is a curious fact that consumers buying a new software product generally do not expect the software to be bug-free. Can you imagine buying a car whose steering wheel only turns to the right? Or a CD-player that plays only CDs with country music on them? Probably not. But for software systems it seems to be acceptable if they do not perform as they should do. In fact, many software companies have adopted the habit of sending out patches to fix bugs every few weeks after a new product is released (and even charging money for the patches). <p></p>Tinyware Inc. is one of those companies. After releasing a new word processing software this summer, they have been producing patches ever since. Only this weekend they have realized a big problem with the patches they released. While all patches fix some bugs, they often rely on other bugs to be present to be installed. This happens because to fix one bug, the patches exploit the special behavior of the program due to another bug. <p></p><p></p>More formally, the situation looks like this. Tinyware has found a total of n bugs B = {b1, b2, ..., bn} in their software. And they have released m patches p1, p2, ..., pm. To apply patch pi to the software, the bugs Bi+ in B have to be present in the software, and the bugs Bi- in B must be absent (of course Bi+ \u2229 Bi- = \u03a6). The patch then fixes the bugs Fi- in B (if they have been present) and introduces the new bugs Fi+ in B (where, again, Fi+ \u2229 Fi- = \u03a6). <p></p><p></p>Tinyware&#039;s problem is a simple one. Given the original version of their software, which contains all the bugs in B, it is possible to apply a sequence of patches to the software which results in a bug- free version of the software? And if so, assuming that every patch takes a certain time to apply, how long does the fastest sequence take? <p></p>", "input_description": "The input contains several product descriptions. Each description starts with a line containing two integers n and m, the number of bugs and patches, respectively. These values satisfy 1 <= n <= 20 and 1 <= m <= 100. This is followed by m lines describing the m patches in order. Each line contains an integer, the time in seconds it takes to apply the patch, and two strings of n characters each. \n\nThe first of these strings describes the bugs that have to be present or absent before the patch can be applied. The i-th position of that string is a ``+'' if bug bi has to be present, a ``-'' if bug bi has to be absent, and a `` 0'' if it doesn't matter whether the bug is present or not. \n\nThe second string describes which bugs are fixed and introduced by the patch. The i-th position of that string is a ``+'' if bug bi is introduced by the patch, a ``-'' if bug bi is removed by the patch (if it was present), and a ``0'' if bug bi is not affected by the patch (if it was present before, it still is, if it wasn't, is still isn't). \n\nThe input is terminated by a description starting with n = m = 0. This test case should not be processed. \n\n", "output_description": "For each product description first output the number of the product. Then output whether there is a sequence of patches that removes all bugs from a product that has all n bugs. Note that in such a sequence a patch may be used multiple times. If there is such a sequence, output the time taken by the fastest sequence in the format shown in the sample output. If there is no such sequence, output ``Bugs cannot be fixed.''. \n\nPrint a blank line after each test case. \n", "samples": "[{\"input\": \"3 3\\n1 000 00-\\n1 00- 0-+\\n2 0-- -++\\n4 1\\n7 0-0+ ----\\n0 0\\n\", \"output\": \"Product 1\\nFastest sequence takes 8 seconds.\\n\\nProduct 2\\nBugs cannot be fixed.\\n\\n\"}]", "test_case_id": "1191", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 30000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1194, "fields": {"title": "Blowing Fuses", "description": "Maybe you are familiar with the following situation. You have plugged in a lot of electrical devices, such as toasters, refrigerators, microwave ovens, computers, stereos, etc, and have them all running. But at the moment when you turn on the TV, the fuse blows, since the power drawn from all the machines is greater than the capacity of the fuse. Of course this is a great safety feature, avoiding that houses burn down too often due to fires ignited by overheating wires. But it is also annoying to walk down to the basement (or some other inconvenient place) to replace to fuse or switch it back on. <p></p><p></p>What one would like to have is a program that checks before turning on an electrical device whether the combined power drawn by all running devices exceeds the fuses capacity (and it blows), or whether it is safe to turn it on. <p></p>", "input_description": "The input consists of several test cases. Each test case describes a set of electrical devices and gives a sequence of turn on/off operations for these devices. \n\nThe first line of each test case contains three integers n, m and c, where n is the number of devices (n <= 20), m the number of operations performed on these devices and c is the capacity of the fuse (in Amperes). The following n lines contain one positive integer ci each, the consumption (in Amperes) of the i-th device. \n\nThis is followed by m lines also containing one integer each, between 1 and n inclusive. They describe a sequence of turn on/turn off operations performed on the devices. For every number, the state of that particular devices is toggled, i.e. if it is currently running, it is turned off, and if it is currently turned off, it will by switched on. At the beginning all devices are turned off. \n\nThe input will be terminated by a test case starting with n = m = c = 0. This test case should not be processed. \n", "output_description": "For each test case, first output the number of the test case. Then output whether the fuse was blown during the operation sequence. The fuse will be blown if the sum of the power consumptions ci of turned on devices at some point exceeds the capacity of the fuse c. \n\nIf the fuse is not blown, output the maximal power consumption by turned on devices that occurred during the sequence. \n\nOutput a blank line after each test case. \n", "samples": "[{\"input\": \"2 2 10\\n5\\n7\\n1\\n2\\n3 6 10\\n2\\n5\\n7\\n2\\n1\\n2\\n3\\n1\\n3\\n0 0 0\\n\", \"output\": \"Sequence 1\\nFuse was blown.\\n\\nSequence 2\\nFuse was not blown.\\nMaximal power consumption was 9 amperes.\\n\\n\"}]", "test_case_id": "1194", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 169, "total_accepted_number": 89, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1197, "fields": {"title": "Take Your Vitamins", "description": "Write a program to help prepare these nutritional labels by computing that percentage from the information on the amount present in one serving and the amount constituting the minimum daily requirement.<p></p>", "input_description": "Input consists of one or more lines, each of the form: \n\nA U R V \n\nwhere A is the amount of a vitamin/mineral present in one serving of the food product, U is the units in which A is measured, R is the minimum daily requirement for that vitamin/mineral, measured in the same units as A , and V is the name of that vitamin/mineral. A and R will be floating point numbers. U will be a string of alphabetic characters with no embedded spaces. V will be a string of characters, possibly including spaces. A , U , R , and V will be separated from one another by exactly one space, and V is terminated by the end of the input line. End of the input is signaled by a line in which A is negative. \n", "output_description": "For each line of input data, your program should determine the percentage of the recommended daily requirement being provided for that vitamin/mineral. If it is at least 1% , your program should print a line of the form \n\nV A U P % \n\nwhere V , A , and U are the quantities from the input, and P is the percentage of the minimum daily requirement represented by the amount A . \n\nV should be printed left-justified on the line. A should be printed with 1 digit precision, and P with zero digits precision. V , A , U , and P should be separated by one space each. \n\nAfter the last such line, your program should print a line stating \n\nProvides no significant amount of: \n\nfollowed by a list of the names of all vitamins/minerals which are provided as less than 1% of the minimum daily requirement. These should be printed one name per line, in the order they occurred within the input.\n", "samples": "[{\"input\": \"3500.0 iu 5000.0 Vitamin A \\n60.0 mg 60.0 Vitamin C \\n0.15 g 25.0 Fiber \\n109. mg 990. Phosphorus \\n0.0 mg 1000.0 Calcium \\n25.0 mg 20.0 Niacin \\n-1.0 x 0.0 x\\n\", \"output\": \"Vitamin A 3500.0 iu 70% \\nVitamin C 60.0 mg 100% \\nPhosphorus 109.0 mg 11% \\nNiacin 25.0 mg 125% \\nProvides no significant amount of: \\nFiber \\nCalcium\"}]", "test_case_id": "1197", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 126, "total_accepted_number": 63, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1201, "fields": {"title": "Right-Hand Rule", "description": "A common approach to navigating garden mazes is to, upon entry to the maze, to place one&#039;s hand upon the wall to right of the entrance, and then to walk forward, keeping that right hand in contact with a wall at all times. <p></p><p></p>It&#039;s well known that this technique allows one to pass through one-entrance, one-exit mazes, but it does not always suffice with mazes where one is supposed to reach some goal location or locations in the interior of the maze. <p></p><p></p>Write a program to read in a description of a maze marked with a goal location and one or more entrances, and to determine whether the goal can be found by applying the right-hand rule until the goal is found or until the rule causes you to pass outside the maze through one of the entrances. <p></p><p></p>We assume that people walking through the maze will look around as they do so. Consequently, a goal is considered to have been ``found&quot; if the person steps directly onto that location or reaches any position with an unimpeded view to the goal along a vertical or horizontal line. <p></p>", "input_description": "Input consists of one or more mazes. Each maze begins with a line containing two integers, W and h , denoting the width and the height of the maze. End of input is indicated when either of these values is less than 3. \n\nThis is followed by h lines of input. In each of these lines, only the first w characters are significant. If the input line contains fewer than w characters, you should treat the missing characters as `X'. \n\nThe interpretation of the characters in these lines is as follows: \n\n\n' ' denotes an open space \n\n'G' is an open space representing a goal location - there will be exactly one of these in any maze. \n\n'X' denotes a wall \n\n'E' is an open space representing an entrance. All entrances will occur on the outer perimeter (as defined by the w and h values) of the maze and no two entrances will be adjacent.\n\n\nAll mazes will be completely enclosed by a combination of 'X' and 'E' characters. ", "output_description": "For each maze, print a single line of output of the form \n\nThe goal would be found from ? out of ? entrances. \n\nreplacing the first '?' by the number of entrances from which the right-hand-rule allows one to find the goal and the second '?' by the total number of entrances.\n", "samples": "[{\"input\": \"31 15 \\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX \\nX                             X \\nX                             X \\nX                             X \\nX   XXXX XXXXX                X \\nX   X        X                X \\nX   X   G    X                X \\nX   X        X                X \\nX   X        X                X \\nX   XXXXXXXXXX                X \\nX                             X \\nX                             X \\nX                 XXXXXXXXXXXXX \\nX                             X \\nXXXXXXEXXXXXXXXXXXXXXXEXXXXXXXX \\n0 0\\n\", \"output\": \"The goal would be found from 1 out of 2 entrances.\\n\"}]", "test_case_id": "1201", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 3, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1202, "fields": {"title": "WordStack", "description": "As editor of a small-town newspaper, you know that a substantial number of your readers enjoy the daily word games that you publish, but that some are getting tired of the conventional crossword puzzles and word jumbles that you have been buying for years. You decide to try your hand at devising a new puzzle of your own. <p></p><p></p>Given a collection of N words, find an arrangement of the words that divides them among N lines, padding them with leading spaces to maximize the number of non-space characters that are the same as the character immediately above them on the preceding line. Your score for this game is that number. <p></p>", "input_description": "Input data will consist of one or more test sets. \n\nThe first line of each set will be an integer N (1 <= N <= 10) giving the number of words in the test case. The following N lines will contain the words, one word per line. Each word will be made up of the characters 'a' to 'z' and will be between 1 and 10 characters long (inclusive). \n\nEnd of input will be indicated by a non-positive value for N . \n", "output_description": "Your program should output a single line containing the maximum possible score for this test case, printed with no leading or trailing spaces.", "samples": "[{\"input\": \"5 \\nabc \\nbcd \\ncde \\naaa \\nbfcde \\n0\\n\", \"output\": \"8\"}]", "test_case_id": "1202", "hint": "Note: One possible arrangement yielding this score is: \\n\\n\\naaa \\nabc \\n bcd\\n  cde \\nbfcde\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 23, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1204, "fields": {"title": "Job Scheduling by Open Bidding", "description": "Your team is setting up a computing resource devoted to batch processing of compute-bound jobs. In addition, you have decided to use static scheduling for each period of time. Naturally, you wish to maximize the income for each set of jobs run, and you have been given the responsibility of finding an optimal mix of jobs for each set of candidate jobs.<p></p>The jobs are submitted by an open bid process: clients will specify the amount of processor time they wish to reserve and the dollar amount that they wish to pay. If a job finishes early, the client will still pay the full amount, and if a job exceeds the requested time, it will be terminated and (of course) the client will still pay the full amount. For purposes of scheduling, your team assumes that each job will in fact use its entire scheduled time slot. In the interests of good customer relations, though, you are not to include a bid in the schedule if there is not sufficient time available to satisfy it \u2015 we\u2019re not going to over-book like the airlines do, and then hope someone doesn\u2019t use<p></p>the full allotment!", "input_description": "The input file begins with a line containing a single integer (no white space) specifying the number of problem sets in the file.\n\nEach problem set consists of (n+2) lines (no white space except as specified):\n&#8226; a single integer n (n <= 500) specifying the number of candidate jobs to be scheduled\n&#8226; n lines giving the bid as an integer specifying the number of seconds followed by a single\nspace and then a dollar amount given in decimal form (always showing two digits to the right of the decimal point)\n&#8226; a single integer t (t <= 2000) specifying the amount of time to be scheduled with these jobs", "output_description": "<img src=uploadFiles\\1204.jpg>", "samples": "[{\"input\": \"1\\n10\\n19 0.78\\n12 0.31\\n17 0.77\\n22 0.77\\n8 0.56\\n10 0.33\\n17 0.35\\n24 0.12\\n22 0.70\\n5 0.52\\n120\", \"output\": \"Problem 1: 120 seconds scheduled for $4.78\"}]", "test_case_id": "1204", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 17, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1207, "fields": {"title": "Pascal Library", "description": "Pascal University, one of the oldest in the country, needs to renovate its Library Building, because after all these centuries the building started to show the effects of supporting the weight of the enormous amount of books it houses.<p></p><p></p>To help in the renovation, the Alumni Association of the University decided to organize a series of fund-raising dinners, for which all alumni were invited. These events proved to be a huge success and several were organized during the past year. (One of the reasons for the success of this initiative seems to be the fact that students that went through the Pascal system of education have fond memories of that time and would love to see a renovated Pascal Library.)<p></p><p></p>The organizers maintained a spreadsheet indicating which alumni participated in each dinner. Now they want your help to determine whether any alumnus or alumna took part in all of the dinners.", "input_description": "The input contains several test cases. The first line of a test case contains two integers N and D indicating respectively the number of alumni and the number of dinners organized (1 < = N < = 100 and 1 < = D < = 500). Alumni are identified by integers from 1 to N. Each of the next D lines describes the attendees of a dinner, and contains N integers Xi indicating if the alumnus/alumna i attended that dinner (Xi = 1) or not (Xi = 0). The end of input is\nindicated by N = D = 0.", "output_description": "For each test case in the input your program must produce one line of output, containing either the word \u2018yes\u2019, in case there exists at least one alumnus/alumna that attended all dinners, or the word \u2018no\u2019 otherwise.", "samples": "[{\"input\": \"3 3\\n1 1 1\\n0 1 1\\n1 1 1\\n7 2\\n1 0 1 0 1 0 1\\n0 1 0 1 0 1 0\\n0 0\", \"output\": \"yes\\nno\"}]", "test_case_id": "1207", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 273, "total_accepted_number": 121, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1208, "fields": {"title": "ICPC Strikes Again", "description": "International Concrete Projects Company (ICPC) is a construction company which specializes in building houses for the high-end market. The company is the most profitable company in the world due to a very efficient land division method which has been used in its housing development projects since last year. Recently there was a chaos at ICPC, because employees refused to work arguing that they did not earn enough. Worried about the loss in profit due to the strike, the company board proposed a new method to calculate the salaries which was luckily accepted by everyone.<p></p><p></p>The salary of a worker reflects the significance of the tasks that he/she has to perform and is influenced by the way tasks depend on each other.<p></p><p></p>A task X depends on a task Y if either (i) X depends directly on Y , or (ii) there exists a task T such that X depends directly on T and T depends on Y . Since in ICPC all tasks must be performed, there is no circularity in the task dependence relation. Also, a task may be performed by more than one worker.<p></p><p></p>A basic significance is associated with each task reflecting its importance (for example, developing the efficient land division method is more important than building the houses themselves). The significance of a task T is then defined as the basic significance of T plus the significance of every task which depends directly on T. Note that if no other tasks depend directly on task T, the basic significance and the significance of T are the same.<p></p><p></p>The salary of a worker is the sum of the significances of all the tasks he/she performs which do not depend on any other task performed by him/her. In other words, a value equal to the significance of task X will be added to the salary of a worker W that works in task X if there is no other task Y on which X depends, and W works also in Y .<p></p>ICPC wants you to help them to determine the salary of each of its employees.", "input_description": "The input contains several test cases.\n\nThe first line of a test case contains two integers T and E indicating respectively the number of tasks and the number of employees (1 < = T < = 1000 and 1 < = E < = 1000). Tasks are numbered from 1 to T and employees from 1 to E.\n\nThen it will come a sequence of lines describing the tasks 1 to T in ascending order. Each task is described by two lines. The first of these lines contains three integers BS, ND and NE, representing respectively the basic significance of the task, the number of tasks that depend directly on it, and the number of employees who perform it (1 < = BS < = 1000, 0 < = ND < T and 1 < = NE < = E). The second line contains ND+NE integers corresponding first to the ND directly dependent tasks and then the NE employees who perform the task.\n\nThe end of input is indicated by T = E = 0.", "output_description": "Test cases must be answered in the order that they were presented. For each test case you must print:\n\n&#8226; a single line containing five stars ***** indicating the beginning of the case\n&#8226; for each employee i, one line with two integers i and s, separated by a blank, meaning that i has a salary of s.", "samples": "[{\"input\": \"3 2\\n100 2 2\\n2 3 1 2\\n40 0 1\\n1\\n60 0 1\\n2\\n7 2\\n10 2 1\\n2 3 1\\n10 2 1\\n4 5 2\\n10 2 1\\n6 7 2\\n10 0 1\\n1\\n10 0 1\\n1\\n10 0 1\\n1\\n10 0 1\\n1\\n0 0\", \"output\": null}]", "test_case_id": "1208", "hint": "*****\\n1 200\\n2 200\\n*****\\n1 70\\n2 60", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1209, "fields": {"title": "Optical Fiber", "description": "A far away developing country is trying to improve its communication infrastructure. Currently, each city in the country has its local computer network, but there is no fast communication between the cities. The Autonomous Communications Ministry (ACM) of the country decided to create a fast, optical fiber network connecting every city. In order to do this, they decided to take the following approach. Pairs of cities were chosen to have an optical fiber link installed between them. The choice was such that there will be only one fiber path between any pair of cities, in order to reduce the cost. The pairs of cities were chosen considering many factors, including analysis of estimated demand and distance between the cities.<p></p><p></p>Each city will have one optical router installed, which will be used to connect all the optical links with one end in that city. In each city, there are many different locations where the optical router can be installed. Your task, as an engineer working on this project, is to develop a computer program to pick up the locations in each city in order to minimize the total length of fiber that will be necessary for this project.", "input_description": "The input consists of multiple test cases. Each test case starts with a line containing the number of cities N (1 < = N < = 1000) in the country. Following, for each city, there is a sequence of lines. The first line contains the (unique) name of the city (only capital letters, at most 15), and the number of candidate sites Ci (1 < = Ci < = 50) where the optical router can be installed. Then, there is one line per candidate site, containing two integers X and Y representing the coordinates of the site (&#8722;10000 < = X, Y < = 10000). You should use the euclidean distance between the sites to compute the corresponding fiber length necessary to connect them. After the description of each city with its candidate sites, there are N &#8722; 1 lines, each containing the names of two cities that will have a fiber link installed between them. The end of the input is indicated by N = 0.", "output_description": "For each test case, your program should print a line with the minimum total length of optical fiber to connect the requested cities. Your answer should be rounded to one decimal digit.", "samples": "[{\"input\": \"3\\nAUSTIN 1\\n500 500\\nDALLAS 2\\n1000 10\\n990 -10\\nELPASO 2\\n0 0\\n30 0\\nELPASO AUSTIN\\nDALLAS ELPASO\\n3\\nHUSTON 3\\n100 0\\n100 50\\n100 100\\nAUSTIN 2\\n200 0\\n180 40\\nSANANTONIO 2\\n0 -10\\n10 -50\\nHUSTON AUSTIN\\nHUSTON SANANTONIO\\n0\", \"output\": \"1646.3\\n189.9\"}]", "test_case_id": "1209", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 7, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1210, "fields": {"title": "Where Are My Genes", "description": "One way that scientists try to measure how one species evolved into another is to find out how the ancestor\u2019s genome changed into the other\u2019s. Closely related species have several genes in common and it turns out that a good way to compare them is comparing how the common genes changed place. <br /><br />One of the most common mutations that change the order of a genomes&#039; genes is the reversal. If we model a genome as a sequence of N genes with each gene being an integer from 1 to N, then a reversal is a mutation that changes the genome by reverting the order of a block of consecutive genes. A reversal can be described by two indexes (i, j), 1 &lt; = i &lt; = j &lt; = N, indicating that it reverts the order of the genes within indexes from i to j. So, when it is applied to a genome [g1, . . . , gi&#8722;1, gi, gi+1, . . . , gj&#8722;1, gj , gj+1, . . . , gN], we obtain the genome [g1, . . . , gi&#8722;1, gj , gj&#8722;1, . . . , gi+1, gi, gj+1, . . . , gN]. As an example, the reversal (3, 6) applied to the genome [1, 2, 3, 4, 5, 6, 7] gives [1, 2, 6, 5, 4, 3, 7]. If after that the reversal (1, 3) is applied, we obtain the genome [6, 2, 1, 5, 4, 3, 7]. <br /><br />A scientist studying the evolution of a species wants to try a series of reversals on its genome. Then he wants to query the final position of several genes. Would you take the challenge and help him?", "input_description": "The input contains several test cases. The first line of a test case contains one integer N indicating the number of genes in the genome (1 < = N < = 50000). You may assume that the initial order of the genes is the sequence of integers from 1 to N in increasing order. The second line of a test case contains one integer R (0 < = R < = 1000) indicating the number of reversals to be applied to the genome. Then R lines follow, each containing two integers i, j (1 < = i < = j < = N), separated by a single space, indicating the two indexes that define the corresponding reversal.\n\nAfter the description of the reversals there is a line containing one integer Q (0 \u30fb Q \u30fb 100), indicating the number of queries for genes, followed by Q lines, where each line contains an integer representing a gene whose final position you must determine.\n\nThe end of input is indicated by N = 0.", "output_description": "For each test case in the input your program must produce Q+1 lines of output. The first line must contain the string \u201cGenome \u201d followed by the number of the test case. The following Q lines must contain one integer each representing the answers of the queries.", "samples": "[{\"input\": \"9\\n1\\n3 6\\n4\\n1\\n3\\n5\\n1\\n5\\n2\\n1 2\\n1 5\\n2\\n5\\n2\\n0\", \"output\": \"Genome 1\\n1\\n6\\n4\\n1\\nGenome 2\\n1\\n5\"}]", "test_case_id": "1210", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 114, "total_accepted_number": 33, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1211, "fields": {"title": "Computer DJ", "description": "A very famous DJ has been recently invited to play in the closing party of a Computer Science conference. Trying to impress the participants of the event, he decided to use a program in order to choose the songs he would play at this party. However, the result was a disaster, since the way the program chose the songs was quite weird and repetitive.<p></p><p></p>First of all, the DJ has selected N songs among the set of songs he had available. The program used by the DJ then labels each of the songs using one different character from \u2018A\u2019 to \u2018Z\u2019. The i^th song is labeled using the ith character of the sequence \u2018A\u2019-\u2018Z\u2019. The program chooses the songs to be played in the party in the order that their labels appear in the following infinite sequence of characters: first come all the words with one character in lexicographical order; then all the words with two characters in lexicographical order; then all the words with<p></p>three characters in lexicographical order; and so on. For N = 3, this sequence would be ABCAAABACBABBBCCACBCCAAAAABAACABAABBABC...<p></p><p></p>At the end of the party, some people asked the DJ if he remembered which the first song played was. Others would like to know which the 25th was, and so on. The DJ remembers nothing but the strange pattern of repetition of the songs, so he urges you to help him and write a program which answers such queries.", "input_description": "The input contains several test cases. Each test case consists of three lines. The first line of a test case contains two integers N and Q indicating respectively the number of songs chosen by the DJ and the number of queries made by the participants (1 < = N < = 26 and 1 < = Q < = 1000). In the second line, there will be the N titles of the songs (the title of a song is a chain of alphanumerical characters of at least one and at most 100 characters) separated by single\nspaces. The last line of a test case contains a sequence of queries. Each query is a number k (1 < = k < = 100000000) corresponding to the kth song played in the party. The end of the input is indicated by N = Q = 0.", "output_description": "For each query number k in a test case, you shall print a single line containing the name of the k^th song played in the party. A blank line must follow each test case.", "samples": "[{\"input\": \"10 3\\nS0 S1 S2 S3 S4 S5 S6 S7 S8 S9\\n3 6 10\\n3 5\\nPathethique TurkishMarch Winter\\n1 2 3 4 16\\n0 0\", \"output\": \"S2\\nS5\\nS9\\nPathethique\\nTurkishMarch\\nWinter\\nPathethique\\nWinter\"}]", "test_case_id": "1211", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 46, "total_accepted_number": 13, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1214, "fields": {"title": "Linear world", "description": "The Disc, being flat, has no real horizon. Any adventurous sailors who get funny ideas from staring at eggs and oranges for too long and set out for the antipodes soon learned that the reason why distant ships sometimes looked as though they were disappearing over the edge of the world was that they were disappearing over the edge of the world. (Terry Pratchett -Colour of Magic) <p></p>Not so long time ago people used to believe that they live on 2-D world and if they will travel long enough in one direction, they will fall down over the edge. Even when it was proved that the Earth is rounded some of them were still afraid to travel to the southern hemisphere. <p></p>Try to imagine one 1-D (linear) world. On such world there are only two possible directions (left and right). All inhabitants of such world were created exactly at the same time and suddenly all of them start to move (all with same constant velocity) in one or the other direction. If two inhabitants encounter each other, they politely exchange greetings and then they turn around and start to move in an opposite direction. When an inhabitant reaches the end of the world he falls away and disappears. <p></p>Your task is to determine, for a given scenario of creation, which inhabitant and when (counting from the moment of creation) will be the last one to fall away. You can assume that the time required to exchange greetings and turn around is 0. <p></p>", "input_description": "The input consists of multiple descriptions (data sets) of the creation moment. File structure is as follows: \nN \nLV \nDIR POS NAME \n... \nThe first line defines the number of inhabitants (N<32000). Data set starting with value N=0 represents the end of the input file. The second line contains length of the world L(float) and velocity of inhabitants V(float). Both values are always positive. In next N lines the data about inhabitants are given in an order of increasing POS (positive direction): \nDIR ? initial direction ('p' or 'P' for positive and 'n' or 'N' for negative) \nPOS ? position in the time of creation (0<=POS<=L) \nNAME ? name of inhabitant (string up to 250 characters) \nInput values within one line are separated with at least one space and there will be no empty lines in input. You may assume that input is always correct and that each data set has only one unique solution. \n", "output_description": "The output consists of one line per each input data set. The first value should be the time when the last inhabitant will fall of the linear world counting from the moment of creation. Value should be printed truncated to two decimal places in a field 13 characters wide. The second value should be the name of the inhabitant. Values should be separated with single space character. \n", "samples": "[{\"input\": \"1   \\n13.5 2   \\np 3.5 Smarty  \\n4  \\n10  1  \\np  1  Helga  \\nn 3 Joanna  \\np  5  Venus  \\nn  7  Clever  \\n0 \\n\", \"output\": \"         5.00 Smarty\\n         9.00 Venus\\n(Be careful that Value should be printed truncated to two decimal places in a field 13 characters wide.)\"}]", "test_case_id": "1214", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 14, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1216, "fields": {"title": "Tour", "description": "John Doe, a skilled pilot, enjoys traveling. While on vacation, he rents a small plane and starts visiting beautiful places. To save money, John must determine the shortest closed tour that connects his destinations. Each destination is represented by a point in the plane pi = &lt; xi,yi &gt;. John uses the following strategy: he starts from the leftmost point, then he goes strictly left to right to the rightmost point, and then he goes strictly right back to the starting point. It is known that the points have distinct x-coordinates. <p></p>Write a program that, given a set of n points in the plane, computes the shortest closed tour that connects the points according to John&#039;s strategy. ", "input_description": "The program input is from a text file. Each data set in the file stands for a particular set of points. For each set of points the data set contains the number of points, and the point coordinates in ascending order of the x coordinate. White spaces can occur freely in input. The input data are correct.\n", "output_description": "For each set of data, your program should print the result to the standard output from the beginning of a line. The tour length, a floating-point number with two fractional digits, represents the result. An input/output sample is in the table below. Here there are two data sets. The first one contains 3 points specified by their x and y coordinates. The second point, for example, has the x coordinate 2, and the y coordinate 3. The result for each data set is the tour length, (6.47 for the first data set in the given example). \n", "samples": "[{\"input\": \"3\\n1 1\\n2 3\\n3 1\\n4\\n1 1\\n2 3\\n3 1\\n4 2\\n\", \"output\": \"6.47\\n7.89\"}]", "test_case_id": "1216", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 66, "total_accepted_number": 27, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1217, "fields": {"title": "Mothy", "description": "Mothy is a small moth. Mothy and his mother are placed on a very old pair of jeans. Because the jeans are very old they are covered with patches. Sometimes the patches overlap each other. Every patch is a convex polygon and is made by some material different from cotton. Mothy wants to go to his mother in the fastest possible way. He cannot move without eating and because of his age he cannot eat anything except jeans and cotton thread. Despite his age Mothy is very intelligent, he can move following precise coordinates but he is unable to compute them. Write a program that calculates the length of the minimal path from the position of Mothy to the position of his mother. Mothy must be able to pass through this path. Consider that the pair of old jeans is placed on a plane surface and is big enough. Mothy can move only at the surface of the jeans because he is not big enough to penetrate through them. <p></p>Because Mothy is so small he should be considered as a point. Mothy also can move on the edges of any of the patches because they are sewed with cotton threads. Mothy can move on common edges but cannot be on top of any patch. <p></p>", "input_description": "The first line of input contains a single integer T indicating the number of test cases. Each test case starts with number N of patches, and four integer numbers ? the coordinates X and Y of Mothy\u2019s position and coordinates U and V of his mother\u2019s position, separated by white spaces (-10000 <= X, Y, U, V <= 10000). Each patch is described on a separate line starting with the number of vertices and followed by a pair of integer coordinates (-10000 <= Xi, Yi <= 10000) for each of the vertices of the patch, separated by white spaces. The total number of vertices of polygons will not exceed 300. \n", "output_description": "For each of the test cases program has to output on a separate line the length of the shortest path between Mothy and his mother. The result should be rounded to 3 digits after the decimal point. The program has to output -1 if Mothy cannot reach his mother. ", "samples": "[{\"input\": \"2\\n1 0 0 4 3\\n3 1 1 4 4 1 4\\n2 0 0 5 5\\n4 1 0 4 0 4 1 1 2\\n3 3 3 4 4 5 2\\n\", \"output\": \"5.000\\n7.236\\n\"}]", "test_case_id": "1217", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1218, "fields": {"title": "Adventurous Driving", "description": "After a period of intensive development of the transportation infrastructure, the government of Ruritania decides to take firm steps to strengthen citizens&#039; confidence in the national road network and sets up a compensation scheme for adventurous driving (CSAD). Those driving on a road with holes, bumps and other entertaining obstacles get compensation; those driving on a decent road pay tax. These compensations and taxes are obtained and paid in cash on entry on each road and depend on the entry point on the road. What you get and pay driving on a road from A to B may be different from what you get and pay driving on the same road from B to A. The Ruritarian authorities call fee the amount of money paid as tax or obtained as compensation on entry on a road. A positive fee is a tax; a negative fee stands for compensation. <p></p>John Doe plans to take advantage of CSAD for saving money he needs to repair his old car. When driving from A to B, John follows a path he calls optimal: a path that is rewarding and has the minimal length out of the paths with the minimal weight from A to B. In John&#039;s opinion, a path is rewarding if all the roads in the path are rewarding, and a road (X,Y) is rewarding if it has the minimal entry fee out of the roads leaving X. The weight of a path is the sum of the entry fees paid along the path. The length of a path cumulates the length of the roads in the path. The problem is helping John to compute the weight and the length of an optimal path from A to B on a given map. <p></p>For example, on the illustrated road map vertices designate cities and edges stand for roads. The label fuv[L]fvu of the road (u,v) shows the fee fuv for driving from u to v, the fee fvu for driving from v to u, and the length L of the road. The path (0,2,4,3,5) from 0 to 5 is optimal: it is rewarding, has weight 2 (-1+3+0+0) and length 50 (5+10+5+30). The path (0,1,4,3,5), although rewarding and of weight 2, has length 51. The path (0,3,5) has weight 0 and length 20 but it is not rewarding. <p></p>", "input_description": "Write a program that reads several data sets from a text file. Each data set encodes a road map and starts with four integers: the number 1<=n<=1100 of towns on the map, the number 0<=m<=5000 of roads, the departure town 0<=A<=n-1, and the destination town 0<=B<=n-1. Follow m data quintuples (u,v,fuv[L]fvu), where u and v are town identifiers (integers in the range 0..n-1), 100<=fuv, fvu<=100 are integer fees for driving on the road (u,v), and 1<=L<=100 is the integer length of the road. The quintuples may occur in any order. Except the quintuples, which do not contain white spaces, white spaces may occur freely in input. Input data terminate with an end of file and are correct.\n", "output_description": "For each data set, the program prints ? from the beginning of a line ? the weight and the length of an optimal path, according to John's oppinion, from A to B. If there is no optimal path from A to B the text VOID is printed. If the weight of the optimal path from A to B has no lower bound the text UNBOUND is printed. \n", "samples": "[{\"input\": \"3 3 0 2 (0,1,0[1]0) (0,2,1[1]0) (1,2,1[1]0)\\n3 3 0 2 (0,1,-1[1]1) (0,2,0[1]0) (1,2,0[1]1)\\n7 11 0 5 (0,1,-1[6]4) (0,2,-1[5]4) (0,3,0[1]0)  (1,4,3[10]1)\\n(2,4,3[10]1) (3,4,0[5]0)  (3,5,0[30]0) (3,5,1[20]0)\\n (4,6,0[3]1)  (6,5,1[8]0)  (6,6,0[2]-1)\\n\", \"output\": \"VOID\\nUNBOUND\\n2 50\\n\"}]", "test_case_id": "1218", "hint": "An input/output sample is in the table above. The first data set encodes a road map with no optimal path from 0 to 2. The second data set corresponds to a map whose optimal path from 0 to 2 has an unbound weight. The third data set encodes the road map shown in the above figure. \\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1219, "fields": {"title": "Computer Transformation", "description": "A sequence consisting of one digit, the number 1 is initially written into a computer. At each successive time step, the computer simultaneously tranforms each digit 0 into the sequence 1 0 and each digit 1 into the sequence 0 1. So, after the first time step, the sequence 0 1 is obtained; after the second, the sequence 1 0 0 1, after the third, the sequence 0 1 1 0 1 0 0 1 and so on. <p></p>How many pairs of consequitive zeroes will appear in the sequence after n steps? <p></p>", "input_description": "Every input line contains one natural number n (0 < n <= 1000).\n", "output_description": "For each input n print the number of consequitive zeroes pairs that will appear in the sequence after n steps.", "samples": "[{\"input\": \"2\\n3\", \"output\": \"1\\n1\"}]", "test_case_id": "1219", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 255, "total_accepted_number": 41, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1220, "fields": {"title": "Anagrammatic Distance", "description": "Two words are said to be anagrams of each other if the letters from one word can be rearranged to form the other word. For example, occurs is an anagram of succor; however, dear is not an anagram of dared (because the d appears twice in dared, but only once in dear). The most famous anagram pair (in English) is dog and god. <p></p>The anagrammatic distance between any two words is the minimum number of letters which must be removed so that the remaining portions of the two words become anagrams. For example, given the words sleep and leap, we need to remove a minimum of three letters ---two from sleep and one from leap ---before what&#039;s left are anagrams of each other (in each case, lep). With words such as dog and cat, where the two have absolutely no letters in common, the anagrammatic distance is an extreme (explicitly 6) since all the letters need to be removed. (Here, a word is always an anagram of itself.) <p></p>You must write a program to calculate the anagrammatic distance between any two given words. <p></p>", "input_description": "The first line of the input will contain a positive integer value N (less than 60,000) indicating the number of cases. Each case will consist of two words, possibly empty, each given on a single line (for a total of 2N additional lines). \nAlthough they may have zero length, the words are simple ---the letter are all lowercase and are taken from the usual twenty-six letter English alphabet (abcdefghijklmnopqrstuvwxyz). The longest word is pneumonoultramicroscopicsilicovolcanoconiosis. \n", "output_description": "The output should consist of the case number and the anagrammatic distance, formatted as shown. ", "samples": "[{\"input\": \"4\\ncrocus\\nsuccor\\ndares\\nseared\\nempty\\n\\nsmell\\nlemon\\n\", \"output\": \"Case #1:  0 \\nCase #2:  1 \\nCase #3:  5  \\nCase #4:  4  \\n\"}]", "test_case_id": "1220", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 174, "total_accepted_number": 67, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1221, "fields": {"title": "Tomato Automata", "description": "Tomato Automata are small cool programs. You give them an infinite sequence of ones and zeros, and they give you a sequence of numbers. They are widely used in the Stanescu Operating System (SOS). They are written in Tomato Programming Language that is very simple. Here is its specification, tutorial and reference: <p></p>1.Tomato is a very simple but powerful language. <p></p><p></p>2.Lines in a Tomato program are numerated with integers from 1 to N (N&lt;=100000) in the order they appear in the input. <p></p><p></p>3.There is exactly one command on a line. <p></p><p></p>4.The execution starts from the first line. <p></p><p></p>5.There are exactly five Tomato commands ? ifgo, jump, pass, loop, and die. <p></p><p></p>6.When executed, each command prints its line number (into the output sequence). <p></p><p></p>7.The ifgo command has one argument ? the line number of another instruction. It reads one bit from the input stream. If the bit is one, the execution jumps to the line with the given as argument line number. Otherwise the execution continues with the next line. <p></p><p></p>8.The jump command has one argument ? the line number of another instruction. When executed, the execution jumps to the line with the given line number. <p></p><p></p>9.The pass command has no arguments. It does nothing (except printing its line number like all other commands). Then the execution continues with the next line. <p></p><p></p>10.The die command has no arguments. It terminates the execution of the program (printing its line number before that). The die command can not be used inside a loop. <p></p><p></p>11.The loop command is the only one with two arguments. It may be used to construct loops. The first argument is the starting line number &lt; line&gt; (less than the line number of the loop command), and the second is a positive integer &lt; count&gt;. When executed, it loops from the start line a &lt; count&gt;\u25001 number of times (because it is already executed once). When the loop is executed the given number of times, the execution continues with the next line. <p></p><p></p>12.The jump and ifgo commands must be used only with line numbers in the scope of the innermost loop containing them (they can not jump outside of the innermost loop or inside loops nested in the innermost loop that does not contain the command). <p></p><p></p>13.The loop command can not be used to create overlapping loops. Nested loops must be strictly nested (they can not use the same starting line). <p></p><p></p>14.When the last line of the program is executed, the execution continues from the first except when the last line is die command. <p></p><p></p>15.White spaces may occur freely before or after the command name and their arguments. <p></p><p></p>16.The maximal length of a line in Tomato Programming Language is 80 characters including spaces. <p></p><p></p><p></p>Stanescu has lots of Tomato programs. He is interested in maximal length of output sequence that specific program can generate, where the length is the number of printed line numbers. Obviously, it is not possible to test each possible input sequence (of ones and zeros), so he needs a program that computes this. <p></p>", "input_description": "The input contains several programs, separated with an empty line. Each of them is a correct Tomato program. ", "output_description": "For each given program your solution has to print on a separate line the maximal length of the output sequence the program could generate. Print infinity if there is no maximal length for the output sequence. When finite, the maximal length will not exceed 10^9. \n", "samples": "[{\"input\": \"Ifgo 2  \\nloop 1 3  \\ndie  \\n\\nifgo 2  \\nifgo 3  \\npass  \\ndie  \\n\\npass  \\nifgo 4  \\njump 5  \\nifgo 3  \\nloop 2 2  \\npass  \\nloop 1 2  \\ndie  \\n\", \"output\": \"7\\n4\\n23\\n\"}]", "test_case_id": "1221", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1223, "fields": {"title": "Colored Cubes", "description": "There are several colored cubes. All of them are of the same size but they may be colored differently. Each face of these cubes has a single color. Colors of distinct faces of a cube may or may not be the same. <p></p>Two cubes are said to be identically colored if some suitable rotations of one of the cubes give identical looks to both of the cubes. For example, two cubes shown in Figure 2 are identically colored. A set of cubes is said to be identically colored if every pair of them are identically colored. <p></p>A cube and its mirror image are not necessarily identically colored. For example, two cubes shown in Figure 3 are not identically colored. <p></p>You can make a given set of cubes identically colored by repainting some of the faces, whatever colors the faces may have. In Figure 4, repainting four faces makes the three cubes identically colored and repainting fewer faces will never do. <p></p>Your task is to write a program to calculate the minimum number of faces that needs to be repainted for a given set of cubes to become identically colored.<p></p>", "input_description": "The input is a sequence of datasets. A dataset consists of a header and a body appearing in this order. A header is a line containing one positive integer n and the body following it consists of n lines. You can assume that 1 <= n <= 4. Each line in a body contains six color names separated by a space. A color name consists of a word or words connected with a hyphen (-). A word consists of one or more lowercase letters. You can assume that a color name is at most 24-characters long including hyphens. \nA dataset corresponds to a set of colored cubes. The integer n corresponds to the number of cubes. Each line of the body corresponds to a cube and describes the colors of its faces. Color names in a line is ordered in accordance with the numbering of faces shown in Figure 5. A line \n\n\ncolor1 color2 color3 color4 color5 color6\n\ncorresponds to a cube colored as shown in Figure 6. \nThe end of the input is indicated by a line containing a single zero. It is not a dataset nor a part of a dataset. \n\n<img src=uploadFiles\\1223_1.jpg>\n\n<img src=uploadFiles\\1223_2.jpg>\n\n<img src=uploadFiles\\1223_3.jpg>\n", "output_description": "For each dataset, output a line containing the minimum number of faces that need to be repainted to make the set of cubes identically colored.\n", "samples": "[{\"input\": \"3\\nscarlet green blue yellow magenta cyan\\nblue pink green magenta cyan lemon\\npurple red blue yellow cyan green\\n2\\nred green blue yellow magenta cyan\\ncyan green blue yellow magenta red\\n2\\nred green gray gray magenta cyan\\ncyan green gray gray magenta red\\n2\\nred green blue yellow magenta cyan\\nmagenta red blue yellow cyan green\\n3\\nred green blue yellow magenta cyan\\ncyan green blue yellow magenta red\\nmagenta red blue yellow cyan green\\n3\\nblue green green green green blue\\ngreen blue blue green green green\\ngreen green green green green sea-green\\n3\\nred yellow red yellow red yellow\\nred red yellow yellow red yellow\\nred red red red red red\\n4\\nviolet violet salmon salmon salmon salmon\\nviolet salmon salmon salmon salmon violet\\nviolet violet salmon salmon violet violet\\nviolet violet violet violet salmon salmon\\n1\\nred green blue yellow magenta cyan\\n4\\nmagenta pink red scarlet vermilion wine-red\\naquamarine blue cyan indigo sky-blue turquoise-blue\\nblond cream chrome-yellow lemon olive yellow\\nchrome-green emerald-green green olive vilidian sky-blue\\n0\\n\", \"output\": \"4\\n2\\n0\\n0\\n2\\n3\\n4\\n4\\n0\\n16\\n\"}]", "test_case_id": "1223", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1225, "fields": {"title": "Network Mess", "description": "Gilbert is the network admin of Ginkgo company. His boss is mad about the messy network cables on the floor. He finally walked up to Gilbert and asked the lazy network admin to illustrate how computers and switches are connected. Since he is a programmer, he is very reluctant to move throughout the office and examine cables and switches with his eyes. He instead opted to get this job done by measurement and a little bit of mathematical thinking, sitting down in front of his computer all the time. Your job is to help him by writing a program to reconstruct the network topology from measurements. <p></p>There are a known number of computers and an unknown number of switches. Each computer is connected to one of the switches via a cable and to nothing else. Specifically, a computer is never connected to another computer directly, or never connected to two or more switches. Switches are connected via cables to form a tree (a connected undirected graph with no cycles). No switches are &#039;useless.&#039; In other words, each switch is on the path between at least one pair of computers. <p></p>All in all, computers and switches together form a tree whose leaves are computers and whose internal nodes switches (See Figure 9). <p></p>Gilbert measures the distances between all pairs of computers. The distance between two computers is simply the number of switches on the path between the two, plus one. Or equivalently, it is the number of cables used to connect them. You may wonder how Gilbert can actually obtain these distances solely based on measurement. Well, he can do so by a very sophisticated statistical processing technique he invented. Please do not ask the details. <p></p>You are therefore given a matrix describing distances between leaves of a tree. Your job is to construct the tree from it.<p></p>", "input_description": "The input is a series of distance matrices, followed by a line consisting of a single '0'. Each distance matrix is formatted as follows. \nN \na11 a12 ... a1N \na21 a22 ... a2N \n... \n... \n... \n... \naN1 aN2 ... aNN \n\n<img src=uploadFiles\\1225.jpg>\n\nN is the size, i.e. the number of rows and the number of columns, of the matrix. aij gives the distance between the i-th leaf node (computer) and the j-th. You may assume 2 <= N <= 50 and the matrix is symmetric whose diagonal elements are all zeros. That is, aii = 0 and aij = aji for each i and j. Each non-diagonal element aij (i != j) satisfies 2 <= aij <= 30. You may assume there is always a solution. That is, there is a tree having the given distances between leaf nodes.\n", "output_description": "For each distance matrix, find a tree having the given distances between leaf nodes. Then output the degree of each internal node (i.e. the number of cables adjoining each switch), all in a single line and in ascending order. Numbers in a line should be separated by a single space. A line should not contain any other characters, including trailing spaces.\n", "samples": "[{\"input\": \"4\\n  0  2  2  2\\n  2  0  2  2\\n  2  2  0  2\\n  2  2  2  0\\n4\\n  0  2  4  4\\n  2  0  4  4\\n  4  4  0  2\\n  4  4  2  0\\n2\\n  0 12\\n 12  0\\n0\\n\", \"output\": \"4\\n2 3 3\\n2 2 2 2 2 2 2 2 2 2 2\\n\"}]", "test_case_id": "1225", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 2, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1227, "fields": {"title": "Cipher", "description": "Bob and Alice started to use a brand-new encoding scheme. Surprisingly it is not a Public Key Cryptosystem, but their encoding and decoding is based on secret keys. They chose the secret key at their last meeting in Philadelphia on February 16th, 1996. They chose as a secret key a sequence of n distinct integers, a1 ; . . .; an, greater than zero and less or equal to n. The encoding is based on the following principle. The message is written down below the key, so that characters in the message and numbers in the key are correspondingly aligned. Character in the message at the position i is written in the encoded message at the position ai, where ai is the corresponding number in the key. And then the encoded message is encoded in the same way. This process is repeated k times. After kth encoding they exchange their message. <p></p><p></p>The length of the message is always less or equal than n. If the message is shorter than n, then spaces are added to the end of the message to get the message with the length n. <p></p><p></p>Help Alice and Bob and write program which reads the key and then a sequence of pairs consisting of k and message to be encoded k times and produces a list of encoded messages. <p></p><p></p>", "input_description": "The input file consists of several blocks. Each block has a number 0 < n <= 200 in the first line. The next line contains a sequence of n numbers pairwise distinct and each greater than zero and less or equal than n. Next lines contain integer number k and one message of ascii characters separated by one space. The lines are ended with eol, this eol does not belong to the message. The block ends with the separate line with the number 0. After the last block there is in separate line the number 0. \n", "output_description": "Output is divided into blocks corresponding to the input blocks. Each block contains the encoded input messages in the same order as in input file. Each encoded message in the output file has the lenght n. After each block there is one empty line. ", "samples": "[{\"input\": \"10\\n4 5 3 7 2 8 1 6 10 9\\n1 Hello Bob\\n1995 CERC\\n0\\n0\\n\", \"output\": \"BolHeol  b\\nC RCE\\n\"}]", "test_case_id": "1227", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 109, "total_accepted_number": 52, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1228, "fields": {"title": "Department", "description": "The Department of Security has a new headquarters building. The building has several floors, and on each floor there are rooms numbered xxyy where yy stands for the room number and xx for the floor number, 0 &lt; xx; yy &lt;= 10. The building has `pater-noster&#039; elevator, i.e. elevator build up from several cabins running all around. From time to time the agents must visit the headquarters. During their visit they want to visit several rooms and in each room they want to stay for some time. Due to the security reasons, there can be only one agent in the same room at the same time, The same rule applies to the elevators. The visits are planned in the way ensuring they can be accomplished within one day. Each agent visits the headquarters at most once a day. <p></p><p></p>Each agent enters the building at the 1st floor, passes the reception and then starts to visit the rooms according to his/her list. Agents always visit the rooms by the increasing room numbers. The agents form a linear hierarchy according to which they have assigned their one letter personal codes. The agents with higher seniority have lexicographically smaller codes. No two agents have the same code. <p></p><p></p>If more then one agent want to enter a room, or an elevator, the agents have to form a queue. In each queue, they always stand according to their codes. The higher the seniority of the agent, the closer to the top of the queue he stands. Every 5 s (seconds) the first agent in the queue in front of the elevator enters the elevator. After visiting the last room in the headquarters each agent uses if necessary elevator to the first floor and exits the building. <p></p><p></p>The times necessary to move from a certain point in the headquarters to another are set as follows: Entering the building, i.e. passing the reception and reaching the elevator, or a room on the first floor takes 30 s. Exiting the building, i.e. stepping out of the elevator or a room on the first floor and passing the reception takes also 30 s. On the same floor, the transfer from the elevator to the room (or to the queue in front of the room), or from the room to the elevator (or to the queue in front of the elevator), or from one room to another (or to the queue in front of the room) takes 10 s. The transfer from one floor to the next floor above or below in an elevator takes 30 s. Write a program that determines time course of agent&#039;s visits in the headquarters. <p></p><p></p>", "input_description": "The input file contains the descriptions of n >= 0 visits of different agents. The first line of the description of each visit consists of agent's one character code C, C = A, . . ., Z, and the time when the agent enters the headquarters. The time is in the format HH:MM:SS (hours, minutes, seconds). The next lines (there will be at least one) contain the room number, and the length of time intended to stay in the room, time is in seconds. Each room is in a separate line. The list of rooms is sorted according to the increasing room number. The list of rooms ends by the line containing 0. The list of the descriptions of visits ends by the line containing the character dot. \n", "output_description": "The output contains detailed records of each agent's visit in the headquarters. For each agent, there will be a block. Blocks are ordered in the order of increasing agent's codes. Blocks are separated by an empty line. After the last block there is an empty line too. The first line of a block contains the code of agent. Next lines contain the starting and ending time (in format HH:MM:SS) and the descriptions of his/her activity. Time data will be separated by one blank character. Description will be separated from time by one blank character. Description will have a form Entry, Exit or Message. The Message can be one of the following: Waiting in elevator queue, Waiting in front of room RoomNumber, Transfer from room RoomNumber to room RoomNumber, Transfer from elevator to room RoomNumber, Transfer from RoomNumber to elevator, Stay in room RoomNumber, Stay in elevator. \n", "samples": "[{\"input\": \"A 10:00:00\\n0101 100\\n0110 50\\n0202 90\\n0205 50\\n0\\nB 10:01:00\\n0105 100\\n0201 5\\n0205 200\\n0\\n.\\n\\n\", \"output\": \"A\\n10:00:00 10:00:30 Entry\\n10:00:30 10:02:10 Stay in room 0101\\n10:02:10 10:02:20 Transfer from room 0101 to room 0110\\n10:02:20 10:03:10 Stay in room 0110\\n10:03:10 10:03:20 Transfer from room 0110 to elevator\\n10:03:20 10:03:50 Stay in elevator\\n10:03:50 10:04:00 Transfer from elevator to room 0202\\n10:04:00 10:05:30 Stay in room 0202\\n10:05:30 10:05:40 Transfer from room 0202 to room 0205\\n10:05:40 10:07:40 Waiting in front of room 0205\\n10:07:40 10:08:30 Stay in room 0205\\n10:08:30 10:08:40 Transfer from room 0205 to elevator\\n10:08:40 10:09:10 Stay in elevator\\n10:09:10 10:09:40 Exit\\n\\nB\\n10:01:00 10:01:30 Entry\\n10:01:30 10:03:10 Stay in room 0105\\n10:03:10 10:03:20 Transfer from room 0105 to elevator\\n10:03:20 10:03:25 Waiting in elevator queue\\n10:03:25 10:03:55 Stay in elevator\\n10:03:55 10:04:05 Transfer from elevator to room 0201\\n10:04:05 10:04:10 Stay in room 0201\\n10:04:10 10:04:20 Transfer from room 0201 to room 0205\\n10:04:20 10:07:40 Stay in room 0205\\n10:07:40 10:07:50 Transfer from room 0205 to elevator\\n10:07:50 10:08:20 Stay in elevator\\n10:08:20 10:08:50 Exit\\n\\n\"}]", "test_case_id": "1228", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 3, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1229, "fields": {"title": "Joseph", "description": "The Joseph&#039;s problem is notoriously known. For those who are not familiar with the original problem: from among n people, numbered 1, 2, . . ., n, standing in circle every mth is going to be executed and only the life of the last remaining person will be saved. Joseph was smart enough to choose the position of the last remaining person, thus saving his life to give us the message about the incident. For example when n = 6 and m = 5 then the people will be executed in the order 5, 4, 6, 2, 3 and 1 will be saved. <p></p><p></p>Suppose that there are k good guys and k bad guys. In the circle the first k are good guys and the last k bad guys. You have to determine such minimal m that all the bad guys will be executed before the first good guy. <p></p>", "input_description": "The input file consists of separate lines containing k. The last line in the input file contains 0. You can suppose that 0 < k < 14. \n", "output_description": "The output file will consist of separate lines containing m corresponding to k in the input file. \n\n", "samples": "[{\"input\": \"3\\n4\\n0\\n\\n\\n\", \"output\": \"5\\n30\"}]", "test_case_id": "1229", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 159, "total_accepted_number": 90, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1230, "fields": {"title": "Maya Calendar", "description": "During his last sabbatical, professor M. A. Ya made a surprising discovery about the old Maya calendar. From an old knotted message, professor discovered that the Maya civilization used a 365 day long year, called Haab, which had 19 months. Each of the first 18 months was 20 days long, and the names of the months were pop, no, zip, zotz, tzec, xul, yoxkin, mol, chen, yax, zac, ceh, mac, kankin, muan, pax, koyab, cumhu. Instead of having names, the days of the months were denoted by numbers starting from 0 to 19. The last month of Haab was called uayet and had 5 days denoted by numbers 0, 1, 2, 3, 4. The Maya believed that this month was unlucky, the court of justice was not in session, the trade stopped, people did not even sweep the floor. <p></p><p></p>For religious purposes, the Maya used another calendar in which the year was called Tzolkin (holly year). The year was divided into thirteen periods, each 20 days long. Each day was denoted by a pair consisting of a number and the name of the day. They used 20 names: imix, ik, akbal, kan, chicchan, cimi, manik, lamat, muluk, ok, chuen, eb, ben, ix, mem, cib, caban, eznab, canac, ahau and 13 numbers; both in cycles. <p></p><p></p>Notice that each day has an unambiguous description. For example, at the beginning of the year the days were described as follows: <p></p><p></p>1 imix, 2 ik, 3 akbal, 4 kan, 5 chicchan, 6 cimi, 7 manik, 8 lamat, 9 muluk, 10 ok, 11 chuen, 12 eb, 13 ben, 1 ix, 2 mem, 3 cib, 4 caban, 5 eznab, 6 canac, 7 ahau, and again in the next period 8 imix, 9 ik, 10 akbal . . . <p></p><p></p>Years (both Haab and Tzolkin) were denoted by numbers 0, 1, : : : , where the number 0 was the beginning of the world. Thus, the first day was: <p></p><p></p>Haab: 0. pop 0 <p></p><p></p>Tzolkin: 1 imix 0 <p></p>Help professor M. A. Ya and write a program for him to convert the dates from the Haab calendar to the Tzolkin calendar. <p></p><p></p>", "input_description": "The date in Haab is given in the following format: \nNumberOfTheDay. Month Year \n\nThe first line of the input file contains the number of the input dates in the file. The next n lines contain n dates in the Haab calendar format, each in separate line. The year is smaller then 5000. \n\n", "output_description": "The date in Tzolkin should be in the following format: \nNumber NameOfTheDay Year \n\nThe first line of the output file contains the number of the output dates. In the next n lines, there are dates in the Tzolkin calendar format, in the order corresponding to the input dates. \n\n", "samples": "[{\"input\": \"3\\n10. zac 0\\n0. pop 0\\n10. zac 1995\", \"output\": \"3\\n3 chuen 0\\n1 imix 0\\n9 cimi 2801\\n\"}]", "test_case_id": "1230", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 128, "total_accepted_number": 61, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1232, "fields": {"title": "Sticks", "description": "George took sticks of the same length and cut them randomly until all parts became at most 50 units long. Now he wants to return sticks to the original state, but he forgot how many sticks he had originally and how long they were originally. Please help him and design a program which computes the smallest possible original length of those sticks. All lengths expressed in units are integers greater than zero.", "input_description": "The input contains blocks of 2 lines. The first line contains the number of sticks parts after cutting, there are at most 64 sticks. The second line contains the lengths of those parts separated by the space. The last line of the file contains zero.\n", "output_description": "The output should contains the smallest possible length of original sticks, one per line. ", "samples": "[{\"input\": \"9\\n5 2 1 5 2 1 5 2 1\\n4\\n1 2 3 4\\n0\\n\", \"output\": \"6\\n5\\n\"}]", "test_case_id": "1232", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 258, "total_accepted_number": 37, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1233, "fields": {"title": "Transportation", "description": "Ruratania is just entering capitalism and is establishing new enterprising activities in many fields in- cluding transport. The transportation company TransRuratania is starting a new express train from city A to city B with several stops in the stations on the way. The stations are successively numbered, city A station has number 0, city B station number m. The company runs an experiment in order to improve passenger transportation capacity and thus to increase its earnings. The train has a maximum capacity n passengers. The price of the train ticket is equal to the number of stops (stations) between the starting station and the destination station (including the destination station). Before the train starts its route from the city A, ticket orders are collected from all onroute stations. The ticket order from the station S means all reservations of tickets from S to a fixed destination station. In case the company cannot accept all orders because of the passenger capacity limitations, its rejection policy is that it either completely accept or completely reject single orders from single stations. <p></p><p></p>Write a program which for the given list of orders from single stations on the way from A to B determines the biggest possible total earning of the TransRuratania company. The earning from one accepted order is the product of the number of passengers included in the order and the price of their train tickets. The total earning is the sum of the earnings from all accepted orders. <p></p>", "input_description": "The input file is divided into blocks. The first line in each block contains three integers: passenger capacity n of the train, the number of the city B station and the number of ticket orders from all stations. The next lines contain the ticket orders. Each ticket order consists of three integers: starting station, destination station, number of passengers. In one block there can be maximum 22 orders. The number of the city B station will be at most 7. The block where all three numbers in the first line are equal to zero denotes the end of the input file. \n", "output_description": "The output file consists of lines corresponding to the blocks of the input file except the terminating block. Each such line contains the biggest possible total earning. \n", "samples": "[{\"input\": \"10 3 4\\n0 2 1\\n1 3 5\\n1 2 7\\n2 3 10\\n10 5 4\\n3 5 10\\n2 4 9\\n0 2 5\\n2 5 8\\n0 0 0\\n\\n\", \"output\": \"19\\n34\"}]", "test_case_id": "1233", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 19, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1234, "fields": {"title": "Steps", "description": "One steps through integer points of the straight line. The length of a step must be nonnegative and can be by one bigger than, equal to, or by one smaller than the length of the previous step. <p></p>What is the minimum number of steps in order to get from x to y? The length of the first and the last step must be 1.<p></p>", "input_description": "Input consists of a line containing n, the number of test cases.", "output_description": "For each test case, a line follows with two integers: 0 <= x <= y < 2^31. For each test case, print a line giving the minimum number of steps to get from x to y.", "samples": "[{\"input\": \"3\\n45 48\\n45 49\\n45 50\\n\", \"output\": \"3\\n3\\n4\\n\"}]", "test_case_id": "1234", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 491, "total_accepted_number": 230, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1235, "fields": {"title": "Simple calculations", "description": "There is a sequence of n+2 elements a0, a1, ..., an+1 (n &lt;= 3000, -1000 &lt;= ai &lt;=1000). It is known that ai = (ai-1 + ai+1)/2 - ci for each i=1, 2, ..., n. <p></p>You are given a0, an+1, c1, ... , cn. Write a program which calculates a1.<p></p>", "input_description": "The first line of an input contains an integer n. The next two lines consist of numbers a0 and an+1 each having two digits after decimal point, and the next n lines contain numbers ci (also with two digits after decimal point), one number per line.", "output_description": "The output file should contain a1 in the same format as a0 and an+1.", "samples": "[{\"input\": \"1\\n50.50\\n25.50\\n10.15\\n\", \"output\": \"27.85\\n\"}]", "test_case_id": "1235", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 399, "total_accepted_number": 162, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1237, "fields": {"title": "The Card Gramary", "description": "To day when marry go to school, her teacher played a very interesting gramary. He took 13 cards from A to K, after he riffle the cards many times in the same way , each time he can tell each card without see it . can you tell marry why?<p></p>The teacher played like this:<p></p>First arrange the cards from A to K like :A 2 3 4 5 6 7 8 9 10 J Q K ;<p></p>Then riffle the card once and show every one the card include himself, for example:<p></p>2 A 3 K J 4 5 8 7 6 9 10 Q .<p></p>Then riffle the cards in the same way for 3 times ,and then tell each card without looking at it.<p></p>", "input_description": "The input consists of several data sets. The first line is an integer n tell how many set of data the input include. Each set contain a line tell the arrange of the 13 cards after the first-time riffle. The next line tell how many times the teacher riffles the cards in this way. ", "output_description": "For each set, first print the number of the set, as shown in the sample output. Then print the arrange of the 13 cards after the last time riffle.\nOutput a blank line after each set.\n", "samples": "[{\"input\": \"1\\nA 6 3 4 2 5 J K 9 10 8 7 Q \\n2\\n\", \"output\": \"Set #1\\nA 5 3 4 6 2 8 Q 9 10 K J 7\\n\"}]", "test_case_id": "1237", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 289, "total_accepted_number": 108, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1238, "fields": {"title": "The stone game", "description": "The children like to play a stone game. First give them two stack of stones with arbitrary amount. The game needs two players and the rule is that the two players can take the stone by turn. Each of them can choose a method to take the stone. He can take arbitrary amount of stone from one of the two stacks, or he can also take the same amount of stones from both the two stack of stones. Who finish all the stones in his turn will be the winner. Now you are given the original amount of each crop of stones and you are the first one to take the stone. We suppose each of you and the other player will choose the best strategy in each turn, can you tell who will be the winner?", "input_description": "The input contains several lines. Each of the line includes two positive integer a and b (a<=1,000,000,000;b<=1,000,000,000)represent the count of the two stack of stones.", "output_description": "The output should have the same lines with the input , each include a number 0or 1.If you are the winner ,the input  number should be 1, on the contrary ,the number should be 0.", "samples": "[{\"input\": \"2 1\\n8 4\\n4 7\\n\", \"output\": \"0\\n1\\n0\\n\"}]", "test_case_id": "1238", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 233, "total_accepted_number": 118, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1241, "fields": {"title": "Radar Scopes", "description": "You have been hired to a team of software designers to write a new airtraffic control system. One of the functions of this new software is to automatically verify the functioning of the subject aircrafts\u2019instrumentation and alert controllers to endangered, newly aloft, or possibly downed aircraft. You are to write a prototype of this function.<p></p>Your program will be given a series of scenarios which include 2 radar sweeps each. Each radar sweep will find 0 to 100 airplanes. Each time a sweep encounters a plane, the data acquisition system captures an azimuth reading and distance (in miles) from the radar. It will also retrieve (from the plane) a squawk number and a ground speed in miles/hour (actually an airspeed with wind corrections). Based on the two radar sweeps, your program is to determine if a warning is required for any plane in the radar\u2019s domain.<p></p>You should assume a radar range (radius of the area covered) of 10 miles and instantaneous sweeps that occur 5 seconds apart. Based on the information about the radar and planes, you are to determine if the controllers should be warned of potential problems. An &quot;equipment warning&quot; is issued if the average of the plane\u2019s two indicated airspeeds is not within 10% of the airspeed measured/calculated based on radar sweeps.<p></p>A &quot;new intrusion&quot; warning is issued if the second radar sweep indicates a plane which was not present in the first sweep, but whose indicated airspeed + 10% is sufficient to have brought the plane onto the scope<p></p>(on the shortest path) between the two sweeps. If the speed is not sufficient to account for a plane which was already aloft, then the assumption must be made that there is a &quot;new aloft&quot; warning to be issued because a plane has just taken off within the domain of the radar.<p></p>A &quot;domain exited&quot; warning is issued if the first sweep of the radar indicates a plane which is not seen in the second sweep but whose indicated airspeed + 10% is sufficient to have accounted for the plane leaving the range of the radar (on the shortest path) within the two sweeps. If the speed is not sufficient to allow the plane to leave the<p></p>radar scope between the sweeps, a &quot;domain loss&quot; warning is issued indicating that the plane has either landed or crashed with the controller\u2019s domain.", "input_description": "The first line of each scenario contains a single integer (0<=N1<=100) that indicates the number of planes detected in the first sweep. The next N1 lines each contain the description of exactly one detected plane in sweep 1. Each description contains a squawk number, anazimuth, a distance, and a ground speed. The squawk number is an integer between 1 and 5 digits in length. The azimuth, distance and ground speed are all real numbers in the format XXX.XXX with leading and trailing zeroes as needed to fill all 6 places.\nThe squawk number (0<S<32767) is a globally unique integer that identifies each plane and is used to match planes from sweeps 1 and 2. The azimuth (000.000<=A<=359.999) is the angle in degrees from North (sweeping in a circle toward the East) where the plane was detected. Therefore, East is at 90 degrees; South is at 180 degrees; and West is at 270 degrees. The distance (000.000<=D<=010.000) is the distance from the radar to the plane (added distance due to altitude has been removed by the radar\u2019s sensing logic). The ground speed (000.000<=G<=999.999) is the speed at which the plane is moving (in any direction) relative to the radar.\nImmediately following the lines with the descriptions of planes in the first sweep is a line with a single integer (0<=N2<=100) indicating the number of planes detected in the second sweep. The next N2 lines each contain the description of exactly one detected plane in sweep 2. The next scenario (if any) starts with N1 on the next line. You are to read and process scenarios to the end-of-file.", "output_description": "For each scenario, you are to print \"Scenario # X\" where X is the number of the scenario starting with 1 for the first scenario and incrementing by 1 for successive scenarios. Each subsequent line contains exactly one report for each plane requiring a warning indication. These lines are to be sorted based on the squawk number. Reports consist of the squawk number right-justified in columns 1 to 5 and one of the following warnings \" -- equipment warning\", \" -- new\nintrusion\", \" -- new aloft\", \" -- domain exited\", or \" -- domain loss\" starting in column 6. (You must print the blanks and dashes exactly as shown in the strings above.) There are no messages printed for planes for whom no warning applies.\nAfter each scenario, print a blank line.", "samples": "[{\"input\": \"4\\n222 060.111 007.600 095.000\\n1496 203.122 009.444 598.991\\n111 000.000 005.100 999.999\\n013 333.333 006.711 188.448\\n4\\n111 001.000 003.713 999.999\\n777 263.122 009.933 477.633\\n333 083.014 004.300 127.122\\n222 040.713 009.813 098.125\", \"output\": \"Scenario # 1\\n013 -- domain loss\\n222 -- equipment warning\\n333 -- new aloft\\n777 -- new intrusion\\n1496 -- domain exited\\n\"}]", "test_case_id": "1241", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1242, "fields": {"title": "Message Routing", "description": "The International Standards Organization has defined a Message Handling System (MHS) called X.400. One of the functional units of a MHS, the MTA, handles routing of messages. Routing is performed based on components of the Originator/Recipient name. For the purposes of this problem, valid components of an O/R name (in order of widest scope to narrowest scope) are Country (C), Administrative Management Domain (ADMD), Private Management Domain (PRMD), and Organization Name (O). Each MTA uses its own routing table to forward messages on to the next MTA or delivering the message locally. <p></p>Your program is to simulate a collection of MTAs processing messages. Each time a message arrives (or is submitted) to an MTA, the MTA uses the O/R name of the message and the MTA\u2019s routing table to forward the message on to the appropriate MTA. If the MTA finds that the message\u2019s final destination is itself, it will deliver the message locally. Your program is to simulate this message-forwarding activity to trace the path of mail through the set of MTAs. <p></p>The routing function is accomplished by comparing the supplied fields of entries in the routing table against the O/R name components of the message. Each routing table entry refers to exactly one MTA although MTAs may have multiple entries in the routing table. The first routing table entry (starting from the top) whose fields match the corresponding O/R name components in the message is selected and the message is forwarded to that MTA. It is possible for routing table entries to contain a wildcard (denoted by an asterisk); wildcard components always match the contents of the corresponding O/R name component in the message.<p></p>MTAs are also responsible for routing error detection and recovery. If an MTA detects that it has received a message that it has handled before (a circular routing path is detected), it will place the message in the undeliverable queue and generate a non-delivery report. In addition, if an MTA is unable to route a message (ie no routing table<p></p>entry match the message\u2019s O/R name), it will place the message in the undeliverable queue and generate a routing error report.", "input_description": "Input to your program will consist of a series of message routing scenarios. Input for each scenario starts with a single line that contains a single integer (1 <= M <= 10) indicating the number of MTAs in the scenario. Subsequent lines will contain a description for each of the M MTAs.\nEach MTA description starts with a line containing the name of the MTA(a left justified alphabetic string of 1 to 10 characters with no embedded spaces) in columns 1-10 and an integer (0 <= I <= 9) in column 12 indicating the number of entries in the MTA\u2019s routing table. Each of the following I lines will then contain a valid name of an adjacent MTA in columns 1-10 followed by the Country, ADMD, PRMD, and Organization Name in columns 15-24, 30-39, 45-54, and 60-69\nrespectively. Each O/R name component will consist of 1 to 10 alphabetic characters left-justified in their field with no embedded blanks. Alternatively, an O/R name component may contain a single asterisk (*) in the first column in the field indicating a wild-card match in the field.\nFollowing the description of the MTAs, there will be a single line containg a single integer (0<N<32768) indicating the number of messages to be sent in the simulation. Each of the subsequent N lines will contain the description of exactly one message. Each message description contains a valid name of one of the MTAs described above left-justified in columns 1-10 followed by the Country, ADMD, PRMD, and Organization Name in columns 15-24, 30-39, 45-54, and 60-69\nrespectively. Each O/R name component will consist of 1 to 10 alphabetic characters left-justified in their field with no embedded blanks and the MTA name is where the message is submitted and the simulation begins.", "output_description": "For each scenario, you are to print \"Scenario # X\" where X is the\nnumber of the scenario starting with 1 and incrementing for subsequent scenarios. Each of the following N lines will contain the number of the message left-justified in column 1 (ordered by the submission ordering in the input) immediately followed by one of the following messages:\n\" -- delivered to MTA_NAME\",\n\" -- circular routing detected by MTA_NAME\", or\n\" -- unable to route at MTA_NAME\".\nIn all three messages, MTA_NAME is replaced by the name of the MTA generating the report. Other than MTA_NAME, you are to print the string exactly as above including spacing and dashes. After the list of message reports, you are to print a single blank line and continue processing with the next scenario.\n", "samples": "[{\"input\": \"5\\nNAULINS 3\\nHOUSTON US SHIP * UHDOWNTOWN\\nNAULINS US SHIP * UNO\\nDALLAS US AIR UT *\\nHOUSTON 4\\nHOUSTON US * UH UHDT\\nSANANTONIO US BUS UT UTSA\\nDALLAS US AIR UT *\\nNAULINS US SHIP * UNO\\nDALLAS 7\\nDALLAS US * UT UTD\\nDALLAS US * UT UTA\\nHOUSTON US * UH *\\nSANANTONIO US AIR UT UTSA\\nOKLAHOMA US BUS * OU\\nNAULINS US AIR * UNO\\nHOUSTON US SHIP * *\\nOKLAHOMA 3\\nOKLAHOMA US * * OU\\nDALLAS US AIR * *\\nSANANTONIO US BUS * *\\nSANANTONIO 5\\nHOUSTON * * * UNO\\nHOUSTON US BUS UH *\\nDALLAS US AIR * *\\nSANANTONIO US * UT UTSA\\nOKLAHOMA US BUS * *\\n5\\nSANANTONIO US AIR COLLEGE UNO\\nOKLAHOMA US BUS UH UHDT\\nDALLAS US SHIP COLLEGE UNO\\nNAULINS US AIR COLLEGE OU\\nHOUSTON US AIR UT UTSA\", \"output\": \"Scenario # 1\\n1 -- unable to route at HOUSTON\\n2 -- delivered to HOUSTON\\n3 -- delivered to NAULINS\\n4 -- unable to route at NAULINS\\n5 -- circular routing detected by DALLAS\\n\"}]", "test_case_id": "1242", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1243, "fields": {"title": "Unix ls", "description": "The computer company you work for is introducing a brand new computer line and is developing a new Unix-like operating system to be introduced along with the new computer. Your assignment is to write the formatter for the ls function.<p></p>Your program will eventually read input from a pipe (although for now your program will read from the input file). Input to your program will consist of a list of (F) filenames that you will sort (ascending based on the ASCII character values) and format into (C) columns based on the length (L) of the longest filename. Filenames will be between 1 and 60 (inclusive) characters in length and will be formatted into left-justified columns. The rightmost column will be the width of the longest filename and all other columns will be the width of the longest filename plus 2. There will be as many columns as will fit in 60 characters. Your program should use as few rows (R) as possible with<p></p>rows being filled to capacity from left to right.", "input_description": "The input file will contain an indefinite number of lists of filenames. Each list will begin with a line containing a single integer (1<= N <= 100). There will then be N lines each containing one left-justified filename and the entire line\u2019s contents (between 1 and 60 characters) are considered to be part of the filename. Allowable characters are\nalphanumeric (a to z, A to Z, and 0 to 9) and from the following set {._- } (not including the curly braces). There will be no illegal characters in any of the filenames and no line will be completely empty.\nImmediately following the last filename will be the N for the next set or the end of file. You should read and format all sets in the input file.", "output_description": "For each set of filenames you should print a line of exactly 60 dashes (-) followed by the formatted columns of filenames. The sorted filenames 1 to R will be listed down column 1; filenames R+1 to 2R listed down column 2; etc.", "samples": "[{\"input\": \"10\\nlong-file-name\\nthe longest file name\\nshort\\ntiny\\nabc\\nmid-length\\n88888888.333\\nlonger_filename\\n2short4me\\nanother long name\\n12\\nWeaser\\nAlfalfa\\nStimey\\nBuckwheat\\nPorky\\nJoe\\nDarla\\nCotton\\nButch\\nFroggy\\nMrs_Crabapple\\nP.D.\\n19\\nMr._French\\nJody\\nBuffy\\nSissy\\nKeith\\nDanny\\nLori\\nChris\\nShirley\\nMarsha\\nJan\\nCindy\\nCarol\\nMike\\nGreg\\nPeter\\nBobby\\nAlice\\nRuben\", \"output\": \"12345678.123 size-1\\n2short4me size2\\nmid_size_name tiny\\nmuch_longer_name very_long_file_name\\nshorter size3\\n------------------------------------------------------------\\nAlfalfa Cotton Joe Stimey\\nBuckwheat Darla Mrs_Crabapple Weaser\\nButch Froggy Porky P.D.\\n------------------------------------------------------------\\nAlice Chris Jan Marsha Shirley\\nBobby Cindy Jody Mike Sissy\\nBuffy Danny Keith Mr._French Ruben\\nCarol Greg Lori Peter\\n\"}]", "test_case_id": "1243", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 24, "total_accepted_number": 15, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1245, "fields": {"title": "FORCAL", "description": "FORCAL is the programming language well known to programmers who are interested in compiler construction and especially to students attending Dr. C. Ompiler class. The FORCAL syntax is defined as follows: <p></p>The only data type is integer. <p></p><p></p>All identifiers are implicitly declared and are not longer than 32 characters. Identifiers are composed of letters, digits and underscores. At least one character of the identifier is not a digit. <p></p><p></p>Literals are strings of at most 8 digits. <p></p><p></p>Comments begin with -- and end at the end of the line in which they start. <p></p><p></p>Statement types are <p></p><p></p>Assignment: <p></p><p></p>identifier := expression <p></p><p></p>where expressions are constructed from identifiers, literals, operators +, -, <p></p><p></p>and parentheses as follows: <p></p><p></p>1) all identifiers and literals are expressions, <p></p><p></p>2) if a, b are expressions then a + b, a - b, +a, -a, (a) are expressions. <p></p><p></p>Input/Output: <p></p><p></p>read(List of identifiers); <p></p><p></p>write(List of expressions) <p></p><p></p>(Items in the list are separated by comma) <p></p><p></p>begin, end, read, and write are reserved words. <p></p><p></p>Each statement is terminated by a semicolon. <p></p><p></p>FORCAL is not case-sensitive, for example BegIN is the same keyword as beGin. <p></p><p></p>FORCAL tokens are defined to be: the identifiers or the literals or the symbols + - ( ) := ; , or the reserved words. <p></p><p></p><p></p>NOTES: <p></p><p></p>the assign operator is to be considered one FORCAL token, <p></p><p></p>spaces, tabs, end-of-lines are allowed between the tokens, <p></p><p></p>no part of any comment is a token, <p></p><p></p>successive tokens that are either identifiers, literals or reserved words must be separated by a space or tab or end-of-line, <p></p><p></p>no token is allowed to contain a space or a tab or end-of-line. <p></p><p></p>Help the students of Dr. C. Ompiler to write a program which reads lines of text an recognizes the FORCAL tokens in them. <p></p><p></p>", "input_description": "The input consists of several blocks of lines. Each block contains lines of text and is terminated by one empty line. \n\n", "output_description": "The output consists of blocks corresponding to the blocks in the input. In the lines of each block there are successively stored the FORCAL tokens recognized by the program (just one token on each line). Each token must be written on the output line in exactly the same form as it appears in the input text. If the program encounters a string that is neither a FORCAL token, nor comment, nor space, tab, end-of-line, it is to write the string TOKEN ERROR on a new line and continues by processing the next block in the input. The program writes one empty line after each block of the output. \n\n", "samples": "[{\"input\": \"A1:= A + (-B);\\n\\nA123_A123 )\\n01.2 A B\\nC\\n\\n:= A beGIn\\n\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\n\", \"output\": \"A1\\n:=\\nA\\n+\\n(\\n-\\nB\\n)\\n;\\n\\nA123_A123\\n)\\n01\\nTOKEN ERROR\\n\\n:=\\nA\\nbeGIn\\n\\nTOKEN ERROR\\n\"}]", "test_case_id": "1245", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 2, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1246, "fields": {"title": "L-system", "description": "A D0L (Deterministic Lindenmayer system without interaction) system consists of a finite set SIGMA of symbols (the alphabet), a finite set P of productions and a starting string w. The productions in P are of the form x -&gt; u, where x in SIGMA and u in SIGMA+ (u is called the right side of the production), SIGMA+ is the set of all strings of symbols from SIGMA excluding the empty string. Such productions represent the transformation of the symbol x into the string u. For each symbol x in SIGMA , P contains exactly one production of the form x -&gt; u. Direct derivation from string u1 to u2 consists of replacing each occurrence of the symbol x in SIGMA in u1 by the string on the right side of the production for that symbol. The language of the D0L system consists of all strings which can be derived from the starting string w by a sequence of the direct derivations. <p></p>Suppose that the alphabet consists of two symbols a and b. So the set of productions includes two productions of the form a -&gt; u, b -&gt; v, where u and v in {a,b}+, and the starting string w in {a,b}+. Can you answer whether there exists a string in the language of the D0L system of the form xzy for a given string z? (x and y are some strings from SIGMA*, SIGMA* is the set of all strings of symbols from SIGMA, including the empty string.). Certainly you can. Write the program which will solve this problem. <p></p><p></p>", "input_description": "The input of the program consists of several blocks of lines. Each block includes four lines. There are no empty lines between any successive two blocks. The first line of a block contains the right side of the production for the symbol a. The second one contains the right side of the production for the symbol b and the third one contains the starting string and the fourth line the given string z. The right sides of the productions, the given string z and the starting string are at most 15 characters long. ", "output_description": "For each block in the input there is one line in the output containing YES or NO according to the solution of the given problem. \n", "samples": "[{\"input\": \"aa\\nbb\\nab\\naaabb\\na\\nb\\nab\\nba\\n\", \"output\": \"YES\\nNO\"}]", "test_case_id": "1246", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 2, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1247, "fields": {"title": "Packets", "description": "A factory produces products packed in square packets of the same height h and of the sizes 1*1, 2*2, 3*3, 4*4, 5*5, 6*6. These products are always delivered to customers in the square parcels of the same height h as the products have and of the size 6*6. Because of the expenses it is the interest of the factory as well as of the customer to minimize the number of parcels necessary to deliver the ordered products from the factory to the customer. A good program solving the problem of finding the minimal number of parcels necessary to deliver the given products according to an order would save a lot of money. You are asked to make such a program. <p></p>", "input_description": "The input file consists of several lines specifying orders. Each line specifies one order. Orders are described by six integers separated by one space representing successively the number of packets of individual size from the smallest size 1*1 to the biggest size 6*6. The end of the input file is indicated by the line containing six zeros. \n", "output_description": "The output file contains one line for each line in the input file. This line contains the minimal number of parcels into which the order from the corresponding line of the input file can be packed. There is no line in the output file corresponding to the last ``null'' line of the input file. \n", "samples": "[{\"input\": \"0 0 4 0 0 1 \\n7 5 1 0 0 0 \\n0 0 0 0 0 0 \", \"output\": \"2 \\n1 \"}]", "test_case_id": "1247", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 112, "total_accepted_number": 58, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1250, "fields": {"title": "Robot", "description": "The Robot Moving Institute is using a robot in their local store to transport different items. Of course the robot should spend only the minimum time necessary when travelling from one place in the store to another. The robot can move only along a straight line (track). All tracks form a rectangular grid. Neighbouring tracks are one meter apart. The store is a rectangle N x M meters and it is entirely covered by this grid. The distance of the track closest to the side of the store is exactly one meter. The robot has a circular shape with diameter equal to 1.6 meter. The track goes through the center of the robot. The robot always faces north, south, west or east. The tracks are in the south-north and in the west-east directions. The robot can move only in the direction it faces. The direction in which it faces can be changed at each track crossing. Initially the robot stands at a track crossing. The obstacles in the store are formed from pieces occupying 1m x 1m on the ground. Each obstacle is within a 1 x 1 square formed by the tracks. The movement of the robot is controlled by two commands. These commands are GO and TURN. <p></p>The GO command has one integer parameter n in {1,2,3}. After receiving this command the robot moves n meters in the direction it faces. <p></p><p></p>The TURN command has one parameter which is either left or right. After receiving this command the robot changes its orientation by 90o in the direction indicated by the parameter. <p></p><p></p>The execution of each command lasts one second. <p></p><p></p>Help researchers of RMI to write a program which will determine the minimal time in which the robot can move from a given starting point to a given destination. ", "input_description": "The input consists of blocks of lines. The first line of each block contains two integers M <= 50 and N <= 50 separated by one space. In each of the next M lines there are N numbers one or zero separated by one space. One represents obstacles and zero represents empty squares. (The tracks are between the squares.) The block is terminated by a line containing four positive integers B1 B2 E1 E2 each followed by one space and the word indicating the orientation of the robot at the starting point. B1, B2 are the coordinates of the square in the north-west corner of which the robot is placed (starting point). E1, E2 are the coordinates of square to the north-west corner of which the robot should move (destination point). The orientation of the robot when it has reached the destination point is not prescribed. We use (row, column)-type coordinates, i.e. the coordinates of the upper left (the most north-west) square in the store are 0,0 and the lower right (the most south-east) square are M - 1, N - 1. The orientation is given by the words north or west or south or east. The last block contains only one line with N = 0 and M = 0. \n", "output_description": "The output contains one line for each block except the last block in the input. The lines are in the order corresponding to the blocks in the input. The line contains minimal number of seconds in which the robot can reach the destination point from the starting point. If there does not exist any path from the starting point to the destination point the line will contain -1. \n\n<img src=uploadFiles\\1250.jpg>\n\n", "samples": "[{\"input\": \"9 10\\n0 0 0 0 0 0 1 0 0 0\\n0 0 0 0 0 0 0 0 1 0\\n0 0 0 1 0 0 0 0 0 0\\n0 0 1 0 0 0 0 0 0 0\\n0 0 0 0 0 0 1 0 0 0\\n0 0 0 0 0 1 0 0 0 0\\n0 0 0 1 1 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n1 0 0 0 0 0 0 0 1 0\\n7 2 2 7 south\\n0 0\\n\", \"output\": \"12\"}]", "test_case_id": "1250", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 8, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1251, "fields": {"title": "Network", "description": "A Telephone Line Company (TLC) is establishing a new telephone cable network. They are connecting several places numbered by integers from 1 to N . No two places have the same number. The lines are bidirectional and always connect together two places and in each place the lines end in a telephone exchange. There is one telephone exchange in each place. From each place it is <p></p>possible to reach through lines every other place, however it need not be a direct connection, it can go through several exchanges. From time to time the power supply fails at a place and then the exchange does not operate. The officials from TLC realized that in such a case it can happen that besides the fact that the place with the failure is unreachable, this can also cause that some other places cannot connect to each other. In such a case we will say the place (where the failure <p></p>occured) is critical. Now the officials are trying to write a program for finding the number of all such critical places. Help them. <p></p>", "input_description": "The input file consists of several blocks of lines. Each block describes one network. In the first line of each block there is the number of places N < 100. Each of the next at most N lines contains the number of a place followed by the numbers of some places to which there is a direct line from this place. These at most N lines completely describe the network, i.e., each direct connection of two places in the network is contained at least in one row. All numbers in one line are separated \nby one space. Each block ends with a line containing just 0. The last block has only one line with N = 0; \n", "output_description": "The output contains for each block except the last in the input file one line containing the number of critical places. \n", "samples": "[{\"input\": \"5\\n5 1 2 3 4\\n0\\n6\\n2 1 3\\n5 4 6 2\\n0\\n0\\n\", \"output\": \"1\\n2\"}]", "test_case_id": "1251", "hint": "You need to determine the end of one line.In order to make it&#039;s easy to determine,there are no extra blank before the end of each line.\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 55, "total_accepted_number": 31, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1253, "fields": {"title": "Number Sequence", "description": "A number sequence is defined as follows:<p></p><p></p>f(1) = 1, f(2) = 1, f(n) = (A * f(n - 1) + B * f(n - 2)) mod 7.<p></p><p></p>Given A, B, and n, you are to calculate the value of f(n).<p></p>", "input_description": "The input consists of multiple test cases. Each test case contains 3 integers A, B and n on a single line (1 <= A, B <= 1000, 1 <= n <= 100,000,000). Three zeros signal the end of input and this test case is not to be processed.", "output_description": "For each test case, print the value of f(n) on a single line.", "samples": "[{\"input\": \"1 1 3\\n1 2 10\\n0 0 0\\n\", \"output\": \"2\\n5\\n\"}]", "test_case_id": "1253", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 582, "total_accepted_number": 221, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1254, "fields": {"title": "Run Away", "description": "One of the traps we will encounter in the Pyramid is located in the Large Room. A lot of small holes are drilled into the floor. They look completely harmless at the first sight. But when activated, they start to throw out very hot java, uh ... pardon, lava. Unfortunately, all known paths to the Center Room (where the Sarcophagus is) contain a trigger that activates the trap. The ACM were not able to avoid that. But they have carefully monitored the positions of all the holes. So it is important to find the place in the Large Room that has the maximal distance from all the holes. This place is the safest in the entire room and the archaeologist has to hide there.", "input_description": "The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing three integers X, Y, M separated by space. The numbers satisfy conditions: 1 <= X,Y <=10000, 1 <= M <= 1000. The numbers X and Yindicate the dimensions of the Large Room which has a rectangular shape. The number M stands for the number of holes. Then exactly M lines follow, each containing two integer numbers Ui and Vi (0 <= Ui <= X, 0 <= Vi <= Y) indicating the coordinates of one hole. There may be several holes at the same position. ", "output_description": "Print exactly one line for each test case. The line should contain the sentence \"The safest point is (P, Q).\" where P and Qare the coordinates of the point in the room that has the maximum distance from the nearest hole, rounded to the nearest number with exactly one digit after the decimal point (0.05 rounds up to 0.1).", "samples": "[{\"input\": \"3\\n1000 50 1\\n10 10\\n100 100 4\\n10 10\\n10 90\\n90 10\\n90 90\\n3000 3000 4\\n1200 85\\n63 2500\\n2700 2650 \\n2990 100\\n\", \"output\": \"The safest point is (1000.0, 50.0).\\nThe safest point is (50.0, 50.0).\\nThe safest point is (1433.0, 1669.8).\\n\\n\"}]", "test_case_id": "1254", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 10, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1255, "fields": {"title": "Equipment Box", "description": "There is a large room in the Pyramid called Room-of-No-Return. Its floor is covered by rectangular tiles of equal size. The name of the room was chosen because of the very high number of traps and mechanisms in it. The ACM group has spent several years studying the secret plan of this room. It has made a clever plan to avoid all the traps. A specially trained mechanic was sent to deactivate the most feared trap called Shattered Bones. After deactivating the trap the mechanic had to escape from the room. It is very important to step on the center of the tiles only; he must not touch the edges. One wrong step and a large rock falls from the ceiling squashing the mechanic like a pancake. After deactivating the trap, he realized a horrible thing: the ACM plan did not take his equipment box into consideration. The box must be laid onto the ground because the mechanic must have both hands free to prevent contact with other traps. But when the box is laid on the ground, it could touch the line separating the tiles. And this is the main problem you are to solve. <p></p>Input Specification<p></p>The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case consists of a single line. The line contains exactly four integer numbers separated by spaces: A, B, X and Y. A and B indicate the dimensions of the tiles, X and Y are the dimensions of the equipment box (1 &lt;= A,B,X,Y &lt;= 50000).<p></p>", "input_description": "The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case consists of a single line. The line contains exactly four integer numbers separated by spaces: A, B, X and Y. A and B indicate the dimensions of the tiles, X and Y are the dimensions of the equipment box (1 <= A,B,X,Y <= 50000).\n", "output_description": "Your task is to determine whether it is possible to put the box on a single tile -- that is, if the whole box fits on a single tile without touching its border. If so, you are to print one line with the sentence \"Escape is possible.\". Otherwise print the sentence \"Box cannot be dropped.\".", "samples": "[{\"input\": \"2\\n10 10 8 8\\n8 8 10 10\\n\\n\", \"output\": \"Escape is possible.\\nBox cannot be dropped.\\n\"}]", "test_case_id": "1255", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 202, "total_accepted_number": 31, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1256, "fields": {"title": "Secret Code", "description": "The Sarcophagus itself is locked by a secret numerical code. When somebody wants to open it, he must know the code and set it exactly on the top of the Sarcophagus. A very intricate mechanism then opens the cover. If an incorrect code is entered, the tickets inside would catch fire immediately and they would have been lost forever. The code (consisting of up to 100 integers) was hidden in the Alexandrian Library but unfortunately, as you probably know, the library burned down completely. <p></p>But an almost unknown archaeologist has obtained a copy of the code something during the 18th century. He was afraid that the code could get to the ``wrong people&#039;&#039; so he has encoded the numbers in a very special way. He took a random complex number B that was greater (in absolute value) than any of the encoded numbers. Then he counted the numbers as the digits of the system with basis B. That means the sequence of numbers an, an-1, ..., a1, a0 was encoded as the number X = a0 + a1B + a2B2 + ...+ anBn. <p></p>Your goal is to decrypt the secret code, i.e. to express a given number X in the number system to the base B. In other words, given the numbers X and Byou are to determine the &quot;digit&quot; a0 through an. <p></p>", "input_description": "The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case consists of one single line containing four integer numbers Xr, Xi, Br, Bi (|Xr|,|Xi| <= 1000000, |Br|,|Bi| <= 16). These numbers indicate the real and complex components of numbers X and B, i.e. X = Xr + i.Xi, B = Br + i.Bi. B is the basis of the system (|B| > 1), X is the number you have to express.", "output_description": "  Your program must output a single line for each test case. The line should contain the ``digits'' an, an-1, ..., a1, a0, separated by commas. The following conditions must be satisfied: \n&#8226;\tfor all i in {0, 1, 2, ...n}: 0 <= ai < |B| \n&#8226;\tX = a0 + a1B + a2B2 + ...+ anBn \n&#8226;\tif n > 0 then an <> 0 \n&#8226;\tn <= 100 \n  If there are no numbers meeting these criteria, output the sentence \"The code cannot be decrypted.\". If there are more possibilities, print any of them. ", "samples": "[{\"input\": \"4\\n-935 2475 -11 -15\\n1 0 -3 -2\\n93 16 3 2\\n191 -192 11 -12\\n\", \"output\": \"8,11,18\\n1\\nThe code cannot be decrypted.\\n16,15\\n\"}]", "test_case_id": "1256", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 34, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1257, "fields": {"title": "Piggy-Bank", "description": "Before ACM can do anything, a budget must be prepared and the necessary financial support obtained. The main income for this action comes from Irreversibly Bound Money (IBM). The idea behind is simple. Whenever some ACM member has any small money, he takes all the coins and throws them into a piggy-bank. You know that this process is irreversible, the coins cannot be removed without breaking the pig. After a sufficiently long time, there should be enough cash in the piggy-bank to pay everything that needs to be paid. <p></p>But there is a big problem with piggy-banks. It is not possible to determine how much money is inside. So we might break the pig into pieces only to find out that there is not enough money. Clearly, we want to avoid this unpleasant situation. The only possibility is to weigh the piggy-bank and try to guess how many coins are inside. Assume that we are able to determine the weight of the pig exactly and that we know the weights of all coins of a given currency. Then there is some minimum amount of money in the piggy-bank that we can guarantee. Your task is to find out this worst case and determine the minimum amount of cash inside the piggy-bank. We need your help. No more prematurely broken pigs!<p></p>", "input_description": "The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing two integers E and F. They indicate the weight of an empty pig and of the pig filled with coins. Both weights are given in grams. No pig will weigh more than 10 kg, that means 1 <= E <= F <= 10000. On the second line of each test case, there is an integer number N (1 <= N <= 500) that gives the number of various coins used in the given currency. Following this are exactly N lines, each specifying one coin type. These lines contain two integers each, Pand W (1 <= P <= 50000, 1 <= W <=10000). P is the value of the coin in monetary units, W is it's weight in grams.", "output_description": "Print exactly one line of output for each test case. The line must contain the sentence \"The minimum amount of money in the piggy-bank is X.\" where X is the minimum amount of money that can be achieved using coins with the given total weight. If the weight cannot be reached exactly, print a line \"This is impossible.\". ", "samples": "[{\"input\": \"3\\n10 110\\n2\\n1 1\\n30 50\\n10 110\\n2\\n1 1\\n50 30\\n1 6\\n2\\n10 3\\n20 4\\n\", \"output\": \"The minimum amount of money in the piggy-bank is 60.\\nThe minimum amount of money in the piggy-bank is 100.\\nThis is impossible.\\n\\n\"}]", "test_case_id": "1257", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 265, "total_accepted_number": 90, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1258, "fields": {"title": "The Proper Key", "description": "Many people think that Tetris was invented by two Russian programmers. But that is not the whole truth. The idea of the game is very old -- even the Egyptians had something similar. But they did not use it as a game. Instead, it was used as a very complicated lock. The lock was made of wood and consisted of a large number of square fields, laid out in regular rows and columns. Each field was either completely filled with wood, or empty. The key for this lock was two-dimensional and it was made by joining square parts of the same size as the fields of the lock. So they had a 2D lock and 2D key that could be inserted into the lock from the top. The key was designed so that it was not possible to move it upwards. It could only fall down and it could slide sideways -- exactly like in a Tetris game. The only difference is that the key could not be rotated. Rotation in Tetris is really a Russian invention. <p></p>The entry gate into the Pyramid has such a lock. The ACM archaeologists have found several keys and one of them belongs to the lock with a very high probability. Now they need to try them out and find which one to use. Because it is too time-consuming to try all of them, it is better to begin with those keys that may be inserted deeper into the lock. Your program should be able to determine how deep a given key can be inserted into a given lock. <p></p>", "input_description": "he input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing two integers R and C (1 <= R,C <= 100) indicating the key size. Then exactly R rows follow, each containing C characters. Each character is either a hash mark (#) or a period (.). A hash mark represents one square field made of wood; a period is an empty field. The wooden fields are always connected, i.e. the whole key is made of one piece. Moreover, the key remains connected even if we cut off arbitrary number of rows from its top. There is always at least one non-empty field in the top-most and bottom-most rows and the left-most and right-most columns. \nAfter the key description, there is a line containing two integers D and W (1 <= D <= 10000, 1 <= W <= 1000). The number W is the lock width, and D is its depth. The next D lines contain W characters each. The character may be either a hash mark (representing the wood) or a period (the free space). \n", "output_description": "Your program should print one line of output for each test case. The line should contain the statement \"The key falls to depth X.\". Replace X with the maximum depth to which the key can be inserted by moving it down and sliding it to the left or right only. The depth is measured as the distance between the bottom side of the key and the top side of the lock. If it is possible to move the key through the whole lock and take it away at the bottom side, output the sentence \"The key can fall through.\". ", "samples": "[{\"input\": \"4\\n2 4\\n#.##\\n###.\\n3 6\\n#....#\\n#....#\\n#..###\\n2 3\\n##.\\n.##\\n2 7\\n#.#.#.#\\n.#.#.#.\\n1 1\\n#\\n1 10\\n###....###\\n3 2\\n##\\n.#\\n.#\\n1 5\\n#.#.#\\n\", \"output\": \"The key falls to depth 2.\\nThe key falls to depth 0.\\nThe key can fall through.\\n\"}]", "test_case_id": "1258", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 49, "total_accepted_number": 38, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1259, "fields": {"title": "Labyrinth", "description": "The northern part of the Pyramid contains a very large and complicated labyrinth. The labyrinth is divided into square blocks, each of them either filled by rock, or free. There is also a little hook on the floor in the center of every free block. The ACM have found that two of the hooks must be connected by a rope that runs through the hooks in every block on the path between the connected ones. When the rope is fastened, a secret door opens. The problem is that we do not know which hooks to connect. That means also that the neccessary length of the rope is unknown. Your task is to determine the maximum length of the rope we could need for a given labyrinth. ", "input_description": "The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing two integers C and R (3 <= C,R <= 1000) indicating the number of columns and rows. Then exactly R lines follow, each containing C characters. These characters specify the labyrinth. Each of them is either a hash mark (#) or a period (.). Hash marks represent rocks, periods are free blocks. It is possible to walk between neighbouring blocks only, where neighbouring blocks are blocks sharing a common side. We cannot walk diagonally and we cannot step out of the labyrinth. \nThe labyrinth is designed in such a way that there is exactly one path between any two free blocks. Consequently, if we find the proper hooks to connect, it is easy to find the right path connecting them.\n", "output_description": "Output Specification\nYour program must print exactly one line of output for each test case. The line must contain the sentence \"Maximum rope length is X.\" where Xis the length of the longest path between any two free blocks, measured in blocks. \n", "samples": "[{\"input\": \"2\\n3 3\\n###\\n#.#\\n###\\n7 6\\n#######\\n#.#.###\\n#.#.###\\n#.#.#.#\\n#.....#\\n#######\\n\", \"output\": \"Maximum rope length is 0.\\nMaximum rope length is 8.\\n\\n\"}]", "test_case_id": "1259", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 55, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1260, "fields": {"title": "Lifting the Stone", "description": "There are many secret openings in the floor which are covered by a big heavy stone. When the stone is lifted up, a special mechanism detects this and activates poisoned arrows that are shot near the opening. The only possibility is to lift the stone very slowly and carefully. The ACM team must connect a rope to the stone and then lift it using a pulley. Moreover, the stone must be lifted all at once; no side can rise before another. So it is very important to find the centre of gravity and connect the rope exactly to that point. The stone has a polygonal shape and its height is the same throughout the whole polygonal area. Your task is to find the centre of gravity for the given polygon. ", "input_description": "The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing a single integer N (3 <= N <= 1000000) indicating the number of points that form the polygon. This is followed by N lines, each containing two integers Xi and Yi (|Xi|, |Yi| <= 20000). These numbers are the coordinates of the i-th point. When we connect the points in the given order, we get a polygon. You may assume that the edges never touch each other (except the neighboring ones) and that they never cross. The area of the polygon is never zero, i.e. it cannot collapse into a single line.", "output_description": "Print exactly one line for each test case. The line should contain exactly two numbers separated by one space. These numbers are the coordinates of the centre of gravity. Round the coordinates to the nearest number with exactly two digits after the decimal point (0.005 rounds up to 0.01). Note that the centre of gravity may be outside the polygon, if its shape is not convex. If there is such a case in the input data, print the centre anyway. ", "samples": "[{\"input\": \"2\\n4\\n5 0\\n0 5\\n-5 0\\n0 -5\\n4\\n1 1\\n11 1\\n11 11\\n1 11\\n\", \"output\": \"0.00 0.00\\n6.00 6.00\\n\\n\"}]", "test_case_id": "1260", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 184, "total_accepted_number": 76, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1261, "fields": {"title": "Play on Words", "description": "Some of the secret doors contain a very interesting word puzzle. The team of archaeologists has to solve it to open that doors. Because there is no other way to open the doors, the puzzle is very important for us. <p></p>There is a large number of magnetic plates on every door. Every plate has one word written on it. The plates must be arranged into a sequence in such a way that every word begins with the same letter as the previous word ends. For example, the word ``acm&#039;&#039; can be followed by the word ``motorola&#039;&#039;. Your task is to write a computer program that will read the list of words and determine whether it is possible to arrange all of the plates in a sequence (according to the given rule) and consequently to open the door.<p></p>", "input_description": "The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing a single integer number Nthat indicates the number of plates (1 <= N <= 100000). Then exactly Nlines follow, each containing a single word. Each word contains at least two and at most 1000 lowercase characters, that means only letters 'a' through 'z' will appear in the word. The same word may appear several times in the list. ", "output_description": "Your program has to determine whether it is possible to arrange all the plates in a sequence such that the first letter of each word is equal to the last letter of the previous word. All the plates from the list must be used, each exactly once. The words mentioned several times must be used that number of times. \nIf there exists such an ordering of plates, your program should print the sentence \"Ordering is possible.\". Otherwise, output the sentence \"The door cannot be opened.\". \n", "samples": "[{\"input\": \"3\\n2\\nacm\\nibm\\n3\\nacm\\nmalform\\nmouse\\n2\\nok\\nok\\n\", \"output\": \"The door cannot be opened.\\nOrdering is possible.\\nThe door cannot be opened.\\n\\n\"}]", "test_case_id": "1261", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 199, "total_accepted_number": 21, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1266, "fields": {"title": "Firefighters", "description": "A mathematician kept all his documents in a file cabinet near his desk. One day a fire set out in his office and most of his works were badly damaged. Luckily, some of the equations he had solved so many years during his long career were partially preserved. Each equation contained an expression in left side and result in the right. The preserved expressions consisted of all the numbers and brackets, but unfortunately, some of the operators between them were lost in the fire. Another problem was that the results of the equations were scattered and the mathematician was not sure if a certain answer is the result of a certain expression. Your task is to help the mathematician determine if the expressions and the results he was able to save from the fire match one another. <p></p><p></p>In order to do this, you are given an expression, containing the integer numbers between 1 and 999, simple mathematical operators (+, -, *, /), brackets, and question marks (?), representing the lost mathematical operators. For every expression given, your only task is to state if an expression can or cannot give the required result. In order to help you, the mathematician has chosen only expressions that have the following restrictions:<p></p><p></p>1.The expressions contain no more than 100 symbols;<p></p>2.The brackets enclose no more than 1 operator with his two operands. However, every one of these operands can be an expression in brackets;<p></p>3.The constants in the expressions have no sign, i.e. there are no negative numbers in expressions;<p></p>4.The maximum number of question marks in the expressions (the lost operators) is less or equal to 10.<p></p><p></p>The calculation should be performed using the following rules:<p></p>1. The operators * and / are of higher priority than the operators + and -. Parentheses may change the priorities as usually;<p></p>2. The operators +, -, *, and / are left associative, meaning that they group from left to right. If a, b and c are numbers:<p></p>a*b*c = (a*b)*c, a/b/c = (a/b)/c, a/b*c = (a/b)*c, a+b+c = (a+b)+c, a-b+c = (a-b)+c, etc.<p></p>3. When dividing two integers, you should ignore the decimal fraction, for example consider the following equations:  2/5=0,  9/5=1, 100/6=16.<p></p>", "input_description": "The first line of the input file contains an integer N ? determining the number of equations. Next 2*N lines contain the equations. One equation is defined in two lines. The first line is the expression, defining the left side of the equation; second line is an integer result, defining the right side of the equation. The input lines do not have blanks. The strings representing expressions are guaranteed to have no syntax errors. ", "output_description": "For every equation in the input file, write yes or no on separate lines on the standard output. If the expression can give the result, write yes. Otherwise, if the result cannot be achieved, write no. ", "samples": "[{\"input\": \"3\\n1?((2*(3*4))+(5+6))\\n35\\n1?2*3+4-14\\n0\\n1?3*4/5*6+12\\n11\\n\", \"output\": \"yes\\nno\\nno\\n\"}]", "test_case_id": "1266", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 37, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1270, "fields": {"title": "WHO  is  the chairman\uff1f", "description": "There is a ACM association in school. Mike is a freshman and he want to know who is the chairman. But the answers from the other members are not consistent with each other. At this time ,marry, a friend of Mike then come to tell him that not all members are telling the truth. When he asked M members, there are N of the M answers are dishonest. Suppose that marry tell the truth and she is not in the M members, can you solve the problem of Mike.<p></p>Now we know that when Mike asked M members, there are N people who are dishonest and M-N people who are honest. When one is dishonest, there are 4 possibilities -- he may only tell a lie, or he may only tell nonsense or both tell lie and nonsense or just be silent. When someone is honest , there are also 4 possibilities: only telling the truth; telling nonsense; both tell truth and nonsense; be silent (but never lie). <p></p>The possible dialog are as follows(the sentences not belong to the table are all nonsense):<p></p><p></p>The dialog of the members <p></p>I am chairman.<p></p>I am not chairman.<p></p>XXX is chairman.<p></p>XXX is not chairman.<p></p><p></p>XXX is a name.<p></p>", "input_description": "The input consists of several lines. The first line of the input contains three integer, M\uff081\u2264M\u226420\uff09, representing the number of the people Mike asked; N\uff081\u2264N\u2264M\uff09,representing the number of people who are dishonest and P\uff081\u2264P\u2264100\uff09, representing the times of the talking; \n    In the next M line each representing the name of the members Mike asked which is composed by capital English letter without space.\n    And in the next P lines, each begins with a name of the members, and followed with a colon and a space, and then connected with a sentence with no more than 250 characters which is like the sentences in the table.\nThere is no space in the beginning and the end of each line.\nThe input will be end by a integer 0.\n", "output_description": "Print a name if you can judge who is the chairman. Print \u201cwhy\u201d(without quotation marks) if there is more than one person who could be the chairman. Print \u201cno\u201d (without quotation marks) if there is no one that can be the chairman.", "samples": "[{\"input\": \"3 1 5\\nA\\nB\\nC\\nA: I am chairman.\\nA: What is your name.\\nB: A is chairman.\\nC: I am chairman.\\nC: Aha hehe.\\n\", \"output\": \"A\"}]", "test_case_id": "1270", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 15, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1271, "fields": {"title": "Vase collection", "description": "Mr Cheng is a collector of old Chinese porcelain, more specifically late 15th century Feng dynasty vases. The art of vase-making at this time followed very strict artistic rules. There was a limited number of accepted styles, each defined by its shape and decoration. More specifically, there were 36 vase shapes and 36 different patterns of decoration ? in all 1296 different styles. For a collector, the obvious goal is to own a sample of each of the 1296 styles. Mr Cheng however, like so many other collectors, could never afford a complete collection, and instead concentrates on some shapes and some decorations. As symmetry between shape and decoration was one of the main aestheathical paradigms of the Feng dynasty, Mr Cheng wants to have a full collection of all combinations of k shapes and k decorations, for as large a k as possible. However, he has discovered that determining this k for a given collection is not always trivial. This means that his collection might actually be better than he thinks. Can you help him?", "input_description": "On the first line of the input, there is a single positive integer n, telling the number of test scenarios to follow. Each test scenario begins with a line containing a single positive integer m < = 100 , the number of vases in the collection. Then follow m lines, one per vase, each with a pair of numbers, si and di, separated by a single space, where si ( 0 < i < = 36 s ) indicates the shape of Mr Cheng's i:th vase, and di ( 0 <&#61472;i < =&#61472;36 d ) indicates its decoration.", "output_description": "For each test scenario, output one line containing the maximum k, such that there are k shapes and k decorations for which Mr Cheng's collection contains all k*k combined styles.", "samples": "[{\"input\": \"2\\n5\\n11 13\\n23 5\\n17 36\\n11 5\\n23 13\\n2\\n23 15\\n15 23\\n\", \"output\": \"2\\n1\\n\"}]", "test_case_id": "1271", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 14, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1273, "fields": {"title": "Lord of the Ring", "description": "Frodo must accomplish a noble and difficult mission, he must destroy a magic and wicked ring. In this quest, he must travel to a dangerous place called Modor and throw the ring into a crevice of fire. He has left home for some time and is currently following a straight and quite long road that has bushes from place to place. Being very tired Frodo thinks he would better have some rest. The only safe place along the road is a bush the position of which can be computed using a magic formula that uses the value P that is the product of the distances between pairs of adjacent bushes along the road. Unfortunately what Frodo knows are only the distances between every pair of bushes along the road and the magic formula, but he doesn&#039;t know the value of P. Can you help him in this respect? ", "input_description": "The program input is from a std input. Each data set in the input for a particular set of distances between pairs of bushes on the road Frodo is traveling along. Each data set starts with the number of distances followed by the distances in nondecreasing order. White spaces can occur freely in the input. \nIt is known that there are at least two bushes and at most 1000 bushes along the road. Moreover, the value of P cannot exceed 10^9.", "output_description": "For each set of data the program computes the value of P to the standard output from the beginning of a separate line. If P cannot be computed from the data set the output is \"No solution\".", "samples": "[{\"input\": \"6\\n1 2  2   3  3 5\\n\\n3\\n1 2 2 \\n\", \"output\": \"4\\nNo solution\\n\"}]", "test_case_id": "1273", "hint": "The second data does not accept a solution.The bush positions along the road cannot be deduced from the data and therefore the distances between adjacent points cannot be computed.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 2, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1274, "fields": {"title": "Play Game", "description": "In the two-player game &quot;Two Ends&quot;, an even number of cards is laid out in a row. On each card, face up, is written a positive integer. Players take turns removing a card from either end of the row and placing the card in their pile. The player whose cards add up to the highest number wins the game. Now one strategy is to simply pick the card at the end that is the largest -- we&#039;ll call this the greedy strategy. However, this is not always optimal, as the following example shows: (The first player would win if she would first pick the 3 instead of the 4.) <p></p>3 2 10 4 <p></p>You are to determine exactly how bad the greedy strategy is for different games when the second player uses it but the first player is free to use any strategy she wishes.<p></p>", "input_description": "There will be multiple test cases. Each test case will be contained on one line. Each line will start with an even integer n followed by n positive integers. A value of n = 0 indicates end of input. You may assume that n is no more than 1000. Furthermore, you may assume that the sum of the numbers in the list does not exceed 1,000,000.", "output_description": "For each test case you should print one line of output of the form: \nIn game m, the greedy strategy might lose by as many as p points. \nwhere m is the number of the game (starting at game 1) and p is the maximum possible difference between the first player's score and second player's score when the second player uses the greedy strategy. When employing the greedy strategy, always take the larger end. If there is a tie, remove the left end.\n", "samples": "[{\"input\": \"4 3 2 10 4\\n8 1 2 3 4 5 6 7 8\\n8 2 2 1 5 3 8 7 3\\n0\\n\", \"output\": \"In game 1, the greedy strategy might lose by as many as 7 points.\\nIn game 2, the greedy strategy might lose by as many as 4 points.\\nIn game 3, the greedy strategy might lose by as many as 5 points.\\n\"}]", "test_case_id": "1274", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 152, "total_accepted_number": 75, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1276, "fields": {"title": "Unreliable Message", "description": "The King of a little Kingdom on a little island in the Pacific Ocean frequently has childish ideas. One day he said, &quot;You shall make use of a message relaying game when you inform me of something.&quot; In response to the King&#039;s statement, six servants were selected as messengers whose names were Mr. J, Miss C, Mr. E, Mr. A, Dr. P, and Mr. M. They had to relay a message to the next messenger until the message got to the King. <p></p>Messages addressed to the King consist of digits (&#039;0&#039;-&#039;9&#039;) and alphabet characters (&#039;a&#039;-&#039;z&#039;, &#039;A&#039;-&#039;Z&#039;). Capital and small letters are distinguished in messages. For example, &quot;ke3E9Aa&quot; is a message. <p></p><p></p>Contrary to King&#039;s expectations, he always received wrong messages, because each messenger changed messages a bit before passing them to the next messenger. Since it irritated the King, he told you who are the Minister of the Science and Technology Agency of the Kingdom, &quot;We don&#039;t want such a wrong message any more. You shall develop software to correct it!&quot; In response to the King&#039;s new statement, you analyzed the messengers&#039; mistakes with all technologies in the Kingdom, and acquired the following features of mistakes of each messenger. A surprising point was that each messenger made the same mistake whenever relaying a message. The following facts were observed. <p></p><p></p>Mr. J rotates all characters of the message to the left by one. For example, he transforms &quot;aB23d&quot; to &quot;B23da&quot;. <p></p><p></p>Miss C rotates all characters of the message to the right by one. For example, she transforms &quot;aB23d&quot; to &quot;daB23&quot;. <p></p><p></p>Mr. E swaps the left half of the message with the right half. If the message has an odd number of characters, the middle one does not move. For example, he transforms &quot;e3ac&quot; to &quot;ace3&quot;, and &quot;aB23d&quot; to &quot;3d2aB&quot;. <p></p><p></p>Mr. A reverses the message. For example, he transforms &quot;aB23d&quot; to &quot;d32Ba&quot;. <p></p><p></p>Dr. P increments by one all the digits in the message. If a digit is &#039;9&#039;, it becomes &#039;0&#039;. The alphabet characters do not change. For example, he transforms &quot;aB23d&quot; to &quot;aB34d&quot;, and &quot;e9ac&quot; to &quot;e0ac&quot;. <p></p><p></p>Mr. M decrements by one all the digits in the message. If a digit is &#039;0&#039;, it becomes &#039;9&#039;. The alphabet characters do not change. For example, he transforms &quot;aB23d&quot; to &quot;aB12d&quot;, and &quot;e0ac&quot; to &quot;e9ac&quot;. <p></p><p></p>The software you must develop is to infer the original message from the final message, given the order of the messengers. For example, if the order of the messengers is A-&gt;J-&gt;M-&gt;P and the message given to the King is &quot;aB23d&quot;, what is the original message? According to the features of the messengers&#039; mistakes, the sequence leading to the final message is &quot;32Bad&quot;-&gt;&quot;daB23&quot;-&gt;&quot;aB23d&quot;-&gt;&quot;aB12d&quot;-&gt;&quot;aB23d&quot;: As a result, the original message should be &quot;32Bad&quot;. <p></p>", "input_description": "The input format is as follows. \n\nn \nThe order of messengers \nThe message given to the King \n... \nThe order of messengers \nThe message given to the King \n\nThe first line of the input contains a positive integer n, which denotes the number of data sets. Each data set is a pair of the order of messengers and the message given to the King. The number of messengers relaying a message is between 1 and 6 inclusive. The same person may not appear more than once in the order of messengers. The length of a message is between 1 and 25 inclusive. \n\n", "output_description": "The inferred messages are printed each on a separate line.\n", "samples": "[{\"input\": \"5\\nAJMP\\naB23d\\nE\\n86AE\\nAM\\n6\\nJPEM\\nWaEaETC302Q\\nCP\\nrTurnAGundam1isdefferentf\\n\", \"output\": \"32Bad\\nAE86\\n7\\nEC302QTWaEa\\nTurnAGundam0isdefferentfr\\n\\n\"}]", "test_case_id": "1276", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 30000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 236, "total_accepted_number": 132, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1277, "fields": {"title": "Family Tree", "description": "A professor of anthropology was interested in people living in isolated islands and their history. He collected their family trees to conduct some anthropological experiment. For the experiment, he needed to process the family trees with a computer. For that purpose he translated them into text files. The following is an example of a text file representing a family tree.<p></p><p></p>John<p></p> Robert<p></p>  Frank<p></p>  Andrew<p></p> Nancy<p></p>  David<p></p><p></p>Each line contains the given name of a person. The name in the first line is the oldest ancestor in this family tree. The family tree contains only the descendants of the oldest ancestor. Their husbands and wives are not shown in the family tree. The children of a person are indented with one more space than the parent. For example, Robert and Nancy are the children of John, and Frank and Andrew are the children of Robert. David is indented with one more space than Robert, but he is not a child of Robert, but of Nancy. To represent a family tree in this way, the professor excluded some people from the family trees so that no one had both parents in a family tree.<p></p><p></p>For the experiment, the professor also collected documents of the families and extracted the set of statements about relations of two persons in each family tree. The following are some examples of statements about the family above.<p></p><p></p>John is the parent of Robert.<p></p>Robert is a sibling of Nancy.<p></p>David is a descendant of Robert.<p></p><p></p>For the experiment, he needs to check whether each statement is true or not. For example, the first two statements above are true and the last statement is false. Since this task is tedious, he would like to check it by a computer program.<p></p>", "input_description": "The input contains several data sets. Each data set consists of a family tree and a set of statements. The first line of each data set contains two integers n (0 < n < 1000) and m (0 < m < 1000) which represent the number of names in the family tree and the number of statements, respectively. Each line of the input has less than 70 characters.\n\nAs a name, we consider any character string consisting of only alphabetic characters. The names in a family tree have less than 20 characters. The name in the first line of the family tree has no leading spaces. The other names in the family tree are indented with at least one space, i.e., they are descendants of the person in the first line. You can assume that if a name in the family tree is indented with k spaces, the name in the next line is indented with at most k + 1 spaces.\n\nThis guarantees that each person except the oldest ancestor has his or her parent in the family tree. No name appears twice in the same family tree. Each line of the family tree contains no redundant spaces at the end.\n\nEach statement occupies one line and is written in one of the following formats, where X and Y are different names in the family tree.\n\nX is a child of Y.\nX is the parent of Y.\nX is a sibling of Y.\nX is a descendant of Y.\nX is an ancestor of Y.\n\nNames not appearing in the family tree are never used in the statements. Consecutive words in a statement are separated by a single space. Each statement contains no redundant spaces at the beginning and at the end of the line.\n\nThe end of the input is indicated by two zeros.\n", "output_description": "For each statement in a data set, your program should output one line containing True or False.\n\nThe first letter of True or False in the output must be a capital. The output for each data set should be followed by an empty line.\n", "samples": "[{\"input\": \"6 5\\nJohn\\n Robert\\n  Frank\\n  Andrew\\n Nancy\\n  David\\nRobert is a child of John.\\nRobert is an ancestor of Andrew.\\nRobert is a sibling of Nancy.\\nNancy is the parent of Frank.\\nJohn is a descendant of Andrew.\\n2 1\\nabc\\n xyz\\nxyz is a child of abc.\\n0 0\\n\", \"output\": \"True\\nTrue\\nTrue\\nFalse\\nFalse\\n\\nTrue\\n\"}]", "test_case_id": "1277", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 88, "total_accepted_number": 45, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1278, "fields": {"title": "Conservative  Teacher", "description": "Frank N. Stein is a very conservative high-school teacher. He wants to take some of his students on an excursion, but he is afraid that some of them might become couples. While you can never exclude this possibility, he has made some rules that he thinks indicates a low probability two persons will become a couple: <p></p>&#8226;\tTheir height differs by more than 40 cm. <p></p>&#8226;\tThey are of the same sex. <p></p>&#8226;\tTheir preferred music style is different. <p></p>&#8226;\tTheir favourite sport is the same (they are likely to be fans of different teams and that would result in fighting). <p></p><p></p>So, for any two persons that he brings on the excursion, they must satisfy at least one of the requirements above. Help him find the maximum number of persons he can take, given their vital information. <p></p>", "input_description": "The first line of the input consists of an integer T \u2264 100 giving the number of test cases. The first line of each test case consists of an integer N \u2264 500 giving the number of pupils. Next there will be one line for each pupil consisting of four space-separated data items: \n&#8226;\tan integer h giving the height in cm; \n&#8226;\ta character 'F' for female or 'M' for male; \n&#8226;\ta string describing the preferred music style; \n&#8226;\ta string with the name of the favourite sport. \n\nNo string in the input will contain more than 100 characters, nor will any string contain any whitespace.\n", "output_description": "For each test case in the input there should be one line with an integer giving the maximum number of eligible pupils. ", "samples": "[{\"input\": \"2\\n4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\\n8\\n27 M romance programming\\n194 F baroque programming\\n67 M baroque ping-pong\\n51 M classicism programming\\n80 M classicism Paintball\\n35 M baroque ping-pong\\n39 F romance ping-pong\\n110 M romance Paintball\\n\", \"output\": \"3\\n7\\n\"}]", "test_case_id": "1278", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 70, "total_accepted_number": 45, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1279, "fields": {"title": "Test Commuunication", "description": "An earthquake takes place in Southeast Asia. The ACM (Asia Cooperated Medical team) have set up a wireless network with the lap computers, but an unexpected aftershock attacked, all computers in the network were all broken. The computers are repaired one by one, and the network gradually began to work again. Because of the hardware restricts, each computer can only directly communicate with the computers that are not farther than d meters from it. But every computer can be regarded as the intermediary of the communication between two other computers, that is to say computer A and computer B can communicate if computer A and computer B can communicate directly or there is a computer C that can communicate with both A and B. <p></p><p></p>In the process of repairing the network, workers can take two kinds of operations at every moment, repairing a computer, or testing if two computers can communicate. Your job is to answer all the testing operations. <p></p>", "input_description": "The first line contains two integers N and d (1 <= N <= 1001, 0 <= d <= 20000). Here N is the number of computers, which are numbered from 1 to N, and D is the maximum distance two computers can communicate directly. In the next N lines, each contains two integers xi, yi (0 <= xi, yi <= 10000), which is the coordinate of N computers. From the (N+1)-th line to the end of input, there are operations, which are carried out one by one. Each line contains an operation in one of following two formats: \n1. \"O p\" (1 <= p <= N), which means repairing computer p. \n2. \"S p q\" (1 <= p, q <= N), which means testing whether computer p and q can communicate. \n\nThe input will not exceed 300000 lines. \n", "output_description": "For each Testing operation, print \"SUCCESS\" if the two computers can communicate, or \"FAIL\" if not.", "samples": "[{\"input\": \"4 1\\n0 1\\n0 2\\n0 3\\n0 4\\nO 1\\nO 2\\nO 4\\nS 1 4\\nO 3\\nS 1 4\\n\", \"output\": \"FAIL\\nSUCCESS\\n\"}]", "test_case_id": "1279", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 95, "total_accepted_number": 37, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1280, "fields": {"title": "The room assignment", "description": "Tom is the manager of a hotel. Today a delegacy came and they want Tom to assign the room for them. Since all the rooms in the hotel are different and each member of the delegacy had his own willing to live in certain rooms alone. To satisfy all the members, Tom collected the data on which member are willing to live in which rooms. Then we know that each room can live only one person, and of course, a person may be only assigned to one room. Since the data is too complex and Tom want to satisfy as more person as possible. Can you help him?", "input_description": "The input includes several cases. For each case, the first line contains two integers, N (0 <= N <= 200) and M (0 <= M <= 200). N is the number of members in the delegacy and M is the number of rooms in the hotel. Each of the following N lines corresponds to a single cow. The first integer (Si) on the line is the number of rooms that the member is willing to live in (0 <= Si <= M). The subsequent Si integers on that line are the rooms in which that member is willing to live. The room numbers will be integers in the range (1..M), and no room will be listed twice for a given person.", "output_description": "For each case, output a single line with a single integer, the maximum number of perfect room assignments that can satisfy as more person as possible.", "samples": "[{\"input\": \"5 5\\n2 2 5\\n3 2 3 4\\n2 1 5\\n3 1 2 5\\n1 2 \\n\", \"output\": \"4\"}]", "test_case_id": "1280", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 43, "total_accepted_number": 25, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1281, "fields": {"title": "Count the  Pieces", "description": "Little Joey invented a scrabble machine that he called Euler, after the great mathematician. In his primary school Joey heard about the nice story of how Euler started the study about graphs. The problem in that story was - let me remind you - to draw a graph on a paper without lifting your pen, and finally return to the original position. Euler proved that you could do this if and only if the (planar) graph you created has the following two properties: (1) The graph is connected; and (2) Every vertex in the graph has even degree. <p></p><p></p>Joey&#039;s Euler machine works exactly like this. The device consists of a pencil touching the paper, and a control center issuing a sequence of instructions. The paper can be viewed as the infinite two-dimensional plane; that means you do not need to worry about if the pencil will ever go off the boundary. <p></p><p></p>In the beginning, the Euler machine will issue an instruction of the form (X0, Y0) which moves the pencil to some starting position (X0, Y0). Each subsequent instruction is also of the form (X&#039;, Y&#039;), which means to move the pencil from the previous position to the new position (X&#039;, Y&#039;), thus draw a line segment on the paper. You can be sure that the new position is different from the previous position for each instruction. At last, the Euler machine will always issue an instruction that move the pencil back to the starting position (X0, Y0). In addition, the Euler machine will definitely not draw any lines that overlay other lines already drawn. However, the lines may intersect. <p></p><p></p>After all the instructions are issued, there will be a nice picture on Joey&#039;s paper. You see, since the pencil is never lifted from the paper, the picture can be viewed as an Euler circuit. <p></p><p></p>Your job is to count how many pieces (connected areas) are created on the paper by those lines drawn by Euler.<p></p>", "input_description": "There are no more than 25 test cases. Ease case starts with a line containing an integer N >= 4, which is the number of instructions in the test case. The following N pairs of integers give the instructions and appear on a single line separated by single spaces. The first pair is the first instruction that gives the coordinates of the starting position. You may assume there are no more than 300 instructions in each test case, and all the integer coordinates are in the range (-300, 300). The input is terminated when N is 0. ", "output_description": "For each test case there will be one output line in the format \n\nCase x: There are w pieces., \n\nwhere x is the serial number starting from 1. \n\nNote: The figures below illustrate the two sample input cases. \n<img src=uploadFiles\\1280.jpg>\n", "samples": "[{\"input\": \"5\\n0 0 0 1 1 1 1 0 0 0\\n7\\n1 1 1 5 2 1 2 5 5 1 3 5 1 1\\n0\\n\", \"output\": \"Case 1: There are 2 pieces.\\nCase 2: There are 5 pieces.\\n\"}]", "test_case_id": "1281", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 51, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1282, "fields": {"title": "The Game of Master-Mind", "description": "If you want to buy a new cellular phone, there are many various types to choose from. To decide which one is the best for you, you have to consider several important things: its size and weight, battery capacity, WAP support, colour, price. One of the most important things is also the list of games the phone provides. Nokia is one of the most successful phone makers because of its famous Snake and Snake II. ACM wants to make and sell its own phone and they need to program several games for it. One of them is Master-Mind, the famous board logical game. <p></p>The game is played between two players. One of them chooses a secret code consisting of P ordered pins, each of them having one of the predefined set of C colours. The goal of the second player is to guess that secret sequence of colours. Some colours may not appear in the code, some colours may appear more than once. <p></p>The player makes guesses, which are formed in the same way as the secret code. After each guess, he/she is provided with an information on how successful the guess was. This feedback is called a hint. Each hint consists of B black points and W white points. The black point stands for every pin that was guessed right, i.e. the right colour was put on the right position. The white point means right colour but on the wrong position. For example, if the secret code is &quot;white, yellow, red, blue, white&quot; and the guess was &quot;white, red, white, white, blue&quot;, the hint would consist of one black point (for the white on the first position) and three white points (for the other white, red and blue colours). The goal is to guess the sequence with the minimal number of hints. <p></p>The new ACM phone should have the possibility to play both roles. It can make the secret code and give hints, but it can also make its own guesses. Your goal is to write a program for the latter case, that means a program that makes Master-Mind guesses. <p></p>", "input_description": "There is a single positive integer T on the first line of input. It stands for the number of test cases to follow. Each test case describes one game situation and you are to make a guess. On the first line of each test case, there are three integer numbers, P, C and M. P ( 1 <= P <= 10) is the number of pins, C (1 <= C <= 100) is the number of colours, and M (1 <= M <= 100) is the number of already played guesses. \nThen there are 2 x M lines, two lines for every guess. At the first line of each guess, there are P integer numbers representing colours of the guess. Each colour is represented by a number Gi, 1 <= Gi <= C. The second line contains two integer numbers, B and W, stating for the number of black and white points given by the corresponding hint. \nLet's have a secret code S1, S2, ... SP and the guess G1, G2, ... GP. Then we can make a set H containing pairs of numbers (I,J) such that SI = GJ, and that any number can appear at most once on the first position and at most once on the second position. That means for every two different pairs from that set, (I1,J1) and (I2,J2), we have I1 <> I2 and J1 <> J2. Then we denote B(H) the number of pairs in the set, that meet the condition I = J, and W(H) the number of pairs with I <> J. \nWe define an ordering of every two possible sets H1 and H2. Let's say H1 <= H2 if and only if one of the following holds: \n&#8226;\tB(H1) < B(H2), or \n&#8226;\tB(H1) = B(H2) and W(H1) <= W(H2)\nThen we can find a maximal set Hmax according to this ordering. The numbers B(Hmax) and W(Hmax) are the black and white points for that hint. \n", "output_description": "For every test case, print the line containing P numbers representing P colours of the next guess. Your guess must be valid according to all previous guesses and hints. The guess is valid if the sequence could be a secret code, i.e. the sequence was not eliminated by previous guesses and hints. \nIf there is no valid guess possible, output the sentence You are cheating!. If there are more valid guesses, output the one that is lexicographically smallest. I.e. find such guess G that for every other valid guess V there exists such a number I that: \n&#8226;\tGJ = VJ for every J<I, and \n&#8226;\tGI<VI. \n", "samples": "[{\"input\": \"3\\n4 3 2\\n1 2 3 2\\n1 1\\n2 1 3 2\\n1 1\\n4 6 2\\n3 3 3 3\\n3 0\\n4 4 4 4\\n2 0\\n8 9 3\\n1 2 3 4 5 6 7 8\\n0 0\\n2 3 4 5 6 7 8 9\\n1 0\\n3 4 5 6 7 8 9 9\\n2 0\\n\", \"output\": \"1 1 1 3\\nYou are cheating!\\n9 9 9 9 9 9 9 9\\n\"}]", "test_case_id": "1282", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 19, "total_accepted_number": 10, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1284, "fields": {"title": "Hotline", "description": "Every customer sometimes needs help with new and unusual products. Therefore, hotline service is very important for every company. We need a single phone number where the customer can always find a friendly voice ready to help with anything. On the other hand, many people are needed to serve as hotline operators, and human resources are always very expensive. Moreover, it is not easy to pretend &quot;friendly voice&quot; at 4am and explain to a drunken man that you are really unable to give him the number to House of Parliament. It was also found that some of the questions repeat very often and it is very annoying to answer them again and again. <p></p>ACM is a modern company, wanting to solve its hotline problem. They want to decrease the number of human operators by creating a complex software system that would be able to answer most common questions. The customer&#039;s voice is analysed by a special Voice Recognition Module (VRM) and converted to a plain text. The text is then taken by an Artificial Automatic Adaptive Answering Algorithm (AAAAA). The most common questions are recognised and answered automatically. The replies are then converted to a sound by Text-to-Speech Module (TTS). <p></p>You are to write the AAAAA module. Because your algorithm should be adaptive, it has no explicit knowledge base. But it must be able to listen to sentences in English and remember the mentioned facts. Whenever the question is asked about such a fact, the system has to answer it properly. The VRM and TTS modules are already implemented, so the input and output of AAAAA will be in the text form.<p></p>", "input_description": "There is a single positive integer T on the first line of input. It stands for the number of dialogues to follow. Each dialogue consists of zero or more lines, each of them containing one sentence: either statement or question. The statement ends with a dot character (.), the question ends with a question mark (?). No statement will appear more than once, however the questions can be repeated. There is one extra line after each dialogue. That line ends with an exclamation mark (!). \nSentences can contain words, spaces and punctuation characters (such as commas, colons, semicolons etc.). All words contain only letters of English alphabet and are case-sensitive. That means the same word is always written the same way, usually in lowercase. Acronyms, names and some other words can begin with capital letters. For simplicity, all sentences begin with a lowercase letter. Only if the first word should be written with a capital, the sentence begins with a capital letter. There are no unneeded spaces between words. No line will have more than 100 characters. There will be at most 100 statements per each test case. \nStatements\nEach statement has one of the following two forms (  denotes a space): \nsubject  predicate[s] [  object] . \nsubject  don't|doesn't  predicate [  object] . \nThe square brackets mark an optional part, the vertical line two possible variants. Subject is a single word, noun or pronoun in singular. Predicate is a verb (single word) denoting some activity. Object can be any text. Object does not contain any dots. Any pair \"verb + object\" determines unique activity. The same verb with different objects makes different independent activities, i.e. the different and independent meaning of the sentence. Sentence without any object can be considered as sentence with an empty object. The verb without an object has different and independent meaning than the same verb with any non-empty object. \nThe first variant of sentence denotes a positive statement. The word \"predicate[s]\" means verb that matches the subject of the sentence. If the subject is \"I\" or \"you\", the verb has the same form as the infinitive. With any other subject, the letter \"s\" is appended on the end of the verb. Assume there are no irregular verbs. \nThe second variant is a negative statement. Verb \"don't\" or \"doesn't\" must also match the subject. The form \"don't\" is used with either \"I\" or \"you\", \"doesn't\" is used in any other case. \nA special generic subject \"everybody\" can be used. It means the activity holds for any subject. Other special subject is \"nobody\". Such sentence also holds for any subject, but its meaning is negative. Both of these generic subjects can be used with the first variant only (without \"doesn't\"). The sentence \"nobody likes something\" is exactly equal to \"everybody doesn't like something\", except the latter form will never occur in the input. \nQuestions\nEach question has one of the following three forms: \n1. \ndo|does  subject  predicate [  object] ? \n2. \nwho  predicates [  object] ? \n3. \nwhat  do|does  subject do ? \nThe word \"do|does\" always matches the subject (\"do I?\", \"do you?\", \"does any other subject?\"). In the second type of question, predicate always matches the word \"who\", i.e. the \"s\" is always appended. Generic subjects cannot be used in questions.\n", "output_description": "For each dialogue, your program must output the line Dialogue #D:, where D is the sequence number of dialogue, starting with 1. Then print exactly three lines for every question: the first line repeats the question, the second line contains the answer, and the third line is empty. Print nothing for statements. After each dialogue, print the same line with an exclamation mark that was in the input. Then print one extra empty line. Empty line contains a new-line character only. \nThe answer must be properly formated to be accepted by a TTS module. Only the statements appearing in the input before the answer are used for the corresponding reply. If there is any contradiction among statements, the reply is always I am abroad.. If the question and statements consider the special subject \"you\", it must be replaced with \"I\" in the answer. If the question considers special subject \"I\", it must be replaced with \"you\" in the answer. The verb must always match the subject of the sentence. The exact form of the correct answer depends on the type of question. \n1. does subject predicate [object] ?\nIf there is any positive statement about the mentioned subject (or generic subject \"everybody\"), predicate and object, the answer is: \nyes,  subject  predicate[s] [  object] . \nIf there is any negative statement about the mentioned subject (or generic subject \"nobody\"), predicate and object, the answer is: \nno,  subject  don't|doesn't  predicate [  object] . \nOtherwise, the answer is: maybe. \nSubject in the answer is always the same subject as the subject of the question. \n2. who predicates [object] ?\nIf there is a positive statement considering any subject, the specified predicate and object, the answer is: \nsubject  predicate[s] [  object] . \nIf two or more subjects match the activity, replace the subject in the answer with enumeration of all such subjects, in the same order as the corresponding statements have appeared in the input. Subjects are separated with comma and space, last two subjects are separated with the word \"and\". If \"everybody\" belongs to the group of enumerated subjects, do not enumerate subjects, and print \"everybody\" only. If the enumeration contains at least two subjects, the predicate matches the plural subject (i.e. verb is without trailing \"s\"), otherwise it matches the only subject. \nsubject1 ,  subject2  and  subject3 predicate [  object] . \nIf there is a negative statement considering the generic subject \"nobody\", the specified predicate and object, the answer is: \nnobody  predicates [  object] . \nOtherwise, the answer is: I don't know. \n3. what does subject do ?\nIf there are one or more sentences (both positive and negative) considering the specified subject (or a generic subject \"everybody\" or \"nobody\"), all verbs and objects from such sentences must be included in a reply in the same order as the corresponding sentences have appeared in the input. No verb-object pair can be included more than once (the eventual second appearance must be skipped). The verb-object pairs are separated by a comma followed by a space, the last verb is separated by a comma and the word \"and\". Please note the comma is printed here although there was no comma when separating the subjects in the previous type of answer (see above). The negative answers have the same form as the statements, that means the verb \"don't\" or \"doesn't\" is used: \nsubject [  don't|doesn't]  predicate1[s] [  object1] , \n[  don't|doesn't]  predicate2[s] [  object2] , \n and [  don't|doesn't]  predicate3[s] [  object3] . \nsubject [  don't|doesn't]  predicate1[s] [  object1] , \n and [  don't|doesn't]  predicate2[s] [  object2] . \nsubject [  don't|doesn't]  predicate[s] [  object] . \nOtherwise, the answer is: I don't know. \n", "samples": "[{\"input\": \"1\\nI like hotdogs.\\nnobody likes to work.\\neverybody smiles.\\nwhat do I do?\\nwho smiles?\\nwhat do you do?\\ndoes Joe smile?\\ndo I like to work?\\neverybody hurts sometimes.\\nwho walks there?\\nMichal walks there.\\nwho walks there?\\nwhat does Michal do?\\ndo you understand?\\nnobody walks there.\\ndo you understand now?\\nbye!\\n\", \"output\": \"Dialogue #1:\\nwhat do I do?\\nyou like hotdogs, don$(quat)t like to work, and smile.\\n\\nwho smiles?\\neverybody smiles.\\n\\nwhat do you do?\\nI don$(quat)t like to work, and smile.\\n\\ndoes Joe smile?\\nyes, Joe smiles.\\n\\ndo I like to work?\\nno, you don$(quat)t like to work.\\n\\nwho walks there?\\nI don$(quat)t know.\\n\\nwho walks there?\\nMichal walks there.\\n\\nwhat does Michal do?\\nMichal doesn$(quat)t like to work, smiles, hurts sometimes, and walks there.\\n\\ndo you understand?\\nmaybe.\\n\\ndo you understand now?\\nI am abroad.\\n\\nbye!\\n\\n\"}]", "test_case_id": "1284", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 29, "total_accepted_number": 14, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1285, "fields": {"title": "Dining room", "description": "In our dining room, there are several tables each can only arrange one customer. Suppose that your company own several dining room like this. Research has shown that if a customer arrives and there is no table available, the customer will turn around and leave, thus costing the company a sale. Your task is to write a program that tells the company how many customers left without having dinner. ", "input_description": "The input consists of data for one or more dining room, followed by a line containing the number 0 that signals the end of the input. Data for each dining room is a single line containing a positive integer, representing the number of table in the dining room, followed by a space, followed by a sequence of uppercase letters. Letters in the sequence occur in pairs. The first occurrence indicates the arrival of a customer, the second indicates the departure of that same customer. No letter will occur in more than one pair. Customers who leave without having dinner always depart before customers who are currently eating. There are at most 20 tables per dining room.", "output_description": "For each dining room, output a sentence telling how many customers, if any, walked away. Use the exact format shown below. ", "samples": "[{\"input\": \"2 ABBAJJKZKZ\\n3 GACCBDDBAGEE\\n3 GACCBGDDBAEE\\n1 ABCBCA\\n0\\n\", \"output\": \"All customers consumed successfully.\\n1 customer(s) walked away.\\nAll customers consumed successfully.\\n2 customer(s) walked away.\\n\"}]", "test_case_id": "1285", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 128, "total_accepted_number": 76, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1288, "fields": {"title": "The Minimum Number", "description": "Often, we see results of gallups, like this: <p></p><p></p>Prefer red: 3.5% <p></p>Prefer green: 4.5% <p></p>Prefer yellow: 22.0% <p></p>Prefer blue: 70.0% <p></p><p></p>and you begin to wonder: how many people did they really ask? If the numbers are simple, like 20%, 40%, and 40%, you know that they asked 5 people (or 10, or 15, or more, but we are interested in the minimum number of people). <p></p><p></p>Your task is to write a program that reads sets of percentages and calculates the smallest number of people that could produce the given percentages. We know that this number is always less than 10 000.<p></p>", "input_description": "The input is a set of percentages. Each set is on a line of its own. Every line starts with an integer n (0 \u2264 n \u2264 20) giving the number of percentages in the set. If n > 0, the percentages follow as n numbers; these numbers may have 0?5 decimals, and all percentages in a set have the same number of decimals. (If there are no decimals, there is no decimal point.) The percentages always add up to about 100% as there may be small rounding errors. Numbers are rounded when digits are removed; they are rounded upwards if the first removed digit is 5 or more. Thus, 4.472 is rounded to 4.47, 4.5, or 4, depending on how many digits you want.", "output_description": "For each set of data, print a line starting with \u201cCase i :\u201d, where \u201ci\u201d is the data set\u2019s number. Then follows a space and an integer giving the computed number of people. If no legal answer in the range 1?9999 exists, print \u201cerror\u201d instead of the number.", "samples": "[{\"input\": \"3 20 40 40\\n3 33.3 33.3 33.3\\n2 33 67\\n1 100.0000\\n4 3.75 4.25 22.00 70.00\\n2 49 51\\n2 50 51\\n2 49 50\\n0\\n\", \"output\": \"Case 1: 5\\nCase 2: 3\\nCase 3: 3\\nCase 4: 1\\nCase 5: 400\\nCase 6: 35\\nCase 7: 200\\nCase 8: error\\n\"}]", "test_case_id": "1288", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 3, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1289, "fields": {"title": "Slot Machines", "description": "Bill has found the perfect way to make money playing the slot machines. After months of careful research, he has finally figured out the mechanics behind how the machines operate. Now he is ready to make profit of his findings. <p></p><p></p>But first an introduction to the game. A slot machine consists of a number of wheels, usually three or four, each with a number of symbols printed on it ? cherries, oranges, bells, etc. ? and will show one of its symbols at a given time. To play, you insert a coin, push a button and the wheels start spinning. After spinning for a while, each wheel stops ? at random it seems ? at one of its symbols. If all wheels stop at the same symbol, or some nice combination of symbols, the player wins. One combination that is especially desirable is having the jackpot symbol on all wheels. This combination is simply called \u2019jackpot\u2019 and will make you rich for life. <p></p><p></p>What Bill has discovered is that each wheel will stop at the jackpot symbol with a certain periodicity, which differs a lot between wheels. He has also figured out (after some sneeking around at the slot-machine factory) that all newly manufactured slot-machines are delivered showing the jackpot combination, and that they all have a counter at the back, telling how many times the machine has been played. This counter is always set to zero at delivery. <p></p><p></p>Now, all Bill needs to do is to calculate the number of times a machine has to be played between two occurrences of the jackpot combination. We will call this number the jackpot periodicity. This is of course the same as the number of times the machine has to be played after leaving the factory, before it gives its first jackpot. Thus, with a glance at the counter on the back of a machine, Bill can figure out if it is about to give a jackpot. <p></p><p></p>As Bill knows that you are a skillful computer programmer, he turns to you with the problem of calculating the jackpot periodicity. For each machine, he will give you the number of wheels, and the periodicity with which the jackpot symbol shows up on each wheel.<p></p>", "input_description": "One line with the number of machines n \u2264 20. For each machine, one line with the number of wheels w \u2264 5, and one line with w numbers, p1, ..., pw the periodicity of each wheel pk \u2264 1000.", "output_description": "One line per machine: The jackpot periodicity of the machine, if it is less than or equal to a billion (109), otherwise output the text \u2019More than a billion.\u2019.", "samples": "[{\"input\": \"1\\n3\\n10 6 15\", \"output\": \"30\"}]", "test_case_id": "1289", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 229, "total_accepted_number": 46, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1290, "fields": {"title": "Climb Up or Down", "description": "Staying fit is important for every super hero, and Spiderman is no exception. Every day he undertakes a climbing exercise in which he climbs a certain distance, rests for a minute, then climbs again, rests again, and so on. The exercise is described by a sequence of distances d1, d2, . . . , dm telling how many meters he is to climb before the first first break, before the second break, and so on. Froman exercise perspective it does not really matter if he climbs up or down at the i:th climbing stage, but it is practical to sometimes climb up and sometimes climb down so that he both starts and finishes at street level. Obviously, he can never be below street level. Also, he would like to use as low a building as possible (he does not like to admit it, but he is actually afraid of heights). The building must be at least 2 meters higher than the highest point his feet reach during the workout. <p></p><p></p>He wants your help in determining when he should go up and when he should go down. The answer must be legal: it must start and end at street level (0 meters above ground) and it may never go below street level. Among the legal solutions he wants one that minimizes the required building height. When looking for a solution, you may not reorder the distances. <p></p><p></p>If the distances are 20 20 20 20 he can either climb up, up, down, down or up, down, up, down. Both are legal, but the second one is better (in fact optimal) because it only requires a building of height 22, whereas the first one requires a building of height 42. If the distances are 3 2 5 3 1 2, an optimal legal solution is to go up, up, down, up, down, down. Note that for some distance sequences there is no legal solution at all (e.g., for 3 4 2 1 6 4 5). <p></p>", "input_description": "The first line of the input contains an integer N giving the number of test scenarios. The following 2N lines specify the test scenarios, two lines per scenario: the first line gives a positive integer M \u2264 40 which is the number of distances, and the following line contains the M positive integer distances. For any scenario, the total distance climbed (the sum of the distances in that scenario) is at most 1000.", "output_description": "For each input scenario a single line should be output. This line should either be the string \"IMPOSSIBLE\" if no legal solution exists, or it should be a string of length M containing only the characters \"U\" and \"D\", where the i:th character indicates if Spiderman should climb up or down at the i:th stage. If there are several different legal and optimal solutions, output one of them (it does not matter which one as long as it is optimal).", "samples": "[{\"input\": \"3\\n4\\n20 20 20 20\\n6\\n3 2 5 3 1 2\\n7\\n3 4 2 1 6 4 5\", \"output\": \"UDUD\\nUUDUDD\\nIMPOSSIBLE\\n\"}]", "test_case_id": "1290", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 5, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1291, "fields": {"title": "Birthday Party", "description": "kcm1700, ntopia, suby, classic, tkwons, and their friends are having a birthday party for kcm1700. Of course, there is a very large birthday cake. They divide the birthday cake into undistinguishable pieces and put them on identical plates. kcm1700 is curious, so he wants to know how many ways there are to put m cake pieces on n plates.", "input_description": "In the only input line, there are two integers n, m (1 \u2264 n, m \u2264 4 500), which are the number of the plates and the number of the cake pieces respectively.", "output_description": "If the number of ways is K, just output K mod 1000000007 because K can be very large.", "samples": "[{\"input\": \"3 7\", \"output\": \"8\"}]", "test_case_id": "1291", "hint": "There are 8 ways to fill 3 plates with 7 cakes, namely (0,0,7), (0,1,6), (0,2,5), (0,3,4), (1,1,5), (1,2,4), (1,3,3), (2,2,3).", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 110, "total_accepted_number": 34, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1292, "fields": {"title": "Inspired!", "description": "ou are the boss of a small lighting fixture company which has n employees. Inspired by Ben Stiller\u2019s character in Starsky and Hutch, you have recently taken on the habit of telling your employees to \u201cdo it!\u201d when you want things done. While n+ of the n employees respond positively to your \u201cdo it!\u201ds, n&#8722; employees respond negatively and n0 are neutral to your words.<p></p>At time 0, each of your employees begins working alone on building a lighting fixture. Each lighting fixture takes 100 units of labor to finish. Normally, each of your employees contributes r units of labor towards finishing his/her lighting fixture during each time interval (or the amount of labor units remaining for the fixture, whichever is smaller). Thus, an employee would normally take ceiling(100 &#8260; r) time intervals to finish his or her lighting fixture. During an interval, however, if you yell \u201cdo it!\u201d over the company intercom, employees who respond positively to your command will do r + 2 units of labor during that time interval, whereas employees who respond negatively will do r &#8722; 1 units of labor during the time interval.<p></p>Assuming that each employee works on only his or her lighting fixture, and assuming that you yell \u201cdo it!\u201d at most once during each time interval, your goal is to plan a sequence of \u201cdo it!\u201ds so as to ensure that the sum of the times needed to finish all n lighting fixtures is minimized.<p></p>", "input_description": "The input test file will contain multiple test cases. Each input test case will be given as a line containing four integers, n+, n&#8722;, n0, and r (where 0 \u2264 n+, n&#8722;, n0 \u2264 1000 and 1 \u2264 r \u2264 100). The end-of-file is marked by a test case with n+ = n&#8722; = n0 = r = 0 and should not be processed.", "output_description": "For each input case, the program should print the minimum sum of times needed to finish all n lighting fixtures.", "samples": "[{\"input\": \"3 1 1 2\\n1 3 0 2\\n0 0 0 0\\n\", \"output\": \"188\\n200\\n\"}]", "test_case_id": "1292", "hint": "In first test case, one optimal strategy is to yell \u201cdo it\u201d in each of the first 25 time intervals. As a result, the 3 positively-responding employees provide 4 units of labor per time interval and thus finish their fixtures in 25 time units. The 1 negatively-responding employee will provide 1 unit of labor per time interval for the first 25 time intervals, 2 units of labor per time interval afterwards, and thus will finish in 25 + 38 = 63 time units. Finally, the neutral employee will always provide 2 units of labor per time interval and hence will finish in 50 time units. This gives a total of 3(25) + 63 + 50 = 188 time units.\\nIn the second test case, an optimal strategy is to never yell \u201cdo it\u201d. Thus all four employees finish in 50 time units so the total amount of time taken is 200 time units.\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 50, "total_accepted_number": 15, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1293, "fields": {"title": "The k-th Largest Group", "description": "Newman likes playing with cats. He possesses lots of cats in his home. Because the number of cats is really huge, Newman wants to group some of the cats. To do that, he first offers a number to each of the cat (1, 2, 3, \u2026, n). Then he occasionally combines the group cat i is in and the group cat j is in, thus creating a new group. On top of that, Newman wants to know the size of the k-th biggest group at any time. So, being a friend of Newman, can you help him?", "input_description": "1st line: Two numbers N and M (1 \u2264 N, M \u2264 200,000), namely the number of cats and the number of operations.\n2nd to (m + 1)-th line: In each line, there is number C specifying the kind of operation Newman wants to do. If C = 0, then there are two numbers i and j (1 \u2264 i, j \u2264 n) following indicating Newman wants to combine the group containing the two cats (in case these two cats are in the same group, just do nothing); If C = 1, then there is only one number k (1 \u2264 k \u2264 the current number of groups) following indicating Newman wants to know the size of the k-th largest group.\n", "output_description": "For every operation \u201c1\u201d in the input, output one number per line, specifying the size of the kth largest group.", "samples": "[{\"input\": \"10 10\\n0 1 2\\n1 4\\n0 3 4\\n1 2\\n0 5 6\\n1 1\\n0 7 8\\n1 1\\n0 9 10\\n1 1\", \"output\": \"1\\n2\\n2\\n2\\n2\\n\"}]", "test_case_id": "1293", "hint": "When there are three numbers 2 and 2 and 1, the 2nd largest number is 2 and the 3rd largest number is 1.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 131072, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 110, "total_accepted_number": 41, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1294, "fields": {"title": "Additon of polynomial", "description": "   As a middle school student, Mike knows how to add f(x) and g(x) together.here f(x)and g(x) can be represented as follows:<p></p>   f(x)=p1*x^e1+p2*x^e2+p3*x^e3+...+pn*x^en<p></p>   g(x)=q1*x^h1+q2*x^h2+q3*x^h3+...+pm*x^hm<p></p>   But sometimes, the expression is so long and complicated, he cann&#039;t make sure whether the results of the addition is right or not. You are a college student, if you have studied computer language, can you write a program to check it. ", "input_description": "   The first line of input is a number n: the cases you will add. Each case includes two lines,the first line is consisted by p1,e1,p2,e2,... and the second line is consisted by q1,h1,q2,h2,...\u3002Here pi,ei,qi and hi are real numbers.\n", "output_description": "  Output n lines. Each line is the additon of the two lines input.The output should be in ascending power and each number in output should be printed with two digits after the decimal point. ", "samples": "[{\"input\": \"2\\n1.5 2.3 2.6 3.4\\n2.4 4.5 7.2 2.3 5.6 1.8\\n3.4 2.4 3.5 7.6 4.3 2.6 5.4 7.8\\n-3.4 2.4 -2.5 7.6 2.3 4.3 4.5 3.8\\n\", \"output\": \"5.60 1.80 8.70 2.30 2.60 3.40 2.40 4.50\\n4.30 2.60 4.50 3.80 2.30 4.30 1.00 7.60 5.40 7.80 \\n\\n\"}]", "test_case_id": "1294", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 456, "total_accepted_number": 68, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1295, "fields": {"title": "Simple Arithmetics", "description": "<p>One part of the new WAP portal is also a calculator computing expressions with very long numbers. To make the output look better, the result is formated the same way as is it usually used with manual calculations. </p><p></p><p></p><p>Your task is to write the core part of this calculator. Given two numbers and the requested operation, you are to compute the result and print it in the form specified below. With addition and subtraction, the numbers are written below each other. Multiplication is a little bit more complex: first of all, we make a partial result for every digit of one of the numbers, and then sum the results together. </p>", "input_description": "There is a single positive integer T on the first line of input. It stands for the number of expressions to follow. Each expression consists of a single line containing a positive integer number, an operator (one of +, - and *) and the second positive integer number. Every number has at most 500 digits. There are no spaces on the line. If the operation is subtraction, the second number is always lower than the first one. No number will begin with zero.", "output_description": "For each expression, print two lines with two given numbers, the second number below the first one, last digits (representing unities) must be aligned in the same column. Put the operator right in front of the first digit of the second number. After the second number, there must be a horizontal line made of dashes (-). \n\nFor each addition or subtraction, put the result right below the horizontal line, with last digit aligned to the last digit of both operands. \n\nFor each multiplication, multiply the first number by each digit of the second number. Put the partial results one below the other, starting with the product of the last digit of the second number. Each partial result should be aligned with the corresponding digit. That means the last digit of the partial product must be in the same column as the digit of the second number. No product may begin with any additional zeros. If a particular digit is zero, the product has exactly one digit -- zero. If the second number has more than one digit, print another horizontal line under the partial results, and then print the sum of them. \n\nThere must be minimal number of spaces on the beginning of lines, with respect to other constraints. The horizontal line is always as long as necessary to reach the left and right end of both numbers (and operators) right below and above it. That means it begins in the same column where the leftmost digit or operator of that two lines (one below and one above) is. It ends in the column where is the rightmost digit of that two numbers. The line can be neither longer nor shorter than specified. \n\nPrint one blank line after each test case, including the last one", "samples": "[{\"input\": \"4\\n12345+67890\\n324-111\\n325*4405\\n1234*4\\n\\n\", \"output\": \" 12345\\n+67890\\n------\\n 80235\\n\\n 324\\n-111\\n----\\n 213\\n\\n    325\\n  *4405\\n  -----\\n   1625\\n     0\\n 1300\\n1300\\n-------\\n1431625\\n\\n1234\\n  *4\\n----\\n4936\\n\"}]", "test_case_id": "1295", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-26T12:32:07.568Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 183, "total_accepted_number": 34, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 1296, "fields": {"title": "The Bulk", "description": "<p>ACM uses a new special technology of building its transceiver stations. This technology is called Modular Cuboid Architecture (MCA) and is covered by a patent of Lego company. All parts of the transceiver are shipped in unit blocks that have the form of cubes of exactly the same size. The cubes can be then connected to each other. The MCA is modular architecture, that means we can select preferred transceiver configuration and buy only those components we need. </p><p></p><p></p><p>The cubes must be always connected &quot;face-to-face&quot;, i.e. the whole side of one cube is connected to the whole side of another cube. One cube can be thus connected to at most six other units. The resulting equipment, consisting of unit cubes is called The Bulk in the communication technology slang. </p><p></p><p></p><p>Sometimes, an old and unneeded bulk is condemned, put into a storage place, and replaced with a new one. It was recently found that ACM has many of such old bulks that just occupy space and are no longer needed. The director has decided that all such bulks must be disassembled to single pieces to save some space. Unfortunately, there is no documentation for the old bulks and nobody knows the exact number of pieces that form them. You are to write a computer program that takes the bulk description and computes the number of unit cubes. </p><p></p><p></p><p>Each bulk is described by its faces (sides). A special X-ray based machine was constructed that is able to localise all faces of the bulk in the space, even the inner faces, because the bulk can be partially hollow (it can contain empty spaces inside). But any bulk must be connected (i.e. it cannot drop into two pieces) and composed of whole unit cubes. </p>", "input_description": "There is a single positive integer T on the first line of input. It stands for the number of bulks to follow. Each bulk description begins with a line containing single positive integer F, 6 <= F <= 250, stating the number of faces. Then there are F lines, each containing one face description. All faces of the bulk are always listed, in any order. Any face may be divided into several distinct parts and described like if it was more faces. Faces do not overlap. Every face has one inner side and one outer side. No side can be \"partially inner and partially outer\". \n\nEach face is described on a single line. The line begins with an integer number P stating the number of points that determine the face, 4 <= P <= 200. Then there are 3 x P numbers, coordinates of the points. Each point is described by three coordinates X,Y,Z (0 <= X,Y,Z <= 1000) separated by spaces. The points are separated from each other and from the number P by two space characters. These additional spaces were added to make the input more human readable. The face can be constructed by connecting the points in the specified order, plus connecting the last point with the first one. \n\nThe face is always composed of \"unit squares\", that means every edge runs either in X, Y or Z-axis direction. If we take any two neighbouring points X1,Y1,Z1 and X2,Y2,Z2, then the points will always differ in exactly one of the three coordinates. I.e. it is either X1 <> X2, or Y1 <> Y2, or Z1 <> Z2, other two coordinates are the same. Every face lies in an orthogonal plane, i.e. exactly one coordinate is always the same for all points of the face. The face outline will never touch nor cross itself.", "output_description": "Your program must print a single line for every test case. The line must contain the sentence The bulk is composed of V units., where V is the volume of the bulk.", "samples": "[{\"input\": \"2\\n12\\n4  10 10 10  10 10 20  10 20 20  10 20 10\\n4  20 10 10  20 10 20  20 20 20  20 20 10\\n4  10 10 10  10 10 20  20 10 20  20 10 10\\n4  10 20 10  10 20 20  20 20 20  20 20 10\\n4  10 10 10  10 20 10  20 20 10  20 10 10\\n5  10 10 20  10 20 20  20 20 20  20 15 20  20 10 20\\n4  14 14 14  14 14 16  14 16 16  14 16 14\\n4  16 14 14  16 14 16  16 16 16  16 16 14\\n4  14 14 14  14 14 16  16 14 16  16 14 14\\n4  14 16 14  14 16 16  16 16 16  16 16 14\\n4  14 14 14  14 16 14  16 16 14  16 14 14\\n4  14 14 16  14 16 16  16 16 16  16 14 16\\n12\\n4  20 20 30  20 30 30  30 30 30  30 20 30\\n4  10 10 10  10 40 10  40 40 10  40 10 10\\n6  10 10 20  20 10 20  20 30 20  30 30 20  30 40 20  10 40 20\\n6  20 10 20  20 20 20  30 20 20  30 40 20  40 40 20  40 10 20\\n4  10 10 10  40 10 10  40 10 20  10 10 20\\n4  10 40 10  40 40 10  40 40 20  10 40 20\\n4  20 20 20  30 20 20  30 20 30  20 20 30\\n4  20 30 20  30 30 20  30 30 30  20 30 30\\n4  10 10 10  10 40 10  10 40 20  10 10 20\\n4  40 10 10  40 40 10  40 40 20  40 10 20\\n4  20 20 20  20 30 20  20 30 30  20 20 30\\n4  30 20 20  30 30 20  30 30 30  30 20 30\\n\\n\", \"output\": \"The bulk is composed of 992 units.\\nThe bulk is composed of 10000 units.\\n\\n\"}]", "test_case_id": "1296", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-26T12:32:50.356Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 5, "total_accepted_number": 1, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 1298, "fields": {"title": "Direct Visibility", "description": "Building the GSM network is a very expensive and complex task. Moreover, after the Base Transceiver Stations (BTS) are built and working, we need to perform many various measurements to determine the state of the network, and propose effective improvements to be made. <p></p>The ACM technicians have a special equipment for measuring the strength of electro-magnetic fields, the transceivers&#039; power and quality of the signal. This equipment is packed into a huge knapsack and the technician must move with it from one BTS to another. Unfortunately, the knapsack have not enough memory for storing all of the measured values. It has a small cache only, that can store values for several seconds. Then the values must be transmitted to the BTS by an infrared connection (IRDA). The IRDA needs direct visibility between the technician and the BTS. <p></p>Your task is to find the path between two neighbouring BTSes such that at least one of those BTSes is always visible. <p></p>", "input_description": "There is a single positive integer T on the first line of input. It stands for the number of test cases to follow. Each test case consists of a town description. For simplicity, a town is modelled as a rectangular grid of P x Q square fields. Each field is exactly 1 metre wide. For each field, a non-negative integer Zi,j is given, representing the height of the terrain in that place, in metres. That means the town model is made of cubes, each of them being either solid or empty. There are no \"half solid\" cubes. \nThe first line of each test case contains two integer numbers P and Q, separated by a single space, 1 <= P,Q <= 200. Then there are P lines each containing Q integer numbers separated by a space. These numbers are Zi,j, where 1 <= i <= P, 1 <= j <= Q and 0 <= Zi,j <= 5000. After the terrain description, there are four numbers R1, C1, R2, C2 on the last line of each test case. These numbers represent position of two BTSes, 1 <= R1,R2 <= P, 1 <= C1,C2 <= Q. The first coordinate (R) determines the row of the town, the second coordinate determines the column. \nThe technician is moving in steps (steps stands for Standard Technician's Elementary Positional Shift). Each step is made between two neighbouring square fields. That means the step is always in North, South, West or East direction. It is not possible to move diagonally. The step between two fields A and B (step from A to B) is allowed only if the height of the terrain in the field B is not very different from the height in the field A. The technician can climb at most 1 metre up or descend at most 3 metres down in a single step. \nAt the end of each step, at least one of the two BTSes must be visible. However, there can be some point \"in the middle of the step\" where no BTS is visible. This is OK and the data is handled by the cache. The BTS is considered visible, if there is a direct visibility between the unit cube just above the terrain on the BTSes coordinates and the cube just above the terrain on the square field, where the technician is. Direct visibility between two cubes means that the line connecting the centres of the two cubes does not intersect any solid cube. However, the line can touch any number of solid cubes. In other words, consider both the BTS and the technician being points exactly half metre above the surface and in the centre of the appropriate square field. \nNote that the IRDA beam can go between two cubes that touch each other by their edge, although there is no space between them. It is because such a beam touches both of these two cubes but does not intersect any of them. See the last test case of the sample input for an example of such a situation. \n", "output_description": "You are to find the shortest possible path meeting the above criteria. All steps must be done between neighbouring fields, the terrain must not elevate or descend too much, and at the end of each step, at least one BTS must be visible. \nFor each test case, print one line containing the sentence The shortest path is M steps long., where M is the number of steps that must be made. If there is no such path, output the sentence Mission impossible!. \n", "samples": "[{\"input\": \"4\\n5 5\\n8 7 6 5 4\\n2 2 2 2 2\\n2 2 2 2 2\\n2 2 2 2 2\\n2 2 2 2 2\\n1 1 5 1\\n5 8\\n2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2\\n9 9 9 9 9 9 9 2\\n2 2 2 2 2 2 2 2\\n1 2 5 1\\n5 8\\n2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2\\n2 2 2 2 2 2 2 2\\n9 9 9 9 9 9 9 2\\n2 2 2 2 2 2 2 2\\n1 5 5 1\\n6 12\\n5 5 5 5 1 5 5 5 5 5 5 5\\n5 5 5 5 1 5 5 5 5 5 5 5\\n5 5 5 5 9 5 5 5 5 5 5 5\\n5 9 1 5 5 5 5 5 5 5 5 5\\n5 5 9 5 5 5 5 5 5 5 5 5\\n5 5 9 5 5 5 5 5 5 5 5 5\\n6 1 3 12\\n\", \"output\": \"The shortest path is 10 steps long.\\nMission impossible!\\nThe shortest path is 14 steps long.\\nThe shortest path is 18 steps long.\\n\"}]", "test_case_id": "1298", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 5, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1300, "fields": {"title": "Factorial", "description": "<p>The most important part of a GSM network is so called Base Transceiver Station (BTS). These transceivers form the areas called cells (this term gave the name to the cellular phone) and every phone connects to the BTS with the strongest signal (in a little simplified view). Of course, BTSes need some attention and technicians need to check their function periodically. </p><p></p><p>ACM technicians faced a very interesting problem recently. Given a set of BTSes to visit, they needed to find the shortest path to visit all of the given points and return back to the central company building. Programmers have spent several months studying this problem but with no results. They were unable to find the solution fast enough. After a long time, one of the programmers found this problem in a conference article. Unfortunately, he found that the problem is so called &quot;Travelling Salesman Problem&quot; and it is very hard to solve. If we have N BTSes to be visited, we can visit them in any order, giving us N! possibilities to examine. The function expressing that number is called factorial and can be computed as a product 1.2.3.4....N. The number is very high even for a relatively small N. </p><p></p><p>The programmers understood they had no chance to solve the problem. But because they have already received the research grant from the government, they needed to continue with their studies and produce at least some results. So they started to study behaviour of the factorial function. </p><p></p><p>For example, they defined the function Z. For any positive integer N, Z(N) is the number of zeros at the end of the decimal form of number N!. They noticed that this function never decreases. If we have two numbers N1&lt;N2, then Z(N1) &lt;= Z(N2). It is because we can never &quot;lose&quot; any trailing zero by multiplying by any positive number. We can only get new and new zeros. The function Z is very interesting, so we need a computer program that can determine its value efficiently. </p>", "input_description": "There is a single positive integer T on the first line of input. It stands for the number of numbers to follow. Then there is T lines, each containing exactly one positive integer number N, 1 <= N <= 1000000000.", "output_description": "For every number N, output a single line containing the single non-negative integer Z(N).", "samples": "[{\"input\": \"6\\n3\\n60\\n100\\n1024\\n23456\\n8735373\\n\", \"output\": \"0\\n14\\n24\\n253\\n5861\\n2183837\\n\"}]", "test_case_id": "1300", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-26T12:32:58.459Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 342, "total_accepted_number": 170, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 1301, "fields": {"title": "The Game of Master-Mind", "description": "If you want to buy a new cellular phone, there are many various types to choose from. To decide which one is the best for you, you have to consider several important things: its size and weight, battery capacity, WAP support, colour, price. One of the most important things is also the list of games the phone provides. Nokia is one of the most successful phone makers because of its famous Snake and Snake II. ACM wants to make and sell its own phone and they need to program several games for it. One of them is Master-Mind, the famous board logical game. <p></p>The game is played between two players. One of them chooses a secret code consisting of P ordered pins, each of them having one of the predefined set of C colours. The goal of the second player is to guess that secret sequence of colours. Some colours may not appear in the code, some colours may appear more than once. <p></p>The player makes guesses, which are formed in the same way as the secret code. After each guess, he/she is provided with an information on how successful the guess was. This feedback is called a hint. Each hint consists of B black points and W white points. The black point stands for every pin that was guessed right, i.e. the right colour was put on the right position. The white point means right colour but on the wrong position. For example, if the secret code is &quot;white, yellow, red, blue, white&quot; and the guess was &quot;white, red, white, white, blue&quot;, the hint would consist of one black point (for the white on the first position) and three white points (for the other white, red and blue colours). The goal is to guess the sequence with the minimal number of hints. <p></p>The new ACM phone should have the possibility to play both roles. It can make the secret code and give hints, but it can also make its own guesses. Your goal is to write a program for the latter case, that means a program that makes Master-Mind guesses. <p></p>", "input_description": "There is a single positive integer T on the first line of input. It stands for the number of test cases to follow. Each test case describes one game situation and you are to make a guess. On the first line of each test case, there are three integer numbers, P, C and M. P ( 1 <= P <= 10) is the number of pins, C (1 <= C <= 100) is the number of colours, and M (1 <= M <= 100) is the number of already played guesses. \nThen there are 2 x M lines, two lines for every guess. At the first line of each guess, there are P integer numbers representing colours of the guess. Each colour is represented by a number Gi, 1 <= Gi <= C. The second line contains two integer numbers, B and W, stating for the number of black and white points given by the corresponding hint. \nLet's have a secret code S1, S2, ... SP and the guess G1, G2, ... GP. Then we can make a set H containing pairs of numbers (I,J) such that SI = GJ, and that any number can appear at most once on the first position and at most once on the second position. That means for every two different pairs from that set, (I1,J1) and (I2,J2), we have I1 <> I2 and J1 <> J2. Then we denote B(H) the number of pairs in the set, that meet the condition I = J, and W(H) the number of pairs with I <> J. \nWe define an ordering of every two possible sets H1 and H2. Let's say H1 <= H2 if and only if one of the following holds: \n&#8226;\tB(H1) < B(H2), or \n&#8226;\tB(H1) = B(H2) and W(H1) <= W(H2)\nThen we can find a maximal set Hmax according to this ordering. The numbers B(Hmax) and W(Hmax) are the black and white points for that hint. \n", "output_description": "For every test case, print the line containing P numbers representing P colours of the next guess. Your guess must be valid according to all previous guesses and hints. The guess is valid if the sequence could be a secret code, i.e. the sequence was not eliminated by previous guesses and hints. \nIf there is no valid guess possible, output the sentence You are cheating!. If there are more valid guesses, output the one that is lexicographically smallest. I.e. find such guess G that for every other valid guess V there exists such a number I that: \n&#8226;\tGJ = VJ for every J<I, and \n&#8226;\tGI<VI. \n", "samples": "[{\"input\": \"3\\n4 3 2\\n1 2 3 2\\n1 1\\n2 1 3 2\\n1 1\\n4 6 2\\n3 3 3 3\\n3 0\\n4 4 4 4\\n2 0\\n8 9 3\\n1 2 3 4 5 6 7 8\\n0 0\\n2 3 4 5 6 7 8 9\\n1 0\\n3 4 5 6 7 8 9 9\\n2 0\\n\", \"output\": \"1 1 1 3\\nYou are cheating!\\n9 9 9 9 9 9 9 9\\n\"}]", "test_case_id": "1301", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 7, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1302, "fields": {"title": "Hotline", "description": "Every customer sometimes needs help with new and unusual products. Therefore, hotline service is very important for every company. We need a single phone number where the customer can always find a friendly voice ready to help with anything. On the other hand, many people are needed to serve as hotline operators, and human resources are always very expensive. Moreover, it is not easy to pretend &quot;friendly voice&quot; at 4am and explain to a drunken man that you are really unable to give him the number to House of Parliament. It was also found that some of the questions repeat very often and it is very annoying to answer them again and again. <p></p>ACM is a modern company, wanting to solve its hotline problem. They want to decrease the number of human operators by creating a complex software system that would be able to answer most common questions. The customer&#039;s voice is analysed by a special Voice Recognition Module (VRM) and converted to a plain text. The text is then taken by an Artificial Automatic Adaptive Answering Algorithm (AAAAA). The most common questions are recognised and answered automatically. The replies are then converted to a sound by Text-to-Speech Module (TTS). <p></p>You are to write the AAAAA module. Because your algorithm should be adaptive, it has no explicit knowledge base. But it must be able to listen to sentences in English and remember the mentioned facts. Whenever the question is asked about such a fact, the system has to answer it properly. The VRM and TTS modules are already implemented, so the input and output of AAAAA will be in the text form. <p></p>", "input_description": "There is a single positive integer T on the first line of input. It stands for the number of dialogues to follow. Each dialogue consists of zero or more lines, each of them containing one sentence: either statement or question. The statement ends with a dot character (.), the question ends with a question mark (?). No statement will appear more than once, however the questions can be repeated. There is one extra line after each dialogue. That line ends with an exclamation mark (!). \nSentences can contain words, spaces and punctuation characters (such as commas, colons, semicolons etc.). All words contain only letters of English alphabet and are case-sensitive. That means the same word is always written the same way, usually in lowercase. Acronyms, names and some other words can begin with capital letters. For simplicity, all sentences begin with a lowercase letter. Only if the first word should be written with a capital, the sentence begins with a capital letter. There are no unneeded spaces between words. No line will have more than 100 characters. There will be at most 100 statements per each test case. \nStatements\nEach statement has one of the following two forms (  denotes a space): \nsubject  predicate[s] [  object] . \nsubject  don't|doesn't  predicate [  object] . \nThe square brackets mark an optional part, the vertical line two possible variants. Subject is a single word, noun or pronoun in singular. Predicate is a verb (single word) denoting some activity. Object can be any text. Object does not contain any dots. Any pair \"verb + object\" determines unique activity. The same verb with different objects makes different independent activities, i.e. the different and independent meaning of the sentence. Sentence without any object can be considered as sentence with an empty object. The verb without an object has different and independent meaning than the same verb with any non-empty object. \nThe first variant of sentence denotes a positive statement. The word \"predicate[s]\" means verb that matches the subject of the sentence. If the subject is \"I\" or \"you\", the verb has the same form as the infinitive. With any other subject, the letter \"s\" is appended on the end of the verb. Assume there are no irregular verbs. \nThe second variant is a negative statement. Verb \"don't\" or \"doesn't\" must also match the subject. The form \"don't\" is used with either \"I\" or \"you\", \"doesn't\" is used in any other case. \nA special generic subject \"everybody\" can be used. It means the activity holds for any subject. Other special subject is \"nobody\". Such sentence also holds for any subject, but its meaning is negative. Both of these generic subjects can be used with the first variant only (without \"doesn't\"). The sentence \"nobody likes something\" is exactly equal to \"everybody doesn't like something\", except the latter form will never occur in the input. \nQuestions\nEach question has one of the following three forms: \n1. \ndo|does  subject  predicate [  object] ? \n2. \nwho  predicates [  object] ? \n3. \nwhat  do|does  subject do ? \nThe word \"do|does\" always matches the subject (\"do I?\", \"do you?\", \"does any other subject?\"). In the second type of question, predicate always matches the word \"who\", i.e. the \"s\" is always appended. Generic subjects cannot be used in questions. \n", "output_description": "For each dialogue, your program must output the line Dialogue #D:, where D is the sequence number of dialogue, starting with 1. Then print exactly three lines for every question: the first line repeats the question, the second line contains the answer, and the third line is empty. Print nothing for statements. After each dialogue, print the same line with an exclamation mark that was in the input. Then print one extra empty line. Empty line contains a new-line character only. \nThe answer must be properly formated to be accepted by a TTS module. Only the statements appearing in the input before the answer are used for the corresponding reply. If there is any contradiction among statements, the reply is always I am abroad.. If the question and statements consider the special subject \"you\", it must be replaced with \"I\" in the answer. If the question considers special subject \"I\", it must be replaced with \"you\" in the answer. The verb must always match the subject of the sentence. The exact form of the correct answer depends on the type of question. \n1. does subject predicate [object] ?\nIf there is any positive statement about the mentioned subject (or generic subject \"everybody\"), predicate and object, the answer is: \nyes,  subject  predicate[s] [  object] . \nIf there is any negative statement about the mentioned subject (or generic subject \"nobody\"), predicate and object, the answer is: \nno,  subject  don't|doesn't  predicate [  object] . \nOtherwise, the answer is: maybe. \nSubject in the answer is always the same subject as the subject of the question. \n2. who predicates [object] ?\nIf there is a positive statement considering any subject, the specified predicate and object, the answer is: \nsubject  predicate[s] [  object] . \nIf two or more subjects match the activity, replace the subject in the answer with enumeration of all such subjects, in the same order as the corresponding statements have appeared in the input. Subjects are separated with comma and space, last two subjects are separated with the word \"and\". If \"everybody\" belongs to the group of enumerated subjects, do not enumerate subjects, and print \"everybody\" only. If the enumeration contains at least two subjects, the predicate matches the plural subject (i.e. verb is without trailing \"s\"), otherwise it matches the only subject. \nsubject1 ,  subject2  and  subject3 predicate [  object] . \nIf there is a negative statement considering the generic subject \"nobody\", the specified predicate and object, the answer is: \nnobody  predicates [  object] . \nOtherwise, the answer is: I don't know. \n3. what does subject do ?\nIf there are one or more sentences (both positive and negative) considering the specified subject (or a generic subject \"everybody\" or \"nobody\"), all verbs and objects from such sentences must be included in a reply in the same order as the corresponding sentences have appeared in the input. No verb-object pair can be included more than once (the eventual second appearance must be skipped). The verb-object pairs are separated by a comma followed by a space, the last verb is separated by a comma and the word \"and\". Please note the comma is printed here although there was no comma when separating the subjects in the previous type of answer (see above). The negative answers have the same form as the statements, that means the verb \"don't\" or \"doesn't\" is used: \nsubject [  don't|doesn't]  predicate1[s] [  object1] , \n[  don't|doesn't]  predicate2[s] [  object2] , \n and [  don't|doesn't]  predicate3[s] [  object3] . \nsubject [  don't|doesn't]  predicate1[s] [  object1] , \n and [  don't|doesn't]  predicate2[s] [  object2] . \nsubject [  don't|doesn't]  predicate[s] [  object] . \nOtherwise, the answer is: I don't know. \n\n", "samples": "[{\"input\": \"1\\nI like hotdogs.\\nnobody likes to work.\\neverybody smiles.\\nwhat do I do?\\nwho smiles?\\nwhat do you do?\\ndoes Joe smile?\\ndo I like to work?\\neverybody hurts sometimes.\\nwho walks there?\\nMichal walks there.\\nwho walks there?\\nwhat does Michal do?\\ndo you understand?\\nnobody walks there.\\ndo you understand now?\\nbye!\\n\", \"output\": \"Dialogue #1:\\nwhat do I do?\\nyou like hotdogs, don$(quat)t like to work, and smile.\\n\\nwho smiles?\\neverybody smiles.\\n\\nwhat do you do?\\nI don$(quat)t like to work, and smile.\\n\\ndoes Joe smile?\\nyes, Joe smiles.\\n\\ndo I like to work?\\nno, you don$(quat)t like to work.\\n\\nwho walks there?\\nI don$(quat)t know.\\n\\nwho walks there?\\nMichal walks there.\\n\\nwhat does Michal do?\\nMichal doesn$(quat)t like to work, smiles, hurts sometimes, and walks there.\\n\\ndo you understand?\\nmaybe.\\n\\ndo you understand now?\\nI am abroad.\\n\\nbye!\\n\"}]", "test_case_id": "1302", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 9, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1305, "fields": {"title": "King", "description": "Once, in one kingdom, there was a queen and that queen was expecting a baby. The queen prayed: ``If my child was a son and if only he was a sound king.&#039;&#039; After nine months her child was born, and indeed, she gave birth to a nice son. <p></p>Unfortunately, as it used to happen in royal families, the son was a little retarded. After many years of study he was able just to add integer numbers and to compare whether the result is greater or less than a given integer number. In addition, the numbers had to be written in a sequence and he was able to sum just continuous subsequences of the sequence. <p></p><p></p>The old king was very unhappy of his son. But he was ready to make everything to enable his son to govern the kingdom after his death. With regards to his son&#039;s skills he decided that every problem the king had to decide about had to be presented in a form of a finite sequence of integer numbers and the decision about it would be done by stating an integer constraint (i.e. an upper or lower limit) for the sum of that sequence. In this way there was at least some hope that his son would be able to make some decisions. <p></p><p></p>After the old king died, the young king began to reign. But very soon, a lot of people became very unsatisfied with his decisions and decided to dethrone him. They tried to do it by proving that his decisions were wrong. <p></p><p></p>Therefore some conspirators presented to the young king a set of problems that he had to decide about. The set of problems was in the form of subsequences Si = {aSi, aSi+1, ..., aSi+ni} of a sequence S = {a1, a2, ..., an}. The king thought a minute and then decided, i.e. he set for the sum aSi + aSi+1 + ... + aSi+ni of each subsequence Si an integer constraint ki (i.e. aSi + aSi+1 + ... + aSi+ni &lt; ki or aSi + aSi+1 + ... + aSi+ni &gt; ki resp.) and declared these constraints as his decisions. <p></p><p></p>After a while he realized that some of his decisions were wrong. He could not revoke the declared constraints but trying to save himself he decided to fake the sequence that he was given. He ordered to his advisors to find such a sequence S that would satisfy the constraints he set. Help the advisors of the king and write a program that decides whether such a sequence exists or not. <p></p><p></p>", "input_description": "The input consists of blocks of lines. Each block except the last corresponds to one set of problems and king's decisions about them. In the first line of the block there are integers n, and m where 0 < n <= 100 is length of the sequence S and 0 < m <= 100 is the number of subsequences Si. Next m lines contain particular decisions coded in the form of quadruples si, ni, oi, ki, where oi represents operator > (coded as gt) or operator < (coded as lt) respectively. The symbols si, ni and ki have the meaning described above. The last block consists of just one line containing 0. ", "output_description": "The output contains the lines corresponding to the blocks in the input. A line contains text successful conspiracy when such a sequence does not exist. Otherwise it contains text lamentable kingdom. There is no line in the output corresponding to the last ``null'' block of the input. \n", "samples": "[{\"input\": \"4 2\\n1 2 gt 0\\n2 2 lt 2\\n1 2\\n1 0 gt 0\\n1 0 lt 0\\n0\\n\\n\", \"output\": \"lamentable kingdom\\nsuccessful conspiracy\\n\\n \\n\"}]", "test_case_id": "1305", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 11, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1307, "fields": {"title": "Word", "description": "<p>Dr. R. E. Wright&#039;s class was studying modified L-Systems. Let us explain necessary details. As a model let us have words of length n over a two letter alphabet {a, b}. The words are cyclic, this means we can write one word in any of n forms we receive by cyclic shift, whereby the first and the last letters in the word are considered to be neighbours. </p><p></p><p>Rewriting rules rewrite a letter at a position i, depending on letters at the positions i - 2, i, i+1. We rewrite all letters of the word in one step. When we have a given starting word and a set of rewriting rules a natural question is: how does the word look after s rewriting steps? </p><p></p><p></p><p>Help Dr. R. E. Wright and write a program which solves this task. </p>", "input_description": "There are several blocks in the input, each describing one system. There is an integer number n, 2 < n < 16 the length of the input word in the first line. There is a word in the next line. The word contains only lowercase letters a and b. There are four characters c1 c2 c3 c4 in the next eight lines. Each quadruple represents one rewriting rule with the following meaning: when the letter at the position i - 2 is c1 and the letter at the position i is c2 and the letter at the position i + 1 is c3 then the letter at the position i after rewriting will be c4. Rewriting rules are correct and complete. There is an integer number s, 0 <= s <= 2000000000, in the last line of the block.", "output_description": "There is one line corresponding to each block of the input. The line contains a word which we receive after s rewriting steps from the corresponding starting word using given rewriting rules. As we mentioned above, the word can be written in any of n cyclic shifted forms. The output file contains the lexicographically smallest word, assuming that a < b.", "samples": "[{\"input\": \"5\\naaaaa\\naaab\\naabb\\nabab\\nabbb\\nbaab\\nbabb\\nbbab\\nbbbb\\n1\\n\", \"output\": \"bbbbb\\n\"}]", "test_case_id": "1307", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-26T12:33:07.021Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 6, "total_accepted_number": 0, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 1308, "fields": {"title": "Time", "description": "Let a time point be given as 6 integers y, m, d, h, min, s where 1970 &lt; y &lt; 2030, 0 &lt; m &lt; 13, 0 &lt; d &lt; 32, 0 &lt;= h &lt; 24, 0 &lt;= min &lt; 60, 0 &lt;= s &lt; 60. Write a program which computes how many periods of a given length fit between two given time points. A period is given by a pair consisting of a positive integer and a word expressing a time unit, i.e. year or month or day or hour or minute or second. Every 4th year is a leap year, except every 100th which is not except every 400 year which is. A length of the year varies according to leap years. The same is true for the month February. Time units always start as usual, e.g., a year starts at 1st January, a month starts at its 1st day, a day starts at 0 hours 0 minutes 0 seconds, etc. A period ends after its last second. <p></p>", "input_description": "The input consists of blocks of lines. Each block has three lines. The first line of a block contains a time point D1 and the second line a time point D2. D1 always precedes D2. All numbers in the lines are separated by one space. You can assume that the given descriptions of time points are correct. The third line contains a time period. There is one space between the number and the word in the period definition on this line. After each block, there is one empty line.", "output_description": "The output contains the lines corresponding to the blocks in the input. A line corresponding to a block contains one integer number expressing how many specified periods are contained between the given time points.", "samples": "[{\"input\": \"1997 12 31 23 59 59\\n1998 1 1 0 0 0\\n1 second\\n\\n2000 2 29 0 0 0\\n2000 2 29 23 59 59\\n1 day\\n\\n2000 2 29 0 0 0\\n2000 3 1 0 0 0\\n24 hour\\n\\n1996 12 31 20 30 0\\n1997 1 1 7 30 0\\n60 minute\\n\\n1996 12 31 20 30 0\\n1997 1 1 7 30 0\\n1 hour\\n\\n\\n\", \"output\": \"1\\n0\\n1\\n11\\n10\\n\"}]", "test_case_id": "1308", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-26T12:33:13.459Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 25, "total_accepted_number": 18, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 1309, "fields": {"title": "Puzzle", "description": "Little Barborka has just started to learn how to solve a picture puzzle. She has started with a small one containing 15 pieces. Her daddy tries to solve the puzzle too. To make it a little bit harder for himself, he has turned all puzzle pieces upside down so that he cannot see pictures on the pieces. Now he is looking for a solution of the puzzle. Normally the solution should exist but he is not sure whether Barborka has not replaced some pieces of the puzzle by pieces of another similar puzzle. Help him and write a program which reads a description of a set of puzzle pieces and decides whether it is possible to assembly the pieces into a rectangle with given side lengths or not. <p></p>", "input_description": "The input consists of blocks of lines. Each block except the last describes one puzzle problem. In the first line of the block there are integers n and m, 0 < n, m <= 6 separated by one space. The integers n, m indicate the number of rows and columns in the puzzle respectively. The description of individual puzzle pieces is in the following n * m lines of the block. Each piece is a rectangle 3 centimeters wide and 4 centimeters high with possible juts or cavities in the middle of its sides. For each side of a puzzle piece just one of the following possibilities is true (see picture): \n\nthere is no jut or cavity on the side, i.e., the side is flat - such sides can be used only on edges of the final picture when assembling the puzzle, \n\nthere is one jut in the middle of the side, \n\nthere is one cavity in the middle of the side. \n<img src=uploadFiles\\1309.jpg>\nAs is usual, two pieces can be placed side by side only if one has a jut and the other has a cavity on corresponding sides. We will denote the flat sides by F, the sides with juts by O and the sides with cavities by I. Each piece is described by four letters characterizing its top, right, bottom, and left side. To make the task easier the pieces can be used only as they are described i.e. they cannot be turned. \n\nAfter each block there is an empty line. The last block consists of just one line containing 0 0, i.e. two zeros separated by one space. \n\n\n", "output_description": "The output contains the lines corresponding to the blocks in the input. A line contains YES if the corresponding block in the input describes a puzzle that can be correctly assembled. Otherwise it contains NO. There is no line in the output corresponding to the last ``null'' block of the input. \n", "samples": "[{\"input\": \"3 5\\nFOOF\\nFOOI\\nFOOI\\nFOOI\\nFFOI\\nIOOF\\nIOOI\\nIOOI\\nIOOI\\nIFOI\\nIOFF\\nIOFI\\nIOFI\\nIOFI\\nIFFI\\n0 0\\n\", \"output\": \"YES\\n\"}]", "test_case_id": "1309", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 5, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1310, "fields": {"title": "Append", "description": "Consider the following encoding scheme used in one famous compresion algorithm. Suppose we will code only sequences of lower case letters. Each such sequence of characters can be encoded to a sequence of pairs (pi, ri), where pi &gt;= 0 is an integer and ri is either a character (if pi = 0) or an integer greater than zero and less or equal than pi (if pi &gt; 0). <p></p>We describe now the decoding procedure for our encoding scheme. Let (p1, r1), (p2, r2), be a code of a sequence. We get the sequence as follows: we take successively individual pairs of the code. If pi = 0 then ri is a character and we simply add ri to the end of already decoded sequence. If pi &gt; 0 then ri is an integer, 0 &lt; ri &lt;= pi, and we add to already decoded sequence ri letters from this sequence starting at the position pi places before the end. <p></p><p></p>For example, consider the sequence of pairs (0 a), (1, 1), (0, b), (3, 3), (3, 3), (3, 2), (0, c). Decoding (0, a) we get a. Decoding (1, 1) we get aa. (0, b) adds b getting aab. (3, 3) will add aab, so now we have aabaab. Next pair (3, 3) will again add aab so we have aabaabaab. (3, 2) will add aa, so our sequence is aabaabaabaa and (0, c) adds c. So the decoded sequence is aabaabaabaac. Note that in general for a given w it can exist more such sequences of pairs. <p></p><p></p>Let u, v be some sequences. By uv we will understand the sequence created by appending of the sequence v to the end of sequence u. Let Cw be a sequence of pairs which encodes a sequence of lowercase letters w. Suppose we have given a sequence of pairs Cw. The question is how many possibilities does exist for expressing the sequence Cw in the form CuCv where u, v are sequences satisfying the equation w = uv and neither u nor v is empty. Write a program that will answer this question. <p></p>", "input_description": "The input consists of blocks of lines. Each block describes one sequence of pairs Cw to some w in such a way that the i-th line of the block contains either two integers pi, ri, (ri <= pi < 1000) separated by one space or 0 followed by one space and one character. Each block ends with one empty line.", "output_description": "The output contains the lines corresponding to the blocks in the input. Each line contains the number of possibilities of representation of the sequence Cw in the form Cu Cv where u, v are sequences satisfying the equation w = uv and neither u nor v is empty.", "samples": "[{\"input\": \"0 a\\n1 1\\n0 b\\n3 3\\n3 3\\n3 2\\n0 c\\n\", \"output\": \"1\\n\"}]", "test_case_id": "1310", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-26T12:33:18.727Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 2, "total_accepted_number": 1, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 1311, "fields": {"title": "Gossiping", "description": "There was a public bus transport in one town. All buses had circular lines. Each line had at least two stops. Some lines had some stops in common. When two or more bus drivers met on some stop they announced each other all news they knew, so that after leaving the stop they all knew the same news. All drivers started driving their buses at the same time and at this time each driver knew some news that was not known to any other driver. Each bus ran all the time along a fixed bus line. Different buses running along the same bus line started possibly on different stops of the bus line at the beginning. <p></p>The operation of buses was highly synchronized. The time necessary to get from one stop to next stop was equal for all stops and all lines. <p></p><p></p>There were n lines ( 0 &lt; n &lt; 20), d drivers (and also d buses) ( 0 &lt; d &lt; 30) numbered by integers from 1 to d, and s bus stops ( 0 &lt; s &lt; 50) numbered by integers from 1 to s. <p></p><p></p>The drivers&#039; gossiping club would like to know whether each driver, in some time, would learn all news from his colleagues. Write a program that will answer this question. <p></p>", "input_description": "The input consists of blocks of lines. Each block except the last describes one town. In the first line of the block there are integers n, d and s described above separated by one space. The next 2n lines contain descriptions of n bus lines (2 lines for each bus line) as follows: In the first line there are stop numbers on the corresponding bus line separated by one space. The stops are listed in the order the bus passes them. After passing the last stop listed on the line the bus goes again to the first stop listed on the line. The second line describes on which stops the individual buses operating on the bus line started at the beginning. The description consists of pairs si, di, where si is a stop number on the bus line and di is the number of driver driving the bus. All numbers si, di on the line are separated by one space. The last block consists of just one line containing 0 0 0, i.e. three zeros separated by one space. \n", "output_description": "The output contains the lines corresponding to the blocks in the input. A line contains Yes if the corresponding block in the input file describes a situation where each driver will learn, in some time, all news from his colleagues. Otherwise it contains No. There is no line in the output corresponding to the last ``null'' block of the input. \n\n", "samples": "[{\"input\": \"2 3 5\\n1 2 3\\n1 1 2 2\\n2 3 4 5\\n2 3\\n0 0 0\\n\", \"output\": \"Yes\\n\"}]", "test_case_id": "1311", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 3, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1312, "fields": {"title": "Results of ordinary Expression", "description": "  When you are a child, you certainly know how to get the results of 3+2*5/6-3. But as a programmer, how to write a program to get its results if such an expression is given.", "input_description": "The first line of input is an integer number n (n<1000) which implies the number of expressions you will evaluate. The following n lines are the expressions given and each line represents an expression. All the number in the expression are doubles and the operators are +, -, * or /. No other operator or signs in the expression.", "output_description": "Output n lines, and each line is a double number with two digits after the decimal point.\n\n", "samples": "[{\"input\": \"2\\n2.45+3.45*2.0-4.5\\n1.2-3.4*2.5/2.0-3.5*2.0\\n\\n\", \"output\": \"4.85\\n-10.05\\n\\n\"}]", "test_case_id": "1312", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 371, "total_accepted_number": 136, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1313, "fields": {"title": "Results of Expression with brackets", "description": "Considering an ordinary expression with brackets, how to get the results of them.", "input_description": "The first line of input is an integer n, which implies the number of expressions to be evaluated. The following n lines are the expressions. Each line contains one expression. Only double numbers, +,-,*, / operator and (, ) brackets are included in this expressions.", "output_description": "For each expression, if the expression is legal, print the results of it with two digits after the decimal point. If the expression is illegal, print one word \u201cIllegal\u201d.", "samples": "[{\"input\": \"2\\n2.3+*(2.5-1.5)/2.34-(3.567+-2.343))\\n2.3*(-4.5+4.6)\\n\", \"output\": \"Illegal\\n0.23\\n\"}]", "test_case_id": "1313", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 288, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1314, "fields": {"title": "Match of Brackets", "description": "Mike is a middle school teacher. He is teaching mathematics. After each chapter, he always arranges some homework to his students. In this chapter, he will ask his students to calculate the value of some expressions. There are many brackets in these expressions. Sometimes it is very difficult to find whether these brackets are match or not. In other time, it\u2019s difficult to find whether the brackets are at the right positions. Please write a program to help him to check these expressions.", "input_description": "Input includes n+1 lines, the first of these lines is an integer number n, which implies that there are n expressions to be checked. Each line represents one expression which includes double number, +\uff0c-\uff0c*\uff0c/ operator or (\uff0c) brackets. ", "output_description": "  For each expression, output one word \u2018Legal\u2019 or \u2018Illegal\u2019.", "samples": "[{\"input\": \"2\\n2.3+(4.5+3.678)/3.4*2.5+(3.4+(4.5-(2.3)*3)\\n4.5+(4.2324*3.8)-3.4*(1.5-(3.4*(5.6/(3.6-(2.8)))))\\n\\n\", \"output\": \"Illegal\\nLegal\\n\"}]", "test_case_id": "1314", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 336, "total_accepted_number": 89, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1315, "fields": {"title": "Rolling Balls", "description": "Two boys are playing games on a plane. Each of them has a ball. The balls can roll along the railway on the plane. The railway is consisted of many line segments and we are sure the start point is not connected with the end point of the railway. When two balls roll along the railway, they will start from the start point to the end and they may have different speed (but for each ball they have the same speed). Each ball can only roll along its rail, but the two rails may intersect at somewhere. So, it\u2019s possible for them to meet at some points. Could you tell me whether they will meet at somewhere? If so, please tell me the coordinate of these points. Suppose the size of the ball is zero.", "input_description": "First line of each case is two integers: n and m (0<n, m<=10000), which tells the number of points along the railways. The second line is v and u, they are doubles with two decimal number after decimal point which represents the speed of the two balls. The following two lines are the x and y coordinate of the points (they are all integers). The first line of them has n points and the second has m points. The first line of input for the test data is number S(S<100) which represents the number of cases in this problem.\n\n", "output_description": " For each case, if the two balls will meet at some points when they roll from the first point to the end along their own railway, print the x and y coordinate of these points, else print the string \u201cNot meet\u201d. Output should be printed with two decimal numbers after the decimal point.", "samples": "[{\"input\": \"2\\n4 3\\n0.71 4.71\\n1 1 4 1 4 2 5 3\\n4 3 5 2 4 5\\n5 3\\n2.52 2.83\\n2 4 3 5 5 6 2 4 7 8\\n3 4 6 7 2 5\\n\", \"output\": \"4.50 2.50\\nNot meet\\n\"}]", "test_case_id": "1315", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 6, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1316, "fields": {"title": "Matrix Multiplication", "description": "There are two special matrixes. Most of their elements are zeroes. Only few are non-zero. When we multiply these matrixes together, we can\u2019t use the usual way to do it, because that would lead to excess of time. ", "input_description": " First line of input is an integer S, which implies the number of cases in the test data. First line of each case is integer numbers M, N, P, t1 and t2, where M, N and t1 are the row, column and non-zero element number for the first array, N, P and t2 are for the second one. Here M, N and P are less than 1000000. The following t1+t2 lines are the row number, column number and value of each non-zero element in these array, these elements are ascend sorted by row number. All the values of the non-zero elements are integers. ", "output_description": " First line of Output for each case is an integer tu, which tells the number of non-zero elements for the results of multiplication of each case. The following tu lines are the non-zero elements for each case. Each line is consisted by i, j, and e. where i and j are the row and column number of the non-zero elements which started from 1. All the output should be sorted by ascending order according to its rows. \n\n", "samples": "[{\"input\": \"1\\n100 200 100 3 2\\n1 5 2\\n40 3 3\\n40 4 5\\n5 2 3\\n3 4 10\\n\\n\", \"output\": \"2\\n1 2 6\\n40 4 30\\n\"}]", "test_case_id": "1316", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 419, "total_accepted_number": 71, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1317, "fields": {"title": "Find critical persons", "description": "In war, most of the villages have their own guards. Some guards play the role of finding enemies who want to go into the village. There are many houses in the village. Most of the houses have road connecting to others. But not all the houses have direct road to other houses in the village, they have to pass some other villages to these houses. Now you task is to find how many persons should be placed at the critical houses to play the role of finding all the enemies who want to go into the village. Suppose the houses in the village are represented by number from 0~99 and the houses outside the village are from 100~200. ", "input_description": " The first line of the input is an integer number who represents the number of cases in test data. The following lines have the format of : n1 m1 n2 m2\u2026\u2026, which describe the connection status of the houses inside and outside of the village. Each pair of n and m represents one connection between two houses and each line represents one case. ", "output_description": " For each case, output an integer number which represents the number guards should be placed.", "samples": "[{\"input\": \"2\\n1 103 1 2 2 5 2 4 2 3 2 102 102 107 101 6 101 105 102 6 \\n1 2 1 3 1 5 1 106 2 3 2 4 2 5 3 4 3 107 4 108 4 109\\n\", \"output\": \"3\\n3\\n\\n\"}]", "test_case_id": "1317", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 65, "total_accepted_number": 38, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1319, "fields": {"title": "Find Next", "description": "It\u2019s easy to find whether a line contains a target string. We use our string function strstr to check whether the current line contains the target. If the target doesn\u2019t appear in the current line, then we search the reminder of the buffer. <p></p>   Here, we want to write our own program by use of simple sentences provided by program language. First, we should know how to check whether a line of string contains another string.<p></p>   If we don\u2019t consider the efficient of the search, we can do it like this.<p></p>   First, we let i point to the beginning of the line and j point to the beginning of the target string, for example, i=1, j=1.<p></p>   Second, if ith character of the line is the same with the jth character in the target, increase i and j by 1, else let i go back to i-j+2 and j go back to 1; <p></p>   Third, Loop the second step until we find j is bigger than length of the target string while i is less than or equal to the length of the line, then the target string is found in the line. If j isn\u2019t bigger than the length of the target string while i is bigger than the length of the line, we can\u2019t find the it in this line.<p></p>   From the above description, we can find if the ith character of the line is not equal to the jth character of the target, we will go back to the (i-j+2)th character of the line and j will go back to 1. We can\u2019t fully use the comparing results of the previous. So we want to change the second steps like this:<p></p>   Second, If the ith character of the line is not equal to the jth character of the target, we don\u2019t change i, while we change j to a suitable position, so we can fully use the previous comparing results and let the times of comparison is the least. <p></p>   Our task is to find the suitable position of j to make the comparison times is the least if the ith character of the line isn\u2019t equal to the jth character of the target. In fact, the position has no relations with the line to be searched. For each character in a target string, the position is definite.<p></p>", "input_description": "First line of input is an integer n, which implies the number of cases to be tested. First line of each case is the target string (Length of it is less than 255), the following lines is the format of n, M1,M2,\u2026\u2026,Mn, where n is the number of position to be find and Mi is the Mith positon of the target string.\n\n", "output_description": "For each case, Output a line, which tells us the position to go back for each Mith character in the target string. If Mi=1, output 0.\n\n", "samples": "[{\"input\": \"2\\neameeh ee.\\n3 4 7 9\\nab aba aa aa b\\n2 5 10\\n\", \"output\": \"1 1 2\\n2 2\\n\"}]", "test_case_id": "1319", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 95, "total_accepted_number": 15, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1320, "fields": {"title": "Brackets sequence", "description": "Let us define a regular brackets sequence in the following way:<p></p>1. Empty sequence is a regular sequence.<p></p>2. If S is a regular sequence, then (S) and [S] are both regular sequences.<p></p>3. If A and B are regular sequences, then AB is a regular sequence.<p></p>For example, all of the following sequences of characters are regular brackets sequences:<p></p>(), [], (()), ([]), ()[], ()[()]<p></p>And all of the following character sequences are not:<p></p>(, [, ), )(, ([)], ([(]<p></p>Some sequence of characters &#039;(&#039;, &#039;)&#039;, &#039;[&#039;, and &#039;]&#039; is given. You are to find the shortest possible regular brackets sequence, that contains the given character sequence as a subsequence. Here, a string a1a2...an is called a subsequence of the string b1b2...bm, if there exist such indices 1 = i1 &lt; i2 &lt; ... &lt; in = m, that aj=bij for all 1 = j = n.<p></p><p></p>", "input_description": "Input includes a number of cases. Each case contains one line. Each line contains at most 100 brackets (characters '(', ')', '[' and ']') that are situated on a single line without any other characters among them.\n\n", "output_description": "Output a single line that contains some regular brackets sequence that has the minimal possible length and contains the given sequence as a subsequence for each case.\n\n", "samples": "[{\"input\": \"([(]\\n\", \"output\": \"()[()]\\n\"}]", "test_case_id": "1320", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 62, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1321, "fields": {"title": "Chemical reactions", "description": "Bill teaches chemistry in the school and has prepared a number of tests for his students. Each test has a chemical formula and a number of possible reaction outcomes that his students are to choose one correct from. However, Bill wants to make sure that he has not made any typos while entering his tests into a computer and that his students won&#039;t easily throw away wrong answers simply by counting a number of chemical elements on the left and on the right side of the equation, which should be always equal in a valid reaction.<p></p>You are to write a program that will help Bill. The program shall read the description of the test for the students that consists of the given left side of the equation and a number of possible right sides, and determines if the number of chemical elements on each right side of the equation is equal to the number of chemical elements on the given left side of the equation.<p></p>To help you, poor computer folks, that are unaware of the complex world of chemistry, Bill has formalized your task. Each side of the equation is represented by a string of characters without spaces, and consists of one or more chemical sequences separated by a &#039;+&#039; (plus) characters. Each sequence has an optional preceding integer multiplier that applies to the whole sequence and a number of elements. Each element is optionally followed by an integer multiplier that applies to it. An element in this equation can be either distinct chemical element or a whole sequence that is placed in round parenthesis. Every distinct chemical element is represented by either one capital letter or a capital letter that is followed by a small letter.<p></p><p></p>Even more formally, using notation that is similar to BNF, we can write:<p></p>\uff0a\uff1cformula\uff1e ::= [\uff1cnumber\uff1e] \uff1csequence\uff1e { &#039;+&#039; [\uff1cnumber\uff1e] \uff1csequence\uff1e }<p></p>\uff0a\uff1csequence\uff1e ::=\uff1celement\uff1e[\uff1cnumber\uff1e] { \uff1celement\uff1e [\uff1cnumber\uff1e] }<p></p>\uff0a\uff1celement\uff1e ::= \uff1cchem\uff1e| &#039;(&#039; &lt;\uff1csequence\uff1e&#039;)&#039;<p></p>\uff0a\uff1cchem&gt; ::= \uff1cuppercase_letter&gt; [ \uff1clowercase_letter\uff1e ]<p></p>\uff0a\uff1cuppercase_letter\uff1e ::= &#039;A&#039;..&#039;Z&#039;<p></p>\uff0a\uff1clowercase_letter\uff1e ::= &#039;a&#039;..&#039;z&#039;<p></p>\uff0a\uff1cnumber\uff1e ::= &#039;1&#039;..&#039;9&#039; { &#039;0&#039;..&#039;9&#039; }<p></p>Every distinct chemical element is said to occur in the given formula for some total number X, if X is the sum of all separate occurrences of this chemical element multiplied to all numbers that apply to it. For example, in the following chemical formula:<p></p>C2H5OH+3O2+3(SiO2)<p></p>\uff0aC occurs for a total of 2 times.<p></p>\uff0aH occurs for a total of 6 times (5 + 1).<p></p>\uff0aO occurs for a total of 13 times (1 + 3*2 + 3*2).<p></p>\uff0aSi occurs for a total of 3 times.<p></p>All multipliers in the formula are integer numbers that are at least 2 if explicitly specified and are 1 by default. Each chemical formula is at most 100 characters long, and every distinct chemical element is guaranteed to occur for a total of no more than 10000 times in each formula.<p></p><p></p>", "input_description": "The first line of the input for each case represents a chemical formula that is to be tested as the left side of the equation. The second line of the input for each case contains a single integer number N (1 = N = 10), which is the number of right sides of the equation that are to be tested. Each one of the following N lines for each case represents one such formula. Input includes many cases.", "output_description": "Output N lines for each case - one line per each possible answer of the chemical test for Bill's students that is given in the input. For each right-hand side formula that is encountered in the input, write to the output:\n\uff1cleft_formula\uff1e==\uff1cright_formula\uff1e\nif the total number of occurrences of each distinct chemical element on the left-hand side equals to the total number of occurrences of this chemical element on the right-hand side. Otherwise write:\n\uff1cleft_formula\uff1e!=\uff1cright_formula\uff1e\u3000\nHere \uff1cleft_formula\uff1e must be replaced exactly (character by character) with the original left-hand side formula as it is given in the first line of the input, and \uff1cright_formula\uff1e must be replaced exactly with each right-hand side formula as\u3000they are given in the input. Do not place any spaces in the lines you write to the output.\n", "samples": "[{\"input\": \"C2H5OH+3O2+3(SiO2)\\n7\\n2CO2+3H2O+3SiO2\\n2C+6H+13O+3Si\\n99C2H5OH+3SiO2\\n3SiO4+C2H5OH\\nC2H5OH+3O2+3(SiO2)+Ge\\n3(Si(O)2)+2CO+3H2O+O2\\n2CO+3H2O+3O2+3Si\\n\", \"output\": \"C2H5OH+3O2+3(SiO2)==2CO2+3H2O+3SiO2\\nC2H5OH+3O2+3(SiO2)==2C+6H+13O+3Si\\nC2H5OH+3O2+3(SiO2)!=99C2H5OH+3SiO2\\nC2H5OH+3O2+3(SiO2)==3SiO4+C2H5OH\\nC2H5OH+3O2+3(SiO2)!=C2H5OH+3O2+3(SiO2)+Ge\\nC2H5OH+3O2+3(SiO2)==3(Si(O)2)+2CO+3H2O+O2\\nC2H5OH+3O2+3(SiO2)!=2CO+3H2O+3O2+3Si\\n\"}]", "test_case_id": "1321", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 8, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1322, "fields": {"title": "Maximum Area of Quadrangle", "description": " For a quadrangle whose four sides are tangent to a circle, if radius of the circle and perimeter of the quadrangle are given, we can easily calculate its area. However, if perimeter of a quadrangle is given, please tell me the maximum area of such quadrangle and the correspondent radius of the circle. ", "input_description": "Input includes a number of lines. Each line is a double number which represents the perimeter of a quadrangle. ", "output_description": "Output the radius of the circle and the maximum area of the quadrangle whose fours side are tangent to the circle. All the output should be printed with two digits after the decimal point. Suppose Pi=3.14. \n\n", "samples": "[{\"input\": \"20.5\\n31.6\\n\", \"output\": \"1.63 8.36\\n2.52 19.88\\n\"}]", "test_case_id": "1322", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 95, "total_accepted_number": 58, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1323, "fields": {"title": "Pairs of integers", "description": "You are to find all pairs of integers such that their sum is equal to the given integer number N and the second number results from the first one by striking out one of its digits. The first integer always has at least two digits and starts with a non-zero digit. The second integer always has one digit less than the first integer and may start with a zero digit.", "input_description": "The input file consists of a single integer N (10 = N = 10^9).\n\n", "output_description": "On the first line of the output file write the total number of different pairs of integers that satisfy the problem statement. On the following lines write all those pairs. Write one pair on a line in ascending order of the first integer in the pair. Each pair must be written in the following format:\nX + Y = N\nHere X, Y, and N, must be replaced with the corresponding integer numbers. There should be exactly one space on both sides of '+' and '=' characters.\n\n", "samples": "[{\"input\": \"302\\n\", \"output\": \"5\\n251 + 51 = 302\\n275 + 27 = 302\\n276 + 26 = 302\\n281 + 21 = 302\\n301 + 01 = 302\\n\"}]", "test_case_id": "1323", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 98, "total_accepted_number": 21, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1324, "fields": {"title": "Cable master", "description": "Inhabitants of the Wonderland have decided to hold a regional programming contest. The Judging Committee has volunteered and has promised to organize the most honest contest ever. It was decided to connect computers for the contestants using a &quot;star&quot; topology - i.e. connect them all to a single central hub. To organize a truly honest contest, the Head of the Judging Committee has decreed to place all contestants evenly around the hub on an equal distance from it.<p></p>To buy network cables, the Judging Committee has contacted a local network solutions provider with a request to sell for them a specified number of cables with equal lengths. The Judging Committee wants the cables to be as long as possible to sit contestants as far from each other as possible.<p></p>The Cable Master of the company was assigned to the task. He knows the length of each cable in the stock up to a centimeter, and he can cut them with a centimeter precision being told the length of the pieces he must cut. However, this time, the length is not known and the Cable Master is completely puzzled.<p></p>You are to help the Cable Master, by writing a program that will determine the maximal possible length of a cable piece that can be cut from the cables in the stock, to get the specified number of pieces.<p></p>", "input_description": "Input includes a number of cases. The first line of the input for each contains two integer numbers N and K, separated by a space. N (1 = N = 10000) is the number of cables in the stock, and K (1 = K = 10000) is the number of requested pieces. The first line of each case is followed by N lines with one number per line, that specify the length of each cable in the stock in meters. All cables are at least 1 meter and at most 100 kilometers in length. All lengths in the input are written with a centimeter precision, with exactly two digits after a decimal point.\n\n", "output_description": "For each case, output the maximal length (in meters) of the pieces that Cable Master may cut from the cables in the stock to get the requested number of pieces. The number must be written with a centimeter precision, with exactly two digits after a decimal point.\nIf it is not possible to cut the requested number of pieces each one being at least one centimeter long, then the output file must contain the single number \"0.00\" (without quotes).\n\n", "samples": "[{\"input\": \"4 11\\n8.02\\n7.43\\n4.57\\n5.39\\n1 10\\n100.00\\n\\n\", \"output\": \"2.00\\n10.00\\n\\n\"}]", "test_case_id": "1324", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 123, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1325, "fields": {"title": "Statistical trouble", "description": "Your team was hired by the international corporation ACM (Analytical Calculation Maxims). Every year ACM creates and conducts various surveys. Surveys themselves are simple forms with a list of questions and a list of possible answers for every question. Surveys are distributed around the globe, where field agents question the target group of people. All the answers are gathered in the ICPC (International Computation and Processing Center), where teams of well-paid analysts mine raw data in search for relevant correlations. The raw data for each individual survey consists of lots of lines of answers. Each line corresponds to every questioned person and for every question lists answers that the person has made on that particular survey.<p></p>The first step of analysis that your team was hired to automate is to create cross tables that correlate answers on interesting pairs of questions. In its most simple way, given a pair of questions, cross table has a row for every possible answer on the first question, and has a column for every possible answer on the second question. Each cell of the cross table contains a number of lines in the raw data that has both answers for the corresponding questions at the same time.<p></p>However, your task is complicated by the fact that you are to compute and output not only simple cross table values, but also total values for every row and column in the cross table (that is the sum of values in the corresponding row and column) that are placed in an additional last column and last row, as well as a percentage distributions for every row and column. Percentage distribution for a row is an additional number in every cell in that row that shows percent ratio of the value in that cell to the total value for that row, unless the total value is zero (in that case percentage distribution for this row is not defined). The same applies to the percentage distributions of columns. Thus, the cross table in your output will have at most three values in every cell (the value itself, row-wise percent, and column -wise percent). Please note, that percentage distributions also apply to totals. For example, in the total column for every row the row-wise percent will be always 100%, unless the total value for the row is zero (in that case row-wise percents are not defined), and column -wise percent shows percents ratio of the total value for this row to the total number of lines in the raw data (which is the value that can be found in the last column of the last row).<p></p>Percents are rounded to integers on output. Percent that has a non-zero fractional part is rounded to either the smallest integer number greater than the resulting percent, or the largest integer number smaller than the resulting percent, in such a way, that the sums of all corresponding row-wise percents by row (without row totals) or column ?wise percents by column (without column totals) are equal to 100% unless they are undefined. There are various rounding algorithms that produce results satisfying the above constraints. You are free to use any rounding algorithm as long as the above constraints are satisfied. <p></p>", "input_description": "The input consists of 3 sections: survey description, survey results, and cross table descriptions. The first line of the input contains the name of the survey, which is at most 100 characters long. Subsequent lines describe all the questions in the survey. On the first line of every question there is a 3-character question code (capital letters and digits only) followed by a space, and followed by the question name, which is at most 80 characters long. Each subsequent line for a question describes one possible answer on the question and starts with a space, followed by a single-character code for the answer (capital letter, digit, or character '.', '*', or '@'), followed by a space and followed by an answer description, which is at most 40 characters long. The list of questions is terminated by the line with a single character '#'. All answer codes are unique within the question, and all question codes are unique within the input. There are at least 2 and at most 10 possible answers per question and at least 2 and at most 100 questions.\nNext lines in the input describe survey results. Every line contains a character per question (in the order they appear in the input file) that gives the answer code for the corresponding question. The characters follow one another without any delimiters.\nThis section is terminated by the line with a single character '#'. There is at least one line with answers in the section and at most 10000 answers in total (the number of lines times the number of questions).\nNext lines in the input describe cross tables that are to be created. Each cross table description occupies one line. That line contains the code for the first question, followed by a space, followed by the different code for the second question, followed by a space, and followed by the cross table name, which is at most 100 characters long. This section is terminated by the line with a single character '#'. There are at most 100 cross table descriptions in the input.\nThe input has no trailing spaces on any line. All names do not start or end with a space, but may contain spaces.\n", "output_description": "Write to the output a cross table for every cross table description in the input in the order they appear in the input. On the first line of the cross table write the survey name, followed by a space, followed by a '-' (dash) character, followed by a space, followed by the cross table name. Then write the description of the first question, and the description of the second question exactly as they appear in the input and in the same format. Then write an empty line, followed by the table itself. The table contains exactly 1+3*(N1+1) lines and exactly 6*(N2+2) characters on every line, where N1 is the number of possible answers for the first question, and N2 is the number of possible answers for the second question. The table has one line for column headings, and N1+1 rows (3 lines per row). The first N1 of these rows correspond to the answers on the first question in the order they appear in the input, and the last row is for column totals. The table also has N2+2 columns, where each column is 6 characters wide. The first column is for row headings; the subsequent N2 columns correspond to the answers on the second question in the order they appear in the input, and the last column is for row totals. All information in the cells (including headings) is aligned to the right and is padded on the left with spaces to become 6 characters wide.\nThe heading for the first column is empty. The headings for the subsequent N2 columns are composed from the second question code, followed by a ':' (colon) character, and followed by the corresponding answer code. The heading for the last column is the string \"TOTAL\" (without quotes). The headings for the first N1 3-line rows of the cross table are composed from the first question code, followed by a ':' (colon) character, and followed by the corresponding answer code. The heading for the last row is the string \"TOTAL\" (without quotes). Row headings are situated on the first line of the corresponding row. The subsequent 2 lines in the heading column of every row must be blank. All non-heading cells in the table contain computed values and percents. On the first line of every cell the corresponding cross table integer value is situated. The second line contains properly rounded to integers row-wise percent, with a mandatory trailing '%' (percent) character, or a single '-' (dash) character if the corresponding row-wise percent is not defined. The third line contains column -wise percent in the same format. All cross tables in the output file must be separated by a single empty line\n", "samples": "[{\"input\": \"New Year Phone Survey for ACM ICPC\\nQ01 Hello!\\nH Hello!\\nY Yes!\\n* Uhm...\\n. (silence)\\n@ (other)\\nQ02 How are you?\\nH Hello!\\nY Yes!\\nF Fine!\\nQ Who are you?\\n@ (other)\\nBYE Happy New Year!\\nY You too.\\n* (censored)\\n@ (other)\\n. (hang up)\\n#\\n.@.\\nHH@\\n.@.\\nYFY\\nHQ*\\nH@.\\nYYY\\n.H@\\nHFY\\nHH@\\n#\\nQ01 Q02 Health vs greeting style\\nQ02 BYE Politeness matrix\\n#\\n\", \"output\": \"<img src=uploadFiles\\1325.JPG>\"}]", "test_case_id": "1325", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1326, "fields": {"title": "Adding Reversed Numbers", "description": "The Antique Comedians of Malidinesia prefer comedies to tragedies. Unfortunately, most of the ancient plays are tragedies. Therefore the dramatic advisor of ACM has decided to transfigure some tragedies into comedies. Obviously, this work is very hard because the basic sense of the play must be kept intact, although all the things change to their opposites. For example the numbers: if any number appears in the tragedy, it must be converted to its reversed form before being accepted into the comedy play. <p></p>Reversed number is a number written in arabic numerals but the order of digits is reversed. The first digit becomes last and vice versa. For example, if the main hero had 1245 strawberries in the tragedy, he has 5421 of them now. Note that all the leading zeros are omitted. That means if the number ends with a zero, the zero is lost by reversing (e.g. 1200 gives 21). Also note that the reversed number never has any trailing zeros. <p></p>ACM needs to calculate with reversed numbers. Your task is to add two reversed numbers and output their reversed sum. Of course, the result is not unique because any particular number is a reversed form of several numbers (e.g. 21 could be 12, 120 or 1200 before reversing). Thus we must assume that no zeros were lost by reversing (e.g. assume that the original number was 12).<p></p>", "input_description": "The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case consists of exactly one line with two positive integers separated by space. These are the reversed numbers you are to add. ", "output_description": "For each case, print exactly one line containing only one integer - the reversed sum of two reversed numbers. Omit any leading zeros in the output.", "samples": "[{\"input\": \"3\\n24 1\\n4358 754\\n305 794\\n\", \"output\": \"34\\n1998\\n1\\n\\n\"}]", "test_case_id": "1326", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 201, "total_accepted_number": 106, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1327, "fields": {"title": "Arrangement of projects", "description": "Tom is a manger of a corporation. Every time when a new project starts, he will make a plan in advance. At first, He divides the project to many sub projects, and then he will guess which sub project should be done at first and how long each item will need in order to finish it. Because the item must be finished at a given time, however he is not an experienced manager; he is not sure how long some items of the project will need. Now time needed by some items of project is given, can you write a program to help him to decide the maximum time of the left items? <p></p><p></p>", "input_description": "Input contains a number of test cases (less than 100). First line of each case contains three integer numbers n, m and r. where n (0\uff1cn\uff1c100) is the number of items divided from the project (except for the start and end of the projects), each item is numbered from 1 to n, 0 represents the start of the project and n+1 represents the end of the project, m is the maximum time requested to finish the project, r is the steps whose time the manager is sure. The following r lines are the description of the steps. Each line contains three integer numbers: i, j and k, where i and j represents the ith and jth item of the project, k represents the time needed for the step from i to j. The last line of each case contains p and p pairs of integers, each pair of integer represents a step whose maximum time is to be decided. The manager is not sure to these steps.  \n\n", "output_description": " For each case, output one lines. If you are sure to the maximum time of the step, output its maximum time, else output \u201cnot sure\u201d.\n\n", "samples": "[{\"input\": \"1\\n3 20 4\\n0 1 3\\n0 2 7\\n1 3 6\\n2 3 8\\n3 0 3 3 4 2 4\\n\", \"output\": \"not sure not sure 13\\n\"}]", "test_case_id": "1327", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 6, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1328, "fields": {"title": "Build Channels", "description": "Some villagers inhabit beside a mountain\uff0cthey have built a reservoir. Now they want to lead the water from the reservoir to their field. Suppose the reservoir is above the channels and the channels are at the same level; all the fields are below the channels. But because each channel has different width, they have different current when the water goes through them. When the reservoir is open, the water will come out of it and go to the fields through the channels. Some channels will branch at someplace, and the flux of each branch is in direct proportion to his width. <p></p><p></p>", "input_description": "First line of input is an integer n, the number of cases for the test data. First line of each case contains three integers: u, v and r, where u is the number of places that have branches and numbered from 1 to 100; v is the number of fields to be filled and numbered from 101 to 200; r is the number of branches from reservoir to the fields. 0 represents the reservoir. The following r lines are the description of the branches, it contains three integers: i, j and k, which represents a branch from place i to j and its flux is k (k cubic per hour). The last line of each case contains a few integers which are separated by a space, the first one of them is the amount of water (unit: cubic) comes out of the reservoir once the reservoir is open, and the others represent the fields to be filled.\n\n", "output_description": " Output the amount of water to be filled to the specified fields, each case contains a line. Output should be printed with two digits after the decimal points and separated by a space.", "samples": "[{\"input\": \"1\\n4 2 9\\n0 1 2\\n0 3 3\\n0 2 5\\n1 102 8\\n1 4 2\\n2 3 1\\n3 101 2\\n3 4 2\\n4 102 10\\n1000 101 102\\n\", \"output\": \"400.00 600.00\\n\"}]", "test_case_id": "1328", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 13, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1329, "fields": {"title": "Icosahedrons", "description": " Icosahedrons is a polyhedron that is enclosed by twenties equilateral triangles. If volume of icosahedrons is given, can you tell me the radius of its circumscribed sphere?", "input_description": " Input contains a line. First of this line is an integer number n (0\uff1cn\uff1c100), the number of volumes for the icosahedrons, followed by n double number, all the numbers are separated by a space. ", "output_description": " Output contains a line with n double numbers separated by a space between two of them, all of them are printed with two digital numbers after the decimal point.", "samples": "[{\"input\": \"2 2.58 3.67\\n\", \"output\": \"1.01 1.13\\n\"}]", "test_case_id": "1329", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 118, "total_accepted_number": 72, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1330, "fields": {"title": "Lining Up", "description": "\u201cHow am I ever going to solve this problem\u201d said the pilot. Indeed, the pilot was not facing an easy task. She had to drop packages at specific points scattered in a dangerous area. Furthermore, the pilot could only fly over the area once in a straight line, and she had to fly over as many points as possible. All points were given by means of integer coordinates in a two-dimensional space. The pilot wanted to know the largest number of points from the given set that all lie on one line. Can you write a program that calculates this number? Your program has to be efficient.", "input_description": "Input includes a number of test cases. First line of each case contains an integer number N, which means there are N pairs of integers, where 0\uff1cN\uff1c700. The following N lines are the pairs of integers.Each case is separated by one blank. All the test cases are ended by 0.", "output_description": "The output consists of one integer for each case representing the largest number of points that all lie on one line,each case contains one line.\n\n", "samples": "[{\"input\": \"5\\n1 1\\n2 2\\n3 3\\n9 10\\n10 11\\n\\n6\\n1 2\\n2 13\\n3 124\\n4 105\\n5 56\\n6 87\\n\\n0\", \"output\": \"3\\n2\\n\"}]", "test_case_id": "1330", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 159, "total_accepted_number": 36, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1331, "fields": {"title": "The Brick Stops Here", "description": "You have been hired by several clients of a factory that manufactures brass bricks. Brass is an alloy of copper and zinc; each brick weighs 1000 grams, and the copper content of a brick can range from 1 to 999 grams. (Note that brass with less than 55% or more than 62% of copper is practically useless; however, this is irrelevant for this question) The factory manufactures, through various processes, different types of brick, each of which has a different copper concentration and price. It distributes a catalog of these types to its customers. <p></p>Your clients desire to buy a certain number (M) of bricks, which for, uh, religious reasons must be of different types. They will be melted together, and the resultant mixture must have a concentration of at least CMin and at most CMax grams of copper per kilogram. Their goal is to pick the M types of brick so that the mixture has the correct concentration and the price of the collection is minimized. You must figure out how to do this. M, CMin, and CMax will vary depending on the client.<p></p>", "input_description": "The first part of input consists of a line containing a number N (1 <= N <= 200), the number of brick types, and then N lines containing the copper concentration (between 1 and 999) and price (in cents) of each brick type. No brick costs more than 10 dollars. \nThe second part consists of a line containing a number C (1 <= C <= 100), the number of clients you are serving, followed by C lines containing M (1 <= M <= 20), CMin (1 <= CMin <= 999), and CMax (1 <= CMax <= 999) for each client. \n\nAll input numbers will be positive integers. \n\n", "output_description": "Output consists of a line for each client containing the minimum possible price for which they can purchase bricks to meet their demands. If there is no way to match their specifications, output \"impossible\". ", "samples": "[{\"input\": \"11\\n550 300\\n550 200\\n700 340\\n300 140\\n600 780\\n930 785\\n730 280\\n678 420\\n999 900\\n485 390\\n888 800\\n3\\n2 500 620\\n9 550 590\\n9 610 620\\n\\n\", \"output\": \"420\\nimpossible\\n3635\\n\\n\"}]", "test_case_id": "1331", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 51, "total_accepted_number": 18, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1332, "fields": {"title": "Boastin' Red Socks", "description": "You have a drawer that is full of two kinds of socks: red and black. You know that there are at least 2 socks, and not more than 50000. However, you do not know how many there actually are, nor do you know how many are red, or how many are black. (Your mother does the laundry!) <p></p>You have noticed, though, that when you reach into the drawer each morning and choose two socks to wear (in pitch darkness, so you cannot distinguish red from black), the probability that you pick two red socks is exactly p/q, where 0 &lt; q and 0 &lt;= p &lt;= q. <p></p><p></p>From this, can you determine how many socks of each colour are in your drawer? There may be multiple solutions - if so, pick the solution with the fewest total number of socks.<p></p>", "input_description": "Input consists of multiple problems, each on a separate line. Each problem consists of the integers p and q separated by a single space. Note that p and q will both fit into an unsigned long integer. \nInput is terminated by a line consisting of two zeroes. \n\n", "output_description": "For each problem, output a single line consisting of the number of red socks and the number of black socks in your drawer, separated by one space. If there is no solution to the problem, print \"impossible\". ", "samples": "[{\"input\": \"1 2\\n6 8\\n12 2499550020\\n56 789\\n0 0\\n\\n\", \"output\": \"3 1\\n7 1\\n4 49992\\nimpossible\\n\\n\"}]", "test_case_id": "1332", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 119, "total_accepted_number": 63, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1333, "fields": {"title": "Arrangement of Courses", "description": "Jack is a college student. He wants to learn some courses of computer science besides his major. But it is not easy, because he doesn\u2019t know which course he should learn first and which one he should learn second and so on. He has made a diagram about the relation of some courses. From the diagram you can find which course he should learn before he learns this one. Now you task is to find which course he should learn first from these course. Suppose each course is represented by an integer number.", "input_description": "Input includes a number of cases. First line of these cases is an integer number n: the number of cases for the test data. First line of each case contains an integer number m: the number of relations between two courses. Second line of each case is m pair of integers, first one of each pair is the course he should learn first and the second is the course he can learn subsequently. ", "output_description": " Output an integer number which represents the course he should learn first for each case. If there are many courses he can learn at the same time, output the smallest one. ", "samples": "[{\"input\": \"1\\n9\\n1 5 1 4 1 6 5 10 4 20 6 20 20 10 4 10 3 6\\n\", \"output\": \"1\\n\"}]", "test_case_id": "1333", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 132, "total_accepted_number": 65, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1334, "fields": {"title": "Error of Permutation", "description": "N integer numbers are standing in ascendant order. If all the numbers are standing at fault positions in this sequence, we called it fault permutation. Could you tell me how many fault permutation for that sequence? <p></p><p></p>", "input_description": "Input includes a number of cases. Each case includes one line, each line contains one integer number n (0\uff1cn\uff1c20), the number of integers for the sequence. \n \n", "output_description": " For each case, output one line which contains one integer number: the number of fault permutations.\n\n", "samples": "[{\"input\": \"3\\n4\\n\", \"output\": \"2\\n9\\n\"}]", "test_case_id": "1334", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 153, "total_accepted_number": 94, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1335, "fields": {"title": "Minimum length of sub sequence", "description": "  Suppose a sequence is consisted by n^2+1 positive integers. Please output its minimum length of sub sequences and this sequence must be in ascendant or descendant order. ", "input_description": "For each case, there is only one line consisted by an integer number which represents how many positive integers in a sequence. There are many cases in test data.\n\n", "output_description": "For each case, Output its minimum length of sub sequence which is in ascendant or descendent order. \n\n", "samples": "[{\"input\": \"10\\n1601\\n\\n\", \"output\": \"4\\n41\\n\\n\"}]", "test_case_id": "1335", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 132, "total_accepted_number": 99, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1336, "fields": {"title": "Number of Areas", "description": "There is a closed convex polygon, if no more than three diagonals are intersected at one point. So how many un-overlapped areas are formed by its diagonals and sides.", "input_description": "Input includes a number of lines. Each line contains one integer number n (n>=3), which represents the sides of the closed convex polygon. \n\n", "output_description": " Output the number of un-overlapped areas formed by its diagonals and sides. \n\n", "samples": "[{\"input\": \"3\\n4\\n\", \"output\": \"1\\n4\\n\"}]", "test_case_id": "1336", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 101, "total_accepted_number": 41, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1337, "fields": {"title": "Selection of Schoolroom", "description": "Catherland is a small village, there is no school in this village until now, students living in the village have to go far away if they want to go to school. But the government has not enough money to build a new schoolroom for them. Fortunately, all the villagers are generous; they can contribute one of their houses as the schoolroom. However it is very difficult to choose a house as their schoolroom because none of them want to go too far from their house to the school. Now your task is to write a program to choose a house as a schoolroom so that the school is sited at the center of the village.", "input_description": "Input includes a number of cases. First line of input is an integer number n (0\uff1cn\uff1c=100), which represents the number of test cases. First line of each case contains two integer numbers m (0\uff1cm\uff1c=100) and p, where m is the number of villages\u2019 house to be chose (Suppose the houses of the villagers are numbered from 1 to m) and p is the number of direct paths between two houses. The following p lines are the description of the connections between two houses and its distance. Each line contains three integers: i, j and k, where i and j are the houses\u2019 number, k is the distance between ith house to jth house. \n\n", "output_description": "Choose one villagers\u2019 house as the schoolroom of the village. Output its number. If more than two houses can be chose as the schoolroom, output its smallest number. \n\n", "samples": "[{\"input\": \"1\\n4 3\\n1 2 1\\n1 4 2\\n2 3 3\\n\", \"output\": \"2\\n\"}]", "test_case_id": "1337", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 69, "total_accepted_number": 31, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1338, "fields": {"title": "Coin Hole", "description": "Being somewhat compulsive, I fill my pocket every morning with enough coins so I can make<p></p>any amount up to a dollar. Don\u2019t ask me why, I just do. In this program, you are given a list of coin<p></p>values representing a pocketful of coins, and must determine the least amount that can\u2019t be made<p></p>and how many amounts between 0 and the total of the coins can\u2019t be made from the pocketful of<p></p>coins.", "input_description": "The input consists of zero or more lines, each describing a pocketful of coins. Each line\ncontains zero or more positive integer coin values, separated by one or more spaces.", "output_description": "For each line of the input, compute the least nonnegative integer amount that can\u2019t be made\nexactly using coin values from the input list. Note that it must be greater than zero (which can\nalways be made using no coins) and not greater than the total of the coins plus one. Also compute\nthe number of amounts between zero and the total of the coins that can\u2019t be made exactly using\ncoin values from the input list. Format the output as shown in the output sample below.", "samples": "[{\"input\": \" <img src=uploadFiles\\1338.jpg>\", \"output\": \"the least amount that canu2019t be made exactly is 4\\nthe number of amounts between 0 and 68 that canu2019t be made exactly is 21\\n\\nthe least amount that canu2019t be made exactly is 105\\nthe number of amounts between 0 and 104 that canu2019t be made exactly is 0\\n\\nthe least amount that canu2019t be made exactly is 10\\nthe number of amounts between 0 and 91 that canu2019t be made exactly is 2\"}]", "test_case_id": "1338", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 228, "total_accepted_number": 25, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1339, "fields": {"title": "Lunch Plan", "description": "Dr. Rich leaves work to eat lunch every day, but is faced with a difficult decision about where to eat. On a given day, the choice depends on his appetite for a restaurant\u2019s food, its distance from work, and the number of days since last eating there. In this problem, we compute a sequence of the most desirable places to eat over a period of twenty days.", "input_description": "The input consists of a number of pairs of lines, each specifying information about a restaurant. The first line of each pair contains the name of a restaurant not exceeding 100 characters. The second line of each pair contains two integers a and d. 0 <=a<=100 is a measure of Dr. Rich\u2019s appetite for the restaurant\u2019s food, and d>=0 is the distance in miles to the restaurant from work.", "output_description": "On a given day, a restaurant\u2019s desirability is computed as\n<img src=uploadFiles\\1339.jpg>\nwhere a and d are the Dr. Rich\u2019s appetite for the restaurant\u2019s food and the distance to the restaurant, respectively, and t is the number of days since last eating at the restaurant. Assume t is infinite if the restaurant has never been visited.\nOutput the most desirable restaurant on each day for a period of twenty days. If two restaurants have the same desirability, pick the one least recently visited. If neither restaurant has been visited, pick the one which comes first alphabetically. Assume Dr. Rich eats at the most desirable restaurant each day.", "samples": "[{\"input\": \"Wendy$(quat)s\\n90 3\\nChinese\\n95 3\\nThe Deli\\n90 2\\nWienerschnitzel\\n70 6\\nDel Taco\\n50 5\\nKFC\\n55 5\\nCarl$(quat)s Jr.\\n20 1\\nRed Tomato\\n75 2\\nSubway\\n30 2\\n\", \"output\": \"Day   Restaurant\\n\\n  1   Chinese\\n  2   The Deli\\n  3   Wendy$(quat)s\\n  4   Red Tomato\\n  5   Wienerschnitzel\\n  6   KFC\\n  7   Subway\\n  8   Chinese\\n  9   The Deli\\n 10   Wendy$(quat)s\\n 11   Del Taco\\n 12   Red Tomato\\n 13   Carl$(quat)s Jr.\\n 14   Chinese\\n 15   Wienerschnitzel\\n 16   The Deli\\n 17   KFC\\n 18   Wendy$(quat)s\\n 19   Subway\\n 20   Red Tomato\\n\\n\"}]", "test_case_id": "1339", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 50, "total_accepted_number": 18, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1341, "fields": {"title": "Knight Trip", "description": "In the game of Chess, pieces move about on an n\u00d7n grid of squares. In a single move, a piece can go from one square to one of a set of squares depending on the type of piece. In this problem, we are interested in the movement of the piece known as the Knight. In a single move, a Knight can traverse two squares horizontally or vertically followed by one square in a perpendicular direction.<p></p>If we imagine the squares as having coordinate \u201caddresses\u201d (x, y) where x and y are positive integers, then for example a Knight can move from (3, 5) to one of (4, 7), (5, 6), (5, 4), (4, 3), (2, 3), (1, 4), (1, 6), or (2, 7). There are at most eight squares to which a Knight can go in a single move, and possibly fewer since the Knight is not allowed to go to an address outside the n\u00d7n grid.<p></p>In this problem, we seek to find the least number of successive moves required for a Knight to go from a given address to any other address within the n\u00d7n grid.", "input_description": "Each line of the input contains three positive integers. The first number is the dimension n of the square grid on which the Knight moves. We will assume the square in its lower right corner has address (n, 1), and the square in its upper left corner has address (1, n). The second number x and third number y are between 1 and n and give the coordinates of the starting address (x, y) of the Knight on the grid.", "output_description": "For each line of input, output an n\u00d7n grid of numbers, each showing the minimum number of successive moves required for a Knight to reach that address in the grid from the starting address (x, y). If a square on the grid cannot be reached from the starting address (x, y), output -1 in that position of the output grid.", "samples": "[{\"input\": \"8   6 5\\n4   1 1\\n3   2 3\\n\", \"output\": \"Minimum number of moves from (6,5) on a 8 by 8 board:\\n\\n   4   3   2   3   2   3   2   3\\n   3   2   3   4   1   2   1   4\\n   4   3   2   1   2   3   2   1\\n   3   2   3   2   3   0   3   2\\n   4   3   2   1   2   3   2   1\\n   3   2   3   4   1   2   1   4\\n   4   3   2   3   2   3   2   3\\n   3   4   3   2   3   2   3   2\\n\\nMinimum number of moves from (1,1) on a 4 by 4 board:\\n\\n   5   2   3   2\\n   2   1   4   3\\n   3   4   1   2\\n   0   3   2   5\\n\\nMinimum number of moves from (2,3) on a 3 by 3 board:\\n\\n   3   0   3\\n   2  -1   2\\n   1   4   1\\n\\n\"}]", "test_case_id": "1341", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 72, "total_accepted_number": 34, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1342, "fields": {"title": "Run of a Kind", "description": "If you flip a fair coin many times in succession, you don\u2019t expect all flips to come up heads or all flips to come up tails. Even though a single flip is as likely to come up heads as it is to come up tails, you also don\u2019t expect that the flips would alternate without two heads or two tails occurring in succession. In this program, a sequence of coin flips is given and the longest runs of heads and tails occurring in succession are discovered.", "input_description": "Each line of the input represents a sequence of zero or more coin flips, read from left to right. The letters 'H\u2019 and 'h\u2019 represent heads, 'T\u2019 and 't\u2019 represent tails, and all other characters are irrelevant and should be ignored.", "output_description": "For each line of the input, echo the sequence of flips without irrevelevant characters, highlighting\nthe leftmost longest runs of heads and tails in upper case, and printing all other flips in lower case. Also output the lengths of the longest run of heads and the longest run of tails occurring in succession, formatted as shown in the output sample below.", "samples": "[{\"input\": \"HTHHTHTTHTHTHHTHTHTHHHT\\nturkey\\nh t t h t t t t h t h h\\nHTH ignore HHTHTTTTTHHH\\n\", \"output\": \"hthhthTThththhththtHHHt\\nlongest run of heads is 3\\nlongest run of tails is 2\\nT\\nlongest run of heads is 0\\nlongest run of tails is 1\\nhtthTTTThtHH\\nlongest run of heads is 2\\nlongest run of tails is 4\\nhtHHHthTTTTThhh\\nlongest run of heads is 3\\nlongest run of tails is 5\"}]", "test_case_id": "1342", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 98, "total_accepted_number": 30, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1343, "fields": {"title": "Lexicon", "description": "The word lexicon derives from the Greek lexikon biblion, meaning \u201cbook of words.\u201d In this problem, a file of characters is read, chopped up into words, and analyzed for word length frequencies and average word length.", "input_description": "The input is viewed as a stream of characters, consisting of alternating nonempty substrings known as words and delimiters. A delimiter is a string of one or more whitespace or punctuation characters in the set {HT , LF , VT , FF , CR ,\u0446,,,,-,:,;,.,?,\",(,)}. A word is a nonempty string of any other characters.\n", "output_description": "Output a frequency table showing only those word lengths that occur in the input, and how often they occur. The first line contains the headings length and frequency, and the last line reports the average word length, accurate to two decimal places. The intervening lines each contain a word length and the number of words of that length in the input, and should be sorted by increasing length.", "samples": "[{\"input\": \"Words--can be \"delimited\" by a variety of symbols, including whitespace,punctuation... and question marks?\", \"output\": \"length frequency\\n   1 1\\n   2 3\\n   3 2\\n   5 2\\n   7 2\\n   8 1\\n   9 2\\n  10 1\\n  11 1\\naverage length: 5.60\\n\"}]", "test_case_id": "1343", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 81, "total_accepted_number": 14, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1347, "fields": {"title": "Air Hockey", "description": "An air hockey table is a level rectangular table whereon a circular puck levitates on a cushion of air. If propelled forward, the puck slides with little friction, rebounding off vertical walls that meet the table\u2019s edges. In this problem, we assume there is no friction\u2015puck speed is constant once moving\u2015and rebounds are perfect\u2015happening instantaneously and having equal angles of incidence and exit. Given a table\u2019s length and width, and a puck\u2019s radius, initial position and initial velocity, compute the position of the puck at given times.", "input_description": "The first line contains two positive integers\u2015the length l (along the x-axis) and width w (along the y-axis) of the table (in mm)\u2015separated by a blank. The second line contains a positive integer\u2015the radius r of the puck (in mm). The third line contains two positive integers\u2015the initial velocity (vx, vy) of the puck (in mm/sec), as a vector. The fourth line contains two positive integers\u2015the initial position (x0, y0) of the center of the puck. The fifth line contains a positive integer\u2015the duration d of the observation period (in seconds). You can assume the puck fits on\nthe table; i.e. r\uff1c\uff1dx0\uff1c\uff1dl &#8722; r and r\uff1c\uff1dy0\uff1c\uff1dw &#8722; r.", "output_description": "The first three lines echo the length l, widthw, radius r and initial velocity (vx, vy), formatted\u3000as shown in the output sample below. The remaining d+1 lines report the position (xt, yt) of the\u3000puck after t = 0, 1, 2, . . . , d seconds, formatted as shown in the output sample below.", "samples": "[{\"input\": \"650 490\\n40\\n50 70\\n100 100\\n15\\n\", \"output\": \"   table: 650 mm long by 490 mm wide\\n    puck: 40 mm radius\\nvelocity: (50 mm/sec, 70 mm/sec)\\nt=0 secs: (100, 100)\\nt=1 secs: (150, 170)\\nt=2 secs: (200, 240)\\nt=3 secs: (250, 310)\\nt=4 secs: (300, 380)\\nt=5 secs: (350, 450)\\nt=6 secs: (400, 380)\\nt=7 secs: (450, 310)\\nt=8 secs: (500, 240)\\nt=9 secs: (550, 170)\\nt=10 secs: (600, 100)\\nt=11 secs: (570, 50)\\nt=12 secs: (520, 120)\\nt=13 secs: (470, 190)\\nt=14 secs: (420, 260)\\nt=15 secs: (370, 330)\\n\"}]", "test_case_id": "1347", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 43, "total_accepted_number": 35, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1350, "fields": {"title": "DeHuff", "description": "Computer Science students know that a character is stored internally as a code, i.e. a bit<p></p>string, usually fixed-length and prescribed by some standard, e.g. ASCII or Unicode. In a Huffman<p></p>code, each character is stored as a code, but the lengths of the codes are not fixed, they vary<p></p>(preferring shorter codes for the most frequently used characters to increase compression). To facilitate decoding a sequence of contiguously-stored Huffman codes into a string of characters without boundary ambiguity, Huffman codes satisfy the prefix property\u2015no character code is a prefix of any other character code. For example, character strings over the alphabet {a, b, c, d} could be stored internally using the Huffman code {a = 00, b = 010, c = 011, d = 1}, which has the prefix property.<p></p>Because of the prefix property, a Huffman code can be represented as a Huffman tree?a binary tree whose leaves are the alphabet characters and whose left and right branches are (implicitly) labeled 0 and 1, respectively. The leaves of a Huffman tree are arranged so that the code of a character is read as the string of branch labels leading from the root to the leaf. Write a program that inputs a Huffman tree (representing a Huffman code) and a bit string consisting of contiguously stored character codes, and decodes the bit string into its corresponding string of characters, which is<p></p>output.", "input_description": "The first line contains a Huffman tree. If a tree is a single leaf, it appears as a single character; otherwise, if it has subtrees, it appears as a left parenthesis, followed by the left Huffman subtree, followed by a comma, followed by the right Huffman subtree, followed by a right parenthesis. You can assume every non-leaf tree has two non-empty subtrees. For example, the Huffman tree representing the Huffman code in the first paragraph would appear as ((a,(b,c)),d). The subsequent lines each contain a nonempty binary string to be decoded.", "output_description": "For each of the binary strings to be decoded, print the string of characters that the binary string represents.", "samples": "[{\"input\": \"((a,(b,c)),d)\\n0101011001101001100\\n000110110011010101000011\\n\", \"output\": \"bdcaddbca\\naccaddbdbac\\n\"}]", "test_case_id": "1350", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 29, "total_accepted_number": 19, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1351, "fields": {"title": "Density Center", "description": "A peg board is drilled with a square matrix of holes, into which pegs might be inserted. The dimension of a peg board is the number of holes in a row or column, and is always a positive power of 2; i.e. 2^n for some n&gt;0. The density of a peg board is the number of holes containing pegs.<p></p>The density center of a peg board is a hole coordinate on the board defined recursively:<p></p>&#8226; If the dimension is 2^0, the density center is its one and only coordinate.<p></p>&#8226; If the dimension is 2^n where n&gt;0, the density center is the density center of the quadrant (upper left, upper right, lower left, or lower right) having the highest density. If there is a tie for highest density, the priority order (from highest to lowest) is (upper left, upper right,lower left, lower right).<p></p>Write a program that inputs a peg board and finds its density center.", "input_description": "The first line of input contains the dimension of the peg board, which is 2^n for some n>0. The remaining 2n lines represent the peg board, with each line containing 2^n characters. A blank character represents an empty hole and a non-blank character (e.g. o) represents a hole containing a peg.", "output_description": "Output the peg board as it appears in the input, except the coordinate of the density center,which should be marked with the character X.", "samples": "[{\"input\": \"<img src=uploadFiles\\1351_1.jpg>\", \"output\": \"<img src=uploadFiles\\1351_2.jpg>\"}]", "test_case_id": "1351", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 41, "total_accepted_number": 16, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1352, "fields": {"title": "Magical Mystery Square", "description": "A magic square is a 3\u00d73 matrix containing the digits 1, 2, 3, . . . , 9 arranged so that each of the three rows, three columns, and two diagonals sums to 15. An example appears in the output sample below. In this problem, mystery squares\u20153\u00d73 matrices with digits revealed in one or more positions and question marks elsewhere\u2015are given, and we find (if possible) a magic square that matches the mystery square; i.e. contains the mystery square\u2019s revealed digits in the same positions.", "input_description": "The input will consist of one or more mystery squares separated by single blank lines. Each row of a mystery square occupies one line, and the values (1, 2, 3, . . . , 9 or ?) in a row are separated by a single blank.", "output_description": "For each mystery square in the input, print the heading \u2018magic square:\u2019 followed by a magic square that matches the mystery square, or the word \u2018none\u2019 if no matching magic square exists.", "samples": "[{\"input\": \"? 9 ?\\n? ? 3\\n? ? ?\\n\\n5 ? ?\\n? ? ?\\n? ? ?\\n\", \"output\": \"magic square:\\n 2 9 4\\n 7 5 3\\n 6 1 8\\nmagic square:\\n none\"}]", "test_case_id": "1352", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 93, "total_accepted_number": 28, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1353, "fields": {"title": "Prereq Cheq", "description": "As college students know, a course may have prerequisite courses that are supposed to be taken prior to taking the course. In this program, we input a course catalog with specified prerequisites and a transcript of courses taken by a student, and determine what prerequisite violations occurred, if any.", "input_description": "The input consists of a course catalog (one line per course), followed by a blank line, followed by a transcript (one line per quarter). Each line of the course catalog contains the name (strings of non-blank characters) of a course and its (zero or more) prerequisites, separated by one or more blanks. Each line of the transcript contains the names of courses taken during a quarter, separated by one or more blanks. The transcript quarters appear in chronological order.", "output_description": "For each course appearing in the transcript, determine if a prerequisite violation occurred, i.e. if any of its prerequisite courses was not taken in a preceding quarter. If a prerequisite violation occurs, output the name of the course and prerequisite not taken, formatted as in the output sample below.", "samples": "[{\"input\": \"mat105\\nmat114 mat105\\ncs130 mat105\\ncs140 mat105\\ncs141 cs140 mat114\\ncs210 cs130\\ncs240 cs130 cs141\\ncs241 cs240\\ncs264 cs210 cs240\\ncs311 cs241 cs264\\n\\nmat114 cs130\\ncs140 cs210 cs141\\ncs264 cs240\\ncs241 cs311\\n\", \"output\": \"mat114 taken without prerequisite mat105\\ncs130 taken without prerequisite mat105\\ncs140 taken without prerequisite mat105\\ncs141 taken without prerequisite cs140\\ncs264 taken without prerequisite cs240\\ncs311 taken without prerequisite cs241\\n\"}]", "test_case_id": "1353", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 33, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1354, "fields": {"title": "Match Point", "description": "In this problem, we compute the winner and score of a tennis match between two players. A tennis match is a sequence of sets; a set is a sequence of games; and a game is a sequence of points. The number of points won by each player is accumulated from zero within a game; the number of games won by each player is accumulated from zero within a set; and the number of sets won by each player is accumulated from zero within a match. A point is won by one of the players according to rules which aren\u2019t relevant in this problem, since the input tells the winner of each point. A game is won by the first player to accumulate at least 4 points and lead by at least 2 points (games could last indefinitely); A set is won by the first player to accumulate at least 6 games and lead by at least 2 games (sets could last indefinitely); and a match is won by the first player to accumulate at least 2 sets (complete matches always consist of two or three sets). The score is reported by giving the number of games each player won in each set, e.g., \u201c6-3,2-6, 7-5\u201d or \u201c6-1, 6-1\u201d.", "input_description": "Each line of the input is a binary string p describing the point winners throughout a match. Player A wins the i\u2019th point of the match if pi = 0; player B wins the i\u2019th point of the match if pi = 1.", "output_description": "For each match, output the winner and score of each complete set. If the input includes enough points to determine the winner of the match, report which player won the match and discard the rest of the input line. If the input doesn\u2019t include enough points to determine the winner, output the score of the last set in progress and report that the\nmatch is incomplete.", "samples": "[{\"input\": \"000111010001000100100010100010001101000000010000011101111101111111001001010111110101101100010111111010110000010000000110000000\\n100101101011011001000101111111\\n\", \"output\": \"Set Score: A-6 B-0\\nSet Score: A-3 B-6\\nSet Score: A-6 B-2\\nMatch over, A wins.\\n\\nPartial Set Score: A-1 B-3\\nMatch incomplete.\\n\"}]", "test_case_id": "1354", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 46, "total_accepted_number": 23, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1355, "fields": {"title": "Mood Lighting", "description": "A room contains l lights, each of which can be in an on or off state. In order to meet the lighting needs of many different moods, the engineer provided s push-button switches, each of which toggles the state of some lights and has no effect on the others. The engineer thought this would be a useful design, but failed to realize how confusing it might be to use the switches to obtain a desired lighting state vector. In this program, we\u2019ll determine if there is a sequence of switches that can be pushed to go from an initial state vector to a desired state vector, achieving just the right lighting mood.", "input_description": "The first line of input contains a binary string of length l called the initial state vector. Each bit of the state vector tells whether the corresponding light is off (0) or on (1). The second line of input contains a binary string of length l called the desired state vector, which tells what lights should be off or on for the desired mood. The third line of input is empty.\nThe remaining s lines each contain a binary string e of length l describing the effect of a switch. Each bit of an effect tells whether the corresponding light is unaffected (0) or toggled (1) by the switch.", "output_description": "Read the input and determine if there is a sequence of switches that can be pushed to go from the initial to the desired state vector. If so, report the numbers of the buttons to be pushed. If not, report that it is impossible.", "samples": "[{\"input\": \"1001101001\\n0111100101\\n\\n1110000000\\n1001010010\\n1001001010\\n0000001000\\n1001001010\\n0000000100\\n\", \"output\": \"Switch sequence: 1 4 6\\n\"}]", "test_case_id": "1355", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 20, "total_accepted_number": 10, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1356, "fields": {"title": "Permute Commute", "description": "A string y is a permutation of a string x if y can be obtained by rearranging the characters of x. Write a program which repeatedly inputs pairs of strings and decides whether the second string is a permutation of the first string.", "input_description": "A string is the concatenation of consecutive nonempty lines of input. A pair consists of a nonempty line (containing only hyphens), followed by the first string, followed by an empty line, followed by the second string, followed by an empty line. The standard input file contains one or more pairs.", "output_description": "for each pair of strings in the standard input file, determine whether the second string is a permutation of the first string, and output a message as shown in the sample output.", "samples": "[{\"input\": \"-----\\nOh, my goodness\\nmultiple lines!\\n\\nyg doo, shOmens emlusleip\\n!tlin\\n\\n-----\\nperplexed\\n\\nexdrelper\\n\", \"output\": \"-----\\nThe second string is a permutation of the first\\n-----\\nThe second string is not a permutation of the first\\n\"}]", "test_case_id": "1356", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 130, "total_accepted_number": 66, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1357, "fields": {"title": "Roll Over and Die", "description": "A standard die is a cube on which the numbers 1, 2, 3, 4, 5, 6 appear, one per side, and the sum of numbers on opposite sides is always 7. Initially, a single die is placed on a level table in the initial position\u2015the number 1 facing up, 2 facing north, and 3 facing west. In this problem, a roll of a die is not so much a violently tumbling throw as it is a sequence of careful topples, in each of which the die is simply tipped over onto one of the sides previously facing north, east, south or west. Write a program that can input a roll of a die and determine which number is facing up when the roll ends.", "input_description": "Each line of the input represents a roll of a die starting from the initial position. Each line contains a string of zero or more characters from the alphabet {N, E, S, W}, respectively representing a successive topple to the north, east, south or west.", "output_description": "For each line of input, output the number on the die that is facing up after the given roll of the die, starting from the initial position.", "samples": "[{\"input\": \"NNNNN\\nESSWNN\\nSSSENNNW\\nSENWENSWNNEWSWS\\n\", \"output\": \"5\\n6\\n5\\n2\\n\"}]", "test_case_id": "1357", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 81, "total_accepted_number": 40, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1358, "fields": {"title": "Balls", "description": "Imagine a two-dimensional view of a pool table (without pockets) seen from directly above. If a single ball is placed on the table and rolled with some velocity, it bounces around the table, rebounding away from a side at the same angle it enters. In this problem, we assume the ball travels at constant speed, rebounds precisely whenever it touches a side,<p></p>and rolls forever. If the starting position is known, where will the ball be after a given amount of time?", "input_description": "The input consists of zero or more scenarios. The first line of each scenario contains seven integers l, w, x0, y0, r, vx, vy. l > 0 and w > 0 are the length and width of the table in feet from side to side. x0 \uff1e 0 and y0 \uff1e0 specify the initial coordinates (x0, y0) of the center of the ball in feet from the lower left corner. r \uff1e 0 is the radius of the ball in feet. vx and vy are the x- and y-components of the initial velocity vector (vx, vy) in feet per second.\nThe subsequent lines of each scenario contain an integer t \uff1e\uff1d 0 specifying an amount of time in seconds elapsed since the ball started rolling from its initial coordinates. The last line of each scenario is empty. In each scenario, you may assume the ball\u2019s initial position and radius are such that the ball does not touch or protrude beyond the sides of the table.", "output_description": "For each scenario and each time t, compute the position of the ball after t seconds\u3000have elapsed, and output the coordinates (xt, yt) of the center of the ball in feet from the\u3000lower left corner.", "samples": "[{\"input\": \"10 6 3 3 1 3 2\\n0\\n1\\n2\\n3\\n4\\n10\\n100\\n1000\\n\\n50 75 42 31 3 7 13\\n0\\n15\\n5\\n20\\n10\", \"output\": \"Time   Position\\n\\n   0   (3,3)\\n   1   (6,5)\\n   2   (9,3)\\n   3   (6,1)\\n   4   (3,3)\\n  10   (1,3)\\n 100   (3,3)\\n1000   (7,3)\\n\\nTime   Position\\n\\n   0   (42,31)\\n  15   (35,56)\\n   5   (17,48)\\n  20   (6,15)\\n  10   (24,23)\\n\"}]", "test_case_id": "1358", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 90, "total_accepted_number": 18, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1359, "fields": {"title": "Dating Game", "description": "Old bones and artifacts can be dated using a technique known as radioactive dating. When an artifact is created, it contains some amount of material (e.g., carbon 14) which emits radioactive particles. Over time, the radioactive substance decays and emits particles more and more slowly. The amount of of radioactive material never reaches zero, it just reduces geometrically. The amount of time it takes for the rate of radioactive particle emissions to cut in half is constant and is known as the half-life. By knowing the half-life and the initial emissions rate, and measuring the current emissions rate, the age of an artifact can be computed.<p></p>For example, if the half-life of the radioactive substance is 3 years and the emissions rate was initially 16 and is now 4, then the emissions rate has been cut in half twice, so the artifact must be two half-lives old, or 6 years old.", "input_description": "Each line of input contains three real numbers, h, i and c describing an artifact. h > 0 is the known half-life of the radioactive substance in years, i > 0 is the known initial emissions rate, and 0 < c <= i is the measured current emissions rate.", "output_description": "For each artifact, compute and output the age of the artifact in years.", "samples": "[{\"input\": \"   3.0     16.0   4.0\\n  25.0   1000.0   1.0\\n  10.0     58.0   0.01\\n   1.0      8.0   1.0\\n1000.0  25500.0   0.00002\\n\", \"output\": \"Age:      6.00 years\\nAge:    249.14 years\\nAge:    125.02 years\\nAge:      3.00 years\\nAge:  30247.85 years\\n\"}]", "test_case_id": "1359", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 104, "total_accepted_number": 74, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1360, "fields": {"title": "example", "description": "<p></p>", "input_description": "\n", "output_description": "\n\n", "samples": "[{\"input\": \"\\n\\n\", \"output\": \"\\n\\n\"}]", "test_case_id": "1360", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1361, "fields": {"title": "Clock Spread", "description": "The motion of the hands of a clock is mesmerizing. The second hand revolves once a minute, the minute hand revolves once an hour, and the hour hand revolves once every 12 hours. Have you ever wondered what the exact angles of the hands are at a given time?", "input_description": "Each line of the input file contains a clock time, expressed in hours, minutes, and seconds. Each number in the time appears in a two column field, separated by single colons. Hours are between 1 and 12, and minutes and seconds are between 0 and 59.", "output_description": "For each time input, Output the time and compute the exact angle of the hour, minute and second hands. Express the angles in degrees clockwise from straight up, at least 0.0 and less than 360.0. Format the output as shown in the sample below.", "samples": "[{\"input\": \" 6:00:00\\n 8:30:00\\n10:17:55\", \"output\": \"At 6:00:00...\\n  Hour hand orientation: 180.00 degrees,\\nMinute hand orientation:  0.00 degrees,\\nSecond hand orientation:  0.00 degrees.\\n\\nAt 8:30:00...\\n  Hour hand orientation: 255.00 degrees,\\nMinute hand orientation: 180.00 degrees,\\nSecond hand orientation:   0.00 degrees.\\n\\nAt 10:17:55...\\n  Hour hand orientation: 308.96 degrees,\\nMinute hand orientation: 107.50 degrees,\\nSecond hand orientation: 330.00 degrees.\\n\"}]", "test_case_id": "1361", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1018, "total_accepted_number": 169, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1362, "fields": {"title": "Lunch Plan", "description": "Dr. Rich leaves work to eat lunch every day, but is faced with a difficult decision about where to eat. On a given day, the choice depends on his appetite for a restaurant\u2019s food, its distance from work, and the number of days since last eating there. In this problem, we compute a sequence of the most desirable places to eat over a period of twenty days.", "input_description": "The input consists of a number of pairs of lines, each specifying information about a restaurant. The first line of each pair contains the name of a restaurant not exceeding 100 characters. The second line of each pair contains two integers a and d. 0\uff1c\uff1da\uff1c\uff1d100 is a measure of Dr. Rich\u2019s appetite for the restaurant\u2019s food, and d\uff1e\uff1d0 is the distance in miles to the restaurant from work.", "output_description": "On a given day, a restaurant\u2019s desirability is computed as\n<img src=uploadFiles\\1362_1.jpg>\nwhere a and d are the Dr. Rich\u2019s appetite for the restaurant\u2019s food and the distance to the restaurant, respectively, and t is the number of days since last eating at the restaurant. Assume t = \u221e if the restaurant has never been visited.\nOutput the most desirable restaurant on each day for a period of twenty days. If two restaurants have the same desirability, pick the one least recently visited. If neither restaurant has been visited, pick the one which comes first alphabetically. Assume Dr. Rich eats at the most desirable restaurant each day.", "samples": "[{\"input\": \"Wendyu2019s\\n90 3\\nChinese\\n95 3\\nThe Deli\\n90 2\\nWienerschnitzel\\n70 6\\nDel Taco\\n50 5\\nKFC\\n55 5\\nCarlu2019s Jr.\\n20 1\\nRed Tomato\\n75 2\\nSubway\\n30 2\\n\", \"output\": \"Day   Restaurant\\n\\n  1   Chinese\\n  2   The Deli\\n  3   Wendy$(quat)s\\n  4   Red Tomato\\n  5   Wienerschnitzel\\n  6   KFC\\n  7   Subway\\n  8   Chinese\\n  9   The Deli\\n 10   Wendy$(quat)s\\n 11   Del Taco\\n 12   Red Tomato\\n 13   Carl$(quat)s Jr.\\n 14   Chinese\\n 15   Wienerschnitzel\\n 16   The Deli\\n 17   KFC\\n 18   Wendy$(quat)s\\n 19   Subway\\n 20   Red Tomato\\n\"}]", "test_case_id": "1362", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 23, "total_accepted_number": 18, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1363, "fields": {"title": "Pipeline", "description": "The Ace Fire Protection company is installing sprinklers in the ceilings of several buildings. The plans specify exactly where the sprinkler heads are located, but leave the piping design to Ace. Ace\u2019s project manager is trying to save money by using the least amount of pipe necessary to connect the sprinklers, so he is only considering piping designs which run pipes in a straight line from one sprinkler head to another, while still allowing water to flow between any two sprinkler heads (possibly through other sprinklers).", "input_description": "The input consists of zero or more building plans, each specifying the number of sprinkler heads to be installed and their coordinate locations on the ceiling. Coordinates (x, y) specify a location x feet east and y feet north of a fixed origin. The first line of each building plan contains the number of sprinkler heads n\uff1e\uff1d2. The n subsequent lines\nof each building plan contain a distinct number between 1 and n identifying the sprinkler\u3000followed by the coordinates (x, y) of the sprinkler head.", "output_description": "For each building plan, compute which sprinklers should be directly connected in order\u3000to use the least total length of pipe while still allowing water to flow (directly or indirectly)\u3000between any two sprinkler heads. For each connecting pipe, report the length of pipe used\u3000and the numbers of the sprinkler heads it connects. Finally, report the total length of pipe\u3000used in the building.", "samples": "[{\"input\": \"3\\n1  1.0   2.0\\n2  5.0   5.0\\n3  2.0   2.0\\n7\\n3  1.0   5.0\\n5  0.0   6.0\\n7  9.0   7.0\\n1  4.0   4.0\\n4  2.0   9.0\\n2  1.0   6.0\\n6  3.0   7.0\\n\", \"output\": \"    4.24 ft connects 2 to 3\\n    1.00 ft connects 3 to 1\\n--------\\n    5.24 ft total pipe used\\n\\n    1.00 ft connects 5 to 2\\n    5.83 ft connects 7 to 1\\n    3.16 ft connects 1 to 3\\n    2.24 ft connects 4 to 6\\n    1.00 ft connects 2 to 3\\n    2.24 ft connects 6 to 2\\n--------\\n   15.47 ft total pipe used\\n\\n\"}]", "test_case_id": "1363", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 22, "total_accepted_number": 13, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1364, "fields": {"title": "Word Walk", "description": "Given two words from a dictionary, is it possible to find a word walk\u2015a sequence of\u3000words from the dictionary, starting with the first word and ending with the second word,\u3000such that each word in the sequence can be obtained from the previous one by changing,\u3000prepending or appending a single character? Can you find a shortest word walk?", "input_description": "The input contains a dictionary followed by one or more trials. The first line of\u3000the dictionary contains an integer 2 \uff1c\uff1dn\uff1c\uff1d1000 specifying the number of words in the\u3000dictionary. The n subsequent lines of the dictionary contain a word of length at most 100.\u3000Each trial consists of an empty line followed by two lines containing distinct words x and\ny from the dictionary.", "output_description": "For each trial, find and output a shortest word walk from x to y and the number of\u3000steps to get from x to y. The length of a word walk is the number of steps it takes to walk\u3000from the first word to the last word. If none exists, report that there is no word walk from\u3000x to y.", "samples": "[{\"input\": \"7\\nhead\\nhere\\nthere\\nherd\\nbear\\near\\nart\\n\\nhead\\nthere\\n\\near\\nhere\\n\", \"output\": \"A word walk of 3 steps from head to there is:\\nhead,herd,here,there\\n\\nThere is no word walk from ear to here\\n\\n\"}]", "test_case_id": "1364", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 30, "total_accepted_number": 9, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1365, "fields": {"title": "Commutation", "description": "A permutation of a string is a string obtained by rearranging the symbols in the\u3000string. The composition of two permutations is the string obtained by applying the second\u3000permutation to the result of the first permutation. In this problem, we decide whether given pairs of permutations commute; that is, whether the order in which a given pair of<p></p>permutations is applied makes any difference to the result of a composition. Formally, a n-symbol permutation is a function  \u03c0: {1, . . . , n}\uff0d\uff1e{1, . . . , n} which is\u30001-1 and onto. An n-symbol permutation \u03c0 can be presented as a vector<p></p>\u3000\u03c0 = (\u03c0(1), \u03c0(2), . . . , \u03c0(n)).<p></p>If \u03c0 is an n-symbol permutation and x is an n-symbol string whose symbols are<p></p>x = x1x2 . . . xn,<p></p>then the result of the permutation \u03c0 applied to x is<p></p>\u03c0(x) = x\u03c0(1)x\u03c0(2) . . . x\u03c0(n).<p></p>In other words, the symbol in position i of the result comes from position \u03c0(i) of the source\u3000string. For example, if \u03c0 = (2, 1, 3), \u03c0\uff07 = (3, 2, 1), and x = ABC, then<p></p>\u03c0\uff08x) = BAC<p></p>\u03c0\uff07(x) = CBA<p></p>\u03c0\uff08\u03c0\uff07(x)\uff09= BCA<p></p>\u03c0\uff07\uff08\u03c0(x)\uff09= CAB", "input_description": "The input consists of zero or more groups of data. The first line of each group contains\u3000a positive number n denoting the length of permutations in the group. Subsequent lines\u3000in the group contain vectors representing n-symbol permutations \u03c01, \u03c02, \u03c03, . . . , \u03c0g, where\u3000g is the number of permutations in the group. The last line of each group is empty and\u3000serves to delimit the group.", "output_description": "For each group of data, output all pairs of indexes i, j such that 1 \uff1c\uff1di < j \uff1c\uff1d g and \u03c0i\u3000and \u03c0j commute; i.e., for all n-symbol strings x,\u3000\u03c0i\uff08\u03c0j(x)\uff09= \u03c0j\uff08\u03c0i(x)\uff09.", "samples": "[{\"input\": \"3\\n1 2 3\\n1 3 2\\n2 1 3\\n2 3 1\\n3 1 2\\n3 2 1\\n\\n6\\n1 3 2 4 6 5\\n3 1 2 6 4 5\\n1 2 5 6 3 4\\n6 5 4 3 2 1\\n2 3 1 5 6 4\\n2 3 4 6 5 1\\n\", \"output\": \"Commutative Permutations:\\n\\n          1          2\\n          1          3\\n          1          4\\n          1          5\\n          1          6\\n          4          5\\n\\nCommutative Permutations:\\n\\n          2          5\\n\\n\"}]", "test_case_id": "1365", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 89, "total_accepted_number": 17, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1366, "fields": {"title": "Revelation", "description": "A simple way to compress binary strings is to break the string into substrings of\u3000equal length called blocks, and replace each block in the source string with a predeter-\u3000mined replacement string. Replacement strings may be of varying lengths, and the best\u3000compression results if the most common blocks in the source string are replaced with the<p></p>shortest replacement strings. In order that we can recover the original source string from\u3000a compressed string without confusion, we require that no replacement string is a prefix of\u3000any other replacement string; this property is known as the unique prefix property. The\u3000unique prefix property guarantees that we can decompress and recover the original source\u3000string by scanning the compressed string from left to right, and whenever we\u2019ve seen a\u3000replacement string, we replace it with its corresponding source block.", "input_description": "The first line of input contains a positive number n denoting the block length. The\u3000subsequent lines of input contain the replacement table which is followed by an empty line.\u3000In each line of the replacement table, the first n characters contain a binary source block,\u3000followed by a single blank, followed by the binary string which replaces the source block\u3000in compressed strings, followed by the end of line. Each of the remaining lines of input\u3000constitute a compressed string obtained using the replacement table.", "output_description": "For each of the compressed strings in the input, output a line containing the source\u3000string from which the compressed string was obtained using the replacement table.", "samples": "[{\"input\": \"3\\n000 0\\n001 1010\\n011 1011\\n100 1000\\n110 1001\\n111 11\\n\\n000000\\n0111111110\\n010101111110\\n01000101111110\\n011011110\\n01110011010110\\n01111100010110\\n011111100\\n011111110010\\n000000\\n\", \"output\": \"000000000000000000\\n000111111111111000\\n000001111111111000\\n000100011111111000\\n000111000111111000\\n000111110001111000\\n000111111100011000\\n000111111111000000\\n000111111111110000\\n000000000000000000\\n\"}]", "test_case_id": "1366", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 21, "total_accepted_number": 20, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1367, "fields": {"title": "Spin Cycle", "description": "To propel a bicycle, the rider turns a crank which is connected by a chain to the rear\u3000wheel. Both the crank and the rear wheel may have one or more sprockets with teeth\u3000that the chain engages. For example, a ten-speed bicycle has two crank sprockets and\u3000five rear wheel sprockets, allowing ten different combinations, or gears, to be used. For<p></p>a particular combination of sprockets, the gear ratio is the number of teeth on the crank\u3000sprocket divided by the number of teeth on the rear wheel sprocket. For example, a gear\u3000ratio of two causes each turn of the crank to turn the rear wheel twice. First gear is the\u3000combination with the smallest gear ratio, second gear is the combination with the next\u3000smallest gear ratio, and so on. The distance a bicycle travels with each turn of the crank\u3000is a function of the wheel diameter and the gear ratio.", "input_description": "The first line contains the number of crank sprockets c, the number of rear wheel\u3000sprockets w, and the diameter d of the rear wheel in inches. The second line contains the\u3000number of teeth for each of the c \uff1e\uff1d 1 crank sprockets. The third line contains the number\u3000of teeth for each of the w \uff1e\uff1d 1 rear wheel sprockets. The remaining lines of input describe\u3000a bicycle tour, where each line specifies a number of crank revolutions in a certain gear. In\u3000the input sample below, the tour starts with 24 crank revolutions in first gear, and ends\u3000with 120 crank revolutions in eighth gear.", "output_description": "Output a table showing the gear ratios for each sprocket combination in ascending\u3000order. Compute and output the total distance traveled on the tour in feet. Format the\u3000output as shown in the sample below.", "samples": "[{\"input\": \"2 5 27.0\\n52 39\\n28 24 20 17 14 \\n    24 1\\n    30 2\\n    14 4\\n   120 8\\n\", \"output\": \"Gear   Ratio\\n  1   1.39286\\n  2   1.62500\\n  3   1.85714\\n  4   1.95000\\n  5   2.16667\\n  6   2.29412\\n  7   2.60000\\n  8   2.78571\\n  9   3.05882\\n 10   3.71429\\n\\nDistance traveled: 3136.79 ft\\n\"}]", "test_case_id": "1367", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 31, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1368, "fields": {"title": "Stamps", "description": "When you mail a letter through the Postal Service, you must place a stamp in the\u3000upper right corner of the letter. Due to increased automation, the Postal Service uses a\u3000scanner to look at the letter and see if the stamp is in the right place. If any part of\u3000the rectangular stamp protrudes outside a designated containment rectangle, the letter is\u3000rejected. Given the height and width of the containment rectangle and the height and\u3000width of the stamp, we nvestigate in this problem whether the stamp can possibly be\u3000contained in the rectangle when the stamp is rotated at various\u3000angles.", "input_description": "The input consists of zero or more groups of data. The first line of each group contain\u3000four positive real numbers hs,ws, hc,wc, where hs,ws are the height and width of a stamp\u3000and hc,wc are the height and width of a containment rectangle. Subsequent lines in a group\u3000contain a real number 0 \uff1c\uff1d\u03b8 < 360 representing an angle of stamp rotation in degrees.\u3000A rotation of 0 degrees indicates that the stamp is oriented upright. As \u03b8 increases, the\u3000stamp rotates counterclockwise. The last line of each group is empty and serves to delimit\u3000the group.", "output_description": "For each angle in a group, decide whether it is possible to place the stamp oriented\u3000at the given angle such that it does not protrude outside the containment rectangle, and\u3000output a line reporting the decision as shown in the output sample below.", "samples": "[{\"input\": \"3.0 4.0 3.5 5.0\\n0.0\\n45.0\\n90.0\\n135.0\\n180.0\\n225.0\\n270.0\\n315.0\\n\\n2.0 42.0 30.0 40.0\\n0.0\\n5.0\\n10.0\\n15.0\\n20.0\\n25.0\\n30.0\\n35.0\\n40.0\\n45.0\\n50.0\\n\", \"output\": \"    0.0 Degrees:  Stamp Containment Possible\\n   45.0 Degrees:  Stamp Containment Impossible\\n   90.0 Degrees:  Stamp Containment Impossible\\n  135.0 Degrees:  Stamp Containment Impossible\\n  180.0 Degrees:  Stamp Containment Possible\\n  225.0 Degrees:  Stamp Containment Impossible\\n  270.0 Degrees:  Stamp Containment Impossible\\n  315.0 Degrees:  Stamp Containment Impossible\\n\\n    0.0 Degrees:  Stamp Containment Impossible\\n    5.0 Degrees:  Stamp Containment Impossible\\n   10.0 Degrees:  Stamp Containment Impossible\\n   15.0 Degrees:  Stamp Containment Impossible\\n   20.0 Degrees:  Stamp Containment Impossible\\n   25.0 Degrees:  Stamp Containment Possible\\n   30.0 Degrees:  Stamp Containment Possible\\n   35.0 Degrees:  Stamp Containment Possible\\n   40.0 Degrees:  Stamp Containment Possible\\n   45.0 Degrees:  Stamp Containment Impossible\\n   50.0 Degrees:  Stamp Containment Impossible\\n\\n\\n\"}]", "test_case_id": "1368", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 41, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1369, "fields": {"title": "Translation", "description": "A page on the World Wide Web may contain hypertext references, or links, to other\u3000pages on the Web. This is accomplished by insuring that each page has a unique string\u3000address (known as a URL), and each link specifies the address of the page to be visited when\u3000one clicks on the hypertext link. Web page authors are allowed to use either fully qualified\u3000addresses or a variety of shorter address forms which have some implied information. In this<p></p>problem, we\u2019ll implement a program which reads a sequence of translation rules followed\u3000by a sequence of strings to be translated. For each string to be translated, the translation\u3000rules are applied in succession, potentially transforming the original string (e.g., a short\u3000Web address) into another string (e.g., a fully qualified Web address).", "input_description": "The input consists of one or more nonempty lines containing translation rules, followed by an empty line, followed by one or more nonempty lines containing strings to be\u3000translated. Each translation rule has the form\u3000matchtype x action y\u3000where matchtype is either prefix, suffix, or substring; x and y are strings of ASCII\u3000characters not containing blanks, and action is either prepend, append, or replace. The\u3000four parts of each translation rule are separated by single blanks.", "output_description": "For each string z to be translated, successively apply the translations rules in the\u3000order given, and output the resulting string. A prefix rule applies only if x is a prefix of\u3000z; a suffix rule applies only if x is a suffix of z; and a substring rule applies only if x\u3000is a substring z. Note that the empty string occurs as a prefix and a suffix of z, and as\u3000a substring before and after every character in z. If the action is prepend, concatenate y\u3000onto the beginning of the string; if the action is append, concatenate y onto the end of the\u3000string; if the action is replace, replace the first occurrence of x in the string with y.", "samples": "[{\"input\": \"prefix // prepend http:\\nprefix / prepend http://jazz.sci.csupomona.edu\\nsuffix / append index.html\\nsubstring /~ replace /user/\\n\\nhttp://jazz.sci.csupomona.edu/\\n/~carich/\\n/this/one.html\\n//jazz.sci.csupomona.edu/\\n\", \"output\": \"http://jazz.sci.csupomona.edu/index.html\\nhttp://jazz.sci.csupomona.edu/user/carich/index.html\\nhttp://jazz.sci.csupomona.edu/this/one.html\\nhttp://jazz.sci.csupomona.edu/index.html\\n\"}]", "test_case_id": "1369", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 7, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1370, "fields": {"title": "Webs", "description": "On the World Wide Web, a page can contain hypertext links which lead you to other\u3000pages. One of the Webmaster\u2019s concerns is to determine which pages are accessible by\u3000following links from a designated home page, and which pages are inaccessible.", "input_description": "The first line contains a positive number n denoting the number of Web pages. The\u3000rest of the input contains n groups of data describing the links on the n pages. The first line\u3000of each group contains a positive source page number between 1 and n. The subsequent\u3000lines of a group contain a positive destination page between 1 and n to which you can be\u3000led by a link from the source page. The last line of each group is empty and serves to\u3000delimit the end of the group.", "output_description": "Assuming the home page is 1, give the list of pages which is accessible by following\u3000links from the home page, and the list of pages which is inaccessible.", "samples": "[{\"input\": \"4\\n2\\n        4\\n        1\\n\\n3\\n        1\\n        2\\n        4\\n\\n1\\n        2\\n\\n4\\n\\n\\n\\n\", \"output\": \"Pages accessible from the home page:\\n\\n          1\\n          2\\n          4\\n\\nPages not accessible from the home page:\\n\\n          3\\n\\n\"}]", "test_case_id": "1370", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 91, "total_accepted_number": 24, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1371, "fields": {"title": "Bowlerama", "description": "Bowling is a game requiring many talents\u2015the ability to lift and throw a sixteen\u3000pound ball, a keen fashion eye for really gaudy clothes, and the advanced mathematical\u3000skills necessary to keep score. Computers aren\u2019t much help in lifting or dressing, but they\u3000are fine tools for keeping score. In this problem, we will write a program which keeps score\u3000in bowling.<p></p>In bowling, the basic idea is to roll the ball toward standing wooden pins, trying to\u3000knock down as many as possible. A game consists of ten frames. Each frame begins with\u3000ten pins standing, and the bowler is given a first roll to knock down as many pins as\u3000possible, and a second roll (if any pins are left standing after the first roll) to knock down<p></p>as many of the remaining pins as possible. If all ten pins are knocked down after the first\u3000roll, it is called a strike. If all ten pins are knocked down after the second roll, it is called\u3000a spare. If some pins remain standing after the second roll, it is called an open frame.\u3000Points are accumulated in each frame by a few simple rules. If there is a strike in a\u3000frame, that frame contributes ten points plus the number of pins knocked down on the<p></p>next two rolls (in the subsequent one or two frames). If there is a spare in a frame, that\u3000frame contributes ten points plus the number of pins knocked down on the next one roll\u3000(in the subsequent frame). If there is an open frame, that frame contributes the number of\u3000pins knocked down in that frame alone. Notice that the two rolls following a strike or the\u3000single roll following a spare make a contribution to the score in more than one frame\u2015the<p></p>frame in which they are rolled as well as some previous frame(s) in which a spare or strike\u3000was rolled. In a run of consecutive strikes, a roll can actually contribute to the score in\u3000three frames.<p></p>Because of the scoring convention, if a spare or strike occurs in the tenth frame, one\u3000or two additional frames may be rolled as necessary to determine the points contributed\u3000in the tenth frame. The final score is the total points contributed by the first ten frames.", "input_description": "Each line of the input represents a game and contains a list of numbers recording how\u3000many pins were knocked down by each roll of the ball.", "output_description": "Each line shows the running score of the corresponding game in the input and contains\u3000ten numbers showing the accumulated score after each of the first ten frames. The last\u3000number in each line is the final score.", "samples": "[{\"input\": \"   6 4    10    10   6 3   9 1   8 1    10    10   8 2   8 2   9\\n    10   5 5    10   9 1   8 0   6 3    10    10    10    10   8 2\\n\", \"output\": \"    20    46    65    74    92   101   129   149   167   186\\n    20    40    60    78    86    95   125   155   183   203\\n\\n\"}]", "test_case_id": "1371", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 16, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1372, "fields": {"title": "CD Siesta", "description": "Dr. Rich has a large collection of compact discs (CDs) and a CD player which can\u3000hold a limited number of CDs at once in various trays. It is unnecessary for him to get up\u3000from his comfortable chair to play the next one as long as it\u2019s already in the CD player.\u3000On the other hand, if the CD he wants to hear next is not in the CD player, he must get<p></p>up to put it in. If there is an empty tray in the CD player, he\u2019ll put the CD he wants\u3000to hear in an empty tray. This is called a load. If there are no empty trays in the CD\u3000player, he\u2019ll remove a CD and replace it with the one he wants to hear. This is called a\u3000swap. When making a swap, Dr. Rich always removes the CD which he has listened to<p></p>least recently among those currently in the CD player. We will assume that at the outset\u3000of his listening session, all trays are empty.", "input_description": "The first line of the input contains a positive number which is the number of trays in\u3000Dr. Rich\u2019s CD player. The subsequent lines contain the list of CD titles which Dr. Rich\u3000wants to hear. Each title consists of exactly the characters on a line, and will have no\u3000more than 80 characters.", "output_description": "For each CD title in the input, output a line containing either the message \u201cload\u201d, if a\u3000load occurred, \u201cswap out title\u201d, if a swap occurred and the CD named title was removed,\u3000or \u201cplay\u201d, if neither a load or swap was necessary. Finally, output the name of the CD\u3000which was in the CD player longest among those in the CD player at the end.", "samples": "[{\"input\": \"4\\nHootie and the Blowfish - Cracked Rear View\\nPrince - 1999\\nArthur Rubinstein - The Chopin Mazurkas\\nNanci Griffith - Other Voices / Other Rooms\\nBonnie Raitt - Luck of the Draw\\nPrince - 1999\\nHootie and the Blowfish - Cracked Rear View\\nSheryl Crow - Tuesday Night Music Club\\nArthur Rubinstein - The Chopin Mazurkas\\nPrince - 1999\\nSheryl Crow - Tuesday Night Music Club\\n\", \"output\": \"load\\nload\\nload\\nload\\nswap out Hootie and the Blowfish - Cracked Rear View\\nplay\\nswap out Arthur Rubinstein - The Chopin Mazurkas\\nswap out Nanci Griffith - Other Voices / Other Rooms\\nswap out Bonnie Raitt - Luck of the Draw\\nplay\\nplay\\n\\nCD in the player longest at the end:\\n\\nPrince - 1999\\n\\n\"}]", "test_case_id": "1372", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 112, "total_accepted_number": 17, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1373, "fields": {"title": "Factor Eyes", "description": "When you look at a number, what do you see? Do its prime factors dance into your\u3000head? The prime factors of a number is the list of one or more primes whose product is\u3000the number. In this problem, we\u2019ll write a program which outputs the prime factors of\u3000some given numbers.", "input_description": "Each line of input contains a single number n such that 2 \uff1c\uff1d n < 2^31.", "output_description": "For each number in the input, echo the number and output its prime factors.", "samples": "[{\"input\": \"324\\n2301117\\n152438736\\n\", \"output\": \"        324 has prime factors 2 2 3 3 3 3\\n    2301117 has prime factors 3 7 13 8429\\n  152438736 has prime factors 2 2 2 2 3 677 4691\\n\"}]", "test_case_id": "1373", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 153, "total_accepted_number": 73, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1374, "fields": {"title": "Knight Trip", "description": "In the game of Chess, pieces move about on an n\u00d7n grid of squares. In a single move, a piece can go from one square to one of a set of squares depending on the type of piece. In this problem, we are interested in the movement of the piece known as the Knight. In a single move, a Knight can traverse two squares horizontally or vertically followed by one square in a perpendicular direction. If we imagine the squares as having coordinate \u201caddresses\u201d (x, y) where x and y are positive integers, then for example a Knight can move from (3, 5) to one of (4, 7), (5, 6), (5, 4), (4, 3), (2, 3), (1, 4), (1, 6), or (2, 7). There are at most eight squares to which a Knight can go in a single move, and possibly fewer since the Knight is not allowed to go to an address outside the n\u00d7n grid. In this problem, we seek to find the least number of successive moves required for a Knight to go from a given address to any other address within the n\u00d7n grid.", "input_description": "Each line of the input contains three positive integers. The first number is the dimen- sion n of the square grid on which the Knight moves. We will assume the square in its lower right corner has address (n, 1), and the square in its upper left corner has address (1, n). The second number x and third number y are between 1 and n and give the coordinates of the starting address (x, y) of the Knight on the grid.", "output_description": "For each line of input, output an n\u00d7n grid of numbers, each showing the minimum number of successive moves required for a Knight to reach that address in the grid from the starting address (x, y). If a square on the grid cannot be reached from the starting address (x, y), output -1 in that position of the output grid.", "samples": "[{\"input\": \"8   6 5\\n4   1 1\\n3   2 3\\n\", \"output\": \"Minimum number of moves from (6,5) on a 8 by 8 board:\\n\\n   4   3   2   3   2   3   2   3\\n   3   2   3   4   1   2   1   4\\n   4   3   2   1   2   3   2   1\\n   3   2   3   2   3   0   3   2\\n   4   3   2   1   2   3   2   1\\n   3   2   3   4   1   2   1   4\\n   4   3   2   3   2   3   2   3\\n   3   4   3   2   3   2   3   2\\n\\nMinimum number of moves from (1,1) on a 4 by 4 board:\\n\\n   5   2   3   2\\n   2   1   4   3\\n   3   4   1   2\\n   0   3   2   5\\n\\nMinimum number of moves from (2,3) on a 3 by 3 board:\\n\\n   3   0   3\\n   2  -1   2\\n   1   4   1\\n\\n\"}]", "test_case_id": "1374", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 53, "total_accepted_number": 32, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1375, "fields": {"title": "Restrung", "description": "In this problem, we seek to locate permutations of one string which appear as sub- strings of another string. A permutation of a string is a string of the same length which can be obtained by rearranging the characters of the original string. Of course, I don\u2019t have to tell you that the number of permutations of a long string can be enormous, and that there is a time limit on programs being judged.", "input_description": "The input consists of one or more groups, and each group consists of three lines of input. The first line in each group contains a search string and the second line in each group contains a target string. The search and target strings consist at most 132 lower case letters (\u2019a\u2019..\u2019z\u2019). The third line in each group is empty, and serves to separate the\ngroup from the next group.", "output_description": "For each group, locate all the starting positions within the target string where a permutation of the search string can be found. For each such substring located, output a line which gives the permutation found and the position at which it was found.", "samples": "[{\"input\": \"abc\\nabcaacb\\n\\ncraigrich\\ncaijgrichacrigichrciacharch\\n\", \"output\": \"Permutations found:\\n\\nabc found at position 1\\nbca found at position 2\\nacb found at position 5\\n\\nPermutations found:\\n\\ngrichacri found at position 5\\nrichacrig found at position 6\\nacrigichr found at position 10\\n\\n\"}]", "test_case_id": "1375", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 82, "total_accepted_number": 44, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1376, "fields": {"title": "Shingles", "description": "Flatland is a two-dimensional world where life goes on in the Euclidean plane. People and houses appear as stick figures and drops of rain appear as points. Houses have roofs made of flat shingles, which appear as sticks or segments in Flatland. Shingles are layed one over another so that falling raindrops will run off the roof. In this problem, we will trace the path followed by a raindrop in Flatland as it traverses over a roof of shingles.", "input_description": "The input consists of one or more groups. The first line of each group contains two numbers. The first is the number n \u0015 0 of shingles comprising the roof. The second is a real number giving the x-coordinate along which the raindrop falls vertically downward. You can imagine that the raindrop originates at (x,1). The next n lines each contain\nfour real numbers x1, y1, x2, y2 which describe the endpoints (x1, y1), (x2, y2) of a shingle, which is a line segment. You can assume that no two shingles intersect or share any points in common.", "output_description": "For each group of input, the raindrop follows a path originating from (x,1). It falls vertically downward until it intersects a shingle, call this point p1; then slides downward to the lower endpoint of the shingle, call this point p2; then falls vertically downward until it intersects another shingle, call this point p3; then slides down... and so on. If a raindrop falls and intersects a shingle that is perfectly horizontal, its path ends \u201cpuddled\u201d at that point. If puddling never happens, its path will eventually end \u201cfalling\u201d from the lower endpoint of the last shingle it intersects. For each group of input, output the coordinates of the points p1, p2, p3, . . . on the path it follows downward over the shingles. Finally, output \u201cpuddled\u201d or \u201cfalling\u201d to indicate how the path ends.", "samples": "[{\"input\": \"3  0.0\\n       -3.0 5.0   0.0 4.0\\n        1.0 3.0  -1.0 3.0\\n       -2.0 5.0   2.0 6.0\\n0  2.5\\n1  1.0\\n        0.0 5.0   3.0 4.0\\n\", \"output\": \"Path travelled on shingles by water drop:\\n\\n    0.00    5.50\\n   -2.00    5.00\\n   -2.00    4.67\\n    0.00    4.00\\n    0.00    3.00 ...puddled\\n\\nPath travelled on shingles by water drop:\\n ...falling\\n\\nPath travelled on shingles by water drop:\\n\\n    1.00    4.67\\n    3.00    4.00 ...falling\\n\\n\"}]", "test_case_id": "1376", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 8, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1377, "fields": {"title": "Accurate addition of two numbers", "description": "When we write a program in C program language, we will find if the number is too accurate (There are many digital numbers after the decimal point), we can\u2019t get the correct results. For example, if we add 5.121213124312446456463435 and 230.3424234 together, we will get the results of 235.4636365786654400000000000 (use the printf(\u201c%.25lf\u201d,k) function, where k is the addition of the two numbers) , the result is not that of our expectation.<p></p>   Now, you task is to write a program which can get the accurate result of the addition. <p></p>", "input_description": "First line of input is an integer number n: the number of test cases. The following n lines contain n cases.  Each line contains two numbers which are to be added. They are separated by a space. ", "output_description": "Output the accurate results of these additions. Each result contains a line. The last digit of each number after the decimal point can\u2019t be 0.", "samples": "[{\"input\": \"2\\n2.343434343436456 4.45454234234\\n3254.4356435433345 4.34653467689\\n\", \"output\": \"6.797976685776456\\n3258.7821782202245\\n\"}]", "test_case_id": "1377", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 266, "total_accepted_number": 86, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1378, "fields": {"title": "Calculation of \uff08a^ b\uff09%n", "description": "It will spend much time to calculate the above expression if b is very big, could we make it faster? Please write a program to do it!", "input_description": " Input includes a number of test cases. Each case contains a line, each line contains three integers: a, b and n, where 0\uff1ca\uff1c=1000, 0\uff1cb\uff1c=1000000, 0\uff1cn\uff1c=1000.", "output_description": " Output the results of the expression (a ^ b) %n, each output contains a line.", "samples": "[{\"input\": \"10 2 8\\n5 4 30\\n\", \"output\": \"4\\n25\\n\"}]", "test_case_id": "1378", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 761, "total_accepted_number": 239, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1379, "fields": {"title": "Cat Nap", "description": "You\u2019re sick at home, trying to catch up on sleep, but the rapid-fire events of the O.J. Simpson trial keep waking you up. This program will calculate the longest available nap time between successive events.", "input_description": "Each line of the input file contains the time of an event, expressed in number of hours, minutes, and seconds since midnight. Each number appears in a two column field, separated by single colons. Hours are between 0 and 23, and minutes and seconds are between 0 and 59. The times are presented in chronological order and all occur within one\nday starting at midnight. There will be at least two events.", "output_description": "Compute the longest duration between the times of two successive events, and output a line containing the times of those successive events and the duration between them, in the same form as the input times.", "samples": "[{\"input\": \"2:16:32\\n 5:44:31\\n 9:12:37\\n12:48:36\\n15:50:10\\n18:11:01\\n\", \"output\": \"A longest nap is from 9:12:37 to 12:48:36 of duration 3:35:59\\n\"}]", "test_case_id": "1379", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 296, "total_accepted_number": 64, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1380, "fields": {"title": "Lucky Rabbit", "description": "Rabbit is a cleaver animal, in order to escape from danger, he always drugs more than one caves. In order to make the question simple, we have numbered his caves from 0 to n-1. A wolf around the caves wants to catch the rabbit hiding in a cave. When he begins to search the rabbit, he would keep a rule: each time he will begin from a cave numbered 0 and count m numbers from it in ascend order, if he finds the rabbit, he will stop searching, or he will continue and if the number he counted has exceeded n-1, he will start from 0 again. However, if the rabbit is lucky enough (that\u2019s to say he can find a cave the wolf never find at that time), the wolf will never find the rabbit at that time. ", "input_description": "Input includes a number of test cases. Each case contains a line, each line contains two integer numbers n and m (1\uff1cm\uff1cn\uff1c100000000), where n is the number of caves, m is the caves he will count at each time.", "output_description": "For each case, output Yes if the rabbit will be caught by the wolf; output No at the other hand. Each output contains a line.", "samples": "[{\"input\": \"5 3\\n6 3\\n\", \"output\": \"No\\nYes\\n\"}]", "test_case_id": "1380", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 219, "total_accepted_number": 55, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1381, "fields": {"title": "Prime Gap", "description": "How far is it from one prime number to the next? In this problem, we\u2019ll write a\u3000program which produces a report of the \u201cinterprime gaps\u201d. An interprime gap is the\u3000difference between a prime number and the next larger prime number. The interprime gap\u3000between the first two prime numbers, 2 and 3, is 1. Since all prime numbers bigger than<p></p>2 are odd, all other interprime gaps are divisible by 2.", "input_description": "Each line of the input contains a positive number n between 2 and 100,000\uff0e", "output_description": "For each number n which is input, compute the number of prime numbers between\u30002 and n, inclusive. Also produce a report listing by increasing size all of the interprime\u3000gaps which occur within those prime numbers and how often (i.e., the frequency) each\u3000interprime gap occurs.", "samples": "[{\"input\": \"20\\n200\\n\", \"output\": \"Primes found between 2 and 20: 8\\n\\nInterprime Gap   Frequency\\n       1              1\\n       2              4\\n       4              2\\n\\nPrimes found between 2 and 200: 46\\n\\nInterprime Gap   Frequency\\n       1              1\\n       2             15\\n       4             13\\n       6             12\\n       8              1\\n      10              2\\n      14              1\\n\\n\"}]", "test_case_id": "1381", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 266, "total_accepted_number": 71, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1382, "fields": {"title": "Relation between two rectangles", "description": "Relations between two rectangles in the same plane are: in, out and partly in partly out. If coordinates of four points for the rectangles are known, we can decide their relations.", "input_description": "Input includes a number of test cases. Each case contains a line and each line contains 8 points, each point contains two double numbers: X and Y coordinate of this point. The first four points are for the first rectangle, and the following four points are for the second. The two rectangles are not the same.", "output_description": " Output IN if the first rectangle is in the second, output OUT if the first rectangle is out of the second, output OVERLAPPED when some area of two rectangles are overlapped. ", "samples": "[{\"input\": \"1125.0 963.0 1373.0 963.0 1373.0 814.0 125.0 814.0 1257.0 720.0 1397.86 887.69 1315.16 957.15 1174.3 789.46\\n1125.0 963.0 1373.0 963.0 1373.0 814.0 125.0 814.0 1413.00 678.0 1553.86 845.69 1471.16 915.15 1330.3 747.47\\n\", \"output\": \"OVERLAPPED\\nOUT\\n\"}]", "test_case_id": "1382", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 95, "total_accepted_number": 27, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1383, "fields": {"title": "Big Product", "description": "Have you ever wished you could multiply really big numbers without that nasty over- flow problem? Here\u2019s your chance. Write a program which repeatedly computes products of two decimal numbers, each consisting of at most 100 digits.", "input_description": "The input file contains zero or more pairs of operands, each pair followed by an empty line. Each operand appears left-justified without trailing blanks on a line by itself, and will consist of at most 100 decimal digits.", "output_description": "For each pair of operands, output a line containing their product in decimal form without any unnecessary leading zeroes, followed by an empty line.", "samples": "[{\"input\": \"267\\n2432\\n\\n3487563729\\n15000923\\n\\n5190334987851\\n2347890098834123\\n\", \"output\": \"649344\\n\\n52316674956321867\\n\\n12186336127607690990469239673\\n\"}]", "test_case_id": "1383", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 244, "total_accepted_number": 117, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1384, "fields": {"title": "Common Scents", "description": "Two dogs roam the same yard, leaving their \u201cscents\u201d at various spots in order to mark their respective territories. Formally, the territory defined by a dog\u2019s spots is a convex hull\u2015the convex polygon (no indentations) of least area containing each of the spots. Write a program which inputs the spots marked by each dog and determines whether their<p></p>territories overlap; i.e., whether the area of the intersection of their convex hulls is nonzero.", "input_description": "The input file consists of zero or more yards, each containing two territories. A territory consists of three or more spots\u2015a pair of integers on a line defining a point in the Euclidean plane, followed by an empty line.", "output_description": "For each yard, output a message stating whether the two territories overlap or not.", "samples": "[{\"input\": \"12  2\\n10 -1\\n13 -1\\n 3 -3\\n\\n-2  4\\n 4  5\\n 1  1\\n-2 -4\\n 5 -1\\n\\n 2  4\\n-2  2\\n-2 -1\\n\\n 1 -1\\n 5  3\\n 1  7\\n\", \"output\": \"Yard 1 has non-overlapping territories\\nYard 2 has overlapping territories\\n\"}]", "test_case_id": "1384", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 91, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1385, "fields": {"title": "Fast Food", "description": "As the software engineer for a major fast food company, it is your job to write programs which can be used to analyze service performance. In this program, we seek to measure how long customers have to wait before receiving service.<p></p>We will simplify the problem by assuming that there is a single employee serving all customers; the employee can serve at most one customer at a time, processes orders on a first-come-first-served basis, and keeps busy processing orders as long as there are orders not completed. We\u2019ll also assume that each customer\u2019s order requires exactly two minutes<p></p>for the employee to complete. Of course, customers arrive at unpredictable times and can sometimes arrive more frequently than every two minutes, thereby causing some delay before they can begin to be served.<p></p>A wait is measured as the time in seconds between the time a customer arrives and the time that the employee begins to serve the customer. Given a list of customer arrival times, write a program which computes the average wait, the longest wait, the number of waits that are two minutes or more, and the time that the employee completes the last<p></p>customer\u2019s order.", "input_description": "Each line of the input contains the arrival time of a customer. Each time consists of a two-digit hour (between 0 and 23), a two-digit minute (between 0 and 59) and a two-digit second (between 0 and 59) separated by colons. For example, two o\u2019clock in the afternoon is 14:00:00. All arrival times occur during the same calendar day and are in chronological\norder, but several customers may arrive at the same time.", "output_description": "The first two lines of output should report the average wait and longest wait in hours, minutes, and seconds. The third line should report the number of waits which are two minutes or more. The fourth line should report the time of day (in hours, minutes, and seconds) when the employee finishes the last customer\u2019s order.", "samples": "[{\"input\": \"08:32:33\\n08:32:58\\n08:33:44\\n08:33:44\\n08:36:00\\n08:40:00\\n\", \"output\": \"Average Wait:  0:02:43\\nLongest Wait:  0:04:49\\n2-Minute Waits:  4\\nFinish Time:  8:44:33\\n\"}]", "test_case_id": "1385", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 78, "total_accepted_number": 29, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1386, "fields": {"title": "Get Water", "description": "Tom has three measuring cups, they can fill a, b and c liters of water (b&gt;a&gt;0 and c&gt;= a +b). He first fills the last cup with full of water(c liters of water), now can he get d liters of water with the help of other two cups? Each time when he pours the water from one cup to another, he must either empty the cup or make another cup full. ", "input_description": "Input includes a number of test cases. Each case contains a line, each line contains four integers: a, b, c and d. where a, b, c are the volume of the three cups, d is the liters of required. ", "output_description": "Output a line for each case. If he can get d liters of water, print Yes, or print No.", "samples": "[{\"input\": \"3 7 10 5\\n5 20 30 7\\n\", \"output\": \"Yes\\nNo\\n\"}]", "test_case_id": "1386", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 77, "total_accepted_number": 39, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1387, "fields": {"title": "Knight Poll", "description": "In the game of chess, a knight is a piece which can be moved two units along one axis, then one unit along a perpendicular axis. In this problem, knights may reside at points on the Euclidean plane with integer coordinates. A knight residing at point (x, y) is assigned a value f(x, y) between 0 and 99, defined recursively by<p></p>f(x, y) = 1, if x \uff1c\uff1d 0 or y \uff1c\uff1d 0;<p></p>f(x, y) = \uff08f(x&#8722;2, y+1) +f(x&#8722;2, y&#8722;1) +f(x&#8722;1, y&#8722;2) +f(x+1, y&#8722;2)\uff09mod 100, otherwise.<p></p>Intuitively, the knight at positive coordinates (x, y) computes its value by polling the\u3000knights at the four positions to which it can move by first going two units left or down,\u3000summing their values mod 100. Write a program which reads in a positive integer n, and\u3000prints out the values of all knights residing at points (x, y) such that 1\uff1c\uff1dx \uff1c\uff1dn and<p></p>1 \uff1c\uff1d y \uff1c\uff1dn.<p></p>", "input_description": "The input file consists of one line containing a positive integer n \uff1c100.", "output_description": "The output consists of n lines showing the values f(x, y) arranged as follows:\nf(1, n) f(2, n) . . . f(n, n)\n...\n...\n...\nf(1, 2) f(2, 2) . . . f(n, 2)\nf(1, 1) f(2, 1) . . . f(n, 1)\n", "samples": "[{\"input\": \"10\\n\", \"output\": \" 84 25 56 53 60 92 88 45 54 54\\n  9 31 78 45  0 41 11 77 44 54\\n 58 81 65 32 68 62 34 80 77 45\\n 34  6 95 30 44 49 12 34 11 88\\n 22 55 57 67 38 28 49 62 41 92\\n 16 31 88 84  6 38 44 68  0 60\\n  7 19 46 88 84 67 30 32 45 53\\n  7 13 22 46 88 57 95 65 78 56\\n  4  4 13 19 31 55  6 81 31 25\\n  4  4  7  7 16 22 34 58  9 84\\n\"}]", "test_case_id": "1387", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 76, "total_accepted_number": 39, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1388, "fields": {"title": "Minimum Distance", "description": "Tom is a middle school student. One day, he drew a lot of points in a paper; he wanted to find which of the two points is the most nearest points in this paper. So he connected two of the points together and used a ruler to measure their lengths. But there are so many lines that he couldn\u2019t distinguish with them. Could you write a program to find the shortest line in the paper? ", "input_description": "Input includes a number of test cases. First line of each case is an integer number n (0\uff1cn\uff1c1000): the number of points in the paper. The following n lines are the coordinate of the points. Each line contains two integer numbers: x and y, which represents the x and y coordinate of the point. There are no more than 10 test cases in the test data\uff0e", "output_description": "For each case, output the distance between the nearest points, each case contains a line. Distance should be triple precision. \n\n", "samples": "[{\"input\": \"4\\n1 2\\n3 4\\n1 6\\n4 5\\n3\\n1 1\\n2 2\\n1 3\\n\", \"output\": \"1.414\\n1.414\\n\"}]", "test_case_id": "1388", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 188, "total_accepted_number": 46, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1389, "fields": {"title": "Minimum Number", "description": " In a game, Children is requested to take S (1\uff1c=S\uff1cN) digits from a big number which has N digits (1\uff1cN\uff1c240), when they have taken all the S digits form the number ,all the digits left should be the most minimum if the order of the digits left is not changed. Please write a program to help him.", "input_description": "Input includes n test cases. Each line contains one case with two numbers. First one of it is the number to be taken; the second is the number of digits the children should take.", "output_description": "Output the minimum number left for each case.", "samples": "[{\"input\": \"1458734 3\\n2324876 4\\n\\n\", \"output\": \"1434\\n224\\n\"}]", "test_case_id": "1389", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 339, "total_accepted_number": 80, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1390, "fields": {"title": "Walkabout", "description": "There is an n\u00d7n board in which each square contains the character + or -. The rows are numbered 1 to n from bottom to top, and the columns are number 1 to n from left to right, as if each square resided at a point in the positive Euclidean plane. Therefore, (x, y) can be thought of as coordinates of the square at column x, row y. Write a program<p></p>which tries to find a walk from a square on the left edge of the board to a square on the right edge of the board without stepping on a square containing -. Moves must be made horizontally or vertically, one square at a time.", "input_description": "The input file consists of zero or more boards, and each board consists of a line containing the dimension n of the board, followed by n lines containing n characters + or -, following by an empty line. The characters are presented on n lines in the order shown by the following coordinates:\n(1, n) (2, n) . . . (n, n)\n...\n...\n...\n(1, 2) (2, 2) . . . (n, 2)\n(1, 1) (2, 1) . . . (n, 1)", "output_description": "If there is no such path from the left side to the right side, output a message to that effect; otherwise, output the coordinates of the squares visited along such a path.", "samples": "[{\"input\": \"5\\n+-+++\\n--+--\\n+-++-\\n++-+-\\n-+++-\\n\\n6\\n++++-+\\n+-+--+\\n-+-+++\\n-+++-+\\n-+-+-+\\n-+++-+\\n\", \"output\": \"A walk from left side to right side:\\n(1,2)\\n(2,2)\\n(2,1)\\n(3,1)\\n(4,1)\\n(4,2)\\n(4,3)\\n(3,3)\\n(3,4)\\n(3,5)\\n(4,5)\\n(5,5)\\n\\nA walk from left side to right side:\\n...does not exist.\\n\"}]", "test_case_id": "1390", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 61, "total_accepted_number": 10, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1391, "fields": {"title": "Jury Censor", "description": "Judge Ito has ruled that jurors shall not be seen, and their names shall not appear in the news. This program will find the juror\u2019s names (or something visually equivalent) within some lines of news text and will echo the text with the names covered.", "input_description": "The input file consists of three sections of lines\u2015each line containing at most 100 characters\u2015separated by single empty lines. The first section has at most 100 lines, each containing the name of a juror. Each line of the second section contains a string of at least two characters which are visually equivalent to each other. No character will appear more than once in this section; and uppercase and lowercase versions of the same letter are not assumed to be visually equivalent unless they appear on the same line. The third section contains the lines of news text, terminated by the end of the input file.", "output_description": "A substring of a news text line matches a juror if it has the same length and can be obtained from the juror by replacing zero or more characters with visually equivalent characters. Print a copy of the news text lines with substrings (of the original news text lines) matching some juror replaced by an equal-length string of hash marks (#).", "samples": "[{\"input\": \"Rich\\nO.J.\\nSimpson\\ncheese\\n\\n1Ili\\nO0\\n5Ss\\n\\nDoes Dr. Rlch know 0.J. 5ImpSon?\\nHow about Dr. R1chee5e? o.J.?\\n\", \"output\": \"Does Dr. #### know #### #######?\\nHow about Dr. ########? o.J.?\\n\"}]", "test_case_id": "1391", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 21, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1392, "fields": {"title": "Pyramid", "description": "In a pyramid money-making scheme, an individual (the child) receives a so-called chain letter from another individual (the parent) asking the child to proliferate the pyramid by sending one dollar to a number of his or her most recent ancestors\u2015the parent, parent\u2019s parent, and so on\u2015and to become a parent by sending the letter to a number of friends who become children. The number of ancestors to whom a dollar is sent by an individual is called the depth of the pyramid, and the number of children to whom the letter is sent is called the degree of the pyramid.<p></p>If the pyramid continues to proliferate, an investment of a few dollars going to your  ancestors can yield a future return of exponentially many dollars coming from generations of descendants. The yield is diminished (frequently to the point of financial loss) if some descendants are unwilling to proliferate the pyramid. Given a group of individuals who have never proliferated a pyramid and who have known friends and willingness to proliferate, this program computes the number of dollars each individual would receive as the root?the first individual in the group to proliferate.", "input_description": "The first line of the input file contains three nonnegative integers\u2015the population of the group, the degree of the pyramid, and the depth of the pyramid\u2015in that order. Each individual in the group has a distinct id between 1 and population. The remaining lines of the input file describe the individuals who are willing to proliferate the pyramid. Each line contains an individual\u2019s id, the number of times they are willing to proliferate (as root or otherwise), and the ids of friends (equal in number to degree) to whom they would send the letter when proliferating.", "output_description": "For each individual in the group, compute the number of dollars they would receive as root, assuming that individuals refuse to proliferate after they have done so as often as they are willing, that letters are received by children in the order they appear as friends in a line of input, and that letters are received by all children before they are received by any grandchildren. Exclude any dollars that the root individual might also make by proliferating again as a descendant.", "samples": "[{\"input\": \"10 3 3\\n 2 1 1 6 7\\n 3 1 2 4 8\\n 4 3 3 5 10\\n 5 3 4 7 10\\n 6 1 1 7 9\\n 8 1 5 6 9\\n 9 1 3 4 6\\n10 2 1 3 4\", \"output\": \"Person Root $$$\\n     1        0\\n     2        4\\n     3       11\\n     4       12\\n     5       10\\n     6        8\\n     7        0\\n     8       12\\n     9       12\\n    10       12\\n\"}]", "test_case_id": "1392", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1393, "fields": {"title": "Roll It", "description": "Everyone\u2019s wondering what the O.J. Simpson jury will decide. Each jury member will have some opinion about who committed the crime, but it\u2019s anyone\u2019s guess who did it. Suppose that when the arguments end, there are six suspects (including O.J.) and each jury member rolls a fair die to make a decision about who committed the crime. This program computes probabilities that a certain number of jurors will decide on a given suspect.", "input_description": "Each line of the input file presents a scenario including a nonnegative number n of jurors who will roll a die, following by the number s of a suspect between 1 and 6.", "output_description": "For each line of the input, output a table giving the probability that exactly m jurors will roll a die matching s, for m = 0, 1, . . . , n.", "samples": "[{\"input\": \"0 6\\n1 4\\n6 2\\n\", \"output\": \"Rolling 0 dice trying to match number 6...\\n\\nMatches    Probability\\n\\n   0       1.00000E+00\\n\\n\\nRolling 1 dice trying to match number 4...\\n\\nMatches    Probability\\n\\n   0       8.33333E-01\\n   1       1.66667E-01\\n\\n\\nRolling 6 dice trying to match number 2...\\n\\nMatches    Probability\\n\\n   0       3.34898E-01\\n   1       4.01878E-01\\n   2       2.00939E-01\\n   3       5.35837E-02\\n   4       8.03755E-03\\n   5       6.43004E-04\\n   6       2.14335E-05\\n\\n\"}]", "test_case_id": "1393", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 86, "total_accepted_number": 17, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1394, "fields": {"title": "Permute Commute", "description": "A string y is a permutation of a string x if y can be obtained by rearranging the characters of x. Write a program which repeatedly inputs pairs of strings and decides whether the second string is a permutation of the first string.", "input_description": "A string is the concatenation of consecutive nonempty lines of input. A pair consists of a nonempty line (containing only hyphens), followed by the first string, followed by an empty line, followed by the second string, followed by an empty line. The standard input file contains one or more pairs.", "output_description": "for each pair of strings in the standard input file, determine whether the second string is a permutation of the first string, and output a message as shown in the sample output.", "samples": "[{\"input\": \"-----\\nOh, my goodness\\nmultiple lines!\\n\\nyg doo, shOmens emlusleip\\n!tlin\\n\\n-----\\nperplexed\\n\\nexdrelper\\n\", \"output\": \"-----\\nThe second string is a permutation of the first\\n-----\\nThe second string is not a permutation of the first\\n\"}]", "test_case_id": "1394", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 202, "total_accepted_number": 49, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1395, "fields": {"title": "Spacewalk", "description": "NASA has a problem. A bunch of spacewalkers have come to rest at fixed points in three-dimensional space. Each spacewalker has a supply of very expensive tethering line which can be shot at other spacewalkers to connect them with a length of line which is as long as the distance between them. The problem is that every foot of line which<p></p>is shot must be abandoned in space and the tethering line is very expensive. Write a program that determines which spacewalkers should connect to which others in order to interconnect all spacewalkers into a single \u201cconnected component\u201d and use the minimum amount of tethering line.", "input_description": "A spacewalker consists of a single-character name in column 1 followed by the x-, y-, and z- coordinates (in ft.) of his or her point in space, each preceded by one or more blanks. A mission consists of a line containing a number n \u0015 1, followed by n spacewalkers. The standard input file contains one or more missions.", "output_description": "For each mission, determine which pairs of spacewalkers should be connected in order to interconnect all spacewalkers into a single \u201cconnected component\u201d using the minimum amount of tethering line. Show the amount of line in feet (accurate to two decimal places) between each directly-connected pair of spacewalkers and the total length of line used.", "samples": "[{\"input\": \"3\\nA  1.0   2.0   3.0\\nB  5.0   5.0   5.0\\nC  2.0   2.0   2.0\\n7\\nA  1.0   5.0   7.0\\nB  0.0   6.0   3.0\\nC  9.0   7.0   3.0\\nD  4.0   4.0   7.0\\nE  2.0   9.0   0.0\\nF  1.0   6.0   1.0\\nG  3.0   7.0   6.0\\n\", \"output\": \"    5.20 ft connects B to C\\n    1.41 ft connects C to A\\n--------\\n    6.61 ft total line used\\n\\n    4.24 ft connects B to A\\n    6.71 ft connects C to G\\n    3.16 ft connects D to A\\n    3.32 ft connects E to F\\n    2.24 ft connects F to B\\n    3.00 ft connects G to A\\n--------\\n   22.67 ft total line used\\n\\n\"}]", "test_case_id": "1395", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 126, "total_accepted_number": 23, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1398, "fields": {"title": "Friend or Foe", "description": "The Bits and Chips Club wants to host the biggest, friendliest programming contests in the history of programming, so they have amended their constitution so that they can send a contest invitation to a student s if and only if they send an invitation to at least k friends of s, where k is a fun-level parameter to be established for each contest. Write<p></p>a program which repeatedly takes as input k, a set of students S = {1, . . . , n} and a symmetric friendship relation F \u2208S \u00d7 S, and produces as output a largest subset of S to whom invitations can be sent without violating the constitution.", "input_description": "The input consists of zero or more groups of data, each followed by an empty input line. The first line of a group contains a nonnegative integer fun-level parameter k; the second line of a group contains a nonnegative integer number of students n; and each remaining line of a group contains a pair of students from S = {1, . . . , n} who\nare mutual friends.", "output_description": "For each group of input data, output a largest subset of S = {1, . . . , n} to whom invitations can be sent without violating the Bits and Chips constitution, formatted as shown in the output sample below.", "samples": "[{\"input\": \"3\\n6\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 4\\n2 6\\n3 5\\n3 6\\n5 6\\n\\n2\\n8\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n7 8\\n5 2\\n\\n\", \"output\": \"Invited Students:\\n\\n 1 3 5 6\\n\\nInvited Students:\\n\\n 2 3 4 5\\n\\n\"}]", "test_case_id": "1398", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 118, "total_accepted_number": 24, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1399, "fields": {"title": "Palindrama", "description": "A palindrome is a string which reads the same forwards as it does backwards\u2015e.g., gig, radar, and peep. Write a program which inputs a string of at most 1000 letters from the alphabet {a, b, c, . . . , z} and outputs a longest substring which is a palindrome.", "input_description": "The standard input file contains a single string of lowercase letters of length at most 1000. The string might be split onto more than one line, but in that case the individual lines should be taken as a single string, ignoring line separators (a.k.a. carriage returns, new lines).", "output_description": "Output a longest substring of the input which is a palindrome. If there are two or more equally long palindrome substrings, output the leftmost one.", "samples": "[{\"input\": \"bahuibyasfhbhuahsfbuhuashfbuabcdedcbakasjfkjasjaskjajhuye\\n\", \"output\": \"A longest palindrome substring is:\\n\\nabcdedcba\\n\"}]", "test_case_id": "1399", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 252, "total_accepted_number": 67, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1400, "fields": {"title": "Spin Doctor", "description": "Dr. Rich has been granted a chance to win $1,000,000 by spinning a lottery wheel.There are n positions on the lottery wheel, and they are numbered 0, 1, 2, . . . , n&#8722;1 in clockwise order. A spinning pointer is initially resting at position i, spins only in the clockwise direction, and always comes to rest pointing at one of the positions. To win <br />$1,000,000, the pointer must travel properly more than one complete revolution and come to rest pointing at position 0. <br />Dr. Rich has practiced his spinning technique so he can apply force in equal increments causing the pointer to advance clockwise from its initial position i a multiple of d positions?0?d, 1?d, 2?d, . . . Given n \u2265 1, d \u2265 1, and initial position i, help Dr. Rich determine whether it is possible to win $1,000,000, and if so, what is the least multiple of d which will win it.", "input_description": "Each line of the standard input file contains three natural numbers specifying a number of positions n \u2265 1, a distance increment d \u2265 1, and an initial position i, in that order.", "output_description": "For each line of input, output a line to the standard output file which reports \u201cSorry, you can\u2019t win\u201d if $1,000,000 cannot be won; and reports \u201cAdvance the pointer m*d positions\u201d if $1,000,000 can be won, where m\u30fbd is the least multiple of d positions which will win it.", "samples": "[{\"input\": \" 9  4  2\\n10  2  3\\n23 16 11\\n\", \"output\": \"Spin 1: Advance the pointer 4*d positions.\\nSpin 2: Sorry, you can$(quat)t win.\\nSpin 3: Advance the pointer 18*d positions.\\n\"}]", "test_case_id": "1400", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 289, "total_accepted_number": 50, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1401, "fields": {"title": "Tub Drop", "description": "The temperature of a tub of standing hot water drops at a rate which is proportional to the difference between the temperature of the water and the ambient temperature of the surrounding air. Write a program which inputs the ambient temperature and the temperature of the water after two distinct elapsed times and outputs a table showing the<p></p>falling temperature of the water.", "input_description": "The first line contains the ambient temperature A of the surrounding air. The second line contains an elapsed time t1 (in minutes) and the water temperature W1 after t1 minutes elapsed. The third line contains an elapsed time t2 (in minutes) and the water temperature W2 after t2 minutes elapsed. The input will satisfy 0 \u2264 t1 < t2 and A < W2 < W1 > A.", "output_description": "Output a table showing the water temperature (accurate to two decimal places) after elapsed times t = 0, 1, 2, . . . , 10.", "samples": "[{\"input\": \"60.0\\n 0.0 100.0\\n 5.0  80.0\\n\", \"output\": \"Elapsed        Water\\n   Time         Temp\\n\\n    0.0       100.00\\n    1.0        94.82\\n    2.0        90.31\\n    3.0        86.39\\n    4.0        82.97\\n    5.0        80.00\\n    6.0        77.41\\n    7.0        75.16\\n    8.0        73.20\\n    9.0        71.49\\n   10.0        70.00\\n\"}]", "test_case_id": "1401", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 100, "total_accepted_number": 46, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1403, "fields": {"title": "Indiana Zones", "description": "Consider a set of points in the plane. The geometric center is a point whose x- and y-coordinates are the average of the x- and y-coordinates, respectively, of the set of points. The bounding rectangle is the smallest rectangle whose sides are parallel to the x- and y-axes and which includes all of the points. A zone is a circle centered at the geometric center that lies within the bounding rectangle. The Dead Zone is the largest zone that contains no points at all. The Mega Zone is the largest possible zone. For each set of points in the input, compute and print the geometric center, the diameter of the Dead Zone and the percentage of points that lie within the Mega Zone.", "input_description": "The input file has data for several sets of points. Data for each set of points consists of a line containing n, the size of the set, followed by n lines containing the x- and y-coordinates of each point.", "output_description": "Print each value rounded to one decimal place in the format of the sample output.", "samples": "[{\"input\": \"6\\n-4.0 -4.0\\n-4.0  4.0\\n 4.0  4.0\\n 4.0 -4.0\\n 0.0 -1.0\\n 0.0  1.0\\n10\\n-1.6  1.8\\n 1.0  2.0\\n 2.0  0.6\\n 1.6 -1.0\\n-1.0 -1.0\\n-2.0  0.0\\n-1.0  1.0\\n 0.0  1.0\\n 1.0 -0.4\\n 0.0  0.0\\n\", \"output\": \"Set 1\\n   Geometric center = (0.0, 0.0)\\n   Dead Zone size   = 2.0\\n   Mega Zone yield  = 33.3\\n\\nSet 2\\n   Geometric center = (0.0, 0.4)\\n   Dead Zone size   = 0.8\\n   Mega Zone yield  = 40.0\\n\"}]", "test_case_id": "1403", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 439, "total_accepted_number": 73, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1406, "fields": {"title": "Prestidigitation", "description": "Let d be a digit and n be a positive number. A sequence of numbers t1, t2, . . . , tm is a d-sum of n if<p></p>&#8226; t1 + t2 + \u30fb \u30fb \u30fb + tm = n, and<p></p>&#8226; t1, t2, . . . , tm are numbers expressed using only the digit d. For example, if d = 2 then ti could be 2, 22, 222, . . .", "input_description": "Each line of the input contains a digit d and a positive number n, in that order.", "output_description": "For each line of input specifying a digit d and positive number n, output a line containing d, a line containing n and a d-sum of n having minimum number of terms m, and a line containing the number of terms m. If no d-sum of n exists, output a message to that effect.", "samples": "[{\"input\": \"3  402\\n5   64\\n\", \"output\": \"d = 3\\nn = 402 = 333 + 33 + 33 + 3\\n...a shortest summation with m = 4 terms.\\n\\nd = 5\\nn = 64\\n...has no such summation.\\n\"}]", "test_case_id": "1406", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 546, "total_accepted_number": 122, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1411, "fields": {"title": "Summation of positive integers", "description": "Tom is a primary school students, he has studied how to add a number of positive integers together. But he finds it is very difficult to divide an integer number into a summation of continuous integers. In fact, there is more than one division for an integer. For example, 27 is summation of 2, 3, 4, 5, 6, 7 or 8, 9, 10 or 13, 14. <p></p>Could you help him to find all the divisions and print all the results in ascendant order? Each result contains a line.<p></p>", "input_description": "Input includes a number of test cases, each case contains a line, each line contains an integer N (N<1000000), 0 implies the end of input.", "output_description": "For each test case, if N can be divided into summation of continuous integers, output all the divisions. Each division contains a line, and starts from the smaller integer, end to the bigger one, two hyphen (--) is used to separate them. A blank is used to separate each output of test cases. If N can\u2019t be divided, print NO.", "samples": "[{\"input\": \"3\\n27\\n4\\n0\\n\", \"output\": \"1--2\\n\\n2--7\\n8--10\\n13--14\\n\\nNO\\n\"}]", "test_case_id": "1411", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 373, "total_accepted_number": 86, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1412, "fields": {"title": "The Product of Digits", "description": "Your task is to find the minimal positive integer number Q so that the product of digits of Q is exactly equal to N. <p></p>", "input_description": "The input contains the single integer number N (0 \u2264 N \u2264 10^9). \n", "output_description": "Your program should print to the output the only number Q. If such a number does not exist print &#8722;1. \n", "samples": "[{\"input\": \"10\\n\", \"output\": \"25\\n\"}]", "test_case_id": "1412", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 383, "total_accepted_number": 61, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1413, "fields": {"title": "Long Division", "description": "Report the results of the long divisions.<p></p>For each integer given, create one line of output that contains the integer quotient that results when the input integer is divided by thirteen (13). Give only the quotient of the integer division and ignore any remainder that might occur.<p></p>Do not have any non-significant leading zeros on the output integer. If the integer quotient is zero, give only a single zero digit on that line of output.<p></p>Continue processing the input, determining and reporting quotients, until the end-of-file is encountered.", "input_description": "The input is a series of lines, and on each line is an unsigned integer. Each input integer will be at least one digit long, and no longer than 50 digits. Each integer begins with its first digit as the first character on that line.\nThere will be no non-significant leading zeros on any of the input data.\nThe input is terminated by an end-of-file.", "output_description": "An output line is to be emitted for each input line. Each output line will have the quotient reported as a contiguous series of digits. The first significant digit of each quotient should be the first character on each line of output.", "samples": "[{\"input\": \"0\\n12\\n13\\n14\\n25\\n26\\n262626\\n131313131313131313131313131313\\n\", \"output\": \"0\\n0\\n1\\n1\\n1\\n2\\n20202\\n10101010101010101010101010101\\n\"}]", "test_case_id": "1413", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 500, "total_accepted_number": 123, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1414, "fields": {"title": "Light Pockets", "description": "Whenever Dr. Rich visits a vending machine, his objective\u2015in addition to eating\u2015is to lighten his pockets by reducing the number of coins as much as possible. Formally, a vending transaction consists of<p></p>cost: a positive multiple of 5 cents not exceeding $2.00, <p></p>pocket: a bag containing dollars, quarters, dimes and nickels,<p></p>deposit: a string (in any order or length) of dollars, quarters, dimes and nickels such that<p></p>&#8226; deposit can be drawn from pocket, and<p></p>&#8226; deposit has value greater than or equal to cost, and<p></p>&#8226; proper prefixes of deposit have value less than cost.<p></p>change: a shortest string (in any order) of quarters, dimes and nickels having value equal to deposit value minus cost.<p></p>The reduction caused by a vending transaction is the the total number of quarters, dimes and nickels in deposit minus the total number of quarters, dimes and nickels in change.<p></p>", "input_description": "Each line of the input contains a cost followed by a number of dollars, quarters, dimes and nickels in pocket, in that order.", "output_description": "For each line of input specifying a cost and pocket, find a vending transaction with shortest deposit among those causing maximum reduction, and output a line contain- ing deposit, a line containing change, and a line containing the reduction. If no vending transaction can be completed, output \u201cSorry\u201d.", "samples": "[{\"input\": \" 75  2 3 5 3\\n 60  1 1 2 1\\n100  0 2 3 3\\n\", \"output\": \"Deposit nickel nickel dime dime dime dime quarter.\\nChange is nothing.\\nReduction is 7.\\n\\nDeposit dime dollar.\\nChange is quarter quarter.\\nReduction is -1.\\n\\nSorry\\n\"}]", "test_case_id": "1414", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 30, "total_accepted_number": 16, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1415, "fields": {"title": "Arrange the posters in dining room", "description": "In our university, the propaganda board outside the 3rd  dining rooms is a very hot resource of competition, always a large number of posters are put up every day, and then the old ones would be covered by later, a lot of students complain about this. The relevant departments of the university make a decision to solve this problem, they require that student who want to put up posters should register one day before, then they will decide which posters can be put up the next day according to the position where every poster applies. The chosen standard is: The quantity of the  poster be put up is as large as possible, and can&#039;t overlap each other.\u3000Now you are commissioned to program to get an optimum solution.<p></p>In order to simplify the question we stipulate: <p></p>1.\tthe propaganda  board will be express with a  interval [- 9999, 9999 ]; <p></p>2.\tThe height of each poster is the same as the board, every poster must give two integers ,left and right (right&gt;left),which means the interval be occupied by the poster [left, right ]; <p></p>3.\tThere  are no letters on the left and the right borders of the poster, so the borders of two posters can be overlapped; <p></p>The quantity of the poster should be as many as possible, your solution should satisfy the requiremens as possible as it can.<p></p>", "input_description": "The input includes two parts. The first line is an integer M(1\uff1c= M\uff1c=10) telling how much set of data the input has. Each set of data includes two parts: The first line of each data  set is an integer n( n\uff1c1000), which expresses the number of the posters to be put up.Then there are n lines below the it, each line has two integers denote the lefts ,right borders(might not be sorted, -9999\uff1cleft\uff1c9999, -9999\uff1cright\uff1c9999) ,which expresses the position each poster want.\n", "output_description": "The Output is M line of integers according to each set of data,each tell the number of the posters can be put up.\n", "samples": "[{\"input\": \"1\\n3                                   \\n6 4\\n1 4\\n3 5\\n\", \"output\": \"2\\n\"}]", "test_case_id": "1415", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 94, "total_accepted_number": 33, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1416, "fields": {"title": "Chutes and Ladders", "description": "The childrens\u2019 game Chutes and Ladders is played by moving pieces on a 10-by-10 board according to the roll of a pair of dice. If a player lands on a square that is the bottom of the ladder, she can move up to the square at the top of the ladder. If she lands on a square that is the top of a chute (a slide), the player moves to the square at the bottom of the chute. Each square is exactly one of the following: the top of a ladder or chute, the bottom of a ladder or chute, or a neither. The player starts on square 1 (which will not be the bottom of a ladder) and tries to be the first to land exactly on square 100 (which will not be the top of a chute). Recall that when rolling a pair of dice, the possible outcomes are from 2 through 12. When rolling a number, the player advances exactly that number of squares, then follows any ladder or chute from that landed upon square. If a roll would move the player past square 100, the roll is ignored and the player loses her turn.<p></p>Here, each square on the board will be given an integer. If the number is 0, then this square is either a normal square, the top of a ladder or the bottom of a chute and so nothing special happens if a player lands on this square. If the integer is n &gt; 0, the square is the bottom of a ladder and if the player should land on this square, she would advance n squares to the top of the ladder. If the integer is n &lt; 0, the square is the top of a chute and if the player lands on this square, she would go back n squares. In the boards you will have, you are guaranteed no ladder or chute will cause the player to move off the board. Furthermore, you are guaranteed that it is possible to win the game.<p></p>", "input_description": "The board will be given as a series of 100 integers, 10 per row, indicating squares 1 through 100 in that order. There will be multiple boards inputted for this problem. The first line of input will be a positive integer k. There follows k boards, given in the format described above.\n", "output_description": "For a given board, you are to determine the minimum number of rolls needed to win the game. For each board you should generate one line of output of the form:\nIt will take at least r rolls to win this game. \nOf course r should be replaced by the appropriate number. Each output contains a line.\nWarning: Do not try to generate all possible rolls as this will exhaust your allotted running time. \n", "samples": "[{\"input\": \"1\\n0 0 42 0 0 0 57 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 -21 0 0 0 0 0 0 0\\n0 0 50 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 -19 0 41 -41\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 4 0 0 0 0 0 0\\n\", \"output\": \"It will take at least 3 rolls to win this game.\\n\"}]", "test_case_id": "1416", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 104, "total_accepted_number": 22, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1418, "fields": {"title": "The grid security", "description": "The Grid problem is to enable \u201ccoordinated resource sharing and problem solving in dynamic, multi-institutional virtual organizations.\u201d<p></p>Large-scale distributed computing environments, or \u201ccomputationfl grids\u201d as they are sometimes termed, couplecomputers, storage systems, and other devices to enableadvanced applications such as distributed-supercomputer, computer- enhanced instruments, and distributed data mining. Grid applications are distinguished from traditional client-server applications by their simultaneous use of large numbers of resources, dynamic resource requirements, use of resources from multiple administrative domains, complex communication structures, and stringent performance requirements, among others.<p></p>    Since the powerful use of grid, many people want to take use of it to solve their problems with out authorization. Sometimes they can buy a password by some ways to use the grid system.To keep the grid security, almost all passwords the users entered can be collected by some special way. As we know, the grid system need the password before entering the system. Each legitimate user has his unique password while most of the illegal user use a same password which was bought from the hacker. By this character, can you help us to find the password of illegal users? <p></p>The rule of the password: each effective password is consisted of 25 characters which are all letters. For example: I L O V E N K A C M I L O V E F R I E N D S H I P. Any other string not fit the rule can not be take as password and the string which has the highest frequency is the password of the hacker .<p></p>You should note that we don\u2019t distinguish uppercase letter from lowercase, namely the password\u201d AREYOU K A C M I L O V E F R I E N D S H I P\u201d can be write as \u201d AreYou k A c M i L o V e F r I E N d S h I p\u201d<p></p>", "input_description": "The input includes two parts. The first line is an integer M(1\uff1c= M\uff1c10) telling how much set of data the input has. Each set of data includes two parts; the first line of the data is an integer N   (1\uff1c= n \uff1c= 10000) telling how many lines of strings the data has, then there are N lines of string as N passwords follows.\n", "output_description": "for each set of data you only need to output one line of string which is the password of illegal user if you find it successfully. And you have to output \u201cno solution\u201d if there are more than one string that has the highest frequency.\n\n", "samples": "[{\"input\": \"2\\n1\\nAREYOUKACMILOVEFRIENDSHIP\\n2\\nyxXMfFuMFDshlwPAZNriIzdKA\\nadnxkwatpiyzqtrydnqjsqjvq\\n\", \"output\": \"areyoukacmilovefriendship\\nno solution\\n\"}]", "test_case_id": "1418", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 105, "total_accepted_number": 44, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1421, "fields": {"title": "Word Stretch", "description": "Almost everybody has tried to solve a word search puzzle, where one is given a square grid of letters and attempts to find \u201chidden\u201d words embedded horizontally, vertically or diagonally in the grid. In this problem, we generalize the traditional word search puzzle by relaxing the rule that words must be found in horizontally, vertically or diagonally contiguous positions. In our puzzle, words may be stretched (and/or bent) so that successive letters in a word may be found in any grid position. The goal is to find a least-stretched occurrence of the word in the letter grid.", "input_description": "The first line of input contains a positive integer n, which is the number of rows and columns in the letter grid. The next n lines of input contain n lowercase letters, separated by single blanks. Every letter of the alphabet appears in at least one position of the letter grid, so at least one stretched occurrence of every word can be found. The remaining lines of input each contain a word\u2015a nonempty string of lowercase letters.", "output_description": "For each word in the input, find and print a least-stretched occurrence of the word, as shown in the output sample. An occurrence of a word in the letter grid is a sequence of grid positions (lower left corner is (0, 0) and upper right corner is (n&#8722;1, n&#8722;1)) that contain the corresponding sequence of letters in the word. Note that if the same letter appears more than once in a word, an occurrence of that word in the letter grid may use the same grid position more than once (including twice in succession). The amount of stretch in an occurrence is the sum of the distances between the grid positions (viewed as coordinates in 2-dimensional Euclidean space) of consecutive word letters. For example, the stretch of a word of length d occuring in horizontally or vertically contiguous positions is d&#8722;1, and the stretch of a word of length d occurring in diagonally contiguous positions is (d&#8722;1)*sqrt(2). Print the amount of stretch accurate to two decimal places.", "samples": "[{\"input\": \"12\\nc a s d a s d f o i u b\\nw a d r n s a o i e r q\\nn z r a s d f l k j w e\\na s o a u w e r n v a s\\np o w b r u t b n z m s\\na l e g r u t y q p a a\\na s d f l k w e r c z a\\ns f l k w j e r a p s o\\nx s d f m e w r n a z z\\nw e r r e t u p m o c m\\nu l a j g h a u a u u a\\na j a s f d h h w e r a\\ncraig\\nflood\\ncomputer\\n\", \"output\": \"least-stretched occurrence of \"craig\": 13.84\\n9 5\\n8 5\\n10 8\\n8 10\\n3 6\\n\\nleast-stretched occurrence of \"flood\": 3.41\\n6 9\\n7 9\\n7 10\\n7 10\\n6 11\\n\\nleast-stretched occurrence of \"computer\": 7.00\\n10 2\\n9 2\\n8 2\\n7 2\\n6 2\\n5 2\\n4 2\\n3 2\\n\\n\"}]", "test_case_id": "1421", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 46, "total_accepted_number": 20, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1422, "fields": {"title": "Travel of the city", "description": "<p>&nbsp;&nbsp;&nbsp; Tom bought a new car a few days ago; he wants to drive his car from one place to another today. But he has no experience to travel the city by his new car, so he doesn\u2019t know how much time he will spend to do that. Could you help him to find a path which will spend the smallest time?</p><br /><p></p><p>&nbsp;&nbsp;&nbsp; There are many road intersections in the city. At each intersection there are some lights to instruct the car to pass or un-pass it. When it\u2019s red, the car can\u2019t pass it, he has to wait for some time until it becomes green. (Suppose it will spend the same time when the light changes from red to green and green to red). </p><br /><p></p><p>&nbsp;&nbsp;&nbsp; If Tom starts his car at the start point, all the lights are switched on, and the status of the light after it is switched on is given. The time he will spend at each section of road is also provided. Now your task is to find the smallest time if he drives from the start point to the end. </p>", "input_description": "Input includes a number of test cases. First line of input is an integer number, which represents the number of test cases. First line of each case is two integers N and M, where N(N\uff1c=26) is the number of intersections and M(M\uff1c=100) represents the number of roads from the start point to the end point in the city. Number 0 represents the name of start point, and 1 represents the end, all the intersections are coded from A to Z. The following M lines are used to descript the road sections and the light. The line which is used to describe the start point to the intersection contains three items: 0, Ni, T, where 0 is the name of start point, Ni is the Name of intersections, T is the time needed from the start point to the intersection. The line which is used to describe the road section and the light contains five items: S, E, T, TL, TS, where S is the name of start intersection, E is the name of the end intersection or End point named 1, T is the time needed from the S intersection to the E intersection or the end,  TL is the time needed for the change of the light, TS is the status of the light when the light is switched on, if TS=1, that is the light is red, if TS=0\uff0cthe light is green.    \n  All the time mentioned above is type of integer. And the time needed to pass the intersection is ignored. If the car arrived at the intersection just at the end of the green light he can\u2019t pass the intersection.\n\n", "output_description": "Output the minimum time needed from the start point to the end. Each output contains a line.", "samples": "[{\"input\": \"1\\n3 7\\n0 A 20\\n0 B 10\\nA 1 10 2 1\\nA C 2 3 0\\nB C 2 3 1\\nB 1 4 2 0\\nC 1 3 2 0\\n\", \"output\": \"15\\n\"}]", "test_case_id": "1422", "hint": "<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 55, "total_accepted_number": 24, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1425, "fields": {"title": "2", "description": "2", "input_description": "2", "output_description": "2", "samples": "[{\"input\": \"2\", \"output\": \"2\"}]", "test_case_id": "1425", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1428, "fields": {"title": "111111111\u7f16\u8f911\u6b21", "description": "11111111\u7f16\u8f911\u6b21", "input_description": "111111111111111111\u7f16\u8f911\u6b21", "output_description": "111111111111111111111111111\u7f16\u8f911\u6b21", "samples": "[{\"input\": \"111111111111111111111111111111u7f16u8f911u6b21\", \"output\": \"1111111111111111111111u7f16u8f911u6b21\"}]", "test_case_id": "1428", "hint": "1111111111111111111111111111111111111111111111\u7f16\u8f911\u6b21", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-28T03:36:01.849Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": false, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 1429, "fields": {"title": "Clever Premier Minister", "description": "<p>&nbsp;&nbsp;&nbsp;&nbsp; Once upon a time, there is a clever premier minister in ancient India. He invented the International Chess. The King was very happy and decided to&nbsp;praise him. The premier minister said:Your Majesty, I need nothing but some wheat. Please put a wheat at the first grid, two wheat at the second grid,&nbsp;four wheat at the third grid, eight wheat at the four grid,&nbsp;and so on. We know there are 64 grid at the international Chess. So the total number of the&nbsp;wheat is a huge number.</p><p></p><p>&nbsp;&nbsp; Now your task is to caculate the total number of wheat if the total grid of the chess is given.</p>", "input_description": "   There are many test cases for this problem. Each case contains a line, each line contains an interger m(m<=64) which implies the number of grids to be used to put the wheat.  ", "output_description": "  Output the total number of wheat given to the premier minister. Each line contains one output. ", "samples": "[{\"input\": \"1\\n3\", \"output\": \"1\\n7\\n\"}]", "test_case_id": "1429", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 582, "total_accepted_number": 157, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1430, "fields": {"title": "Deleting Square numbers", "description": "<div>&nbsp;&nbsp;&nbsp; In the sequence of nature numbers from 1 to n, some numbers are the square of another numbers. For example, 4 is the square of 2. If we delete all these numbers from the sequence, a new sequence will be constructed. In this sequence, no number is the square of another number. Do you know the mth item of this sequence?</div><br /><p></p><div>&nbsp;</div>", "input_description": "There are many test cases for this problem. Each case contains a line, in this line there is a number m, where m<1000,000,0000.", "output_description": "For each case, output the mth item of the new sequence. Each output contains a line.\n\n", "samples": "[{\"input\": \"5\\n2003\\n\", \"output\": \"7\\n2048\\n\"}]", "test_case_id": "1430", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 226, "total_accepted_number": 107, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1431, "fields": {"title": "Oscar Awards", "description": "<div>&nbsp;&nbsp;&nbsp; We always say that the Best Picture is the most important award of all the awards. Before the Oscar Night, we can\u2019t tell which film will win Best Picture. Fortunately, we can dope it out from the Nominee List of all the awards other than the Best Picture. I suggest that you should follow my 3 rules here. </div><p></p><ul><p></p><li>All the films in the list have chances to win the best picture.</li><br /><p></p><li>The film which will win the Best Picture is the film which has been nominated the most times in the list</li><br /><p></p><li>If there are more than one film which have been nominated the most times in the list, we will choose the first one which appears in the list</li></ul><p></p><p>&nbsp;&nbsp;&nbsp;&nbsp; Let\u2019s see such a List below.</p><p></p><div><b><u>VISUAL EFFECTS</u></b><br /></div><br /><p></p><div>THE LORD OF THE RINGS: THE TWO TOWERS</div><p></p><div>SPIDER-MAN</div><p></p><div>STAR WARS EPOISODE II ATTACK OF THE CLONES</div><p></p><div><b><u>SOUND EDITING</u></b></div><p></p><div>THE LORD OF THE RINGS: THE TWO TOWERS</div><p></p><div>MINORITY REPORT</div><p></p><div>ROAD TO PERDITION</div><p></p><div>&nbsp;&nbsp;&nbsp;&nbsp; From the list, we can find that THE LOARD OF THE RINGS: THE TWO TOWERS has been nominated twice. And each of the other films has been nominated only once. So we can say THE LORD OF THE RINGS: THE TWO TOWERS will win the Best Picture.</div><p></p><div>&nbsp;&nbsp;&nbsp; Your task is to write a program to figure out the anticipatory winner from the list.</div>", "input_description": " The input file will consist of several lists. The first line of each list contains only one integer n (1\u2264n\u2264100).representing the number of awards in the list. Then you get n blocks. Each block indicated the nominees of a distinct award. The first line of each block is the name of the award which is not longer than 80. The second line is mi(1\u2264mi\u226410,1\u2264i\u2264n)- the number of nominated films. In the following lines are mi film names, one per line. For make the question simple, you can assume that there isn\u2019t any space in the film names.\n   The input is terminated by a line with one zero.\n", "output_description": "  For each list, you are supposed to figure out the winner of Best picture in a single line.", "samples": "[{\"input\": \"2\\nVISUAL_EFFECTS\\n3\\nTHE_LOARD_OF_THE_RINGS:_THE_TWO_TOWERS\\nSPIDER-MAN\\nSTAR_WARS_EPISODE_II_ATTACK_OF_THE_CLONES\\nSOUND_EDITING\\n3\\nTHE_LOARD_OF_THE_RINGS:_THE_TWO_TOWERS\\nMINORITY_REPORT\\nROAD_TO_PERDITION\\n0\\n\", \"output\": \"THE_LORD_OF_THE_RINGS:_THE_TWO_TOWERS\\n\"}]", "test_case_id": "1431", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 230, "total_accepted_number": 75, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1432, "fields": {"title": "Teacher\u2019s Number", "description": "<div>&nbsp;&nbsp;&nbsp;&nbsp; A teacher and his students play a number game. He divides his students into two groups and each group has k persons. At first, he asks each of the students in group 1 to tell an integer, and the ith(1&lt;=i&lt;=k)student tells number b<sub>1</sub>. Then he appoints each of the students in Group 2 a positive integer, the ith(1&lt;=i&lt;=k) student appointed number m<sub>i</sub> and the greatest common divisor of every pair of numbers m<sub>i</sub> and m<sub>j</sub>(1&lt;=i&lt;=j&lt;=k) is one.</div><p></p><div>&nbsp;&nbsp;&nbsp;&nbsp; When each student has his own number, the teacher tells them,\u201dAttention, everybody! I find an interesting thing. I have a nonnegative integer, and I find that when I substract my number with b<sub>i</sub>, the difference happens to be divided exactly by m<sub>i</sub>. That happens with every pair of numbers b<sub>i</sub> and m<sub>i</sub>. Now can anyone of you tell me what my number is?\u201d</div><p></p><div>&nbsp;&nbsp; The students think for a long time and fail to solve the problem. Can you help them? The answer may not be unique. To simplify the problem, you only need to find the smallest one.</div>", "input_description": "   The input text file contains several test cases. In each case, the first line is an integer k(k<30), the number of students in each group. The second line contains k integers. b1,b2,\u2026,bk, the numbers chosen by the students in Group 1. The third line contains k positive integers, m1,m2,\u2026,mk, the numbers appointed to the students in Group 2.\n   The file ends with k=0.\n", "output_description": "  For each case, output one line containing the teacher\u2019s number.", "samples": "[{\"input\": \"3\\n1 2 3\\n2 3 5\\n0\\n\", \"output\": \"23\\n\"}]", "test_case_id": "1432", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 275, "total_accepted_number": 27, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1435, "fields": {"title": "Greatest Common Divisor", "description": "<div>There are n (1\uff1c=n\uff1c=10000) numbers in a line; could you find the greatest common divisor of these numbers?</div><p></p><div>&#160;</div>", "input_description": "    Input contains more than one test case. Each case contains a line; each line is consisted by n numbers, each number in this line is separated by a space.", "output_description": "    Output their greatest common divisor for each test case, each output contains one line. ", "samples": "[{\"input\": \"20 30 40 50 60 85\\n30 20 45 75 24\\n\", \"output\": \"5\\n1\\n\"}]", "test_case_id": "1435", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 246, "total_accepted_number": 114, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1436, "fields": {"title": "Job Assignment", "description": "<div>&nbsp;&nbsp;&nbsp; One problem comes up when we are trying to assign jobs about GDCPC\u20192003(ASUCPC\u20192003) to staffs. Because some of them complain that the tasks assigned to them are so bother. This emotion will lead to very bad effect in sequence. So we try to satisfy every staff as possible as we can. At first, we make an investigation to get the information about staffs\u2019 attitude towards every task. And then we evaluate each attitude as a point ( a positive integer number not larger than 100). The higher the point is, the more the staff is satisfied. Because the staffs are very busy, they have only a little leisure time to finish the task. So we just assign one task to one person, of course, one task can not be assigned to different persons. Now we give you all the points and hope you can help us to assign the tasks to make the sum of the points which correspond the assignment is maximum.</div>", "input_description": " Input will contains several test cases. The first line of each test case only contains one integer number N (0\uff1c\uff1d\uff2e\uff1c\uff1d\uff11\uff10\uff10). N is the number of staffs, also is the number of tasks. And then, the following N lines describe staffs\u2019 attitude. Each line contains n positive integer numbers. The jth number in the ith line descirbes ith staff\u2019s attitude to the jth task.\n   N=0 indicates the end of input.\n", "output_description": "   For each test case you should output one line, and just one number in this line, The number is the maximum.", "samples": "[{\"input\": \"2\\n10 90\\n80 100\\n3\\n50 60 70\\n70 75 80\\n80 90 100\\n0\\n\", \"output\": \"170\\n230\\n\"}]", "test_case_id": "1436", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 86, "total_accepted_number": 42, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1438, "fields": {"title": "Who\u2019s Winner?", "description": "<div><p></p><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Nic and Susan play the game of multiplication by multiplying an integer p by one of the numbers 2 to 9. Nic always starts with p=1, does his multiplication. Then Susan multiplies the number, then Nic and so on. Before a game starts, they draw an integer 1\uff1c\uff1dn\uff1c\uff1d4,294,967,295 and the winner is who first reaches p\uff1e\uff1dn.</div></div>", "input_description": "    Each line of input contains one integer number n.", "output_description": "  For each line of input output one line either\n  Nic wins\n  Or\n  Susan wins\n  Assume that both of them play perfectly.\n", "samples": "[{\"input\": \"162\\n17\\n34012226\\n\", \"output\": \"Nic wins\\nSusan wins\\nNic wins\\n\"}]", "test_case_id": "1438", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 208, "total_accepted_number": 61, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1439, "fields": {"title": "Sort Algorithm", "description": "<div>\u3000\u3000One of the fundamental problems of computer science is ordering a list of items. There\u2019re a plethora of solutions to this problem, known as sorting algorithms. Some sorting algorithms are simple and intuitive, such as the bubble sort. Others, such as the heap sort are not so simple, but produce lightening-fast results.</div><p></p><div>&nbsp;&nbsp;\u3000 In the following is a list of some sorting algorithms. Of course, I can\u2019t tell you how to implement them here. You must use your own knowledge.</div><p></p><div>&nbsp;&nbsp; Bubble sort</div><p></p><div>&nbsp;&nbsp; Heap sort</div><p></p><div>&nbsp;&nbsp; Inserting sort</div><p></p><div>&nbsp;&nbsp; Merge sort</div><p></p><div>&nbsp;&nbsp; Quick sort</div><p></p><div>&nbsp;&nbsp; Selection Sort</div><p></p><div>&nbsp;&nbsp; Shell sort</div><p></p><div>&nbsp;&nbsp; My business here is to give you some numbers. And to sort them is your business. Attention, I want the smallest number at the top of the sorted list.</div>", "input_description": "  The input file will consist of series data sets. Each data set has two parts. The first part contains two non-negative integers, n(1\uff1c=n\uff1c=100,000) and m(1\uff1c=m\uff1c=n), representing the total of numbers you will get and interval of the output sorted list. The second part contains n positive integers. I am sure that each integer in this part will be less than 2,000,000,000.\nThis input is terminated by a line with two zeros.\n", "output_description": "\u3000\uff26or one data set, you should output several numbers in ONE line. After you get the sorted list, you should output the first number of each m numbers, and you should print exact ONE space between two adjacent numbers. And please make sure that there should NOT be any blank line between outputs of two adjacent data sets.", "samples": "[{\"input\": \"8 2\\n3\\n5\\n7\\n1\\n8\\n6\\n4\\n2\\n0 0\\n\", \"output\": \"1 3 5 7\\n\"}]", "test_case_id": "1439", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 221, "total_accepted_number": 92, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1440, "fields": {"title": "Convex Hull", "description": "<div>&#160;&#160;&#160;&#160; Maxwell is a naughty boy.</div><p></p><div>&#160;&#160;&#160;&#160; One day, he fouled the white and clean wall with ink. Since his mother will come back home soon, Maxwell wanted to find a white convex polygon to cover these ink drops. Could you tell him the minimal area of these ink drops, you will answer the minimal area of the convex polygon that can cover all the ink drops.</div>", "input_description": "   The first line of the input is a positive integer T. T is the number of the test cases followed.\n   The first line of each test case is a positive integer N(0\uff1cN\uff1c=10^5). N is the number of the ink drops. After that, N lines are followed. The ith line contains two integers Xi and Yi (0\uff1c=Xi,Yi\uff1c20,000) which tell you the coordinated of the ith ink drops. There may be one or more spaces between these integers.\n", "output_description": "    The output of the program should consist of one line of output for each test case. The output of each test case only contains the minimal area of the convex polygon. The area is a real number that has one digit after the decimal point. No redundant spaces are needed.", "samples": "[{\"input\": \"2\\n4\\n0 0\\n1 0\\n0 1\\n1 1\\n2\\n0 0 \\n0 1\\n\", \"output\": \"1.0\\n0.0\\n\"}]", "test_case_id": "1440", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 399, "total_accepted_number": 85, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1441, "fields": {"title": "Hero", "description": "<div>&nbsp;&nbsp; &nbsp;The beautiful princess is caught by the demon again. Super Mario, her lover, has to take the responsibility to be the hero. The princess is incarcerated in a horrific castle which is smelly and full of monsters. She is very scared. Super Mario is very worried about the princess and wants to see the princess as soon as possible. Though he runs fast, he still wants to know how fast it will take to reach the place where the princess is.</div><p></p><div>&nbsp;&nbsp; The castle is a N*M matrix. Initially Mario and princess are located in different positions. Mario can move up, down, left, right ,one step per second. Specially, there are some springs distributed in the castle( Don\u2019t ask why, maybe the demon likes to play spring). These springs are supernatural and may be used as a tool to help Mario if used properly. Each of the spring has an attribute-Spring power which is an integer number actually. When Mario enters a grid where there is a spring whose spring power is k, he will be sprung k grids following the direction he enters the grid in no time.</div><p></p><div>&nbsp;&nbsp; For example, supposed Mario is in (2,8), and there is a spring in grid(2,7) with 5 spring power. If Mario goes left one step, he will be sprung 5 grids left. So the final position of Mario is (2,2) and the time from (2,8) to (2,2) for Mario is just one second.</div><p></p><div>&nbsp;&nbsp; Note that if Mario is sprung outside the matrix, he will be stopped by the wall of the castle and drop on the grid beside the wall. For example, supposed Mario is in (2,8), and there is a spring in grid(2,7) with 10 spring power. If Mario goes left one step, he will just sprung 6 grids left, then stop and drop in grid (2,1).</div><p></p><div>&nbsp;&nbsp; Moreover, if the position where Mario will land has a spring , he can be sprung again. That means Mario can be sprung consecutively until he lands on a grid without spring. And only the landing position may affect Mario\u2019s action, all grids that Mario passes by when he is sprung have nothing to do with him. For example, supposed Mario is in (2,8) and there are two grid have springs \uff0d(2,7) and (2,5), both are 5 spring power. If Mario steps left, he will be sprung to position (2,2). So the spring in (2,5) does not work on him.</div><p></p><div>&nbsp;&nbsp; It is your task to tell Mario the minimum time to reach the princess.</div>", "input_description": "Input contains several test cases. Each case begins with one line containing two integers, n and m(3<=n,m<=100), which are the row number and column number of the castle. Then follows a non-negative integer number k, indicating the number of springs. Then follows k lines, each line has three positive integers- x,y, and p,x,y is the coordinated of the spring (2<=x<=n-1,2<=y<=m-1) and p is the spring power described above. These are followed by 2 lines lastly, the first line contains two integers, which represent the coordinated of Mario, and the other line is the coordinated of the princess.\n  You can assume all of the case are legal. The initial positions of Mario, princess, and springs are distinct. All of the x coordinates are in the range of [1,n] and all of the y coordinates are in the range of [1,m]. And no spring is next to the wall of the castle.\n", "output_description": "For each test case, just output one line presenting the minimum time Mario will spend. If Mario can not save the princess, just print \u201cImpossible\u201d in one line (without quotation marks).", "samples": "[{\"input\": \"10 10 \\n0\\n2 2\\n7 8\\n10 10\\n1\\n2 7 5\\n2 8\\n1 1\\n10 10\\n1\\n2 7 10\\n2 8\\n1 1\\n10 10\\n2\\n2 7 5\\n2 5 5\\n2 8\\n1 1\\n10 10\\n4\\n7 9 2\\n7 7 2\\n6 8 2\\n8 8 2\\n2 2\\n7 8\\n\", \"output\": \"11\\n3\\n2\\n3\\nImpossible\\n\"}]", "test_case_id": "1441", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 106, "total_accepted_number": 27, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1442, "fields": {"title": "Investment", "description": "<div>&nbsp;&nbsp;&nbsp;&nbsp; Stock market analyzing is very important for investment. A good analysis may earn you a lot of money, or at least minimize your loss. Now you are asked to carry out such an important task. Please write a program to select out 2 most beneficial stocks.</div><p></p><div>&nbsp;&nbsp;&nbsp; There are N kinds of stocks in the market and they are simply represented by integers from 1 to N. Each of the N stocks has an initial price which is changing frequently.</div><p></p><div>&nbsp;&nbsp;&nbsp; Benefits are calculated as follows: if a stock has no previous price, then its benefit is 0, otherwise the benefit is its current price subtracts its previous price. For stocks with the same benefits, select the one with least id first.</div>", "input_description": "   There are multiple test cases. The first line of each case is the number N (2<=N<=100,000). Then followed by N lines and each line has an integer number pi (1<=pi<=10,000) which specify the initial prices of the stocks from 1 to N. Then followed by k (0<=k<=100,000) lines and each line may be either two integers-id and pid which tells that the idth stock price changed to pid, or an instruction \u201cReport\u201d. After these k lines there will be a line containing only \u201cEndOfCurrentCase\u201d, which indicate the end of current case. And after all cases there will be a line containing only \u201cEndOfInput\u201d, which indicate the end of input.", "output_description": "  For each case, output the case number first, then followed by several lines, each line contains 2 integers specifying the top 2 stock ids corresponding to the \u201cReport\u201d instruction. No redundant spaces are needed.", "samples": "[{\"input\": \"4\\n10\\n20\\n30\\n40\\n1 100\\n2 90\\n3 80\\n4 70\\nReport\\nReport\\n2 60\\nReport\\nEndOfCurrentCase\\n3\\n1\\n1\\n1\\n2 10\\n3 20\\nReport\\nEndOfCurrentCase\\nEndOfInput\\n\", \"output\": \"Case 1:\\n1 2\\n1 2\\n1 3\\nCase 2:\\n3 2\\n\"}]", "test_case_id": "1442", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 136, "total_accepted_number": 24, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1444, "fields": {"title": "Special Experiment", "description": "<p><span><font>&nbsp;&nbsp;<font><font>&nbsp;&nbsp;&nbsp; <span><font>As we known, an atom can be in different energy states (or \u201cenergy levels\u201d). Usually, when it transits form a higher energy state to a lower one, it will emit a photon, whose energy is equal to the difference in energy of these two states. Absorption of photons is the reverse process. If a photon, whose energy equal to the difference in energy of two states of an atom, passes by, it may be absorbed and its energy will put the atom into a higher energy level. For most elements, the atom can transit between any two states directly, by emitting or absorbing only one photon. Scientists are puzzled by a new element that they discovered recently. For two certain energy states, the atom of this element can transit between them directly (emitting or absorbing one and only one photon), but for some other pairs of energy states, the atom cannot.</font></span></font></font></font></span></p><p></p><p><span><font><span></span></font></span><span><font><font><font><span><font>Generally speaking, when an atom transits among energy states one after another, a trail of events (emitting or absorbing a photon) occurs. For example, when transiting from energy state E<sub>i1</sub> to E<sub>it</sub>, the atom follows this sequence:</font></span><br /><span><font>E<sub>i1</sub>,E<sub>i2</sub>,E<sub>i3</sub>,\u2026,E<sub>ik</sub>,\u2026,E<sub>it</sub></font></span></font></font><p></p><p class=\"MsoNormal\"><span><font><font><font>E<sub>ik</sub>(1&lt;=k&lt;=t) represents a certain energy state. During the process of transiting from E<sub>ik</sub> to E<sub>ik+1</sub>, one and only one photon is emitted or absorbed.</font></font></font></span></p><p></p><p class=\"MsoNormal\"><span><font><font><font>The atom can be in any energy state and transit to some other one. But as we mentioned above, for some pairs of energy states, this special atom cannot transit between them directly. What\u2019s more, when its energy state changes from one to another, for example, from E<sub>j1</sub> to E<sub>jw</sub>, it can only follow a unique sequence E<sub>j1</sub>,E<sub>j2</sub>,E<sub>j3</sub>,\u2026,E<sub>jw</sub>. And the most interesting things is that it can only follow another unique sequence, E<sub>jw</sub>,\u2026, E<sub>j3</sub>,E<sub>j2</sub>,E<sub>j1</sub>. when it transits back from E<sub>jw</sub> to E<sub>j1</sub>. You can find that it is the reversion of the former one! Right! Isn\u2019t it special?</font></font></font></span></p><p></p><p class=\"MsoNormal\"><span></span><span><font><font><font>Now, the scientists need your help today. In an experiment, some atoms of this new element will be put into a container. Any two atoms would be regarded as \u201cdangerous atoms\u201d if they satisfy one of the following conditions:</font></font></font></span></p><p></p><p class=\"MsoNormal\"><span></span><font><font><font><span><span style=\"mso-list: \">(1)<span>&nbsp;&nbsp; </span></span></span><span>They are in the same energy state</span></font></font></font></p><p></p><p class=\"MsoNormal\"><font><font><font><span><span style=\"mso-list: \">(2)<span>&nbsp;&nbsp; </span></span></span><span>They are in different energy states. But if one of them emits or absorbs a photon, they will be in the same states too.</span></font></font></font></p><p></p><p class=\"MsoNormal\"><span><font>You must make sure that there are no dangerous atoms in this container, and the higher the total energy of the atoms in the container is, the more easily will the experiment succeed.</font></span></p><p></p><p class=\"MsoNormal\"><span></span><span><font>Now, the scientists have told you all photons that the atoms of this element can emit or absorb, as well as the energy of all atom states. They ask you calculate the highest total energy that the atoms in the container can reach.</font></span><font>&nbsp;</font></p>", "input_description": "   There are several test cases in the input. Each begins with a line containing two integers N, M (0\uff1cN,M\u2264200), representing the number of the energy levels and the number of the different photons that this kind of atom can emit or absorb respectively. The two numbers are followed by exactly N+M lines, which contain one positive integer each. These N+M positive integers are not greater than 1,000,000. The first N distinguishing integers are the energy of the atom in the N different energy states in ascending order. The next M integers correspond to the energy of the M different photons, which can be emitted or absorbed by atoms of this element. If the difference in energy of any two states equals to the energy of one of the M photons, the atom can transit between these two states directly.\nThere is no blank line between two data sets. The last test case is followed by a line containing two zeros.\n ", "output_description": "For each test case, output one line containing an integer, which indicates the highest total energy that the atoms in the container can reach, There should be no blank line between any two cases.", "samples": "[{\"input\": \"3 1\\n2\\n4\\n6\\n2\\n0 0\\n\", \"output\": \"8\\n\"}]", "test_case_id": "1444", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 79, "total_accepted_number": 31, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1446, "fields": {"title": "Food delivery", "description": "<div>&nbsp;&nbsp; College students have wide freedom in many circumstances. For instance, nowadays, more and more students choose to order food from outside school, instead of eating in the school canteens. Owing to the rapid development of network communication, the ways students ordering food are multifarious. They can order food on the phone, as well as through network such as QQ or BBS. Ordering food is convenient and laborsaving, however, sometimes many students may complain about waiting too long time for the food and some students may even eat other food instead because of not being able to wait so long. As a result, the students who receive food late will be depressed and the benefit and credit of the fast food canteens will be debased.</div><p></p><div>&nbsp;&nbsp; Ivan and Cristy graduated from the same college recently. Considering the awful circumstances above, they establish a delivery company (Named IC), which controls the food delivery of the fast food canteens. They hope the IC company provides students with good and fast serives in scientific, rational and concentrative ways of delivery. Certainly, they hope to benefit at the same time.</div><p></p><div>&nbsp;&nbsp; Now, let\u2019s suppose there are N places, one of which is the unique food delivery center and all the food are sent from it. The other N-1 places are dorms to which food must be delivered. Each dorm has a time limit after which food can not be accepted, that is to say, the food ordered by the students in a dorm must be received before the dorm\u2019s time limit. Because the IC company adopts scientific and concentrative methods, all the food needed are well prepared and there is no limit&nbsp; in the amount of food that can be delivered at a time. However, because the company has been set up only for a short time, there is only one delivery team at work for the moment. In addition, in order to estimated the efficiency of delivery, the IC company will compute the time for delivery. The set the time when the food is just sent from the delivery center 0, and the distance between two places is denoted as the walking time between them. Because there may be more than one way connection two palaces, the time need to walk form one place to another place may be no unique.</div>&nbsp;&nbsp; Now, your job is to help the IC company to find out a delivery way, which will satisfy all the requests of the dorms(arrive at every dorm before the dorm\u2019s time limit) and minimize the total waiting time of all the dorms( the waiting time of a dorm is from 0 to the time the food is accepted by the students in the dorm). If there is no way satisfying all the requests of the dorms, the IC company will regard the delivery as a failure.", "input_description": "   Input will contain several test case. Each test case begins with a line containing an integer n(2\uff1c=n\uff1c=30\uff09\uff0crepresenting the number of places, and we suppose the first place is the delivery center. In the following n lines, each line represents one place and contains n positive integers (including 0) separated by a single space. The jth integer of the ith line is the walking time from the ith place to the jth place. The next line after the n lines contains n-1 positive integer, representing the time limits of the dorms.\n   The last test case is followed by a line containing one zero. No extra spaces at the beginning /end of each line.\n", "output_description": "  For each test case in the inupt you should output an integer, representing the minimum total waiting time of all the dorms. If no solution is found, you should output -1 in the corresponding line.", "samples": "[{\"input\": \"4\\n0 3 8 6\\n4 0 7 4\\n7 5 0 2\\n6 9 3 0\\n30 9 30\\n3\\n0 10 10\\n10 0 1\\n10 1 0\\n10 10\\n0\\n\", \"output\": \"36\\n-1\\n\"}]", "test_case_id": "1446", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 10000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 100, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1447, "fields": {"title": "Houses", "description": "<div>&nbsp;&nbsp; There are several houses in a village. Houses are connected by roads, since building a road will cost much money, any two houses are connected by at most one road, and every road is guaranteed to connect two different houses.</div><p></p><div>&nbsp;&nbsp; In the village, the smartest people always live in the most convenient house, and the most convenient houses is house connecting to the maximum number of houses. Now it is your task to find out the number of houses connecting to the most convenient house.</div>", "input_description": "   There are multiple cases. The first line of each case contains two integers n and m( 1\uff1c=n\uff1c=20, 0\uff1c\uff1dm\uff1c=20), indicating the number houses and the number of roads, houses are numbered from 1 to n. Then for each of the following m lines, there are two different integers a and b( 1\uff1c=a, b\uff1c\uff1dn), indicating that there is a road connecting house a and house b. Input is terminated by two 0\u2019s.", "output_description": "For each case output the result in one line.", "samples": "[{\"input\": \"1 0\\n2 0\\n2 1\\n1 2\\n3 2\\n1 2\\n2 3\\n5 3\\n1 2\\n3 4\\n4 5\\n0 0\\n\", \"output\": \"0\\n0\\n1\\n2\\n2\\n\"}]", "test_case_id": "1447", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 105, "total_accepted_number": 67, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1448, "fields": {"title": "Outernet", "description": "<div><p></p><div>&nbsp;&nbsp; A Company named Outdaters is running a small computer wire line network, called Outernet. Not like internet, Outernet is not base on the TCP/IP protocol. Due to lacking of mondy, not all the computers in Outernet can communicate with each other directly.</div><p></p><div>&nbsp;&nbsp; Outdaters have already found the solution. They created a protocol to make all computers in the network become application proxies. An application proxy can receive data from a connected computer and send them out to another connected computer. Therefore, by using this protocol in outernet, if a computer wants to send something to a computer not linked directly, it has to send them to a connected computer/application proxy and ask it to help sending them to the destination or another connected computer/application proxy.</div><p></p><div>&nbsp;&nbsp; The protocol is described as:</div><p></p><div>&nbsp;&nbsp; A\u3001 Port</div><p></p><div>&nbsp;&nbsp; Application proxies use port to indicate each connected computer. Port number is an integer number form 0 to 32767.&nbsp; To an application proxy, 0 means the application proxy itself, each other port number represents a unique computer connected to the application proxy.</div><p></p><div>&nbsp;&nbsp; B\u3001Commands</div><p></p><div>&nbsp;&nbsp; The application proxy accepts only 3 commands, case sensitive: TO, DATA,QUIT.</div><p></p><div>&nbsp;&nbsp; To each incoming command, application proxy will response with 3-digit result code in a lind to the incoming port after handled this command.</div><p></p><div>&nbsp;&nbsp; Format:</div><p></p><div>&nbsp;&nbsp; xxx xxx ?the 3-digit result code&nbsp;&nbsp; </div><p></p><div>&nbsp;&nbsp; Result Codes:</div><p></p><div>&nbsp;&nbsp; 100: OK. No Error/Data routed to destination</div><p></p><div>&nbsp;&nbsp; 101: OK. Data routed to application. (Destination computer is application proxy itself.)</div><p></p><div>&nbsp;&nbsp; 200: Session ends(Response to QUIT command)</div><p></p><div>&nbsp;&nbsp; 300: Unknown command</div><p></p><div>&nbsp;&nbsp; 301: Unknown destination</div><p></p><div>&nbsp;&nbsp; 302: No session began</div><p></p><div>&nbsp;&nbsp; 303: Looping not allowed (when incoming port=Outgoing port)</div><p></p><div>&nbsp;&nbsp; Details for each command:</div><p></p><div>&nbsp;&nbsp; 1. TO: </div><p></p><div>&nbsp;&nbsp; Tell the application proxy, the following data need to be sent to , and cancel the last \u201cTO\u201d command\u2019s effect (seng a \u201cQUIT\u201d command to the original destination computer). If TO command fails( result code is neither 100 nor 101)\uff0cthe state of the application proxy will not be changed.</div><p></p><div>&nbsp;&nbsp; Possible result codes are:</div><p></p><div>&nbsp;&nbsp; 100: The destination computer is found in routing table, and not the application proxy itself.</div><p></p><div>&nbsp;&nbsp; 101: The destination computer is found in routing table, and IS application proxy itself.</div><p></p><div>&nbsp;&nbsp; 301: The destination computer is not found in routing table.</div><p></p><div>&nbsp;&nbsp; 303: The destination computer is found in routing table, but incoming port =outgoing port.</div><p></p><div>&nbsp;&nbsp; 2. DATA \uff1cLF\uff1e \uff1cthe data\uff1e\uff1ca dot\u201d.\u201d\uff1e\uff1cLF\uff1e</div><p></p><div>&nbsp;&nbsp; Send \uff1cthe data\uff1e to the destination computer. \uff1cthe data\uff1e will be regarded as a data stream, and sent to the destination without any alteration if the destination computer is not the application proxy itself. The backslash(\u201c\\\u201d) is the meta character, \u201c\\.\u201d Means a simple dot \u201d.\u201d instead of the end indicator, and \u201c\\\\\u201d means \u201c\\\u201d.</div><p></p><div>&nbsp;&nbsp; Possible result codes are:</div><p></p><div>&nbsp; 100: The destination computer is found in routing table, and not the application proxy itself. The data is routed to the corresponding outgoing port.</div><p></p><div>&nbsp; 101: The destination computer is found in routing table, and IS application proxy itself. The data is routed to the application running on this application proxy.</div><p></p><div>&nbsp; 302: No session began, this command is ignored.</div><p></p><div>&nbsp; 3. QUIT\uff1cLF\uff1e</div><p></p><div>&nbsp; End this communication session.</div><p></p><div>&nbsp; Possible result codes are:</div><p></p><div>&nbsp; 200: Session ends(Response to the QUIT command)</div><p></p><div>&nbsp; 302: No session began, this command is ignored.</div><p></p><div>&nbsp; C. Session</div><p></p><div>&nbsp;&nbsp; When a computer (the requester) sends a \u201cTO\u201d command to an application proxy, a communication session begins: when a \u201cQUIT\u201d command is sent to the application proxy, the session ends. In a session, the requester can send multiple \u201cTO\u201d and \u201cDATA\u201d commands to an application proxy to sent out multiple messages.</div><p></p><div>&nbsp;&nbsp; An application proxy is able to handle sessions simultaneously from different ports.</div><p></p><div>&nbsp;&nbsp; D. Routing table</div><p></p><div>&nbsp;&nbsp; Each application proxy holds a routing table. It uses this table to find which port should be used the destination computer name. Each line in the routing table contains 2 fields, the first is the destination computer name, and the second is the outgoing port number.&nbsp; It means, the data to tbe sent to a computer with the destination computer name, will be sent out via the port with the outgoing port number. Port number 0 means, the data should be routed to the application running on this application proxy; that destination computer name is actually the application proxy\u2019s name. </div><p></p><div>&nbsp;&nbsp; E. Routing</div><p></p><div>&nbsp;&nbsp; Application proxies use the same \u201cTO\u201d, \u201cDATA\u201d,\u201dQUIT\u201d commands to route the incoming data is routing is possible.</div><p></p><div>&nbsp;&nbsp; After searching on the routing table, if the outgoing port found, application proxies must create a complete session on the outgoing port for each valid incoming \u201cTO\u201d command: One \u201cTO\u201d command at the beginning, Zero or more DATA commands to route the data, one \u201cQUIT\u201d command in the end if the incoming session ends or another incoming \u201cTO\u201d command is received.</div><p></p><div>&nbsp;&nbsp; Port 0 is handled as same as other outgoing ports except that no actually outgoing command is sent, i.e. all the commands\u2019 result code will be sent to the incoming port, but no commands will be sent to any outgoing port.</div><p></p><div>&nbsp;&nbsp; Now, Outdaters hires you to write the engine to implement the protocol for the application proxy.</div></div>", "input_description": "  The input consists of a sequence of test cases. Each begins with a routing table of an application proxy and tehn the incoming requests of the application proxy.\n  A routing table includes, k in order, a line with an integer M(1\uff1c=M\uff1c=32\uff0c768\uff09\uff0cthe number of lines in the routing table; M lines, each of which has a routing line. Each routing line contains a unique destination computer name(1 to 15 alphanumeric characters in the routing table), and then the outgoing port number (0 to 32767 integer), separated by a space, and the computer names are case sensitive.\n The incoming requests of the application proxy include several request sessions from the connected computers. A line starts with a number sign \u201c#\u201d and then an integer P( -1, 1 to 32767), means the following input is from port P, P<0 means the test case finishes. The commands in request sessions will not be broken by the \u201c#\u201d lines. To simplify the input handling , data commands in our input file will just  contain \u201c0\u201d-\u201c9\u201d,\u201da\u201d-\u201cz\u201d, \u201cA\u201d-\u201cZ\u201d,\u201d@\u201d,\u201d#\u201d,\u201d-\u201c,\u201d+\u201d,\u201d-\u201c,\u201d*\u201d,\u201d/\u201d,\u201d\\\u201d,\u201d?\u201d,\u201d,\u201d,\u201d.\u201d and \uff1cLF\uff1e.\nThe input is terminated by a single zero.\n", "output_description": "   For each test case, print all the outputs of the ports sending out data, in the order of the corresponding input. For each port\u2019s output, a line starts with a number sign \u201c#\u201d and then an integer P (-1, 1 to 32767), means the following commands are output in port P, P=-1 means the output of the current test case finishes. Following the \u201c#\u201d line is the commands output in this port till another \u201c#\u201d line. A \u201c#\u201d line is needed only when the port number need to be changed.\n   #\uff1cport number\uff1e \uff1cLF\uff1e\n       The commands output in this port\n       #\uff1canother port number>\uff1cLF\uff1e\n       The commands output in this port\n       \u2026\n       #-1\uff1cLF\uff1e\n", "samples": "[{\"input\": \"5\\nRED 0\\nYELLOW 1\\nGREEN 2\\nBLUE 3\\nWHITE 3\\n#1\\nTO:GREEN\\nDATA\\nHELLO\\n.\\n#4\\nTO:WHITE\\n#1\\nQuit\\nQUIT\\n#2\\nTO:GREEN\\nDATA\\nA JOKE to myself\\n.\\nQUIT\\n#3\\nTO:ORANGE\\nQUIT\\n#4\\nQUIT\\n#-1\\n0\\n\", \"output\": \"#2\\nTO:GREEN\\n#1\\n100\\n#2\\nDATA\\nHELLO\\n.\\n#1\\n100\\n#3\\nTO:WHITE\\n#4\\n100\\n#1\\n300\\n#2\\nQUIT\\n#1\\n200\\n#2\\n303\\n302\\n302\\n#3\\n301\\n302\\nQUIT\\n#4\\n200\\n#-1\\n\"}]", "test_case_id": "1448", "hint": "\uff1cLF\uff1e means 0xa", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 12, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1449, "fields": {"title": "University Rankings", "description": "<div>&nbsp;&nbsp;&nbsp;&nbsp; At present, the university rankings are very popular. They help senior high school students to choose university for further student. </div><p></p><div>&nbsp;&nbsp; &nbsp; As we know, a university usually has many different departments, such as department of computer science, department of Electronic Engineering, etc. Some of them are quite good when comparing to the other universities, but others are not. So, most of university rankings are composed of several ranking lists, each list for one department.</div><p></p><div>&nbsp;&nbsp; But here comes a problem that sometimes it\u2019s hard to determine which university is better, when comparing two universities with each other. Fortunately, Doctor Bob has advanced a new concept named absolutely better\u201d, with which the problem above can be partially solved.</div><p></p><div>&nbsp;&nbsp; Now, here is an example to explain the concept \u201cabsolutely better\u201d:</div><p></p><div>&nbsp;&nbsp; Assume that there are three universities (X,Y,Z) and every university has three department: CS, EE and FLS. And the ranking of different departments are as followed:</div><p></p><div>&nbsp;&nbsp; The ranking of CS: X&gt;Y&gt;Z(X&gt;Ymeans X have a better CS department than Y)</div><p></p><div>&nbsp;&nbsp; The ranking of EEL:X&gt;Z&gt;Y</div><p></p><div>&nbsp;&nbsp; The ranking of FLS: Z&gt;X&gt;Y</div><p></p><div>&nbsp;&nbsp; Obviously, each department of university X is better than that of university Y. Then it\u2019s called that X is absolutely better than Y. Using the \u201cabsolutely better\u201d concept, it becomes possible to compare some pairs of the universities.</div><p></p><div>&nbsp;&nbsp;&nbsp;Now Bob has the complete ranking of different departments of many universities, and he wants to find k universities(U1,\u2026,UK) such that Ui is absolutely better than Uj(for any i&lt;j).Could you tell Bob the maximum value of K?</div>", "input_description": "    The first line of the input is a positive integer C. C is the number of test cases followed.\n   The first line of each test case is two positive integer N,M(0\uff1cN,M\u2264100), N is the number of universities and M is the number of departments. And then M lines follow. The ith (1\uff1c=i\uff1c=M\uff09 line contains N numbers Ui\uff081\u2264i\u2264N,1\u2264Ui\u2264N), indicating the ranking of the ith department. If University Ui precedes to University Uj in line k, then the kth department of Ui is better than the kth department of Uj.\n", "output_description": "The output should consist of C lines, one line for each test case. Each line only contains one integer- the maximum value of k as described above. No redundant spaces are needed.\n\n", "samples": "[{\"input\": \"1\\n3 3\\n1 2 3\\n1 3 2\\n3 1 2\\n\", \"output\": \"2\\n\"}]", "test_case_id": "1449", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 130, "total_accepted_number": 41, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1453, "fields": {"title": "Gray Code", "description": "<div>&nbsp;Gray code is an interesting code sequence and has many applications in computer science.No matter you have known it before or not, here are some introductions about its features:</div><p></p><div>&nbsp;&nbsp;&nbsp; (1)&nbsp;&nbsp;&nbsp; Gray code has 2^n unique elements;</div><p></p><div>&nbsp;&nbsp;&nbsp; (2)&nbsp;&nbsp;&nbsp; Each element contains n digits of 0 or 1;</div><p></p><div>&nbsp;&nbsp;&nbsp; (3)&nbsp;&nbsp;&nbsp; Each pair of adjacent elements has exactly one different digit.</div><p></p><div>&nbsp;&nbsp;&nbsp; For example, when n=2, one of the gray code sequence is 00,01,11,10.</div><p></p><div>&nbsp;&nbsp; Now,the task is quite simple, given a positive integer n, generate the corresponding Gray code sequence.</div>", "input_description": "    Input may contain multiple test cases. Each test case consists of one positive integer n (n<=16), input is terminated by a case with n=0, which should not be processed.\n\n", "output_description": "  For each test case, output the corresponding Gray code sequence, one element per line. There may be mulitple answers, any of them will be accepted. Please outpu a blank line after each test case.", "samples": "[{\"input\": \"1\\n2\\n0\\n\", \"output\": \"0\\n1\\n\\n00\\n01\\n11\\n10\\n\"}]", "test_case_id": "1453", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 181, "total_accepted_number": 77, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1454, "fields": {"title": "Rabbit", "description": "<div>The rabbit have powerful reproduction ability. One pair of adult rabbits can give birth to one pair of kid rabbits every month. And after m months, the kid rabbits can become adults rabbits.</div><p></p><div>&#160; As we all know, when m=2, the sequence of the number of pairs of rabbits in each month is called Fibonacii sequence. But when m!=2, the problem seems not so simple. You job is to calculate after d months. How many pairs of the rabbits are there if there is exactly one pair of adult rabbits initially. You may assume that none of the rabbits dies in this period.</div>", "input_description": "  The input may have mulitple test cases. In each test case, there is one line having two integers m(1<=m<=10), d(1<=d<=100), m is the number of months after which kid rabbits can become adult rabbits, and d is the number of months after which you should calculatethe nubmer of pairs of rabbits. The input will terminated by m=d=0.", "output_description": " You must print the number of pairs of rabbits after d months, one integer per line.", "samples": "[{\"input\": \"2 3\\n5 5\\n0 0\\n\", \"output\": \"5\\n6\"}]", "test_case_id": "1454", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 95, "total_accepted_number": 35, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1455, "fields": {"title": "Circling the gift", "description": "<div>&nbsp; &nbsp; Circling the gift is a game; you can meet this game if you go to some parks. On the ground, there are many gifts; you can enclose them using a circle. If you can enclose as much gift as you can, you are a winner. In this game, the distance between two adjacent gifts is the same and the circle can only enclose a gift at a time. </div><p></p><div>&nbsp;&nbsp;&nbsp;&nbsp; Now, rule is changed. The circle becomes larger; it can enclose one or more gifts at a time. Because the value of the gifts are different, so you task is to enclose as much expensive gifts as you can at a time.</div>", "input_description": "   Input includes a number of test cases. First line of each case is three integers n (n<1000), m (m<1000) and d, where n and m implies how many rows and columns of gifts are arranged on the ground ,d represents the diameter of the circle used to enclose the gift. The following n lines are the description of the value for the gifts. Each line contains m integers, which implies the value of the gifts in a line.\n   Suppose the distance between each gifts in a line are 1 unit, and the distance between each row are also 1 unit. The gifts can be considered as a point.\n", "output_description": " Output the maximum value of the gifts enclosed at a time for each case, each output contains a line.", "samples": "[{\"input\": \"2 2 1\\n10 20\\n30 10\\n2 2 2\\n10 20\\n30 10\\n\", \"output\": \"30\\n70\\n\"}]", "test_case_id": "1455", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 9, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1457, "fields": {"title": "Select Goods", "description": "<span style=\"FONT-SIZE: 12pt; FONT-FAMILY: &#039;Times New Roman&#039;; mso-fareast-font-family: \u5b8b\u4f53; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">&nbsp;&nbsp;&nbsp; Chicken is a purchasing agent. One day, he come to a supermarket and wanted to buy some goods. He has made a rule: at each time, he would choose n goods and their weight should be exactly m kilograms. In this supermarket, each goods has their weight showed in the tag, so it\u2019s not difficult for him to choose them.</span>", "input_description": "   Input includes a number of test cases. First line of each case contains k (k<10,000) integers, which tell the weight of those goods, these integers are separated by one or more spaces; Second line of each case has two integers: n and m, which tell how many goods he will choose and the total weight of these goods he has choose.", "output_description": "   Output NO if you couldn\u2019t find n goods which are exactly m kilograms, or print their weight in a line, each weight is separated by a space. You should choose those goods which appear as early as possible in input and the results should be output ascendant according to their order in input. ", "samples": "[{\"input\": \"10 20 7 8 5\\n3 35\\n10 20  7 8 5\\n4 35\\n\", \"output\": \"10 20 5\\nNO\\n\"}]", "test_case_id": "1457", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 55, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1459, "fields": {"title": "Task schedule", "description": "<div>&nbsp;&nbsp;&nbsp;&nbsp; A super computer can do many tasks at a short time. Catherin is a manger of a super computer. Every day, he has to arrange all the tasks at first. For each task, he must apply it to the computer before a deadline, or he will be fined. When a customer gives his task to Catherin, he will tell him the deadline of the task and its corresponding fine if the task can\u2019t be finished before the deadline. In fact, Catherin couldn\u2019t satisfy all the customers, the question is how he gets a least fine? Could you write a program to help him?</div>", "input_description": "  Input includes a number of test cases. First line of each case is an integer number n(n<100,000), which tells the number of tasks to be scheduled. The second line includes n integer numbers, which tells the deadline for each task, the ith number is the deadline for ith task. The third line is the fine to be punished for each task if the task can\u2019t be finished before the deadline given before, the ith number is for the ith task.", "output_description": "Output the least fine for each case, one line for a case.", "samples": "[{\"input\": \"3\\n2 2 2\\n10 30 50\\n4\\n1 3 2 3\\n10 20 10 40\\n\", \"output\": \"10\\n10\\n\"}]", "test_case_id": "1459", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 203, "total_accepted_number": 61, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1461, "fields": {"title": "Botchagaloop", "description": "<div>The botchagaloop value of a number x is found as follows. First, convert x to base 8.Call this p. Next, sort the digits of p in increasing order. Call this q. Subtract q from p (in base 8, of course). Repeat the \u201csort-subtract&quot; sequence 4 more times, or until the digits in the result are in sorted order (whichever come first). Finally, convert the number back to base 10.</div>", "input_description": "Input Includes a number of test cases. Each case contains a line, each line contains an integer which is less than 1,000,000. \n", "output_description": "Output the botchagaloop value of each input. Each output contains a line.", "samples": "[{\"input\": \"3418\\n123\\n\", \"output\": \"1008\\n28\\n\"}]", "test_case_id": "1461", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 61, "total_accepted_number": 28, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1462, "fields": {"title": "Digit Count", "description": "<div>Consider those 5 digit numbers (i.e., between 10,000 and 99,999 inclusive) that can be written in the form</div><p></p><div>&nbsp;&nbsp;&nbsp;&nbsp; a<sup>n</sup>b<sup>m</sup></div><p></p><div>where a and b are distinct prime numbers, and n, and m are non-negative integers. How many times does the digit k appear?</div>", "input_description": " Input includes a number of test cases. Each case contains a line, each line contains three positive integers: a,b and k, they are separated by \u2018,\u2019.", "output_description": " For each case, output the times of the digit k appears. Each output contains a line.", "samples": "[{\"input\": \"5, 13, 6\\n11, 37, 2\\n\", \"output\": \"3\\n1\\n\"}]", "test_case_id": "1462", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 91, "total_accepted_number": 27, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1463, "fields": {"title": "Find members", "description": "<div>&nbsp;&nbsp;&nbsp;&nbsp; It\u2019s summer holiday again. Many students want to go sightseeing. But they always feel inconvenient if they have no friends accompanying with them when they arrive at an unfamiliar scenery. Finding good companions is a big problem because they don\u2019t know who want to go to the same scenery as them. In fact, for many students, their choices are not sole.</div><p></p><div>&nbsp;&nbsp; In this game, each group is consisted of three students and the members of this group are all want to tour the same scenery, at least one scenery is the same. At first, each student will write out a number of sceneries they want to tour. If three students want to tour the same scenery, they can be a group. </div><p></p><div>&nbsp;&nbsp; You task is to find the maximum groups among these students.</div>", "input_description": "Input includes a number of test cases. First line of each case is an integer number m (m<=10,000), which implies the number of students. The following m lines are the sceneries the students want to tour. For each line, a number of sceneries are listed for a student and each sceneries are separated by a comma (\u2018,\u2019).", "output_description": "Output the maximum number of groups for each case. Each case contains a line.", "samples": "[{\"input\": \"4\\nShanghai,Beijing,Chengdu,Wuhan\\nWuhan,Chengdu\\nZhuhai,Guangzhou,Shanhaiguan,Chengdu\\nXiamen\\n3\\nShanghai,Beijing\\nBeijing\\nCheng du,Guang zhou\\n\", \"output\": \"1\\n0\\n\"}]", "test_case_id": "1463", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1464, "fields": {"title": "Guarding the factories", "description": "<div>&nbsp;&nbsp; In World War II, the allied forces had built a lot of important factories in an unnamed district. These factories were so important that they must keep them safe during the war. But the question is they had not enough forces to do so. So they thought out a solution: garrison a road connecting two factories with an army, if factories connecting the road were found by enemies, they would be reinforced by this army, and once a factory has army to guard them, the factory needn\u2019t other armies again. In this district, all the road have connected to factories and all the factories have at least a road to connect with them. </div><p></p><div>You task is to write a program to find the minimum armies needed for this district.</div>", "input_description": "Input includes a number of test cases. First line of each case is an integer number n (n<1,000), which represents the number of factories. The next n lines are the description of the map for the district. Each line contains n integer numbers: 0 or 1. The ith number of the jth line in the description implies the connecting status of the ith factory with the jth factory; if the number is \u20180\u2019, that says no road is connected with them; if the number is \u20181\u2019, that says a road is connected with them.", "output_description": "For each case, output the minimum armies needed. Each case contains a line.", "samples": "[{\"input\": \"3\\n0 1 1\\n1 0 0\\n1 0 0\\n2\\n0 1\\n1 0\\n\", \"output\": \"2\\n1\\n\"}]", "test_case_id": "1464", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 59, "total_accepted_number": 14, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1465, "fields": {"title": "the Bytelandian Cryptographer", "description": "<p style=\"MARGIN: 0pt; mso-pagination: widow-orphan\" class=\"MsoNormal\"><span style=\"FONT-SIZE: 12pt; COLOR: #000020; FONT-FAMILY: Verdana; mso-font-kerning: 0pt; mso-bidi-font-family: \u5b8b\u4f53\"><font><font color=\"#000020\"><span style=\"mso-spacerun: yes\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span><font>The&nbsp;infamous Bytelandian Bit-eating Fanatic Organisation (BBFO for short)&nbsp;plans to launch an all-out&nbsp;denial-of-service attack on&nbsp;the Bytelandian McDecimal&#039;s fast food network by blocking the entrance to every restaurant with a camel (the purpose being to rid&nbsp;the Organisation&nbsp;of unhealthy competition, obviously). In a sly and perfidious move, the head cryptographer of&nbsp;BBFO&nbsp;decided to&nbsp;disclose the date and time of the&nbsp;planned attack to the management of McDecimal&#039;s, but in encrypted form (ha ha). He calculated the number of seconds from midnight 1970.01.01 GMT to the moment of attack, squared it, divided it by 4000000007 and sent the remainder by e-mail to McDecimal&#039;s. This made the original date impossible to decode.</font></span></font></font></span></p><p></p><p style=\"MARGIN: 0pt; mso-pagination: widow-orphan\" class=\"MsoNormal\"><span style=\"FONT-SIZE: 12pt; COLOR: #000020; FONT-FAMILY: Verdana; mso-font-kerning: 0pt; mso-bidi-font-family: \u5b8b\u4f53\">Or did it?</span></p><p></p><p style=\"MARGIN: 0pt; TEXT-ALIGN: center; mso-pagination: widow-orphan\" class=\"MsoNormal\"><span style=\"FONT-SIZE: 12pt; COLOR: #000020; FONT-FAMILY: Verdana; mso-font-kerning: 0pt; mso-bidi-font-family: \u5b8b\u4f53\">*&nbsp;&nbsp; *&nbsp;&nbsp; *</span></p><p></p><p style=\"MARGIN: 0pt; mso-pagination: widow-orphan\" class=\"MsoNormal\"><span style=\"FONT-SIZE: 12pt; COLOR: #000020; FONT-FAMILY: Verdana; mso-font-kerning: 0pt; mso-bidi-font-family: \u5b8b\u4f53\">&nbsp;&nbsp;&nbsp;&nbsp; You work as the head algorthimist at McDecimal&#039;s HQ and know nothing of what is&nbsp;happening in Byteland.&nbsp;Things are not going well. You are&nbsp;playing a quiet game of&nbsp;hearts against your computer&nbsp;and wondering why&nbsp;on earth Management are considering making you redundant. Suddenly, the CEO&nbsp;bursts into your office, saying:</span></p><p></p><p style=\"MARGIN: 0pt; mso-pagination: widow-orphan\" class=\"MsoNormal\"><span style=\"FONT-SIZE: 12pt; COLOR: #000020; FONT-FAMILY: Verdana; mso-font-kerning: 0pt; mso-bidi-font-family: \u5b8b\u4f53\">- Look here, young man[lady]! I have this number&nbsp;and&nbsp;those guys&nbsp;claim it is supposed to be some date. I am giving you one second to tell me what it all means!</span></p><p></p><p style=\"MARGIN: 0pt; mso-pagination: widow-orphan\" class=\"MsoNormal\"><span style=\"FONT-SIZE: 12pt; COLOR: #000020; FONT-FAMILY: Verdana; mso-font-kerning: 0pt; mso-bidi-font-family: \u5b8b\u4f53\">I am afraid you have no choice. You can&#039;t ask any further questions.<br />You just have to answer, now.</span></p>", "input_description": "Input includes a number of test cases, each case contains a line\uff0cthat is the encrypted timestamp.", "output_description": "The decrypted GMT time and date of attack, somewhere between 1970 and 2030, using standard 26 character formatting and using first three characters for the month and the day of the week.  ", "samples": "[{\"input\": \"1749870067\\n\", \"output\": \"Sun Jun 13 16:20:39 2004\\n\"}]", "test_case_id": "1465", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 8, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1466, "fields": {"title": "You Are El", "description": "<div>&nbsp;&nbsp;&nbsp; Pages on the World WideWeb are accessed by a unique identifier called a URL (Uniform Resource Locator). For example, the URL of the file that you are reading right now is</div><p></p><div>http://www.acsl.org/contests/96/ALLSTAR/prog4.ps</div><p></p><div>&nbsp;&nbsp;&nbsp; There are three primary parts to a URL: protocol, host, and path. The protocol, http in this case, specifies how the file will be transfered from one computer to another. Other common protocols are ftp, gopher, and file. The host is the name of the computer on which the Web page resides. The ACSL Web pages all reside on the machine called www.acsl.org. Finally, the path (contests/96/ALLSTAR/prog4.ps) indicates where on the host computer the file is located.</div><p></p><div>The syntax of a URL is as follows: The protocol is the part of the URL up to the colon. The host is the part of the URL following the colon-slash-slash. It ends at a slash. The path starts after the slash ending the host. The path is optional; if it&#039;s missing, assume the path is default.htm. Also, if the path ends with a slash, append default.htm to it.</div><p></p><div>Links on a Web page p can be specified in one of three ways: in absolute terms, relative to the server hosting p, or relative to page p.</div><p></p><div>An absolute URL starts with a protocol (e.g., http://www.cnn/ ).</div><p></p><div>This is used to jump to any arbitrary page on the Web. For example, if this page (the one you are reading right now!) contained the link http://www.microsoft.com/, clicking on it would cause you to jump to the Microsoft home page.</div><p></p><div>A relative-to-the-server URL starts with a slash (e.g., /contests/95/SR/shorts3.ps). This says to look for the page on the same server as p.</div><p></p><div>Finally, all other URLs are assumed to be relative to the page on which they reside. For example, the link prog5.ps on this page refers to the URL</div><p></p><div>http://www.acsl.org/contests/96/ALLSTAR/prog5.ps.</div><p></p><div>The link ../INT/short2.ps refers to </div><p></p><div>http://www.acsl.org/contests/96/INT/short2.ps. That is, two dots indicates to go up a directory in the path. To make you life easy (see, we&#039;re nice guys!), the two dots will only appear at the start of a path. Of course, it might appear a few times (e.g., ../../94/JR/short1.ps).</div>", "input_description": "In this program, you'll be given the URL of a Web page and a link on the page.", "output_description": "Find the URL that the link will jump you to. ", "samples": "[{\"input\": \"http://www.acsl.org/contests/96/ALLSTAR/shorts.ps, programs.ps\\nhttp://www.acsl.org:8000/SampleContests/95/ALLSTAR/shorts.ps, /flyer.ps\\nhttp://www.acsl.org/SampleContests/95/ALLSTAR/shorts.ps, http://www.cnn/\\n\", \"output\": \"http://www.acsl.org/contests/96/ALLSTAR/programs.ps\\nhttp://www.acsl.org:8000/flyer.ps\\nhttp://www.cnn/default.htm\\n\"}]", "test_case_id": "1466", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 47, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1468, "fields": {"title": "Chutes and Ladders Again", "description": "<div>A popular board game for children is called &quot;Chutes and Ladders&quot;.&nbsp; The board has squares which are numbered from 1 to 100, and players have counters which start on the theoretical square 0.&nbsp; The players take turns at throwing a die with the numbers 1 to 6 on it, and each moves his or her counter forward the number of squares corresponding to the number on the die (the square they reach is found by adding the die number to the square number their counter is on).&nbsp; The first person to reach square 100 is the winner.&nbsp; </div><p></p><div>The interest is caused by the fact that pairs of squares are connected together by &quot;ladders&quot; (which connect a lower-numbered square to a higher-numbered square) and &quot;chutes&quot; (which run from high to low).&nbsp; If a counter lands on the start of a chute or ladder (i.e., this is the square reached after throwing the die), then the counter is moved to the corresponding square at the end of the chute or ladder.&nbsp; Note that landing on the end square of a ladder or a chute has no effect, only the start square counts.&nbsp; Furthermore, there are some squares such that if a player&#039;s counter lands on them, then the player must either miss the next turn, or immediately throw the die again for another turn, depending on what is written on the board.&nbsp; A miss-a-turn or extra-turn square is never the start or end of a ladder or chute.&nbsp; If a player is on square 95 or higher, then a die throw which takes them past 100 must be ignored - thus a player on square 99 must ignore all throws which are not 1.&nbsp; </div>", "input_description": "Input will start with a set of less than 1000 die throws which you must use for all games, starting each new game with the first player \"throwing\" the first number in the set, the next player \"throwing\" the second number, and so on.  This set of die throws will simply be a list of random numbers between 1 and 6, separated by single spaces, with not more than 80 characters on each line.  It will be terminated by the number 0.  After this set of die throws, there will be one or more game sets.  Each game set is in three parts.  The first part is a line containing a single number giving the number of players in the game.  This will be more than 1 and less than 6.  Then the board is described, in two parts. The first part lists the ladders and the chutes on the board, each ladder or chute being defined on a single line.  Each is given by two numbers, from 1 to 99,separated by one or more spaces.  The first number gives the start square, and the second number gives the end square; so it is a ladder if the first number is less than the second number, and a chute if the order is the other way.  The chute/ladder definitions are terminated by a line containing two 0's.  The second part of the board description gives the lose-a-turn/extra-turn squares, if there are any.  These are single numbers, one per line, defining the squares.  If the number is negative, its positive counterpart is a lose-a-turn square; if positive, it represents an extra-turn square.  (For example, -16 means that square 16 on the board is a lose-a-turn square, while a 25 means that players landing on square 25 must immediately roll again.)   The end of this set of descriptions, and of the game description, is given by a single 0.  The end of all the game descriptions is given by a game with the number of players equal to 0.", "output_description": "Output must be one line for each game in the input, giving the number of the player who wins the game.  Every game will determine a winner in fewer throws than those given at the start of the data.", "samples": "[{\"input\": \"3 6 3 2 5 1 3 4 2 3 1 2 0\\n2\\n6 95\\n99 1\\n0 0\\n-3\\n98\\n0\\n2\\n3 99\\n6 90\\n0 0\\n0\\n0\\n\", \"output\": \"2\\n2\\n\"}]", "test_case_id": "1468", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 13, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1469, "fields": {"title": "Paragraph Analyzer", "description": "<div>Analyze two paragraphs. For each paragraph, print the number of distinct words in the paragraph, and print the Kth smallest in alphabetical order. For the second paragraph only, print the number of distinct words that contain exactly M letters. Label your outputs.</div>", "input_description": "There are a number of test cases in input. For each case, there are two paragraphs. Each paragraph contains two lines. First line of the first paragraph is an integer number K, which implies the Kth smallest words in alphabetical order, the second line is the paragraph. First line of the second paragraph is two integer numbers M, N, where M is the Mth smallest words in alphabetical order which will be printed, N is the length of the word.  In the paragraph, Words are terminated by white space or punctuation (commas, hyphens, colons, and semi-colons). Sentences are terminated by a question mark or a period.", "output_description": "For each case, output the correspondence answer according to the paragraph.", "samples": "[{\"input\": \"5\\nTo be or not to be, that$(quat)s the question.\\n9 5\\nA wise man is not one who knows all the answers. But one who knows how to find the answers. A foolish man is one who knows neither.\\n\", \"output\": \"Output #1: number of distinct words in paragraph 1: 7\\nOutput #2: the 5th smallest distinct in paragraph 1: that$(quat)s\\nOutput #3: number of distinct words in paragraph 2: 17\\nOutput #4: the 9th smallest distinct word in paragraph 2: knows\\nOutput #5: the number of distinct words in paragraph 2 of length=5: 1\\n\"}]", "test_case_id": "1469", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 78, "total_accepted_number": 10, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1472, "fields": {"title": "Vertex Cover", "description": "<div>You are given an un-weighted, undirected tree. Write a program to find a vertex set of minimum size in this tree such that each edge has as least one of its end-points in that set.</div>", "input_description": "The problem contains a number of test case. For each case, its first line of the input contains one integer N \u2015 number of nodes in the tree (0 < N \u2264100,000). Next N-1 lines contain N-1 edges of that tree \u2015 Each line contains a pair (u, v) means there is an edge between node u and node v (1 \u2264 u, v \u2264 N).", "output_description": "Each case contains a line: the number of vertex in the satisfied vertex set. ", "samples": "[{\"input\": \"3\\n1 2\\n1 3\\n\", \"output\": \"1\\n\"}]", "test_case_id": "1472", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 39, "total_accepted_number": 9, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1474, "fields": {"title": "Reserve Bookshelf", "description": "<p>&nbsp;&nbsp;&nbsp; A very small rural library has only one shelf dedicated to reserve books. (Reserve books are deemed important to a large number of library users and can therefore be checked out only for very short periods of time.) </p><p></p><ul><p></p><li>When the library\u2019s staff places a book on reserve, the book is put on the reserve shelf\u2019s left end. All books that were already on the reserve shelf must therefore be moved to the right, just enough to make room for the new book on the shelf.</li><p></p><li>&nbsp;When a reserve book is checked out and subsequently returned, it is also put on the reserve shelf\u2019s left end, as if it were just being placed on reserve.</li><p></p><li>&nbsp;What happens when the shelf is full? When a book is placed on reserve, or when a previously checked out reserve book is returned, and there is not enough room on the reserve bookshelf, then, starting at the right end, as many books (but no more) are removed from the reserve shelf (they are \u201ctaken off reserve\u201d) as needed in order to make room for the book to be put on the reserve bookshelf.</li></ul>", "input_description": "   The first line of the input file contains a single integer, the total available space on the reserve book shelf (when it is empty), measured in millimeters (1 inch equals about 25 millimeters). Its value will be at least 250 and at most 1500.\n   &Oslash; Your program will start with an empty reserve book shelf.\n   Each subsequent line of input will start with one of the four commands ADD, CHECKOUT, RETURN, PRINT in upper case letters, starting in column 1.\n   &Oslash; There will not be any trailing blank spaces in the input file.\n   &Oslash; The ADD command:\n     \u00a7 The command is followed by a title (starting in column 10), consisting of at most 29 printable characters.\n     \u00a7 The title is followed (starting in column 40) by the thickness of the book (the amount of book shelf space it will require), a positive integer, not greater than 150.\n     \u00a7 The effect of the ADD command will be to place a new title on reserve, as described above.\n     \u00a7 Duplicate titles:\n        \u30fb  Once a particular title has been ADDed, it will not be ADDed again as long as that book is on the reserve book shelf or has been checked out. However, if a title has been forced off the reserve book shelf (by another ADD command or by a RETURN command) then that title may appear in a subsequent ADD command (with the same thickness as before).\n   &Oslash; The CHECKOUT command:\n     \u00a7 The command is followed by a title (starting in column 10) which is currently on the reserve shelf.\n     \u00a7 The effect of the CHECKOUT command is to remove the specified title from the reserve shelf (until it is placed back on the reserve shelf by a subsequent RETURN command.\n     \u00a7 A CHECKOUT may create a gap between two books (for example, when \u201cThe C Programming Language\u201d is checked out in the example shown). Such a gap will count as part of the free space.\n   &Oslash; The RETURN command:\n     \u00a7 The command is followed by a title (starting in column 10) which is currently checked out.\n     \u00a7 The effect of the RETURN command is to put the specified book to the left end of the reserve shelf, as described in the introductory paragraphs.\n   &Oslash; The PRINT command:\n     \u00a7 The effect of the command will be to display in the output file:\n       \u30fb the title and thickness of each book currently on the reserve shelf, one book per line, in the (left-to-right) order in which the books are currently on the reserve shelf,\n       \u30fb  the currently available space on the reserve shelf, and\n       \u30fb  one blank line.", "output_description": "Output the contents described above.", "samples": "[{\"input\": \"&#65279;250 \t\t\t \\nPRINT \t\t\t \\nADD      101 Uses for a Dead Cat     38\\nADD      Thin Thighs in 30 Days      63\\nADD      The Republic                44\\nADD      Mein Kampf                  101\\nPRINT\\nADD      Principia Mathematica       79 \t \\nPRINT\\nCHECKOUT The Republic\\nADD      On the Origin of Species    55\\nADD      The C Programming Language  15\\nPRINT\\nRETURN   The Republic\\nADD      101 Uses for a Dead Cat     38\\nCHECKOUT The C Programming Language\\nPRINT\\n\", \"output\": \"&#65279;Program 2 by team X \t\t \\nAVAILABLE SHELF SPACE:          250\\n\\nMein Kampf                      101\\nThe Republic                     44\\nThin Thighs in 30 Days           63\\n101 Uses for a Dead Cat          38\\nAVAILABLE SHELF SPACE:            4\\nPrincipia Mathematica            79\\nMein Kampf                      101 \t \\nThe Republic                     44\\nAVAILABLE SHELF SPACE:           26\\n\\nThe C Programming Language       15\\nOn the Origin of Species         55\\nPrincipia Mathematica            79\\nMein Kampf                      101\\nAVAILABLE SHELF SPACE:            0\\n \t \\n101 Uses for a Dead Cat          38\\nThe Republic                     44\\nOn the Origin of Species         55\\nPrincipia Mathematica            79\\nAVAILABLE SHELF SPACE:           34\\n\\nEnd of program 2 by team X \t\t \\n\"}]", "test_case_id": "1474", "hint": "Pay attention to all formatting details, such as punctuation, upper/lower case characters, and the presence or absence of blank spaces and blank lines.\\n   &Oslash; All titles, as well as the sentence \u201cAVAILABLE SHELF SPACE:\u201d are left-justified, starting in column 1.\\n   &Oslash; All numerical quantities are displayed right-justified, with the unit\u2019s digit in column 34.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 37, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1475, "fields": {"title": "Clock", "description": "&nbsp;&nbsp;&nbsp;&nbsp; You are given a standard 12-hour clock with analog display, an hour hand and a minute hand. How many times does the minute hand pass the hour hand in a given time interval?", "input_description": "    The input file contains an indefinite number of lines; each line contains four numbers.\n    The first pair of numbers represents an \u201cinitial time\u201d; the second pair represents a \u201cfinal time.\u201dIn each such number pair, the first number represents hours, second number represents minutes. The hours will be in the range 1..12, the minutes in the range 0..59. No initial time and no final time will be an instant at which the minute hand just passes the hour hand. (In particular, 12 00 will not occur as an initial or final time.) No initial time will be the same as the corresponding final time. Between each initial time and corresponding final time, the hour hand will have turned less than one full revolution (360 degrees). As the hour hand turns from its initial position to its final position, it may or may not sweep past the number 12 on the clock\u2019s dial.\n    If it does, then either the initial time is an \u201cA.M.\u201d time and the final time a \u201cP.M.\u201d time, or vice versa.If it does not, then either both times (initial and final) are \u201cA.M.\u201d or both are \u201cP.M.\u201d", "output_description": "Each line of input gives rise to one line of output, containing\n   &Oslash; the initial and final times, and\n   &Oslash; the number of times the minute hand passes the hour hand between the initial time and the final time.\n   Observe all details of formatting, such as upper/lower case letters, punctuation, blank spaces, and the absence of blank lines.\n   In each time display, the hours and minutes are displayed in fields of width 2, separated by a colon.\n   &Oslash; The ten\u2019s digit (of hours or minutes) is displayed as a zero if it is zero.  ", "samples": "[{\"input\": \"&#65279;12 50  1  2\t \\n 3  8  3 20\t \\n 2 45 11  0 \t \\n11  0  3 20\t \\n 1  2 12 50\t \\n 3 20  3  8 \t \\n\", \"output\": \"&#65279;Program 3 by team X \t \\nInitial time  Final time  Passes\t \\n       12:50       01:02       0\\n       03:08       03:20       1\\n       02:45       11:00       8\\n       11:00       03:20       4\\n       01:02       12:50      11\\n       03:20       03:08      10\\nEnd of program 3 by team X \t \\n\"}]", "test_case_id": "1475", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 52, "total_accepted_number": 24, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1476, "fields": {"title": "Find the max", "description": "Rocky is a very clever boy, he likes programming very much.One day, when he was solving a ACM problem, he found a very interesting phenomenon: every integer M&#039;s cube (M*M*M) can be expresses as the sum of M continuous odd positive integers.He want to program to prove it, but he is so busy that he has no time to do it. Can you help him ?<br /><br />", "input_description": "There are multiple test cases in this problem.\nThe first line contains only one integer N,indicating that there are N test cases.\nEach test case contains one positive integer M on a single line (1<=M<=10000).\n\n", "output_description": "For each test case,just print the largest number among the M continuous odd positive integers.", "samples": "[{\"input\": \"2\\n11\\n3\\n\", \"output\": \"131\\n11\\n\"}]", "test_case_id": "1476", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 290, "total_accepted_number": 153, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1477, "fields": {"title": "Expression calculation", "description": "Rocky is a student of SWJTU. He is very clever and likes computer sciense very much,so he can solve many problems by programming.&#160; :)<br />This summer vacation, he had a visit on his sister&#039;s home. His sister is a primary school student of grade 3.When he arrived, his sister was doing her homework: simple integer expression calculation.His sister is very hard-working, but careless.In her homework,she often forget to write the paranthesis. When she was checking it, she didn&#039;t know where all these paranthesis were,but she knew that adding the paranthesis, the expression can get a maximum result. In&#160;other word,adding some paranthesis can make the result maximum! She ask her brother for help, with the help of Rocky, she had finished her homework successfully.Now the question is that If she turns to you, can you help her?<br />", "input_description": "There are multiple test cases in this problem.\nThe first line contains only one integer N,indicating that there are N test cases.\nEach test case consist of two lines.There are one integer M on the first line(2 <= M <= 1000), indicating the number of intergers of an expression.Then follow the expression, integer and operator separate with Only a single whitespace,to simplify this problem, you can assume that expression contains only operator + and * ,but note that integers may be negative.\n", "output_description": "In order to simplify this problem, you are just asked to print a single line with the maximized value of the expression.", "samples": "[{\"input\": \"1\\n4\\n3 + 1 * 7 + -2\\n\", \"output\": \"26\\n\"}]", "test_case_id": "1477", "hint": "For the sample case,if we calculate the expression directly, we can get 3 + 7 + -2, then 10 + -2, and last, 8.But if we add a paranthesis on the expression ,we get (3 + 1) * 7 + -2,the result is 26, of course 26 &gt; 8, We also can add paranthesis like this: (3 + 1) * (7 + -2) or 3 + 1 * (7 + -2), the result is 20 or 8, they are less than 26 too. so we print 26.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 10000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 16, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1478, "fields": {"title": "Lottery", "description": "<div>Recently, your friend luckyguy start to buy lottery ,take \u201ctwo-color\u201d for example ,which is formed by fourteen numbers from zero to nine and can be reused. if anyone is lucky enough to guess all the fourteen number ,he or she will gain 5,000,000RMB.</div>Luckyguy want to try his fortune, but because he collected all the past result which has been published, so he want to find the law and ask you who is a good programmer for help.", "input_description": "Several test case will supply, in each test case, the first line contain one integer N ( 1<=N<=10000) the number of past result and the follow  lines will contain all N past results, which contain fourteen digital from zero to nine.", "output_description": "Output result as sample output form, which contains past result in increase order and followed by the percentage of the past result which keeps four decimal.", "samples": "[{\"input\": \"29\\n00000000000001\\n00000000000002\\n00000000000003\\n00000000000004\\n00000000000002\\n00000000000005\\n00000000000006\\n00000000000002\\n00000000000007\\n00000000000008\\n00000000000002\\n00000000000009\\n00000000000010\\n00000000000011\\n00000000000012\\n00000000000013\\n00000000000014\\n00000000000015\\n00000000000016\\n00000000000013\\n00000000000017\\n00000000000018\\n00000000000018\\n00000000000013\\n00000000000019\\n00000000000020\\n00000000000021\\n00000000000022\\n00000000000023\\n\", \"output\": \"00000000000001 3.4483\\n00000000000002 13.7931\\n00000000000003 3.4483\\n00000000000004 3.4483\\n00000000000005 3.4483\\n00000000000006 3.4483\\n00000000000007 3.4483\\n00000000000008 3.4483\\n00000000000009 3.4483\\n00000000000010 3.4483\\n00000000000011 3.4483\\n00000000000012 3.4483\\n00000000000013 10.3448\\n00000000000014 3.4483\\n00000000000015 3.4483\\n00000000000016 3.4483\\n00000000000017 3.4483\\n00000000000018 6.8966\\n00000000000019 3.4483\\n00000000000020 3.4483\\n00000000000021 3.4483\\n00000000000022 3.4483\\n00000000000023 3.4483\\n\"}]", "test_case_id": "1478", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 216, "total_accepted_number": 43, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1479, "fields": {"title": "Greedy boy", "description": "Sofia is a greedy boy, he nearly wants all the things he loves!<br />He has a lot of good friends,so when he has his birthday,he can get many gifts,as each friend of his will send him one gift on that day.Sofia has a big bag, he puts these gifts in this bag.However, this bag is not big enough to take all the gifts,he has to choose some of them. Because if the sum of weight of the gifts are more heavy than he bag&#039;s capacity,the bag will be broken! Each gift has a weight and value,in order to simplify this problem,We assume that the weight is equal to the value of each gift.Now your job is to help sofia to choose some gifts he can put in the bag to maximize the value.<br />", "input_description": "There are multiple test cases in this problem.\nThe first line contains only one integer N,indicating that there are N test cases.\nEach test case consist of two lines.There are two integers M and K in the first line,M is the capacity of the bag,and K is the number of gifts.(1 <= K <= 1000).The following line contains K integers,representing the value of each gift.\n", "output_description": "For each test case,you are to print a single line with the maximum value Sofia can get.\n", "samples": "[{\"input\": \"3\\n5 3\\n4 2 1\\n55 10\\n10 9 8 7 6 5 4 3 2 1\\n5 3\\n4 2 2\\n\", \"output\": \"5\\n55\\n4\\n\"}]", "test_case_id": "1479", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 244, "total_accepted_number": 72, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1480, "fields": {"title": "Airport", "description": "<div>With developing take place in every domain, vehicle also have a great improve, take airplane for example. Formerly, there is a few city which has airport, so we can\u2019t reach every city by plane, and must take more time to use other vehicle.</div><p></p><div>But there are some airport that is being built step by step. Now you have got all airport information, you want to have a travel from &#160;to , and you must to check whether you can success.</div>", "input_description": "Several test case is supplied. In each test case, the first line contain one integer number N(1<=N<=100,000)and there will follow N line, in each, it will be two form as follow: \nA a b: a can reach b directly.\nB a b: which is a question that whether a can reach b directly or indirectly. If success output \u201cYES\u201d, or output \u201cNO\u201d.\nBoth a and b are positive integer, and will never more than 1,000,000.\n", "output_description": "Answer every quest in one line. As the form of sample output.", "samples": "[{\"input\": \"15\\nB 1 2\\nB 2 3\\nB 3 4\\nA 1 2\\nB 1 2\\nB 2 3\\nB 3 4\\nA 2 3\\nB 1 2\\nB 2 3\\nB 3 4\\nA 3 4\\nB 1 2\\nB 2 3\\nB 3 4\\n\", \"output\": \"NO\\nNO\\nNO\\nYES\\nNO\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\n\"}]", "test_case_id": "1480", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 323, "total_accepted_number": 64, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1481, "fields": {"title": "Farey sequence", "description": "<div><p></p><div><p></p><div><p></p><div><p></p><div>The farey seuquence Fn for any integer n with n &gt;= 2 is the set of irreducible rational numbers a/b with 0&lt;a&lt;b&lt;=n and gcd(a,b)=1 arranged in increasing order.the first few are:</div><br /><br /><br /><p></p><div>F2 = {1/2}</div><br /><br /><br /><br /><p></p><div>F3 = {1/3,1/2,2/3}</div><br /><br /><br /><br /><p></p><div>F4 = {1/4,1/3,1/2,2/3,3/4}</div><br /><br /><br /><br /><p></p><div>F5 = {1/5,1/4,1/3,2/5,1/2,3/5,2/3,3/4,4/5}</div><br /><br /><br /><br /><br /><br /><p></p><div>Now,your task is to print farey sequence given the value of n.</div></div></div></div></div>", "input_description": "There are several test cases,each test case has only one line,which contains a positive integer n(2<=n<=200).", "output_description": "For each test case,you should output one line,which contains the corresponding farey sequence.adjacent terms are separated by a single\u2019,\u2019,and there can\u2019t be any white spaces in your output.see sample output for more clarifications on the output format.", "samples": "[{\"input\": \"2\\n3\\n4\\n5\\n\", \"output\": \"1/2\\n1/3,1/2,2/3\\n1/4,1/3,1/2,2/3,3/4\\n1/5,1/4,1/3,2/5,1/2,3/5,2/3,3/4,4/5\\n\"}]", "test_case_id": "1481", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 181, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1483, "fields": {"title": "calculating the 766 points", "description": "Most of us have played a number game named calculating the 24 points.<br />The rule of the game is that: You are given 4 integers, which are in the range [1,13],you can do any of four operations on these numbers: Adding, subtracting, multipling, dividing and determine whether you can get the result equaling to 24 if each number only be used once.<br />Now we do a little change on this game.&nbsp; :)<br />You are given M integers, each integer will not exceed 1000000000. Using the four operations as we described above, and each number can be used for only once.Cound you get the result equaling to 766 ?<br />", "input_description": "There are multiple test cases in this problem.\nThe first line contains only one integer N,indicating that there are N test cases.\nEach test case consist of two lines.There are one integer M in the first line,M is the number of the given nunbers(1 <= M <= 10).The following line contains M integers,representing each given number.\n", "output_description": "Output \"YES\" if you can get the result 766, otherwise \"NO\".\n", "samples": "[{\"input\": \"2\\n4 \\n70 10 60 6\\n2\\n1000 766\\n\", \"output\": \"YES\\nNO\\n\"}]", "test_case_id": "1483", "hint": "For the first case, we know that 70*10+60+6=766,so we print &quot;YES&quot;.\\nFor the second case,we can&#039;t get the result 766,so we print &quot;NO&quot;.\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 10000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 38, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1485, "fields": {"title": "How much I miss you", "description": "<p>That&#039;s 5 years ago when I first saw you, Yes, I still remember, vividly. On that day,the register day for a new high school student, you stood in front of the classroom introducing yourself to us. From the moment I saw you smile, with a little red on your rosy cheek, I was impressed by your shyness deeply. <br />On the following days, I gradually learned that you&#039;re a very good girl with strong determination, clever brain and the hardest-working attitude from my friends. However, all of this just made me have a little admire to you at that time, but love.<br />I would notice you sometimes, but occasionally I would found you are also looking at me. Maybe it&#039;s just because of my sensitivity, I always said this to myself.<br />In the study life, we talk so little, we even do not have a complete conversation, I don&#039;t believe it&#039;s we&#039;re speakless. In fact, I have a strong feeling that there would be a lot of words between us, Just none of us broke the silence.<br />Gradually, I found that you were also noticing me. For the first time, I look back, looking into your eyes then I found the brightest shining star, I know ,I know that I fall for you.<br />From then on, all we conmunication is eyes contact.&nbsp; we look at each other, then just smile without even a word to blech out, leaving the whole world beyond us,&nbsp;leaving the&nbsp;quiet air fleeting around us.&nbsp; <br />Even though, we still keep the silence, wordless. Just as we are trying to keep a same promise which we promise not to break.<br />With the tiring, boring high school life, the days fly.Three years have passed by like blowing wind in a minute, we should leave the high school and say goodbye. At the graduation party, we see each other, we smile like before, suddenly I feel I really should say someting, but I don&#039;t know why, at that time I can&#039;t , even don&#039;t know how to open my mouth.Then everyting ends with nothing.<br />We go to diffrent Universitys but in the same city, still, nothing happened.<br />After not a very long time, I heard you have a BF and start a happy life. I was so shocked, and got to know nothing is belongings to&nbsp;someone naturally if&nbsp;he or she&nbsp;even don&#039;t try to get it. However It&#039;s too too late. I always thought, on that day, if I said the words deep under my heart, will everything be diffrent? But life has no IF, so I never have the chance to say that.I never have the chance looking into her eyes to say that my love for you is a journey, which starting at forever and ending at never.<br />But still, usually I can&#039;t help myself to miss you, and my missing grows as the days passed by. If I can give my missing a value following the rule N! ( N*(N-1)*(N-2)...1 and N is the number of days I leave her ), Can I Know HOW MUCH I miss you?</p>", "input_description": "There are multiple test cases in this problem.\nThe first line contains only one integer M, indicating that there are M test cases.\nEach test case contains one positive integer N on a single line indicating the number of days I leave her.(0 <= N <= 365).\n", "output_description": "For each test case, print the Miss value on a single line using the Scientific counting method as the sample output. The result should be round to 10 digits after decimal point.\n", "samples": "[{\"input\": \"2\\n3\\n4\\n\", \"output\": \"6.0000000000*10^0\\n2.4000000000*10^1\\n\"}]", "test_case_id": "1485", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 209, "total_accepted_number": 39, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1486, "fields": {"title": "tetrahedron's volume", "description": "You are given 4 integer points in the space, standing the vertices of a tetrahedron, can you get it&#039;s volume ?<br />", "input_description": "There are multiple test cases in this problem.\nThe first line contains only one integer N, indicating that there are N test cases.\nEach test case consist of four lines.Each line contain three integer in the range \n[-1000,1000],indicating the vertex's x-coordinate,y-coordinate and z-coordinate.The four points never on the same plane.\n\n", "output_description": "For each case, print the volume of the tetrahedron on a single line. The result should be round to 2 digits after decimal point.\n", "samples": "[{\"input\": \"1\\n0 0 0\\n0 0 2\\n0 2 0\\n2 0 0\\n\", \"output\": \"1.33\\n\"}]", "test_case_id": "1486", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 104, "total_accepted_number": 47, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1488, "fields": {"title": "Reverse the string", "description": "<span style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: &#039;Calibri&#039;,&#039;sans-serif&#039;; mso-bidi-font-size: 11.0pt; mso-ascii-theme-font: minor-latin; mso-fareast-font-family: \u5b8b\u4f53; mso-fareast-theme-font: minor-fareast; mso-hansi-theme-font: minor-latin; mso-bidi-font-family: &#039;Times New Roman&#039;; mso-bidi-theme-font: minor-bidi; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">Given a string, output its reversed format.</span>", "input_description": "Input consists of only one test case, which is a char string in a line.", "output_description": "Output its reversed format shown as the sample output below.", "samples": "[{\"input\": \"abcde\", \"output\": \"edcba\"}]", "test_case_id": "1488", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 319, "total_accepted_number": 194, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1490, "fields": {"title": "Put Balls", "description": "<p><span style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: &#039;Times New Roman&#039;,&#039;serif&#039;; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: \u5b8b\u4f53; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-font-kerning: 1.0pt\">Now, you are a college student, I think it\u2019s a simple problem for you. Could you tell me how many ways to put n different balls into m different bottles so that each bottle has at least k balls.</span></p>", "input_description": "Input contains several test cases. Each of the test cases contains three integers in one line, n, m, k (1<=n, m<=15,0<=k<=15). Input is terminated by three 0\u2019s, which should not be processed.", "output_description": "For each case, print the result in one line. Heading zeroes are not permitted.", "samples": "[{\"input\": \"1 1 0\\n1 1 1\\n1 1 2\\n3 3 1\\n2 4 1\\n3 2 0\\n0 0 0\\n\", \"output\": \"1\\n1\\n0\\n6\\n0\\n8\\n\"}]", "test_case_id": "1490", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 423, "total_accepted_number": 28, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1491, "fields": {"title": "The area of triangle", "description": "<span style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: &#039;Calibri&#039;,&#039;sans-serif&#039;; mso-bidi-font-size: 11.0pt; mso-ascii-theme-font: minor-latin; mso-fareast-font-family: \u5b8b\u4f53; mso-fareast-theme-font: minor-fareast; mso-hansi-theme-font: minor-latin; mso-bidi-font-family: &#039;Times New Roman&#039;; mso-bidi-theme-font: minor-bidi; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">Given a triangle, you should calculate its area.</span>", "input_description": "Input consists of multiple cases. The first line is an integer indicating the number of cases.\n\nEach of the following lines contains 3 pairs of integers, which stand 3 vertexes of the triangle.\n", "output_description": "For each case, output a line containing the area of triangle. All the results are integers.", "samples": "[{\"input\": \"1\\n0 0 2 0 0 2\\n\", \"output\": \"2\\n\"}]", "test_case_id": "1491", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 403, "total_accepted_number": 148, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1492, "fields": {"title": "Tell the forest and find its tall and width", "description": "<div>For a forest, you will find it\u2019s in fact is a directed graph with neither loop nor two edges pointing to the same node. Nodes with no edge pointing to are roots. And if there\u2019s an edge points form node A to node B, then node B is called a child of node A.</div><p></p><div>&nbsp;</div>&nbsp;&nbsp; We define the tall of a forest is the maximum level number of all the nodes. And the root is the level 0, its children are level 1, etc. the width of the forest is the maximum number of nodes at the same level.", "input_description": "There\u2019re a number of test cases in inputs. For each test case, in the first line there are two integer numbers n and m ( 1<=n<=100, 0<=m<=100,m<=n*n) indicating the number of nodes and edges respectively, then m lines followed, for each line of these m lines there are two integer numbers a and b (1<=a, b<=n) indicating there\u2019s an edge pointing from a to b. Nodes are represented by numbers from 1 to n. n=0 indicated end of input.", "output_description": "For each case output one line of answer. If it\u2019s not a forest, i.e. there\u2019s at lease one loop or two edges pointing to the same node, output \u201cINVALID\u201d(without quotation mark), otherwise output the tall and width of the forest, separated by a white space.", "samples": "[{\"input\": \"1 0\\n1 1\\n1 1\\n3 1\\n1 3\\n2 2\\n1 2\\n2 1\\n0 88\\n\", \"output\": \"0 1\\nINVALID\\n1 2\\nINVALID\\n\"}]", "test_case_id": "1492", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 95, "total_accepted_number": 19, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1496, "fields": {"title": "Magic cube", "description": "Magic cube is a kind of toy which is popular among many people especially the kids. It is a cube which has six sides with different colours. Given a cube, can you find the shortest steps to the orginal state ? Here original state means every side are the same colour, and a step defines as follow: circumvolving one side of 90 degree.<br />", "input_description": "This first line of the input is a integer which indicates the number of cases. For each case, there are six 3X3 matrix representing the six sides of the cube in the sequence of top, bottum, left, right , front, back. In all these matrix, different number stands different colours.\n", "output_description": "Find the smallest number of the steps and print it.\n", "samples": "[{\"input\": \"1\\n1 1 1\\n1 1 1\\n1 1 1\\n\\n2 2 2\\n2 2 2\\n2 2 2\\n\\n6 6 6\\n3 3 3\\n3 3 3\\n\\n4 4 4\\n5 5 5\\n5 5 5\\n\\n3 3 3\\n4 4 4\\n4 4 4\\n\\n5 5 5\\n6 6 6\\n6 6 6\\n\", \"output\": \"1\\n\"}]", "test_case_id": "1496", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1497, "fields": {"title": "GRE wordlist", "description": "<p>GRE is ever the most BT English test in the world. One must remember all the 20000 or more words clearly if he or she want to get a impressive score. The best way to remember all the words is scrutinizing a GRE Word list again and again. The GRE Barron&#039;s list, which has a high reputation among all GRE takers, is the best wordlist. However, the problem is the TXT form file of this list is not suitable for reading, as the words are very close to others, which making it hard to classify all of them. Each word in The list contains some parts and it&#039;s format is as the following sequence: </p><p></p><p>the number, the word and colon, explanation of the word, e.g., the example. </p><p></p><p>Every two adjacent parts contains at least one whitespace (ASCII CHARACTER CODES: 32)or enter symbol (ASCII CHARACTER CODES: 10).</p><p></p><p>Taking the word &quot;abbreviate&quot; for example : </p><p></p><p>1. abbreviate: shorten e.g. Because we were running out of time, the lecturer had to abbreviate her speech.</p><p></p><p>&quot;1.&quot; is the first part, &quot;abbreviate:&quot; is the second, &quot;shorten&quot; is the third, &quot;e.g.&quot; is the fourth, and &quot;Because we were running out of time, the lecturer had to abbreviate her speech.&quot; is the last part.</p><p></p><p>In order to solve this problem, can you write a program to read the TXT file and output another more esay-reading file?</p><p></p><p>&nbsp;</p>", "input_description": "The input will consist of only one case. It is the content of the list. ", "output_description": "Print only the number and the word for each word and each word occupies only one line.", "samples": "[{\"input\": \"1. abbreviate:    shorten       e.g. Because we were running out of time, the lecturer had to abbreviate her speech. \\n2. abate:                   subside     or moderate     e.g. Rather than         leaving immediately, they waited for the storm to abate. \\n   3. abortive: unsuccessful; fruitless e.g. We had to\\nabandon our abortive attempts. 4. absolute: complete; totally unlimited; certain e.g.\\nAlthough the King of Siam was an absolute monarch, he did not want to behead his unfaithful\\nwife without absolute evidence of her infidelity.\\n\", \"output\": \"1. abbreviate\\n2. abate\\n3. abortive\\n4. absolute\\n\"}]", "test_case_id": "1497", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 125, "total_accepted_number": 37, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1498, "fields": {"title": "Make it more efficient", "description": "<div>Jack, a worker of a corporation, always takes the lift to his office. But the elevator of the hall where he has to take to his office always drives them crazy. Because there are hundreds of companies in it, they have to waste a lot of time waiting for the elevator.</div><p></p><div>As you are an experience programmer, Please help him to find a way to make the elevator work more effectively. </div><p></p><div>There are thirty one floors in this hall. It takes 4 seconds for the elevator to raise one floor. It means: It costs 120 seconds if the elevator goes from the 1<sup>st</sup> floor to the 31<sup>st</sup> floor without stop. And the elevator stops 10 seconds once. So, if the elevator stops at each floor, it will cost 410 seconds. In another way, it takes 20 seconds for the workers to go up or down one floor. It takes 600 seconds for them to walk from the 1<sup>st</sup> floor to the 31<sup>st</sup> floor. Obviously, it is not a good idea. Sp some people choose to use the elevator to get a floor which is the nearest to their office.</div><p></p><div>Here is a plan to improve this situation although this plan is not the best. First, the elevator man asks the people which floors they want to go. Then, design a stopping plan which minimize the time the last person need to arrive the floor where this office locates. For example, if the elevator is required to stop at 4<sup>th</sup>, 5<sup>th</sup> and 10<sup>th</sup> floor, the stopping plan would be: the elevator stops at 4<sup>th</sup> and 10<sup>th</sup> floor. Because the elevator will arrive 4<sup>th</sup> floor at 12 seconds, then it will stop 10 seconds, then it will arrive 10<sup>th</sup> floor at 46 second. People who want to go 4<sup>th</sup> fllor will reach their office at 12 second, ant go to 5<sup>th</sup> floor will reach at 32 seconds and 10<sup>th</sup> floor at 46 second. Therefore it takes 46 seconds for the last person to reach his office. It\u2019s good for most of people.</div><p></p><div>Now, your task is to design the stopping plan which minimize the time the last person needs to arrive at his floor.</div><p></p><div>&nbsp;</div>", "input_description": "There are a number of test case in this problem. Each test case is in a single line as the following:\n  n,f1,f2,\u2026.,fn\n where n is the number of floors at which the elevator need to stop, and n=0 means no test cases any more. And f1,f2,\u2026fn are the floors at which the elevator is to be stopped. (n<=30,2<=f1,f2,\u2026,fn<=31). Every number is separated by a single space.\n", "output_description": "For each test case, output a line for the minimum time needed.", "samples": "[{\"input\": \"3 4 5 10\\n1 2\\n0\\n\", \"output\": \"46\\n4\\n\"}]", "test_case_id": "1498", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 27, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1499, "fields": {"title": "Who can laugh at the end?", "description": "<div>Tom and Jane are playing a game. The game is very simple. They first draw an integer 1&lt;=n&lt;=4,294,967,295 and then Tom first starts at a number p=1, and Jane can multiple this number by one of the numbers 2 to 9, and then Tom and so on. The winner is who first reach p&gt;=n. It\u2019s naturally that none of them is silly, and they will try their best to win the game.</div><p></p><div>&nbsp;</div>", "input_description": "Each line of input contains one integer number n.", "output_description": "For each line of input output one line either\nTom wins.\nOr\nJane wins.\n", "samples": "[{\"input\": \"162\\n17\\n34012226\\n\", \"output\": \"Tom wins.\\nJane wins.\\nTom wins.\\n\"}]", "test_case_id": "1499", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 95, "total_accepted_number": 29, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1500, "fields": {"title": "arithmetic expression", "description": "<p>Given a arithmetic expression, can you caculate it?<br /></p>", "input_description": "Input consists of multiple test cases. each case contains a expression, and there is only one space between each operator(+, -, *, /) and operand. You can assume no bracket in the expression and all the oprands are integers.\n\n", "output_description": "Print the result for each expression on a line, and all the results are integers.", "samples": "[{\"input\": \"2\\n1 + 2 * 3\\n2 + 1\\n\", \"output\": \"7\\n3\\n\"}]", "test_case_id": "1500", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 389, "total_accepted_number": 78, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1502, "fields": {"title": "Prime Factors", "description": "\u5c06\u4e00\u4e2a\u6b63\u6574\u6570\u5206\u89e3\u6210\u591a\u4e2a\u8d28\u56e0\u5b50\u7684\u4e58\u79ef\u5f62\u5f0f\u3002", "input_description": "The input will consist of multiple keys. Each line will contain one key, an integer n in the range 1 < n < 2^32.\n\nThe end of input will be indicated by a line containing a number 0.\n", "output_description": "For each line of input, output the key number followed by the factors expression.\n\nFor an input number n, output n = f1 \u00d7 f2 \u00d7 \u2026 \u00d7 fn, where each fi is a prime number and fi \u2264 fj for any i < j. Your output should always follow the format shown in sample output.\n", "samples": "[{\"input\": \"195\\n196\\n197\\n198\\n199\\n200\\n0\\n\", \"output\": \"Key #1: 195 = 3 x 5 x 13\\nKey #2: 196 = 2 x 2 x 7 x 7\\nKey #3: 197 = 197\\nKey #4: 198 = 2 x 3 x 3 x 11\\nKey #5: 199 = 199\\nKey #6: 200 = 2 x 2 x 2 x 5 x 5\\n\"}]", "test_case_id": "1502", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 679, "total_accepted_number": 90, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1504, "fields": {"title": "Buy or Build", "description": "<p>World Wide Networks (WWN) is a leading company that operates large telecommunication networks. WWN would like to setup a new network in Borduria, a nice country that recently managed to get rid of its military dictator Kurvi-Tasch and which is now seeking for investments of international companies (for a complete description of Borduria, have a look to the following Tintin albums King Ottokar&#039;s Sceptre, The Calculus Affair and Tintin and the Picaros). You are requested to help WWN to decide how to setup its network for a minimal total cost. <br /><br />There are several local companies running small networks (called subnetworks in the following) that partially cover the n largest cities of Borduria. WWN would like to setup a network that connects all n cities. To achieve this, it can either build edges between cities from scratch or it can buy one or several subnetworks from local companies. You are requested to help WWN to decide how to setup its network for a minimal total cost. </p><p></p><ul><p></p><li>All n cities are located by their two-dimensional Cartesian coordinates. <br /><p></p><li>There are q existing subnetworks. If q &gt;= 1 then each subnetwork c (1 &lt;= c &lt;= q) is defined by a set of interconnected cities (the exact shape of a subnetwork is not relevant to our problem). <br /><p></p><li>A subnetwork c can be bought for a total cost wc and it cannot be split (i.e., the network cannot be fractioned). <br /><p></p><li>To connect two cities that are not connected through the subnetworks bought, WWN has to build an edge whose cost is exactly the square of the Euclidean distance between the cities.<br /></li><p></p><p>You have to decide which existing networks you buy and which edges you setup so that the total cost is minimal. Note that the number of existing networks is always very small (typically smaller than 8). </p>", "input_description": "Each test case is described by one input file that contains all the relevant data. The first line contains the number n of cities in the country (1 <= n <= 1000) followed by the number q of existing subnetworks (0 <= q <= 8). Cities are identified by a unique integer value ranging from 1 to n. The first line is followed by q lines (one per subnetwork), all of them following the same pattern: The first integer is the number of cities in the subnetwork. The second integer is the the cost of the subnetwork (not greater than 2*10<sup>6</sup>. The remaining integers on the line (as many as the number of cities in the subnetwork) are the identifiers of the cities in in the subnetwork. The last part of the file contains n lines that provide the coordinates of the cities (city 1 on the first line, city 2 on the second one, etc). Each line is made of 2 integer values (ranging from 0 to 3000) corresponding to the integer coordinates of the city.", "output_description": "For each input file, your program has to write the optimal total cost to interconnect all cities.", "samples": "[{\"input\": \"7 3\\n2 4 1 2\\n3 3 3 6 7\\n3 9 2 4 5\\n0 2\\n4 0\\n2 0\\n4 2\\n1 3\\n0 5\\n4 4\", \"output\": \"17\"}]", "test_case_id": "1504", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 9, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1505, "fields": {"title": "Invitation Cards", "description": "In the age of television, not many people attend theater performances. Antique Comedians of Malidinesia are aware of this fact. They want to propagate theater and, most of all, Antique Comedies. They have printed invitation cards with all the necessary information and with the programme. A lot of students were hired to distribute these invitations among the people. Each student volunteer has assigned exactly one bus stop and he or she stays there the whole day and gives invitation to people travelling by bus. A special course was taken where students learned how to influence people and what is the difference between influencing and robbery. <br /><br />The transport system is very special: all lines are unidirectional and connect exactly two stops. Buses leave the originating stop with passangers each half an hour. After reaching the destination stop they return empty to the originating stop, where they wait until the next full half an hour, e.g. X:00 or X:30, where &#039;X&#039; denotes the hour. The fee for transport between two stops is given by special tables and is payable on the spot. The lines are planned in such a way, that each round trip (i.e. a journey starting and finishing at the same stop) passes through a Central Checkpoint Stop (CCS) where each passenger has to pass a thorough check including body scan. <br /><br />All the ACM student members leave the CCS each morning. Each volunteer is to move to one predetermined stop to invite passengers. There are as many volunteers as stops. At the end of the day, all students travel back to CCS. You are to write a computer program that helps ACM to minimize the amount of money to pay every day for the transport of their employees. ", "input_description": "The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case begins with a line containing exactly two integers P and Q, 1 <= P,Q <= 1000000. P is the number of stops including CCS and Q the number of bus lines. Then there are Q lines, each describing one bus line. Each of the lines contains exactly three numbers - the originating stop, the destination stop and the price. The CCS is designated by number 1. Prices are positive integers the sum of which is smaller than 1000000000. You can also assume it is always possible to get from any stop to any other stop.", "output_description": "For each case, print one line containing the minimum amount of money to be paid each day by ACM for the travel costs of its volunteers.", "samples": "[{\"input\": \"2\\n2 2\\n1 2 13\\n2 1 33\\n4 6\\n1 2 10\\n2 1 60\\n1 3 20\\n3 4 10\\n2 4 5\\n4 1 50\\n\", \"output\": \"46\\n210\"}]", "test_case_id": "1505", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 24, "total_accepted_number": 15, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1506, "fields": {"title": "A Hard Game", "description": "<p>Bearman made acquaintance with Zhk when Zhk was a freshman. Zhk is one of the smartest students bearman knows here. Zhk pursues what he loves firmly and continuously. But 766, who known as a top coder, doesn&#039;t agree with bearman. He finds a really hard game to test Zhk&#039;s mathematical thinking.</p><p></p><p>The game begins with n sequences of stones. There are mi (1 &lt;= i &lt;= n) stones in each sequence. The player can choose one sequence and remove one or more stones from that sequence in each turn. Zhk is younger, so 766 let him remove first. The player who removes the last stone loses the game.<br /></p>", "input_description": "The first line of each test case contains an integer n (1 <= n <= 10000). The following line contains n integers m1, m2, ..., mn, which is the number of stones in each sequence. All the integers can be fit into an unsigned 32-bit int. A line with one zero ends the input.\n", "output_description": "All the players adopt optimal strategy. If Zhk wins output a single line with \"Zhk\", otherwise output \"766\".", "samples": "[{\"input\": \"2\\n1 1\\n3\\n1 2 2\\n0\", \"output\": \"766\\nZhk\"}]", "test_case_id": "1506", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 36, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1507, "fields": {"title": "Get an Offer", "description": "<p>Bearman is in his senior year now. He loves doing academic research. So he tries to apply for some PhD programs. Prof. L is one of the most active scholars in his research field. Bearman dreams of being Prof. L&#039;s PhD student. Prof. L emailed a puzzle to bearman and wrote, &quot;If you can solve it before this weekend, I&#039;ll give you an offer&quot;. Could you give bearman some help?</p><p></p><p>Prof. L gave bearman n boxes. Initially, there were ai (1 &lt;= i &lt;= n) stones in each box. Every time bearman can choose m boxes (m &lt;= n) from the n boxes arbitrarily and fill one stone in each box. Bearman repeats this operation until every box contains the same number of stones. Bearman suspects if he can finish with equal number of stones in every box. Could you give him some hints?<br /></p>", "input_description": "The first line of each test case contains two integers n, m (1 <= m <= n <= 1000). The following line contains n integers a1, a2, ..., an, which is the number of stones in each box. All the integers can be fit into an unsigned 32-bit int. A line with two zeros ends the input.\n", "output_description": "If bearman can succeed in finishing with equal number of stones in every box output a single line with \"Yes\", otherwise output \"No\".\n", "samples": "[{\"input\": \"3 1\\n1 2 3\\n5 2\\n1 3 1 3 5\\n0 0\", \"output\": \"Yes\\nYes\"}]", "test_case_id": "1507", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 138, "total_accepted_number": 41, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1508, "fields": {"title": "Find the K-th Number", "description": "You are working for Macrohard company in data structures department. After failing your previous task about key insertion you were asked to write a new data structure that would be able to return quickly k-th order statistics in the array segment. <br /><br />That is, given an array a[1...n] of different integer numbers, your program must answer a series of questions Q(i,j,k) in the form:What would be the k-th number in a[i...j] segment, if this segment was sorted? <br /><br />For example, consider the array a = {1,5,2,6,3,7,4}. Let the question be Q(2,5,3). The segment a[2...5] is (5,2,6,3). If we sort this segment, we get (2,3,5,6), the third number is 5, and therefore the answer to the question is 5. ", "input_description": "The first line of the input file contains n -- the size of the array, and m -- the number of questions to answer (1 <= 100 000, 1 <= m <= 5000). \n\nThe second line contains n different integer numbers not exceeding 10^9 by their absolute values -- the array for which the answers should be given. \n\nThe following m lines contain question descriptions, each description consists of three number: i,j, and k (1 <= i <= j <= n, 1 <= k <= j-i+1) and represents the question Q(i,j,k).", "output_description": "For each question output the answer to it -- the k-th number in sorted a[i...j] segment.", "samples": "[{\"input\": \"7 3\\n1 5 2 6 3 7 4\\n2 5 3\\n4 4 1\\n1 7 3\\n\", \"output\": \"5\\n6\\n3\"}]", "test_case_id": "1508", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 201, "total_accepted_number": 25, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1509, "fields": {"title": "Intervals", "description": "<p><font>You are given n closed, integer intervals [a<sub>i</sub>, b<sub>i</sub>] and n integers c<sub>1</sub>, ..., c<sub>n</sub>. <br /><br />Write a program that: <br /><p></p><ul><p></p><li>reads the number of intervals, their end points and integers c<sub>1</sub>, ..., c<sub>n</sub> from the standard input, <br /><p></p><li>computes the minimal size of a set Z of integers which has at least c<sub>i</sub> common elements with interval [a<sub>i</sub>, b<sub>i</sub>], for each i=1,2,...,n, <br /><p></p><li>writes the answer to the standard output.</li>", "input_description": "The first line of the input contains an integer n (1 <= n <= 50000) -- the number of intervals. The following n lines describe the intervals. The (i+1)-th line of the input contains three integers \nai, bi and ci separated by single spaces and such that 0 <= ai <= bi <= 50000 and 1 <= ci <= bi - ai+1.", "output_description": "The output contains exactly one integer equal to the minimal size of set Z sharing at least ci elements with interval [ai, bi], for each i=1,2,...,n.", "samples": "[{\"input\": \"5\\n3 7 3\\n8 10 3\\n6 8 1\\n1 3 1\\n10 11 1\\n\", \"output\": \"6\"}]", "test_case_id": "1509", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 19, "total_accepted_number": 15, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1511, "fields": {"title": "All the Solutions", "description": "There is a special kind of equation in Number Theory. Its formal form as follows:<br />x1 + x2 + x3 + ... + xn = S<br />where Li &lt;= xi &lt;= Ui (1 &lt;= i &lt;= n) and S&gt;=0. As you know, there are many solution to this equation. Your task is to find the number of all possible solutions.", "input_description": "The first line of each test case contains two integer n, S (1 <= n <= 20, S >= 0). The following n lines contain the constraints. The (i+1)th line contains two integers Li, Ui (0<= Li <= Ui <= 150). A line with one zero ends the inputs.", "output_description": "For each test case, output a single line contains an integer that is the number of all possible solutions.", "samples": "[{\"input\": \"2 3\\n1 2\\n1 2\\n3 10\\n1 3\\n1 8\\n2 9\\n0\", \"output\": \"2\\n18\"}]", "test_case_id": "1511", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 8000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 188, "total_accepted_number": 22, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1512, "fields": {"title": "An Easy Task", "description": "Give you a square matrix. Can you tell me the determinant of it?", "input_description": "The first line of each test contains an integer n (0 < n < 16).\nThe following lines describe the square matrix (0 <= aij < 10, and aij is an integer) :\n<pre>a11  a12  ...  a1n\na21  a22  ...  a2n\n .    .    .    .\n .    .    .    .\nan1  an2  ...  ann</pre>The input is terminated when n = 0.", "output_description": "For each test case, output a single line contains the determinant.", "samples": "[{\"input\": \"2\\n1 2\\n3 4\\n0\", \"output\": \"-2\"}]", "test_case_id": "1512", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 247, "total_accepted_number": 28, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1513, "fields": {"title": "Calculate the GPA", "description": "Each course grade is one of the following five letters: A, B, C, D, and F. (Note that there is no grade E.) The grade A indicates superior achievement, whereas F stands for failure. In order to calculate the GPA, the letter grades A, B, C, D, and F are assigned the following grade points, respectively: 4, 3, 2, 1, and 0. ", "input_description": "The input file will contain data for one or more test cases, one test case per line. On each line there will be one or more upper case letters, separated by blank spaces. \nA single '*' indicates the end of input.", "output_description": "Each line of input will result in exactly one line of output. If all upper case letters on a particular line of input came from the set {A, B, C, D, F} then the output will consist of the GPA, displayed with a precision of two decimal places. Otherwise, the message \"Unknown letter grade in input\" will be printed. ", "samples": "[{\"input\": \"A B C D F\\nB F F C C A\\nD C E F\\n*\", \"output\": \"2.00\\n1.83\\nUnknown letter grade in input\"}]", "test_case_id": "1513", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 315, "total_accepted_number": 126, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1514, "fields": {"title": "Ping-Pang", "description": "Since taking office, ITTF President Adham Sharara has maken some decisions to implement a series of reforms, in order to promote the sport in the global popularity. 11-points system reform has aroused much controversy. Because of the inability to adapt to the new rules, some of the players have to choose to retire. Tom is one of them. After retire, he embarked on the study of table tennis in order to investigate the impact of the different of 11-points and 21-points. In carrying out his research, he need to analyze some statistical data, so he need your help. <p></p><p></p>First list the outcome of each ball, then calculated the results in the 11-points and 21-points system. For example, there are a copy of the record. &#039;W&#039; denotes Tom win, &#039;L&#039; denotes he loss. <p></p><p></p>WWWWWWWWWWWWWWWWWWWWWWLW <p></p><p></p>In 11-points system, the result of the game is 11-0 in first and 11-0 in second. Now the third has not end, the current is 1-1. In 21-points system, then the result of the competition is 1-0 in first. Now the second has not end, the current is 2-1. Node: the result is 0-0, at the begin of the competition. <p></p><p></p>You need to calculate the results, according to the given informations.", "input_description": "Input includes a number of strings(one per line of up to 20 letters), a string of uppercase W, L and E components. 'E' means that the game is end, and the contents after 'E' should be ignored.", "output_description": "Output contains two parts, each part contains some lines, each corresponding to a game score. The first part is 11 points system, and the second part is 21 points system. Two part separated by an empty line.", "samples": "[{\"input\": \"WWWWWWWWWWWWWWWWWWWW\\nWWLWE\", \"output\": \"11:0\\n11:0\\n1:1\\n\\n21:0\\n2:1\"}]", "test_case_id": "1514", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 487, "total_accepted_number": 78, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1515, "fields": {"title": "Find the next number", "description": "The binary weight of a positive integer is the number of 1&#039;s in its binary representation. For example, the decimal number 1 has a binary weight of 1, and the decimal number 1717 (which is 11010110101 in binary) has a binary weight of 7. <p></p><p></p>Given a positive integer N, find the smallest integer greater than N that has the same binary weight as N.", "input_description": "The first line of the input is T, the number of test case. \nThe next T lines each contains a positive integer N (1 \u2264 N \u2264 1,000,000,000).", "output_description": "For each test case output the smallest integer greater than N that has the same binary weight as N.", "samples": "[{\"input\": \"1\\n2\", \"output\": \"4\"}]", "test_case_id": "1515", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 324, "total_accepted_number": 45, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1516, "fields": {"title": "NUMBER GAMES", "description": "There is an interesting game. We start with a number K. Then three operations is allowed:<p></p><p></p>1. Multiply current number by 2<p></p>2. Divide current number by 2, if current number is even.<p></p>3. Increase current number by 1<p></p><p></p>Our target is to get number P with minimum operations. You can assume 0 &lt; P,K &lt; 100000, and the number can not be greater than or equal to 100000 at any time.", "input_description": "The first line is an integer T, the number of test cases. Then T cases follows.\nEach test case contain two numbers K and P in one line separated by a space.", "output_description": "Output the minimum number of operations. If it is impossible to get P from K, output -1 instead. \n", "samples": "[{\"input\": \"1\\n1 2\", \"output\": \"1\"}]", "test_case_id": "1516", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 6000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 345, "total_accepted_number": 34, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1517, "fields": {"title": "Paint", "description": "There is a painting which consists of white and black squares.The adjacent squares don`t have the same collour like in a chess board.Now what we interest in is how many 8 \u00d7 8 chess boards are embedded within this painting. The bottom right corner of a chess board must always be white.", "input_description": "The input contains several test cases. Each test case consists three intergers N,M and C in one line,(8 \u2264 N, M \u2264 40000).N and M is the number of rows and columns of the painting.c is always 0 or 1, where 0 indicates that the bottom right corner of the painting is black, and 1 indicates that this corner is white.\n\nN=0, M=0, C=0 indicates the end of input.", "output_description": "For each test case, print the number of chess boards embedded within the given painting.\n", "samples": "[{\"input\": \"8 8 1\\n0 0 0\", \"output\": \"1\"}]", "test_case_id": "1517", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 34, "total_accepted_number": 13, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1518, "fields": {"title": "Easy Easy!", "description": "There is a half ball container whose height is one meter.Water can flow from a pore in its buttom.The cross section of the pore is one square centimeter.At first the container is full of water and the time is zero.Can you tell the time when the height of water is the given number? (0 &lt; h &lt;= 100.0, g = 9.8m/s)", "input_description": "The input may contain several sets of test data. Each contains one numbers in a single line. The number is height of water which is given by centimeter.\n\nh = -1 indicates the end of the input.", "output_description": "Print the time when the height of water is the given number.  Printed exact to four digits to the right of the decimal point.", "samples": "[{\"input\": \"100.0\\n-1\", \"output\": \"0.0000\"}]", "test_case_id": "1518", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 116, "total_accepted_number": 18, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1519, "fields": {"title": "To the heightest", "description": "Now,A boy is playing basketball. He stands at L(m) meters away from the wall and his height is H(m). We know the speed he trow is V(m/s),so could you tell me the heighest point he can hit.(g = 9.8m/s^2)", "input_description": "The input may contain several sets of test data. Each contains three numbers which is H(1.0 <= H <= 2.0),L(1.0 <= L <= 100.0),V(0.0 < V <= 100.0) in order.The end of input by 0 0 0.", "output_description": "Print the heighest point the boy can hit. Printed exact to four digits to the right of the decimal point.", "samples": "[{\"input\": \"1.3700 71.5000 67.5001\\n0 0 0\", \"output\": \"228.3345\"}]", "test_case_id": "1519", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 205, "total_accepted_number": 22, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1521, "fields": {"title": "Walking", "description": "You are given a three-dimensional box of integral dimensions `l<sub>x</sub> \u00d7 l<sub>y</sub> \u00d7 l<sub>z</sub> The edges of the box are axis-aligned, and one corner of the box is located at position (0, 0, 0). Given the coordinates (x, y, z) of some arbitrary position on the surface of the box, your goal is to return the square of the length of the shortest path along the box\u2019s surface from (0, 0, 0) to (x, y, z).", "input_description": "The input test file will contain multiple test cases, each of which consists of six integers <i>l<sub>x</sub> , l<sub>y</sub> , l<sub>z</sub> x, y, z</i> where 1 <= <i>l<sub>x</sub> + l<sub>y</sub> + l<sub>z</sub></i> <= 1000. Note that the box may have zero volume, but the point (x, y, z) is always guaranteed to be on one of the six sides of the box. The end-of-file is marked by a test case with `<i>l<sub>x</sub></i> = <i>l<sub>y</sub></i> = <i>l<sub>z</sub></i> = <i>x</i> = <i>y</i> = <i>z</i> = 0 and should not be processed.", "output_description": "For each test case, write a single line with a positive integer indicating the square of the shortest path length.(Note: The square of the path length is always an integer; thus, your answer is exact, not approximate.)", "samples": "[{\"input\": \"1 1 2 1 1 2\\n1 1 1 1 1 1\\n0 0 0 0 0 0\", \"output\": \"8\\n5\"}]", "test_case_id": "1521", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 103, "total_accepted_number": 10, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1522, "fields": {"title": "put balls II", "description": "There are N (1 &lt;= N &lt;= 10^9) same balls and N same boxes. Could you tell me how many ways puts these balls to these boxes, and the number of balls in each box is not greater than 2.", "input_description": "Input contains several test cases. Each of the test cases contains a single integer in one line N. Input is terminated by N = 0, which should not be processed.", "output_description": "For each case, print the result in one line.", "samples": "[{\"input\": \"3\\n0\", \"output\": \"2\"}]", "test_case_id": "1522", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 238, "total_accepted_number": 124, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1523, "fields": {"title": "Odd or Even?", "description": "Could you tell me the coefficient of x^k in (1+x)^n is odd or even?", "input_description": "The first line of the input contains a integer <i>T</i>, indicate the number of test cases.\nFor each case, there are two integers <i>n</i>, <i>k</i> (0 <= <i>k</i> <= <i>n</i> <= 10^9).\n", "output_description": "For each case, if the coefficient is odd, print \"Odd\" on a single line. Otherwise, print \"Even\" on a single line.", "samples": "[{\"input\": \"2\\n3 1\\n4 2\\n\", \"output\": \"Odd\\nEven\"}]", "test_case_id": "1523", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 446, "total_accepted_number": 133, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1524, "fields": {"title": "mixed string", "description": "Given three strings, you are to determine whether the third string can be formed by combining the characters in the first two strings. The first two strings can be mixed arbitrarily, but each must stay in its original order.", "input_description": "The first line of input file contains a single positive integer T, indicates the number of data sets. For each data set, the line of input consists of three strings, separated by a single space. All strings are composed of upper and lower case letters only. The length of the third string is always the sum of the lengths of the first two strings. The first two strings will have lengths between 1 and 200 characters, inclusive.", "output_description": "For each data set, print \"Yes\" if the third string can be formed from the first two, or \"No\" if it cannot.", "samples": "[{\"input\": \"3\\ncat tree tcraete\\ncat tree catrtee\\ncat tree cttaree\\n\", \"output\": \"Yes\\nYes\\nNo\"}]", "test_case_id": "1524", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 306, "total_accepted_number": 94, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1525, "fields": {"title": "Find A+B", "description": "Given a series of numbers, your task is to find the largest number C in the sequence, which is the sum of two other numbers A and B in the sequence. Please note that A and B may have the same value, but cannot be the same number.", "input_description": "The first line of each test case is T, indicate the number of test cases.\n\nFor each test case, the first line is an integer N (1 \u2264 N \u2264 1000), which is the amount of the numbers, followed by a line of N numbers. \n\nYou can assume all the numbers in the sequence are positive and not more than 10^8. \n", "output_description": "Output one line for each test case, indicating the largest number. If there is no such number, output 0.", "samples": "[{\"input\": \"2\\n3\\n1 2 3\\n4\\n1 2 3 4\\n\", \"output\": \"3\\n4\"}]", "test_case_id": "1525", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 982, "total_accepted_number": 173, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1526, "fields": {"title": "Robot", "description": "We have many robots can help you to clean the junk in a N*N cells square field. But each robots only can clean the junk in a row or a column. The problem is that at least how much robots you are needed to clean the field.", "input_description": "The input consists of several test cases.The first line of the input is the number of test cases.In each of the test cases, there would be a N*N matrix (1 <= N <= 100),and in the matrix, \"*\" stands for junk, and \".\" stands for that the place is empty.", "output_description": "For each test case,print the number of robots you needed at least.", "samples": "[{\"input\": \"2\\n2\\n.*\\n*.\\n3\\n.*.\\n.**\\n.*.\", \"output\": \"2\\n2\"}]", "test_case_id": "1526", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 83, "total_accepted_number": 27, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1527, "fields": {"title": "Divisibility", "description": "   On the planet Zoop, numbers are represented in base 62, using the digits<p></p>0, 1, . . . , 9, A, B, . . . , Z, a, b, . . . , z<p></p>   where<p></p>A (base 62) = 10 (base 10)<p></p>B (base 62) = 11 (base 10)<p></p>...<p></p>z (base 62) = 61 (base 10).<p></p>   Given the digit representation of a number x in base 62, your goal is to determine if x is divisible by 61.", "input_description": "   The input will contain multiple cases. Each test case will be given by a single string containing only\nthe digits \u20180\u2019 through \u20189\u2019, the uppercase letters \u2018A\u2019 through \u2018Z\u2019, and the lowercase letters \u2019a\u2019 through \u2019z\u2019. All strings will have a length of between 1 and 10000 characters, inclusive. The end-of-input is denoted by a\nsingle line containing the word \u201cend\u201d, which should not be processed.", "output_description": "For each test case, print \u201cyes\u201d if the number is divisible by 61, and \u201cno\u201d otherwise.", "samples": "[{\"input\": \"1v3\\n2P6\\nIsThisDivisible\\nend\", \"output\": \"yes\\nno\\nno\"}]", "test_case_id": "1527", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 140, "total_accepted_number": 60, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1528, "fields": {"title": "Protect villages", "description": "Now the army decided to send soldier to protect the village so that the village will not be robbed of hijacker.There are N (1 \u2264 N \u2264 10,000)villages. <p></p><p></p>Exactly N-1 pairs of villages are adjacent,and for any two villages A and B (1 \u2264 A \u2264 N; 1 \u2264 B \u2264 N; A \u2260 B) there is a sequence of adjacent villages such that A is the first village in the sequence and B is the last.Army can only send soldier in the village and each soldier has enough power to protect teh village it is on and all villages adjacent to the village with the soldier. <p></p><p></p>Help the army determine the minimun number of soldier it must send to provide the protection to each village.", "input_description": "The input has multiple data sets, each starting with a line consisting of a single integer N, the number of villages in the data set. Then, it is followed by N-1 lines, each of which represents one application with two integers A and B (1 \u2264 A \u2264 N; 1 \u2264 B \u2264 N; A \u2260 B), indicate village a and village b is adjacent. \n\nA line containing a single zero indicates the end of the input. ", "output_description": "For each data set, print a single line containing an integer, the minimun number of soldier it must send to provide the protection to each village.", "samples": "[{\"input\": \"5\\n1 3\\n5 2\\n4 3\\n3 5\\n\", \"output\": \"2\"}]", "test_case_id": "1528", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 23, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1529, "fields": {"title": "Country road", "description": "There are several villages in our country. Some of them are connected by roads, while others not. Now the government wants to build some more roads, to make sure that there is at least one path between any two villages. However, not all the roads between any two villages can be built, and different new roads may have different cost. Given the possible new roads can be built and the cost for each road, you are to calculate the minimum total cost needed. ", "input_description": "The first line is an integer T, the number of test cases. Then T cases follows. \nThe first line of each test case contains three numbers N, M, K, indicating the number of villages, the number of roads currently, and the number of roads to be built. Then M lines follow, each contains two numbers Ai and Bi (1 \u2264 Ai,Bi \u2264 N), indicating there have been a road between Ai and Bi. Then K lines follow, each contains three numbers Ci, Di and Ei (1 \u2264 Ci,Di \u2264 N, 0 \u2264 Ei \u2264 1000), indicating that if we build a road between Ci and Di, the cost is Ei. \n\nYou can assume 2 \u2264 N \u2264 1000, all the (Ai,Bi) pairs and all the (Ci,Di) pairs are different. Please note all the roads are undirected, that is, you can travel in both directions. \n", "output_description": "Output one line for each test case, indicating the minimum total cost to make all the villages are reachable from any village. If it is not possible, output -1.", "samples": "[{\"input\": \"3\\n4 3 3\\n1 2\\n2 3\\n1 3\\n1 4 10\\n2 4 20\\n3 4 30\\n4 0 3\\n1 4 10\\n2 4 20\\n3 4 30\\n4 0 2\\n1 2 100\\n3 4 100\\n\", \"output\": \"10\\n60\\n-1\\n\"}]", "test_case_id": "1529", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 100, "total_accepted_number": 22, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1530, "fields": {"title": "Lucky numbers", "description": "John has recently arrived in Bucharest for the South Eastern European Regional Contest. John is famous for his theory of lucky numbers. That\u2019s why all the contestants and spectators are very happy.<p></p><p></p>According to that theory 4 and 7 are lucky digits, and all the other digits are not lucky. A lucky number is a number that contains only lucky digits in decimal notation. A very lucky number is a number that can be expressed as a product of several lucky numbers. A lucky number by itself is considered to be very lucky. For example, numbers 47, 49, 112 are very lucky.<p></p><p></p>Your task is to calculate the number of very lucky numbers that are not less than A and not greater than B. Of course, numbers A and B are given by John.", "input_description": "The first line of the input contains a single integer T ? a number of test cases. Each of the next T lines contains two integers separated by a single space ? A and B.\n\n1 \u2264 T \u2264 7777,\n1 \u2264 A \u2264 B \u2264 1000000000000 (10<sup>12</sup>).", "output_description": "Output must contain T lines ? answers for the test cases.", "samples": "[{\"input\": \"4\\n1 2\\n88 99\\n112 112\\n1 100\", \"output\": \"0\\n0\\n1\\n10\"}]", "test_case_id": "1530", "hint": "Very lucky numbers for the last case of the sample input are: 4, 7, 16, 28, 44, 47, 49, 64, 74 and 77.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 9, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1531, "fields": {"title": "Sky Code", "description": "Stancu likes space travels but he is a poor software developer and will never be able to buy his own spacecraft. That is why he is preparing to steal the spacecraft of Petru. There is only one problem ? Petru has locked the spacecraft with a sophisticated cryptosystem based on the ID numbers of the stars from the Milky Way Galaxy. For breaking the system Stancu has to check each subset of four stars such that the only common divisor of their numbers is 1. Nasty, isn\u2019t it? Fortunately, Stancu has succeeded to limit the number of the interesting stars to N but, any way, the possible subsets of four stars can be too many. Help him to find their number and to decide if there is a chance to break the system.<p></p>", "input_description": "In the input file several test cases are given. For each test case on the first line the number N of interesting stars is given (1 \u2264 N \u2264 10000). The second line of the test case contains the list of ID numbers of the interesting stars, separated by spaces. Each ID is a positive integer which is no greater than 10000. The input data terminate with the end of file.\n", "output_description": "For each test case the program should print one line with the number of subsets with the asked property.", "samples": "[{\"input\": \"4\\n2 3 4 5\\n4\\n2 4 6 8\\n7\\n2 3 4 5 7 6 8\", \"output\": \"1\\n0\\n34\"}]", "test_case_id": "1531", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 8, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1532, "fields": {"title": "Stock Exchange", "description": "The world financial crisis is quite a subject. Some people are more relaxed while others are quite anxious. John is one of them. He is very concerned about the evolution of the stock exchange. He follows stock prices every day looking for rising trends. Given a sequence of numbers p<sub>1</sub>, p<sub>2</sub>,...,p<sub>n</sub> representing stock prices, a rising trend is a subsequence p<sub>i1</sub> &lt; p<sub>i2</sub> &lt; \u30fb \u30fb \u30fb &lt; p<sub>ik</sub>, with i<sub>1</sub> &lt; i<sub>2</sub> &lt; \u30fb \u30fb \u30fb &lt; i<sub>k</sub>. John\u2019s problem is to find very quickly the longest rising trend.", "input_description": "The program input is from a text file. Each data set in the file stands for a particular set of stock prices. A data set starts with the length L (L \u2264 100000) of the sequence of numbers, followed by the numbers (a number fits a long integer). The program prints the length of the longest rising trend.\n\nWhite spaces can occur freely in the input. The input data are correct and terminate with an end of file.", "output_description": "For each set of data the program prints the result to the standard output from the beginning of a line. An input/output sample is in the table bellow.", "samples": "[{\"input\": \"6\\n5 2 1 4 5 3\\n3\\n1 1 1\\n4\\n4 3 2 1\", \"output\": \"3\\n1\\n1\"}]", "test_case_id": "1532", "hint": "There are three data sets. In the first case, the length L of the sequence is 6. The sequence is 5, 2, 1, 4, 5, 3. The result for the data set is the length of the longest rising trend: 3.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 62, "total_accepted_number": 15, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1534, "fields": {"title": "Lucky cities", "description": "John has recently arrived in Romania for the South Eastern European Regional competitions. John has never been to Romania before so Romanians decided to organize sightseeing tour for him. This tour will include several Romanian cities and none of them will be visited more than once. John will start in one city and will visit some other cities according to a guide tour. At the end of the tour John will return to the starting point.<p></p>There are N cities numbered from 1 to N and M two-way roads in the country. Each road connects two different cities. Consider a sightseeing tour for John c1,c2, ...,cn, where each ci denotes a city in Romania. Then all ci must be distinct, ci and ci+1 must be connected by a road, where i=1,2,...,n-1, cn and c1 must be connected by a road as well.<p></p>Being a odd person John would like to visit an odd number of cities. The organizers have drawn the plan of all possible tours with an odd number of cities.<p></p>Residents of the cities would like John to visit them. So if there is at least one tour passing through some city than this city is called lucky. Your task is to calculate the number of lucky cities in Romania.", "input_description": "The first line of input contains a single integer T ? a number of test cases. Every test case starts with a line containing two integers separated by a single space ? N and M. Each of the next M lines will contain two integers ai and bi separated by a single space ? the labels of cities that i-th road connects.\n\n1 \u2264 T \u2264 77,\n0 \u2264 N, M \u2264 100000 (10<sup>5</sup>),\n1 \u2264 a<sub>i</sub> < b<sub>i</sub> \u2264 N.", "output_description": "Output should contain T lines ? answers for each of the test cases.", "samples": "[{\"input\": \"1\\n7 7\\n1 5\\n3 5\\n3 7\\n1 7\\n6 7\\n4 7\\n4 6\", \"output\": null}]", "test_case_id": "1534", "hint": "3", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 53, "total_accepted_number": 21, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1535, "fields": {"title": "Build Your Home", "description": "Mr. Tenant is going to buy a new house. In fact, he is going to buy a piece of land and build his new house on it. In order to decide which piece of land to buy, Mr. Tenant needs a program which will give a score to each piece. Each candidate piece of land is a polygonal shape (not necessarily convex), and Mr. Tenant wonders what the best score is. Among possible scores, he considered the number of vertices, sum of angles, minimum number of required guards, and so forth. Finally, Mr. Tenant decided that the best score for a piece of land would simply be its area. Your task is to write the desired scoring program.", "input_description": "The input file consists of multiple pieces of land. Each piece is a simple polygon (that is, a polygon which does not intersect itself). A polygon description starts with a positive integer number k, followed by k vertices, where each vertex consists of two coordinates (floating-point numbers): x and y. Naturally, the last vertex is connected by an edge to the first vertex. Note that each polygon can be ordered either clockwise or counterclockwise. The input ends with a \u201c0\u201d (the number zero).", "output_description": "For each piece of land, the output should consist of exactly one line containing the score of that piece, rounded to the nearest integer number. (Halves should be rounded up, but Mr. Tenant never faced such cases.)", "samples": "[{\"input\": \"1 123.45 67.890\\n3 0.001 0 1.999 0 0 2\\n5 10 10 10 12 11 11 12 12 12.0 10.0\\n0\", \"output\": \"0\\n2\\n3\"}]", "test_case_id": "1535", "hint": "The scoring program has to handle well degenerate cases, such as, polygons with only one or two vertices.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 28, "total_accepted_number": 24, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1536, "fields": {"title": "Quick answer", "description": "Joe is fond of computer games. Now, he must solve a puzzling situation. In front of his eyes lies a huge map with fortified towns. His enemy is a very powerful and tricky character who can connect and disconnect the towns by giving some commands. Two towns are connected if they have been directly connected or interconnected through some other connected towns at some moment in time. When a town is disconnected it gets isolated and clears its own connection history, not the connection history of the other towns. Each connection is bi-directional. Initially the towns are isolated. Joe is asked to answer quickly if two towns are connected, according to the history of the character\u2019s commands.<p></p>Write a program which based on information input from a text file counts the number of yes answers and the number of no answers to questions of the kind: is town<sub>i</sub> connected with town<sub>j</sub>?", "input_description": "The program reads data from a text file. Each data set in the file stands for a particular map and the associated character\u2019s commands, as follows:\n<UL><LI>1) The number of towns on the map <B>N</B> (<B>N</B> \u2264 10000);<LI>\n<LI>2) A list of commands of the form:\n   <UL><LI>a) <B>c</B> <B>town<sub>i</sub> town<sub>j</sub></B>, where <B>town<sub>i</sub></B> and town<sub>j</sub> are integers from <B>1</B> to <B>no_of_towns</B>. The command means that <B>town<sub>i</sub></B> and <B>town<sub>j</sub></B> get connected.<LI>\n   <LI>b) <B>d town<sub>i</sub></B>, where town<sub>i</sub> is an integer from <B>1</B> to <B>no_of_towns</B>. The command means that <B>town<sub>i</sub></B> gets disconnected.<LI>\n   <LI>c) <B>q town<sub>i</sub> town<sub>j</sub></B>, where <B>town<sub>i</sub></B> and <B>town<sub>j</sub></B> are integers from <B>1</B> to <B>no_of_towns</B>. The command stands for the question: is <B>town<sub>i</sub></B> connected with <B>town<sub>j</sub></B>?<LI>\n   <LI>d) <B>e</B>, that ends the list of commands<LI></UL><LI>\n</UL>Each command is on a separate line. Commands (a), (b), (c) can appear in any order. The towns\u2019 connectivity is updated after each command of type (a) or (b). Each command of type (c) is processed according to the current configuration.\n", "output_description": "According to the sample, print the number of yes answers and the number of no answers to questions of the kind: is town<sub>i</sub> connected with town<sub>j</sub>.", "samples": "[{\"input\": \"4\\nc 1 2\\nc 3 4\\nq 1 3\\nc 2 3\\nq 1 4\\nd 2\\nq 4 1\\nq 2 4\\ne\", \"output\": \"2 , 2\"}]", "test_case_id": "1536", "hint": "For example, the input file illustrated in the figure bellow corresponds to only one data set which stands for a map with 4 fortified towns. The character gives 9 commands. There are N<sub>1</sub> yes answered questions and N<sub>2</sub> no answered questions. The program prints these two numbers to the standard output on the same line, in the order: N<sub>1</sub> , N<sub>2</sub> as shown in the sample.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 71, "total_accepted_number": 22, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1538, "fields": {"title": "Internet Service Providers", "description": "A group of <b>N</b> Internet Service Provider companies (ISPs) use a private communication channel that has a maximum capacity of <b>C</b> traffic units per second. Each company transfers <b>T</b> traffic units per second through the channel and gets a profit that is directly proportional to the factor <b>T(C - T N)</b>. The problem is to compute <b>T_optim</b>, the smallest value of <b>T</b> that maximizes the total profit the <b>N</b> ISPs can get from using the channel. Notice that <b>N</b>, <b>C</b>, <b>T</b>, and <b>T_optim</b> are integer numbers.", "input_description": "Write a program that reads sets of data from an input text file. Each data set corresponds to an instance of the problem above and contains two integral numbers ? <B>N</B> and <B>C</B> ? with values in the range from 0 to 10<sup>9</sup>. The input data are separated by white spaces, are correct, and terminate with an end of file.", "output_description": "For each data set the program computes the value of <B>T_optim</B> according to the problem instance that corresponds to the data set. The result is printed on the standard output from the beginning of a line. There must be no empty lines on the output.", "samples": "[{\"input\": \"1 0\\n0 1\\n4 3\\n2 8\\n3 27\\n25 1000000000\", \"output\": \"0\\n0\\n0\\n2\\n4\\n20000000\"}]", "test_case_id": "1538", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 19, "total_accepted_number": 15, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1539, "fields": {"title": "The Second Cheapest Plan", "description": "There are N (3 &lt;= N &lt;= 1000) villages, which are numbered from 1 to N.  Village i has a position given by the Cartesian coordinate (Xi, Yi).  Each road connects exaclty two villages. All roads follow straight  lines, and thus their length is equal to Cartesian distance between  villages. The government wants to build some roads such that every  two villages can connect to each other. We say that village A and B are connected, if and only if there is a road between A and B, or there  exists a village C such that there is a road between A and C, and C and B are connected. The cost of road(i, j) (1 &lt;= i, j &lt;= N) is  defined: cost(i, j) = length(i, j)*P.<p></p><p></p>As a programmer, you are asked to find the second cheapest plan. The cost of a plan is the total cost of built roads.", "input_description": "The first line contains a single integer T, indicate the number of  test cases.\nFor each case, the first line contain two integers N (3 <= N <= 1000)  and P (0 < P <= 10000), which is the number of villages. Then comes N  lines, the i-th of which contains two integers, Xi and Yi separated  by a space. these values give the coordinates of i-th village. (- 10000 <= Xi, Yi <= 10000)\nThere is a blank line before each test case.", "output_description": "For each test case, print a line contain two decimal numbers separate  by a single space. The numbers should be rounded three digits after  the decimal point, the first one indicates the cost of the cheapest  plan, and the other one indicates the cost of the second cheapest plan.\n", "samples": "[{\"input\": \"2\\n\\n3 6\\n270 4210\\n-9701 -3921\\n-2711 -8172\\n\\n4 2\\n3260 -6676\\n-2958 -985\\n2153 -8860\\n6052 5666\", \"output\": \"125501.583 126282.869\\n44153.262 46071.273\"}]", "test_case_id": "1539", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 19, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1540, "fields": {"title": "M_S_T", "description": "a", "input_description": "a", "output_description": "a", "samples": "[{\"input\": \"a\", \"output\": \"a\"}]", "test_case_id": "1540", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 10000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 10, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1543, "fields": {"title": "Inequality", "description": "Given you an inequality:<p></p>X<sub>1</sub> + X<sub>2</sub> + ... + X<sub>N</sub> &lt;= M<p></p>(X<sub>i</sub> &gt;= X<sub>i+1</sub> , and X<sub>i</sub> &gt;= 0)<p></p>Could you tell me the number of solutions is odd or even?", "input_description": "The first line of input contains a single integer T, indicates the number of test cases.\nFor each test case, there is a single line, containning two integer N and M (0 < N, M <= 1,000,000,000).", "output_description": "For each test case, print \"odd\" if the number of solution is odd, otherwise print \"even\".", "samples": "[{\"input\": \"2\\n2 2\\n1 2\", \"output\": \"even\\nodd\"}]", "test_case_id": "1543", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 135, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1544, "fields": {"title": "The Next Integer", "description": "A integer is called a palindrome if its representation in the decimal system is the same when read from left to right and from right to left. For a given positive integer K of not more than 1000000 digits, write the value of the smallest palindrome larger than K to output. Numbers are always displayed without leading zeros.", "input_description": "There maybe more than one group, Each group starts with a line containing a single integer t, the number of test cases. Integers K are given in the next t lines.", "output_description": "For each group,and for each K, output the smallest palindrome larger than K.", "samples": "[{\"input\": \"6\\n8\\n12\\n2133\\n520\\n-0\\n-10\\n1\\n1000000000000000000000000000000000000000000000\", \"output\": \"9\\n22\\n2222\\n525\\n1\\n-9\\n1000000000000000000000000000000000000000000001\"}]", "test_case_id": "1544", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 46, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1545, "fields": {"title": "A Simple Problem", "description": "Euclid has proved the theorem :To any positive ineger A,B,there exsit two ineger X,Y,which obey the equation :AX+BY=D. And D is the greatest common divisor of A and B.Since the theory has been proved,it would be easy for you to find the X,Y,D to the given A and B.", "input_description": "The first line of input contains a single integer T, which is the number of test cases.\nEach test cases has two integers stands for A and B.", "output_description": "For each test case, output X, Y and D in a single line separate with a single space.If there exsits many solutions, output the solution which has the least result of |X|+|Y|; If there still exsits multiply solutions, print the least result of |Y|.", "samples": "[{\"input\": \"1\\n1 2\\n\", \"output\": \"1 0 1\"}]", "test_case_id": "1545", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 463, "total_accepted_number": 44, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1546, "fields": {"title": "LCM", "description": "A pair of numbers has a unique Least Common Multiple (LCM) but a single number can be the LCM of more than one possible pairs. For example 12 is the LCM of (1, 12), (2, 12), (3,4) etc. For a given positive integer N, the number of different integer pairs whose LCM are equal to N can be called the LCM cardinality of that number N. In this problem your job is to find out the LCM cardinality of a number.", "input_description": "The first line of input contains a single integer T, indicate the number of test cases.\nFor each test case, there is a single line, containing a single integer N (0 < N < 100,000,000).", "output_description": "For each test case, print the number of LCM cardinalitys of N.", "samples": "[{\"input\": \"3\\n2\\n12\\n24\\n\", \"output\": \"2\\n8\\n11\"}]", "test_case_id": "1546", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 248, "total_accepted_number": 63, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1547, "fields": {"title": "Same or Different", "description": "Give you two ring necklaces. Each necklace consists of many pearls whose colours are different. Could you tell if the necklaces are same?", "input_description": "The first line of input contain a single integer T, indicats the number of test cases.\nEach test case have two lines, each line contain a string, indicate a necklace, different character stand for different colors.  Strings will be composed only from lowercase letters, the length of each string will be at least 1 and at most 600,000 characters.\nThere is a blank line before each test case.", "output_description": "For each test case, print \"same\" if the two necklace are same, or \"different\".", "samples": "[{\"input\": \"2\\n\\nabc\\nbca\\n\\nabcde\\ncdeba\", \"output\": \"same\\ndifferent\"}]", "test_case_id": "1547", "hint": "We consider the necklace &quot;abcd&quot; and &quot;cdab&quot; are same.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 125, "total_accepted_number": 9, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1548, "fields": {"title": "Sector", "description": "Given a sector of radius R, central angle P, please calculate the distance between the centre of gravity and the centre of the circle.", "input_description": "The first line of input contains a single integer T, indicating the number of test cases.\nFor each test cases, there is a line, containning two decimal number with two digits after decimal point, R and P. R is the radius of the sector, and P is central angle.\n\n0 < R <= 100\n0 < P <= 2*pi", "output_description": "For each test case, print the answer, rounded six digits after the decimal point.", "samples": "[{\"input\": \"2\\n0.01 6.28\\n0.57 6.28\", \"output\": \"0.000003\\n0.000193\\n\"}]", "test_case_id": "1548", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 112, "total_accepted_number": 74, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1549, "fields": {"title": "Sequence", "description": "We are given a sequence a1, ..., an. We can manipulate this sequence using the operation reduce(i), which replaces elements ai and ai+1 with a single element max(ai, ai+1), resulting in a new shorter sequence. The cost of this operation is max(ai, ai+1). After n ? 1 operations reduce, we obtain a sequence of length 1. Our task is to compute the cost of the optimal reducing scheme, i.e. the sequence of reduce operations with minimal cost leading to a sequence of length 1.", "input_description": "The first line of input contains a single integer T, indicating the number of test case.\nFor each test case, the first line contains n (1 <= n <= 600,000), the length of the sequence. The following n lines contain one integer ai, the elements of the sequence (0 <= ai <= 2,100,000,000).", "output_description": "For each test case, print the minimal cost of reducing the sequence to a single element.", "samples": "[{\"input\": \"1\\n3\\n1\\n2\\n3\", \"output\": \"5\"}]", "test_case_id": "1549", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 143, "total_accepted_number": 9, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1550, "fields": {"title": "Calculate the array of Z", "description": "Give you two lists of numbers, X and Y, each containing exactly N elements. Could you tell me a list of numbers Z, that statisfied<p></p>Z[i] = X[0]*Y[i] + X[1]*Y[(i+1) mod N] + ... + X[N-1]*Y[(i+N-1) mod N]. (0 &lt;= i &lt; N)", "input_description": "The first line of input is T, the number of test cases. Each case has three lines, the first line of each case contains a single number N (1 <= N <= 50000), the second line contains N integers, the array of X. The next line contains the array of Y.  (0 <= X[i], Y[i] <= 100)\nThere is a blank line before each test case.", "output_description": "For each test case output the array of Z in formate of samples.", "samples": "[{\"input\": \"2\\n\\n1\\n2\\n3\\n\\n2\\n56 19\\n80 58\", \"output\": \"6\\n5582 4768\\n\"}]", "test_case_id": "1550", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 226, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1551, "fields": {"title": "Travel", "description": "You have bought a car in order to drive from Waterloo to a big city. The odometer on their car is broken, so you cannot measure distance. But the speedometer and cruise control both work, so the car can maintain a constant speed which can be adjusted from time to time in response to speed limits, traffic jams, and border queues. You have a stopwatch and note the elapsed time every time the speed changes. From time to time you wonder, &quot;how far have I come?&quot;. To solve this problem you must write a program to run on your laptop computer in the passenger seat.", "input_description": "Standard input contains several lines of input: Each speed change is indicated by a line specifying the elapsed time since the beginning of the trip (hh:mm:ss), followed by the new speed in km/h. Each query is indicated by a line containing the elapsed time. At the outset of the trip the car is stationary. Elapsed times are given in non-decreasing order and there is at most one speed change at any given time.\nThe line containg \"END\" indicating the end of input.", "output_description": "For each query in standard input, you should print a line giving the time and the distance travelled, in the format below.", "samples": "[{\"input\": \"00:00:01 100\\n00:15:01\\n00:30:01\\n01:00:01 50\\n03:00:01\\n03:00:05 140\\nEND\", \"output\": \"00:15:01 25.00 km\\n00:30:01 50.00 km\\n03:00:01 200.00 km\"}]", "test_case_id": "1551", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 118, "total_accepted_number": 44, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1552, "fields": {"title": "Scoreboard", "description": "Charles is the contest director for the ICPC Tumbolian regional contest. His responsibility is ensuring the contest flows smoothly, that the contest rules are applied fairly, and, of course, announcing the final contest ranking. According to ICPC rules, a team with more solved problems ranks above a team with less solved problems. If two teams have the same number of solved problems, the team with the smaller total penalty ranks above the team with the larger total penalty (in case both teams have the same number of solved problems and the same penalty, Charles considers them as tied).<p></p><p></p>The total penalty for a team is the sum of all the problem penalties of the problems that team has solved. The problem penalty for a problem is TP + EP\u00d7FA, where TP is the time penalty for that problem, EP is the contest\u2019s error penalty and FA is the number of failed attempts at solving the problem before submitting a correct solution. <p></p><p></p>The time penalty for a problem is the time since the start of the contest, in minutes, that the team needed to solve the problem. The error penalty is a positive integer chosen by the contest director, designed to reward teams that submit correct solutions on the first attempt.<p></p><p></p>Charles wants to change the error penalty from the \u201cstandard\u201d value of 20 minutes to stir things up. To study the effects of that change on the final rankings, he wants to know the range of error penalties that don\u2019t change the final standings.<p></p><p></p>In other words, if team A is ahead of team B in the original standings, then A should be ahead of B in the modified standings; if A and B are tied in the original standings, they should also be tied in the modified standings (the original standings are the ones obtained with an error penalty of 20 minutes). <p></p><p></p>Charles has been very busy organizing the Tumbolian regional, so he asked you to make a program that will compute the range for him.", "input_description": "The input contains several test cases. The first line of each test case contains two integers T and P separated by a single space, indicating the number of teams and the number of problems, respectively (2 <= T <= 100, 1 <= P <= 10). Each one of the next T lines describes the performance of a team. A team\u2019s performance description is a line containing P problem descriptions separated by single spaces. Teams are not necessarily given in order of their final standings.\nEach problem description is a string \u201cA/S\u201d, where A is an integer representing the number of attempts that the corresponding team made at solving that problem (0 <= A <= 100), and S is either \u201c-\u201d, if the team did not solve that problem, or an integer indicating the number of minutes it took for the team to submit a correct solution (1 <= S <= 300). Attempts made after the first correct submission are not counted.\nThe end of input is indicated by T = P = 0.", "output_description": "For each test case in the input print two positive integers separated by a single space, indicating the smallest and largest error penalties that would not change the final ranking. If there is no upper bound for the error penalty, print a \u201c*\u201d instead of the upper bound.", "samples": "[{\"input\": \"5 3\\n0/- 0/- 0/-\\n2/- 2/- 1/-\\n1/60 1/165 1/-\\n1/80 0/- 2/120\\n0/- 1/17 0/-\\n4 2\\n17/- 5/-\\n2/7 3/-\\n3/- 2/-\\n1/15 0/-\\n3 2\\n1/- 2/15\\n2/53 1/17\\n1/70 1/20\\n0 0\", \"output\": \"1 24\\n9 *\\n20 20\"}]", "test_case_id": "1552", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 4, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1553, "fields": {"title": "Quick Change", "description": "J.P. Flathead\u2019s Grocery Store hires cheap labor to man the checkout stations. The people he hires (usually high school kids) often make mistakes making change for the customers. Flathead, who\u2019s a bit of a tightwad, figures he loses more money from these mistakes than he makes; that is, the employees tend to give more change to the customers than they should get.<p></p>Flathead wants you to write a program that calculates the number of quarters ($0.25), dimes ($0.10), nickels ($0.05) and pennies ($0.01) that the customer should get back. Flathead always wants to give the customer\u2019s change in coins if the amount due back is $5.00 or under. He also wants to give the customers back the smallest total number of coins. For example, if the change due back is $1.24, the customer should receive 4 quarters, 2 dimes, 0 nickels, and 4 pennies.", "input_description": "The first line of input contains an integer N which is the number of datasets that follow. Each dataset consists of a single line containing a single integer which is the change due in cents, C, (1 \u2264 C \u2264 500).", "output_description": "For each dataset, print out the dataset number, a space, and the string:\nQ QUARTER(S), D DIME(S), n NICKEL(S), P PENNY(S)\nWhere Q is he number of quarters, D is the number of dimes, n is the number of nickels and P is the number of pennies.\n", "samples": "[{\"input\": \"3\\n124\\n25\\n194\", \"output\": \"1 4 QUARTER(S), 2 DIME(S), 0 NICKEL(S), 4 PENNY(S)\\n2 1 QUARTER(S), 0 DIME(S), 0 NICKEL(S), 0 PENNY(S)\\n3 7 QUARTER(S), 1 DIME(S), 1 NICKEL(S), 4 PENNY(S)\"}]", "test_case_id": "1553", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 204, "total_accepted_number": 94, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1554, "fields": {"title": "It's Logical", "description": "At the University of Kentucky, they build a lot of high-performance computer hardware and software, often using<p></p>one supercomputer to design the next. One of the most fundamental computer design problems is logic<p></p>optimization: making sure that the optimized logic still computes the same function as the original design.<p></p><p></p>For this problem, your program will be given two logic expressions to compare for logical equivalence.", "input_description": "The first line of the input consists of a positive integer n, which is the number of datasets (lines) that follow. Each\ndataset consists of a single line containing the two input expressions to be tested. The input expressions consist of\nany of 26 variables named a-z, the binary operators |, &, ^, (OR, AND and XOR respectively), the unary ~ (NOT),\nand parenthesis. The expressions should be evaluated ignoring all other characters and with operator precedence as\nin the C language (parenthesis, ~, &, ^, |). The two expressions will be input in sequence and it is up to your\nprogram to determine where one expression ends and the next begins.\n\nMost logic manipulation programs would convert each expression into a normal form and check if the two\nnormalized expressions are identical. Fortunately for you, each expression will consist of no more than 100\noperations using no more than 10 different variables. For that many cases, you can test for equivalence by simply\nevaluating the two input expressions for all possible inputs and comparing the results.", "output_description": "For each data set, print:\nData set N: Equivalent\n\nif the expressions produce the same result, or:\nData set N: Different\nif they produce different results. Of course N should be replaced by the data set number.", "samples": "[{\"input\": \"3\\na ^b&(b|a)~b^ a\\na^b&(b|a)(a^(b&(b|a)))\\n~~~~z~~z\", \"output\": \"Data set 1: Different\\nData set 2: Equivalent\\nData set 3: Equivalent\"}]", "test_case_id": "1554", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 4, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1555, "fields": {"title": "Cross Game", "description": "The game of Crosses and Crosses is played on the field of 1\u00d7n cells. Two players make moves in turn.<p></p>Each move the player selects any free cell on the field and puts a cross \u2018\u00d7\u2019 to it. If after the player\u2019s move<p></p>there are three crosses in a row, he wins.<p></p>You are given n. Find out who wins if both players play optimally.", "input_description": "The first line of input contains a single integer T, indicating the number of test case.\nFor each test case, there is a line containning one integer number n (3 <= n <= 2000).", "output_description": "For each test case, output \u20181\u2019 if the first player wins, or \u20182\u2019 if the second player does.", "samples": "[{\"input\": \"2\\n3\\n6\\n\", \"output\": \"1\\n2\"}]", "test_case_id": "1555", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 48, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1556, "fields": {"title": "All good things are yours", "description": "All good things are yours <p></p>Fear less,hope more;<p></p>Whine less,breathe more;<p></p>Talk less,say more;<p></p>Hate less,love more;<p></p>And all good things are yours.<p></p>--created by xiao bai<p></p>AC hava three friends,&quot;zhu shu&quot;,&quot;xiao bai&quot;,&quot;liu zhi yue&quot;.He wants to find their names from a lot of text.And your  task is to  label how many times does names apears?<p></p>", "input_description": "Each case contains several lines.And each lines contain a name.Ignoring the letter is upper letter or lower letter.\nA '*' stands for the end of a case.\nAnd '**' stands for the end of test.\n", "output_description": "Just print three numbers ,stands for the appear times of three names.", "samples": "[{\"input\": \"sample input\\n*\\n**\", \"output\": \"0 0 0\"}]", "test_case_id": "1556", "hint": "zhu shu\\nZHU SHU\\nZHU shu\\n\\n\\nABOVE ALL , NAMES.\\n\\n\\nzhushu ,NOT NAMES.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 385, "total_accepted_number": 143, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1559, "fields": {"title": "\u6570\u5b57\u6c42\u548c", "description": "\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570A\uff0c\u4ee5\u53ca\u53e6\u5916\u7684N\u4e2a\u6b63\u6574\u6570\uff0c\u6c42\u5728\u8fd9N\u4e2a\u6574\u6570\u4e2d\uff0c\u5c0f\u4e8eA\u7684\u6574\u6570\u7684\u548c\u662f\u591a\u5c11\u3002", "input_description": "\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T (0 < T < 50)\uff0c\u8868\u793a\u9700\u8981\u5904\u7406\u7684\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\u3002\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u5165\u5305\u62ec\u4e24\u884c\uff1a\n\u7b2c\u4e00\u884c\u662fA (0 < A < 100) \u548cN (0 < N < 100) \u4e24\u4e2a\u6b63\u6574\u6570\uff1b\n\u7b2c\u4e8c\u884c\u662fN\u4e2a\u5c0f\u4e8e100\u7684\u6b63\u6574\u6570\u3002\n", "output_description": "\u8f93\u51fa\u4e00\u884c\uff0c\u662fN\u4e2a\u6570\u4e2d\u5c0f\u4e8eA\u7684\u6570\u7684\u548c\u3002", "samples": "[{\"input\": \"1\\n10 5\\n1 2 3 4 11\", \"output\": \"10\"}]", "test_case_id": "1559", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1311, "total_accepted_number": 422, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1560, "fields": {"title": "test", "description": "test", "input_description": "test", "output_description": "test", "samples": "[{\"input\": null, \"output\": null}]", "test_case_id": "1560", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 18, "total_accepted_number": 9, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1561, "fields": {"title": "\u9e21\u5154\u95ee\u9898", "description": "<p>\u4e00\u4e2a\u7b3c\u5b50\u91cc\u9762\u5173\u4e86\u9e21\u548c\u5154\u5b50\uff08\u9e21\u67092\u53ea\u811a\uff0c\u5154\u5b50\u67094\u53ea\u811a\uff0c\u6ca1\u6709\u4f8b\u5916\uff09\u3002\u5df2\u7ecf\u77e5\u9053\u4e86\u7b3c\u5b50\u91cc\u9762\u811a\u7684\u603b\u6570a\uff0c\u95ee\u7b3c\u5b50\u91cc\u9762\u81f3\u5c11\u6709\u591a\u5c11\u53ea\u52a8\u7269\uff0c\u81f3\u591a\u6709\u591a\u5c11\u53ea\u52a8\u7269\u3002</p>", "input_description": "\u7b2c1\u884c\u662f\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570n (0 < n < 1000)\uff0c\u540e\u9762\u8ddf\u7740n\u884c\u8f93\u5165\u3002\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u53601\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6b63\u6574\u6570a (0 < a < 10^9)\u3002", "output_description": "\u8f93\u51fa\u5305\u542bn\u884c\uff0c\u6bcf\u884c\u5bf9\u5e94\u4e00\u4e2a\u8f93\u5165,\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u6700\u5c11\u7684\u52a8\u7269\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f\u6700\u591a\u7684\u52a8\u7269\u6570\uff0c\u4e24\u4e2a\u6b63\u6574\u6570\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u5f00 \n\u5982\u679c\u6ca1\u6709\u6ee1\u8db3\u8981\u6c42\u7684\u7b54\u6848\uff0c\u5219\u8f93\u51fa\u4e24\u4e2a0\u3002", "samples": "[{\"input\": \"2\\n3\\n20\", \"output\": \"0 0\\n5 10\"}]", "test_case_id": "1561", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-17T15:03:05.690Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1030, "total_accepted_number": 350, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 1562, "fields": {"title": "\u836f\u54c1\u8fd0\u8f93", "description": "5.12\u5927\u5730\u9707\u540e\uff0c\u67d0\u707e\u533a\u6025\u9700\u4e00\u6279\u836f\u54c1\uff0c\u73b0\u5728\u6709N\u79cd\u836f\u54c1\u9700\u8981\u8fd0\u5f80\u707e\u533a\uff0c\u800c\u6211\u4eec\u7684\u8fd0\u8f93\u80fd\u529b\u6709\u9650\uff0c\u73b0\u5728\u4ec5\u6709M\u8f86\u8fd0\u8f93\u8f66\u7528\u6765\u8fd0\u8f93\u8fd9\u6279\u836f\u54c1\uff0c\u5df2\u77e5\u4e0d\u540c\u7684\u836f\u54c1\u5bf9\u707e\u533a\u5177\u6709\u4e0d\u540c\u7684\u4f5c\u7528\uff08\u201c\u4f5c\u7528\u201d\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\u5176\u5927\u5c0f\uff09\uff0c\u4e0d\u540c\u7684\u836f\u54c1\u9700\u8981\u7684\u8fd0\u8f93\u529b\uff08\u5fc5\u8981\u7684\u8f66\u8f86\u8fd0\u8f7d\u529b\uff09\u4e0d\u540c\uff0c\u800c\u4e0d\u540c\u7684\u8f66\u8f86\u4e5f\u5177\u6709\u4e0d\u540c\u7684\u8fd0\u8f93\u529b\u3002\u540c\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u4e0d\u540c\u7684\u836f\u54c1\u7528\u4e0d\u540c\u7684\u8f66\u8f86\u6765\u8fd0\u8f93\uff08\u907f\u514d\u53d1\u751f\u6df7\u6dc6\uff09\u3002<p></p>\u73b0\u5728\u8bf7\u4f60\u5e2e\u5fd9\u8bbe\u8ba1\u4e00\u65b9\u6848\uff0c\u6765\u4f7f\u5f97\u8fd0\u5f80\u707e\u533a\u7684\u836f\u54c1\u5bf9\u707e\u533a\u7684\u4f5c\u7528\u6700\u5927\u3002", "input_description": "\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T\uff0c\u8868\u793a\u9700\u8981\u5904\u7406\u7684\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\u3002\u6bcf\u4e00\u7ec4\u7b2c\u4e00\u884c\u5305\u62ec\u4e24\u4e2a\u6574\u6570N,M\uff0c\u5206\u522b\u8868\u793a\u836f\u54c1\u603b\u6570\uff0c\u53ca\u8f66\u8f86\u603b\u6570\u3002\u63a5\u7740\u7b2c\u4e8c\u884c\u5305\u542bN\u4e2a\u6574\u6570\uff08pi<=10000\uff09\uff0c\u5206\u522b\u8868\u793a\u6bcf\u79cd\u836f\u54c1\u7684\u4f5c\u7528\u3002\u63a5\u7740\u7b2c\u4e09\u884c\u5305\u542bN\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u6bcf\u79cd\u836f\u54c1\u5fc5\u987b\u5f97\u8fd0\u8f7d\u529b(wi<=1000)\u3002\u63a5\u7740\u7b2c\u56db\u884c\u5305\u542bM\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6bcf\u8f86\u8f66\u7684\u8fd0\u8f93\u529b(c<=1000)\uff1b\uff08T<=10; N,M<=1000\uff09", "output_description": "\u8f93\u51fa\u5305\u62ecT\u884c\uff0c\u6bcf\u884c\u4ec5\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u7684\u4f5c\u7528\u503c\u3002", "samples": "[{\"input\": \"1\\n1 1\\n10\\n3\\n7\\n\", \"output\": \"10\"}]", "test_case_id": "1562", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 158, "total_accepted_number": 30, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1563, "fields": {"title": "\u56db\u8fb9\u5f62\u7684\u9762\u79ef", "description": "\u5982\u679c\u5df2\u77e5\u56db\u8fb9\u5f62\u7684\u56db\u4e2a\u9876\u70b9\u5750\u6807\uff0c\u4f60\u80fd\u8ba1\u7b97\u51fa\u5b83\u7684\u9762\u79ef\u5417\uff1f", "input_description": "\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570T\uff0c\u8868\u793a\u6709\u591a\u5c11\u4e2a\u56db\u8fb9\u5f62\u9700\u8981\u4f60\u8ba1\u7b97\u3002\u63a5\u7740T\u884c\uff0c\u6bcf\u884c\u8f93\u51658\u4e2a\u6574\u6570\uff0c\u8868\u793a\u56db\u8fb9\u5f62\u76844\u4e2a\u9876\u70b9\u5750\u6807\uff0cx1,y1,x2,y2,x3,y3,x4,y4\u3002\u5750\u6807\u6309\u987a\u65f6\u9488\u8f93\u5165.( T<=10; -1000<=x1,x2,x3,x4,y1,y2,y3,y4<=1000; )", "output_description": "\u8f93\u51fa\u5305\u62ecT\u884c\uff0c\u6bcf\u884c\u8f93\u51fa\u4e00\u4e2adouble\u578b\u503c\uff0c\u8868\u793a\u56db\u8fb9\u5f62\u7684\u9762\u79ef,\u4fdd\u7559\u4e09\u4f4d\u5c0f\u6570\u3002", "samples": "[{\"input\": \"1\\n0 0 0 1 1 1 1 0\\n\", \"output\": \"1.000\"}]", "test_case_id": "1563", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 598, "total_accepted_number": 166, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1564, "fields": {"title": "0,2\u8868\u793a\u6cd5", "description": "\u4efb\u4f55\u4e00\u4e2a\u6b63\u6574\u6570\u90fd\u53ef\u4ee5\u75282\u7684\u5e42\u6b21\u65b9\u8868\u793a.<p></p>\u4f8b\u5982:137=2^7+2^3+2^0<p></p>\u540c\u65f6\u7ea6\u5b9a\u6b21\u65b9\u7528\u62ec\u53f7\u6765\u8868\u793a,\u5373a^b\u53ef\u8868\u793a\u4e3aa(b)<p></p>\u7531\u6b64\u53ef\u77e5,137\u53ef\u8868\u793a\u4e3a:2(7)+2(3)+2(0)<p></p>\u8fdb\u4e00\u6b65:7=2^2+2+2^0(2^1\u75282\u8868\u793a)    3=2+2^0<p></p>\u6240\u4ee5\u6700\u540e137\u53ef\u8868\u793a\u4e3a:2(2(2)+2+2(0))+2(2+2(0))+2(0)<p></p>\u53c8\u5982:1315=2^10+2^8+2^5+2+1<p></p>\u6240\u4ee51315\u6700\u540e\u53ef\u8868\u793a\u4e3a:2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)", "input_description": "\u8f93\u5165\u5305\u62ec\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5360\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570N (0 < N < 10^60)\u3002\nN=0\u8868\u793a\u8f93\u5165\u7ed3\u675f\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u7b26\u5408\u7ea6\u5b9a\u7684N\u76840,2\u8868\u793a(\u5728\u8868\u793a\u4e2d\u4e0d\u80fd\u6709\u7a7a\u683c)\u3002", "samples": "[{\"input\": \"137\\n1315\\n0\", \"output\": \"2(2(2)+2+2(0))+2(2+2(0))+2(0)\\n2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)\"}]", "test_case_id": "1564", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 121, "total_accepted_number": 21, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1565, "fields": {"title": "\u56de\u6587\u6570", "description": "\u82e5\u4e00\u4e2a\u6570\uff08\u9996\u4f4d\u4e0d\u4e3a\u96f6\uff09\u4ece\u5de6\u5411\u53f3\u8bfb\u4e0e\u4ece\u53f3\u5411\u5de6\u8bfb\u90fd\u662f\u4e00\u6837\uff0c\u6211\u4eec\u5c31\u5c06\u5176\u79f0\u4e4b\u4e3a\u56de\u6587\u6570\u3002\u4f8b\u5982\uff1a\u7ed9\u5b9a\u4e00\u4e2a 10\u8fdb\u5236\u6570 56\uff0c\u5c06 56\u52a0 65\uff08\u5373\u628a56\u4ece\u53f3\u5411\u5de6\u8bfb\uff09\uff0c\u5f97\u5230 121\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002<p></p>\u53c8\u5982\uff0c\u5bf9\u4e8e10\u8fdb\u5236\u657087\uff1a<p></p>STEPl\uff1a 87\uff0b78= 165       STEP2\uff1a 165\uff0b561= 726<p></p>STEP3\uff1a 726\uff0b627\uff1d1353    STEP4\uff1a1353+3531=4884<p></p>\u5728\u8fd9\u91cc\u7684\u4e00\u6b65\u662f\u6307\u8fdb\u884c\u4e86\u4e00\u6b21N\u8fdb\u5236\u7684\u52a0\u6cd5\uff0c\u4e0a\u4f8b\u6700\u5c11\u7528\u4e864\u6b65\u5f97\u5230\u56de\u6587\u65704884\u3002<p></p>\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u7ed9\u5b9a\u4e00\u4e2aN\uff082\uff1cN\uff1c\uff1d16\uff0c\u9ad8\u4e8e10\u8fdb\u5236\u7684\u7528A-F\u8868\u793a\uff09\u8fdb\u5236\u6570M\uff0e\u6c42\u6700\u5c11\u7ecf\u8fc7\u51e0\u6b65\u53ef\u4ee5\u5f97\u5230\u56de\u6587\u6570\u3002", "input_description": "\u7b2c1\u884c\u662f\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570T\uff080\uff1cT\uff1c100\uff09\uff0c\u540e\u9762\u8ddf\u7740T\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u53601\u884c\uff0c\u5305\u62ec\u4e24\u4e2a\u6b63\u6574\u6570N\u548cM\uff0c\u7528\u7a7a\u683c\u5206\u5f00\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u6700\u5c11\u7684\u6b65\u6570\uff1b\u82e5\u572830\u6b65\u5185\uff08\u5305\u62ec30\u6b65\uff09\u5f97\u4e0d\u5230\u56de\u6587\u6570\uff0c\u5219\u8f93\u51fa\u201cImpossible\u201d\uff08\u4e0d\u5305\u62ec\u53cc\u5f15\u53f7\uff09\u3002", "samples": "[{\"input\": \"2\\n10 56\\n9 87\", \"output\": \"1\\n6\"}]", "test_case_id": "1565", "hint": "\u6ce8\u610f\uff1aM\u7684\u4f4d\u6570\u4e0d\u5927\u4e8e100\u4f4d\uff01", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 186, "total_accepted_number": 65, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1566, "fields": {"title": "\u8865\u5175", "description": "\u5728\u975e\u5e38\u6d41\u884c\u7684DOTA\u6e38\u620f\u4e2d\uff0c\u8865\u5175\u662f\u975e\u5e38\u91cd\u8981\u7684\u4e00\u79cd\u6280\u672f\u7edf\u8ba1\u3002\u5982\u679c\u4e00\u4e2a\u5355\u4f4d\u88ab\u5bf9\u65b9\u7684\u591a\u4e2a\u5355\u4f4d\u653b\u51fb\u81f3\u6b7b\uff0c\u5219\u5bf9\u8be5\u5355\u4f4d\u9020\u6210\u6700\u540e\u4e00\u6b21\uff08\u81f4\u547d\u7684\uff09\u4f24\u5bb3\u7684\u653b\u51fb\u8005\u5c06\u4f1a\u83b7\u5f97\u66f4\u591a\u7684\u5956\u52b1\uff08\u91d1\u94b1\u548c\u7ecf\u9a8c\uff09\uff0c\u8fd9\u540d\u653b\u51fb\u8005\u88ab\u8bb0\u5f55\u4e00\u6b21\u8865\u5175\u3002<p></p><p></p>\u73b0\u5728\u6709N\u4e2a\u4eba\uff08\u7f16\u53f7\u4e3a1\u30012\u3001...\u3001N\uff09\u653b\u51fb\u5bf9\u65b9\u7684\u4e00\u4e2a\u5355\u4f4d\u3002\u5047\u8bbe\u6bcf\u4eba\u6bcf\u6b21\u653b\u51fb\u7684\u4f24\u5bb3\u548c\u6bcf\u4e24\u6b21\u653b\u51fb\u4e4b\u95f4\u7684\u95f4\u9694\u90fd\u662f\u56fa\u5b9a\u7684\u3002\u8f93\u5165\u5c06\u7ed9\u51fa\u6bcf\u4e2a\u4eba\u4e24\u6b21\u653b\u51fb\u4e4b\u95f4\u7684\u95f4\u9694\u65f6\u95f4\uff0c\u5e76\u5047\u8bbe\u6bcf\u4e2a\u4eba\u7b2c\u4e00\u6b21\u653b\u51fb\u7684\u65f6\u523b\u503c\u5c31\u662f\u4ed6\u7684\u4e24\u6b21\u653b\u51fb\u4e4b\u95f4\u7684\u65f6\u95f4\u95f4\u9694\u503c\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u4eba\u653b\u51fb\u95f4\u9694\u4e3a2\uff0c\u5219\u4ed6\u4f1a\u5728\u65f6\u523b2\u30014\u30016\u30018\u2026\u2026\u8fdb\u884c\u653b\u51fb\u3002\u65f6\u95f4\u4ee5\u6574\u6570\u8ba1\u7b97\u3002<p></p><p></p>\u5982\u679c\u591a\u4e2a\u4eba\u540c\u65f6\u653b\u51fb\u5bfc\u81f4\u5bf9\u65b9\u6b7b\u4ea1\uff0c\u653b\u51fb\u4f24\u5bb3\u6700\u5927\u7684\u90a3\u4e2a\u88ab\u8bb0\u5f55\u4e00\u6b21\u8865\u5175\u3002\u5982\u679c\u653b\u51fb\u4f24\u5bb3\u6700\u5927\u7684\u4e0d\u6b62\u4e00\u4e2a\uff0c\u5219\u5176\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\u4eba\u88ab\u8bb0\u5f55\u4e00\u6b21\u8865\u5175\u3002<p></p><p></p>\u4e00\u4e2a\u5355\u4f4d\u8840\u91cf\u5c0f\u4e8e\u7b49\u4e8e0\u5c31\u88ab\u5224\u4e3a\u6b7b\u4ea1\u3002<p></p><p></p>\u4f60\u7684\u4efb\u52a1\u662f\u6c42\u51fa\u5bf9\u65b9\u5355\u4f4d\u6b7b\u4ea1\u7684\u65f6\u523b\u548c\u88ab\u8bb0\u5f55\u4e00\u6b21\u8865\u5175\u7684\u90a3\u4e2a\u4eba\u7684\u7f16\u53f7\u3002", "input_description": "\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570M (1 < M \u2264 100)\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\u3002\n\u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570N (2 \u2264 N \u2264 1000)\u548cH (1 < H \u2264 1000000)\uff0c\u8868\u793a\u653b\u51fb\u5bf9\u65b9\u67d0\u4e2a\u5355\u4f4d\u7684\u4eba\u6570\u548c\u5bf9\u65b9\u5355\u4f4d\u7684\u8840\u91cf\u3002\n\u63a5\u4e0b\u6765\u6709N\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u6bcf\u4e2a\u4eba\u6bcf\u6b21\u653b\u51fb\u7684\u4f24\u5bb3A (1 \u2264 A \u2264 100)\uff0c\u4ee5\u53ca\u6bcf\u4e24\u6b21\u653b\u51fb\u4e4b\u95f4\u7684\u95f4\u9694T (1 \u2264 T \u2264 100)\u3002", "output_description": "\u5bf9\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\uff0c\u5bf9\u65b9\u5355\u4f4d\u6b7b\u4ea1\u7684\u65f6\u523b\u548c\u88ab\u8bb0\u5f55\u4e00\u6b21\u8865\u5175\u7684\u90a3\u4e2a\u4eba\u7684\u7f16\u53f7\uff0c\u7528\u7a7a\u683c\u9694\u5f00\u3002", "samples": "[{\"input\": \"2\\n2 10\\n2 2\\n3 3\\n2 10\\n5 3\\n2 10\", \"output\": \"6 2\\n6 1\\n\"}]", "test_case_id": "1566", "hint": "\u8f93\u5165\u6570\u636e\u8f83\u591a\uff0c\u5c3d\u91cf\u7528scanf\u548cprintf\u4ee3\u66ffcin\u548ccout\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 214, "total_accepted_number": 31, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1567, "fields": {"title": "\u5c55\u89c8\u4f1a", "description": "\u67d0\u5c55\u89c8\u4f1a\u53c2\u5c55\u603b\u4eba\u6570\u4e3an\uff0c\u6bcf\u4eba\u5728\u4f1a\u573a\u7684\u505c\u7559\u65f6\u95f4\u4e3a[xi, yi)\uff0c\u5018\u82e5\u7b2ci\u4e2a\u4eba\u65f6\u523bt\u5728\u573a\u5185\uff0c\u5219\u6709xi &lt;= t &lt; yi\u3002\u6c42\u5c55\u89c8\u4f1a\u4f1a\u573a\u4e2d\u6700\u591a\u6709\u591a\u5c11\u4eba\u540c\u65f6\u5728\u573a\u3002", "input_description": "\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff1a\n\u7b2c\u4e00\u884c\u4e3a\u53c2\u5c55\u603b\u4eba\u6570n\uff0c1<=n<=1000\u3002 \n\u7b2c\u4e8c\u884c\u7684n\u4e2a\u6570\u662f\u8fd9n\u4e2a\u4eba\u7684\u5230\u8fbe\u65f6\u95f4xi\uff1b \n\u7b2c\u4e09\u884c\u7684n\u4e2a\u6570\u662f\u8fd9n\u4e2a\u4eba\u5bf9\u5e94\u7684\u79bb\u5f00\u65f6\u95f4yi\u3002 \n\u5176\u4e2dxi,yi\u662f\u4e0d\u8d85\u8fc710^9\u7684\u6b63\u6574\u6570\u3002 \nn=0\u8868\u793a\u8f93\u5165\u7ed3\u675f\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4f1a\u573a\u4e2d\u6700\u591a\u6709\u591a\u5c11\u4eba\u540c\u65f6\u5728\u573a\u3002\n", "samples": "[{\"input\": \"4\\n3 2 6 2\\n9 5 8 6\\n0\", \"output\": \"3\\n\"}]", "test_case_id": "1567", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 320, "total_accepted_number": 67, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1568, "fields": {"title": "Cantor\u8868", "description": "\u73b0\u4ee3\u6570\u5b66\u7684\u8457\u540d\u8bc1\u660e\u4e4b\u4e00\u662fGeorg Cantor\u8bc1\u660e\u4e86\u6709\u7406\u6570\u662f\u53ef\u679a\u4e3e\u7684\u3002\u4ed6\u662f\u7528\u4e0b\u9762\u8fd9\u4e00\u5f20\u8868\u6765\u8bc1\u660e\u8fd9\u4e00\u547d\u9898\u7684\uff1a<p></p>1/1  1/2  1/3  1/4  1/5 ...<p></p>2/1  2/2  2/3  2/4  ...<p></p>3/1  3/2  3/3  ...<p></p>4/1  4/2 ...<p></p>5/1<p></p>\u6211\u4eec\u4ee5z\u5b57\u578b\u7ed9\u4e0a\u8868\u7684\u6bcf\u4e00\u9879\u7f16\u53f7\u3002\u7b2c1\u9879\u662f1/1\uff0c\u7136\u540e\u662f1/2\uff0c2/1\uff0c3/1\uff0c2/2...\u3002 <p></p>\u95ee\u9898\u662f\uff0c\u7ed9\u5b9a\u6570\u5b57N(0 &lt; N &lt; 1000)\uff0c\u8f93\u51fa\u7b2cN\u9879\u3002", "input_description": "\u8f93\u5165\u5305\u62ec\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5360\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570N\u3002\nN=0\u8868\u793a\u8f93\u5165\u7ed3\u675f\u3002", "output_description": "\u8f93\u51fa\u82e5\u5e72\u884c\uff0c\u6bcf\u884c\u5bf9\u5e94\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u7ed3\u679c\u3002", "samples": "[{\"input\": \"1\\n2\\n0\", \"output\": \"1/1\\n1/2\"}]", "test_case_id": "1568", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 250, "total_accepted_number": 124, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1569, "fields": {"title": "\u8fde\u901a OR \u4e0d\u8fde\u901a", "description": "\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u4e00\u5171n\u4e2a\u70b9\uff0c\u8bf7\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5b9e\u73b0\u4e09\u79cd\u64cd\u4f5c\uff1a<p></p>E x   \u4ece\u539f\u56fe\u4e2d\u5220\u9664\u8fde\u63a5x\u8282\u70b9\u7684\u6240\u6709\u8fb9\u3002<p></p>D x y \u4ece\u539f\u56fe\u4e2d\u5220\u9664\u8fde\u63a5x\uff0cy\u8282\u70b9\u7684\u8fb9\u3002<p></p>Q x y \u8be2\u95eex\uff0cy\u8282\u70b9\u662f\u5426\u8fde\u901a\u3002", "input_description": "\u8f93\u5165\u53ea\u6709\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff1a\n\u7b2c\u4e00\u884c\u4e24\u4e2a\u6570n,m\uff085<=n<=40000,1<=m<=100000\uff09\n\u63a5\u4e0b\u6765m\u884c\uff0c\u6bcf\u884c\u4e00\u5bf9\u6574\u6570 x y \uff08x,y<=n\uff09,\u8868\u793ax,y\u4e4b\u95f4\u6709\u8fb9\u76f8\u8fde\u3002\u4fdd\u8bc1\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002\n\u63a5\u4e0b\u6765\u4e00\u884c\u4e00\u4e2a\u6574\u6570 q\uff08q<=100000\uff09\n\u4ee5\u4e0bq\u884c\u6bcf\u884c\u4e00\u79cd\u64cd\u4f5c\uff0c\u4fdd\u8bc1\u4e0d\u4f1a\u6709\u975e\u6cd5\u5220\u9664\u3002", "output_description": "\u6309\u8be2\u95ee\u6b21\u5e8f\u8f93\u51fa\u6240\u6709Q\u64cd\u4f5c\u7684\u56de\u7b54\uff0c\u8fde\u901a\u7684\u56de\u7b54Yes\uff0c\u4e0d\u8fde\u901a\u7684\u56de\u7b54No\u3002\n", "samples": "[{\"input\": \"3 3\\n1 2\\n1 3\\n2 3\\n5\\nQ 1 2\\nE 2\\nQ 1 3\\nD 3 1\\nQ 1 3\", \"output\": \"Yes\\nYes\\nNo\"}]", "test_case_id": "1569", "hint": "\u8f93\u5165\u6570\u636e\u8f83\u591a\uff0c\u5c3d\u91cf\u7528scanf\u548cprintf\u4ee3\u66ffcin\u548ccout\uff01", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 51, "total_accepted_number": 9, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1570, "fields": {"title": "\u9009\u4e3e", "description": "\u67d0\u5e02\u4e3e\u884c\u5e02\u957f\u9009\u4e3e\uff0c\u6709\u5019\u9009\u4ebaN\u4eba\uff08\u7f16\u53f71\u5230N\uff09\uff0c\u6709\u9009\u6c11M\u4eba\u3002\u6bcf\u4e2a\u9009\u6c11\u81f3\u5c11\u53ef\u4ee5\u4eceN\u4e2a\u5019\u9009\u4eba\u4e2d\u9009\u62e91\u4eba\uff0c\u4e14\u81f3\u591a\u9009\u62e9\u540c\u4e00\u5019\u9009\u4eba\u4e00\u6b21\u3002\u73b0\u5728\u7ed9\u4f60\u6bcf\u4e2a\u9009\u6c11\u7684\u9009\u62e9\uff0c\u8bf7\u4f60\u7edf\u8ba1\u51fa\u6700\u540e\u7684\u83b7\u80dc\u8005\uff08\u6570\u636e\u4fdd\u8bc1\u6ca1\u6709\u5e73\u5c40\u51fa\u73b0\uff0c\u5373\u5fc5\u6709\u4e00\u4eba\u5f97\u7968\u6700\u591a\uff09\u3002", "input_description": "\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T<=10\uff0c\u8868\u793a\u9700\u8981\u5904\u7406\u7684\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\u3002\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u5305\u62ec\u4e24\u4e2a\u6574\u6570N,M\uff08N,M<=100\uff09\u3002\u63a5\u7740M\u884c\u6bcf\u884c\u8f93\u5165\u591a\u4e2a\u6574\u6570\uff08\u4ee50\u8868\u793a\u7ed3\u675f\uff09\uff0c\u5206\u522b\u8868\u793a\u6bcf\u4e2a\u9009\u6c11\u7684\u9009\u62e9\u3002", "output_description": "\u8f93\u51fa\u5305\u62ecT\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u83b7\u80dc\u8005\u7684\u7f16\u53f7\u3002", "samples": "[{\"input\": \"1\\n2 1\\n1 0\", \"output\": \"1\"}]", "test_case_id": "1570", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 364, "total_accepted_number": 137, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1571, "fields": {"title": "\u548c\u6570", "description": "\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u5224\u65ad\u5176\u4e2d\u6709\u591a\u5c11\u4e2a\u6570\uff0c\u7b49\u4e8e\u6570\u5217\u4e2d\u5176\u4ed6\u4e24\u4e2a\u6570\u7684\u548c\u3002 \u6bd4\u5982\uff0c\u5bf9\u4e8e\u6570\u52171 2 3 4, \u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u5c31\u662f2, \u56e0\u4e3a3 = 2 + 1, 4 = 1 + 3\u3002", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T\uff0c\u8868\u793a\u4e00\u5171\u6709\u591a\u5c11\u7ec4\u6570\u636e\u3002 1<= T <= 50\n\u63a5\u4e0b\u6765\u7684\u6bcf\u7ec4\u6570\u636e\u5171\u4e24\u884c\uff0c\u7b2c\u4e00\u884c\u662f\u6570\u5217\u4e2d\u6570\u7684\u4e2a\u6570n ( 1 <= n <= 100)\uff0c\u7b2c\u4e8c\u884c\u662f\u7531n\u4e2a\u6574\u6570\u7ec4\u6210\u7684\u6570\u5217\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff08\u5360\u4e00\u884c\uff09\uff0c\u5c31\u662f\u6570\u5217\u4e2d\u7b49\u4e8e\u5176\u4ed6\u4e24\u4e2a\u6570\u4e4b\u548c\u7684\u6570\u7684\u4e2a\u6570\u3002", "samples": "[{\"input\": \"2\\n4\\n1 2 3 4\\n5\\n3 5 7 9 10\\n\", \"output\": \"2\\n1\"}]", "test_case_id": "1571", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 528, "total_accepted_number": 97, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1572, "fields": {"title": "\u96c6\u5408\u7684\u4ea4\u4e0e\u5e76", "description": "\u5df2\u77e5\u6709\u4e24\u4e2a\u6b63\u6574\u6570\u96c6\u5408A,B\uff1b\u8bf7\u4f60\u8ba1\u7b97\u51faA\uff0cB\u7684\u4ea4\u96c6\uff0c\u4ee5\u53ca\u5e76\u96c6\u3002", "input_description": "\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T<=10\uff0c\u8868\u793a\u9700\u8981\u5904\u7406\u7684\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\u3002\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570na\uff0c\u8868\u793a\u96c6\u5408A\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u7b2c\u4e8c\u884c\u5305\u542bna\u4e2a\u6b63\u6574\u6570\uff08<=1000\uff09\uff0c\u7b2c\u4e09\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570nb\uff0c\u8868\u793a\u96c6\u5408B\u7684\u5143\u7d20\uff0c\u7b2c\u56db\u884c\u5305\u542bnb\u4e2a\u6b63\u6574\u6570\uff08<=1000\uff09\u3002", "output_description": "\u8f93\u51fa\u5305\u62ecT\u7ec4\uff0c\u6bcf\u7ec4\u5305\u542b2\u4e24\u884c\uff0c\u7b2c\u4e00\u884c\u8f93\u51faA\u4e0eB\u7684\u4ea4\u96c6\u5143\u7d20\uff0c\u4ee5\u7a7a\u683c\u9694\u5f00\uff0c\u7b2c\u4e8c\u884c\u8f93\u51faA\u4e0eB\u7684\u5e76\u96c6\u5143\u7d20\uff0c\u540c\u6837\u4ee5\u7a7a\u683c\u9694\u5f00\u3002\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u8f93\u51fa\u3002", "samples": "[{\"input\": \"1\\n3\\n1 2 3\\n4\\n1 2 5 6\", \"output\": \"1 2\\n1 2 3 5 6\"}]", "test_case_id": "1572", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 445, "total_accepted_number": 142, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1573, "fields": {"title": "\u4e0d\u8d1f\u8d23\u7684\u4fdd\u7ba1\u4eba", "description": "N\u4e2a\u4eba\u5728\u8fdb\u5165\u9910\u9986\u65f6\u5404\u5bc4\u5b58\u4e86\u4e00\u9876\u5e3d\u5b50\u548c\u4e00\u628a\u96e8\u4f1e\u3002\u5f53\u4ed6\u4eec\u53bb\u53d6\u81ea\u5df1\u7684\u4e1c\u897f\u65f6\uff0c\u4fdd\u7ba1\u4eba\u4e0d\u8d1f\u8d23\u4efb\u5730\u968f\u4fbf\u7ed9\u4ed6\u4eec\u6bcf\u4eba\u4e00\u9876\u5e3d\u5b50\u548c\u4e00\u628a\u96e8\u4f1e\u3002<p></p>\u95ee\u6ca1\u6709\u4e00\u4e2a\u4eba\u5f97\u5230\u7684\u4e24\u6837\u4e1c\u897f\u90fd\u662f\u4ed6\u672c\u4eba\u7684\u60c5\u51b5\u6709\u591a\u5c11\u79cd\u3002\u7531\u4e8e\u8fd9\u4e2a\u6570\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u5176\u9664M\u540e\u5f97\u5230\u7684\u4f59\u6570\u5373\u53ef\u3002", "input_description": "\u8f93\u5165\u7684\u7b2c\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570T\uff0c \u8868\u793a\u6709\u591a\u5c11\u4e2a\u6d4b\u8bd5\u70b9\u3002\n\u63a5\u4e0b\u6765\u6709T\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570N\u548cM(0 < N,M <= 10000)\uff0c\u8868\u793a\u8fdb\u5165\u9910\u9986\u7684\u4eba\u6570\u3002", "output_description": "\u8f93\u51fa\u5305\u62ecT\u884c\uff0c\u6bcf\u884c\u5bf9\u6620\u4e00\u4e2a\u6d4b\u8bd5\u70b9\u3002", "samples": "[{\"input\": \"2\\n1 37\\n2 37\", \"output\": \"0\\n3\"}]", "test_case_id": "1573", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 92, "total_accepted_number": 20, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1574, "fields": {"title": "\u7ebf\u6bb5\u5220\u9664", "description": "\u6570\u8f74\u4e0a\u6709n\u6761\u7ebf\u6bb5\uff0c\u4e3a\u4e86\u4f7f\u5269\u4e0b\u7684\u7ebf\u6bb5\u4e0d\u91cd\u53e0\uff0c\u81f3\u5c11\u8981\u53bb\u9664\u51e0\u6761\u7ebf\u6bb5\uff1f", "input_description": "\u591a\u7ec4\u8f93\u5165\uff0c\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570T\u8868\u793a\u7ec4\u6570\u3002\n\u6bcf\u7ec4\u7b2c\u4e00\u884c\u6709\u4e00\u4e2a\u6b63\u6574\u6570n\uff0c1\u2264n\u226410000\u8868\u793a\u7ebf\u6bb5\u4e2a\u6570\u3002\n\u63a5\u4e0b\u6765\u7b2cn\u884c\uff0c\u6bcf\u884c\u6709\u4e24\u4e2a\u6574\u6570s,f\uff080 < s < f < 1000000\uff09\u8868\u793a\u4e00\u6761\u7ebf\u6bb5\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u8f93\u5165\uff0c\u8f93\u51fa\u81f3\u5c11\u8981\u53bb\u9664\u7ebf\u6bb5\u4e2a\u6570\u3002", "samples": "[{\"input\": \"1\\n3\\n1 5\\n1 3\\n3 4\", \"output\": \"1\"}]", "test_case_id": "1574", "hint": "\u8f93\u5165\u6570\u636e\u8f83\u591a\uff0c\u5c3d\u91cf\u7528scanf\u548cprintf\u4ee3\u66ffcin\u548ccout\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 67, "total_accepted_number": 18, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1575, "fields": {"title": "\u78b0\u649e\u68c0\u6d4b", "description": "\u7ed9\u51fa\u7a7a\u95f4\u4e0a\u4e24\u4e2a\u8fd0\u52a8\u7684\u5c0f\u7403\uff0c\u7403\u5fc3\u5750\u6807\u5728\u5206\u522b\u662fA(xa , ya , 0)\uff0cB(xb , yb , 0)\uff0c\u534a\u5f84\u5206\u522b\u4e3aRa , Rb\uff0c\u901f\u5ea6\u5206\u522b\u4e3aVa( vax, vay , 0), Vb( vbx , vby, 0)\u3002<p></p>\u5224\u65ad\u4e24\u4e2a\u5c0f\u7403\u662f\u5426\u4f1a\u78b0\u649e\uff0c\u82e5\u4f1a\u78b0\u649e\uff0c\u8f93\u51fa\u9996\u6b21\u78b0\u649e\u65f6\u7684\u65f6\u523b\u548c\u4e24\u4e2a\u5c0f\u7403\u7684\u5750\u6807\uff1b\u82e5\u4e0d\u4f1a\u78b0\u649e\uff0c\u8f93\u51fa\u201cImpossible\u201d\uff08\u7403\u5fc3\u548c\u901f\u5ea6\u7684z\u5750\u6807\u6052\u4e3a0\uff0c\u53ef\u5c06\u672c\u9898\u89c6\u4e3a\u53ea\u662f\u5e73\u9762\u4e0a\u7684\u8fd0\u52a8\u3002\u521d\u59cb\u65f6\u523b\u4e3a0\uff0c\u82e5\u521d\u59cb\u65f6\u523b\u5c0f\u7403\u8d34\u5728\u4e00\u8d77\uff0c\u89c6\u4e3a\u9996\u6b21\u78b0\u649e\uff09\u3002", "input_description": "\u7b2c\u4e00\u884c\uff1a\u4e00\u4e2a\u6574\u6570T\uff0c\uff08T \u2264 30\uff09\uff0c\u8868\u793a\u4e0b\u9762\u6709T\u7ec4\u6570\u636e\u3002\n\u63a5\u4e0b\u6765\uff0c\u6bcf\u4e24\u884c\u7ec4\u6210\u4e00\u7ec4\u6570\u636e\uff0c\u9996\u884c\u5305\u542b5\u4e2a\u5b9e\u6570\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u4f9d\u6b21\u662fxa , ya , vax, vay , Ra\uff0c\u4e0b\u9762\u4e00\u884c\u4e5f\u5305\u542b5\u4e2a\u5b9e\u6570\uff0c\u4f9d\u6b21\u662fxa , ya , vbx , vby, Rb\u3002\u6bcf\u7ec4\u6570\u636e\u4e4b\u95f4\u6709\u4e00\u4e2a\u7a7a\u884c\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u5982\u679c\u4e24\u4e2a\u5c0f\u7403\u4f1a\u78b0\u649e\uff0c\u8f93\u51fa\u9996\u6b21\u78b0\u649e\u65f6\u7684\u65f6\u523bt\uff0c\u548c\u4e24\u4e2a\u5c0f\u7403\u7684\u5750\u6807xap , yap , xbp , ybp \uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u4fdd\u7559\u4e09\u4f4d\u5c0f\u6570\u3002\u5982\u679c\u4e0d\u80fd\uff0c\u8f93\u51fa\u201cImpossible\u201d\u3002", "samples": "[{\"input\": \"3\\n100 200 0 0 55\\n100 100 0 0 45\\n\\n131 123 45 2 43\\n454 230 0 -5 35\\n\\n100 100 1 1 31\\n200 200 2 2 23\", \"output\": \"0.000 100.000 200.000 100.000 100.000\\n6.179 409.053 135.358 454.000 199.105\\nImpossible\\n\"}]", "test_case_id": "1575", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 78, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1576, "fields": {"title": "\u5747\u5206\u7eb8\u724c", "description": "\u6709 N \u5806\u7eb8\u724c\uff0c\u7f16\u53f7\u5206\u522b\u4e3a 1\uff0c2\uff0c\u2026, N\u3002\u6bcf\u5806\u4e0a\u6709\u82e5\u5e72\u5f20\uff0c\u4f46\u7eb8\u724c\u603b\u6570\u5fc5\u4e3a N \u7684\u500d\u6570\u3002\u53ef\u4ee5\u5728\u4efb\u4e00\u5806\u4e0a\u53d6\u82e5\u5e72\u5f20\u7eb8\u724c\uff0c\u7136\u540e\u79fb\u52a8\u3002<p></p>\u79fb\u724c\u89c4\u5219\u4e3a\uff1a\u5728\u7f16\u53f7\u4e3a 1 \u5806\u4e0a\u53d6\u7684\u7eb8\u724c\uff0c\u53ea\u80fd\u79fb\u5230\u7f16\u53f7\u4e3a 2 \u7684\u5806\u4e0a\uff1b\u5728\u7f16\u53f7\u4e3a N \u7684\u5806\u4e0a\u53d6\u7684\u7eb8\u724c\uff0c\u53ea\u80fd\u79fb\u5230\u7f16\u53f7\u4e3a N-1 \u7684\u5806\u4e0a\uff1b\u5176\u4ed6\u5806\u4e0a\u53d6\u7684\u7eb8\u724c\uff0c\u53ef\u4ee5\u79fb\u5230\u76f8\u90bb\u5de6\u8fb9\u6216\u53f3\u8fb9\u7684\u5806\u4e0a\u3002<p></p>\u73b0\u5728\u8981\u6c42\u627e\u51fa\u4e00\u79cd\u79fb\u52a8\u65b9\u6cd5\uff0c\u7528\u6700\u5c11\u7684\u79fb\u52a8\u6b21\u6570\u4f7f\u6bcf\u5806\u4e0a\u7eb8\u724c\u6570\u90fd\u4e00\u6837\u591a\u3002<p></p>\u4f8b\u5982 N=4\uff0c4 \u5806\u7eb8\u724c\u6570\u5206\u522b\u4e3a\uff1a<p></p>\u2460\u30009\u3000\u2461\u30008\u3000\u2462\u300017\u3000\u2463\u30006<p></p>\u79fb\u52a83\u6b21\u53ef\u8fbe\u5230\u76ee\u7684\uff1a<p></p>\u4ece \u2462 \u53d6 4 \u5f20\u724c\u653e\u5230 \u2463 \uff089 8 13 10\uff09 -&gt; \u4ece \u2462 \u53d6 3 \u5f20\u724c\u653e\u5230 \u2461\uff089 11 10 10\uff09-&gt; \u4ece \u2461 \u53d6 1 \u5f20\u724c\u653e\u5230\u2460\uff0810 10 10 10\uff09\u3002", "input_description": "\u8f93\u5165\u7684\u7b2c\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570T\uff0c \u8868\u793a\u6709\u51e0\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u5176\u683c\u5f0f\u5982\u4e0b\uff1a\nN\uff08N \u5806\u7eb8\u724c\uff0c1 <= N <= 100\uff09\nA1 A2 \u2026 An \uff08N \u5806\u7eb8\u724c\uff0c\u6bcf\u5806\u7eb8\u724c\u521d\u59cb\u6570\uff0cl<= Ai <=10000\uff09", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\uff0c\u5305\u62ec\u4e00\u4e2a\u6574\u6570\uff0c\u5373\u6240\u6709\u5806\u5747\u8fbe\u5230\u76f8\u7b49\u65f6\u7684\u6700\u5c11\u79fb\u52a8\u6b21\u6570\u3002", "samples": "[{\"input\": \"1\\n4\\n9 8 17 6\", \"output\": \"3\"}]", "test_case_id": "1576", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 118, "total_accepted_number": 64, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1577, "fields": {"title": "\u6570\u5b57\u68af\u5f62", "description": "\u7ed9\u5b9a\u4e00\u4e2a\u7531n \u884c\u6570\u5b57\u7ec4\u6210\u7684\u6570\u5b57\u68af\u5f62\u5982\u4e0b\u56fe\u6240\u793a\u3002\u68af\u5f62\u7684\u7b2c\u4e00\u884c\u6709m\u4e2a\u6570\u5b57\u3002\u4ece\u68af\u5f62\u7684\u9876\u90e8\u7684m\u4e2a\u6570\u5b57\u5f00\u59cb\uff0c\u5728\u6bcf\u4e2a\u6570\u5b57\u5904\u53ef\u4ee5\u6cbf\u5de6\u4e0b\u6216\u53f3\u4e0b\u65b9\u5411\u79fb\u52a8\uff0c\u5f62\u6210\u4e00\u6761\u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684\u8def\u5f84\u3002<p></p>\u89c4\u52191\uff1a\u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684m\u6761\u8def\u5f84\u4e92\u4e0d\u76f8\u4ea4\u3002<p></p>\u89c4\u52192\uff1a\u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684m\u6761\u8def\u5f84\u4ec5\u5728\u6570\u5b57\u7ed3\u70b9\u5904\u76f8\u4ea4\u3002<p></p>\u89c4\u52193\uff1a\u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684m\u6761\u8def\u5f84\u5141\u8bb8\u5728\u6570\u5b57\u7ed3\u70b9\u76f8\u4ea4\u6216\u8fb9\u76f8\u4ea4\u3002<p></p>2 3<p></p>3 4 5<p></p>9 10 9 1<p></p>1 1 10 1 1<p></p>1 1 10 12 1 1<p></p>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6570\u5b57\u68af\u5f62\uff0c\u5206\u522b\u6309\u7167\u89c4\u52191\uff0c\u89c4\u52192\uff0c\u548c\u89c4\u52193 \u8ba1\u7b97\u51fa\u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684m\u6761\u8def\u5f84\uff0c\u4f7f\u8fd9m\u6761\u8def\u5f84\u7ecf\u8fc7\u7684\u6570\u5b57\u603b\u548c\u6700\u5927\u3002", "input_description": "\u7b2c1\u884c\u4e2d\u67092\u4e2a\u6b63\u6574\u6570m\u548cn\uff08m,n<=30\uff09\uff0c\u5206\u522b\u8868\u793a\u6570\u5b57\u68af\u5f62\u7684\u7b2c\u4e00\u884c\u6709m\u4e2a\u6570\u5b57\uff0c\u5171\u6709n\u884c\u3002\u63a5\u4e0b\u6765\u7684n\u884c\u662f\u6570\u5b57\u68af\u5f62\u4e2d\u5404\u884c\u7684\u6570\u5b57\u3002 \u7b2c1\u884c\u6709m\u4e2a\u6570\u5b57\uff0c\u7b2c2\u884c\u6709m+1 \u4e2a\u6570\u5b57\uff0c\u2026\u3002", "output_description": "\u8f93\u51fa\u5305\u62ec\u4e09\u884c\uff0c\u5206\u522b\u4e3a\u6309\u7167\u89c4\u52191\uff0c\u89c4\u52192\uff0c\u548c\u89c4\u52193 \u8ba1\u7b97\u51fa\u7684\u6700\u5927\u6570\u5b57\u603b\u548c\u3002", "samples": "[{\"input\": \"2 5\\n2 3\\n3 4 5\\n9 10 9 1\\n1 1 10 1 1\\n1 1 10 12 1 1\", \"output\": \"66\\n75\\n77\"}]", "test_case_id": "1577", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 115, "total_accepted_number": 28, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1578, "fields": {"title": "\u5c40\u57df\u7f51", "description": "\u67d0\u4e2a\u5c40\u57df\u7f51\u5185\u6709n(n\u2264100)\u53f0\u8ba1\u7b97\u673a(\u7f16\u53f7\u4e3a1..n)\uff0c\u7531\u4e8e\u642d\u5efa\u5c40\u57df\u7f51\u65f6\u5de5\u4f5c\u4eba\u5458\u7684\u758f\u5ffd\uff0c\u73b0\u5728\u5c40\u57df\u7f51\u5185\u7684\u8fde\u63a5\u5f62\u6210\u4e86\u56de\u8def\uff0c\u6211\u4eec\u77e5\u9053\u5982\u679c\u5c40\u57df\u7f51\u5f62\u6210\u56de\u8def\u90a3\u4e48\u6570\u636e\u5c06\u4e0d\u505c\u7684\u5728\u56de\u8def\u5185\u4f20\u8f93\uff0c\u9020\u6210\u7f51\u7edc\u5361\u7684\u73b0\u8c61\u3002\u56e0\u4e3a\u8fde\u63a5\u8ba1\u7b97\u673a\u7684\u7f51\u7ebf\u672c\u8eab\u4e0d\u540c\uff0c\u6240\u4ee5\u6709\u4e00\u4e9b\u8fde\u7ebf\u4e0d\u662f\u5f88\u7545\u901a\uff0c\u6211\u4eec\u7528f(i,j)\u8868\u793ai,j\u4e4b\u95f4\u8fde\u63a5\u7684\u7545\u901a\u7a0b\u5ea6(f(i,j)=1000)\uff0cf(i,j)\u503c\u8d8a\u5c0f\u8868\u793ai,j\u4e4b\u95f4\u8fde\u63a5\u8d8a\u901a\u7545\uff0cf(i,j)\u4e3a0\u8868\u793ai,j\u4e4b\u95f4\u65e0\u7f51\u7ebf\u8fde\u63a5\u3002\u73b0\u5728\u6211\u4eec\u9700\u8981\u89e3\u51b3\u56de\u8def\u95ee\u9898\uff0c\u6211\u4eec\u5c06\u9664\u53bb\u4e00\u4e9b\u8fde\u7ebf\uff0c\u4f7f\u5f97\u7f51\u7edc\u4e2d\u6ca1\u6709\u56de\u8def\uff0c\u5e76\u4e14\u88ab\u9664\u53bb\u7f51\u7ebf\u7684\u03a3f(i,j)\u6700\u5927\uff0c\u8bf7\u6c42\u51fa\u8fd9\u4e2a\u6700\u5927\u503c\u3002", "input_description": "\u7b2c\u4e00\u884c\uff1a\u4e00\u4e2a\u6574\u6570T\uff0c\uff08T \u2264 60\uff09\uff0c\u8868\u793a\u4e0b\u9762\u6709T\u7ec4\u6570\u636e\u3002\n\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff1a\n\u7b2c\u4e00\u884c\u4e24\u4e2a\u6b63\u6574\u6570n k\uff1b\n\u63a5\u4e0b\u6765\u7684k\u884c\u6bcf\u884c\u4e09\u4e2a\u6b63\u6574\u6570i j m\u8868\u793ai,j\u4e24\u53f0\u8ba1\u7b97\u673a\u4e4b\u95f4\u6709\u7f51\u7ebf\u8054\u901a\uff0c\u901a\u7545\u7a0b\u5ea6\u4e3am\n\u6bcf\u7ec4\u6570\u636e\u524d\u9762\u6709\u4e00\u4e2a\u7a7a\u884c\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u03a3f(i,j)\u7684\u6700\u5927\u503c\u3002", "samples": "[{\"input\": \"1\\n\\n5 5\\n1 2 8\\n1 3 1\\n1 5 3\\n2 4 5\\n3 4 2\", \"output\": \"8\"}]", "test_case_id": "1578", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 64, "total_accepted_number": 25, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1579, "fields": {"title": "\u52a0\u53f7\u95ee\u9898", "description": "\u6709\u4e00\u4e2a\u7531\u6570\u5b571\uff0c2\uff0c... \uff0c9 \u7ec4\u6210\u7684\u6570\u5b57\u4e32\uff08\u957f\u5ea6\u4e0d\u8d85\u8fc7200\uff09\uff0c\u95ee\u5982\u4f55\u5c06M(M&lt;=20)\u4e2a\u52a0\u53f7(&quot;+&quot;)\u63d2\u5165\u5230\u8fd9\u4e2a\u6570\u5b57\u4e32\u4e2d\uff0c\u4f7f\u6240\u5f62\u6210\u7684\u7b97\u672f\u8868\u8fbe\u5f0f\u7684\u503c\u6700\u5c0f\u3002\u8bf7\u7f16\u4e00\u4e2a\u7a0b\u5e8f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002<p></p>\u6ce8\u610f\uff1a<p></p>\u52a0\u53f7\u4e0d\u80fd\u52a0\u5728\u6570\u5b57\u4e32\u7684\u6700\u524d\u9762\u6216\u6700\u672b\u5c3e\uff0c\u4e5f\u4e0d\u5e94\u6709\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u52a0\u53f7\u76f8\u90bb\u3002<p></p>M \u4fdd\u8bc1\u5c0f\u4e8e\u6570\u5b57\u4e32\u7684\u957f\u5ea6\u3002<p></p>\u4f8b\u5982\uff1a\u6570\u5b57\u4e3279846\uff0c\u82e5\u9700\u8981\u52a0\u5165\u4e24\u4e2a\u52a0\u53f7\uff0c\u5219\u6700\u4f73\u65b9\u6848\u4e3a79+8+46\uff0c\u7b97\u672f\u8868\u8fbe\u5f0f\u7684\u503c133\u3002", "input_description": "\u7b2c\u4e00\u884c\uff1a\u4e00\u4e2a\u6574\u6570T\uff0c\uff08T \u2264 30\uff09\uff0c\u8868\u793a\u4e0b\u9762\u6709T\u7ec4\u6570\u636e\u3002\n\u6bcf\u7ec4\u6570\u636e\uff0c\u5305\u62ec\u4e00\u884c\uff0c\u6570\u5b57\u4e32\u548cM (1 <= M <= 20)\uff0c\u4e2d\u95f4\u7531\u7a7a\u683c\u9694\u5f00\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u6240\u6c42\u5f97\u7684\u6700\u5c0f\u548c\u3002", "samples": "[{\"input\": \"2\\n82363983742 3\\n587326416528286341862875227425643567641371564188534373438365277458185152766271163833 3\", \"output\": \"2170\\n2368629071356894927433\"}]", "test_case_id": "1579", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 26, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1581, "fields": {"title": "Same or Different", "description": "Give you two ring necklaces. Each necklace consists of many pearls whose colours are different. Could you tell if the necklaces are same?", "input_description": "The first line of input contain a single integer T, indicats the number of test cases.\nEach test case have two lines, each line contain a string, indicate a necklace, different character stand for different colors.  Strings will be composed only from lowercase letters, the length of each string will be at least 1 and at most 600,000 characters.\nThere is a blank line before each test case.\n", "output_description": "For each test case, print \"same\" if the two necklace are same, or \"different\".", "samples": "[{\"input\": \"2\\n\\nabc\\nbca\\n\\nabcde\\ncdeba\\n\", \"output\": \"same\\ndifferent\"}]", "test_case_id": "1581", "hint": "We consider the necklace &quot;abcd&quot; and &quot;cdab&quot; are same.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 130, "total_accepted_number": 47, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1583, "fields": {"title": "Sample Collections", "description": "In a robot game, all the robots will collect as many samples as possible in a n\u00d7n squares. Each sample in these squares has a value, but not all the square has samples. A robot will move down or right from left top square named A to the right bottom square named B. On the way from A to B, it can collect the samples as many as possible. And in order to collect enough samples, it can walk two times from A to B. Once the sample is collected, the sample in the square is disappeared. ", "input_description": "Input includes a number of test cases. First line of each test case is an integer number n (n\u2264100), which implies the n\u00d7n squares, the following lines is the position of the samples and its value. Each line includes three integers. The first two integers are the position of the sample in the square. Suppose the position of the left top square is 1,1, and the position of the right bottom square is n, n. The last integer in this line is the value of the sample. The last line is 0,0,0, which implies the end of this test case.", "output_description": "Output an integer for each test case, which is the maximum value of the samples the robot has collected. Each output for a test case contains one line.", "samples": "[{\"input\": \"8\\n2 3 13\\n2 6 6\\n3 5 7\\n4 4 14\\n5 2 21\\n5 6 4\\n6 3 15\\n7 2 14\\n0 0 0\\n\", \"output\": \"67\\n\"}]", "test_case_id": "1583", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 84, "total_accepted_number": 22, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1584, "fields": {"title": "Line up", "description": "A square is divided into m\u00d7m litter squares, a number of soldiers stand on these little squares. They can move up, down, left or right from one square to another. But on a time, a square can only have one solider. According the command of the officer, they should line up on horizon by moving the least steps. If they choose a suitable position x, y, they could find the least steps.", "input_description": "Input includes a number of test cases. First line of each test case is an integer number n(1\u2264n\u226410,000), which implies the number of the soldiers. The following n lines is the position of the soldiers, which includes two integer numbers x, y, where -10,000\u2264x,y\u226410,000.", "output_description": "Output the least steps needed for the soldiers to line up. Each output contains a line.", "samples": "[{\"input\": \"5\\n1 2\\n2 2\\n1 3\\n3 -2\\n3 3\\n3\\n-4 -3\\n-4 5\\n5 2\\n\", \"output\": \"8\\n16\\n\"}]", "test_case_id": "1584", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 29, "total_accepted_number": 18, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1585, "fields": {"title": "Climbing mountain", "description": "In a game of climbing mountain for robots, Robot can take some limited energies. In fact, the higher the robot climbs, the more energy the robot will use, which leads to the decrease of the speed when robot continue to climb. Now a number of robots are used to take a relay race. Each robot can climb 1 to km at each time, the total height of the mountain is m, each robot can only be used at one time and they can only climb integer height at each time. If you arrange these robots correctly, they may take a least time to climb this mountain. Could you write a program to help them?", "input_description": "Input includes a number of test cases. First line of each test case are three integers n, k and m, where n is robots number, k is the height each robot can climb, m is the total height of the mountain. The following n lines imply the time the robots will take to climb 1 to k meter. Each line includes k integers, the ith(1\u2264 i \u2264k) integer is the time the robot will take to climb height i. ", "output_description": "Output the least time the robots will take to climb the mountain.", "samples": "[{\"input\": \"5 10 25 \\n24 49 75 102 130 160 192 230 270 320 \\n23 48 75 103 139 181 224 274 344 415 \\n22 49 80 180 280 380 480 580 680 780 \\n25 51 80 120 170 220 270 320 370 420 \\n23 49 79 118 158 200 250 300 350 400\\n\", \"output\": \"727\\n\"}]", "test_case_id": "1585", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 97, "total_accepted_number": 34, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1586, "fields": {"title": "Space Flight", "description": "Professor W is designing a space flight for the National Space Center. For each space flight, the space center can gain some profits through space experiment for some enterprises. For each experiment, they may use some equipment, suppose I1 to In, For the equipment Ik, the correspondent cost to buy it is ck, and the enterprise agree to pay pk dollars to do such experiment. As you know, the Space center wants to make more profits through these experiments. If you arrange these experiments correctly, the space center can make a lot of money, could you write a program to help Professor W?", "input_description": "Input includes a number of test cases. First line of each test case are two integers m and n, where m is the number of experiments the enterprises want to do, n is the number of equipments they should use to do these experiments. The following m lines are the data related with the experiments. The first integer of each line is the cost the enterprise is willing to spending; the integer left in this line is the serial number of the equipment the experiment will use. The last line of each test case is three integers, which implies the cost to buy these equipments.", "output_description": "For each test case, you should output three lines. The first line is the serial number of the experiment the space center wants to do, the second line is the serial number of the equipment they have to buy if they want to do these experiments, the last line is the profits they will gain.", "samples": "[{\"input\": \"2 3\\n10 1 2\\n25 2 3\\n5 6 7\\n\", \"output\": \"1 2\\n1 2 3\\n17\\n\"}]", "test_case_id": "1586", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 51, "total_accepted_number": 10, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1587, "fields": {"title": "Repeat Latin Matrix", "description": "There are k kinds of Jewels with different value, each kind of Jewel has enough number. Now, a man wants to arrange these Jewels in a matrix of m rows and n columns, where m\u2264n, which makes the Jewels not exceed the given numbers in each row and column. Furthermore, the first row from left to right and the first column from top to bottom in this Jewel matrix will be sorted by ascending order by its value. Try designing an algorithm to find how many different arrangements for the Jewel if  k, m, n, and the number for each Jewel are given.", "input_description": "Input includes a number of test cases. First line of each test case includes three integers m, n and k, where 1\u2264m\u2264n\u22648. There are k integers on the second line, the jth number of the second line implies the maximum times the jth Jewel appears at each row and column. These j numbers are sorted in ascending order by its value. If k satisfy the expression 1\u2264v1\u2264v2\u2264\u2026\u2264vk, v1+v2+\u2026+vk=n.", "output_description": "Output the maximum number of arrangements for each test case. The result of each test case contains a line.", "samples": "[{\"input\": \"4 7 3\\n2 2 3\\n\", \"output\": \"84309\\n\"}]", "test_case_id": "1587", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 3, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1589, "fields": {"title": "Help Alice\uff01", "description": "One day, Alice got a very big rectangle and wanted to divide it into small square pieces. Now comes a problem: if all pieces of small squares are of the same size, how big could the squares be? To Alice, it is easy to solve the problem. However, she is very busy, so she asked you to help her. Could you write a program to help her to solve this problem?<p></p>   The length and width of the big rectangle is given, you should tell her the longest length for the small square. All of these numbers are in their binary representations.<p></p>", "input_description": "The first lien of the input is a positive integer. This is the number of the test cases followed. Each test case contains two integer L and W in their binary representation which tells you the length and width of the very big rectangle( 0 < L, W < 2^1000). There may be one or several spaces between these integers.", "output_description": "The output of the problem should consistsof one line of output for each test case. The output of each test case only contains the longest length for the small squares in its binary representation. No any redundant spaces are needed.", "samples": "[{\"input\": \"2\\n100 1000\\n100 110\\n\", \"output\": \"100\\n10\\n\"}]", "test_case_id": "1589", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 175, "total_accepted_number": 44, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1590, "fields": {"title": "Easy Sort", "description": "Sort algorithm is a very important algorithm. There are many sort algorithm like heap_sort, quick_sort, insert_sort and so on. You task is reading a lot of integer, and outputing they in ascending order.", "input_description": "The input contains several test cases. The first line of the input contains an integer T--the number of test cases. In each case, the first line contains an integer N (0 < N < 250)--the number of number. the second line contains N integer.", "output_description": "For each test case, output case number and the sorted number. See sample input and output for further details.", "samples": "[{\"input\": \"2\\n5\\n5 4 3 2 1\\n10\\n-1 2 8 2 9 -12 23 82 0 97\", \"output\": \"Case #1: 1 2 3 4 5\\nCase #2: -12 -1 0 2 2 8 9 23 82 97\"}]", "test_case_id": "1590", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 44, "total_accepted_number": 32, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1591, "fields": {"title": "who win the game", "description": "  It is said that a long time ago, the poor rabbit has experienced the biggest blow in life - losing a race against the tortoise.He swear to revenge, then hid in swjtu, and finally excel at a unique skill that can run with a constant speed without a break (VR m / s) . \tSo,the rabbite asked the tortoise to race again.The competition is located in a straight path, a length of L meters, and the rule is very simple, whoever crossed the finish line first wins.\t<p></p>Since the last victory,the turtle became very famous,even known as &quot;the animal world&#039;s Liu Xiang&quot;. To be able to win again, he buy the most advanced weapons - Electric Bicycle. <p></p>The car with electricity can run in VT1 m / s . Unfortunately, because of the limited battery capacity, each can only drive C  meters ,then you have to tread with your feet in the speed of VT2 m / s. To charge the bike, the tortoise built N power stations  on the runway in which each charge takes T seconds. Of course, the turtle  can choose to charge or not through a charging station .\tRace begin immediately, rabbit and turtle with his electric car with full power stand on the starting line side by side. Your task is to write a program to determine who can win this game when the turtle run with the best strategy.", "input_description": "The input contains multiple testcases, processing to end of file. Each testcase includes four lines:\nThe first line is an integer L,representing the total length of the runway.\nThe second line contains three integers N, C, T, respectively means the number of charging stations, the distance which the electric car to be able to travel and the time required for each charge.The third line is three integers VR, VT1, VT2, respectively standing for rabbit's running speed, the speed of electric cars with electricity and the speed without electricity.\nThe fourth line contains the N (N <= 100) integers p1, p2 ... pn, respectively representing the distance of the N charging stations from the beginning of the runway, where 0 <p1 <p2 <...< pn <L,each of which are in range of the 32-bit integer .", "output_description": "When the turtle is possible to win ,output \"What a pity rabbit!\". Otherwise,\"Good job, rabbit!\".The test data is guaranteed that  they won't arrive at the same time.", "samples": "[{\"input\": \"100\\n3 20 5\\n5 8 2\\n10 40 60\\n100\\n3 60 5\\n5 8 2\\n10 40 60\", \"output\": \"Good job,rabbit!\\nWhat a pity rabbit!\"}]", "test_case_id": "1591", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 3, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1592, "fields": {"title": "Data Smoothing", "description": "&#160;&#160;&#160;&#160;&#160;&#160;In data mining ,there&#039;s a process called data smooting .Its purpose is to make datas more close to each other. Given a set of data ,Totally there&#039;s three methods to do so.<p></p>&#160;&#160;&#160;&#160;&#160;&#160;First one is smoothing according to the average value. Each data is replaced by the average value of the set.<p></p>&#160;&#160;&#160;&#160;&#160;&#160;Second one is according to the border value .In this way,For each data in this set, compare the distance between it and the border values of the set(border values means the minimum data and the maximum data),replace it with the border value which has a smaller distance. Ps: If the two distances is the same ,choose the smaller border value.<p></p>&#160;&#160;&#160;&#160;&#160;&#160;The third way is smoothing according to the middle value. Each data is replaced by the middle value of the set. For a sorted sequence of data, if the number of the data is odd the middle value is defined as the data in the middle position.And if the number is even, the middle value is the average value of the two data in the middle.<p></p>&#160;&#160;&#160;&#160;&#160;&#160;You may feel a little bit confused ,try to read the case to get clear.<p></p>&#160;&#160;&#160;&#160;&#160;&#160;Your task is replace each data in the set according to one of the three way shown above.", "input_description": "The first line contains an integer k(k<=50), the number of cases.\nThen for each test case.\nThe first line contains a string to show the case number.\nThe second line contains two integers N and M.N is the number of data in the set (1 <= N <= 10000). M is the method you should use(M=1,2,3).\nThe third line contains N integers( range in [1,10000]) representing the data in the set. The sequence may not be sorted.\n", "output_description": "For each test case:\nThe first line is the test case number as shown below.\nThe second line contains the answer.\nIf the method is the first or the third ,just output the value which you used to replace each data.\nIf the method is the second,the line contains four integers x1,y 1,x2,y2. X1 and x2 is the two border values(smaller first). Y1 represents how many datas replaced by x1, y2 is the number of datas replaced by x2 respectively.\nIf the value is integer ,output it without decimal point and if any value is decimal , it should be rounded 2 digits after the decimal point. \n", "samples": "[{\"input\": \"3\\nCase 1:\\n3 1\\n3500 4020 4500\\nCase 2:\\n5 2\\n2000 2300 2500 2800 3000\\nCase 3:\\n6 3\\n800 1000 1200 1500 1500 1800\\n\", \"output\": \"Case 1:\\n4006.67\\nCase 2:\\n2000 3 3000 2\\nCase 3:\\n1350\\n\"}]", "test_case_id": "1592", "hint": "Scanf and Printf is recommemded because of the huge input.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 329, "total_accepted_number": 28, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1593, "fields": {"title": "Greeeedy", "description": "BL always like to play a game called Greeeeedy.Firstly he get a number ,then he should divide the number using plus.But Greeeeedy game requal that the number exits in the formula be not larger than 3.<p></p>For exemple:as get 5,then he can divide 4 like as the following methods:<p></p>3+2   2+3   1+2+2  2+1+2   2+2+1   1+1+1+2  2+1+1+1 \u2026.(be careful that 1+2+2 is different from 2+1+2)<p></p>And 4+1 is not allowable.<p></p>Now BL is curious about how many different methods he can use when he get a number,could you help him?<p></p>", "input_description": "The input consists of mutiply cases.each line contains one integer N (0 < N < 50),the test will be ended when N=0;", "output_description": "For each test case,output one line containa a integer represent the number of different divide methed.", "samples": "[{\"input\": \"3\\n4\\n0\\n\", \"output\": \"4\\n7\\n\"}]", "test_case_id": "1593", "hint": "for 3,there are 4 methods :\\n1+1+1\\n2+1\\n1+2\\n3\\nBecareful that as the N become larger,a[N] will be too large", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 396, "total_accepted_number": 93, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1594, "fields": {"title": "Rikimaru", "description": "Oneday Rikimaru is lost in a N*N spiral,he can\u2019t find his exact place ,but he kown the number K in this place .could you help him find his own place?<p></p>When N=4,the spiral is<p></p><pre>1  2  3  4<p></p>12 13 14 5<p></p>11 16 15 6<p></p>10 9  8  7</pre><p></p>If K=16,we kown that Rikimaru is in ROW=3,COLOMN=2.<p></p>", "input_description": "Each line of the input contain 2 integer N(0 < N < 100) and K(0 < K < 100).N is high of spiral,K is the number Rikimaru kowns.The input will be ended when N=0&&K=0.", "output_description": "For each test case your program should ouput a line as the follow shape:\nROW= ,COLOMN= .\n", "samples": "[{\"input\": \"4 16\\n0 0\\n\", \"output\": \"ROW=3,COLOMN=2.\"}]", "test_case_id": "1594", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 260, "total_accepted_number": 79, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1595, "fields": {"title": "Shining Bright Light", "description": "Hefei is a beautiful city. At night, there are many shining bright lights on the tree that are named as L1, L2...Ln and they have a period T1, T2...Tn(the unit is second and 0 &lt; Ti &lt; 50). DD is very interested in this lights. He wants to know if we have the N period and assume at the beginning all the lights are bright, can we calculate how many states the lights have?", "input_description": "The input contains several test cases. The first line of the input contains an integer t (0 < t < 10000)--the number of test cases. In each case, the first line contains an integer N (0 < N < 16)--the number of lights. the second line contains N number corresponding to the N period T1, T2...Tn.\n", "output_description": "For each case, output a line contains only one integer--the number of states.", "samples": "[{\"input\": \"1\\n3\\n2 3 6\", \"output\": \"3\"}]", "test_case_id": "1595", "hint": "The three state:\\n1. All the three lights are bright; (at the 0 second and the 6 second and ......)\\n2. Only the L1 is bright; (at the 2 second and the 4 second and ......)\\n3. Only the L2 is bright. (at the 3 second and the 9 second and ......)\\n4. If there are no light bright, don&#039;t count it as states.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 57, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1596, "fields": {"title": "Easy sort", "description": "Sort algorithm is a very important algorithm. There are many sort algorithm like heap_sort, quick_sort, insert_sort and so on. You task is reading a lot of number, and outputing they in ascending order.", "input_description": "The input contains several test cases. The first line of the input contains an integer T--the number of test cases. In each case, the first line contains an integer N (0 < N < 250)--the number of number. the second line contains N integer.", "output_description": "For each test case, output case number and the sorted number. See sample input and output for further details.", "samples": "[{\"input\": \"2\\n5\\n5 4 3 2 1\\n10\\n-1 2 8 2 9 -12 23 82 0 97\", \"output\": \"Case #1: 1 2 3 4 5\\nCase #2: -12 -1 0 2 2 8 9 23 82 97\"}]", "test_case_id": "1596", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 465, "total_accepted_number": 125, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1597, "fields": {"title": "Who win the game", "description": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It is said that a long time ago, the poor rabbit has experienced the biggest blow in life - losing a race against the tortoise.He swear to revenge, then hid in swjtu, and finally excel at a unique skill that can run with a constant speed without a break (VR m / s) . \t<p></p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;So,the rabbite asked the tortoise to race again.The competition is located in a straight path, a length of L meters, and the rule is very simple, whoever crossed the finish line first wins.\t<p></p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Since the last victory,the tortoise became very famous,even known as &quot;the animal world&#039;s Liu Xiang&quot;. To be able to win again, he bought the most advanced weapons - Electric Bicycle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<p></p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The Electric Bicycle can run in VT1 m / s . Unfortunately, because of the limited battery capacity, each can only drive C meters ,then you have to tread with your feet in the speed of VT2 m / s. To charge the bike, the tortoise built N power stations on the runway in which each charge takes T seconds. Of course, the tortoise decides to charge or not through a charging station .&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<p></p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Race begins immediately, rabbit and tortoise with his Electric Bicycle in full power stand on the starting line side by side. Your task is to write a program to determine who can win this game when the tortoise runs with the best strategy.", "input_description": "The input contains multiple testcases, processing to end of file. Each testcase includes four lines:\nThe first line is an integer L,representing the total length of the runway.\nThe second line contains three integers N, C, T, respectively means the number of charging stations, the distance which the electric car to be able to travel and the time required from each charge.The third line is three integers VR, VT1, VT2, respectively stands for rabbit's running speed, the speed of Electric Bicycle with electricity and the speed without electricity.\nThe fourth line contains the N (N <= 100) integers p1, p2 ... pn, respectively representing the distance of the N charging stations from the beginning of the runway, where 0 < p1 < p2 < ... < pn < L,each of which are in range of the 32-bit integer .", "output_description": "When the tortoise is possible to win ,output \"What a pity rabbit!\". Otherwise,\"Good job, rabbit!\".The test data is guaranteed that  they won't arrive at the same time.", "samples": "[{\"input\": \"100\\n3 20 5\\n5 8 2\\n10 40 60\\n100\\n3 60 5\\n5 8 2\\n10 40 60\", \"output\": \"Good job,rabbit!\\nWhat a pity rabbit!\"}]", "test_case_id": "1597", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 40, "total_accepted_number": 10, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1598, "fields": {"title": "Minmum Weighted Point", "description": "Given you a triangle <b>P<sub>1</sub>P<sub>2</sub>P<sub>3</sub></b> and three positive numbers \u03bb<sub>1</sub>, \u03bb<sub>2</sub>, \u03bb<sub>3</sub>, could you find a point <b>P</b> on the triangle such that the weighted sum of the distances to the three vertices \u03bb<sub>1</sub>|<b>P<sub>1</sub>P</b>| + \u03bb<sub>2</sub>|<b>P<sub>2</sub>P</b>| + \u03bb<sub>3</sub>|<b>P<sub>3</sub>P</b>| is the least possible?<p></p>|<b>P<sub>i</sub>P</b>| is the euclidean distance between point <b>P</b> and point <b>P<sub>i</sub></b>.", "input_description": "Your program is to read from standard input. The input consists of T test cases. The number of test cases T is given in the first line of the input. Each test case contains three lines, each line contain three real numbers, describing in the bellow.\n\u03bb<sub>1</sub> X<sub><b>P<sub>1</sub></b></sub> Y<sub><b>P<sub>1</sub></b></sub>\n\u03bb<sub>2</sub> X<sub><b>P<sub>2</sub></b></sub> Y<sub><b>P<sub>2</sub></b></sub>\n\u03bb<sub>3</sub> X<sub><b>P<sub>3</sub></b></sub> Y<sub><b>P<sub>3</sub></b></sub>", "output_description": "For each test case, your program should output the location of the point <b>P</b> in the form of bellow:\nX<sub><b>P</b></sub> Y<sub><b>P</b></sub>.\nBoth numbers should round up to four fractional digits.", "samples": "[{\"input\": \"1\\n1 0 0\\n1 0 1\\n1 1 1\", \"output\": \"0.2113 0.7887\"}]", "test_case_id": "1598", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 107, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1600, "fields": {"title": "<i>M</i>-good group", "description": "Given you N (1 \u2264 N \u2264 50000) numbers {A<sub>1</sub>, A<sub>2</sub>, ... , A<sub>N</sub>}, which&#160; are no more than 10<sup>9</sup>. Could you tell me how many M-good groups in the sequence.<p></p>M-good group is defined by a group of M (2 \u2264 M \u2264 10) numbers {B<sub>1</sub>, B<sub>2</sub>, ... , B<sub>M</sub>} satisfying: <p>1. 1  \u2264   B<sub>1</sub>&lt; B<sub>2</sub>&lt; ... &lt; B<sub>M</sub>  \u2264   N<br />2. A<sub>B<sub>1</sub></sub> &lt; A<sub>B<sub>2</sub></sub> &lt; ... &lt; A<sub>B<sub>M</sub></sub></p><p>For example, in the sequence {2, 1, 3, 4, 5, 7, 6},there are four 5-good groups: {1, 3, 4, 5, 6}, {2, 3, 4, 5, 6}, {1, 3, 4, 5, 7} or {2, 3, 4, 5, 7}.", "input_description": "Input contains sveral test cases. Each case begins with a line containing two integers <i>N</i> and <i>M</i>, followed by a line containing <i>N</i> numbers.\nA case with <i>N</i> = 0 and <i>M</i> = 0 indicates the end of the input, and should not be processed by your program.", "output_description": "Output the amount of <i>M</i>-good groups in each sequence.", "samples": "[{\"input\": \"2 2\\n1 2\\n3 2\\n1 2 3\\n7 5\\n2 1 3 4 5 7 6\\n0 0\", \"output\": \"1\\n3\\n4\"}]", "test_case_id": "1600", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 6000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 138, "total_accepted_number": 20, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1602, "fields": {"title": "Millionaire Rank List", "description": "In the wild universe, there lives a race of clever creature. They have high level civilization and control a lot of planets. <p></p><p></p>As we human, some of us are very rich and the public like to know who are the Top 10. As a journalist of a famous new paper, you are asked to write a program to get the top 10 list.", "input_description": "The input contains only one test case. \n\nThe first line contains one integer N (10 <= N <= 1,000,000), which means there are N rich people in the race. The following N lines each contains a integer Mi (Mi >= 0), which means the money of the i-th person. \n\nBut as they are universal millionaires, they are very rich, which means the amount of their money can be as large as 10^25. \n\nNote that Mi may have preceding zeros.", "output_description": "The first line is the case number. The following 10 lines, containing the money of the richest 10 people in descending order. Delete the preceding zeros if they once have. See the Sample for more details.", "samples": "[{\"input\": \"11\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n15\\n\\n10\\n00000000001\\n0000000002\\n000000003\\n00000004\\n0000005\\n000006\\n00007\\n0008\\n009\\n10\", \"output\": \"Case #1:\\n15\\n10\\n9\\n8\\n7\\n6\\n5\\n4\\n3\\n2\\nCase #2:\\n10\\n9\\n8\\n7\\n6\\n5\\n4\\n3\\n2\\n1\"}]", "test_case_id": "1602", "hint": "1. Please use &quot;while(scanf(&quot;...&quot;,...) != EOF)&quot; to read data to the End Of File. \\n\\nSample: \\n\\nC:\\n#include &quot;stdio.h&quot;\\n\\nint main() { \\nint a, b; \\nwhile(scanf(&quot;%d%d&quot;, &a;, &b;) != EOF) { \\nprintf(&quot;%d\\n&quot;, a + b); \\n} \\nreturn 0; \\n} \\n\\nC++:\\n#include &quot;iostream&quot;\\n\\nint main() {\\nint a, b;\\nwhile(cin&gt;&gt;a&gt;&gt;b) {\\ncout &lt;&lt; a + b &lt;&lt; endl;\\n}\\nreturn 0;\\n}\\n\\n2. Huge input, please use scanf() to read.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 210, "total_accepted_number": 44, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1603, "fields": {"title": "Min-Max Line", "description": "Given you N weighted point { <b>P<sub>1</sub></b>, <b>P<sub>2</sub></b>, ... , <b>P<sub>N</sub></b> }. The weight of Point <b>P<sub>i</sub></b> is \u03bb<sub><b>i</b></sub> ( \u03bb<sub><b>i</b></sub> &gt; 0 ). Could you find a Line <b>L</b> such that the maximum of the weighed distance to the points  max{ \u03bb<sub><b>i</b></sub>*d(<b>P<sub>i</sub></b>,<b>L</b>) | 1 &lt;= <b>i</b> &lt;= <b>N</b> } is the least possible.<p></p>d(<b>P<sub>i</sub></b>,<b>L</b>) is the distance between the Point <b>P<sub>i</sub></b> and the Line <b>L</b>.", "input_description": "Your program is to read from standard input. The input consists of <b>T</b> test cases. The number of test cases <b>T</b> is given in the first line of the input. For each test case: the first line contains an integer <b>N</b> (1 <= <b>N</b> <= 64), then followed <b>N</b> lines, each line contains three real numbers \u03bb<sub><i><b>i</b></i></sub>, x<sub><b>P<sub>i</sub></b></sub> and y<sub><b>P<sub>i</sub></b></sub> separated by a single space.", "output_description": "For each test case, your program should output the three coefficients <b><i>a</i></b>, <b><i>b</i></b>, and <b><i>c</i></b> of the equation of the line <b>L</b>( <b><i>ax + by + c = 0</i></b> and <b><i>a</i></b> >= 0 ) in a  single line separated by a single space.\nAll numbers should round up to four fractional digits.", "samples": "[{\"input\": \"2\\n3\\n1 0 0\\n1 0 1\\n1 1 1\\n3\\n1 0 0\\n1 0 9\\n1 4 7\", \"output\": \"0.5000 -0.5000 0.2500\\n4.5000 0.0000 -9.0000\"}]", "test_case_id": "1603", "hint": "there are some different arguments for this problem which you should not submit.noted by wuhanzhou.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 3, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1604, "fields": {"title": "Easy DP", "description": "As we all know , dynamic programming a.k.a DP is a widely-used way to solve problems in ACM. This problem is a very classic and also simple DP problem. Given a sequence of integers , try to get the maximum consecutive subsequence of it.", "input_description": "The first line contains a integer k ,representing the number of test cases.\nThere're k lines for each test case. Each one begin with a integer n(1<=n<=100),the number of integers of this sequence. Then there're n integers y1,y2...yn followed.(-5000<=yi<=5000)", "output_description": "For the ith test case,output \"Case i:\" firstly.\nThen each case contains three integers A,B,C.\nA is the sum of the maximum consecutive subsequence .\nAssuming x1 is the first integer of the maximum consecutive subsequence and x2 is the last. Then B is the position of x1 in the original sequence and C is the position of x2 respectively.PS: if there are two subsequence with the same sum,output the first one.", "samples": "[{\"input\": \"2\\n5 -1 2 -3 4 5\\n4 3 -2 4 -3\", \"output\": \"Case 1:\\n9 4 5\\nCase 2:\\n5 1 3\"}]", "test_case_id": "1604", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 294, "total_accepted_number": 133, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1605, "fields": {"title": "Football Team", "description": "Back to his high school life,Talker liked play football very much.He was even the captain of his team. Every player in this team has a phone list which contains some teammates&#039; phone number and the coach have all his players\u2019 phone number. You should know that if A is in B&#039;s list , there&#039;s no guarantee that B should be in A&#039;s. <p></p>Once , the coach of the team wanted to have a meeting with all the members of the team.So, he decided to call some of his players to inform them all. Once a player gets this message ,he will call everyone in his phone list to get others to know.<p></p>Now the Coach wants to know the minimum number of calls that he has to make in order to get every player informed.Could you help him?<p></p>", "input_description": "You should read data to the end of file.\nFor each test case.\nThe first line contains an integer N: the number of football players in the team (2 <= N <= 100). The players are identified by the first N positive integers. Each of the next N lines describes a list of players in phone number list. The line i+1 contains the identifiers of the players in player i's list. Each list ends with a 0. An empty list contains a 0 alone in the line.\n", "output_description": "Your program should write one line to the standard output. The line should contain one positive integer: minimum number of calls that coach has to make.", "samples": "[{\"input\": \"5\\n2 4 3 0\\n4 5 0\\n0\\n0\\n1 0\\n\", \"output\": \"1\"}]", "test_case_id": "1605", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 86, "total_accepted_number": 28, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1606, "fields": {"title": "Doraemon", "description": "[ this problem is wrong which does not worth to submit. ]<p></p><p></p>We kown that The STARCRAF\u2161 will be on the market in 2010,and Doraemon have been longing for it for almost 3 years when he is a middle school student.He want his father to buy it for him as he have no enough money.But his father give him a problem and promise to buy it if Doraemon can solve the problem. The problem is that:what is the greatest common divisor of(T^m-K^m,T^n-K^n) mod 60219938.Becareful thatT is relative prime to K.", "input_description": "The first line of input file contain a integer N(1<=N<=25),which describes the number of test case.Each of the following N lines contains 4 integers:T,K,m,n.(1<=T,K<=1000000000,1<=m,n<=1000000000)After the N lines you should read in a string\u201dDoraemon will get the game!\u201d ", "output_description": "Your progam should output the a integer as the greatest common divisor of(T^m-K^m,T^n-K^n)%60219938.", "samples": "[{\"input\": \"1\\n2 1 3 2\\nDoraemon will get the game!\", \"output\": \"1\"}]", "test_case_id": "1606", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 45, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1607, "fields": {"title": "Bovine Latin", "description": "The cows have heard that the pigs use a secret language called &quot;Pig Latin&quot; when they want to communicate with each other without Farmer John being able to understand what they are saying. Thinking this is an excellent idea, they have invented their own version, aptly called Bovine Latin. <p></p>Converting an English word to a Bovine Latin word is quite simple. For words that start with a vowel (&#039;a&#039;, &#039;e&#039;, &#039;i&#039;, &#039;o&#039; or &#039;u&#039;), &quot;cow&quot; is added to the end of the word; for example, &quot;udder&quot; becomes &quot;uddercow&quot;. For words that do not begin with a vowel, the first letter is moved to the end of the word, and &quot;ow&quot; is added; e.g., &quot;farmer&quot; becomes &quot;armerfow&quot;. So &quot;the cows escape at dawn&quot; becomes &quot;hetow owscow escapecow atcow awndow.&quot; The cows fervently believe that FJ will not understand this subterfuge. <p></p><p></p>Never known as enthusiastic linguists, the cows find this translation quite tedious and thus have asked you to write a program that will take single words and translate them into Bovine Latin. They will provide you with N (1 \u2264 N \u2264 100) words to translate; word lengths range from 3 to 40 letters. ", "input_description": "* Line 1: A single integer: N \n* Lines 2..N + 1: One word per line. ", "output_description": "* Lines 1..N: The Bovine Latin translations of the given words ", "samples": "[{\"input\": \"5\\nudder\\nfarmer\\nmilk\\naaa\\nzzz\\n2\\nudder\\nfarmer\\n\", \"output\": \"uddercow\\narmerfow\\nilkmow\\naaacow\\nzzzow\\nuddercow\\narmerfow\\n\"}]", "test_case_id": "1607", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 171, "total_accepted_number": 58, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1608, "fields": {"title": "Nireyflip Game", "description": "DD and Zhk always like to play a game call Nireyflip which is produced by a funny boy.<p></p>      At first they are given two numbers m and n. At each time one of them should choose the bigger one then minus the smaller one\u2019s multiple from it(don\u2019t let the number become negative) by turns. Who get 0, who is the winner. DD is younger than ZHK, so ZHK let he do first. For example:<p></p>      The start number for DD:50 18<p></p>After DD\u2019s operation ZHK gets:14 18<p></p>After ZHK\u2019s operation DD gets:14 4<p></p>After DD\u2019s operation ZHK gets:6 4<p></p>After ZHK\u2019 s operation DD gets:2 4<p></p>From 2and 4 , DD can do 4-2*2=0,then he gets 2 0.<p></p>Now we know that DD win the game.<p></p>We suppose both of them will choose the best strategy in each turn, can you tell the us who will be the winner?<p></p>", "input_description": "The input contains several cases. The first line contains a integer t ( 1<= t <= 10086 ), describe the number of the cases. Then each of the following t lines includes two positive integer m and n. ( 1 <= m, n <= 1,000,000,000 )", "output_description": "The output should contain t lines. If DD win the game, we will output \u201cDD wins.\u201d, else output \u201cZHK wins.\u201d, otherwise we output \u201cNobody wins\u201d.", "samples": "[{\"input\": \"2\\n50 18\\n34 24\\n\", \"output\": \"DD wins.\\nZHK wins.\\n\"}]", "test_case_id": "1608", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 21, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1609, "fields": {"title": "Contest", "description": "N players participate a contest. The contest has three item. For each item, the player will get a score. You task is calculate a rank list for the N player. For each player, the first item&#039;s score is greater, the rank is higher. If the first item&#039;s score is eqaul, so compare the second score. If the second score is equal, compare the third score.", "input_description": "The first line is a integer N(1<=N<=100)--the number of player. \nFor the following N, the i-th line is the scores(0<= score <= 2^31) of player i.", "output_description": "See the sample for more details.", "samples": "[{\"input\": \"3\\n1 2 3\\n2 3 1\\n2 1 2\\n3\\n1 2 3\\n2 3 1\\n2 1 2\", \"output\": \"Case #1:\\nPlayer 2: 2 3 1\\nPlayer 3: 2 1 2\\nPlayer 1: 1 2 3\\nCase #2:\\nPlayer 2: 2 3 1\\nPlayer 3: 2 1 2\\nPlayer 1: 1 2 3\"}]", "test_case_id": "1609", "hint": "Complexity:  O(N*lgN)", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 348, "total_accepted_number": 83, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1610, "fields": {"title": "Best View Skyscraper", "description": "There are N skyscrapers arranged in a row. We&#039;re interested in finding the one from which the maximal number of other skyscrapers can be seen. The i-th skyscraper can be represented as a line segment on a plane with endpoints (i, 0) and (i, heights[i]). A skyscraper can be seen from the roof of another skyscraper if a line segment connecting their roofs does not intersect with or touch any other skyscraper. Could you tell us the maximal number of other skyscrapers that can be seen from the roof of some skyscraper.", "input_description": "Input contains sveral test cases. Each case begins with a line containing an integers N (1 <= N <= 50), followed by a line containing N integers height[1], height[2], ... height[N-1] and height[N] (1 <= height[i] <= 1,000,000,000)  separated by a single space.\nA case with N = 0 indicates the end of the input, and should not be processed by your program.", "output_description": "For each test case, your program should output the maximal number of other skyscrapers that can be seen from the roof of some skyscraper in a single line.\n", "samples": "[{\"input\": \"1\\n10\\n4\\n5 5 5 5\\n5\\n1 2 7 3 2\\n0\", \"output\": \"0\\n2\\n4\"}]", "test_case_id": "1610", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 33, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1613, "fields": {"title": "Cat and Mouse", "description": "One day ,cat find a maze .There are empty lands and stones in the maze . The maze has n rows , and m columns , (n &lt;= 10 , m &lt;= 10) . \u2019.\u2019 reprents an empty land ,and \u2018#\u2019 reprents a stone .And \u2018X\u2019 reprents the start position of cat . Every second ,cat can choose no moving ,or moving up , or moving down ,or moving left , or moving right ,.Note that cat can not go through the stone , and cat must move in the maze (including the boundary of the maze) .<p></p>At some time ,some mice may appear in some empty lands .If at the same  time ,cat is in the empty land where a mouse appears in , then cat can catch that mouse .The initial time is 0 second ,and cat is in the start position .Can you tell me how many mice the cat can catch mostly ?<p></p>", "input_description": "Mutiple cases.\nFor every case ,the first line is n , m .The following n lines ,every line contains r characters . Note that the characters only continue \u2018.\u2019 and \u2018#\u2019 and \u2018X\u2019 .And \u2018X\u2019 only appears once .The next line is p ,the number of mouse . The following p lines ( p<= 3000 ),every line has three numbers X , Y , T ,reprents the mouse appears in the Xest row and the Yest column of the maze in the Test second (1 <=X<= r , 1 <=Y<= c , T<=10000) .\n", "output_description": "Every case occupies a line . For every case ,output the number of mice the cat can catch mostly .", "samples": "[{\"input\": \"5 5\\nX....\\n..#..\\n###.#\\n#....\\n..###\\n4\\n2 1 3\\n5 2 13\\n5 1 6\\n2 2 2\\n\", \"output\": \"3\"}]", "test_case_id": "1613", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 42, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1614, "fields": {"title": "Cross the River", "description": "Given an undirected graph, N nodes, M edges.The nodes is numbered from 1 to n .Every node reprents a city ,and each edge reprents a bridge . I want to reach city t from city s . Every bridge has a load-bearing ,and if the weight that the bridge bears is bigger than its load-bearing ,the bridge will break down ,then the person on the bridge will fall into the river .I want to reach city t , at the same time ,I don\u2019t want to fall into the river .So the weight of my body must less than or equal to Q ,Q is the maximum weight of body a person has so that he can reach city t from city s . Can you help me calculate Q ?", "input_description": "Multiple test cases. \nFor each case ,the first line is N ,M (N<=1000 , M <= 10000) .The following M line ,each line contains three numbers x ,y ,w,reprent that there is a bridge between city x and city y ,and the load-bearing of the bridge is w .Then next line has two numbers ,s ,t .\n", "output_description": "For each case, output Q. ", "samples": "[{\"input\": \"6 6\\n1 5 2000\\n2 4 5000\\n2 5 3300\\n3 4 2400\\n3 6 2200\\n4 6 6000\\n3 5\\n\", \"output\": \"2400\"}]", "test_case_id": "1614", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 57, "total_accepted_number": 20, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1615, "fields": {"title": "Job and Worker", "description": "We have n jobs and n workers, each worker has a value while doing one certain job.Could you make an arrangement that they will contribute the most . ", "input_description": "The first line contains a integer k ,representing the number of test cases.(k<=20)\nFor each test case, each one begin with a integer n(1<=n<=100),the number of jobs(also the workers). Then there's a matrix (A) size of n, and it is made of integers. A(ij) is the value while worker-i doing job-j.\n", "output_description": "Output the most value we can get.", "samples": "[{\"input\": \"1\\n3\\n1 2 3\\n3 2 1\\n3 1 1 \\n\", \"output\": \"8 \"}]", "test_case_id": "1615", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 38, "total_accepted_number": 20, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1616, "fields": {"title": "SWJTU girls", "description": "There are many pretty girls in SWJTU , and as we know, every girl loves pretty clothes, so do they. One day some of them got a huge rectangular cloth and they want to cut it into small rectangular pieces to make scarves. But different girls like different style, and they voted each style a price wrote down on a list. They have a machine which can cut one cloth into exactly two smaller rectangular pieces horizontally or vertically, and ask you to use this machine to cut the original huge cloth into pieces appeared in the list. Girls wish to get the highest profit from the small pieces after cutting, so you need to find out a best cutting strategy. You are free to make as many scarves of a given style as you wish, or none if desired. Of course, the girls do not require you to use all the cloth.", "input_description": "The first line of input consists of an integer T, indicating the number of test cases.\nThe first line of each case consists of three integers N, X, Y, N indicating there are N kinds of rectangular that you can cut in and made to scarves; X, Y indicating the dimension of the original cloth. The next N lines, each line consists of two integers, xi, yi, ci, indicating the dimension and the price of the ith rectangular piece cloth you can cut in.\n\n0 < T <= 20\n0 <= N <= 10; 0 < X, Y <= 1000\n0 < xi <= X; 0 < yi <= Y; 0 <= ci <= 1000\n", "output_description": "Output the maximum sum of prices that you can get on a single line for each case.", "samples": "[{\"input\": \"1\\n2 4 4\\n2 2 2\\n3 3 9\\n\", \"output\": \"9\\n\"}]", "test_case_id": "1616", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 14, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1617, "fields": {"title": "Probability", "description": "One day , zhk\u3001DestinyDesigner\u3001talker\u3001Jason\u3001prisonbreak\u3001lazycoder\u3001C038\u3001team641 ...are talking about algorithms togother.And they are so tired,then team641 comes up with a fun game.Just to pass the ball to each other.At the beginning of the game,team641 has the ball.then team641 passes the ball to others with the same probability(the first time).Then the person who has the ball does the same thing(the second time).and so on.However,team641 comes up with a question.He wants to know the probability of the incident that he has the ball in the Nth time happened.Could you help him?", "input_description": "Input consists of one or more cases, each of the cases contains two numbers M , N ,where M is the total number of the person and N is the number of turn time.And 1 < M <= 100 ,1 <= N <= 100.", "output_description": "For each line of input data, your program should determine the probability described above.the answers should be printed with 4 digit precision.", "samples": "[{\"input\": \"2 1\\n2 2\\n\", \"output\": \"1.0000\\n0.0000\\n\"}]", "test_case_id": "1617", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 41, "total_accepted_number": 19, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1618, "fields": {"title": "Saw VII", "description": "Hello\uff0cmy friends!Welcome to a killing game.I want to play a game with you.How long have you been an acmer?If you were an acmer,you may have solved this problem before.If you are a New Bird,you can also solve this problem by yourself.Don\u2019t you ? Whether or not,Just to look the problem which ID is 1386(Get Water).Of course,I can not give the same question to you,as it is unfair to you. Isn\u2019t it?Now I will tell you the Differences:There will be n cups,they can fill V1,V2,V3,\u2026,Vn liters of watter.You can do: (1) you can fill a cup, (2) you can empty a cup,(3) you can pour from one cup to the other. Pouring from one cup to the other stops when the first cup is empty or the second cup is full, whichever comes first. For example,If n=2,w=2, and V1=4,V2=6.Then you can fill the first cup with 4 liters,pour it to the second,Then do the same thing once.Finally,you will finish it,just (4,0) =&gt; (0,4) =&gt; (4,4) =&gt; (2,6) =&gt; (2,0).Do you understand?Now, You will determine your own destiny, Good luck and See you latter . Start the countdown...", "input_description": "Input includes a number of test cases. Each test case starts with a line consists of two integers n and w.where n is the total number of cups and w ,a solution is a sequence of steps that leaves exactly w liters in one of the cups.The next line will contain n positive numbers which represent theV1,V2,V3,\u2026,Vn described above. Input is terminated with n=0 and w=0.Assume that 0 < n < 10^6, 0 < w,V1,V2,\u2026,Vn <= 100.", "output_description": "Output a line for each case. If he can get w liters of water, print \u201cYES\u201d, or print \u201cNO\u201d.", "samples": "[{\"input\": \"3 5\\n3 7 10\\n0 0\\n\", \"output\": \"YES\"}]", "test_case_id": "1618", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 61, "total_accepted_number": 19, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1619, "fields": {"title": "A new operation", "description": "Let us introduce a new operation called double xor, and use the operator ^^ to denote it. For two <p></p>integers A and B, A ^^ B is calculated as follows. Take the decimal representations of A and B. If <p></p>they have different lengths, prepend the shorter one with leading zeros until they both have the <p></p>same length. Then, label the digits of A as a1, a2, ?, an (from left to right) and the digits of B as <p></p>b1,b2, ... , bn (from left to right). C = A ^^ B will consist of the digits c1, c2, ... , cn (from left to <p></p>right), where ci = (ai ^ bi) % 10, where ^ is the usual bitwise XOR operator (see notes for exact <p></p>definition) and x % y is the remainder of x divided by y. If C happens to have any extra leading <p></p>zeroes, they are ignored.<p></p><p></p>For example, 8765 ^^ 2309 = 462 (c1 = (8 ^ 2) % 10 = 10 % 10 = 0, c2 = (7 ^ 3) % 10 = 4 % 10 = 4, <p></p>c3 = (6 ^ 0) % 10 = 6 % 10 = 6, c4 = (5 ^ 9) % 10 = 12 % 10 = 2), and 5 ^^ 123 = 126 (&quot;5&quot; is <p></p>prepended with two leading zeros to become &quot;005&quot;).<p></p><p></p>When multiple ^^ operations occur in an expression, they must be evaluated from left to right. <p></p>For example, A ^^ B ^^ C means (A ^^ B) ^^ C.<p></p>You are given an int N. Return the value of N ^^ (N - 1) ^^ (N - 2) ^^ \u2026^^ 1.<p></p><p></p>If a and b are single bits then a ^ b is defined as (a + b) % 2. For two integers, A and B, in order to calculate A ^ B, they need to be represented in binary: A = (an...a1)2, B = (bn...b1)2 (if the lengths of their representations are different, the shorter one is prepended with the necessary number of leading zeroes). Then A ^ B = C = (cn...c1)2, where ci = ai ^ bi. For example, 10 ^ 3 = (1010)2 ^ (0011)2 = (1001)2 = 9.<p></p>", "input_description": "There are a large number of testcase.\nFor each testcase,  there will be a number N in a single line \nN  will be between 1 and 1,000,000, inclusive.\n", "output_description": " For each testcase ,ouput X  in a single line.", "samples": "[{\"input\": \" 1\\n 2\\n\", \"output\": \" 1\\n 3\\n\"}]", "test_case_id": "1619", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 88, "total_accepted_number": 28, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1620, "fields": {"title": "Equation again", "description": "The equation is consisted of n 1s and &#039;+&#039;and &#039;-&#039;,and the answer of the equation is s,can you tell me the number of the equations ? For example ,n=3,s=1,then we can get <p></p>1+1-1=1,1-1+1=1,there are totaly 2 equations<p></p>", "input_description": "First line is t,the number of testcases.(t <= 60)\nThen the last n-1 lines,every line contains n and s.(2 <= n <= 15)\n", "output_description": "For n and s,output the number of equations.If the equation do not exit ,output -1 .", "samples": "[{\"input\": \"2\\n3 -1\\n3 1\\n\", \"output\": \"1\\n2\\n\"}]", "test_case_id": "1620", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 105, "total_accepted_number": 31, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1621, "fields": {"title": "just an easy problem", "description": " The digit sum of an integer is the sum of its digits in decimal notation. For example, the digit sum of 1234 is 1+2+3+4=10, and the digit sum of 3443 is 3+4+4+3=14.<p></p><p></p>You are given three integers: A, B and C. Return the integer X between A and B, inclusive, such that the absolute difference between the digit sum of X and the digit sum of C is as small as possible. If there are multiple possible values for X, return the smallest among them. <p></p>", "input_description": "There are a large number of testcase.\nFor each testcase,  3 number A,B,C will  be  in  one line .\nA, B and C will each be between 1 and 1,000,000,000, inclusive.  \n B-A will be between 0 and 100,000, inclusive. \n", "output_description": "For each testcase ,ouput X  in a single line.", "samples": "[{\"input\": \"1 1 999\\n1 9 10\\n\", \"output\": \" 1\\n 1\\n\"}]", "test_case_id": "1621", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 27, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1622, "fields": {"title": "Rebuild", "description": "Prisonbreak has built a sand castle! Like all good castles, the walls have crennelations, that nifty pattern of embrasures (gaps) and merlons (filled spaces); see the diagram below. The N (1 \u2264 N \u2264 2000) merlons of his castle wall are conveniently numbered 1..N; merlon i has height M_i (1 \u2264 M_i \u2264 1000); his merlons often have varying heights, unlike so many. <p></p>He wishes to modify the castle design in the following fashion: he has a list of numbers B_1 through B_N (1 \u2264 B_i \u2264 1000), and wants to change the merlon heights to those heights B_1, ..., B_N in some order (not necessarily the order given or any other order derived from the data). <p></p>To do this, he has hired some bovine craftsmen to raise and lower the merlons&#039; heights. Craftsmen, of course, cost a lot of money. In particular, they charge FJ a total X (1 \u2264 X \u2264 100) money per unit height added and Y (1 \u2264 Y \u2264 100) money per unit height reduced. <p></p>Prisonbreak would like to know the cheapest possible cost of modifying his sand castle if he picks the best permutation of heights. The answer is guaranteed to fit within a 32-bit signed integer.<p></p>", "input_description": "Line 1: Three space-separated integers: N, X, and Y\nLines 2..N+1: Line i+1 contains the two space-separated integers: M_i and B_i \n", "output_description": "Line 1: A single integer, the minimum cost needed to rebuild the castle ", "samples": "[{\"input\": \"3 6 5\\n3 1\\n1 2\\n1 2\\n\", \"output\": \"11\"}]", "test_case_id": "1622", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 24, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1623, "fields": {"title": "To  Compute  Network  Address", "description": "Computer Address ,mask  and  the net address can be written in  x.y.z.t  fomat.(0=&lt;x,y,z,t &lt;=255   ) And mask can be a a tool to convert computer address to net address.<p></p>The convert rule is very easy. <p></p>First convert  the computer address and mask to  binary mode <p></p>Then  for every bit of mask and computer address , you can use the  \u2018&\u2019 operation to gain the netaddress bit.   \u2018&\u2019  operation is :  1&1=1  1&0=0  0&1=0  0&0=0<p></p><p></p>For example:<p></p>computer address  is   123.45.78.12<p></p>mask            is    255.255.192.0<p></p>we convert computer address                01111011. 00101101. 01001110. 00001100<p></p>we convert mask                       :   11111111. 11111111. 11000000. 00000000<p></p>use & operation we get network address  is :   01111011. 00101101. 01000000. 00000000<p></p>finally  we convert the network address to x.y.z.t  format : 123.45.64.0<p></p><p></p>But now  you should use prefix  /n  to  gain the mask.<p></p>The prefix  \u201c/n\u201d   indicates   n bits must be set to &#039;1&#039; on the left side of the   mask and the <p></p>rest of  bits  are all  set to  \u20180\u2019 .<p></p><p></p>For example<p></p>If  the prefix is  /20  Then Mask is 11111111.11111111.11110000.00000000 <p></p>", "input_description": "First  is a number N, indicate the number of testcases.\nNext there are N  lines ,each line will show you one computer address  (in  x.y.z.t  format)\n and one prefix (0 <= prefix <= 32   in  /n  format.)\n", "output_description": "For each testcase ,  you should output two line, first line is  the prefix and the next is network \naddress you computed.  Please use the  \u201cx.y.z.t\u201d  format.\nDon\u2019t forget the two string \u201cmask\u201d and \u201cnet address\u201d.  The format is just like the sample output.\n", "samples": "[{\"input\": \"1\\n123.45.78.12  /18\\n\", \"output\": \"mask : 255.255.192.0\\nnet address : 123.45.64.0\\n\"}]", "test_case_id": "1623", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 23, "total_accepted_number": 17, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1624, "fields": {"title": "An easy Search", "description": "There  is  a  simple  database  and  the  keys are specially ,because they can be  duplicate .  Now I will give you the database information in order.  And I will ask you some questions, I give you the key , your job is just to find the  first  data  and  the last    data  in the key.  <p></p><p></p>If  you cannot  find the key ,   print  -1 <p></p>If  there  is only   one data in the key : there are two circumstances<p></p>1) key is  odd, you can use the data as the first data and the second data you must print -1.<p></p>2) key is  even , you can use the data as the second data  And the first data you must print -1.<p></p>", "input_description": "First   is  a  number N,just tell you  the  number of  testcases.   N <= 53\nFor each testcase  first is a number M ,just tell you the number of data in the database. M <= 100000\t\nNext M line each has two number k,d  indicate  the  key and the data.   0 <= K < 50  \nAnd then is  a number q .  indicate the number of questions.   0 < q <= 1000\nNext  q  line  each has a number m,  0<= m <= 50\n", "output_description": "For  each  question m, your program should output the data  in a single line.", "samples": "[{\"input\": \"1\\nsize is 4\\n1 2\\n2 3\\n3 5\\n3   7\\nthe number of questions  is 3\\n1\\n2\\n3\\n\", \"output\": \"2  -1\\n-1  3\\n5  7\\n\"}]", "test_case_id": "1624", "hint": "the data is huge , so  just use  scanf   to read data.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 59, "total_accepted_number": 9, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1625, "fields": {"title": "For Senior", "description": "    ifx^2=a(mod n),we can difine that x is a square root of a modulo n.Now I want you to find the square root of two given number a and n.a and n are relatively prime.", "input_description": "One number K in the first line is an amount of tests. Each next line represents separate test, which contains two numbers a and n(a, n are natural, 1 <= a, n <= 10^9, n is prime)", "output_description": "For each input test the program must evaluate all possible values root(a,n) in the range (0, n-1) and output them in increasing order in one separate line using spaces. If there is no square root for current test, the program must print in separate line:\u2018No root\u2019.", "samples": "[{\"input\": \"1\\n4 17\\n\", \"output\": \"2 15\"}]", "test_case_id": "1625", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 55, "total_accepted_number": 27, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1626, "fields": {"title": "Put Apples I", "description": "There are N (0 &lt; N &lt;= 100,000) baskets that numbered 1 to N, and two operation:<p></p>(1) P m i: put m apples in i-basket; (0 &lt; m &lt; 2^31, 0 &lt; i &lt;= N)<p></p>(2) Q a b: query the number of apples in basket a to b. (0 &lt; a, b &lt;= N)<p></p>", "input_description": "The first line is the number of test case\u2015\u2015t (0 < t <= 10); For each case, the first line consist of the number of baskets n and the number of operations k (0 < k <= 100,000) and the following lines is k operations.", "output_description": "For each query, output the number of apples.", "samples": "[{\"input\": \"1\\n3 5\\nP 3 1\\nQ 2 3\\nP 1 3\\nQ 1 2\\nQ 2 3\\n\", \"output\": \"0\\n3\\n1\\n\"}]", "test_case_id": "1626", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 147, "total_accepted_number": 45, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1627, "fields": {"title": "Put Apples II", "description": "There are N (0 &lt; N &lt;= 100,000) baskets that numbered 1 to N, and two operation:<p></p>(1) P m i j: put m apples in the baskets for i to j; (0 &lt; m &lt; 2^31, 0 &lt; i &lt;= j = N)<p></p>(2) Q i: query the number of apples in basket i. (0 &lt; i &lt;= N)", "input_description": "The first line is the number of test case\u2015\u2015t (0 < t <= 10); For each case, the first line consist of the number of baskets n and the number of operations k (0 < k <= 100,000) and the following lines is k operations.", "output_description": "For each query, output the number of apples.", "samples": "[{\"input\": \"1\\n3 5\\nP 1 1 2\\nQ 3\\nP 1 2 3\\nQ 3\\nQ 2\", \"output\": \"0\\n1\\n2\\n\"}]", "test_case_id": "1627", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 108, "total_accepted_number": 31, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1628, "fields": {"title": "Find the Maximum and the Minimum", "description": "Give you a number sequence, can you tell me between the i-th number and the j-th number,which is the maximum and which is the minimum?", "input_description": "The first line of the input is N and Q. N(N< 2^17) is the number of integers and Q(Q < 2^17) is the number of querys. The second line is the N integers and the following Q lines include two integers i and j(i <= j);", "output_description": "For each query, output the maximum number and the minimum number.", "samples": "[{\"input\": \"10 5\\n8 2 839 -1 4 0 12 8 23 19\\n1 6\\n2 7\\n3 8\\n4 9\\n5 10\", \"output\": \"839 -1\\n839 -1\\n839 -1\\n23 -1\\n23 0\\n\"}]", "test_case_id": "1628", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 190, "total_accepted_number": 43, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1629, "fields": {"title": "Sphere", "description": "There are two spheres A and B,and their radius is R<sub>A</sub> and R<sub>B</sub> where R<sub>A</sub> &gt; R<sub>B</sub>.Assume that the center of A and B are O<sub>A</sub> and O<sub>B</sub>, what&#039;s more, O<sub>B</sub> is on the surface of A.Now you should calculate the volume of intersection between A and B.", "input_description": "Input will consist of several test cases, each consists of two parts: R<sub>A</sub> ans R<sub>B</sub>(are real numbers and 0 < R<sub>B</sub> < R<sub>A</sub> <= 1000.0).", "output_description": "calculate the volume of intersection between A and B.( the answers should be printed with 5 digit precision.)", "samples": "[{\"input\": \"2 1\", \"output\": \"1.70170\"}]", "test_case_id": "1629", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 86, "total_accepted_number": 29, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1630, "fields": {"title": "LCSS", "description": "  To give you a sequence consisting of 0 and 1, can you find the longest continuous sub-sequence only consisting of 0 ?  For example, a sequence of length 7 is 1010100\uff0cthe longest continuous sub-sequence only consisting of 0 is 00.", "input_description": "The first line is an interger t (t <= 30) ,the numbers of test cases.\nFor each test case , the first line is an interger n (1 <= n <= 10000) ,the length of the sequence . The second line are n intergers .\n", "output_description": "For each test case , output the length of the longest continuous sub-sequence only consisting of 0 .", "samples": "[{\"input\": \"3\\n2\\n1  1\\n3\\n0  0  0\\n7\\n1  0  1  0  1  0  0\\n\", \"output\": \"0\\n3\\n2\"}]", "test_case_id": "1630", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 272, "total_accepted_number": 154, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1631, "fields": {"title": "Web", "description": "Everyone can browse the web, isn&#039;t it?<p></p>When we browse the web,we can visit any webs direct,or move forward,or move backward,or just quit.For example,at first,we visit(http://www.swjtu.edu.cn/).Then we can also visit<p></p>(http://www.baidu.com/ ). we decide to move backward,then we will visit<p></p>(http://www.swjtu.edu.cn/) again.if we still move backward,then we will just visit NULL.may be you can select to quit.^_^.In this problem,you will asked to tell me which web I will visit when I descide to do something(visit direct/move backward/move forward/quit).Assume that the browser initially loads the web page at the URL (http://www.acm.org/) .<p></p>", "input_description": "Input consists of a series of cases.each case is a sequence of commands. The command keywords BACK, FORWARD, VISIT, and QUIT are all in uppercase. URLs have no whitespace and have at most 70 characters. You may assume that no problem instance requires more than 100 elements in each stack at any time. The end of each case is indicated by the QUIT command.", "output_description": "For each command other than QUIT, print the URL of the current page after the command is executed if the command is not ignored. Otherwise, print \"Ignored\". The output for each command should be printed on its own line. No output is produced for the QUIT command.", "samples": "[{\"input\": \"2\\nVISIT http://acm.swjtu.edu.cn/JudgeOnline/\\nVISIT http://acm.pku.edu.cn/JudgeOnline/\\nBACK\\nBACK\\nBACK\\nFORWARD\\nVISIT http://acm.zju.edu.cn/onlinejudge/\\nBACK\\nBACK\\nFORWARD\\nFORWARD\\nFORWARD\\nQUIT\\nVISIT http://acm.swjtu.edu.cn/JudgeOnline/\\nBACK\\nBACK\\nQUIT\\n\", \"output\": \"Test #1:\\nhttp://acm.swjtu.edu.cn/JudgeOnline/\\nhttp://acm.pku.edu.cn/JudgeOnline/\\nhttp://acm.swjtu.edu.cn/JudgeOnline/\\nhttp://www.acm.org/\\nIgnored\\nhttp://acm.swjtu.edu.cn/JudgeOnline/\\nhttp://acm.zju.edu.cn/onlinejudge/\\nhttp://acm.swjtu.edu.cn/JudgeOnline/\\nhttp://www.acm.org/\\nhttp://acm.swjtu.edu.cn/JudgeOnline/\\nhttp://acm.zju.edu.cn/onlinejudge/\\nIgnored\\nTest #2:\\nhttp://acm.swjtu.edu.cn/JudgeOnline/\\nhttp://www.acm.org/\\nIgnored\\n\"}]", "test_case_id": "1631", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 92, "total_accepted_number": 36, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1632, "fields": {"title": "Run  To  Class", "description": "\tThere\u2019re many buildings in swjtu, and SmartEgg is a freshman. Today, it is the first day he is at school. It\u2019s 7:30 now, SmartEgg must go to the classroom at once, or he\u2019ll be late. You know being late at the first class will make a bad impression on the teacher. SmartEgg is a good student, he will never make this happen, will he?<p></p>\tSo he hurries to the buildings where the classrooms located at. But the problem come out, he does not know the road! This make him mad, it just like a maze!<p></p>\tNow he turns to you, an old student at swjtu. What you should do is simple: just tell him how long the shortest path that leads him to the right classroom is. SmartEgg will thank you very much.<p></p>\tNow let\u2019s describe the situation here. The map can be represented as a M\u00d7N grid(2&lt;=M&lt;=50, 2&lt;=N&lt;=50). In each cell, there\u2019s a symbol: \u2018.\u2019, \u2019X\u2019, \u2019a\u2019, \u2019c\u2019, where a \u2018.\u2019 means a the cell is reachable, an \u2018X\u2019 represents a wall that is not reachable, and \u2018a\u2019 means SmartEgg is at that place initially, \u2018c\u2019 means the classroom.<p></p>\tAt a single minute, SmartEgg can go from a reachable cell to an adjacent one (to the north, west, south or east), of course,there is just one target room . So can you tell if SmartEgg takes the optimal path, how many minutes does he need at least to reach the classroom?<p></p>", "input_description": "\tThe first line consist only one integer C(C <= 10), indicates C cases follows. In each case, there are two integers M and N on the first line, as the size of the map. Then M lines follows are the given map.", "output_description": "\tFor each case, output a single line consist a single integer, represents at least how many minutes SmartEgg need to arrive at the class. If there is no path to the classroom, just print \u201cNo path\u201d", "samples": "[{\"input\": \"2\\n3 5\\na....\\nXX.XX\\nc..X.\\n\\n4 6\\na...X.\\nXX.X..\\ncX...X\\n..XX..\\n\", \"output\": \"6\\nNo path\\n\"}]", "test_case_id": "1632", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 72, "total_accepted_number": 34, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1633, "fields": {"title": "The perfect cow", "description": "For the 39th year in a row, Farmer John was named &quot;Dairy Farmer of the Year&quot;. The Dairy Association wants him to exhibit his most perfect cow at the upcoming Cow Convention in Herbster, Wisconsin on the frigid shores of Lake Superior. <p></p>FJ keeps up with scientific literature and knows that beauty is actually a trend toward the average rather than the existence of some superior trait. Thus, he wants to find his most average cow and share her beauty with the other Dairy Farmers during the weekend of revelry and partying at the convention. <p></p>Happily, each of the N*N cows (2 \u2264 N \u2264 99; N odd) has her beauty rating (1 \u2264 R_ij \u2264 1,000) inscribed on a tag in her ear, just like in this picture. <p></p>Cows aren&#039;t so good at math, so FJ lines them up into an N x N square. He asks them to find the median cow in each row (the median cow is the one whose beauty number is bigger than or equal to half the cows in her group and also smaller than or equal to half the cows in her group -- the middle number of the group). From those N medians, FJ then finds the median of those numbers and brings that cow to the convention. <p></p>Given a set of N x N cows, find the beauty index of the most perfect (average) cow. <p></p>", "input_description": "There are multiple test cases\u3002\nFor each case:\n* Line 1: A single integer: N \n* Lines 2..N+1: Line i+1 contains N space-separated integers that are the N beauty indices for row i of the cow square \n", "output_description": "For each case:\n* Line 1: A single integer that is the index of the most perfect cow as described in the task.\n", "samples": "[{\"input\": \"5\\n1 5 3 9 5\\n2 5 3 8 1\\n6 3 5 9 2\\n8 8 3 3 2\\n5 4 4 4 4\\n\", \"output\": \"4\"}]", "test_case_id": "1633", "hint": "Note: you can use the forrowing format when you readin the data:\\n      while(scanf(\u201c%d\u201d,&N;)==1){    } \\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 18, "total_accepted_number": 15, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1634, "fields": {"title": "15", "description": "Given a string which only contains decimal digit characters. Construct the maximum number which divides by 15 without remainder. Each character of the string may not be used more than once.", "input_description": "The first line contains a integer T,which represents the total number of cases.The next T lines each contains a string.The length of the string is between 1 and 100.", "output_description": "Output the maximum number described above.If no such a number can be constructed, output \u201cimpossible\u201d.", "samples": "[{\"input\": \"2\\n1\\n14200\\n\", \"output\": \"Test #1: impossible\\nTest #2: 4200\\n\"}]", "test_case_id": "1634", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 60, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1635, "fields": {"title": "Check", "description": "You are hosting a party with G guests and notice that there is an odd number of guests! When planning the party you deliberately invited only couples and gave each couple a unique number C on their invitation. You would like to single out whoever came alone by asking all of the guests for their invitation numbers.", "input_description": "The first line of input gives the number of cases, N.\nN test cases follow. For each test case there will be:\nOne line containing the value G the number of guests.\nOne line containing a space-separated list of G integers. Each integer C indicates the invitation code of a guest.\n\nLimits\n1 \u2264 N \u2264 100\n0 < C \u2264 2147483647\n3 \u2264 G < 1000000\n", "output_description": "For each test case, output one line containing \"Case #x: \" followed by the number C of the guest who is alone.", "samples": "[{\"input\": \"3\\n3\\n1 2147483647 2147483647\\n5\\n3 4 7 4 3\\n5\\n2 10 2 10 5\\n\", \"output\": \"Case #1: 1\\nCase #2: 7\\nCase #3: 5\\n\"}]", "test_case_id": "1635", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 45, "total_accepted_number": 18, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1636, "fields": {"title": "LostPoint", "description": "KuroKy owns a normal string,and he want to find a special point in this string,he call the special point worst LostPoint.A LostPoint i is said to be worse than another LostPoint j only if the string aiai+1ai+2ai+3...ana1a2...ai-1 is lexicographically smaller than the string ajaj+1aj+2..ana1a2...aj-1.<p></p>String a1...an is lexicographically smaller than the string b1...bn only if there exists an integer i,i &lt;= n, ai &lt; bi.", "input_description": "The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case consists of exactly one line containing string. Maximal length of each description is 1000000 characters. Each string is represented by  lower-case characters of the english alphabet a,b,c,d..z.There is no blank between two characters.", "output_description": "For each case ,printf exactly one line containing only one integer:the position of Worst LostPoint.", "samples": "[{\"input\": \"1\\nkurokyisasb\\n1\\nwewontplaydatoanymore\\n\", \"output\": \"9\\n15\"}]", "test_case_id": "1636", "hint": "As you read in the input data,you should read to end of file", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 28, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1637, "fields": {"title": "Loda", "description": "      Magina always plays game with Terrorblade.Now they are playing a game on the DOTA tree.<p></p>      Magina has m1 stones,Terrorblade has m2 stones.At the beginning of the game,all stones are placed on the nodes of a tree,except the root.Magina is younger than  Terrorblade so Magina moves first and they take turns to move the stones.On each turn, the player chooses exactly one of his stones,moves this stone from current node to its parent node.During the game,any number of stones can be put on the same node.<p></p>      The player who first moves all of his stones to the root of the tree is the loser.Assume that Magina and Terrorblade are clever enough.Given the initial positions of the stones,write a progame to find the winner.", "input_description": "Input contains multiple test cases.\nThe first line of each test case contains 3 integers:n,m1,m2(1 <= m1,m2 <= 3),n is the number of nodes.Next n-1 lines describer the tree.Each line contains 2 integers A and B in range[0,n),representing an edge of the tree and A is B'parent.Node 0 is the root.There are m1 integers and m2 integers on next two lines,representing the initial positions of Magina's and Terrorblade's stones.", "output_description": "Output the winner'name on a single line for each test case.There should be a blank line after each test case.\n", "samples": "[{\"input\": \"3 2 1\\n0 1\\n1 2\\n2 2\\n2\\n\", \"output\": \"Magina\"}]", "test_case_id": "1637", "hint": "As you read in the input data,you should read to end of file", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 25, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1639, "fields": {"title": "Nevermore", "description": "One of the area of DOTA has N heroes,and we describ every heroes using a couple of integer(Xi,Yi).In order to strengthen the communication of the heroes,Nervermore decide to build a communication net.Every hero can call with each other using a wireless radio(we make a short call WR) or a satelite(we make a short call SA).All of them can own a wireless radio ,but only some of them can have a satelite(Because icefrog have no much money).<p></p>different type WR have differet distance of despatch D.To some type of WRi(the distance of despathch of WRi is Di),if the distance of two heroes is smaller than Di ,they can make a call through WRi,be care than the price of WRi is proportional to Di.<p></p>Two heroes owning two SA can communicate with each other no matter how far they are directly.<p></p>Now Nervermore have K SAs(K is the tatol number of SA),he want you to help he to decide how to distribute the K SAs so that the D is smallest (D is smallest,price is minimun),and the heroes can communicate with each others directly or undirectly...", "input_description": "The first line contain two numbers:N,K(0 <= N <= 10000,0 <= K < 1000) N is ther number of hero,and K is the number of SA.Each of the following N lines contain two numbers(Xi,Yi)(-10000 <= Xi, Yi <= 10000)all numbers are integer.", "output_description": "output one line contain one integer D represent the minimun distance. You should remain two decimal points.", "samples": "[{\"input\": \"4 2\\n10 10\\n10 0\\n30 0\\n45 0\\n\", \"output\": \"15.00\\n\"}]", "test_case_id": "1639", "hint": "If you dont kown the main idea after you read the describe carefully you can contact HuLuwa,the 7th boy, who is alway holding one cucurbit in his hand...", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 7, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1640, "fields": {"title": "\u6570\u5b66\u5bb6", "description": "\u57281202\u5e74\uff0c\u4e00\u4f4d\u6570\u5b66\u5bb6 \u6ce8\u610f\u5230\u4e86\u4e00\u4e2a\u5154\u5b50\u7684\u7e41\u6b96\u95ee\u9898\uff0c\u4ed6\u5047\u8bbe\u4e00\u5f00\u59cb\u6709\u4e00\u53ea\u516c\u7684\u5154\u5b50\u4e0e\u4e00\u53ea\u6bcd\u7684\u5154\u5b50\u521a\u51fa\u751f\uff0c\u6bcf\u53ea\u5154\u5b50\u518d\u7ecf\u8fc7\u4e00\u4e2a\u6708\u5f8c\u5c31\u6709\u7e41\u6b96\u80fd\u529b\uff0c\u800c\u5154\u5b50\u7684\u6000\u5b55\u671f\u662f\u4e00\u4e2a\u6708\uff0c\u800c\u4e00\u65e6\u6bcd\u5154\u5b50\u62e5\u6709\u7e41\u6b96\u80fd\u529b\u65f6\uff0c\u5b83\u6bcf\u4e2a\u6708\u90fd\u4f1a\u751f\u4ea7\uff0c\u800c\u4e14\u751f\u51fa\u6765\u7684\u5154\u5b50\u662f\u4e00\u516c\u4e00\u6bcd\uff0c\u6700\u5f8c\u4e00\u4e2a\u6761\u4ef6\u662f\uff0c\u5154\u5b50\u4e0d\u4f1a\u6b7b\u6389\u3002\u5728\u8fd9\u79cd\u7406\u60f3\u72b6\u51b5\u4e0b\uff0c\u95ee\u9898\u6765\u4e86\uff1a\u7ecf\u8fc7\u4e00\u5e74\uff08\u5341\u4e8c\u4e2a\u6708\uff09\u5f8c\uff0c\u603b\u5171\u6709\u51e0\u5bf9\u5154\u5b50\uff1f  <p></p>\u7b2c\u96f6\u4e2a\u6708#0 \u4e00\u5f00\u59cb\u53ea\u6709\u4e00\u5bf9\u5154\u5b50  <p></p>\u7b2c\u4e00\u4e2a\u6708#1 \u7ecf\u8fc7\u4e00\u4e2a\u6708\uff0c\u4e24\u53ea\u5154\u5b50\u90fd\u6709\u7e41\u6b96\u80fd\u529b\uff0c\u4f46\u662f\u6000\u5b55\u671f\u662f\u4e00\u4e2a\u6708\uff0c\u6240\u4ee5\u8fd8\u662f\u53ea\u6709\u4e00\u5bf9\u5154\u5b50\u3002  <p></p>\u7b2c\u4e8c\u4e2a\u6708#2 \u7ecf\u8fc7\u4e24\u4e2a\u6708\u5f8c\uff0c\u539f\u6765\u4e24\u53ea\u5154\u5b50\u751f\u51fa\u4e00\u5bf9\u4e00\u516c\u4e00\u6bcd\u7684\u5154\u5b50\uff0c\u6240\u4ee5\u73b0\u5728\u6709\u4e24\u5bf9\u5154\u5b50\u3002  <p></p>\u7b2c\u4e09\u4e2a\u6708#3 \u7ecf\u8fc7\u4e09\u4e2a\u6708\u5f8c\uff0c\u6700\u5f00\u59cb\u7684\u4e00\u5bf9\u5154\u5b50\u53c8\u751f\u51fa\u4e00\u5bf9\u5154\u5b50\uff0c\u4f46\u7b2c\u4e8c\u5bf9\u5154\u5b50\u624d\u521a\u6709\u7e41\u6b96\u80fd\u529b\uff0c\u6240\u4ee5\u73b0\u5728\u662f\u4e09\u5bf9\u5154\u5b50\u3002  <p></p>\u7b2c\u56db\u4e2a\u6708#4 \u4ee5\u6b64\u7c7b\u63a8\uff0c\u73b0\u5728\u662f\u4e94\u5bf9\u5154\u5b50\u3002 ", "input_description": "\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6574\u6570 n\uff0c\u4ee3\u8868\u7528\u4f8b\u6b21\u6570\n\u63a5\u7740n\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6570\u5b57m(m<=40)\uff0c\u4ee3\u8868\u6708\u4efd", "output_description": "\u8f93\u51fan\u884c\uff0c\u6bcf\u884c\u8f93\u51fa\u5bf9\u5e94\u6708\u4efd\u7684\u5154\u5b50\u5bf9\u6570", "samples": "[{\"input\": \"4\\n1 \\n2\\n3\\n4\", \"output\": \"1\\n2\\n3\\n5\"}]", "test_case_id": "1640", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 937, "total_accepted_number": 297, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1641, "fields": {"title": "\u5c0f\u65b9\u548c\u5c0f\u5218\u7684\u6545\u4e8b", "description": "\u5c0f\u65b9\u662fACM\u534f\u4f1a\u65b0\u6765\u7684\uff0c\u4ed6\u8ba4\u4e3a\u81ea\u5df1\u5f88\u806a\u660e\uff0c\u5bf9\u6b64\u5c0f\u5218\u5f88\u770b\u4e0d\u4e0b\u53bb\uff0c\u4e8e\u662f\u4ed6\u7ed9\u5c0f\u65b9\u4e00\u53e5\u8bdd\uff0c \u5982\u679c\u5c0f\u65b9\u80fd\u770b\u660e\u767d\u91cc\u9762\u7684\u610f\u601d\uff0c\u4ed6\u5c31\u627f\u8ba4\u5c0f\u65b9\u5f88\u806a\u660e\u3002\u8fd9\u53e5\u8bdd\u91cc\u9762\u5305\u62ec\u6709\u6570\u5b57\u548c\u4e00\u4e9b\u5b57\u7b26 \uff0c\u5c0f\u65b9\u9700\u8981\u7684\u65b9\u6cd5\u5c31\u662f\u628a\u91cc\u9762\u7684\u6570\u5b57\u7ffb\u8bd1\u6210\u5bf9\u5e94\u7684\u82f1\u6587\u5b57\u6bcd(0\u5bf9\u5e94a\uff0c1\u5bf9\u5e94b....9\u5bf9\u5e94j\uff0c\u6240\u6709\u6570\u5b57\u90fd\u5c0f\u4e8e10) \uff0c\u540c\u65f6\u4fdd\u7559\u91cc\u9762\u7684\u82f1\u6587\u5b57\u7b26\u548c\u7a7a\u683c\u5c31\u53ef\u4ee5\u5f97\u5230\u91cc\u9762\u7684\u610f\u601d\u4e86\u3002\u4f60\u53ef\u4ee5\u5e2e\u5c0f\u65b9\u5b9e\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u5417^_^", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6570\u5b57N\u8868\u793a\u5c0f\u5218\u7ed9\u51fa\u7684\u5b57\u7b26\u4e32\u7684\u6570\u76ee\uff0c\u63a5\u4e0b\u6765N\u884c\u6bcf\u4e00\u884c\u6709\u4e00\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32 \u7531\u6570\u5b57\u548c\u82f1\u6587\u5b57\u7b26\u548c\u5176\u4ed6\u5b57\u7b26\u53ca\u7a7a\u683c\u7ec4\u6210\u3002\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6570\u76ee\u4e0d\u4f1a\u8d85\u8fc71000\u4e2a\u3002", "output_description": "\u8bf7\u4f60\u6309\u7167\u5c0f\u65b9\u7684\u65b9\u6cd5\u8f93\u51fa\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002", "samples": "[{\"input\": \"4\\nfsadfg\\n^_^\\n1231 32po\\n236s0fgam dsr\", \"output\": \"fsadfg\\n\\nbcdb dcpo\\ncdgsafgam dsr\"}]", "test_case_id": "1641", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 358, "total_accepted_number": 83, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1642, "fields": {"title": "\u6570\u661f\u661f", "description": "SmartEgg\u559c\u6b22\u6570\u661f\u661f\uff0c\u5929\u5929\u665a\u4e0a\u7ad9\u5728\u9633\u53f0\u4e0a\u6570\u554a\u6570\uff0c\u4e00\u6570\u5c31\u6570\u5230\u5929\u4eae\u3002<p></p>\u4ed6\u4ece\u5c0f\u6570\u5230\u5927,\u6570\u4e86n\u5929\u3002<p></p>\u4ed6\u60f3\u77e5\u9053\u603b\u5171\u6709\u591a\u5c11\u5929\u7684\u661f\u661f\u6570\u76ee\u662f\u4e0d\u540c\u7684\uff0c\u4f60\u80fd\u5e2e\u4ed6\u89e3\u51b3\u4e48\uff1f<p></p>\u6bd4\u5982 \u6709\u5982\u4e0b\u6570\u636en=8888<p></p>Day1: 0000010000<p></p>Day2: 0100000000<p></p>Day3: 900003<p></p>Day4\u5230Day8888\u65e0\u661f\u661f\u3002 <p></p>\u5171\u67090,10000,100000000,900003\u56db\u79cd\u53ef\u80fd\u3002<p></p>", "input_description": "\u7b2c\u4e00\u884c\u7ed9\u51fa\u6d4b\u8bd5\u6570\u636e\u4e2a\u6570 T,T<=10\n\u63a5\u4e0b\u6765\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\u7ed9\u51fa\u5929\u6570n,0<n<=1024\n\u63a5\u4e0b\u6765n\u884c,\u6bcf\u884c\u7ed9\u51fa\u4e00\u4e2a\u6570\u5b57,\u6570\u5b57\u7684\u957f\u5ea6<=10\u5e76\u4e14\u975e0\n", "output_description": "\u5bf9\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e,\u8f93\u51fa\u4e0d\u540c\u6570\u5b57\u7684\u4e2a\u6570,\u5e76\u6362\u884c.", "samples": "[{\"input\": \"2\\n2\\n0001\\n1\\n3\\n0002\\n2\\n000000031\\n\", \"output\": \"1\\n2\\n\"}]", "test_case_id": "1642", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 189, "total_accepted_number": 73, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1643, "fields": {"title": "\u9ec4\u91d1\u5206\u9694\u6570\u5217", "description": "\u6709\u4e00\u4e2a&quot;\u9ec4\u91d1\u5206\u9694\u6570\u5217&quot;\uff1a2/1,3/2,5/3,8/5,13/8...,\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570n\uff0c\u8bf7\u4f60\u8f93\u51fa\u5927\u4e8en\u7684\u6700\u5c0f\u9ec4\u91d1\u5206\u5272\u6570\u5217\u548c\uff0c\u5e76\u8f93\u51fa\u603b\u5171\u6709\u591a\u5c11\u9879\uff1f", "input_description": "\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T(1<T<=100),\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\uff1b\n\u6bcf\u7ec4\u6570\u636e\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570n(2 \u2264 n \u2264 1000)\uff1b", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\uff0c\u5206\u522b\u662f\u5927\u4e8en\u7684\u6700\u5c0f\u9ec4\u91d1\u5206\u5272\u6570\u5217\u548c\u4ee5\u53ca\u6570\u5217\u7684\u603b\u5171\u7684\u9879\u6570,\u5e76\u7528\u7a7a\u683c\u5206\u5f00\u3002(\u9ec4\u91d1\u6570\u5217\u548c\u4fdd\u7559\u5c0f\u6570\u70b9\u540e4\u4f4d)\nSample Input", "samples": "[{\"input\": \"3\\n3\\n10\\n100\", \"output\": \"3.5000 2\\n10.0071 6\\n100.6177 62\"}]", "test_case_id": "1643", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 144, "total_accepted_number": 60, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1644, "fields": {"title": "\u8089\u5939\u998d", "description": "SmartEgg\u559c\u6b22\u5403\u96f6\u98df\uff0c\u6700\u8fd1\u8ff7\u4e0a\u4e86\u5317\u533a\u4e00\u5bb6\u5e97\uff0c\u5e97\u91cc\u53ea\u6709\u201c\u997c\u201d\uff0c\u201c\u86cb\u201d,\u201d\u8089\u201d\u8fd9\u4e9b\u6750\u6599<p></p>\u5e97\u4e3b\u5356\u6cd5\u5982\u4e0b<p></p>\u5356\u6cd5\u4e00\uff1a 1.5 \u5355\u4f4d\u91d1\u94b1\u4e24\u4e2a\u201d\u997c\u201d<p></p>\u5356\u6cd5\u4e8c\uff1a 1.5 \u5355\u4f4d\u91d1\u94b1\u5e01\u4e24\u4e2a\u201d\u9e21\u86cb\u201d<p></p>\u5356\u6cd5\u4e09\uff1a 1.5 \u5355\u4f4d\u91d1\u94b1\u4e00\u4e2a\u201d\u997c\u201d\u52a0\u4e00\u4e2a\u201d\u9e21\u86cb\u201d<p></p>\u5356\u6cd5\u56db\uff1a 2.5 \u5355\u4f4d\u91d1\u94b1\u4e00\u4e2a\u201d\u997c\u201d\u52a0\u4e00\u5355\u4f4d\u201d\u8089\u201d<p></p>\u5356\u6cd5\u4e94:  3.0 \u5355\u4f4d\u91d1\u94b1\u4e00\u4e2a\u201d\u997c\u201d\u52a0\u4e00\u4e2a\u201d\u9e21\u86cb\u201d\u52a0\u4e00\u5355\u4f4d\u201d\u8089\u201d.<p></p>\u73b0\u5728SmartEgg\u6709 M \u5355\u4f4d\u91d1\u94b1\u800c\u4ed6\u60f3\u81f3\u5c11\u5403\u5230 a\u4e2a\u997c \uff0cb\u4e2a\u201d\u9e21\u86cb\u201d,c\u5355\u4f4d\u201c\u8089\u201d .<p></p>\u4f46\u4e0d\u77e5\u9053\u53ef\u4e0d\u53ef\u4ee5\uff0c\u5982\u4f55\u53ef\u4ee5 \uff0c \u53ef\u4ee5\u8f93\u51fa\u201cYES\u201d,\u5426\u5219\u8f93\u51fa\u201cNO\u201d<p></p>a,b,c\u4e3a\u6574\u6570\uff0c\u4e140&lt;=a,b,c&lt;=10\u800cM\u662f\u6d6e\u70b9\u65700.0&lt;=M&lt;=10.0<p></p>\u6ce8\u610f,\u53ea\u6709\u8fd95\u79cd\u5356\u6cd5\u3002 <p></p>\u6bd4\u5982\u5982\u679c\u60f3\u54030\u4e2a\u997c \uff0c0\u4e2a\u201d\u9e21\u86cb\u201d ,1\u5355\u4f4d\u201c\u8089\u201d ,\u53ea\u80fd\u7528\u201d\u5356\u6cd54\u201d\u6216\u201d\u5356\u6cd55\u201d,\u82b1\u8d39 2.5 \u6216 3.0\u5355\u4f4d\u91d1\u94b1<p></p>", "input_description": "\u7b2c\u4e00\u884c\u7ed9\u51fa\u6d4b\u8bd5\u6570\u636e\u4e2a\u6570  T    T \u2264100\n\u63a5\u4e0b\u6765\u6709T\u884c\uff0c\u6bcf\u884c\u5206\u522b\u7ed9\u51fa M  a  b  c\n", "output_description": "\u5171T\u884c\uff0c\u5bf9\u5e94\u8f93\u5165\u7684\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u201dYES\u201d\u6216\u201dNO\u201d,\u6ce8\u610f\u6bcf\u6b21\u8f93\u51fa\u5b8c\u6bd5\u90fd\u8981\u6362\u884c", "samples": "[{\"input\": \"3\\n0.155   1  1  1\\n10.766  10 10 10\\n0.123   0  0  0\\n\", \"output\": \"NO\t \t\\nNO\\nYES\\n\"}]", "test_case_id": "1644", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 158, "total_accepted_number": 53, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1645, "fields": {"title": "\u97f6\u534eE\u66f2", "description": "\u8f6f\u4ef6\u5b66\u96622010\u5e74\u7684\u5143\u65e6\u66a8\u8fce\u65b0\u665a\u4f1a\u5728\u4e00\u98df\u5802\u5706\u6ee1\u843d\u4e0b\u4e86\u5e37\u5e55\uff0c\u6574\u573a\u665a\u4f1a\u8f7d\u6b4c\u8f7d\u821e\uff0c\u6240\u6709\u4eba\u90fd\u70ed\u60c5\u9ad8\u6da8\uff0c\u5145\u5206\u5c55\u73b0\u5148\u4e86\u8f6f\u4ef6\u8398\u8398\u5b66\u5b50\u591a\u624d\u591a\u827a\u3002\u4f46\u662f\uff0c\u6240\u8c13\u53f0\u4e0a\u4e00\u5206\u949f\uff0c\u53f0\u4e0b\u5341\u5e74\u529f\u3002\u6240\u6709\u5de5\u4f5c\u4eba\u5458\u5728\u5e55\u540e\u4ed8\u51fa\u4e86\u5f88\u591a\uff0c\u5c24\u5176\u662f\u4e0a\u53f0\u6f14\u51fa\u7684\u6f14\u5458\u4eec,\u52aa\u529b\u5730\u6392\u7ec3\u8282\u76ee\u3002YQ\u540c\u5b66\u4e00\u76f4\u6709\u53e5\u8bdd\u5bf9\u4ed6\uff08\u5979\uff09\u4eec\u8bf4\uff0c\u4f46\u662f\u4ed6\u8bf4\u7684\u662f\u8bb8\u591a\u6570\u5b57\uff0c\u8bf7\u4f60\u7ffb\u8bd1\u4e0b\u6210\u82f1\u6587\u5427(ASSIC\u7801)\u3002", "input_description": "\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T(2\u2264T\u2264100),\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\u3002\n\u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570N(2\u2264N\u22641000),\u8868\u793a\u8981\u4f60\u7ffb\u8bd1\u7684\u6574\u6570\u7684\u4e2a\u6570\u3002\n\u63a5\u4e0b\u6765\u4e00\u884c\u5305\u542bN\u4e2a\u6574\u6570a(32\u2264a\u2264122)\uff0c\u8868\u793a\u8981\u4f60\u7ffb\u8bd1\u7684\u6210\u5b57\u7b26\u7684\u6574\u6570\u3002", "output_description": "\u6bcf\u4e00\u7ec4\u60c5\u51b5\u8f93\u51fa\u7ffb\u8bd1\u51fa\u6765\u7684\u90a3\u53e5\u82f1\u6587\u3002", "samples": "[{\"input\": \"2\\n28\\n89 111 117 114 32 112 101 114 102 111 114 109 97 110 99 101 32 105 115 32 115 111 32 110 105 99 101 33\\n63\\n77 97 107 101 32 121 111 117 114 32 101 102 102 111 114 116 115 32 116 111 32 115 111 108 118 101 32 97 108 108 32 116 104 101 32 112 114 111 98 108 101 109 115 44 103 111 111 100 32 108 117 99 107 32 119 105 116 104 32 121 111 117 46\", \"output\": \"Your performance is so nice!\\nMake your efforts to solve all the problems,good luck with you.\"}]", "test_case_id": "1645", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 203, "total_accepted_number": 108, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1646, "fields": {"title": "\u6c49\u8bfa\u5854", "description": "\u4e3a\u4e86\u51c6\u5907\u8f6f\u4ef6\u5b66\u9662\u7684\u5b9e\u9a8c\u7ade\u8d5b\u6708\u3002\u5c0f\u5218\u548c\u5c0f\u859b\u60f3\u53c2\u52a0\u5176\u4e2d\u4e00\u4e2a\u5173\u4e8e\u6c49\u8bfa\u5854\u7684\u95ee\u9898\u6c42\u89e3\uff0c\u5c31\u662f\u6a21\u62df\u6c49\u8bfa\u5854\u7684\u89e3\u6cd5\u3002\u4f46\u662f\u4ed6\u4eec\u4fe9\u90fd\u4e0d\u4f1a\uff0c\u4e8e\u662f\u4ed6\u4eec\u627e\u5230\u4f60\u5e2e\u5fd9\uff0c\u4f60\u80fd\u5e2e\u52a9\u4ed6\u4eec\u5417\uff1f\u89e3\u6cd5\u9700\u8981\u662f\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u3002<p></p><p></p>\u9898\u76ee\u662f\u8fd9\u6837\u7684\uff1a\u6709\u4e09\u4e2a\u5854\uff0cA\u3001B\u3001C\uff0c\u8fd8\u6709\u4e00\u7ec4\u4e0d\u540c\u5927\u5c0f\u7684\u5706\u76d8\u3002\u5f00\u59cb\u65f6\uff0c\u6240\u6709\u5706\u76d8\u90fd\u5728A\u4e0a\u3002\u9700\u8981\u5c06\u6240\u6709\u5706\u76d8\u4eceA\u79fb\u52a8\u5230C\u4e0a\uff0c\u4ee5B\u4e3a\u4e2d\u95f4\u5a92\u4ecb\u3002\u540c\u65f6\u8981\u9075\u5faa\u4e24\u4e2a\u539f\u5219\uff1a1\u3001\u4e00\u6b21\u53ea\u80fd\u79fb\u52a8\u4e00\u4e2a\u5706\u76d8\uff0c2\u3001\u8f83\u5927\u7684\u5706\u76d8\u4e0d\u53ef\u4ee5\u5728\u8f83\u5c0f\u7684\u5706\u76d8\u4e4b\u4e0a\u3002", "input_description": "\u7b2c\u4e00\u884c\u7ed9\u51fa\u6d4b\u8bd5\u6570\u636e\u4e2a\u6570T\uff0cT\u226410\uff1b\n\u63a5\u4e0b\u6765\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\u7ed9\u51fa\u5706\u76d8\u6570n\uff0c1\u2264n\u22647\u3002", "output_description": "\u5bf9\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\n\u7b2c\u4e00\u884c\u8f93\u51fa \u79fb\u52a8\u6b21\u6570 m\n\u63a5\u4e0b\u6765m \u884c\uff0c\u6bcf\u884c\u6253\u5370\u51fa \"k1 to k2\",\u8868\u793a\u4ecek1\u5854 \u79fb\u5230 k2\u5854", "samples": "[{\"input\": \"3\\n1\\n2\\n3\", \"output\": \"1\\nA to C\\n3\\nA to B\\nA to C\\nB to C\\n7\\nA to C\\nA to B\\nC to B\\nA to C\\nB to A\\nB to C\\nA to C\"}]", "test_case_id": "1646", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 198, "total_accepted_number": 81, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1647, "fields": {"title": "\u542c\u5988\u5988\u7684\u8bdd", "description": "\u6709\u4e00\u5929\uff0c6\u5c81\u7684YQ\u540c\u5b66\u548c\u5988\u5988\u8d70\u6563\u4e86\uff0c\u4ed6\u4e0d\u8ba4\u8bc6\u56de\u5bb6\u7684\u8def\u3002\u7ad9\u5728\u5341\u5b57\u8def\u53e3\u7684\u4ed6\u53ea\u8bb0\u5f97\u66fe\u7ecf\u5988\u5988\u66fe\u5bf9\u4ed6\u8bf4\u8fc7\uff1a\u201c\u6211\u4eec\u7684\u5bb6\u5728\u662f\u8ddd\u79bb\u4f60\u6700\u8fd1\u7684\u5730\u65b9\uff01\u201d\u6240\u4ee5\u4ed6\u575a\u4fe1\u53ea\u8981\u81ea\u5df1\u5728\u6bcf\u4e2a\u5341\u5b57\u8def\u53e3\u9009\u62e9\u79bb\u5bb6\u6700\u8fd1\u7684\u4e00\u6761\u8def\u4e00\u5b9a\u80fd\u56de\u5230\u5bb6\u3002\u4f46\u662f\uff0c\u6bcf\u4e2a\u5341\u5b57\u8def\u53e3\u90fd\u67094\u4e2a\u65b9\u5411\uff0c\u4e1c\u3001\u5357\u3001\u897f\u3001\u5317\uff0c\uff08\u6cbfX\u8f74\u6b63\u5411\u4e3a\u4e1c\uff0c\u6cbfX\u8f74\u8d1f\u5411\u4e3a\u897f\uff0c\u6cbfY\u8f74\u6b63\u5411\u4e3a\u5317\uff0c\u6cbfY\u8f74\u8d1f\u5411\u4e3a\u5357,\u5e76\u4e14\u5047\u8bbeYQ\u4e0d\u4f1a\u8d70\u56de\u5934\u8def\uff09\u6bcf\u4e2a\u65b9\u5411\u90fd\u6709\u4e00\u4e2a\u8def\u6807\u5206\u522b\u8868\u793a\u8fd9\u4e2a\u6cbf\u8fd9\u4e2a\u65b9\u5411\u8d70\u5230\u4e0b\u4e2a\u8def\u53e3\u7684\u8ddd\u79bb\u3002\u5df2\u77e5\uff0cYQ\u540c\u5b66\u7684\u521d\u59cb\u5750\u6807x,y(x,y\u4e3a\u6574\u6570),\u5341\u5b57\u8def\u53e3\u7684\u4e2a\u6570\uff08\u5305\u62ecYQ\u4e00\u5f00\u59cb\u6240\u5728\u7684\u5341\u5b57\u8def\u53e3\uff09\u4ee5\u53ca\u6bcf\u4e2a\u8def\u53e3\u76844\u4e2a\u8def\u6807\uff0c\u8bf7\u5e2e\u52a9YQ\u5c0f\u540c\u5b66\u627e\u5230\u4ed6\u5bb6\u5427\u3002", "input_description": "\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T(2\u2264T\u226410)\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\uff1b\n\u6bcf\u7ec4\u6570\u636e\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570x,y(-1000000\u2264x,y\u22641000000),\u8868\u793aYQ\u540c\u5b66\u7684\u521d\u59cb\u4f4d\u7f6e\u3002\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u7b2c\u4e8c\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570N(1\u2264N\u2264100),\u8868\u793a\u8def\u53e3\u7684\u4e2a\u6570\u3002\n\u63a5\u4e0b\u6765\u6709N\u884c\uff0c\u6bcf\u884c\u5305\u62ec4\u4e2a\u6b63\u6574\u6570a1,a2,a3,a4,(1\u2264a1,a2,a3,a4\u22641000)\u5206\u522b\u8868\u793a\u6cbf\u4e1c\uff0c\u5357\uff0c\u897f\uff0c\u5317\u65b9\u5411\u79bb\u5bb6\u7684\u8ddd\u79bb.\u5047\u8bbea1,a2,a3,a4\u4e24\u4e24\u4e0d\u76f8\u540c\u3002", "output_description": "\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51faYQ\u5bb6\u7684\u5750\u6807\uff082\u7ef4\uff09;", "samples": "[{\"input\": \"1\\n2 3\\n3\\n2 3 4 5\\n5 4 3 2\\n2 1 3 4\", \"output\": \"6 5\"}]", "test_case_id": "1647", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 64, "total_accepted_number": 16, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1648, "fields": {"title": "\u5154\u5154", "description": "DestinyDesigner\u4e3a\u4e86\u7814\u7a76\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u4eb2\u81ea\u5230\u4e00\u4e2a\u5c9b\u4e0a\u91cd\u65b0\u505a\u4e86\u8fd9\u4e2a\u5b9e\u9a8c\uff0c\u4e8e\u662f\uff0c\u8fd9\u4e2a\u5c9b\uff08\u540e\u6765\u88ab\u79f0\u4f5c\u201c\u5154\u5b50\u5c9b\u201d\uff09\u4e0a\u51fa\u73b0\u4e86\u5f88\u591a\u5154\u5b50\u3002DestinyDesigner\u7ed9\u8fd9\u4e9b\u5154\u5b50\u90fd\u53d6\u4e86\u540d\u5b57\uff0c\u540d\u5b57\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\uff08\u5154\u5b50\u7684\u540d\u5b57\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e20\uff09\u3002\u6709\u4e00\u5929\uff0c\u4ed6\u53d1\u73b0\u8fd9\u4e9b\u5154\u5b50\u559c\u6b22\u4e00\u7fa4\u4e00\u7fa4\u5730\u805a\u5728\u4e00\u8d77\u3002\u4ed6\u6ce8\u610f\u5230\uff0c\u805a\u5728\u4e00\u8d77\u7684\u5154\u5b50\u6709\u4e2a\u7279\u70b9\uff0c\u5c31\u662f\u540d\u5b57\u7531\u76f8\u540c\u7684\u5b57\u6bcd\u7ec4\u6210\u3002\u6bd4\u5982\uff0c\u4e00\u53ea\u5154\u5b50\u7684\u540d\u5b57\u53eb\u201cxilige\u201d\uff0c\u4e00\u53ea\u5154\u5b50\u53eb\u201cgexili\u201d\uff0c\u4e00\u53ea\u5154\u5b50\u53eb\u201cxigeli\u201d\uff0c\u90a3\u4e48\u8fd93\u53ea\u5154\u5b50\u5c31\u4f1a\u805a\u5728\u4e00\u8d77\u3002<p></p>\u7531\u4e8e\u5c9b\u4e0a\u7684\u5154\u5b50\u592a\u591a\u4e86\uff08\u6570\u76ee\u5c0f\u4e8e100,000\uff09\uff0cDestinyDesigner\u60f3\u8bf7\u4f60\u5e2e\u4e2a\u5fd9\uff0c\u5e0c\u671b\u4f60\u80fd\u628a\u5c9b\u4e0a\u6240\u6709\u7684\u5154\u5b50\u6309\u4e0a\u8ff0\u89c4\u5219\u5206\u7ec4\uff0c\u5e76\u8bb0\u5f55\u6bcf\u7ec4\u5154\u5b50\u7684\u6570\u76ee\uff0c\u6700\u540e\uff0c\u5c06\u5206\u7ec4\u6309\u5154\u5b50\u6570\u76ee\u4ece\u5c0f\u5230\u5927\u6392\u5217\u8f93\u51fa\u3002\u5177\u4f53\u683c\u5f0f\u8bf7\u770b\u6837\u4f8b\u3002<p></p>", "input_description": "\u8f93\u5165\u6587\u4ef6\u6709\u5f88\u591a\u6d4b\u8bd5\u6570\u636e\uff0c\u9700\u8981\u8bfb\u5230\u6587\u4ef6\u7ed3\u5c3e\u3002\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7531\u4e00\u4e2a\u6574\u6570N\u5f00\u59cb\u3002\u63a5\u4e0b\u6765\u7684\u5404\u884c\u662fN\u4e2a\u5154\u5b50\u7684\u540d\u5b57\u3002", "output_description": "\u8bf7\u6309\u6837\u4f8b\u683c\u5f0f\u8f93\u51fa\u3002", "samples": "[{\"input\": \"12\\nboat jackson abcd hire bunny kitty\\nsajkcon bcad rihe baot bunyn Jerry\\n10\\nabcd abdc abcd acbd adbc\\nbcde ecbd becd cedb dbce\", \"output\": \"Task #1:\\n-->Group #1 has 1 bunny.\\n-->Group #2 has 1 bunny.\\n-->Group #3 has 2 bunnies.\\n-->Group #4 has 2 bunnies.\\n-->Group #5 has 2 bunnies.\\n-->Group #6 has 2 bunnies.\\n-->Group #7 has 2 bunnies.\\nTask #2:\\n-->Group #1 has 5 bunnies.\\n-->Group #2 has 5 bunnies.\"}]", "test_case_id": "1648", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 145, "total_accepted_number": 30, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1649, "fields": {"title": "Utopia", "description": "Utopia is a wonderful world. In this world, everyone is equal. But, you know, that everyone is equal is so hard to become true. So, there are some differences more or less. One day, a man think if there are some differences, so what class of his own?<p></p>There are n(n &lt; 2^24) people in Utopia and everyone has M(M&lt;100,000) Udollar. Please make a list so the people can find them own class.<p></p><p></p>", "input_description": "There is only one case and each line has a number M.", "output_description": "The first line is the number of people (n < 2^24).\nThe following line is the list.", "samples": "[{\"input\": \"1 \\n2\\n3\\n4\\n5\\n6\\n7\\n19\\n30\", \"output\": \"9\\n30\\n19\\n7\\n6\\n5\\n4\\n3\\n2\\n1\"}]", "test_case_id": "1649", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1650, "fields": {"title": "Baskets and Balls", "description": "DD is a ACMer and he is not good at playing basketball but coding. The other day DD attended the interview of Tencent and the interviewer asked him a question: There are N balls that you should put them in some different baskets. Then, give you a number M (1 &lt;= M &lt;= N)arbitrarily and you should choose some baskets that the sum of the balls in these baskets is M. Immediately DD thought that he can put N balls in N baskets and each baskets contain one ball and choose M baskets. But the interviewer asked: How many baskets you will use least? In order to be a Summer Intern of Tencent, DD thought he must solve this problem and he did. Now, DD want to know that can you solve this simple problem?", "input_description": "There are multiple cases.\nEach case contain only one positive integer N(1 <= N <= 2,147,483,647).", "output_description": "You should output one answer per line.", "samples": "[{\"input\": \"100\", \"output\": \"7\"}]", "test_case_id": "1650", "hint": "You can divide 100 balls into 1, 2, 3, 6, 13, 25, 50. Then, you can use these numbers to constitute EACH NUMBER between 1 and 100.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 166, "total_accepted_number": 43, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1652, "fields": {"title": "Fantasy Permutation", "description": "Given an array a[1], a[2], \u2026, a[n-1], a[n], we define its fantasy value is the sum of f(i). For each a[i], if the absolute value of a[i] have the same parity with i, then f(i) = a[i]*i, else f(i) = i+a[i].<p></p>Now, give you n integers, can you find the largest fantasy value in the all permutations of the n integers?<p></p>", "input_description": "The first line is the number of test cases  T (T < 30).\nFor each test case, the first line is an integer n (n < 20). Then there are n integers a[1], a[2], \u2026, a[n-1], a[n] (-100 <= a[i] <= 100).\n", "output_description": "For each test case, output the largest fantasy value.", "samples": "[{\"input\": \"1\\n3\\n-1 2 3\\n\", \"output\": \"13\"}]", "test_case_id": "1652", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 159, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1654, "fields": {"title": "Bit Operation", "description": "Now, you are work on a 32bit computer. You need set the X-th bit of register R to 0(the least significant bit is 0-th bit and the most significant bit is 31-th bit) and set the bits from Y-th to (Y-2)-th bit to 110(from from high bit to low bit). The other bits are not change. To given register R and X, Y, please output the answer.", "input_description": "There are multiple case.\nFor each case, it contain R(00000000H <= R <= FFFFFFFFH), X(0 <= x <= 31), Y(2 <= Y <= 31) and R is hexadecimal and others are decimal.", "output_description": "For each case, please output only one line that contain the changed R.", "samples": "[{\"input\": \"ABCDEF78 0 3\\n1f40 9 19\", \"output\": \"ABCDEF7C\\nC1D40\"}]", "test_case_id": "1654", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 184, "total_accepted_number": 54, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1655, "fields": {"title": "A==B", "description": "Given two integer numbers A and B where -10^99 &lt;= A, B &lt;= 10^99.Can you tell me which is greater?", "input_description": "Input contains several test cases.\nEach case with two integer numbers : A and B. (you can assume the length of A and B will be less than 120)\n", "output_description": "Output \u201c > \u201d when A > B.\nOutput \u201c < \u201d when A < B.\nOutput \u201c = \u201d when A = B.\n", "samples": "[{\"input\": \"2\\n+641 -641\\n1 +1\\n\", \"output\": \"Test #1: >\\nTest #2: =\\n\"}]", "test_case_id": "1655", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1011, "total_accepted_number": 112, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1656, "fields": {"title": "ACMer of SWJTU in the book", "description": "The history of ACM in SWJTU is not long, but the ACMer come out one after the other, such as greeeedy, bearman, zhk, happyface, AC, LJguan, talker, Jason, lazycoder and so on. Now, a new book that introduce the history of ACM in SWJTU is published. Giving you the book, and some ACMers&#039; name, you should tell me how many names will be match in this book.", "input_description": "There are multiple case.\nEach case will contain one integer N means the number of names and N names follow. (N <= 10000)\nEach name will only contains characters 'a'-'z', and the length will be not longer than 50.\nThe last line is the book, and the length will be not longer than 1000000.", "output_description": "Print how many names are contained in the book.", "samples": "[{\"input\": \"9\\ngreeeedy\\nbearman\\nzhk\\nhappyface\\nac\\nljguan\\ntalker\\njason\\nlazycoder\\ngreeeedybearmanzhkhappyfaceacljguantalkerjasonlazycodermanzhker\\n1\\ndd\\nddd\\n\", \"output\": \"11\\n2\\n\"}]", "test_case_id": "1656", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 131, "total_accepted_number": 24, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1657, "fields": {"title": "An Old Chessboard", "description": "zhk has found an old chessboard and a set of pieces in his attic. Unfortunately, the set contains only white pieces, and apparently an incorrect number of them. A set of pieces should contain:<p></p><ul><p></p><li>One king<p></p><li>One queen<p></p><li>Two rooks<p></p><li>Two bishops<p></p><li>Two knights<p></p><li>Eight pawns<p></p><p></p>zhk would like to know how many pieces of each type he should <b>add or remove</b> to make a valid set.", "input_description": "The input consists of 6 integers on a single line, each between 0 and 10 (inclusive). The numbers are, in order, the numbers of kings, queens, rooks, bishops, knights and pawns in the set zhk found.", "output_description": "Output should consist of 6 integers on a single line; the number of pieces of each type zhk should add or remove. If a number is positive, zhk needs to add that many pieces. If a number is negative, zhk needs to remove pieces.", "samples": "[{\"input\": \"2 1 2 1 2 1\", \"output\": \"-1 0 0 1 0 7\"}]", "test_case_id": "1657", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 354, "total_accepted_number": 175, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1658, "fields": {"title": "Design Patterns", "description": "These days, Jason is learning Design Pattern.There&#039;re many patterns and some of them is very hard to understand.He focus on one pattern each day,but he may learn some patterns back and forth several times. After days of study, can you tell me how many patterns has Jason mastered?", "input_description": "The first line is a integer m,(m<=50) standing for the number of test cases.\nEach case starts with a integer n(n<=50), number of days.\nThen n lines followed.\nEach lines contains a string representing the pattern learned in that day.\nPlease note that some pattern's name may contain blank space and there are no more than 30 characters in a single name.", "output_description": "Print the number of patterns Jason have learned.\nEach line for one case.", "samples": "[{\"input\": \"2\\n3\\nSINGLETON\\nPROTOTYPE\\nPROTOTYPE\\n2\\nFACTORY METHOD\\nPROXY\", \"output\": \"2\\n2\"}]", "test_case_id": "1658", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 205, "total_accepted_number": 76, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1659, "fields": {"title": "Sport Fan", "description": "Jason is a sport fan ,so he likes watching all kinds of sport shows like &quot;English Premier league&quot; and &quot;NBA&quot;. But sometimes two shows confict with time. Jason wants to know the max number of shows he could watch. Given the start and end time of each show, can you help him? ", "input_description": "There're several testcases and each starts with a integer n (n <= 100).\nn is the number of TV programs that you like to watch.\nThen follows n lines.\nEach lines contains two integer x, y(x < y), representing the start and end time of this show.\nInput ends with  n=0.", "output_description": "Simply output the max number for each case.", "samples": "[{\"input\": \"12\\n1 3\\n3 4\\n0 7\\n3 8\\n15 19\\n15 20\\n10 15\\n8 18\\n6 12\\n5 10\\n4 14\\n2 9\\n0\", \"output\": \"5\"}]", "test_case_id": "1659", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 76, "total_accepted_number": 33, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1660, "fields": {"title": "A Simple Problem With Integers", "description": "You have N (1 \u2264 N \u2264 100000)  integers, A<sub>1</sub>, A<sub>2</sub>, ... , A<sub>N</sub>. (-1000000000 \u2264 A<sub>i</sub> \u2264 1000000000) You need to deal with two kinds of operations.<p></p><ul><p></p><li>&quot;Add a b c&quot; (1 \u2264 a \u2264 b \u2264 N; b-a \u2264 10; -10000 \u2264 c \u2264 10000) : means adding c to each of A<sub>a</sub>, A<sub>a+1</sub>, ... , A<sub>b</sub>.</li><p></p><li>&quot;Query a b c&quot; (1 \u2264 a \u2264 b \u2264 N; -10000 \u2264 c \u2264 10000) : means querying the answer of |A<sub>a</sub>-c| + |A<sub>a+1</sub>-c| + ... +  |A<sub>b</sub>-c|.</li><p></p></ul><p></p>", "input_description": "The input contains only a single test case.\nThe first line contains two numbers <i>N</i> and <i>Q</i>. (1 \u2264 <i>Q</i> \u2264 100000).\nThe second line contains <i>N</i> integers, the initial values of  <i>A<sub>1</sub>, A<sub>2</sub>, ... , A<sub>N</sub></i>.\nEach of the next <i>Q</i> lines represents an operation, \"Add <i>a b c</i>\" or \"Query <i>a b c</i>\".", "output_description": "You need to answer all \"Query <i>a b c</i>\" commands in order. One answer in a single line.", "samples": "[{\"input\": \"10 5\\n1 2 3 4 5 6 7 8 9 10\\nQuery 4 4 4\\nQuery 1 10 5\\nQuery 2 4 -1\\nAdd 3 6 3\\nQuery 2 4 7\", \"output\": \"0\\n25\\n12\\n6\\n\"}]", "test_case_id": "1660", "hint": "The answer may exceed the range of 32-bit integers.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5500, "memory_limit": 131072, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 101, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1661, "fields": {"title": "Temperature Detector", "description": "   One day, Professor Z wants to study the temperature distribution of a forest. Then he scatters many temperature detector among the forest. However, problems come. Because the detector is very small and difficult to identify, It is very easily to steped on it when a person pass, so it is very easily damaged. To protect the detectors against being damaged, he use string to enclose a polygon ground with all detectors inside or on the boundary of this polygon. He fasten the string to the trees.<p></p><p></p>   The problem is, Professor Z want to calculate the shortest string to finish this task (consider a tree as a point). It&#039;s very hard, and he has worked on this for days. Could you give him some hints?", "input_description": "The first line of the input contains one integer <i>T</i> (1 \u2264 <i>T</i> \u2264 40), which indicates the number of test cases.\nFor each test case, the first line contains two numbers <i>N</i> (3 \u2264 <i>N</i> \u2264 100) and <i>M</i> (3 \u2264 <i>M</i> \u2264 100), indicating  <i>N</i> temperature detectors and <i>M</i> trees. The next <i>N</i> lines contain the location of the <i>N</i> detectors, each line has two integers <i>x</i> and <i>y</i>, describing the <i>x</i> and <i>y</i> coordinates. The next <i>M</i> lines contain the location of the <i>M</i> trees, and also two integers <i>x</i> and <i>y</i>, describing the <i>x</i> and <i>y</i> coordinates. (-10000 \u2264 <i>x</i>, <i>y</i> \u2264 10000).\nNo two detectors located in the same place, and no two trees are planted in the same place either.", "output_description": "For each test case, the output should consist of exactly one line containing the shortest length of the string, rounded up to two fractional digits; or <tt>-1</tt> meaning there's no such polygon.", "samples": "[{\"input\": \"2\\n3 3\\n2 2\\n2 1\\n3 2\\n0 0\\n4 0\\n4 4\\n3 3\\n2 2\\n2 3\\n3 2\\n0 0\\n4 0\\n4 4\\n\", \"output\": \"13.66\\n-1\"}]", "test_case_id": "1661", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1662, "fields": {"title": "Cici's Dander", "description": "This is a old story but true...cici is angry with jason when he decide to present some difficult problems to his students again.cici want jason to relax his students but jason stick to his own opinion.Both of them are pigheaded...They call DD to help them to decide whether it is a good thing for the students to work on jason&#039;s problems.DD is gambler he want to solve this matter by gambling.At the beginning cici has N yuan and jason have M yuan,DD hold a black bag which is filled with B blue balls and R red balls.Now our game begin:DD take a ball from the bag,if the ball is blue jason take one yuan from cici,else if the ball is red,cici take one yuan from jason.after jason(cici) take one yuan from the other one,DD put the ball into the bag again.the gumble ends if one of them have no money.Here I want you to tell me how many times should DD take ball from the bag when gumble ends.", "input_description": "The first line of the input file contains a single integer t (1<=t<=5000), the number of test cases.Then t cases follows. Each test case contains 4 integers M and N(1<=N,M<=10000),B and R(1<=B,R<=1000),number of blue and red balls in the bag.", "output_description": "please output one integer represents the expected times of the gambing.", "samples": "[{\"input\": \"1\\n1 1 1 1\", \"output\": \"1\"}]", "test_case_id": "1662", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 32, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1663, "fields": {"title": "Obelisk_Tormentor's Area", "description": "As we all kown in Yu-Gi-Oh!-ANB(a very popular cartoon in japan),there exist 3 godlike monsters.They are Obelisk_Tormentor,Slifer_Sky Dragon and Apllo_Azhdarcho.Slifer_Sky Dragon is hostile to Apllo_Azhdarcho and they have clashed with each other for a long time. In Aiolly(the place they live),Apllo_Azhdarcho and Slifer_sky Dragon have their own domains.We define the domains as follow:there are N points in Aiolly and some edges with differet power.Be care that every two point are connected by a edge.We define The edge with fire as EF,the edge with light as EL.Fire is the ability of Slifer_Sky Dragon and light is ability of Apllo_Azhdarcho.A safe area is a triangle consist of 3 edges with same power.Now Obilisk_Tormentor get involed in the conflict of them,he want to find how many safe areas he can hit in.In order to simplify this problem,we just use the edge with fire.<p></p>", "input_description": "The first line contains two integers N(3<=N<=10000) and M(0<=M<=1000000).Then follow M line,and the i-th line contains two integers: A,B, represents there is one edge with fire connects the two points A and B.(1<=A,B<=N)\n", "output_description": "please output one integer represents the number of safe areas.", "samples": "[{\"input\": \"3 2\\n1 2\\n2 3\\n\", \"output\": \"0\"}]", "test_case_id": "1663", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 22, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1664, "fields": {"title": "Hierarch-Number", "description": "Loda likes to play some yawnful number problems with Nireyflip because Nireyflip can always make fun from them...One day Loda discover a problem.He define that a number N&#039;s LD as follow:LD(N)=N+(digit sum of N),and we call N is father of LD(N).for example,LD(1)=2 and 1 is father of 2,LD(2)=4 and 2 is fatherof 4,LD(19)=29...we can also write LD(2) as LD(LD(1)).If a number has no father Loda call it Hierarch-Number(here you can guess the meaning of hierarch^_^).Now Nireyflip want to solve 2 problem:<p></p>First:if he get a number K,he want to kown how many Hierarch-Numbers is less than K.<p></p>Second:if he get a number L,he want to kown what the L-th Hierarch-Number is.<p></p>", "input_description": "First line contain 2 numbers:K(1<=K<=10000000),NL(1<=NL<=50000)\nNext one line contain NL numbers:s[1],s[2],s[3]....s[NL] delimited by space.Each s[i](1<=s[i]<=K).", "output_description": "At first line please output a number represent the total number in interval [1--K],secont line must contain NL numbers:Hierarch-numberp[s[1]]...Hierarch-numberp[s[NL]].", "samples": "[{\"input\": \"2 1\\n1\", \"output\": \"1\\n1\"}]", "test_case_id": "1664", "hint": "Nireyflip promise to you he won&#039;t present a disgusting problem as this one to you any more^_^", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 1000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 13, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1665, "fields": {"title": "Square Intersected", "description": "Morphine is one of my friend studying computer graphics.One day he make a work and show to me:a grid is formed A rows and B columns.He define the point left-bottom is (0,0) and the point right-top is (a,b).Then he draw a line to connect the two points described above.It is easy to find how many square the line intersects.<p></p>But I am curious about how many differet dot (a,b) satisfy if I am given the number of squares which is intersected.", "input_description": "The first line of input contains an integer C(1<=C<=200) specifying the number of test cases.Each of the follow C line contains a positive integer N.(0<=N<=1000000000000000)", "output_description": "For each test case output one line with one integer:the number of differet dot.", "samples": "[{\"input\": \"1\\n1\", \"output\": \"1\"}]", "test_case_id": "1665", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 57, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1666, "fields": {"title": "SWJTU in 3060", "description": "SWJTU in the year 3060(I wander wether there 3060 exits) - it is so densely populated that its old two-dimensional grid of streets and avenues fails to provide enough space for all the traditional vehicles such as cars, bicycles, motocicles or busses.Accordingly,one smart scientist discover an new space graph call 3D. The newly developed 3D-Jetfire become very popular and accepted, because they allow to pass the traffic jams on the ground by flying in the air. It is really cool right?After a series of horrible accidents caused by 3D-Jetfire cutting a corner, SWJTU authorities have put into place new regulations of air traffic and are determined to enforce them rigorously. The key point of these regulations is that 3D-Jetfire must follow virtual airways on a three-dimensional rectangular grid, easy enough for the the students of SWJTU who had to use the two-dimensional rectangular grid of roads on the ground all their life. <p></p>ok,my nonsense is over,here comes the question.Chunyang Chen own a company that rents out 3D-Jetfire. As 3D-Jetfire are in such an early state of development,they are far from being economical. So your customers keep running out of petrol at all the wrong places,and you need a system to inform them about their current range at all times. You may assume that travelling from one intersection to the next in the grid takes one unit of petrol, no matter if the customer is moving horizontally or vertically, up or down. You may also assume that your student is located at some intersection where his or her movements are not restricted by the ground or other obstacles, but just by the amount of remaining petrol. <p></p>Given the amount of petrol, provide a graphical representation of all the possible intersections in the range of your students, along with the amount of petrol that is needed to go there.", "input_description": "The first line of the input contains the number of scenarios. For each scenario, there is a line containing the units of remaining petrol, i.e an integer u satisfying 0 <= u <= 9. If more than 9 units of petrol remain, the students will ignore the display anyway.", "output_description": "Start the output for each scenario with a line containing \"Scenario #i:\", where i is the number of the scenario starting at 1. Then print a graphical (or rather textual) representation of all intersections that can be reached with the given amount of petrol, along with the units of petrol necessary to go there. In this graphical representation, print the slices of the smallest axis-aligned three-dimensional cube containing all the intersections in the range, and label the slices from the bottom to the top starting at 1. For each slice,start the output with a line containing \"slice #s:\", where s is the number of the slice. In the lines that follow, print a graphical representation of all the intersections in that slice, using the digits 0 to 9 for intersections in the range, representing the amount of petrol necessary to go there, and the dot \".\" for intersections not in the range.\nPrint an additional blank line after each scenario.", "samples": "[{\"input\": \"1\\n0\", \"output\": \"Scenario #1:\\nslice #1:\\n0\\n\"}]", "test_case_id": "1666", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 30000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1667, "fields": {"title": "Rotating Water", "description": "Given you a radius of R meters, H meters high glass. There is V m<sup>3</sup> of water in it. Could you tell me that the water will overflow or not, when the water is rotating at uniform W (rad/s) angular velocity in this glass.<p></p>", "input_description": "The first line of the input contains a integer <i>T</i>, indicating the number of test cases.\nEach test case contains a single line, containing four real numbers, <i>R</i>, <i>H</i>, <i>V</i> and <i>W</i>.\n(0 < <i>R, H, V</i> \u2264 10<sup>6</sup>, 0 \u2264 W \u2264 10<sup>6</sup>, <i>V</i> \u2264 <i>PI*R*R*H</i>)", "output_description": "For each test case, if the water will overflow, print \"Yes\" in a single line, or print \"No\" in a single line.", "samples": "[{\"input\": \"4\\n1 1 1 0\\n1 1 1 3\\n1 1 1 8\\n1.01 5.07 3.78 16.18\", \"output\": \"No\\nNo\\nYes\\nYes\"}]", "test_case_id": "1667", "hint": "PI = 3.1415926535897932384626433832795;\\ng = 9.8", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 35, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1668, "fields": {"title": "Trinary Number", "description": "Maybe you want to ask &quot;What is the trinary numbers?&quot; For example, Binary is based on two, while the decimal number is based on ten, so the trinary number is based on three. For example, the decimal number 3 is 10 in trinary form. Your task, it is to transform a fraction which be presented in the form &#039;x/y&#039; and the value is limited in 0 to 1 into trinary form.", "input_description": "The first line of the input contains a single integer T (0 < T < 1000), indicating the number of test cases.\nFor each test case, there is a fraction pre line, each consist of numerator and denominator which separated by a slash without any blanks. (0 < x < y < 100)", "output_description": "For each test case, print a transformed fraction from decimal to trinary form beginning with a point per line.", "samples": "[{\"input\": \"4\\n1/3\\n1/4\\n1/6\\n7/8\\n\", \"output\": \".1000000000\\n.0202020202\\n.0111111111\\n.2121212121\"}]", "test_case_id": "1668", "hint": "i think this problem do not consider Carry-Problems(\u8fdb\u4f4d\u95ee\u9898), for the 4th case, we know that \\n7/8 = .2121212121212121212....\\nwhich we should print it like this:    .2121212122\\n\\n(you can ignore this & noted by wuhanzhou)", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 260, "total_accepted_number": 74, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1669, "fields": {"title": "Find all sums", "description": "Given a specified  total and a list of  integers, find all sums from the list that add up to the total. For example if  the specified total is 4 and the list is 4 3 2 2 1 1, then we find<p></p><p></p>Sums of 4:<p></p>4<p></p>3+1<p></p>2+2<p></p>2+1+1", "input_description": "The first line of the input contains a single integer <i>T</i> (1 \u2264 <i>T</i> \u2264 50), indicating the input containing <i>T</i> number of lists. The data for each list will occupy two lines. The first of the two lines contains the specified total and the length of the list. The second line contains the list itself. All numbers will be separated by one or more blanks. The numbers in each list appear is decreasing order, but there may be repetitions.\nThere will be at most 12 entries in each list, and each entry will be a positive integer less than 100. The sum  of all will be a positive integer less than 1000.", "output_description": "For each list in the input file, the output file will contain a line with <tt>\u201cSums of \u201d</tt>, the total, and a colon. Sums will be listed one to a line. If there are no such sums, the line <tt>\u201cNONE\u201d</tt> appears. The numbers in each sum should appear in decreasing order. A number may be repeated in the sum as many times as it was repeated in the original list. Each table of sums should be sorted so the first term of a sum that differs from the corresponding term of the next sum is larger than the term in that following sum. Each table of sums should have no duplicate lines. Each line should be terminated with a newline. The only blanks are single blanks before and after the word  <tt>\u201cof\u201d</tt>.", "samples": "[{\"input\": \"2\\n4 6\\n4 3 2 2 1 1\\n5 3\\n2 1 1\\n\", \"output\": \"Sums of 4:\\n4\\n3+1\\n2+2\\n2+1+1\\nSums of 5:\\nNONE\\n\"}]", "test_case_id": "1669", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 148, "total_accepted_number": 51, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1670, "fields": {"title": "Divide", "description": "There is an integer number series where A[0] = 7, A[1] = 11, A[n] = A[n-1] + A[n-2] (n &gt;= 2). Can you tell me if A[n] can be written as A[n] = 3 * k, where k is a positive integer number.", "input_description": "The first line of the input contains an integer T (0 < T < 10000), indicating the number of cases. Each of the following T lines contains an integer number n (0 <= n <= 10^9).", "output_description": "For each case, you should print a line containing the case number (beginning with 1) and print \u201cYES\u201d if A[n] can be written as 3 * k, or \u201cNO\u201d if A[n] can not be written as 3 * k (k is a positive integer number).", "samples": "[{\"input\": \"2\\n0\\n1\\n\", \"output\": \"Case #1: NO\\nCase #2: NO\\n\"}]", "test_case_id": "1670", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 663, "total_accepted_number": 112, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1671, "fields": {"title": "Equations", "description": "Given such an equation: a*x^2 + b * x + c = 0. Can you tell me the roots?", "input_description": "The first line of the input contains an integer T (0 < T < 200), indicating the number of cases. Each of the following T lines contains three integers a, b and c described above. Assume that -100 < a, b, c < 100.", "output_description": "For each case, the first line should print a line containing the case number (beginning with 1) and an integer number R which means that the equation has R roots. If the equation has more than two roots, then R should be printed as \u201cINF\u201d. You should output all the roots separated by a blank space of the equation by ascending order in the following line, but when R equals \u201cINF\u201d or 0. The roots should be processed with 2 digits after the decimal point. ", "samples": "[{\"input\": \"3\\n0 0 0\\n1 2 1\\n1 3 2\\n\", \"output\": \"Case #1: INF\\nCase #2: 1\\n-1.00\\nCase #3: 2\\n-2.00 -1.00\\n\"}]", "test_case_id": "1671", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1212, "total_accepted_number": 108, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1673, "fields": {"title": "Key Words", "description": "Given a string P, how many substring Q in it. For example, if P = \u201cswjtuisswjtuisswjtu\u201d and Q = \u201cswjtu\u201d, then you should output 3 as there 3\u2019s \u201cswjtu\u201d in \u201cswjtuisswjtuisswjtu\u201d.", "input_description": "The first line of the input contains an integer number T (0 < T < 30), indicating the number of cases. Each of the following T lines contains two strings P and Q described above. Assume that the length of P and Q will not be greater than 100. Charters in P and Q will be between \u2018a\u2019 and \u2018z\u2019 or between \u2018A\u2019 and \u2018Z\u2019 or between \u20180\u2019 and \u20189\u2019 (include).", "output_description": "For each case, you should print a line containing the case number (beginning with 1) and the answer described above.", "samples": "[{\"input\": \"2\\naaa a\\nswjtuisswjtuisswjtu swjtu\\n\", \"output\": \"Case #1: 3\\nCase #2: 3\\n\"}]", "test_case_id": "1673", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 380, "total_accepted_number": 146, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1674, "fields": {"title": "Magic Square", "description": "     A Magic Square is an arrangement of the numbers from 1 to N^2 in an N*N matrix, with each number occurring exactly once, and such that the sum of the entries of any row, any column, or any main  diagonal is the same.<p></p><p></p>     Please print N*N Magic Square. N is a positive odd integer number.", "input_description": "The first line of the input contains an integer T (1 <= T <= 50) indicating the number of cases. Each of the following T lines contains a positive integer number N (0 < N < 100).", "output_description": "For each case, you should print a line containing the case number (beginning with 1). The following N lines you should output N*N Magic Square. There is a blank line between two test cases. For N*N Magic Square, the middle of the first line should be \u201c1\u201d and number \u201c2\u201d should be in the right of the middle column.", "samples": "[{\"input\": \"2\\n1\\n3\\n\", \"output\": \"Case #1:\\n1\\n\\nCase #2:\\n8 1 6\\n3 5 7\\n4 9 2\\n\"}]", "test_case_id": "1674", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 132, "total_accepted_number": 56, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1675, "fields": {"title": "Outstanding Student", "description": "After the final exams, teacher Xiao Ming wants to know the number of outstanding student in the class. Outstanding student\u2019s grade in each course must be strictly greater than the average of this course. Please help him.<p></p><p></p>", "input_description": "The first line of the input contains an integer T (0 < T < 30), indicating the number of cases. The first line of each case contains two integers N and M, indicating the number of students and the number of courses. Each of the following N lines contains M integers, indicating the achievement of the student for each course. The integers are separated by space. Input data are all integers from 1 to 100 (include). Assume that 1 <= N <= 60, 1 <= M <= 10.", "output_description": "For each case, you should print a line containing the case number (beginning with 1) and a number R, indicating the number of outstanding student.\n\n", "samples": "[{\"input\": \"2\\n3 3\\n99 99 99\\n90 90 90\\n80 80 80\\n3 3\\n90 90 90\\n90 90 90\\n90 90 90\\n\", \"output\": \"Case #1: 2\\nCase #2: 0\\n\"}]", "test_case_id": "1675", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 205, "total_accepted_number": 74, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1676, "fields": {"title": "Sequence", "description": "One day, Xiao Ming was reading a book. He was dealing with an interesting problem. But he can not solve it by himself, so he needed your help. He thought you can help him because you are \u201cA SWJTU ACMER\u201d.<p></p>\tInitial, you have a sequence S(1) = {1, 1}. You can get a new sequence S(n) from S(n-1) according to the rule. You can get sequence S(n) after you have inserted all possible n between L and R where L and R are two adjacent numbers in sequence S(n-1). What\u2019s more, L + R = n.<p></p>\tFor example, S(1) = {1, 1}. Because 1 + 1 = 2, so S(2) = {1, 2, 1}. Since 1 + 2 = 3 and 2 + 1 = 3, then we can get S(3) = {1, 3, 2, 3, 1}. With the same way, we know that S(4) = {1, 4, 3, 2, 3, 4, 1}.<p></p>\tHere is the question: Given a number n, what\u2019s the total number of n in sequence S(n). For example, if n = 4, then the answer should be 2 as there are 2 4\u2019s in sequence S(4).<p></p><p></p>", "input_description": "The first line of the input contains a number T (0 < T < 300), indicating the number of test cases. Each of the following T lines contains a positive integer number n described above. (0 < n < 10,000,000,000)", "output_description": "For each test case, you should print a line containing the case number (beginning with 1) and the answer described above.\n\n", "samples": "[{\"input\": \"2\\n2\\n4\\n\", \"output\": \"Case #1: 1\\nCase #2: 2\\n\"}]", "test_case_id": "1676", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 76, "total_accepted_number": 21, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1688, "fields": {"title": "Complex segments", "description": "Do two segments intersect? Can you tell me?", "input_description": "The first line of the input contains an integer T (0 < T < 1000), indicating the number of cases. Each test case contains four complex numbers s1, t1, s2, and t2 separated by spaces. Each complex number a+bi represents a point (a, b) in the xy-plane. In all cases, a and b will be integers between -100 and 100 (include) for a complex number a + bi.\nNote that the real part of the complex number may be omitted if it is 0 and the imaginary part may be omitted if it is 0 (and if both are 0, the number is written 0). Also, if the imaginary part is +1 or -1, that part may be written as +i or -i (rather than +1i and -1i). See sample input for examples.\n\tAll line segments given as input have non-zero length (i.e., the two endpoints are always different).\n", "output_description": "For each case, you should print a line containing the case number (beginning with 1) and print \u201cYES\u201d if the two segments intersect, or print \u201cNO\u201d.", "samples": "[{\"input\": \"3\\n2-2i -2-2i 2+2i -2+2i\\n1+i 2-i 2+i 1-i\\n0 i 1 -1+2i\\n\\n\", \"output\": \"Case #1: NO\\nCase #2: YES\\nCase #3: YES\\n\"}]", "test_case_id": "1688", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 84, "total_accepted_number": 16, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1689, "fields": {"title": "Kth number", "description": "Sequence A = {a(1), a(2), a(3), \u2026, a(n)}, Sequence B = {b(1), b(2), b(3), \u2026, b(m)}. We define an operator \u201c*\u201d like this: Sequence C = A * B, where c(k) = a(i) * b(j), (k = (i - 1)* n + j, 1 &lt;= i &lt;= n and 1 &lt;= j &lt;= m).  Can you tell me the Kth (K &lt;= n * m) largest number in Sequence C.", "input_description": "The first line of the input contains an integer T (0 < T < 30), indicating the number of cases. There are three lines in each test case. The first line of each test case contains three positive integer number n, m and K, where n is the total number of sequence A, m is the total number of sequence B, and K is described above. Then the second line represents elements in sequence A and the following line represents elements in sequence B. All integers will be non-negative and less than 10000. But K may be larger than 10000.", "output_description": "For each case, you should print a line containing the case number (beginning with 1) and the Kth largest number in Sequence C.", "samples": "[{\"input\": \"2\\n2 2 1\\n3 4\\n5 6\\n2 2 3\\n2 1\\n4 8\\n\", \"output\": \"Case #1: 24\\nCase #2: 8\\n\"}]", "test_case_id": "1689", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 123, "total_accepted_number": 21, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1690, "fields": {"title": "Map", "description": "You were lucky enough to get a map just before entering the legendary magical mystery world. The map shows the whole area of your planned exploration, including several countries with complicated borders. The map is clearly drawn, but in sepia ink only; it is hard to recognize at a glance which region belongs to which country, and this might bring you into severe danger. You have decided to color the map before entering the area. &quot;A good deal depends on preparation,&quot; you talked to yourself. <p></p>Each country has one or more territories, each of which has a polygonal shape. Territories belonging to one country may or may not &quot;touch&quot; each other, i.e. there may be disconnected territories. All the territories belonging to the same country must be assigned the same color. You can assign the same color to more than one country, but, to avoid confusion, two countries &quot;adjacent&quot; to each other should be assigned different colors. Two countries are considered to be &quot;adjacent&quot; if any of their territories share a border of non-zero length. <p></p>Write a program that finds the least number of colors required to color the map.<p></p>", "input_description": "The first line of the input contains an integer T (0 < T < 20), indicating the number of cases. Each case starts with a line containing the total number of territories n, followed by the data for those territories. n is a positive integer not more than 100. The data for a territory with m vertices has the following format:\n\nString \nx1 y1 \nx2 y2 \n... \nxm ym \n-1\n\n\"String\" (a sequence of alphanumerical characters) gives the name of the country it belongs to. A country name has at least one character and never has more than twenty. When a country has multiple territories, its name appears in each of them. \nRemaining lines represent the vertices of the territory. A vertex data line has a pair of nonnegative integers which represent the x- and y-coordinates of a vertex. x- and y-coordinates are separated by a single space, and y-coordinate is immediately followed by a newline. Edges of the territory are obtained by connecting vertices given in two adjacent vertex data lines, and by connecting vertices given in the last and the first vertex data lines. None of x- and y-coordinates exceeds 1000. Finally, -1 in a line marks the end of vertex data lines. The number of vertices m does not exceed 100. \nYou may assume that the contours of polygons are simple, i.e. they do not cross nor touch themselves. No two polygons share a region of non-zero area. The number of countries in a map does not exceed 10. \n", "output_description": "For each case, you should print a line containing the case number (beginning with 1) and an integer number R which is the least possible number of colors required to color the map satisfying the specified conditions.", "samples": "[{\"input\": \"2\\n6\\nBlizid\\n0 0\\n60 0\\n60 60\\n0 60\\n0 50\\n50 50\\n50 10\\n0 10\\n-1\\nBlizid\\n0 10\\n10 10\\n10 50\\n0 50\\n-1\\nWindom\\n10 10\\n50 10\\n40 20\\n20 20\\n20 40\\n10 50\\n-1\\nAccent\\n50 10\\n50 50\\n35 50\\n35 25\\n-1\\nPilot\\n35 25\\n35 50\\n10 50\\n-1\\nBlizid\\n20 20\\n40 20\\n20 40\\n-1\\n4\\nA1234567890123456789\\n0 0\\n0 100\\n100 100\\n100 0\\n-1\\nB1234567890123456789\\n100 100\\n100 200\\n200 200\\n200 100\\n-1\\nC1234567890123456789\\n0 100\\n100 100\\n100 200\\n0 200\\n-1\\nD123456789012345678\\n100 0\\n100 100\\n200 100\\n200 0\\n-1\\n\", \"output\": \"Case #1: 4\\nCase #2: 2\\n\"}]", "test_case_id": "1690", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 11, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1691, "fields": {"title": "No football", "description": "France \u201cdied out\u201d in the first round on the 2010 world cup. As one of her honest fans, you really didn\u2019t like to see \u201cfootball\u201d from newspapers during the 2010 world cup. So you decided to delete \u201cfootball\u201d from such newspapers. <p></p>\tGiven a string S, you can not stop deleting \u201cfootball\u201d until there is no substring \u201cfootball\u201d in a new string.<p></p><p></p>", "input_description": "The first line of the input contains an integer number T (0 < T < 100), indicating the number of cases. Each of the following T lines contains a string S. Assume that the length of the string is less than 100 and greater than 0. All the charters will be between \u2018a\u2019 and \u2018z\u2019 (include).", "output_description": "For each case, you should print a line containing the case number (beginning with 1) and the final string. If the length of final string is 0, then just output \u201cOHaHa\u201d.", "samples": "[{\"input\": \"3\\nfootball\\nfootballfootb\\nfootfootballc\\n\", \"output\": \"Case #1: OHaHa\\nCase #2: footb\\nCase #3: footc\\n\"}]", "test_case_id": "1691", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 622, "total_accepted_number": 163, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1692, "fields": {"title": "Renpin Test", "description": "Xiao Ming is an introverted student. He was unpleasant on 2010-11-11 which means Bachelor&#039;s Festival. He found all his friends were out with their girl friend, but himself. He said to himself: Do I lack Renpin? <p></p>\tXiao Ming found that he had different Renpin during different time. Xiao Ming wanted to know his maximal Renpin. As a supper programmer, you decide to help your good friend, Xiao Ming. <p></p>", "input_description": "The first line of the input contains an integer number T (0 < T < 100), indicating the number of cases. For each case, the first line contains a number n (1 <= n <= 100) represents the total number of different time. The following line contains n integer numbers represent Renpin during different time. All input integer numbers will no more than 100.\n\n", "output_description": "For each case, you should print a line containing the case number (beginning with 1) and the maximal Renpin.", "samples": "[{\"input\": \"2\\n1\\n100\\n4\\n100 99 98 99\\n\", \"output\": \"Case #1: 100\\nCase #2: 100\\n\"}]", "test_case_id": "1692", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 165, "total_accepted_number": 118, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1693, "fields": {"title": "Sequence again", "description": "Given an integer number sequence which length is N, you can delete at most K integer numbers in the sequence. After that, you are asked to answer the maximum length of longest continuous subsequence that each number in it is strictly larger than its previous integer number (if has any) by C.", "input_description": "The first line of the input contains an integer number T (0 < T < 110), indicating the number of cases. Each of the case contains two lines. The first line contains three integers N, K and C described above. The following line contains N integer numbers whose value will be 32-signed integer. (1 <= n <= 300, 0 <= K <= n, 0 <= C <= 10^5.)", "output_description": "For each case, you should print a line containing the case number (beginning with 1) and the answer described above.\n\n", "samples": "[{\"input\": \"2\\n6 3 1\\n2 4 6 5 2 1\\n4 4 1\\n6 3 5 2\\n\", \"output\": \"Case #1: 2\\nCase #2: 1\\n\"}]", "test_case_id": "1693", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 44, "total_accepted_number": 14, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1694, "fields": {"title": "Sum", "description": "S[n] = 1*1*1 + 2*2*2 + 3*3*3 + \u2026 + n*n*n. ", "input_description": "The first line of the input contains an integer T (0 < T < 300), indicating the number of cases. Each of the following T lines contains a positive integer number n described above.\n\n", "output_description": "For each case, the first line should print a line containing the case number (beginning with 1) and the last four digits of S[n] (1 <= n <= 10^9).", "samples": "[{\"input\": \"2\\n1\\n2\\n\", \"output\": \"Case #1: 0001\\nCase #2: 0009\\n\"}]", "test_case_id": "1694", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 334, "total_accepted_number": 68, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1695, "fields": {"title": "\u62d2\u7edd\u66b4\u529b", "description": "\u6784\u5efa\u548c\u8c10\u793e\u4f1a\uff0c\u9700\u8981\u7406\u6027\uff0c\u66b4\u529b\u5927\u591a\u5e26\u6765\u75db\u82e6\uff0c\u5e26\u6765\u60b2\u5267\u3002<p></p><p></p>\u6240\u4ee5\u6211\u4eec\u8981\u4ee5\u72ec\u7279\u7684\u773c\u5149\u6253\u91cf\u751f\u6d3b\uff0c\u4ee5\u4e2a\u6027\u7684\u601d\u8003\u89e3\u51b3\u95ee\u9898~<p></p><p></p>\u95ee\u9898\u6765\u4e86......<p></p><p></p>\u7ed9\u4f60\u4e00\u4e2a\u6b63\u6574\u6570N\uff0c\u5b83\u6709\u8bb8\u591a\u56e0\u5b50(\u6b63\u6570)\uff0c\u4e0d\u59a8\u8ba4\u4e3a\u662f A1, A2, A3, ..., As\uff0cs\u8868\u793a\u56e0\u5b50\u6570\u76ee\uff0c\u663e\u7136\u5bf9\u4e8eAi(1 &lt;= i &lt;= s)\u4e5f\u6709\u56e0\u5b50\uff0c\u6211\u4eec\u4e0d\u59a8\u8ba4\u4e3aAi\u7684\u56e0\u5b50\u6570\u76ee\u4e3aBi\uff0c\u73b0\u5728\u4f60\u7684\u95ee\u9898\u5c31\u662f\u6c42Bi(1&lt;=i&lt;=s)\u7684\u7acb\u65b9\u548c\u3002\u5373<p></p><p></p>Ans = Sum{ F(Bi)^3 | 1 &lt;= i &lt;= s }, F(Bi)\u8868\u793a\u6570Ai\u7684\u56e0\u5b50\u4e2a\u6570.<p></p><p></p>\u6bd4\u5982\u5f53N=4\u7684\u65f6\u5019\uff0c\u5b83\u7684\u56e0\u5b50\uff1a1,2\u548c4,\u5176\u4e2d1\u67091\u4e2a\u56e0\u5b50\uff081\uff09\uff0c2\u67092\u4e2a\u56e0\u5b50\uff081,2\uff09\uff0c4\u67093\u4e2a\u56e0\u5b50\uff081,2,4\uff09,\u6240\u4ee5\u7b54\u6848\u4e3a<p></p><p></p>1*1*1 + 2*2*2 + 3*3*3 = 1 + 8 + 27 = 36<p></p><p></p>\u4e0d\u77e5\u9053\u4f60\u662f\u5d07\u5c1a\u66b4\u529b\uff0c\u8fd8\u662f\u5d07\u5c1a\u7406\u6027\uff1f<p></p><p></p>", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570T\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\uff1b\n\u63a5\u4e0b\u6765\u7684\u6bcf\u4e00\u884c\u4ec5\u5305\u542b\u4e00\u4e2a\u6574\u6570N\uff1b\n\u5176\u4e2d\uff0c1 \u2264 T \u2264 500000\uff0c1 \u2264 N \u2264 5000000.", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\u7b54\u6848.", "samples": "[{\"input\": \"1\\n4\\n\", \"output\": \"36\\n\"}]", "test_case_id": "1695", "hint": "The data used in this problem is unofficial data prepared by Wuhanzhou. So any mistake here does not imply mistake in the official judge data.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 10000, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 170, "total_accepted_number": 16, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1704, "fields": {"title": "Hardwood Species", "description": "Hardwoods are the botanical group of trees that have broad leaves, produce a fruit or nut, and generally go dormant in the winter.<p></p>America&#039;s temperate climates produce forests with hundreds of hardwood species -- trees that share certain biological characteristics. Although oak, maple and cherry all are types of hardwood trees, for example, they are different species. Together, all the hardwood species represent 40 percent of the trees in the United States.<p></p><p></p>On the other hand, softwoods, or conifers, from the Latin word meaning &quot;cone-bearing,&quot; have needles. Widely available US softwoods include cedar, fir, hemlock, pine, redwood, spruce and cypress. In a home, the softwoods are used primarily as structural lumber such as 2x4s and 2x6s, with some limited decorative applications.<p></p><p></p>Using satellite imaging technology, the Department of Natural Resources has compiled an inventory of every tree standing on a particular day. You are to compute the total fraction of the tree population represented by each species.", "input_description": "Input to your program consists of a list of the species of every tree observed by the satellite; one tree per line. No species name exceeds 30 characters. There are no more than 10,000 species and no more than 1,000,000 trees. ", "output_description": "Print the name of each species represented in the population, in alphabetical order, followed by the percentage of the population it represents, to 4 decimal places.", "samples": "[{\"input\": \"Red Alder\\nAsh\\nAspen\\nBasswood\\nAsh\\nBeech\\nYellow Birch\\nAsh\\nCherry\\nCottonwood\\nAsh\\nCypress\\nRed Elm\\nGum\\nHackberry\\nWhite Oak\\nHickory\\nPecan\\nHard Maple\\nWhite Oak\\nSoft Maple\\nRed Oak\\nRed Oak\\nWhite Oak\\nPoplan\\nSassafras\\nSycamore\\nBlack Walnut\\nWillow\\n\", \"output\": \"Ash 13.7931\\nAspen 3.4483\\nBasswood 3.4483\\nBeech 3.4483\\nBlack Walnut 3.4483\\nCherry 3.4483\\nCottonwood 3.4483\\nCypress 3.4483\\nGum 3.4483\\nHackberry 3.4483\\nHard Maple 3.4483\\nHickory 3.4483\\nPecan 3.4483\\nPoplan 3.4483\\nRed Alder 3.4483\\nRed Elm 3.4483\\nRed Oak 6.8966\\nSassafras 3.4483\\nSoft Maple 3.4483\\nSycamore 3.4483\\nWhite Oak 10.3448\\nWillow 3.4483\\nYellow Birch 3.4483\\n\"}]", "test_case_id": "1704", "hint": "This problem has huge input, use scanf instead of cin to avoid time limit exceeded.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 6000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 47, "total_accepted_number": 19, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1706, "fields": {"title": "A-B", "description": "Give two integers A and B, please calculate A-B. Note that A, B is no more than 500 digits.", "input_description": "Each line contains two integers A and B.", "output_description": "For each case, output a line represents the value A-B, assume that +1=1.", "samples": "[{\"input\": \"+1 2\\n-1 -1\\n-0 -1\\n\", \"output\": \"-1\\n0\\n1\\n\"}]", "test_case_id": "1706", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 507, "total_accepted_number": 84, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1707, "fields": {"title": "Squares Design", "description": "From the Sample you will know it.", "input_description": "Each input set will be on a line by itself and will consist of two integers N and M (1<=N, M<=20), which you will know.", "output_description": "For each input set, you should print the figure.", "samples": "[{\"input\": \"5 3\\n1 2\\n\", \"output\": \"+-----------+   +-------+\\nI-X-X-X-X-X-I   I-X-X-X-I\\nI-X-X-X-X-X-I   I-X-X-X-I\\nI-X-X-X-X-X-I   I-X-X-X-I\\nI-X-X-X-X-X-I   +-------+\\nI-X-X-X-X-X-I\\n+-----------+\\n+---+   +-----+\\nI-X-I   I-X-X-I\\n+---+   I-X-X-I\\n        +-----+\\n\"}]", "test_case_id": "1707", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 290, "total_accepted_number": 115, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1710, "fields": {"title": "Course", "description": "There is such a policy in Sichuan University that if you are not satisfied with the score of your course, you can study this course again to get a better score. If you do this and get a higher score(than the highest score he got before), it can cover the original one. And we can say this time you update the score of this course successfully.<p></p><p></p>Here is one schoolmate&#039;s all the courses he has studied and scores he got (sorted by chronological order). So could you tell me how many time he successfully update his scores of courses?<p></p>", "input_description": "The first of input is an integer T which stands for the number of test cases. For each test case the first line is an integer N (1 <= N <= 100) which stands for the number of courses he has studied.Then following N lines, each line contains a string (only contains letters and the length is no more than 30,which stands for the course name) and an integer (0<=integer<=100, which stands for the score of the course), separated by a space.\n\nRemember: the best way is getting the best score in one time. Study one course many times is not a recommended choice!", "output_description": "For each test case output the number of times he update successfully.\n", "samples": "[{\"input\": \"2\\n6\\nCProgramming 70\\nDataStructrue 80\\nCProgramming 80\\nCProgramming 60\\nCProgramming 90\\nDataStructrue 70\\n2\\nCompilerTheory 95\\nNetwork 90\\n\", \"output\": \"2\\n0\\n\"}]", "test_case_id": "1710", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 36, "total_accepted_number": 16, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1711, "fields": {"title": "The Weight of Tree", "description": "456 has a tree of n nodes, each node is assigned with an integer number. Now 456 wants to select a subtree, such that the sum of all integers on the nodes of the subtree is maximized. Can you help him?", "input_description": "On the first line of the input is an integer T, and then T cases follows. Each case begins with a positive integer n(1 <= n <= 10^5), then n numbers Wi(-1000 <= Wi <= 1000),Wi for the number on the ith node. Then n - 1 lines follows, each line contains two numbers a, b(1 <= a, b <= n) indicate that there is a edge between node a and b. ", "output_description": "For each test case, output one integer on a line, the maximized sum can be achieved by selecting a subtree. ", "samples": "[{\"input\": \"3\\n1\\n5\\n2\\n5 -5\\n1 2\\n5\\n-2 -3 7 -1 4\\n1 2\\n2 3\\n3 4\\n2 5\\n\", \"output\": \"5\\n5\\n8\\n\"}]", "test_case_id": "1711", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 29, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1712, "fields": {"title": "A Coin Problem", "description": "One day,Jiameier is tidying up the room,and find some coins. Then she throws the coin to play.Suddenly,she thinks of a problem ,that if throw n times coin ,how many situations of no-continuous up of the coin. Hey,Let&#039;s solve the problem.<p></p>", "input_description": "The first of input is an integer T which stands for the number of test cases. For each test case, there is one integer n (1<=n<=1000000000) in a line, indicate the times of throwing coins.\n", "output_description": "The number of all situations of no-continuous up of the coin, moduled by 10000. ", "samples": "[{\"input\": \"3\\n1\\n2\\n3\\n\", \"output\": \"2\\n3\\n5\\n\"}]", "test_case_id": "1712", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 86, "total_accepted_number": 19, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1713, "fields": {"title": "Sawthooth II", "description": "There is a romantic line called sawthooth II which consists of two parallel infinite half-lines joined by a straight segment. It looks like a character \u2018Z\u2019. You are given N \u2018Z\u2019 lines, can you calculate the maximum number of regions they can divide the plane?<p></p>", "input_description": "The first line is an integer T which stands for the number of test cases. Then it follows T test cases. Each test case has only one line contains only one integer N (0 <= N <= 10^9).\n", "output_description": "For each test case, print one line containing an integer which stands for the maximum number of regions they can divide the plane.\n", "samples": "[{\"input\": \"2\\n1\\n2\\n\", \"output\": \"2\\n12\\n\"}]", "test_case_id": "1713", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 52, "total_accepted_number": 16, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1714, "fields": {"title": "Cheapest Cost", "description": "baihacker chooses the easy mode and is borned in X star. The lowest temperature of X star is 0 degree and the highest is<p></p>1000 degree. <p></p><p></p>The technology of X star is so advanced that the relation department can predict the temperature of the coming 1000 days. The temperature of each day is independent. When the temperature difference of two consecutive days is larger than K, the people will be ill, so the relation department employ Y company to control the temperature such that no people will be ill for the temperature difference.<p></p><p></p>The cost of change the temperature S degree of a day is S * S. When temperature difference of two consecutive days is D, then Y company have to pay A * D for maintaining his honor.<p></p> <p></p>As the CTO of Y company, you are to calculate the cheapest cost.<p></p>", "input_description": "The first line of the input is an integer T which stands for the number of test cases. Then T test cases follow.\n\nThe first line of each test case is 3 integers N, K, A separated by a space. Then N integers seperated by a space in a line to represent the temperatures in the coming n days.\n\nconstraints:\nA, K is in the range of [0, 1000].\nN is in the range of [1, 1000].\nThe temperature after adjusted can not be below 0 or higher than 1000.\nT is no more than 150.\n", "output_description": "For each test case, output the cheapest cost in a single line. The cost is defined as the sum of changing the temperator and maintaining their honor.\n", "samples": "[{\"input\": \"2\\n1 1 1\\n1\\n3 1 10\\n1 2 3\\n\", \"output\": \"0\\n2\\n\"}]", "test_case_id": "1714", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 10000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 20, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1715, "fields": {"title": "Bathroom", "description": "JiangAn&#039;s bathroom is divided into N (1 &lt;= N &lt;= 50) rooms labeled from 1 to N. And there are some compartments in each room. If the compartment is available, it will be labeled with a number. Otherwise it will be labeled with &quot;XX&quot;. Each number of the compartment in one room is uniqueness.<p></p><p></p>The compartments in one room are arranged only in the shape of &quot;U&quot; (Such as the room 1 and room 2 in sample) or &quot;II&quot; (for example the sample of room 3). If a student wants to have a shower, he should swipe his card on the machine firstly. In order to facilitate your understanding, we would name this machine with A. The machine A will assign an available compartment for him randomly. And this compartment is marked as in use at the same time.<p></p> <p></p>When he finished his shower, he should swipe his card again on machine B. The machine B will calculate the cost and this<p></p>compartment is marked as available again. As we know, many people don&#039;t like the compartments in corners,(Such as No.01, No.05, No.08 and No.12 compartments in room 1, No.15, No.17, No.20 compartments in room 2, And No.01, No.05, No.06, No.10 compartments in room 3) At least I don&#039;t. zsasuke doesn&#039;t like the compartments in corners too. And he also doesn&#039;t like the compartment whose the room number connecting the compartment number is a prime number. (Such as room 1 No.01 compartment, 101 is a prime number).<p></p><p></p>Every time zsasuke is assigned to a compartment he doesn&#039;t like, he will immediately swipe his card on machine B to cancel this allocation, then swipe his card on machine A again. He won&#039;t stop this until he is assigned to a satisfactory compartment. (What a selfish person! Students in queue after him must curse him...) But sometimes, it may take many times to get a satisfactory compartment. Recently, our clever zsasuke think of a new idea that he can take many cards to the bathroom. (We assumed that he borrowed enough cards from his schoolmates, what a selfish person!)<p></p>If his first card is assigned to a unsatisfactory compartment, he will immediately swipe the second card on machine A to get a new compartment (Do not need to cancel previous assigning), until the compartment he got is satisfactory.<p></p><p></p>zsasuke wants to know how much the new method better than the old one. So can you do him a favor, What is expecting number of times zsasuke needs to swiping his card(s) on machine A to get a satisfactory compartment for the two methods respectively?<p></p>", "input_description": "The first line of the input is an integer T which stands for the number of test cases.\nFor each test case, the first line is an integer N and N lines follow which stands for the information of each room.\nFor each room, the first line is an integer L, indicating that this room has L lines. The following L lines stand for the map of the room and each line has at most 600 chars. We guarantee the arrangement of compartments in the room strictly correspond with the description above.\n\nThe shape of every compartment is strictly as follows:\n----\n|##|\n----\nThe \"##\" is either a number of exactly 2 digits (leading zeros may appeared) or \"XX\". Otherwise it is not a compartment.\nHere is sad news that zsasuke's teammate, onmylove has used this map paper as scratch paper. So on the map there may appear some other redundant chars. But fortunately, the redundant chars will not cover the origin compartments, or make up any new compartments.After the description of room there is a line contains an integer M which stands for how many people taking a shower when zsasuke come to the bathroom. And following M lines, each line contains two integers X and Y,which stands for the No.Y compartment in room X is used now.\n", "output_description": "For each test case, output one line contain two floating-point numbers (rounded to 6 digits after decimal point), which stands for the expecting number of times zsasuke needs for old and new methods respectively, separated by a space.If there is no usable compartment, output a line with \"No available room!\".\n", "samples": "[{\"input\": \"1\\n3\\n11\\n----     ----\\n|01|     |12|\\n----     ----\\n|02|     |11|\\n----     ----\\n|03|     |10|\\n----     ----\\n|04|     |09|\\n-------------\\n|05|06|07|08|\\n-------------\\n9\\n----  ----\\n|XX|  |20|\\n----  ----\\n|13|  |19|\\n----  ----\\n|14|  |18|\\n----------\\n|15|16|17|\\n----------\\n11\\n----  ----   :)\\n|01|  |10|   Orz\\n----01----   =.=||\\n|02|==|09|\\n----- ----   ---\\n|03|04|08|   |11|\\n----------    ---\\n|04|  |07|\\n----  ----\\n|05|  |06|\\n----  ----\\n5\\n1 2\\n1 3\\n2 13\\n3 02\\n3 09\\n\", \"output\": \"2.272727 2.166667\\n\"}]", "test_case_id": "1715", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1716, "fields": {"title": "Game", "description": "At the break of an English class, a382050365 and Power were so bored that decided to play a word puzzle to kill time. <p></p>This game follows the following rules:<p></p><p></p>1&gt; They in turn say a word containing only vowel (A, E, I, O, U) and the next word being said should exactly begin with the same letter as the last letter of the former word.<p></p><p></p>2&gt; It can starts with only a single word.<p></p><p></p>3&gt; Each word can be said only once and must be contained in the dictionary.<p></p><p></p>4&gt; The total length all the word used in the game is defined as the complexity of the game. Tian found it\u2019s hard to end <p></p>the game in a short time. So he had a question .What\u2019s the max complexity of the game based on a certain dictionary.<p></p><p></p>", "input_description": "The first line is an integer T which stands for the number of test cases. For each test case, The first line contains only \none integer N( 1<= N <= 16) which indicates the amount of dictionary . Each following line contains a certain word in the dictionary and each word is a string consist of A, E, I, O, U. The length of each words is not more than 100, and all words are distinct.\n", "output_description": "For each test case , output one line with an integer indicating the max complexity.\n", "samples": "[{\"input\": \"2\\n3\\nAE\\nA\\nIA\\n2\\nAI\\nOUE\\n\", \"output\": \"5\\n3\\n\"}]", "test_case_id": "1716", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 55, "total_accepted_number": 21, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1717, "fields": {"title": "Tunnel", "description": "As is known to all, there was a huge earthquake attacking Japan recently, thus leading a series of after-disasters, such as Tsunami, swallowing a vast piece of land.Countless people died while many others lost their home.<p></p><p></p>L.Alexander and Jinjin were one couple of lover of the homeless in the Tsunami. hand in hand, they were washed away by the high tide. After a long period of drifting, they landed at a place called Libya. Faced with a brand-new surroundings this couple decided to rebuild their home.  But life is full of frustration, the leader of Libya, Omar Mouammer al Gaddafi,offenced some leaders of powerfulcountries, resulting in Libya&#039;s being bombed by the airfoce of the Country Combination. So there was a trail of destruction in the poor country after being bombed,however love is strong and love is full of magic power,which makes the couple determined to go against all obstacles that against their reconstruction, despite the war adding difficulties.<p></p><p></p>They learn from the great Chinese people defending the Japanese 60 years ago, and lead the peole there to dig tunnels to fight against their enemies. They dig tunnels between the beachheads and Gaddafi. To save labor and time, assume there is a tunnel between A and B, also between B and C, and there will be no tunnel between A and C. That is, there does not exist three places such that every pair of them are connected by a tunnel.<p></p><p></p>In this case your task is to figure out a way to dig as many tunnels as possible to help Omar Mouammer al Gaddafi, striving for the independence. Give out your plan!<p></p>", "input_description": "The first line is an integer T which stands for the number of test cases.Each test case contain one line with an integer N (0<=N<=10000) indicating the number of places.\n", "output_description": "For each test case only one line with an integer indicating the number of tunnels that can be dug.\n\n", "samples": "[{\"input\": \"2\\n1\\n6\\n\", \"output\": \"0\\n9\\n\"}]", "test_case_id": "1717", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 32, "total_accepted_number": 15, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1718, "fields": {"title": "Tim", "description": "As a leader,LiuBang has many excellent generals as his subordinates,Such as Hanxin,YingBu,PengYue,JiBu,FanKuai and so on.<p></p><p></p>After LiuBang unified China,he divided his territory into n different regions and decided to send these generals out to <p></p>govern them. It is common sence that one general can at most govern one region and one region can be governed by at most <p></p>one general. There exist some bidirectional roads between some regions, and for any two distinct regions, at most one road exists between them. there is no self-loop,that is to say, the structure of the regions and  the roads connecting them forms a simple graph. Besides, for any two adjacent regions (a road connects them)A and B, there are at most two different simple routes from A to B(Hint:simple route contains no duplicate regions or roads)<p></p><p></p>It is rumored that if there are two adjacent regions are both being governed by these generals, the two generals who govern them will plot to rebel, LiuBang could not tolerate such situation completely. But it is also believed the more generals he send out to govern these regions, the more stable his country will be.<p></p><p></p>Now LiuBang wants to know, how many generals he can send out at most while guaranteeing no rebellion would happen.<p></p>", "input_description": "The first line of the input contains an integer T indicating the number of cases.\n\nEach case contains two positive integers n,m (1 <= n <= 10000,1 <= m <= 20000 ), in the first line, indicating the number of regions and the number of roads. then m lines follow, each line contains 2 positive integers A,B(1 <= A,B <= n,A!=B) indicating a road connecting region A and region B.\n", "output_description": "a single Integer for each case indicating the maximun number of generals LiuBang could send out.\n", "samples": "[{\"input\": \"1\\n4 2\\n1 2\\n3 4\\n\", \"output\": \"2\\n\"}]", "test_case_id": "1718", "hint": "LiuBang Can send two generals to 1 and 3,but if LiuBang send the two generals to 1 and 2,they will plot to rebel as region 1 and 2 are adjacent.\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 26, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1720, "fields": {"title": "A Simple Problem", "description": "You know, just as the title imply, this is a simple problem. In a contest, given the team-id, solved, penalty of all the <p></p>teams, tell me the champion.If the numbers of solved problem of two team are different, the rank of the one who solves<p></p>more problems is higher. Otherwise, if the the penalties of two team are different, the rank of the one who has less penalty is higher. Otherwise, the rank of the one whose team-id&#039;s lexicographic order is earlier than the other is higher.<p></p>", "input_description": "The first line of the input is an integer T which stands for the number of test cases. Then T test cases follow.\nThe first line of test case is a number n, which is the number of team in a contest. Then n line(s) follow. Each line contain a string, and two integers: str, s( 0 <= s <= 15 ), p(0<=p <= 20000), separated by a blank indicating that there is a team whose id is str, the number of solved problem is s, and the penalty is p.\n\nconstraints:\nn is in the range of [1 100].\nEach team-id does not contain any blanks.\nThe length of team-id is in the range of[1, 20].\nAny two teams will not have the same team-id.\n", "output_description": "For each test case, output one line with an string indicating the the champion.\n", "samples": "[{\"input\": \"1\\n7\\nRefreshing 5 745 \\nRock_Restart 4 510 \\nLeadWill 4 679 \\nAPTX4869 5 374 \\nWaterCop 5 607 \\nISAP 5 638 \\nTLE 4 902 \\n\", \"output\": \"APTX4869\\n\"}]", "test_case_id": "1720", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 104, "total_accepted_number": 51, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1721, "fields": {"title": "A + B (I)", "description": "\u8ba1\u7b97A+B\u7684\u503c\u3002", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002 \u6bcf\u7ec4\u4e24\u4e2a\u6574\u6570a\u548cb\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\u4e3aa+b\u7684\u503c\u3002", "samples": "[{\"input\": \"1 5\\n10 20\\n\", \"output\": \"6\\n30\\n\"}]", "test_case_id": "1721", "hint": "\u6ce8\u610f\uff0c\u56e0\u4e3a\u8f93\u5165\u6570\u636e\u4e0d\u6b62\u4e00\u7ec4\uff0c\u6240\u4ee5\u4e0b\u9762\u7684\u7a0b\u5e8f\u662f\u4e0d\u4f1a\u901a\u8fc7\u7684\uff1a\\n#include&quot;stdio.h&quot;\\nint main()\\n{\\nint a, b;\\nscanf(&quot;%d %d&quot;, &a;, &b;);\\nprintf(&quot;%d\\n&quot;, a + b);\\nreturn 0;\\n}\\n\u4e0a\u9762\u7684\u7a0b\u5e8f\u53ea\u4f1a\u8bfb\u5165\u4e00\u7ec4\u6570\u636e\u3002\u4f60\u7684\u7a0b\u5e8f\u5e94\u8be5\u4e00\u76f4\u8bfb\u5230\u6ca1\u6709\u8f93\u5165\u6570\u636e\u65f6\uff0c\u624d\u7ec8\u6b62\uff0c\u4e0b\u9762\u7684\u7a0b\u5e8f\u4fbf\u662f\u6b63\u786e\u7684\uff1a\\n#include\u201cstdio.h\u201d\\nint main\uff08\uff09\\n{\\nint a\uff0c b\uff1b\\nwhile( scanf(&quot;%d %d&quot;\uff0c &a;\uff0c &b;) == 2 )  /* \u6bcf\u6b21\u8bfb2\u4e2a\u6570\uff0c\u4e00\u76f4\u8bfb\u5230\u6ca1\u6709\u6570\u636e,\u624d\u4f1a\u8df3\u51fa\u5faa\u73af  */\\nprintf(\u201c%d\\n\u201d\uff0c a + b)\uff1b\\nreturn 0\uff1b\\n}\\n/* \u4e0d\u8981\u95f2\u7684\u65e0\u804a\uff0c\u76f4\u63a5\u590d\u5236\u7c98\u8d34\u4e0a\u8ff0\u4ee3\u7801\uff0c\u81ea\u5df1\u7167\u7740\u624b\u5199\u4e00\u8fb9\u3002 */\\n\\n\u4e00\u822c\u6765\u8bf4\uff0c\u4f60\u7684main()\u5fc5\u987b\u662f\u8981\u6709\u8fd4\u56de\u7c7b\u578b\u7684\uff0c\u5426\u5219\u4f60\u53ef\u80fd\u4f1a\u5f97\u5230\u7f16\u8bd1\u9519\u8bef\uff0c\u6240\u4ee5\u4f60\u7684ACM\u7a0b\u5e8f\u4e00\u822c\u662f\u5982\u4e0b\u6846\u67b6\uff08\u4e0b\u9762\u7684\u4ee3\u7801\u65f6\u9488\u5bf9\u505aACM\u9898\u76ee\u7684\u4e00\u822c\u6027\u6846\u67b6\uff0c\u4e0d\u9488\u5bf9\u6b64\u9898\uff09\uff1a\\n\\n/* \u5934\u6587\u4ef6 */\\n#include&quot;stdio.h&quot;\\n\\n/* \u5fc5\u8981\u7684\u5168\u5c40\u53d8\u91cf\u5b9a\u4e49\u6216\u51fd\u6570\u5b9a\u4e49 */\\n\\nint myFunction()\\n{\\n/* \u4f60\u7684\u4ee3\u7801 */\\n}\\n\\n/* main \u51fd\u6570 */\\nint main() /* \u91c7\u7528int,\u4e0d\u8981\u7528void\u6216\u8005\u4e0d\u6dfb\u52a0 */\\n{\\n/* \u4f60\u7684\u4ee3\u7801 */\\nreturn 0; /* \u4e00\u5b9a\u8981\u6709 */\\n}\\n\\n\u597d\u8fd0\uff01 O(\u2229_\u2229)O~", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 2024, "total_accepted_number": 999, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1722, "fields": {"title": "A + B (II)", "description": "Your task is to Calculate a + b.", "input_description": "Input contains an integer N in the first line, and then N lines follow. Each line consists of a pair of integers a and b, separated by a space, one pair of integers per line.", "output_description": "For each pair of input integers a and b you should output the sum of a and b in one line, and with one line of output for each line in input. ", "samples": "[{\"input\": \"2\\n1 5\\n10 20\\n\", \"output\": \"6\\n30\\n\"}]", "test_case_id": "1722", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 325, "total_accepted_number": 185, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1723, "fields": {"title": "A + B (III)", "description": "Your task is to Calculate a + b.", "input_description": "Input contains multiple test cases. Each test case contains a pair of integers a and b, one pair of integers per line. A test case containing 0 0 terminates the input and this test case is not to be processed.", "output_description": "For each pair of input integers a and b you should output the sum of a and b in one line, and with one line of output for each line in input. ", "samples": "[{\"input\": \"1 5\\n10 20\\n0 0\\n\", \"output\": \"6\\n30\\n\"}]", "test_case_id": "1723", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 255, "total_accepted_number": 159, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1724, "fields": {"title": "A + B (IV)", "description": "Your task is to Calculate the sum of some integers.", "input_description": "Input contains multiple test cases. Each test case contains a integer N, and then N integers follow in the same line. A test case starting with 0 terminates the input and this test case is not to be processed.", "output_description": "For each group of input integers you should output their sum in one line, and with one line of output for each line in input. ", "samples": "[{\"input\": \"4 1 2 3 4\\n5 1 2 3 4 5\\n0 \", \"output\": \"10\\n15\\n\"}]", "test_case_id": "1724", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 223, "total_accepted_number": 140, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1725, "fields": {"title": "A + B (V)", "description": "Your task is to calculate the sum of some integers.", "input_description": "Input contains an integer N in the first line, and then N lines follow. Each line starts with a integer M, and then M integers follow in the same line. ", "output_description": "For each group of input integers you should output their sum in one line, and with one line of output for each line in input. ", "samples": "[{\"input\": \"2\\n4 1 2 3 4\\n5 1 2 3 4 5\\n\", \"output\": \"10\\n15\\n\"}]", "test_case_id": "1725", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 175, "total_accepted_number": 138, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1726, "fields": {"title": "A + B (VI)", "description": "Your task is to calculate the sum of some integers.", "input_description": "Input contains multiple test cases, and one case one line. Each case starts with an integer N, and then N integers follow in the same line. \n ", "output_description": "For each test case you should output the sum of N integers in one line, and with one line of output for each line in input. ", "samples": "[{\"input\": \"4 1 2 3 4\\n5 1 2 3 4 5\\n\", \"output\": \"10\\n15\\n\"}]", "test_case_id": "1726", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 193, "total_accepted_number": 128, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1727, "fields": {"title": "A + B (VII)", "description": "Your task is to Calculate a + b.", "input_description": "The input will consist of a series of pairs of integers a and b, separated by a space, one pair of integers per line. ", "output_description": "For each pair of input integers a and b you should output the sum of a and b, and followed by a blank line. ", "samples": "[{\"input\": \"1 5\\n10 20\\n\", \"output\": \"6\\n\\n30\\n\\n\"}]", "test_case_id": "1727", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 159, "total_accepted_number": 126, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1728, "fields": {"title": "A + B (VIII)", "description": "Your task is to calculate the sum of some integers.", "input_description": "Input contains an integer N in the first line, and then N lines follow. Each line starts with a integer M, and then M integers follow in the same line. ", "output_description": "For each group of input integers you should output their sum in one line, and you must note that there is a blank line after each case.", "samples": "[{\"input\": \"3\\n4 1 2 3 4\\n5 1 2 3 4 5\\n3 1 2 3\\n\", \"output\": \"10\\n\\n15\\n\\n6\\n\\n\"}]", "test_case_id": "1728", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 284, "total_accepted_number": 186, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1731, "fields": {"title": "Coprime", "description": "Please write a program to calculate the k-th positive integer that is coprime with m and n simultaneously. A is coprime with B when their greatest common divisor is 1.", "input_description": "The first line contains one integer T representing the number of test cases.\nFor each case, there's one line containing three integers m, n and k (0 < m, n, k <= 10^9).", "output_description": "For each test case, in one line print the case number and the k-th positive integer that is coprime with m and n.\nPlease follow the format of the sample output.", "samples": "[{\"input\": \"3\\n6 9 1\\n6 9 2\\n6 9 3\\n\", \"output\": \"Case 1: 1\\nCase 2: 5\\nCase 3: 7\\n\"}]", "test_case_id": "1731", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 30, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1732, "fields": {"title": "Game", "description": "Bob and Alice are playing a new game. There are n boxes which have been numbered from 1 to n. Each box is either empty or contains several cards. Bob and Alice move the cards in turn. In each turn the corresponding player should choose a non-empty box A and choose another box B that B &lt; A and (A+B)%2=1 and (A+B)%3=0. Then, take an arbitrary number (but not zero) of cards from box A to box B. The last one who can do a legal move wins. Alice is the first player. Please predict who will win the game.", "input_description": "The first line contains an integer T (T<=100) indicating the number of test cases. The first line of each test case contains an integer n (1<=n<=10000). The second line has n integers which will not be bigger than 100. The i-th integer indicates the number of cards in the i-th box.", "output_description": "For each test case, print the case number and the winner's name in a single line. Follow the format of the sample output.", "samples": "[{\"input\": \"2\\n2\\n1 2\\n7\\n1 3 3 2 2 1 2\\n\", \"output\": \"Case 1: Alice\\nCase 2: Bob\\n\"}]", "test_case_id": "1732", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 10, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1733, "fields": {"title": "Hotel", "description": "A new hotel has been built in a city where the citizens believe that the number 13 brings bad luck. The hotel has n rooms which are numbered from 1 to n inclusive. One of the main properties of a room is its unlucky value which depends on the room number. Only number whose decimal forms contain the substring &quot;13&quot; will be considered to be unlucky numbers. For example, 13, 132, 1313, 9130 are unlucky numbers, but 1, 3, 31, 103, 123123 are not. The unlucky value of a room is the square of the room number if the room number is unlucky, and zero otherwise.<p></p>A hotel&#039;s unlucky value equals the sum of the unlucky value of all its rooms. Help the manager to calculate the unlucky value of this hotel.<p></p>", "input_description": "The first line contains an integer T (T<=100) indicating the number of test cases. T lines follows, each line contains an integer k (1<=k<=100) indicating that this hotel has 10^k (the k-th power of 10) rooms.", "output_description": "For each test case, print the case number and the answer % 100003 in a single line where the answer is the unlucky value of this hotel. Follow the format of the sample output please.", "samples": "[{\"input\": \"3\\n1\\n2\\n3\\n\", \"output\": \"Case 1: 0\\nCase 2: 169\\nCase 3: 49582\\n\"}]", "test_case_id": "1733", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 4, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1735, "fields": {"title": "Pie", "description": "A lot of boys and girls come to our company to pie friends. After we get their information, we need give each of them an advice for help. We know everyone\u2019s height, and we believe that the less difference of a girl and a boy has, the better it is. We need to find as more matches as possible, but the total difference of the matches must be minimum.", "input_description": "The input consists of multiple test cases. The first line of each test case contains two integers, n, m (0 < n, m <= 10000), which are the number of boys and the number of girls. The next line contains n float numbers, indicating the height of each boy. The last line of each test case contains m float numbers, indicating the height of each girl. You can assume that |n ? m| <= 100 because we believe that there is no need to do with that if |n ? m| > 100. All of the values of the height are between 1.5 and 2.0.\nThe last case is followed by a single line containing two zeros, which means the end of the input.", "output_description": "Output the minimum total difference of the height. Please take it with six fractional digits.", "samples": "[{\"input\": \"2 3\\n1.5 2.0\\n1.5 1.7 2.0\\n0 0\\n\", \"output\": \"0.000000\\n\"}]", "test_case_id": "1735", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 39, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1736, "fields": {"title": "Precious", "description": "Gollum is finding his Precious. The precious is hiding in a magic maze. The maze can be considered as a simple polygon. Some vertexes of the polygon are doors that can only allow Gollum to get in, and the other doors can only allow Gollum to get out.<p></p>Gollum doesn\u2019t know that restrict, he choose a door to get in, and choose a door to get out after he has got his precious. Gollum hasn\u2019t learned math, so we believe that Gollum choose the door randomly, that means if there are n doors, the probability of a door chose by Gollum is 1/n.<p></p>There is a monster in the maze, and if Gollum stay in the maze more than m minutes, the monster will wake up and eat Gollum. Gollum can move one unit distance by one minute.<p></p>We want to know the probability that Gollum got his precious.", "input_description": "The input consists of multiply test cases. The first line of each test case contains two integers, n (3 <= n <= 100), m (0 <= m <= 10000), where n is the number of vertexes of the maze, and m is the time limit. The next n lines represent the maze, each line contains a coordinate, x, y (-10000 <= x, y <= 10000) and a DoorType. If DoorType equals to -1, then you can get in from this vertex; if DoorType equals to 0, then it\u2019s not a door; if DoorType equals to 1, then you can get out from this vertex. The last line of each test case is a coordinate, indicating the location of the precious. You can assume that the precious is always in the maze.\nThe last test case is followed by a line containing two zeros, which means the end of the input.", "output_description": "Output the probability. Please take it with 9 factional digits.", "samples": "[{\"input\": \"12 4\\n-2 -1 -1\\n-1 -1 -1\\n-1 -2 -1\\n1 -2 -1\\n1 -1 -1\\n2 -1 -1\\n2 1 1\\n1 1 1\\n1 2 1\\n-1 2 1\\n-1 1 1\\n-2 1 1\\n0 0\\n0 0\\n\", \"output\": \"0.138888889\\n\"}]", "test_case_id": "1736", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 2, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1737, "fields": {"title": "Railway", "description": "There are some locations in a park, and some of them are connected by roads. The park manger needs to build some railways along the roads, and he would like to arrange tourist routes to each circuit. If a railway belongs to more than one tourist routes, there might be clash on it, and if a railway belongs to none tourist route, it doesn\u2019t need to build.<p></p>Now we know the plan, and can you tell us how many railways are no need to build and how many railways where clash might happen.", "input_description": "The Input consists of multiple test cases. The first line of each test case contains two integers, n (0 < n <= 10000), m (0 <= m <= 100000), which are the number of locations and the number of the railways. The next m lines, each line contains two integers, u, v (0 <= u, v < n), which means the manger plans to build a railway on the road between u and v.\nYou can assume that there is no loop and no multiple edges.\nThe last test case is followed by two zeros on a single line, which means the end of the input.", "output_description": "Output the number of railways that are no need to build, and the number of railways where clash might happen. Please follow the format as the sample.", "samples": "[{\"input\": \"8 10\\n0 1\\n1 2\\n2 3\\n3 0\\n3 4\\n4 5\\n5 6\\n6 7\\n7 4\\n5 7\\n0 0\\n\", \"output\": \"1 5\\n\"}]", "test_case_id": "1737", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 13, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1738, "fields": {"title": "Special Fish", "description": "There is a kind of special fish in the East Lake where is closed to campus of Wuhan University. It\u2019s hard to say which gender of those fish are, because every fish believes itself as a male, and it may attack one of some other fish who is believed to be female by it.<p></p>A fish will spawn after it has been attacked. Each fish can attack one other fish and can only be attacked once. No matter a fish is attacked or not, it can still try to attack another fish which is believed to be female by it.<p></p>There is a value we assigned to each fish and the spawns that two fish spawned also have a value which can be calculated by XOR operator through the value of its parents.<p></p>We want to know the maximum possibility of the sum of the spawns.", "input_description": "The input consists of multiply test cases. The first line of each test case contains an integer n (0 < n <= 100), which is the number of the fish. The next line consists of n integers, indicating the value (0 < value <= 100) of each fish. The next n lines, each line contains n integers, represent a 01 matrix. The i-th fish believes the j-th fish is female if and only if the value in row i and column j if 1.\nThe last test case is followed by a zero, which means the end of the input.", "output_description": "Output the value for each test in a single line.", "samples": "[{\"input\": \"3\\n1 2 3\\n011\\n101\\n110\\n0\\n\", \"output\": \"6\\n\"}]", "test_case_id": "1738", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 19, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1739, "fields": {"title": "Triangles", "description": "Mr. Cooper was a celebrated scientist who had a really big lab. There were N sticks in this lab and the length of the i-th stick was i millimeters. One day, when Mr. Cooper decided to do research on triangles, he found that M of the sticks were missed. Mr. Cooper wanted to know how many kinds of triangles could be constructed by three of the remaining sticks. Two triangles are different if and only if they are formed by different sets of sticks.<p></p>For Example, there were 8 sticks in the lab originally and the second and the sixth sticks were missed. The 7 different triangles can be constructed were (3,4,5), (3,5,7), (4,5,7), (3,7,8), (4,7,8), (5,7,8), (4,5,8).", "input_description": "The first line contains an integer T (T<=25) indicating the number of test cases. The first line of each test case contains two integers N (1<=N<=1000000000) and M (0<=M<=1000). If M is not zero, there is an additional line containing M distinct integers between 1 and N indicating the missed sticks.\n ", "output_description": "For each test case, print the case number and the answer % 1000000007 in a single line where the answer is the number of the triangles can be formed. Please follow the format of the sample output.", "samples": "[{\"input\": \"3\\n3 0\\n8 2\\n2 6\\n58 3\\n23 5 3\\n\", \"output\": \"Case 1: 0\\nCase 2: 7\\nCase 3: 13861\\n\"}]", "test_case_id": "1739", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 3, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1740, "fields": {"title": "Arbiter", "description": "Arbiter is a kind of starship in the StarCraft science-fiction series. The Arbiter-class starship is a Protoss warship specializing in providing psychic support. Arbiters were crewed exclusively by Judicators; unlike other warships that were manned predominantly by Templar. The Judicator used the Arbiter as a base to provide support using space-time manipulation.<p></p>Arbiters could weaken space-time, tearing rifts in the fabric of space-time, creating a vortex linking another location to the Arbiter\u2019s location. This could be used to move personnel over long distances between stars.<p></p>In the meantime of widely used Arbiter to transfer, KMXS, the captain of one Arbiter, was warning that some person had got a serious mental disorder after the trip on his Arbiter. By using mice as model animals, he found the sake, it\u2019s because of chirality!<p></p>Every person has chirality, either left-handed or right-handed. Actually all the persons must live with the food which has the same chirality. When one person took Arbiter from one star to another one, his chirality will be changed (from left-handed to right-handed or from right-handed to left-handed). If a person took a long trip and finally got back to his own star, however, his chirality might be changed to the opposite state other than his original, which would cause fatal mental disorder, or even death.<p></p>KMXS has the channels map among the starts and he need to prohibit minimum number of channels from traveling so that wherever a person starts his traveling from when he gets his original star he\u2019ll be safe. KMXS turns to your help.", "input_description": "The first line of input consists of an integer T, indicating the number of test cases.\nThe first line of each case consists of two integers N and M, indicating the number of stars and the number of channels. Each of the next M lines indicates one channel (u, v) which means there is a bidirectional channel between star u and star v (u is not equal to v).", "output_description": "Output one integer on a single line for each case, indicating the minimum number of channels KMXS must prohibit to avoid mental disorder.\n\nConstraints\n0 < T <= 10\n0 <= N <= 15 0 <= M <= 300\n0 <= u, v < N and there may be more than one channel between two stars.", "samples": "[{\"input\": \"1\\n3 3\\n0 1\\n1 2\\n2 0\\n\", \"output\": \"1\\n\"}]", "test_case_id": "1740", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1742, "fields": {"title": "Dolphin", "description": "Dolphins are marine mammals that are closely related to whales and porpoises. They might have some kind of the biggest brains in the water, but are dolphins really smart? Some scientists say that they use their big brains to stay warm in the sea, rather than for lots of thinking. Obviously those scientists don\u2019t think dolphins are smart.<p></p>We know that the brain is made up of two types of cells ? neurons and glia. Neurons do the thinking, while glia do things like keeping the brain warm to help the neurons. After looking at how dolphins\u2019 brains are put together, they claim that dolphins have lots of glia and not many neurons.<p></p>In order to find out how smart the dolphins are, we throw one of them into a maze we&#039;ve just created, to see how long it&#039;ll take the dolphin to get out.<p></p>The maze consists of nodes and bidirectional edges connecting them.<p></p>The dolphin needs power to swim, so we place exactly one fish at each node for him to enjoy.<p></p>The dolphin is not interested in eating the same kind of fish more than once, but he can&#039;t resist any food if it&#039;s just in front to him! As a result, the dolphin decided to PLAN a route before going, so that it will not REACH any kind of fish more than once.<p></p>Given the information above, can you tell me the minimum time that the dolphin needs to get out? ", "input_description": "The first line consists of an integer T, indicating the number of test cases.\nThe first line of each case consists of four integers N, M, S and E, indicating the number of nodes, the number of edges, the starting node and destination.\nEach of the next M lines consists of three integers U, V, C, indicating that there is an edge with length C between node U and V. It will take a dolphin C time to pass this edge.\nThe next line consists of N integers. Ki indicates the label of which kind fishes i-th node has.", "output_description": "Output the minimum time that a dolphin needs to get to the destination on a single line. If a dolphin can never get to the destination, please output -1.\nConstraints\n0 < T <= 20\n2 <= N <= 100; 0 <= M <= 10000; 0 <= S, E < N\n0 <= U, V < N; 0 < C <= 1000\n0 <= Ki < 1000\nThere may be more than one edge between two nodes, and may be loop, an edge that begins and ends both on the same vertex. All edges are bidirectional.", "samples": "[{\"input\": \"2\\n2 1 0 1\\n0 1 1\\n0 0\\n4 4 0 3\\n0 1 1\\n1 3 1\\n0 2 2\\n2 3 2\\n0 0 1 2\\n\", \"output\": \"-1\\n4\\n\"}]", "test_case_id": "1742", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1743, "fields": {"title": "FreeOpen", "description": "FreeOpen is an organization which arranges blind data for girls and boys. The moral of that name is \u201cOpen your free mind to find your other half\u201d. FreeOpen use a pet to make a match to a girl and a boy. FreeOpen believe that if a girl and a boy like each other and they like the same pet, they will be happy when they are living together with that pet.<p></p>There are n boys, m girls and k pets. FreeOpen want know the maximum matches. Each match consists of one girl, one boy and one pet, and each girl, boy or pet can only be in one single match.", "input_description": "The first line consists of an integer T, indicating the number of test cases.\nThe first line of each case consists of three integers G, B, P, indicating the number of girls, the number of boys and the number of pets. The next G * B matrix indicates whether a girl and a boy like each other. The i-th girl and j-th boy like each other if and only if Matrix (i, j) = 1; the next G * P matrix indicates whether a girl likes a pet and the next B * P matrix indicates whether a boy likes a pet.", "output_description": "Output the maximum matches on a single line for each test case.\n\nConstrains\n0 < T <= 10\n0 < G, B, P <= 20\n0 < G + B + P <= 60\n", "samples": "[{\"input\": \"2\\n2 1 3\\n1\\n1\\n1 1 1\\n1 1 1\\n0 0 0\\n15 15 15\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 0 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\", \"output\": \"0\\n13\\n\"}]", "test_case_id": "1743", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1744, "fields": {"title": "FreeRadiant", "description": "Desolators are the elite troops of the WHU army in the alternate world of ICPC.<p></p>When the Desolator plant a powerful Radiation Cannon in the ground, the cannon emits a radiation field over a circular area with radius R, poisoning everything within the circle (including boundary).The desolator must remain immobile while using this attack; if he wishes to move he has to uproot the cannon, disabling the radiation field. To protect desolator himself from the harm of radiation, the Desolator wears an armored Radiation suit. This suit is protected against the radiation emitted by the cannon.<p></p>There are N enemies need to be destroyed. Each enemy can be destroyed if their total attacked times reach a certain value. Fortunately we know that value for each enemy.<p></p>Our honored desolator FreeRadiant is executing this mission. He can use his cannon freely: e.g. plant it somewhere, wait for some time, uproot it and plant it somewhere else again and so on. The Desolator is so fast that planting, uprooting and moving the cannon takes no time, only the poisoning time matters. He just wants to know the total time needed in which he has to plant the cannon into the ground.", "input_description": "The first line consists of an integer of T, indicating the test cases in the file.\nEach case begins with two integers, N and R, indicating the number of enemies and the radius of the circle. The next N lines, each line consists of two integers Xi, Yi, Pi, indicating the coordinate and the time needed to destroy each enemy.", "output_description": "Output one float number rounded to 2 fractional digits, indicating the minimum time for the cannon needs to be planted in the ground.\nConstrains\nT <= 20\n0 < N <= 100 0 < R <= 10000\n0 <= Xi, Yi, Pi <= 10000\n", "samples": "[{\"input\": \"2\\n4 1\\n1 1 3\\n1 -1 3\\n-1 1 3\\n-1 -1 3\\n5 1\\n100 100 10000\\n1 1 3\\n1 -1 3\\n-1 1 3\\n-1 -1 3\\n\", \"output\": \"6.00\\n10006.00\\n\"}]", "test_case_id": "1744", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1745, "fields": {"title": "GCC", "description": "The GNU Compiler Collection (usually shortened to GCC) is a compiler system produced by the GNU Project supporting various programming languages. But it doesn\u2019t contains the math operator \u201c!\u201d.<p></p>In mathematics the symbol represents the factorial operation. The expression n! means &quot;the product of the integers from 1 to n&quot;. For example, 4! (read four factorial) is 4 \u00d7 3 \u00d7 2 \u00d7 1 = 24. (0! is defined as 1, which is a neutral element in multiplication, not multiplied by anything.)<p></p>We want you to help us with this formation: (0! + 1! + 2! + 3! + 4! + ... + n!)%m", "input_description": "The first line consists of an integer T, indicating the number of test cases.\nEach test on a single consists of two integer n and m.", "output_description": "Output the answer of (0! + 1! + 2! + 3! + 4! + ... + n!)%m.\n\nConstrains\n0 < T <= 20\n0 <= n < 10^100 (without leading zero)\n0 < m < 1000000\n", "samples": "[{\"input\": \"1\\n10 861017\\n\", \"output\": \"593846\\n\"}]", "test_case_id": "1745", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 142, "total_accepted_number": 42, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1746, "fields": {"title": "Moonmist", "description": "An Unidentified Flying Object (Commonly abbreviated as UFO) is the popular term for any aerial phenomenon whose cause cannot be easily or immediately identified. We always believe UFO is the vehicle of aliens. But there is an interrogation about why UFO always likes a circular saucer? There must be a reason. Actually our scientists are developing a new traffic system \u201cMoonmist\u201d. It is distinguished from the traditional traffic. We use circular saucers in this new traffic system and the saucers moves extremely fast. When our scientists did their test, they found that traffic accident was too hard to be avoided because of the high speed of the advanced saucer. They need us to develop a system that can tell them the nearest saucer. The distance between two saucers is defined as the shortest distance between any two points in different saucers.", "input_description": "The first line consists of an integer T, indicating the number of test cases.\nThe first line of each case consists of an integer N, indicating the number of saucers. Each saucer is represented on a single line, consisting of three integers X, Y, R, indicating the coordinate and the radius. You can assume that the distance between any two saucers will never be zero.", "output_description": "For each test case, please output a floating number with six fractional numbers, indicating the shortest distance.\nConstraints\n0 < T <= 10\n2 <= N <= 50000\n0 <= X, Y, R <= 100000\n", "samples": "[{\"input\": \"1\\n2\\n0 0 1\\n10 10 1\\n\", \"output\": \"12.142136\\n\"}]", "test_case_id": "1746", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 10000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 28, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1747, "fields": {"title": "Slash", "description": "The American English slash (/) is a punctuation mark. In the early modern period, in the Fraktur script, which was widespread through Europe in the Middle Ages, one slash(/) represented a comma, while two slashes (//) represented a dash.<p></p>With the wide use of computers, slash appeared far more than at any previous time in history. On Unix-like systems and in URLs, the slash is to separate directory and file components of a path:<p></p>/home/whuacm/chaeyeon/Sherlockpp.jpg<p></p>http://acm.whu.edu.cn/<p></p>But in Windows systems, it uses (\\) to separate directory and file components of a path:<p></p>C:\\Users\\v-yungao\\Music\\Shake<p></p>That really confuses me. Could you help me to judge if the string I wrote is right.<p></p>Please notice that I would only make a mistake by changing (\\) to (/) or (/) to (\\). All the strings were constituted by a-z, A-Z, 0-9, (.) , (\\) and (/), no other characters would appear in the strings.<p></p>A string of URL always begins with \u201c[a-zA-Z]+://\u201d (Notice (/) maybe changed to (\\) ), in which \u201c[a-zA-Z]+\u201d represents any non-empty string of letters.<p></p>Windows path begins with \u201c[a-zA-Z]:\\\u201d (Notice (\\) maybe changed to (/)), in which \u201c[a-zA-Z]\u201d means an English letter. (e.g. \u201cC:\\\\windows\u201d is a URL not a Windows path)<p></p>The path of Unix-like system begins with (/) or (\\).<p></p>I\u2019ll give you some strings, can you tell me which type those strings belong to and those correct forms.<p></p>", "input_description": "The first line consists of an integer T, indicating the number of strings.\nThe next T lines, each line consists of a single non-empty string. All of those are really data from our daily life. \n", "output_description": "For each string:\nIf it belongs to a path in Unix-like systems, output \u201cIt\u2019s a path in Unix-like systems!\u201d in a new line and the correct string in the next line.\nIf it belongs to a path in Windows system, output \u201cIt\u2019s a path in Windows system!\u201d in a new line and the correct string in the next line.\nIf it\u2019s a URL, output \u201cIt\u2019s a URL!\u201d in a new line and the correct string in the next line.\nThe kind of each input string can be uniquely determined.\n\nConstrains\n0 < T <= 20\nThe length of each string will not be longer than 50.\n", "samples": "[{\"input\": \"4\\nhttp://acm.whu.edu.cn/felioj\\nhttp:/\\acm.whu.edu.cn/11111011001/\\n\\home\\whuacm\\Slash\\yama\\nZ:\\movie/chaeyeon\\n\", \"output\": \"It$(quat)s a URL!\\nhttp://acm.whu.edu.cn/felioj\\nIt$(quat)s a URL!\\nhttp://acm.whu.edu.cn/11111011001/\\nIt$(quat)s a path in Unix-like systems!\\n/home/whuacm/Slash/yama\\nIt$(quat)s a path in Windows system!\\nZ:\\movie\\chaeyeon\\n\"}]", "test_case_id": "1747", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 18, "total_accepted_number": 9, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1748, "fields": {"title": "Nova", "description": "The Lich is a powerful hero that he can kill a wisp with his skill Frost Nova. The Burning Legion wants to conquer the forest so they sent some liches to kill all the wisps. A lich can kill a wisp once he could see the wisp and the wisp in his attack range. So the lich can attack a wisp when the distance between them is less than or equal to specific R and no trees are on the segment between the lich and wisp. Each lich has a cool down time that once he used Frost Nova he has to wait a few seconds for the next attack. Different liches may have different attack range and cool down time. The Lich King is the leader of the Burning Legion and he wants to arrange the attack order so the liches can wipe out all the wisps as soon as possible.", "input_description": "The first line consists of an integer T, indicating the number of test cases.\nThe first line of each case consists of three integers N, M, K, indicating the number of lich, the number of wisps and the number of trees. The next N lines, each line consists of four integers x, y, r, t indicating the coordinate of that a lich, the radius of the attack range that lich\u2019s Frost Nova can reach and the value of cool down time. The next M lines, each line consists of two integers x, y indicating the coordinate of each wisp. The last K lines, each line consists of three integers x, y, r, indicating the coordinate and radius of a tree. A lich cannot attack a wisp if the segment between them has a common point with the tree. The lich, wisp and trees will not overlap with each other.\n", "output_description": "Output the minimum time lich need to kill all the wisps on a single line, or -1 if lich cannot kill all the wisps.\n\nConstrains\n0 < T <= 20\n0 <= N, M, K <= 200\n-10000 <= x, y <= 10000\n0 <= r, t <= 10002\n", "samples": "[{\"input\": \"1\\n2 3 1\\n-100 0 100 3\\n100 0 100 5\\n-100 -10\\n100 10\\n110 11\\n5 5 10\\n\", \"output\": \"5\\n\"}]", "test_case_id": "1748", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 10, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1749, "fields": {"title": "WHUgirls", "description": "There are many pretty girls in Wuhan University, and as we know, every girl loves pretty clothes, so do they. One day some of them got a huge rectangular cloth and they want to cut it into small rectangular pieces to make scarves. But different girls like different style, and they voted each style a price wrote down on a list. They have a machine which can cut one cloth into exactly two smaller rectangular pieces horizontally or vertically, and ask you to use this machine to cut the original huge cloth into pieces appeared in the list. Girls wish to get the highest profit from the small pieces after cutting, so you need to find out a best cutting strategy. You are free to make as many scarves of a given style as you wish, or none if desired. Of course, the girls do not require you to use all the cloth.<p></p>", "input_description": "The first line of input consists of an integer T, indicating the number of test cases.\nThe first line of each case consists of three integers N, X, Y, N indicating there are N kinds of rectangular that you can cut in and made to scarves; X, Y indicating the dimension of the original cloth. The next N lines, each line consists of two integers, xi, yi, ci, indicating the dimension and the price of the ith rectangular piece cloth you can cut in.\n", "output_description": "Output the maximum sum of prices that you can get on a single line for each case.\n\nConstrains\n0 < T <= 20\n0 <= N <= 10; 0 < X, Y <= 1000\n0 < xi <= X; 0 < yi <= Y; 0 <= ci <= 1000\n", "samples": "[{\"input\": \"1\\n2 4 4\\n2 2 2\\n3 3 9\\n\", \"output\": \"9\\n\"}]", "test_case_id": "1749", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 19, "total_accepted_number": 9, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1751, "fields": {"title": "Easy GCD", "description": "Please calculate the greatest common divisor (GCD) of N integers. You can assume that these N integers will be 32-bit signed integers. There must be a non-zero integer from these N integers.", "input_description": "The first line of input will contain an integer T (1\u2264T\u2264100), indicating the number of cases. Each case will contain an integer N, and the following line will contain N 32-bit signed integers. ( 1\u2264N\u2264100)", "output_description": "For each case, you should print a line containing the case number (beginning with 1) and print the greatest common divisor (GCD) of N integers.", "samples": "[{\"input\": \"3\\n1\\n1\\n2\\n1 -1\\n2\\n1 0\\n\", \"output\": \"Case #1: 1\\nCase #2: 1\\nCase #3: 1\\n\"}]", "test_case_id": "1751", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 404, "total_accepted_number": 91, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1756, "fields": {"title": "Is it easy?", "description": "Give you an array A containing N integers, where N is a positive integer no more than 100000. Can you tell me how many numbers of which subscripts are less than K(1\u2264K\u2264N) that are smaller than A[K] .<p></p>For example, A = {1, 0, 0, 8, 6}, if K = 4, then we know the answer should be 3 as A[1], A[2] and A[3] that are before A[4] and have smaller values than A[4]. If K = 5, we know the answer is 3 again.<p></p>Is it easy? Easy, may be. But I will give you lots of queries so that you will think \u201cOh, no, you lied to me!\u201d<p></p>Good Luck, Boys and Girls!<p></p>", "input_description": "The first line of input will contain an integer T(1\u2264T\u22643),indicating that number of cases. Each case will start with a positive integer N described above. Each of the following N lines will contain an integer represents the ith (1\u2264i\u2264N,A[i] is a 32-bit signed integer) number in the array A.\n\tThen the next line is a positive integer Q, represents the total queries. Each of the following Q lines will contain an integer K described above.\n\tYou can assume that 1\u2264Q\u2264N.\n", "output_description": "For each case, you should print a line containing the case number (beginning with 1). For each case, you should print an answer in a line for each query.\nThere is a blank line between two cases.\n", "samples": "[{\"input\": \"2\\n6\\n3\\n2\\n1\\n4\\n5\\n7\\n3\\n3\\n4\\n5\\n5\\n3\\n2\\n2\\n4\\n3\\n2\\n3\\n4\\n\", \"output\": \"Case #1:\\n0\\n3\\n4\\n\\nCase #2:\\n0\\n3\\n\"}]", "test_case_id": "1756", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 226, "total_accepted_number": 27, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1757, "fields": {"title": "Maximum Sum", "description": "Haiyu Huang, our teacher, had told us the solution to a problem in the following description.<p></p>\t\u201cGiven a sequence of integers, try to get the maximum consecutive subsequence of it.\u201d<p></p>\tWell, Lysander came up with a similar problem like this.<p></p>\tGiven a sequence of integers A[1], A[2] \u2026 A[N] ,try to get the maximum sum consecutive subsequence of it\uff0cand make sure that the length of this subsequence will not exceed K.<p></p>\tCan you help him?<p></p><p></p>", "input_description": "The first line contains an integer T, represents the number of test cases. (1\u2264T\u2264100)\nThere are T lines for each test case. Each line starts with two integers N and K (1\u2264N\u2264100000, 1\u2264K\u2264N), then N integers followed (all the integers are between -1000 and 1000, included).\n", "output_description": "For each case, you should print a line containing the case number (beginning with 1) and the maximum sum of this sequence.\n\n", "samples": "[{\"input\": \"1\\n10 4\\n5 -2 4 -1 5 -7 3 -2 0 10\\n\", \"output\": \"Case #1: 11\\n\"}]", "test_case_id": "1757", "hint": "For this case: 5 -2 4 -1 5 -7 3 -2 0 10\\nYou can find the answer:  3 + (-2) + 0 + 10 = 11\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 157, "total_accepted_number": 26, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1759, "fields": {"title": "Easy MOD", "description": "Please calculate (X + Y) mod Z, where X, Y and Z are all known. You can assume that they are 32-bit signed integer, and Z will be a positive integer.", "input_description": "The first line of input will contain an integer T (1\u2264T\u2264100), indicating the number of cases. Each case will contain three integers X, Y and Z described above.", "output_description": "For each case, you should print a line containing the case number (beginning with 1) and print the answer described above.", "samples": "[{\"input\": \"2\\n0 0 1\\n10086 10011 748\\n\", \"output\": \"Case #1: 0\\nCase #2: 649\\n\"}]", "test_case_id": "1759", "hint": "Answers will be non-negative.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 471, "total_accepted_number": 106, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1764, "fields": {"title": "Candy Collection", "description": "There are some candies in an M * N maze. Your current position is (x, y), where 1\u2264x\u2264M, 1\u2264y\u2264N. Your target is to collect candies as many as possible. For grids in this maze, there are some obstacles which are represented by \u201c#\u201d that you can not pass through. There are also some candies represented by \u201cC\u201d that you can collect and blanks represented by \u201c.\u201d that you can pass through. You can assume that each grid must have only one status. Your current position will be represented by \u201cS\u201d. You can select one of only four directions (up, down, left, right) to move.", "input_description": "The first line of input will contain an integer T (1\u2264T\u2264100), indicating the number of cases. Each case contains two integers M and N represent the size of the maze. Then following M lines will represent the status of grids in this maze (1\u2264 M, N \u2264 30).", "output_description": "For each case, you should print a line containing the case number (beginning with 1) and print the maximal candies you can collect.\n", "samples": "[{\"input\": \"4\\n1 1\\nS\\n2 2\\n.S\\nC.\\n3 3\\n.SC\\n#CC\\nC#.\\n2 2\\nS#\\n#C\\n\", \"output\": \"Case #1: 0\\nCase #2: 1\\nCase #3: 3\\nCase #4: 0\\n\"}]", "test_case_id": "1764", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 132, "total_accepted_number": 62, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1766, "fields": {"title": "Stupid Game", "description": "Lc takes a bad knock after she played the game call connecting the Dots with Nireyflip. Then she invented a game and forced Nireyflip to play with her...she gets an N * M matrix and writes a number on every grid of the matrix. Nireyflip must choose some number from the matrix and Lc requires that every pair number of what he chooses should not share a same edge. If Nireyflip can not get the max value (sum of the number he chooses) he will be laughed by Lc. So just help Nireyflip to get the maximal value.<p></p>", "input_description": "The first line contains a number T that declares the number of cases.\nIn each case two number N,M come first represent the row and column of the matrix, then in the following N lines ,M number comes. Each number evince a[i][j].\n(0 < T < 20, 0 < N, M < 30)\n", "output_description": "For each case, you should print a line containing the case number (beginning with 1) and print the answer described above.\n", "samples": "[{\"input\": \"1\\n2 2\\n1 1\\n1 1\\n\", \"output\": \"Case #1: 2\\n\"}]", "test_case_id": "1766", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 15, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1769, "fields": {"title": "Red VS. Green", "description": "There are some points in the 2-dimensional plane. Each point is colored red, green or blue. No three points are collinear. Any triple of blue points can form a triangle, which is called a blue triangle. A blue triangle is called red-blue triangle if there are more red points than green points in it, or green-blue triangle if there are more green points than red points in it.<p></p>Give you three different blue points, could you tell me it is red-blue triangle or green-blue triangle?<p></p>", "input_description": "The input consists of multiple test cases.\n\nEach test case starts with a line containing three integers R, G and B (0 \u2264 R,G \u2264 1000, 3 \u2264 B \u2264 1000), which are the numbers of red, green and blue points, respectively.\n\nEach of the following R lines contains two integers x and y (0 \u2264 x,y \u2264 100,000,000), which gives the coordinate of a red points.\n\nThe following G lines and B lines give the coordinates of all green points and blue points in the same manner, respectively.\n\nThe next line contains an integer Q (0 \u2264 Q \u2264 1,000,000) the number of queries.\n\nEach of the following Q lines contains three different integers x, y and z (1 \u2264 x,y,z \u2264 B), the index of the blue points.\n\nThe last test case is followed by a line containing three -1.\n", "output_description": "For each test case, print a line containing the test case number (beginning with 1), then the answers for each query, one on each line. \nIf the triangle formed by x,y,z is red-blue triangle, print \"Red-blue\", or \"Green-blue\" if it is green-blue triangle.\nIf the number of red points and green points are equal, print \"Oh, my god!\".\n\n", "samples": "[{\"input\": \"1 1 3\\n1 1\\n2 3\\n0 0\\n0 3\\n3 0\\n1\\n1 2 3\\n-1 -1 -1\\n\", \"output\": \"Case #1:\\nRed-blue\\n\"}]", "test_case_id": "1769", "hint": "Note input and output.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 4000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 7, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1770, "fields": {"title": "Next Generation", "description": "In the year 2021, Members of ACM/ICPC Group in SWJTU are all social elites. In order to continue the spirit of ACM/ICPC, Those who come out from #7509 decide to let their children do ACM/ICPC again. As it do really give them much once. <p></p>\tWell, Alice is a teacher in ACM kindergarten. She is in charge of n kids who are the next generation. Well, you know, #7509 is far from the first dinning hall.  Those n kids have to walk in line to the dinning hall every day. Then the problem is coming!<p></p>\tActually, when they are walking in line, if and only if two kids can see each other, they will talk to each other. Two kids can see each other if and only if all kids between them are shorter than both of them, or there are no kids between them. Kids do not only look forward, they may look back and talk to kids behind them. Alice don\u2019t want them to talk too much (for it\u2019s not safe), but she also don\u2019t want them to be too quiet(for it\u2019s boring), so Alice decides that she must form a line in which there are exactly m pairs of kids who can see each other. Alice wants to know, in how many different ways she can form such a line. Can you help her? <p></p><p></p>Note: All kids are different in height.<p></p>", "input_description": "The first line of input will contain an integer T (0 < T < 10086), indicating the number of cases. Each case contains two integers n and m. (0 < n <= 80, 0 <= m <= 10000).\n\n", "output_description": "For each case, you should print a line containing the case number (beginning with 1) and print the reminder of the number of ways divided by 2021.\n\n", "samples": "[{\"input\": \"3\\n1 0\\n2 0\\n3 2\\n\", \"output\": \"Case #1: 1\\nCase #2: 0\\nCase #3: 4\\n\"}]", "test_case_id": "1770", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 5, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1773, "fields": {"title": "Savings Account", "description": "Suppose you open a savings account with a certain initial balance. You will not make any withdrawals or further deposits for a number of years. The bank will compound your balance (add the annual interest) once a year, on the anniversary of the opening of the account. Your goal is to achieve a certain target amount in your savings account. In how may years will the target amount be achieved?", "input_description": "The input file will contain data for one or more test cases, one test case per line. Each line will contain three numbers: the initial balance, the annual interest rate (as a percentage of the balance), and the target amount, separated by blank spaces. These will be positive numbers; they may or may not contain a decimal point. The target amount will be greater than the initial balance. The input is terminated by end-of-file.", "output_description": "For each line of input, your program will produce exactly one line of output: This line will contain one positive integer value: the number of years required to achieve the target amount.", "samples": "[{\"input\": \"200.00 6.5 300\\n500 4 1000.00\", \"output\": \"7\\n18\\n\"}]", "test_case_id": "1773", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 35, "total_accepted_number": 32, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1774, "fields": {"title": "Elementary Additions", "description": "<p>In today&#039;s environment, students rely on calculators and computers to perform simple arithmetic too much. Sadly, it is not uncommon to see university students who cannot do simple arithmetic without electronic aids. Professor Peano has had enough. He has decided to take the matter into his own hands and force his students to become proficient in the most basic arithmetic skill: addition of non-negative integers. Since the students do not have a good foundation in this skill, he decided to go back to the basics and represent non-negative integers with set theory.</p><p>The non-negative integers are represented by the following sets:</p><p></p><ul><li> 0 is represented by the empty set {}.<br /></li><li> For any number n &gt; 0, n is represented by a set containing the representations of all non-negative integers smaller than n.</li></ul><p>For example, the first 4 non-negative integers are represented by:<br /></p><pre><br />  0 =&gt; {}<br />  1 =&gt; {{}}<br />  2 =&gt; {{},{{}}}<br />  3 =&gt; {{},{{}},{{},{{}}}}<br /></pre><br />and so on. Notice that the cardinality (size) of the set is exactly the integer it represents. Although the elements of a set are generally unordered, Professor Peano requires that the elements of a set be ordered in increasing cardinality to make the assignments easier to grade. As an added advantage, Professor Peano is sure that there are no calculators or computer programs that can deal with numbers written in this notation.<p>Not surprisingly, many students cannot cope with this basic task and will fail the course if they do not get help soon. It is up to you, an enterprising computer science student, to help them. You have decided to write a computer program, codenamed Axiomatic Cheating Machine (ACM), to sell to the students and help them perform the<p></p>additions to pass the course.</p>", "input_description": "The first line of the input contains a positive integer giving the number of cases to follow. For each case, there are two lines of input each containing a non-negative integer represented in set notation. Each line contains only the characters '{', '}', and ','. The sum of the two given integers will be at most 15.", "output_description": "For each test case, output the sum of the two input integers in the set notation described above.", "samples": "[{\"input\": \"3\\n{}\\n{}\\n{{}}\\n{{},{{}}}\\n{{},{{}},{{},{{}}}}\\n{{}}\\n\", \"output\": \"{}\\n{{},{{}},{{},{{}}}}\\n{{},{{}},{{},{{}}},{{},{{}},{{},{{}}}}}\\n\"}]", "test_case_id": "1774", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 44, "total_accepted_number": 21, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1775, "fields": {"title": "Baseball", "description": "Baseball is a game full of statistics. But what good are these statistics? Maybe they can be used to predict the outcome of a game.<p></p><p></p>A baseball game consists of 9 innings. If the game is tied after 9 innings, one additional inning is played at a time until the game is no longer tied at the end of the additional inning. Each inning is divided into two halves, in which one team &quot;attacks&quot; and the other team &quot;defends&quot;. The visiting team attacks in the first half, while the home team attacks in the second half. If the home team is leading at the start of the second half of the 9th inning, the game ends because the winner has already been determined.<p></p><p></p>Each team submits a &quot;batting order&quot; at the beginning of the game indicating the order in which its 9 players will bat during the attack half of the inning. In each half of an inning, the players in the attacking team bat according to the batting order. The first batter in the first inning is the first one in the batting order. Each subsequent batter is the next batter in the batting order. If the previous batter is the last player in the batting order, the next batter is the first player in the batting order again. In each subsequent inning, the first player to bat is the player following the last player who has batted in the batting order.<p></p><p></p>When a player is successful at bat (a hit), the player at bat advances to the first base, and any other players already on base advance by one base (in real games a player may advance by multiple bases, but we will not consider this case in this problem). A player must advance to first base, second base, third base, and finally the home base in order to score a run. When a player reaches the home base, he is returned to the bench to wait for his next opportunity to bat. The half of an inning continues indefinitely until 3 attacking players are unsuccessful at bat (each unsuccessful batter is an &quot;out&quot;). When this happens, any players left on first, second, or third base return to the bench and do not score. The team that scores the most runs at the end of the game wins.<p></p><p></p>In certain situations, a player may &quot;sacrifice&quot; himself in order to advance the players already on base. If a sacrifice is successful, the player at bat is out but each player already on base is advanced by one base. A player advancing to the home base this way scores a run, unless the sacrificed batter is the third out of the inning. In the latter case, the half of the inning is over and no run is scored. If a sacrifice is unsuccessful, the batter is out and none of the players advances. A batter will attempt to sacrifice whenever there is a player on second base with zero out, or when there is a player on third base with at most one out.<p></p><p></p>One of the most commonly cited statistics for players is the &quot;hit percentage&quot; (between 0 and 1) for each player, indicating the proportion of time the player is successful at bat. Similarly, the &quot;sacrifice percentage&quot; of a player is the proportion of time the player is successful at a sacrifice. In this problem, you will be given the hit percentage and the sacrifice percentage of each of the 9 players in a team as well as a batting order. You will be asked to simulate a baseball game. Random numbers are required in a simulation, and you will use the following random number generator:<p></p><p></p>x(n+1) = (x(n) * 25173 + 13849) % 65536<p></p>where x(n) is the previous random number and x(n+1) is the next random number. The calculations above should be performed using 32-bit integers. You should start with the &quot;seed&quot; x(0) = 1; the first random number generated by your program is x(1). Each time the simulation needs to determine if a hit or a sacrifice is successful, it should generate the next random number. A hit (or a sacrifice) is successful if<p></p>random_number / 65536 &lt;= hit (or sacrifice) percentage<p></p>The division in this formula is floating-point division. Do not reset the random number generator (i.e. resetting the seed to 1) except at the beginning of each game.", "input_description": "The input consists of a number of games. The first line of the input file specifies the number of games to follow. Each game contains the batting order of the visiting team followed by the batting order of the home team. The batting order of each team starts with a line specifying the team name (at most 15 upper and lower case letters). The next 9 lines specify the 9 players, listed in the order they bat. Each of these lines contains the player's name (at most 15 upper and lower case characters), a space, then a floating-point number (to 3 decimal places) specifying his hit percentage, a space, and finally his sacrifice percentage (to 3 decimal places). You may assume that all hit percentages are between .200 and .400, and all sacrifice percentages are between .300 and .750. You may assume that no game will last more than 200 innings.", "output_description": "For each game, print the game number as well as the visiting and home team names in the first line, as follows:<pre>Game &lt;x&gt;: &lt;visiting&gt; vs. &lt;home&gt;</pre>This is followed by a blank line.</p><p>Next print the players who score hits and runs, separately, for each inning in the order they occur in the game. Use the format as follows:<pre>Inning 1:\n<br>Hits:\n<br>  &lt;player1&gt; &lt;team&gt;\n<br>  &lt;player2&gt; &lt;team&gt;\n<br>Runs:\n<br>  &lt;player3&gt; &lt;team&gt;\n<br>  &lt;player4&gt; &lt;team&gt;</pre>Indent the list of players by two spaces. Print the player name and the team name right-justified in a field width of 15 (in addition to the indentation before the player's name and one space separation between the player's name and team name). If no one scores a hit or a run, print the single line<pre>  none  </pre>(indented by two spaces) in the appropriate section instead of a list of players. Print a blank line after the output for each inning.</p><p>At the end of the game, print a summary on the number of runs and hits scored for each team, starting with the visiting team:<pre>End of Game:\n<br>  &lt;visiting&gt; &lt;x&gt; runs, &lt;x&gt; hits\n<br>  &lt;home&gt; &lt;x&gt; runs, &lt;x&gt; hits\n<br></pre>The summary should be indented by two spaces. Print the team name right-justified in a field width of 15 (in addition to the indentation).</p><p>Separate the output of consecutive games by a line containing 60 '=' signs.", "samples": "[{\"input\": \"1\\nRangers\\nYoung .213 .523\\nKinsler .207 .602\\nSosa .254 .300\\nLaird .220 .432\\nByrd .206 .749\\nWilkerson .236 .508\\nCatalanotto .272 .483\\nTeixeira .297 .573\\nSaltalamacchia .243 .632\\nBlueJays\\nWells .378 .502\\nHill .276 .544\\nOverbay .372 .694\\nMcDonald .373 .618\\nAdams .320 .690\\nRios .300 .450\\nJohnson .379 .559\\nStairs .302 .621\\nZaun .346 .515\\n\", \"output\": \"Game 1: Rangers vs. BlueJays\\n\\nInning 1:\\nHits:\\n             Hill        BlueJays\\n          Overbay        BlueJays\\n            Adams        BlueJays\\n\\nRuns:\\n  none\\n\\nInning 2:\\nHits:\\n  none\\n\\nRuns:\\n  none\\n\\nInning 3:\\nHits:\\n      Catalanotto         Rangers\\n            Wells        BlueJays\\n             Hill        BlueJays\\n            Adams        BlueJays\\n\\nRuns:\\n            Wells        BlueJays\\n\\nInning 4:\\nHits:\\n          Kinsler         Rangers\\n\\nRuns:\\n  none\\n\\nInning 5:\\nHits:\\n      Catalanotto         Rangers\\n\\nRuns:\\n  none\\n\\nInning 6:\\nHits:\\n             Sosa         Rangers\\n            Laird         Rangers\\n             Rios        BlueJays\\n\\nRuns:\\n  none\\n\\nInning 7:\\nHits:\\n        Wilkerson         Rangers\\n         Teixeira         Rangers\\n           Stairs        BlueJays\\n\\nRuns:\\n  none\\n\\nInning 8:\\nHits:\\n  none\\n\\nRuns:\\n  none\\n\\nInning 9:\\nHits:\\n  none\\n\\nRuns:\\n  none\\n\\nEnd of Game:\\n          Rangers 0 runs, 7 hits\\n         BlueJays 1 runs, 8 hits\\n\"}]", "test_case_id": "1775", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1777, "fields": {"title": "Tree Grafting", "description": "Trees have many applications in computer science. Perhaps the most commonly used trees are rooted binary trees, but there are other types of rooted trees that may be useful as well. One example is ordered trees, in which the subtrees for any given node are ordered. The number of children of each node is variable, and there is no limit on the number. Formally, an ordered tree consists of a finite set of nodes T such that<p></p><ul> <p></p><li> there is one node designated as the root, denoted root(T);<br /></li> <p></p><li> the remaining nodes are partitioned into subsets T1, T2, ..., Tm, each of which is also a tree (subtrees).</li> <p></p></ul> <p></p>Also, define root(T1), ..., root(Tm) to be the children of root(T), with root(Ti) being the i-th child. The nodes root(T1), ..., root(Tm) are siblings.<p></p>It is often more convenient to represent an ordered tree as a rooted binary tree, so that each node can be stored in the same amount of memory. The conversion is performed by the following steps:<p></p><ol> <p></p><li>remove all edges from each node to its children;</li> <p></p><li>for each node, add an edge to its first child in T (if any) as the left child;</li> <p></p><li>for each node, add an edge to its next sibling in T (if any) as the right child.</li> <p></p></ol> <p></p>This is illustrated by the following:<p></p><blockquote><pre> <p></p>         0                             0<p></p>       / | \\                          /<p></p>      1  2  3       ===&gt;             1<p></p>        / \\                           \\<p></p>       4   5                           2<p></p>                                      / \\<p></p>                                     4   3<p></p>                                      \\<p></p>                                       5<p></p></pre></blockquote> <p></p>In most cases, the height of the tree (the number of edges in the longest root-to-leaf path) increases after the conversion. This is undesirable because the complexity of many algorithms on trees depends on its height.<p></p>You are asked to write a program that computes the height of the tree before and after the conversion.<p></p>", "input_description": "The input is given by a number of lines giving the directions taken in a depth-first traversal of the trees. There is one line for each tree. For example, the tree above would give dudduduudu, meaning 0 down to 1, 1 up to 0, 0 down to 2, etc. The input is terminated by a line whose first character is #. You may assume that each tree has at least 2 and no more than 10000 nodes.\n", "output_description": "For each tree, print the heights of the tree before and after the conversion specified above. Use the format:\n<blockquote><pre> \nTree t: h1 =&gt; h2\n</pre></blockquote>\nwhere t is the case number (starting from 1), h1 is the height of the tree before the conversion, and h2 is the height of the tree after the conversion.\n", "samples": "[{\"input\": \"dudduduudu\\nddddduuuuu\\ndddduduuuu\\ndddduuduuu\\n#\\n\", \"output\": \"Tree 1: 2 => 4\\nTree 2: 5 => 5\\nTree 3: 4 => 5\\nTree 4: 4 => 4\\n\"}]", "test_case_id": "1777", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 19, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1778, "fields": {"title": "Look and Say", "description": "The look and say sequence is defined as follows. Start with any string of digits as the first element in the sequence. Each subsequent element is defined from the previous one by &quot;verbally&quot; describing the previous element. For example, the string 122344111 can be described as &quot;one 1, two 2&#039;s, one 3, two 4&#039;s, three 1&#039;s&quot;. Therefore, the element that comes after 122344111 in the sequence is 1122132431. Similarly, the string 101 comes after 1111111111. Notice that it is generally not possible to uniquely identify the previous element of a particular element. For example, a string of 112213243 1&#039;s also yields 1122132431 as the next element.<p></p>", "input_description": "The input consists of a number of cases. The first line gives the number of cases to follow. Each case consists of a line of up to 1000 digits.", "output_description": "For each test case, print the string that follows the given string.", "samples": "[{\"input\": \"3\\n122344111\\n1111111111\\n12345\\n\", \"output\": \"1122132431\\n101\\n1112131415\\n\"}]", "test_case_id": "1778", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 48, "total_accepted_number": 31, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1779, "fields": {"title": "Server Relocation", "description": "Michael has a powerful computer server that has hundreds of parallel processors and terabytes of main memory and disk space. Many important computations run continuously on this server, and power must be supplied to the server without interruption. <p></p><p></p>Michael&#039;s server must be moved to accommodate new servers that have been purchased recently. Fortunately, Michael&#039;s server has two redundant power supplies---as long as at least one of the two power supplies is connected to an electrical outlet, the server can continue to run. When the server is connected to an electrical outlet, it can be moved to any location which is not further away from the outlet than the length of the cord used to connect to the outlet. <p></p><p></p>Given which outlet Michael&#039;s server is plugged into initially and finally, and the locations of outlets in the server room, you should determine the smallest number of times you need to plug a cord into an electrical outlet in order to move the server while keeping the server running at all times. Note that, in the initial and final configuration, only one cord is connected to the power outlet.", "input_description": "The first line of input is an integer giving the number of cases to follow. For each case, the first line is of the form \n\nOUTLETS OUTLET_INITIAL OUTLET_FINAL LENGTH1 LENGTH2 \n\nwhere \n\n* OUTLETS is the number of outlets in the server room (2 <= OUTLETS <= 1000). \n* OUTLET_INITIAL is the index (starting from 1) of the outlet the server is initially connected to. \n* OUTLET_FINAL is the index (starting from 1) of the outlet the server is finally connected to. \n* LENGTH1 and LENGTH2 are the positive lengths of the two power cords, with at most three digits of precision after the decimal point (0 < LENGTH1, LENGTH2 <= 30000). \n\nThese are followed by OUTLETS lines giving the integer coordinates of the wall outlets, one per line, with the k-th line giving the location of the k-th outlet. All coordinates are specified as two integers (x- and y-coordinates) separated by a space, with absolute values at most 30000. You may assume that all coordinates are distinct, and that the initial outlet and the final outlet are different.", "output_description": "For each case, print the minimum number of times you need to plug a cord into an electrical outlet in order to move the server to the final location while keeping the server running at all times. If this is not possible, print \"Impossible\".", "samples": "[{\"input\": \"2\\n4 1 4 2.000 1.000\\n0 0\\n0 4\\n4 0\\n4 4\\n9 1 4 2.000 3.000\\n0 7\\n-6 2\\n-3 3\\n6 2\\n-6 -3\\n3 -3\\n6 -3\\n-3 -7\\n0 -7\\n\", \"output\": \"Impossible\\n8\\n\"}]", "test_case_id": "1779", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 49, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1780, "fields": {"title": "Team Work", "description": "A certain programming contest coach is frustrated with the lack of team work in his teams. He decided to demonstrate to his students the importance of team work by using the following well-known analogy: it is very easy to take a single piece of stick and snap it into two halves. But if you bundle three sticks together (i.e. the three members of the team) you now have to apply a lot more force to snap the sticks. The coach is certain that his teams will understand the importance of team work after this demonstration. <p></p><p></p>So the coach went out to the forest to collect the sticks. The coach knows that a demonstration should always be rehearsed to debug any problems. He ensures that it is practically impossible to snap three sticks bundled together and that it is very easy to snap individual sticks. Oh no! Every stick he has carefully collected snapped into smaller pieces. He can go out to collect more sticks, but how would he know that the sticks would work with the demonstration? <p></p><p></p>The coach came up with a clever idea: just glue the pieces back together to form larger sticks! It appears that every piece can be glued together securely with any other piece even if the two pieces came from different sticks originally. Thus, he can reconstruct sticks by putting two or more pieces together. The reconstructed sticks have the added advantage that each individual stick is really easy to snap at the connection point. However, if two sticks have a connection point at the same location, the two sticks will snap just as easily when bundled together. Therefore, he must reconstruct three sticks in such a way that none of the connection points coincide. Furthermore, it is desirable for the reconstructed sticks to be as long as possible. Finally, the three reconstructed sticks must have the same length---the coach does not want to imply that one team member is better than another. It is acceptable to leave some pieces unused. Each piece can only be used once, of course.<p></p>", "input_description": "The input consists of a number of cases. Each case is specified on one line. The first number specifies the number of pieces (N). Each of the following N numbers is a positive integer specifying the length of each piece. There are at most 13 pieces, and the length of each piece is at most 25. The end of input is specified by a case in which N = 0.\n", "output_description": "For each case, print the case number followed by a colon, followed by the longest possible length of the three reconstructed sticks on a single line. If it is impossible to reconstruct three sticks satisfying the constraints stated, then 0 is the longest possible length of the reconstructed sticks.\n", "samples": "[{\"input\": \"10 4 2 3 7 8 9 1 2 3 4\\n10 1 2 3 4 5 6 7 8 9 10\\n8 2 3 4 1 1 3 2 2\\n10 25 25 25 25 25 25 25 25 25 25\\n0\\n\", \"output\": \"Case 1: 14\\nCase 2: 18\\nCase 3: 6\\nCase 4: 0\\n\"}]", "test_case_id": "1780", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 6000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 6, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1781, "fields": {"title": "Vacation Rentals", "description": "The Fifth Season Resort consists of a number of condominiums which are frequently occupied by their owners. At other times, however, they are available as vacation rentals. Since the resort has no more than 26 condominiums, they are identified by upper case letters. <p></p><p></p>One day the resort manager&#039;s telephone rings. She receives a reservation request for a vacation rental with an arrival date of December 2 and a departure date of December 9. She looks at the table of reservations, but doesn&#039;t find a condominium that would be available for the entire period. Most of the existing reservations were made by the owners of the respective condominiums (who want to stay in their own units), so it is not desirable to move an existing reservation from one unit to another. As she continues to scrutinize the table of reservations, however, she has an idea and says: &quot;I can put you up in unit B for the first three nights, and transfer you to unit F for the rest of your stay. Will that work?&quot; The person agrees and the reservation is made. Notice that reservations are done by &quot;nights&quot;, so that a one night reservation implies that the guest departs one day after the arrival.<p></p><p></p>The goal of this problem is to satisfy such reservation requests (without changing existing reservations), with a minimum number of transfers (from one unit to another) during the requested period.", "input_description": "The input consists of a number of cases. The first line of each case contains two positive integers M and N. M is the number of consecutive days for which the resort's manager has a reservation table, and N is the number of units (condominiums) in the resort. The units are labeled by upper case letters starting at 'A'. There are at most 100 days and at least 3 rooms in the reservation table. The days are numbered 1, 2, ..., M for simplicity. \n\nThe reservation table is given in the next M lines. Each line (row) of the table refers to a particular day (in the order 1, 2, 3, etc.), and each column of the table to a particular unit of the resort (in the order 'A', 'B', 'C', etc.). An entry of 'X' means that the corresponding unit is reserved for that day, while an 'O' means that the unit is available. \n\nThe reservation table is followed by one line of input, the reservation request, consisting of two integers: the arrival date and the departure date. The arrival date is in the range 1..M. The departure date is greater than the arrival date and less than or equal to M+1. \n\nThe end of input is indicated by M = N = 0.", "output_description": "For each test case, first print the case number followed by a colon and a blank line. If the reservation request can be met, the output will show a reservation schedule with a minimum number of transfers (from one unit to another) during the stay at the resort. Each line of the schedule corresponds to a consecutive stay in the same unit, and should be printed in the following way:  <pre> &lt;unit&gt;: &lt;start date&gt;-&lt;end date&gt; </pre> where <tt>&lt;unit&gt;</tt> is the unit, <tt>&lt;start date&gt;</tt> is the date on which the guests moves into the unit,  and <tt>&lt;end date&gt;</tt> is the date on which the guests moves out of the unit. The lines in the schedule should be ordered in ascending order by the start date.</p>  <p><b>Tie breaking rule.</b>   There may be several schedules with a minimum number of transfers. In these cases, choose the schedule which uses the lowest \"unit label\" in the first day (so unit A is given preference to unit B). If there is still a tie, choose the schedule with the lowest unit number in the second day, and so on.</p>  <p>If the reservation request cannot be met, print the line: <pre> Not available </pre> instead of the schedule.</p>  <p>Separate the output of consecutive cases by a blank line.", "samples": "[{\"input\": \"10 7\\nXXXXXXX\\nXOXXXXO\\nXOXXXXO\\nXOXXXOX\\nOXXOXOX\\nXOXOXOX\\nOXXOXOX\\nOXXXXOX\\nXXXXXXX\\nXXXXXXX\\n2 9\\n0 0\\n\", \"output\": \"Case 1:\\n\\nB: 2-5\\nF: 5-9\\n\"}]", "test_case_id": "1781", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 8, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1782, "fields": {"title": "Wavelet Compression", "description": "The discrete wavelet transform is a popular tool for signal compression. In this problem, your job is to write a program to decompress a one-dimensional signal (a list of integers) that has been compressed by a simple wavelet transform.<p>To understand how this simple wavelet transform works, suppose that we have a list of an even number of integers. We compute the sum and difference of each pair of consecutive samples, resulting in two lists of sums and differences each having half the original length. Formally, if the original samples are<pre>a(1),..., a(n)</pre>the i-th sum <code>s(i)</code> and difference <code>d(i)</code> are computed as:<pre>for i = 1,...,n/2:<p></p><br />  s(i) = a(2*i-1) + a(2*i)<p></p><br />  d(i) = a(2*i-1) - a(2*i)</pre>This is then rearranged to give the transformed signal by first listing the sums and then the differences. For example, if the input signal is:<pre>  5, 2, 3, 2, 5, 7, 9, 6</pre>Then the sum and difference signals are:<pre>   s(i) = 7, 5, 12, 15<p></p><br />   d(i) = 3, 1, -2, 3</pre>Thus, the transformed signal is:<pre>  7, 5, 12, 15, 3, 1, -2, 3</pre></p><p>The same process is applied recursively to the first half of the transformed signal, treating <code>s(i)</code> as the input signal, until the length of the input signal is 1.  In the example above, the final transformed signal is:<pre>   39, -15, 2, -3, 3, 1, -2, 3</pre>It is assumed that the length of the original input is a power of 2, and the input signal consists of integers between 0 and 255 (inclusive) only.", "input_description": "The input consists of a number of cases. Each case is specified on a line, starting with an integer N (1 <= N <= 256) indicating the number of samples. The next N integers are the transformed samples. The end of input is indicated by a case in which N = 0.", "output_description": "For each test case, output the original samples on a single line, separated by a single space.", "samples": "[{\"input\": \"8 39 -15 2 -3 3 1 -2 3\\n4 10 -4 -1 -1\\n0\\n\", \"output\": \"5 2 3 2 5 7 9 6\\n1 2 3 4\\n\"}]", "test_case_id": "1782", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 27, "total_accepted_number": 14, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1783, "fields": {"title": "\u7d20\u6570\u7684\u4e2a\u6570", "description": "\u6570\u8bba\u662f\u6570\u5b66\u7684\u4e00\u4e2a\u91cd\u8981\u5206\u652f\uff0c\u7d20\u6570\u662f\u7814\u7a76\u6570\u8bba\u7684\u91cd\u8981\u8bfe\u9898\u4e4b\u4e00\u3002<p></p><p></p>\u73b0\u5728\uff0c\u4f60\u9700\u8981\u5b8c\u6210\u4e00\u4e2a\u4efb\u52a1\uff0c\u5c31\u662f\u5bfb\u627e\u533a\u95f4 [A,B]\u4e2d\u7d20\u6570\u7684\u4e2a\u6570\uff1f\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff0c\u6211\u60f3\u4f60\u4e00\u5b9a\u4f1a\u4f53\u4f1a\u5230\u7d20\u6570\u7684\u7f8e\u4e3d\u7684\uff5e", "input_description": "\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u62ec\u4e00\u884c\uff1b\n\u6bcf\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6570\u5b57 A \u548c B\uff0c\u5176\u4e2d\u6709 1 < A < B < 2^31\uff0c\u8f93\u5165\u6570\u636e\u4fdd\u8bc1A\u3001B \u4e4b\u95f4\u7684\u5dee\u503c\u4e0d\u8d85\u8fc7 1000000\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u533a\u95f4 [A,B]\u4e2d\u7d20\u6570\u7684\u4e2a\u6570\u3002", "samples": "[{\"input\": \"2 5\\n2 1000000\", \"output\": \"3\\n78498\\n\"}]", "test_case_id": "1783", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 276, "total_accepted_number": 43, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1784, "fields": {"title": "\u6590\u6ce2\u7eb3\u5951\u80cc\u5305", "description": "\u73b0\u5728\u6709 N \u4ef6\u7269\u54c1\uff0c\u6bcf\u4ef6\u7269\u54c1\u6709\u4e00\u5b9a\u7684\u91cd\u91cf\u548c\u4ef7\u503c\uff0c\u6709\u4e00\u4e2a\u80cc\u5305\uff0c\u53ef\u4ee5\u88c5\u4e00\u5b9a\u91cd\u91cf\u7684\u7269\u54c1\uff0c\u6211\u4eec\u60f3\u5c06\u8fd9\u4e9b\u7269\u54c1\u4e2d\u7684\u4e00\u90e8\u5206\u88c5\u5728\u8fd9\u4e2a\u80cc\u5305\u91cc\u9762\uff0c\u4f7f\u5f97\u80cc\u5305\u91cc\u9762\u7684\u7269\u54c1\u603b\u4ef7\u503c\u6700\u5927\u3002<p></p><p></p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u8fd9\u91cc\uff0c\u6bcf\u4ef6\u7269\u54c1\u7684\u91cd\u91cf\u90fd\u4f1a\u662f\u6590\u6ce2\u7eb3\u5951\u6570\u503c\uff1b\u6590\u6ce2\u7eb3\u5951\u6570\u5217\u4e2d\uff0c\u524d\u4e24\u9879\u662f1\u548c2\uff0c\u540e\u9762\u6bcf\u4e00\u9879\u7684\u503c\u90fd\u4f1a\u662f\u5176\u524d\u9762\u4e24\u9879\u7684\u548c\uff0c\u6240\u4ee5\uff0c\u5bb9\u6613\u77e5\u9053\uff0c\u6590\u6ce2\u7eb3\u5951\u6570\u5217\u662f\uff1a1\uff0c2\uff0c3\uff0c5\uff0c8\uff0c13...", "input_description": "\u8f93\u5165\u5305\u62ec\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff1b\n\n\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u5148\u5305\u542b\u4e24\u4e2a\u6570\u5b57 N \u548c W\uff0c\u5206\u522b\u8868\u793a\u7269\u54c1\u7684\u603b\u6570\u76ee\u548c\u80cc\u5305\u7684\u5bb9\u91cf\uff1b\n\n\u63a5\u4e0b\u6765\u7684 N \u884c\u4e2d\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6570 W(i) \u548c C\uff08i\uff09, 1 <= i <= N\uff0c\u8868\u793a\u7b2c i \u4ef6\u7269\u54c1\u7684\u91cd\u91cf\u548c\u4ef7\u503c\u3002\n\n\uff081 <= N <= 50\uff0c 1 <= W\uff08i\uff09,C\uff08i\uff09 <= 10^16\uff0c 0 < W < 10^18\uff09", "output_description": "\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u53ea\u9700\u8981\u8f93\u51fa\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6570\u503c\uff0c\u5373\u5f53\u524d\u80cc\u5305\u53ef\u88c5\u7269\u54c1\u603b\u7684\u6700\u5927\u4ef7\u503c\u3002", "samples": "[{\"input\": \"3 15\\n5 18\\n2 10\\n13 24\\n1 2\\n3 10\\n\", \"output\": \"34\\n0\\n\"}]", "test_case_id": "1784", "hint": "Some test cases used in this problem are unofficial prepared by Wuhanzhou. So any mistake here does not imply mistake in the offcial judge data.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 50, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1785, "fields": {"title": "\u7279\u6b8a\u5e8f\u5217", "description": "\u6709\u4e00\u4e2a\u5e8f\u5217\uff1a1,1,2,2,3,3\uff0c...\uff0cn\uff0cn.\uff08\u5171\u67092n\u4e2a\u6574\u6570\uff0c\u6bcf\u4e2a\u6570\u5728\u533a\u95f4[1,n]\u4e4b\u95f4\uff0c\u800c\u4e14\u6bcf\u4e2a\u6570\u51fa\u73b0\u4e14\u4ec5\u51fa\u73b02\u6b21\uff09<p></p><p></p>\u73b0\u5728\u4f60\u7684\u4efb\u52a1\u662f\u91cd\u65b0\u6392\u5217\u8fd9\u4e2a\u5e8f\u5217\uff0c\u4f7f\u5f97\u65b0\u7684\u5e8f\u5217\u6ee1\u8db3\u6761\u4ef6\uff1a<p></p><p></p>\u5728\u4e24\u4e2a 1 \u4e4b\u95f4 \u6709 1 \u4e2a\u6570<p></p>\u5728\u4e24\u4e2a 2 \u4e4b\u95f4 \u6709 2 \u4e2a\u6570<p></p>\u5728\u4e24\u4e2a 3 \u4e4b\u95f4 \u6709 3 \u4e2a\u6570<p></p>...<p></p>...<p></p>...<p></p>\u5728\u4e24\u4e2a n \u4e4b\u95f4 \u6709 n \u4e2a\u6570<p></p><p></p>\u4e3e\u4f8b\u8bf4\u660e\uff0c\u5f53 n = 3 \u7684\u65f6\u5019\uff0c\u5e8f\u5217\u662f\uff1a 1,1,2,2,3,3.<p></p>\u4e3a\u4e86\u6ee1\u8db3\u6761\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u6392\u5217\u5e8f\u5217\u4e3a\uff1a 3,1,2,1,3,2.<p></p><p></p>", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6570\u5b57 T\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u4e2a\u6570\u3002\n\n\u63a5\u4e0b\u6765\u7684 T \u884c\u5206\u522b\u8868\u793a\u4e00\u4e2a\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u542b\u4e00\u4e2a\u6570\u5b57 n\uff0c\u8868\u793a\u5f53\u524d\u5e8f\u5217\u6709 2n \u4e2a\u6570\u5b57\u3002\n\n\uff080 < T < 10086, 2 < n < 1000000000\uff09", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u5982\u679c\u80fd\u591f\u91cd\u65b0\u6392\u5217\u4e3a\u6ee1\u8db3\u6761\u4ef6\u7684\u65b0\u5e8f\u5217\uff0c\u8f93\u51fa\u201cYes\u201d\uff1b\u5426\u5219\uff0c\u8f93\u51fa\u201cNo\u201d.", "samples": "[{\"input\": \"3\\n3\\n4\\n5\\n\", \"output\": \"Case #1: Yes\\nCase #2: Yes\\nCase #3: No\\n\"}]", "test_case_id": "1785", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 28, "total_accepted_number": 16, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1786, "fields": {"title": "\u4ea4\u70b9\u7684\u4e2a\u6570", "description": "\u4e8c\u7ef4\u5e73\u9762\u4e0a\uff0c\u6709 N \u6761\u76f4\u7ebf\uff0c\u65e0\u4e09\u6761\u76f4\u7ebf\u5171\u7ebf\uff0c\u8bf7\u95ee\u8fd9\u4e9b\u76f4\u7ebf\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u4ea4\u70b9\u6570\u76ee\u3002<p></p><p></p>\u5982 N = 2 \u65f6\uff0c\u5219\u53ef\u80fd\u7684\u4ea4\u70b9\u6570\u91cf\u4e3a 0(\u5e73\u884c) \u6216\u8005 1(\u4e0d\u5e73\u884c)\u3002", "input_description": "\u8f93\u5165\u6570\u636e\u5305\u542b\u591a\u4e2a\u6d4b\u8bd5\u5b9e\u4f8b,\u6bcf\u4e2a\u6d4b\u8bd5\u5b9e\u4f8b\u5360\u4e00\u884c,\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570 N \uff08N <= 20\uff09, N \u8868\u793a\u76f4\u7ebf\u7684\u6570\u91cf.", "output_description": "\u6bcf\u4e2a\u6d4b\u8bd5\u5b9e\u4f8b\u5bf9\u5e94\u4e00\u884c\u8f93\u51fa\uff0c\u4ece\u5c0f\u5230\u5927\u5217\u51fa\u6240\u6709\u76f8\u4ea4\u65b9\u6848\uff0c\u5176\u4e2d\u6bcf\u4e2a\u6570\u4e3a\u53ef\u80fd\u7684\u4ea4\u70b9\u6570,\u6bcf\u884c\u7684\u6574\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002", "samples": "[{\"input\": \"2\\n3\\n\", \"output\": \"0 1\\n0 2 3\\n\"}]", "test_case_id": "1786", "hint": "Some test cases used in this problem are unofficial prepared by Wuhanzhou. So any mistake here does not imply mistake in the offcial judge data.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 27, "total_accepted_number": 9, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1787, "fields": {"title": "\u786c\u5e01\u95ee\u9898", "description": "\u6709 N \u79cd\u4e0d\u540c\u9762\u503c\u7684\u786c\u5e01\uff0c\u6bcf\u79cd\u786c\u5e01\u90fd\u662f\u6709\u9650\u4e2a\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u4e0a\u9650\u94b1\u6570 W, \u95ee\u7528\u8fd9\u4e9b\u786c\u5e01\u53ef\u7ec4\u6210\u4e0d\u8d85\u8fc7 W \u7684\u6700\u5927\u4ef7\u503c\uff0e", "input_description": "\u8f93\u5165\u6709\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\n\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e3a\u5982\u4e0b\u5f62\u5f0f\uff1a\n\nW N n1 D1 n2 D2 ... nN DN\n\nW \u548c N \u5206\u522b\u8868\u793a\u4e0a\u9650\u94b1\u6570 \u548c \u6709 N \u79cd\u4e0d\u540c\u9762\u503c\u7684\u786c\u5e01\uff0cn\uff08i\uff09\u548cD\uff08i\uff09\u8868\u793a\u9762\u503c\u4e3a D\uff08i\uff09\u7684\u786c\u5e01\u6570\u91cf\u4e3a n\uff08i\uff09\uff0c\u5176\u4e2d\u6709 1 <= i <= N.\n\n0 <= W <= 100000, 0 <=N <= 10, 0 <= n(i) <= 1000, 1 <= D(i) <= 1000.", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u8fd9\u4e9b\u786c\u5e01\u53ef\u7ec4\u6210\u4e0d\u8d85\u8fc7 W \u7684\u6700\u5927\u4ef7\u503c\uff0e", "samples": "[{\"input\": \"735 3  4 125  6 5  3 350\\n633 4  500 30  6 100  1 5  0 1\\n735 0\\n0 3  10 100  10 50  10 10\\n\", \"output\": \"735\\n630\\n0\\n0\\n\"}]", "test_case_id": "1787", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 36, "total_accepted_number": 13, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1789, "fields": {"title": "115\u5468\u5e74\u6821\u5e86", "description": "\u897f\u5357\u4ea4\u901a\u5927\u5b66\u8087\u5efa\u4e8e1896\u5e74\uff0c\u66fe\u5148\u540e\u5b9a\u540d\u4e3a&quot;\u5c71\u6d77\u5173\u5317\u6d0b\u94c1\u8def\u5b98\u5b66\u5802&quot;\u3001&quot;\u5510\u5c71\u4ea4\u901a\u5927\u5b66&quot;\u3001&quot;\u5510\u5c71\u94c1\u9053\u5b66\u9662&quot;\u7b49\uff0c\u662f\u4e2d\u56fd\u8fd1\u4ee3\u5efa\u6821\u6700\u65e9\u7684\u9ad8\u7b49\u5b66\u5e9c\u4e4b\u4e00\uff0c\u7d20\u6709\u201c\u4e2d\u56fd\u94c1\u8def\u5de5\u7a0b\u5e08\u7684\u6447\u7bee\u201d\u548c\u201c\u4e1c\u65b9\u5eb7\u5948\u5c14\u201d\u4e4b\u79f0\u3002<p></p><p></p>\u9093\u5c0f\u5e73\u540c\u5fd7\u66fe\u7ed9\u4e88\u5b66\u6821\u9ad8\u5ea6\u8bc4\u4ef7:&quot;\u8fd9\u6240\u5b66\u6821\u51fa\u4e86\u4e0d\u5c11\u4eba\u624d\u3002\u6709\u4e2a\u540d\u53eb\u6768\u674f\u4f5b\u7684\uff0c\u65e9\u5e74\u53c2\u52a0\u9769\u547d\uff0c\u727a\u7272\u540e\uff0c\u9c81\u8fc5\u7279\u5730\u5199\u8bd7\u60bc\u5ff5\u4ed6\u3002\u7afa\u53ef\u6862\u4e5f\u662f\u8fd9\u4e2a\u5b66\u6821\u6bd5\u4e1a\u7684\uff0c\u521b\u7acb\u4e86&#039;\u7269\u5019\u5b66&#039;\u3002\u8fd8\u6709\u4e00\u4f4d\u6865\u6881\u4e13\u5bb6\u8305\u4ee5\u5347\uff0c\u4e2d\u56fd\u7b2c\u4e00\u5ea7\u73b0\u4ee3\u5316\u7684\u94b1\u5858\u6c5f\u5927\u6865\u5c31\u662f\u4ed6\u8bbe\u8ba1\u4fee\u5efa\u7684\u3002&quot;<p></p><p></p>2011\u5e74\u662f\u4ea4\u5927\u5efa\u6821115\u5468\u5e74\uff0c\u8fd9\u662f\u4e00\u4e2a\u503c\u5f97\u6240\u6709\u4ea4\u5927\u4eba\u5e86\u795d\u7684\u5e74\u4efd\uff0c\u4e3a\u4e86\u5e86\u795d\u6821\u5e86\uff0c\u6821\u56e2\u59d4\u51c6\u5907\u5f00\u5c55\u4e00\u4e2a\u9762\u5411\u5168\u6821\u884c\u653f\u5de5\u4f5c\u4eba\u5458\u7684\u5e86\u795d\u6d3b\u52a8\uff0c\u4e3a\u4e86\u4f7f\u5f97\u8fd9\u9879\u6d3b\u52a8\u663e\u5f97\u6709\u8da3\uff0c\u9648\u6821\u957f\u4e0d\u5e0c\u671b\u5de5\u4f5c\u4eba\u5458\u548c\u4ed6\u6216\u5979\u7684\u4e0a\u53f8\u540c\u65f6\u53c2\u4e0e\u8fd9\u9879\u6d3b\u52a8\uff0c\u8fd9\u5c31\u610f\u5473\u7740\uff0c\u6821\u957f\u4e5f\u6709\u53ef\u80fd\u53c2\u52a0\u4e0d\u4e86\u54e6\uff0c\u90a3\u8be5\u600e\u4e48\u529e\u5462\uff1f<p></p><p></p>\u4ea4\u5927\u662f\u4e00\u6240\u6cbb\u5b66\u4e25\u8c28\u7684\u9ad8\u6821\uff0c\u8fd1\u5e74\u6765\u4e00\u76f4\u5173\u6ce8\u884c\u653f\u5de5\u4f5c\u4eba\u5458\u95f4\u7684\u5173\u7cfb\u878d\u6d3d\u5de5\u4f5c\uff0c\u6bcf\u5e74\u90fd\u4f1a\u8c03\u67e5\u8fd9\u4e9b\u5de5\u4f5c\u4eba\u5458\u5728\u5904\u7406\u4eba\u9645\u5173\u7cfb\u548c\u5de5\u4f5c\u5173\u7cfb\u7684\u60c5\u51b5\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u5de5\u4f5c\u4eba\u5458\u90fd\u8d4b\u4e88\u4e86\u4e00\u4e2a\u548c\u8c10\u503c\uff0c\u548c\u8c10\u503c\u8d8a\u9ad8\uff0c\u8bf4\u660e\u4ed6\u6216\u5979\u5728\u5de5\u4f5c\u4e2d\u80fd\u591f\u59a5\u5584\u5904\u7406\u4eba\u9645\u5173\u7cfb\u4ee5\u53ca\u80fd\u591f\u7ed9\u4e88\u522b\u4eba\u66f4\u591a\u7684\u6b22\u4e50\u548c\u4fe1\u4efb\uff0c\u5982\u679c\u51fa\u73b0\u67d0\u4e2a\u4eba\u7684\u548c\u8c10\u503c\u662f\u8d1f\u503c\uff0c\u90a3\u4f60\u53ef\u8981\u5c0f\u5fc3\u4e86\u54e6\u3002<p></p><p></p>\u4e3a\u4e86\u4f7f\u5f97\u8fd9\u9879\u6d3b\u52a8\u5177\u6709\u5f88\u9ad8\u7684\u4eba\u6c14\u548c\u652f\u6301\u529b\u5ea6\uff0c\u6821\u957f\u5e0c\u671b\u53c2\u4e0e\u5230\u8fd9\u9879\u6d3b\u52a8\u7684\u4eba\u7684\u603b\u548c\u8c10\u503c\u6700\u5927\uff0c\u4f5c\u4e3a\u4fe1\u606f\u5b66\u9662\u7684\u7f16\u7a0b\u9ad8\u624b\uff0c\u4f60\u80fd\u5e2e\u5e2e\u9648\u6821\u957f\u5417\uff1f<p></p>", "input_description": "\u8f93\u5165\u5305\u542b\u591a\u4e2a\u6d4b\u8bd5\u6570\u636e\uff1b\n\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662fN\uff0c\u8868\u793a\u53ef\u53c2\u52a0\u8fd9\u9879\u6d3b\u52a8\u7684\u603b\u4eba\u6570;\n\u63a5\u4e0b\u6765\u7684N\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u6570\u5b57Vk\uff0c\u5176\u4e2d1<= k <= N\uff0c\u8868\u793a\u7b2ck\u4e2a\u4eba\u7684\u548c\u8c10\u503c;\n\u63a5\u4e0b\u6765\u7684N-1\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6570L\u548cK\uff0c\u8868\u793a\u7b2cL\u4e2a\u4eba\u662f\u7b2cK\u4e2a\u4eba\u7684\u4e0a\u53f8;\n\uff081 <= N <= 1000,  -100 <= Vk <= 100 \uff09.\n", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u5305\u542b\u4e00\u884c\uff0c\u5373\u6700\u5927\u7684\u548c\u8c10\u503c.", "samples": "[{\"input\": \"7\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1 3\\n2 3\\n6 4\\n7 4\\n4 5\\n3 5\\n\", \"output\": \"5\"}]", "test_case_id": "1789", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 56, "total_accepted_number": 13, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1795, "fields": {"title": "Seinfeld", "description": "I\u2019m out of stories. For years I\u2019ve been writing stories, some rather silly, just to make simple problems look difficult and complex problems look easy. But, alas, not for this one.<p></p>You\u2019re given a non empty string made in its entirety from opening and closing braces. Your task is to find the minimum number of \u201coperations\u201d needed to make the string stable. The definition for being stable is as follows:<p></p><p></p><p></p>   1. An empty string is stable.<p></p><p></p>   2. If S is stable, then {S} is also stable.<p></p><p></p>   3. If S and T are both stable, then ST (the concatenation of the two) is also stable.<p></p><p></p><p></p>All of these strings are stable: {}, {}{}, and {{}{}}; But none of these: }{, {{}{, nor {}{.<p></p>The only operation allowed on the string is to replace an opening brace with a closing brace, or visa-versa.<p></p>", "input_description": "Your program will be tested on one or more data sets. Each data set is described on a single line. The line is a non-empty string of opening and closing braces and nothing else. No string has more than 2000 braces. All sequences are of even length.\nThe last line of the input is made of one or more \u2019-\u2019 (minus signs.)\n", "output_description": "For each test case, print the following line:\nk. N\nWhere k is the test case number (starting at one,) and N is the minimum number of operations needed to convert the given string into a balanced one.\n", "samples": "[{\"input\": \"}{\\n{}{}{}\\n{{{}\\n---\\n\", \"output\": \"1. 2\\n2. 0\\n3. 1\\n\"}]", "test_case_id": "1795", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 111, "total_accepted_number": 30, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1798, "fields": {"title": "Probability One", "description": "Number guessing is a popular game between elementary-school kids. Teachers encourage pupils to play the game as it enhances their arithmetic skills, logical thinking, and following-up simple procedures. We think that, most probably, you too will master in few minutes. Here\u2019s one example of how you too can play this game: Ask a friend to think of a number, let\u2019s call it n0. Then:<p></p><p></p><p></p>   1. Ask your friend to compute n1 = 3 * n0 and to tell you if n1 is even or odd.<p></p><p></p>   2. If n1 is even, ask your friend to compute n2 = n1/2. If, otherwise, n1 was odd then let your friend compute n2 = (n1 + 1)/2.<p></p><p></p>   3. Now ask your friend to calculate n3 = 3 * n2.<p></p><p></p>   4. Ask your friend to tell tell you the result of n4 = n3/9. (n4 is the quotient of the division operation. In computer lingo, \u2019/\u2019 is the integer-division operator.)<p></p><p></p>   5. Now you can simply reveal the original number by calculating n0 = 2 * n4 if n1 was even, or n0 = 2 * n4 + 1 otherwise.<p></p><p></p><p></p>Here\u2019s an example that you can follow: If n0 = 37, then n1 = 111 which is odd. Now we can calculate n2 = 56, n3 = 168, and n4 = 18, which is what your friend will tell you. Doing the calculation 2 * n4 + 1 = 37 reveals n0.<p></p>", "input_description": "Your program will be tested on one or more test cases. Each test case is made of a single positive number (0 < n0 < 1,000,000).\nThe last line of the input file has a single zero (which is not part of the test cases.)\n", "output_description": "For each test case, print the following line:\nk. B Q\nWhere k is the test case number (starting at one,) B is either \u2019even\u2019 or \u2019odd\u2019 (without the quotes) depending on your friend\u2019s answer in step 1. Q is your friend\u2019s answer to step 4.\n", "samples": "[{\"input\": \"37\\n38\\n0\\n\", \"output\": \"1. odd 18\\n2. even 19\\n\"}]", "test_case_id": "1798", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 64, "total_accepted_number": 46, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1801, "fields": {"title": "Stock Chase", "description": "I have to admit, the solution I proposed last year for solving the bank cash crisis didn\u2019t solve the whole economic crisis. As it turns out, companies don\u2019t have that much cash in the first place. They have assets which are primarily shares in other companies. It is common, and acceptable, for one company to own shares in another. What complicates the issue is for two companies to own shares in each other at the same time. If you think of it for a moment, this means that each company now (indirectly) controls its own shares.<p></p>New market regulation is being implemented: No company can control shares in itself, whether directly or indirectly. The Stock Market Authority is looking for a computerized solution that will help it detect any buying activity that will result in a company controlling its own shares. It is obvious why they need a program to do so, just imagine the situation where company A buying shares in B, B buying in C, and then C buying in A. While the first two purchases are acceptable. The third purchase should be rejected since it will lead to the three companies controlling shares in themselves. The program will be given all purchasing transactions in chronological order. The program should reject any transaction that could lead to one company controlling its own shares. All other transactions are accepted.<p></p>", "input_description": "Your program will be tested on one or more test cases. Each test case is specified on T + 1 lines. The first line specifies two positive numbers: (0 < N \u2264 234) is the number of companies and (0 < T \u2264 100, 000) is the number of transactions. T lines follow, each describing a buying transaction. Each transaction is specified using two numbers A and B where (0 < A,B \u2264 N) indicating that company A wants to buy shares in company B.\nThe last line of the input file has two zeros.\n", "output_description": "For each test case, print the following line:\nk. R\nWhere k is the test case number (starting at one,) R is the number of transactions that should be rejected.\n", "samples": "[{\"input\": \"3 6\\n1 2\\n1 3\\n3 1\\n2 1\\n1 2\\n2 3\\n0 0\\n\", \"output\": \"1. 2\\n\"}]", "test_case_id": "1801", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 80, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1804, "fields": {"title": "National Treasures", "description": "The great hall of the national museum has been robbed few times recently. Everyone is now worried about the security of the treasures on display. To help secure the hall, the museum contracted with a private security company to provide additional guards to stay in the great hall and keep an eye on the ancient artifacts. The museum would like to hire the minimum number of additional guards so that the great hall is secured.<p></p>The great hall is represented as a two dimensional grid of R * C cells. Some cells are already occupied with the museum\u2019s guards. All remaining cells are occupied by artifacts of different types (statues, sculptures, ... etc.) which can be replaced by new hired guards. For each artifact, few other cells in the hall are identified as critical points of the artifact depending on the artifact value, type of vault it is kept inside, and few other factors. In other words, if this artifact is going to stay in the hall then all of its critical points must have guards standing on them. A guard standing in a critical position of multiple artifacts can keep an eye on them all. A guard, however, can not stand in a cell which contains an artifact (instead, you may remove the artifact to allow the guard to stay there). Also you can not remove an artifact and leave the space free (you can only replace an artifact with a new hired guard).<p></p>Surveying all the artifacts in the great hall you figured out that the critical points of any artifact (marked by a \u2299) are always a subset of the 12 neighboring cells as shown in the grid below.<p></p><br /><table border=\"1\"><tr><td>&#160;</td><td>2</td><td>&#160;</td><td>3</td><td>&#160;</td></tr><tr><td>1</td><td>&#160;</td><td>9</td><td>&#160;</td><td>4</td></tr><tr><td>&#160;</td><td>12</td><td>\u2299</td><td>10</td><td>&#160;</td></tr><tr><td>8</td><td>&#160;</td><td>11</td><td>&#160;</td><td>5</td></tr><tr><td>&#160;</td><td>7</td><td>&#160;</td><td>6</td><td>&#160;</td></tr></table><p></p><br /><p></p>Accordingly, the type of an artifact can be specified as a non-negative integer where the i-th bit is 1 only if critical point number i from the picture above is a critical point of that artifact. For example an artifact of type 595 (in binary 1001010011) can be pictured as shown in the figure below. Note that bits are numbered from right to left (the right-most bit is bit number 1.) If a critical point of an artifact lies outside the hall grid then it is considered secure.<p></p><br /><table border=\"1\"><tr><td>&#160;</td><td>2</td><td>&#160;</td><td>&#160;</td><td>&#160;</td></tr><tr><td>1</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td></tr><tr><td>&#160;</td><td>&#160;</td><td>\u2299</td><td>10</td><td>&#160;</td></tr><tr><td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><td>5</td></tr><tr><td>&#160;</td><td>7</td><td>&#160;</td><td>&#160;</td><td>&#160;</td></tr></table><p></p><br /><p></p>You are given the layout of the great hall and are asked to find the minimum number of additional guards to hire such that all remaining artifacts are secured.<p></p>", "input_description": "Your program will be tested on one or more test cases. Each test case is specified using R+1 lines. The first line specifies two integers (1 \u2264 R,C \u2264 50) which are the dimensions of the museum hall. The next R lines contain C integers separated by one or more spaces. The j-th integer of the i-th row is -1 if cell (i, j) already contains one of the museum\u2019s guards, otherwise it contains an integer (0 \u2264 T < 212) representing the type of the artifact in that cell.\nThe last line of the input file has two zeros. \n", "output_description": "For each test case, print the following line:\nk. G\nWhere k is the test case number (starting at one,) and G is the minimum number of additional guards to hire such that all remaining artifacts are secured.\n", "samples": "[{\"input\": \"1 3\\n512 -1 2048\\n2 3\\n512 2560 2048\\n512 2560 2048\\n0 0\\n\", \"output\": \"1. 0\\n2. 2\\n\"}]", "test_case_id": "1804", "hint": "The picture shows the solution of the second test case where the two artifacts in the middle are replaced by guards. \\n <img src=\"uploadFiles/1804_3.JPG\" /> ", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 17, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1805, "fields": {"title": "\u5b8c\u7f8e\u6570", "description": "\u6211\u4eec\u5c06\u6240\u6709\u7684\u56e0\u5b50\u548c\u6070\u597d\u7b49\u4e8e\u81ea\u8eab2\u500d\u7684\u6570\u79f0\u4e4b\u4e3a\u5b8c\u7f8e\u6570\uff0c\u6bd4\u5982\u65706\uff0c\u5b83\u7684\u6240\u6709\u56e0\u5b50\u4e4b\u548c\u4e3a12\uff081+2+3+6\uff09\uff0c\u6070\u597d\u7b49\u4e8e6\u672c\u8eab\u76842\u500d\u3002\u73b0\u5728\u4f60\u7684\u95ee\u9898\u662f\u8bf7\u8ba1\u7b97\u533a\u95f4 [A, B] \u5185\u5b8c\u7f8e\u6570\u7684\u4e2a\u6570\u3002", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u4e2a\u6570\uff1b\n\u63a5\u4e0b\u6765\u7684\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u5305\u542b\u4e24\u4e2a\u6574\u6570A\u548cB\u3002\n( 1 <= T <= 100, 1 <= A <= B <= 10,000,000,000 )\n", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u6d4b\u8bd5\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\u4ee5\u53ca\u533a\u95f4\u5185\u5b8c\u7f8e\u6570\u4e2a\u6570\uff0c\u8fd9\u4e2a\u6570\u4e5f\u8bb8\u4f1a\u5f88\u5927\uff0c\u4f60\u53ea\u8981\u8f93\u51fa\u5b83\u5bf9\u65702011\u6c42\u6a21\u540e\u7684\u503c\u5373\u53ef\u3002", "samples": "[{\"input\": \"2\\n1 5\\n1 10\\n\", \"output\": \"Case #1: 0\\nCase #2: 1\\n\"}]", "test_case_id": "1805", "hint": "\u5bf9\u4e8e\u533a\u95f4[1,10]\uff0c\u53ea\u6709\u65706\u6ee1\u8db3\u6761\u4ef6\uff0c\u6545\u5b8c\u7f8e\u6570\u7684\u4e2a\u6570\u4e3a1\uff0c\u5bf9\u65702011\u6c42\u6a21\u540e\u5176\u503c\u4e3a1\uff0c\u6545\u8f93\u51fa1.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 417, "total_accepted_number": 60, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1806, "fields": {"title": "\u8001\u4e61", "description": "\u76f8\u4fe1\u5f88\u591a\u540c\u5b66\u7684\u5bb6\u90fd\u5728\u5343\u91cc\u4e4b\u5916\uff0c\u5728\u591c\u6df1\u4eba\u9759\u7684\u65f6\u5019\uff0c\u4f60\u662f\u5426\u60f3\u5ff5\u8fc7\u81ea\u5df1\u7684\u4eb2\u4eba\u5462\uff1f\u90a3\u5c71\uff0c\u90a3\u6c34\uff0c\u90a3\u4eba\u2026<p></p><p></p>\u201c\u65e2\u7136\u9009\u62e9\u4e86\u8fdc\u65b9\uff0c\u4fbf\u53ea\u987e\u98ce\u96e8\u517c\u7a0b\u201d<p></p><p></p>\u4f60\u6216\u8bb8\u5fd7\u5b58\u9ad8\u8fdc\uff0c\u6216\u8bb8\u500d\u601d\u4eb2\u4eba\u3002\u4f46\u662f\uff0c\u8981\u8bb0\u4f4f\uff0c\u8fd9\u91cc\u8fd8\u6709\u4e00\u6279\u548c\u4f60\u6765\u81ea\u5171\u540c\u7684\u5bb6\u4e61\u7684\u4eba\u2015\u2015\u8001\u4e61\u5728\u8fd9\u91cc\u594b\u6597\u3002\u4f60\u9700\u8981\u5bfb\u627e\u4ed6\u4eec\uff0c\u4f60\u9700\u8981\u52a0\u5165\u8fd9\u4e2a\u5171\u540c\u7684\u594b\u6597\u5927\u5bb6\u5ead\u3002<p></p><p></p>\u5728\u4f60\u4eec\u521a\u5165\u5927\u5b66\u65f6\uff0c\u6216\u8bb8\u6709\u8001\u4e61\u53bb\u627e\u8fc7\u4f60\u4eec\uff0c\u4f46\u662f\u8fd9\u4e5f\u4ec5\u4ec5\u662f\u4e00\u90e8\u5206\uff0c\u4f60\u7a76\u7adf\u6709\u591a\u5c11\u8001\u4e61\u5462\uff1f<p></p><p></p>\u6216\u8bb8\u4f60\u5e76\u4e0d\u8ba4\u8bc6\u6240\u6709\u8001\u4e61\uff0c\u4e5f\u672a\u5fc5\u548c\u6bcf\u4e00\u4e2a\u8001\u4e61\u6709\u5f88\u6df1\u7684\u4ea4\u60c5\uff0c\u4f46\u662f\uff0c\u201c\u5728\u4ea4\u5927\uff0c\u6211\u6709\u591a\u5c11\u8001\u4e61\u5462\uff1f\u201d\u8fd9\u4e2a\u4f60\u6025\u5207\u60f3\u77e5\u9053\u7684\u95ee\u9898\u6446\u5728\u4e86\u4f60\u7684\u9762\u524d\uff0c\u73b0\u5728\u4f60\u5c06\u8981\u7528\u7a0b\u5e8f\u6765\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002<p></p><p></p><p></p>\u73b0\u5728\u6709N\u4e2a\u4eba\uff0c\u6807\u53f7\u4f9d\u6b21\u4e3a1,2,3\u2026\uff0cN\uff0c\u5176\u4e2d\uff0c\u4f60\u81ea\u5df1\u7684\u6807\u53f7\u59cb\u7ec8\u4e3a1\uff1b<p></p>\u73b0\u5728\u7ed9\u5b9aQ\u4e2a\u5173\u7cfb&lt; i, j &gt; \u8868\u793a\u6807\u53f7\u4e3ai\u7684\u540c\u5b66\u4e0e\u6807\u53f7\u4e3aj\u7684\u540c\u5b66\u662f\u8001\u4e61\u5173\u7cfb\uff1b<p></p>\u6211\u4eec\u8ba4\u4e3a\uff0c\u5982\u679c\u6709&lt; i, j &gt;\u548c&lt; j, k &gt;\u90a3\u4e48\uff0c\u4f1a\u6709&lt; i, k &gt;\u5373\u6807\u53f7\u4e3ai\u7684\u540c\u5b66\u4e0e\u6807\u53f7\u4e3ak\u7684\u540c\u5b66\u4e5f\u662f\u8001\u4e61\u5173\u7cfb\u3002<p></p>", "input_description": "\u8f93\u5165\u6570\u636e\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u4e2a\u6570\uff1b\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u67092\u4e2a\u6574\u6570N\u548cQ\uff0c\u5206\u522b\u8868\u793a\u4eba\u6570\u548c\u5173\u7cfb\u6570\u76ee\uff1b\n\u63a5\u4e0b\u6765\u7684Q\u884c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570< i,j >\u8868\u793a\u8001\u4e61\u5173\u7cfb\u3002\n\uff080 < T < 100, 0 < N <= 1000, 0 <= Q <= N * N, 1 <= i, j <= N, |i - j| > 0\uff09", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u51fa\u6d4b\u8bd5\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\u4ee5\u53ca\u4f60\u7684\u8001\u4e61\u6570\u76ee\u3002", "samples": "[{\"input\": \"4\\n3 1\\n2 3\\n3 1\\n1 2\\n3 2\\n1 2\\n2 3\\n3 2\\n2 3\\n3 2\\n\", \"output\": \"Case #1: 0\\nCase #2: 1\\nCase #3: 2\\nCase #4: 0\\n\"}]", "test_case_id": "1806", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 110, "total_accepted_number": 31, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1808, "fields": {"title": "The Boss on Mars", "description": "On Mars, there is a huge company called ACM (A huge Company on Mars), and it\u2019s owned by a younger boss.<p></p><p></p>Due to no moons around Mars, the employees can only get the salaries per-year. There are n employees in ACM, and it\u2019s time for them to get salaries from their boss. All employees are numbered from 1 to n. With the unknown reasons, if the employee\u2019s work number is k, he can get k^4 Mars dollars this year. So the employees working for the ACM are very rich.<p></p><p></p>Because the number of employees is so large that the boss of ACM must distribute too much money, he wants to fire the people whose work number is co-prime with n next year. Now the boss wants to know how much he will save after the dismissal.<p></p>", "input_description": "The first line contains an integer T indicating the number of test cases. (1 \u2264 T \u2264 1000) Each test case, there is only one integer n, indicating the number of employees in ACM. (1 \u2264 n \u2264 10^8)", "output_description": "For each test case, output an integer indicating the money the boss can save. Because the answer is so large, please module the answer with 1,000,000,007.", "samples": "[{\"input\": \"2\\n4\\n5\\n\", \"output\": \"82\\n354\\n\"}]", "test_case_id": "1808", "hint": "Case1: sum=1+3*3*3*3=82\\nCase2: sum=1+2*2*2*2+3*3*3*3+4*4*4*4=354\\n\\nThe data used in this problem is unofficial data prepared by Wuhanzhou. So any mistake here does not imply mistake in the official judge data.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 47, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1810, "fields": {"title": "\u52a8\u8f66\u7ec4\u96be\u9898", "description": "\u636e\u65b0\u534e\u7f51\u62a5\u9053\uff0c2011\u5e747\u670823\u65e520\u65f627\u5206\uff0c\u5317\u4eac\u81f3\u798f\u5dde\u7684D301\u6b21\u5217\u8f66\u884c\u9a76\u81f3\u6e29\u5dde\u5e02\u53cc\u5c7f\u8def\u6bb5\u65f6\uff0c\u4e0e\u676d\u5dde\u5f00\u5f80\u798f\u5dde\u7684D3115\u6b21\u5217\u8f66\u8ffd\u5c3e\uff0c\u9020\u6210D301\u6b21\u5217\u8f664\u8282\u8f66\u53a2\u4ece\u9ad8\u67b6\u6865\u4e0a\u6389\u843d\u3002<p></p>\u5728\u6b64\uff0c\u6211\u4eec\u90d1\u91cd\u60bc\u5ff5\u9047\u96be\u8005\uff01\uff01\uff01<p></p>\u7531\u4e8e\u6e29\u5dde\u52a8\u8f66\u4e8b\u6545\u7684\u53d1\u751f\uff0c\u539f\u672c\u8ba1\u5212\u5728N\u4e2a\u57ce\u5e02\u4e4b\u95f4\u5927\u5174\u52a8\u8f66\u94c1\u8def\u7684\u8ba1\u5212\u4e0d\u5f97\u4e0d\u505a\u51fa\u6539\u53d8\u3002\u73b0\u6709N\u5ea7\u57ce\u5e02\uff08\u7f16\u53f7\u4ece1\u5230N\uff09,\u9700\u8981\u5728\u8fd9N\u5ea7\u57ce\u5e02\u4e4b\u95f4\u4fee\u5efa\u94c1\u8def\uff0c\u4f7f\u4efb\u610f\u4e24\u5ea7\u57ce\u5e02\u4e4b\u95f4\u90fd\u53ef\u4ee5\u8fde\u901a\u3002<p></p>\u5df2\u77e5\u5728\u4e00\u4e9b\u5927\u578b\u57ce\u5e02\u95f4\u5df2\u7ecf\u6709\u94c1\u8def\u76f4\u63a5\u76f8\u8fde\u4e86\uff0c\u8bf7\u4f60\u60f3\u51fa\u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4f7f\u5f97\u4fee\u5efa\u7684\u94c1\u8def\u5c06\u8fd9N\u5ea7\u57ce\u5e02\u8fde\u8d77\u6765\uff0c\u5e76\u4e14\u94c1\u8f68\u7684\u603b\u957f\u5ea6\u6700\u77ed\u3002<p></p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u57ce\u5e02\u603b\u6570N ( 3 <= N <= 200 )\u3002\u63a5\u4e0b\u6765\u6709N\u884c\uff0c\u7b2c i \u884c\u6709N\u4e2a\u6574\u6570\uff0c\u5176\u4e2d\u7b2c j \u4e2a\u6574\u6570\u8868\u793ai\u57ce\u5e02\u548cj\u57ce\u5e02\u4e4b\u95f4\u7684\u8ddd\u79bb(\u57ce\u5e02i\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e00\u5b9a\u4e3a0\uff0c\u5176\u4ed6\u8ddd\u79bb\u4fdd\u8bc1\u5728\u533a\u95f4 [ 1 , 10,000 ] )\uff0c\u63a5\u4e0b\u6765\u662f\u4e00\u4e2a\u6574\u6570 Q \uff0c 0 <= Q <= N * (N - 1) / 2 \uff0c\u7136\u540e\u662fQ\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 u \u548c v, 1 <= u , v <= N, \u8868\u793a u, v \u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u5df2\u7ecf\u6709\u52a8\u8f66\u76f8\u901a\u4e86\u3002", "output_description": "\u8bf7\u8fd0\u7528\u6700\u4f18\u7684\u65b9\u6cd5\uff0c\u8f93\u51fa\u6240\u9700\u5efa\u8bbe\u52a8\u8f66\u94c1\u8def\u7684\u603b\u957f\u5ea6\uff0c\u4f7f\u4fee\u5efa\u7684\u94c1\u8def\u8ba9\u6240\u6709\u57ce\u5e02\u8fde\u901a\u4e14\u603b\u957f\u5ea6\u6700\u77ed\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\u3002", "samples": "[{\"input\": \"3\\n0 990 692\\n990 0 179\\n692 179 0\\n1\\n1 2\\n\", \"output\": \"179\\n\"}]", "test_case_id": "1810", "hint": "A\u3001B\u4e24\u5ea7\u57ce\u5e02\u662f\u8fde\u901a\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53A\u4e0eB\u4e4b\u95f4\u6709\u52a8\u8f66\u94c1\u8def\u76f4\u63a5\u8fde\u63a5\uff0c\u6216\u8005\u5b58\u5728\u57ce\u5e02C\uff0c\u4f7f\u5f97A\u548cC\u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u6709\u94c1\u8def\u76f8\u8fde\uff0c\u4e14C\u548cB\u8fd9\u4e24\u5ea7\u57ce\u5e02\u4e4b\u95f4\u6709\u94c1\u8def\u76f8\u8fde\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 49, "total_accepted_number": 17, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1811, "fields": {"title": "\u6597\u5730\u4e3b", "description": "\u4ea4\u5927\u5c06\u8981\u4e3e\u884c\u4e00\u6b21\u7f51\u4e0a\u6597\u5730\u4e3b\u8054\u8d5b\uff0c\u540c\u5b66\u4eec\u5f88\u79ef\u6781\uff0c\u73b0\u5728\u5df2\u7ecf\u6709N\u4e2a\u4eba\u62a5\u540d\u53c2\u52a0\u8054\u8d5b\u3002\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u573a\u6597\u5730\u4e3b\u6bd4\u8d5b\u9700\u89813\u4e2a\u4eba\u53c2\u52a0\uff0c\u4f46\u662f\u540c\u5b66\u4e4b\u95f4\u6709\u7684\u662f\u76f8\u4e92\u8ba4\u8bc6\u7684\uff0c\u800c\u6709\u7684\u4e0d\u8ba4\u8bc6\u3002<p></p>\u5982\u679c3\u4e2a\u4eba\u76f8\u4e92\u90fd\u8ba4\u8bc6\uff0c\u90a3\u4e48\u4ed6\u4eec\u4f1a\u5f88\u9ad8\u5174\u5730\u6597\u5730\u4e3b\uff1b<p></p>\u5982\u679c3\u4e2a\u4eba\u76f8\u4e92\u90fd\u4e0d\u8ba4\u8bc6\uff08\u5373\u4efb\u610f\u4e24\u4e2a\u4eba\u90fd\u4e0d\u8ba4\u8bc6\uff09\uff0c\u867d\u7136\u4e0d\u5f88\u5c3d\u5174\uff0c\u4f46\u4e5f\u80fd\u516c\u5e73\u5730\u6597\u5730\u4e3b\u3002<p></p>\u4f46\u5f533\u4e2a\u4eba\u4e0d\u662f\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\u65f6\uff0c\u4ed6\u4eec\u5c31\u4f1a\u6000\u7591\u6709\u4eba\u4e32\u901a\u4f5c\u5f0a\u800c\u5bfc\u81f4\u8054\u8d5b\u4e0d\u516c\u5e73\u3002\u8003\u8651\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u7ec4\u59d4\u4f1a\u51b3\u5b9a\u4e0d\u5b89\u6392\u8fd9\u6837\u7684\u4e09\u4e2a\u4eba\u5728\u4e00\u8d77\u6597\u5730\u4e3b\u3002<p></p>\u5728N\u4e2a\u53c2\u8d5b\u8005\u4e2d\uff0c\u539f\u8ba1\u5212\u662f\u6bcf3\u4e2a\u4eba\u90fd\u8981\u8fdb\u884c\u4e00\u573a\u6bd4\u8d5b\uff0c\u56e0\u4e3a\u4e0a\u8ff0\u539f\u56e0\uff0c\u7ec4\u59d4\u4f1a\u60f3\u77e5\u9053\u5728\u907f\u514d\u88ab\u6000\u7591\u4e0d\u516c\u5e73\u7684\u524d\u63d0\u4e0b\uff0c\u6700\u591a\u80fd\u8fdb\u884c\u591a\u5c11\u573a\u6bd4\u8d5b\u5462\uff1f<p></p>", "input_description": "\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff08\u4e0d\u8d85\u8fc710\u7ec4\uff09\u3002\n\u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570N\uff083 <= N <= 1,000\uff09\uff0cM( 0 <= M <= 250,000)\uff0c\u5206\u522b\u8868\u793a\u53c2\u52a0\u6bd4\u8d5b\u7684\u4eba\u6570\u548c\u7ec4\u59d4\u4f1a\u83b7\u5f97\u7684\u5173\u7cfb\u6570\u76ee\u3002\n\u63a5\u4e0b\u6765\u7684M\u884c\u4e2d\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570A\u548cB\uff081 <= A, B <= N\uff0c\u4e14A\u4e0d\u7b49\u4e8eB\uff09\uff0c\u8868\u793a\u7b2cA\u4e2a\u4eba\u548c\u7b2cB\u4e2a\u4eba\u662f\u76f8\u4e92\u8ba4\u8bc6\u7684\uff0c\u6ce8\u610f\uff1a\u8ba4\u8bc6\u7684\u5173\u7cfb\u662f\u6ca1\u6709\u4f20\u9012\u6027\u7684\uff0c\u4f8b\u5982A\u8ba4\u8bc6B\uff0cB\u8ba4\u8bc6C\uff0c\u4f46A\u4e0d\u4e00\u5b9a\u8ba4\u8bc6C\uff1b\u800c\u4e14\uff0c\u7531\u4e8e\u7ec4\u59d4\u4f1a\u7684\u6d88\u606f\u6765\u6e90\u5f88\u591a\uff0c\u6240\u4ee5\u8f93\u5165\u7684\u8ba4\u8bc6\u5173\u7cfb\u53ef\u80fd\u6709\u91cd\u590d\uff0c\u5e76\u4e14\u7c7b\u4f3c\u201c1\uff0c2\u201d\u548c\u201c2\uff0c1\u201d\u8fd9\u79cd\u60c5\u51b5\u662f\u7b49\u4ef7\u7684\u3002\n", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u5360\u4e00\u884c\uff0c\u8f93\u51fa\u53ef\u4ee5\u4e3e\u884c\u7684\u6bd4\u8d5b\u7684\u573a\u6570\u3002\n", "samples": "[{\"input\": \"4 1\\n1 2\\n10 7\\n1 9\\n1 2\\n2 1\\n4 5\\n3 7\\n6 8\\n4 5\\n\", \"output\": \"2\\n81\\n\"}]", "test_case_id": "1811", "hint": "\u5bf9\u4e8e\u7b2c1\u7ec4\uff0c\u603b\u5171\u53ef\u4ee5\u4e3e\u884c2\u573a\uff0c\u5373&lt;1,3,4&gt;\u548c&lt;2,3,4&gt;.\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 60, "total_accepted_number": 15, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1812, "fields": {"title": "\u8d27\u7269\u88c5\u8f7d", "description": "\u67d0\u4e2a\u8d27\u8f66\u7ad9\u4e0a\u6709M\u8282\u8f66\u53a2\uff08\u7f16\u53f71\u5230M\uff09\uff0c\u6bcf\u8282\u8f66\u53a2\u6700\u5927\u53ef\u88c5\u8f7d\u91cd\u91cf\u4e3aK\u7684\u8d27\u7269\u3002\u7531\u4e8e\u5de5\u4f5c\u4eba\u5458\u65e0\u6cd5\u9884\u5148\u77e5\u9053\u5230\u5e95\u6709\u54ea\u4e9b\u8d27\u7269\uff0c\u4e8e\u662f\uff0c\u4e3a\u4e86\u5c3d\u91cf\u8282\u7701\u8f66\u53a2\uff0c\u91c7\u7528\u4e86\u5982\u4e0b\u7b56\u7565\u6765\u88c5\u8f7d\u8d27\u7269\u3002<p></p>\u6bcf\u5f53\u63a5\u5230\u4e00\u4e2a\u65b0\u7684\u8d27\u7269\uff0c\u5de5\u4f5c\u4eba\u5458\u5c06\u4ece\u7b2c\u4e00\u8282\u8f66\u53a2\u5f00\u59cb\uff0c\u987a\u6b21\u5411\u540e\u67e5\u770b\uff0c\u76f4\u81f3\u627e\u5230\u4e00\u8282\u53ef\u4ee5\u5bb9\u7eb3\u8be5\u8d27\u7269\u7684\u8f66\u53a2\uff0c\u7136\u540e\u653e\u8fdb\u53bb\u3002\u5982\u679c\u4e00\u76f4\u67e5\u627e\u5230\u6700\u540e\uff0c\u4ecd\u6ca1\u6709\u53ef\u4ee5\u5bb9\u7eb3\u8be5\u8d27\u7269\u7684\u8f66\u53a2\uff0c\u5219\u9700\u8981\u5728\u540e\u9762\u6dfb\u52a0\u65b0\u8f66\u53a2\uff0c\u800c\u4e14\u53ef\u80fd\u8981\u6c42\u5bb9\u91cf\u66f4\u5927\u3002<p></p>", "input_description": "\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T\uff081 <= T <= 10\uff09\uff0c\u8868\u793a\u63a5\u4e0b\u6765\u6709T\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\u6bcf\u4e00\u7ec4\u6570\u636e\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570\uff0cM\u548cK\uff081 <= M, K <= 10^9\uff09\uff0c\u5206\u522b\u8868\u793a\u8f66\u53a2\u6570\u548c\u6bcf\u8282\u8f66\u53a2\u7684\u6700\u5927\u627f\u8f7d\u91cf\u3002\n\u63a5\u4e0b\u6765\u6709\u591a\u884c\u6570\u636e\uff08\u4e0d\u8d85\u8fc7200,000\uff09\uff0c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570\u8868\u793a\u4e00\u4e2a\u8d27\u7269\u7684\u91cd\u91cf\uff0c\u4ee50\u8868\u793a\u672c\u7ec4\u6570\u636e\u8f93\u5165\u7ed3\u675f\u3002\n", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u6d4b\u8bd5\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\uff0c\u4ee5\u53ca\u6309\u987a\u5e8f\u8f93\u51fa\u5f53\u524d\u8d27\u7269\u5e94\u5f53\u5b89\u653e\u7684\u8f66\u53a2\u5e8f\u53f7\u3002\u5982\u679c\u6ca1\u6709\u8f66\u53a2\u53ef\u4f9b\u5b89\u653e\u8d27\u7269\uff08\u8bf4\u660e\u9700\u8981\u6dfb\u52a0\u8f66\u53a2\uff09\uff0c\u8bf7\u8f93\u51fa -1.\n", "samples": "[{\"input\": \"2\\n3 5\\n2\\n4\\n3\\n3\\n3\\n0\\n1 10\\n6\\n7\\n0\\n\", \"output\": \"Case #1:\\n1\\n2\\n1\\n3\\n-1\\nCase #2:\\n1\\n-1\\n\"}]", "test_case_id": "1812", "hint": "\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u603b\u5171\u67093\u8282\u8f66\u53a2\uff0c\u6bcf\u8282\u8f66\u53a2\u521d\u59cb\u60c5\u51b5\u4e0b\u53ef\u4f9b\u5bb9\u7eb3\u7684\u8d28\u91cf\u4e3a5\uff0c\u7b2c1\u4e2a\u8d27\u7269\u8d28\u91cf\u4e3a2\uff0c\u6309\u7167\u89c4\u5219\uff0c\u653e\u5728\u7b2c1\u8282\u8f66\u53a2\uff1b\u7b2c2\u4e2a\u8d27\u7269\u8d28\u91cf\u4e3a4\uff0c\u56e0\u4e3a\u7b2c1\u8282\u8f66\u53a2\u5269\u4f59\u53ef\u4f9b\u91cd\u91cf\u4e3a3\uff0c\u6240\u4ee5\u6309\u7167\u89c4\u5219\uff0c\u9700\u8981\u653e\u5728\u7b2c2\u8282\u8f66\u53a2\uff1b\u7b2c3\u4e2a\u8d27\u7269\u8d28\u91cf\u4e3a3\uff0c\u6309\u7167\u89c4\u5219\uff0c\u53ef\u4ee5\u653e\u5728\u7b2c1\u8282\u8f66\u53a2\uff1b\u4ee5\u6b64\u7c7b\u63a8\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 74, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1813, "fields": {"title": "\u4e24\u4e2a\u539f\u5b50", "description": "\u6700\u8fd1LuckyBug\u5bf9\u539f\u5b50\u4ea7\u751f\u4e86\u6d53\u539a\u7684\u5174\u8da3,\u4ed6\u60f3\u77e5\u9053\u4e24\u4e2a\u539f\u5b50\u5728\u7406\u60f3\u6a21\u578b\u4e0b,\u5171\u5360\u6709\u591a\u5c11\u7a7a\u95f4.", "input_description": "\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e(\u4e0d\u5927\u4e8e1000)\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u542b\u516b\u4e2a\u6574\u6570\uff0c\u5206\u522b\u662f\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u4e24\u4e2a\u539f\u5b50\u7684x\uff0cy\uff0cz\u8f74\u76f8\u5bf9\u5750\u6807\u53ca\u534a\u5f84\uff0c\u6240\u6709\u6570\u636e\u7edd\u5bf9\u503c\u4e0d\u5927\u4e8e1000\u3002\n\n\u8f93\u5165\u683c\u5f0f\uff1a X1 Y1 Z1 R1 X2 Y2 Z2 R2", "output_description": "\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u5bf9\u5e94\u4e00\u884c\u8f93\u51fa\uff0c\u8f93\u51fa\u6d4b\u8bd5\u6570\u636e\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\uff0c\u4ee5\u53ca\u8fd9\u4e24\u4e2a\u539f\u5b50\u5171\u5360\u6709\u7684\u7a7a\u95f4(\u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e\u97622\u4f4d)\u3002", "samples": "[{\"input\": \"3\\n0 0 0 1 0 0 2 1\\n0 0 0 2 0 0 2 2\\n0 0 0 2 0 0 2 1\\n\", \"output\": \"Case #1: 8.38\\nCase #2: 56.55\\nCase #3: 36.00\\n\"}]", "test_case_id": "1813", "hint": "\u7528\u5e93\u4e2d\u63d0\u4f9b\u7684acos(-1.0)\u4ee3\u8868PI\uff0c\u4e0d\u7528\u81ea\u5df1\u5b9a\u4e49PI=3.141592653\u7b49\uff0c\u907f\u514d\u5e26\u6765\u8bef\u5dee.\\n\\n\u6a21\u578b\uff1a\u4e24\u4e2a\u7403\u7684\u4f53\u79ef\u5e76", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 59, "total_accepted_number": 22, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1814, "fields": {"title": "\u5973\u7a0b\u5e8f\u5458\u7684\u72ec\u767d", "description": "\u201c\u6211\u8fd8\u8bb0\u5f97\u90a3\u5929\u6211\u4e0a\u73ed\u6b63\u5fd9\uff0c\u88ab\u4e00\u56e2\u6076\u5fc3\u7684\u7a0b\u5e8f\u548c\u4e00\u5806\u53d8\u6001\u7684\u9700\u6c42\u6298\u78e8\u7740\uff0c\u6211\u90a3\u4f1f\u5927\u7684\u6bcd\u4eb2\u5927\u4eba\u7279\u5730\u6253\u7535\u8bdd\u5631\u5490\u6211\uff1a\u201c\u65b0\u5a5a\u59fb\u6cd5\u544a\u8bc9\u6211\u4eec\uff0c\u7537\u4eba\u7684\u8f66\u5b50\u4e0d\u53ef\u9760\u4e86\uff0c\u623f\u5b50\u4e0d\u53ef\u9760\u4e86\uff0c\u5973\u4eba\u5fc5\u987b\u5f97\u9760\u81ea\u5df1\uff01\u201d  \u5b57\u6b63\u8154\u5706\uff0c\u94ff\u9535\u6709\u529b\uff0c\u987f\u65f6\u840e\u9761\u7684\u6211\u88ab\u5979\u7684\u6c14\u52bf\u7ed9\u632f\u594b\u4e86\uff01\u2026\u201d<p></p>\u8fd9\u662f\u524d\u6bb5\u65f6\u95f4\u7f51\u7edc\u4e0a\u76db\u4f20\u7684\u5973\u7a0b\u5e8f\u5458\u72ec\u767d\uff0c\u70b9\u51fb\u4e0b\u9762\u7684\u94fe\u63a5\u5427~<p></p><p></p>http://blog.csdn.net/yiyaaixuexi/article/details/6758486<p></p><p></p>\u4f60\u77e5\u9053\u5417\uff1f\u5c3d\u7ba1\u5973\u7a0b\u5e8f\u5458\u6240\u5360\u6bd4\u7387\u5c11\uff0c\u4f46\u662f\u5979\u4eec\u7684\u4f5c\u7528\u5374\u80fd\u4e3e\u8db3\u8f7b\u91cd\u3002\u5c31\u50cf\u5965\u8fd0\u4f1a\u4e00\u6837\uff0c\u4e2d\u56fd\u4ee3\u8868\u56e2\u6240\u83b7\u5f97\u7684\u603b\u91d1\u724c\u6570\u5927\u591a\u603b\u662f\u6765\u81ea\u5dfe\u5e3c\u3002\u5982\u679c\u4f60\u4e0d\u4fe1\uff0c\u90a3\u4e48\u4e0d\u59a8\u53bb\u793e\u4f1a\u516c\u53f8\u6216\u90e8\u95e8\u7edf\u8ba1\u4e0b\u6709\u591a\u5c11\u5dfe\u5e3c\u5427~<p></p>", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T(1<=T<=100)\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u4e2a\u6570\uff1b\n\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32(\u53ef\u80fd\u5305\u542b\u7a7a\u683c\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc730)\uff0c\u8868\u793a\u516c\u53f8\u7684\u540d\u79f0\uff1b\n\u7b2c\u4e8c\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570n(1<=n<=100)\uff0c\u8868\u793a\u516c\u53f8\u67d0\u9879\u76ee\u7814\u53d1\u90e8\u95e8\u4eba\u6570\uff1b\n\u63a5\u4e0b\u6765\u7684n\u884c\uff0c\u6bcf\u884c\u5305\u542b2\u4e2a\u5b57\u7b26\u4e32(\u4e0d\u542b\u7a7a\u683c\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc730)\uff0c\u8868\u793a\u5458\u5de5\u59d3\u540d\u548c\u6027\u522b(\u5973: F, \u7537: M)\u3002\n", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u6d4b\u8bd5\u5e8f\u53f7(\u4ece1\u5f00\u59cb)\u4ee5\u53ca\u5973\u5458\u5de5\u4eba\u6570\uff0c\u5982\u679c\u5973\u5458\u5de5\u4eba\u6570\u4e0d\u5c11\u4e8e\u9879\u76ee\u7ec4\u7684\u5458\u5de5\u603b\u4eba\u6570\u7684\u4e00\u534a\uff0c\u6dfb\u52a0\u9644\u52a0\u4fe1\u606f: \u201dYeah~\u201d\uff0c\u5982\u679c\u9879\u76ee\u7ec4\u7684\u5458\u5de5\u5168\u662f\u5973\u6210\u5458\uff0c\u7ee7\u7eed\u6dfb\u52a0\u9644\u52a0\u4fe1\u606f: \u201cOh, my god!\u201d\uff0c\u4e24\u4e2a\u9644\u52a0\u4fe1\u606f\u4e2d\u95f4\u75281\u4e2a\u7a7a\u683c\u9694\u5f00\u3002", "samples": "[{\"input\": \"5\\nGoogle\\n5\\nAlice F\\nBob M\\nChris F\\nDean M\\nElizabeth F\\nMicrosoft\\n3\\nAlice F\\nBetty F\\nCarry F\\nApple\\n4\\nAlice F\\nBetty F\\nCarry F\\nElizabeth F\\nChinese Department of Railways\\n4\\nLi_Gang M\\nYao_Jia_Xin M\\nFu_Er_Dai M\\nGuan_Er_Dai M\\nBaidu\\n5\\nAlice F\\nBob M\\nCow M\\nDean M\\nElizabeth F\\n\", \"output\": \"Case #1: 3 Yeah~\\nCase #2: 3 Yeah~ Oh, my god!\\nCase #3: 4 Yeah~ Oh, my god!\\nCase #4: 0\\nCase #5: 2\\n\"}]", "test_case_id": "1814", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 345, "total_accepted_number": 63, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1815, "fields": {"title": "\u5fae\u8f6f\u7b14\u8bd5\u9898", "description": "\u5c0f\u6797\u5df2\u7ecf\u5927\u56db\uff0c\u6700\u8fd1\u4e00\u6bb5\u65f6\u95f4\u5fd9\u4e8e\u627e\u5de5\u4f5c\u3002\u5bf9\u4e8e\u8ba1\u7b97\u673a\u7c7b\u4e13\u4e1a\u7684\u5b66\u751f\uff0c\u5fae\u8f6f\u3001Google\u4ee5\u53ca\u82f9\u679c\u8fd9\u4e9bIT\u5de8\u65e0\u9738\uff0c\u5b9e\u5728\u4ee4\u4eba\u5411\u5f80\u3002\u5c0f\u6797\u975e\u5e38\u671f\u5f85\u80fd\u8fdb\u5165\u5fae\u8f6f\u4e9a\u6d32\u7814\u7a76\u9662(MSRA)\uff0c\u6240\u4ee5\u4e0d\u5f97\u4e0d\u51c6\u5907\u5fae\u8f6f\u7684\u7b14\u8bd5\uff0c\u867d\u7136\u4ed6\u901a\u8fc7\u4e86\u5fae\u8f6f\u7684\u7f51\u4e0a\u7b80\u5386\u7b5b\u9009\uff0c\u4f46\u4ed6\u8fd8\u662f\u6ca1\u6709\u5341\u5206\u7684\u628a\u63e1\u3002\u4e8e\u662f\uff0c\u4ed6\u5411\u5df2\u7ecf\u5728\u5fae\u8f6f\u5c31\u804c\u7684\u5e08\u5144\u4eec\u6c42\u6559\u3002<p></p><p></p>\u5e08\u5144\u4eec\u544a\u8bc9\u4ed6\uff0c\u5fae\u8f6f\u6bcf\u5e74\u90fd\u6709\u7b14\u8bd5\u9898\u5e93\uff08\u4e0d\u59a8\u5047\u8bbe\u603b\u5171\u6709n\u9053\u8bd5\u9898\uff09\uff0c\u4ece\u4e2d\u9009\u51fa\u4e00\u4e9b\u9898\u76ee\uff0c\u7ec4\u6210k\u5957\u8bd5\u9898\uff0c\u6bcf\u5957\u8bd5\u9898\u5171\u6709 [n / k] \u9053\u9898\u76ee\uff0c\u6ce8\u610f\uff0c\u8fd9\u91cc\u4e2d\u62ec\u53f7\u8868\u793a\u5411\u4e0b\u53d6\u6574\uff0c\u6bd4\u5982\u603b\u5171\u67097\u9053\u8bd5\u9898\uff0c\u8981\u7ec4\u62103\u5957\u8bd5\u9898\uff0c\u663e\u7136\u6bcf\u4e00\u5957\u8bd5\u9898\u5171\u67092\u9053\u9898\u3002<p></p><p></p>\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u7684\u8bd5\u9898\u90fd\u4f1a\u88ab\u91c7\u7528\uff0c\u4efb\u4f55\u4e24\u4e2a\u53c2\u4e0e\u7b14\u8bd5\u7684\u6c42\u804c\u8005\uff0c\u4ed6\u4eec\u5404\u81ea\u88ab\u8003\u7684\u4e00\u5957\u9898\u8981\u4e48\u4e0d\u5b58\u5728\u76f8\u540c\u7684\u9898\u76ee\uff0c\u8981\u4e48\u6240\u6709\u7684\u9898\u76ee\u90fd\u4e00\u6837\uff0c\u53ea\u662f\u8bd5\u9898\u7684\u524d\u540e\u987a\u5e8f\u53ef\u80fd\u88ab\u7f6e\u4e71\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u53ef\u80fd\u5b58\u5728\u4e24\u4e2a\u6c42\u804c\u8005\u7684\u8bd5\u9898\u662f\u4e00\u6837\u7684\uff0c\u800c\u4e14\u4e00\u5b9a\u4f1a\u6709n - k * [n / k ]\u9053\u8bd5\u9898\u6ca1\u6709\u88ab\u91c7\u7528\u3002<p></p><p></p>\u5c0f\u6797\u7684\u5f88\u591a\u540c\u5b66\u4e5f\u5728\u51c6\u5907\u5fae\u8f6f\u7684\u7b14\u8bd5\uff0c\u4ed6\u4eec\u5c45\u7136\u901a\u8fc7\u5404\u79cd\u5173\u7cfb\u83b7\u5f97\u4e86\u5fae\u8f6f\u4eca\u5e74\u7684\u7b14\u8bd5\u9898\u5e93\u7b80\u8981\u8bf4\u660e\uff0c\u8fd8\u77e5\u9053\u6709\u591a\u5c11\u5957\u9898\u3002\u800c\u5c0f\u6797\u56e0\u4e3a\u521a\u51fa\u53bb\u53c2\u52a0ACM-ICPC\u6bd4\u8d5b\uff0c\u5e76\u4e0d\u77e5\u9053\u8fd9\u4e00\u60c5\u51b5\uff0c\u4eca\u5929\u4e0a\u534811\u70b9\u624d\u56de\u5230\u5b66\u6821\u3002\u5c31\u5728\u521a\u624d\uff0c\u5c0f\u6797\u6536\u5230\u5fae\u8f6f\u7684\u7535\u8bdd\u901a\u77e5\uff0c\u8ba9\u4ed6\u4eca\u5929\u665a\u4e0a7\u70b9\u524d\u5f80\u94f6\u6cb3\u738b\u671d\u5927\u9152\u5e97\u53c2\u4e0e\u73b0\u573a\u7b14\u8bd5(IT\u4eba\u624d\u90fd\u559c\u6b22\u665a\u4e0a\u5de5\u4f5c\u554a)\uff0c\u5c0f\u6797\u5341\u5206\u7740\u6025\uff0c\u56e0\u4e3a\u4ec0\u4e48\u90fd\u6ca1\u51c6\u5907\u3002\u4ed6\u5411\u540c\u5b66\u6c42\u52a9\uff0c\u56e0\u4e3a\u90e8\u5206\u540c\u5b66\u5728\u8fd9\u4e4b\u524d\u5c31\u53c2\u4e0e\u4e86\u7b14\u8bd5\uff0c\u540c\u5b66\u544a\u8bc9\u4e86\u5c0f\u6797\u8bf4\u4ed6\u4eec\u6709\u5fae\u8f6f\u7684\u7b14\u8bd5\u9898\u5e93\u7b80\u8981\u8bf4\u660e\u4ee5\u53ca\u4f1a\u6709\u591a\u5c11\u5957\u9898\uff0c\u5c0f\u6797\u5927\u559c\uff1a\u201d\u7ed9\u529b\u554a\u201d\u3002<p></p><p></p>\u4e0d\u7ba1\u600e\u6837\uff0c\u65f6\u95f4\u7d27\u6025\uff0c\u5c0f\u6797\u53ea\u80fd\u4e34\u65f6\u62b1\u4f5b\u811a\u4e86\u3002\u73b0\u5728\u5c0f\u6797\u5df2\u7ecf\u77e5\u9053\u4e86\u8bd5\u9898\u5e93\u91cc\u7684n\u9053\u8bd5\u9898\u7b80\u8981\u8bf4\u660e\u4ee5\u53ca\u6709\u591a\u5c11\u5957\u9898\uff0c\u867d\u7136\u4e0d\u80fd\u77e5\u9053\u6bcf\u4e00\u9053\u8bd5\u9898\u7684\u5177\u4f53\u8003\u6cd5\uff0c\u4f46\u662f\u5bf9\u6bcf\u4e00\u9053\u9898\u76ee\uff0c\u4ed6\u4e5f\u80fd\u591f\u4f30\u8ba1\u51fa\u81ea\u5df1\u89e3\u7b54\u7684\u597d\u574f\uff0c\u4e0d\u59a8\u7528A(i) , ( 0 &lt;= A(i) &lt;= 100 ) \u8868\u793a\u4ed6\u89e3\u51b3\u7b2ci\u9053\u9898\u7684\u597d\u574f\uff0cA(i)\u8d8a\u5927\uff0c\u8868\u793a\u8d8a\u597d\u3002\u56e0\u4e3a\u4ed6\u7684\u4e00\u90e8\u5206\u540c\u5b66\u4e4b\u524d\u5c31\u5df2\u7ecf\u53c2\u52a0\u4e86\u7b14\u8bd5\uff0c\u8fd9\u4e9b\u540c\u5b66\u544a\u8bc9\u4e86\u5c0f\u6797\u81ea\u5df1\u88ab\u8003\u5230\u4e86\u54ea\u4e9b\u9898\u3002\u53ef\u662f\uff0c\u5c0f\u6797\u8fd8\u662f\u6709\u4e2a\u7591\u95ee\uff0c\u5c0f\u6797\u60f3\u77e5\u9053\u4ed6\u7b54\u9898\u7684\u60c5\u51b5\u9884\u8ba1\u4f1a\u600e\u6837\u5462\uff1f\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ed6\u60f3\u77e5\u9053\u7ed3\u5408\u76ee\u524d\u5df2\u7ecf\u6709\u7684\u4fe1\u606f\uff0c\u5982\u679c\u7528\u4e00\u5957\u8bd5\u9898\u7684\u597d\u574f\u7a0b\u5ea6\uff08\u7b49\u4e8e\u6bcf\u9053\u8bd5\u9898\u4f30\u8ba1\u503c\u603b\u548c\u9664\u4ee5\u8fd9\u5957\u8bd5\u9898\u7684\u9898\u6570\uff09\u6765\u4f30\u8ba1\u7b54\u9898\u7684\u597d\u574f\uff0c\u90a3\u4e48\u5c0f\u6797\u6700\u574f\u60c5\u51b5\u548c\u6700\u597d\u60c5\u51b5\u4e0b\u4f1a\u662f\u600e\u6837\u7684\u5462\uff1f\u56e0\u4e3a\u8fd9\u5bf9\u4e34\u65f6\u62b1\u4f5b\u811a\u662f\u6709\u5e2e\u52a9\u7684\uff0c\u5c0f\u6797\u8fd9\u4e48\u8ba4\u4e3a\u7684\uff01<p></p>", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u4e2a\u6570\uff1b\n\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6570\uff0cn\u548ck\uff0c\u5206\u522b\u8868\u793a\u603b\u5171\u6709n\u9053\u8bd5\u9898\u548ck\u5957\u8bd5\u9898\uff1b\n\u7b2c\u4e8c\u884c\u5305\u542bn\u4e2a\u6570\uff0c\u7b2ci\u4e2a\u6570\u8868\u793a\u5c0f\u6797\u5bf9\u7b2ci\u9053\u8bd5\u9898\u7684\u597d\u574f\u4f30\u8ba1\u503cA(i)\uff1b\n\u7b2c\u4e09\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570q\uff0c\u8868\u793a\u5df2\u7ecf\u53c2\u52a0\u8fc7\u7b14\u8bd5\u7684\u540c\u5b66\u6570\u76ee\uff1b\n\u63a5\u4e0b\u6765\u7684q\u884c\u5206\u522b\u8868\u793a\u6bcf\u4e2a\u5df2\u7ecf\u53c2\u52a0\u8fc7\u7b14\u8bd5\u7684\u540c\u5b66\u88ab\u8003\u7684\u9898\u76ee\u5e8f\u53f7(\u4fdd\u8bc1\u4e00\u5b9a\u90fd\u662f[n/k]\u4e2a\uff0c\u4e14\u5404\u4e0d\u76f8\u540c)\u3002\u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u5408\u6cd5\uff0c\u4fdd\u8bc1\u5b58\u5728\u89e3\u3002\n( 1 <= T <= 100, 1 <= k <= n <= 100, 0 <= A(i) <= 100, 0 <= q <= 100\uff09\n", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u6d4b\u8bd5\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\uff0c\u4ee5\u53ca\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u4f30\u8ba1\u503c\u548c\u6700\u597d\u60c5\u51b5\u4e0b\u7684\u4f30\u8ba1\u503c\uff0c\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u4f30\u8ba1\u503c\u662f\u6307\u4e00\u5957\u8bd5\u9898\u6240\u6709\u9898\u597d\u574f\u4f30\u8ba1\u7684\u5e73\u5747\u503c\u3002\u4fdd\u7559\u5230\u5c0f\u6570\u70b9\u540e2\u4f4d\u3002", "samples": "[{\"input\": \"2\\n7 3\\n7 15 0 19 10 5 12\\n2\\n1 6\\n7 4\\n4 2\\n10 8 1 17\\n2\\n2 3\\n3 2\\n\", \"output\": \"Case #1: 5.00 15.50\\nCase #2: 4.50 13.50\\n\"}]", "test_case_id": "1815", "hint": "\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u603b\u5171\u67097\u9053\u8bd5\u9898\uff0c\u67093\u5957\u8bd5\u9898\uff0c\u6240\u4ee5\u6bcf\u5957\u8bd5\u9898\u67092\u9053\uff1b\u67092\u4e2a\u540c\u5b66\u5df2\u7ecf\u53c2\u52a0\u8fc7\u7b14\u8bd5\uff0c\u7b2c1\u4e2a\u540c\u5b66\u88ab\u8003\u5230\u7b2c1\u9053\u548c\u7b2c6\u9053\uff0c\u7b2c2\u4e2a\u540c\u5b66\u88ab\u8003\u5230\u7b2c7\u9053\u548c\u7b2c4\u9053\u3002\u8fd8\u6709\u7b2c2\u9053\uff0c\u7b2c3\u9053\uff0c\u7b2c5\u9053\u6ca1\u6709\u88ab\u8003\u5230\uff0c\u56e0\u4e3a\u4e24\u4e2a\u4eba\u7684\u7b14\u8bd5\u9898\u8981\u4e48\u4e0d\u5b58\u5728\u76f8\u540c\u7684\u9898\u76ee\uff0c\u8981\u4e48\u6240\u6709\u7684\u9898\u76ee\u90fd\u4e00\u6837\uff0c\u53ea\u662f\u8bd5\u9898\u7684\u524d\u540e\u987a\u5e8f\u53ef\u80fd\u88ab\u7f6e\u4e71\u3002\u6240\u4ee5\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u5c0f\u6797\u4f1a\u88ab\u8003\u5230\u7b2c3\u9053\u548c\u7b2c5\u9053\u9898\uff0c\u8fd9\u65f6\u4f30\u8ba1\u503c\u4e3a5.0 ( \u5373(0+10)*0.5 )\uff0c\u6700\u597d\u60c5\u51b5\u4e0b\u5219\u662f\u88ab\u8003\u5230\u7b2c4\u9898\u548c\u7b2c7\u9898\uff0c\u4f30\u8ba1\u503c\u4e3a15.5 ( \u5373(19+12)*0.5 )\uff0c\u5373\u4e0e\u7b2c2\u4f4d\u540c\u5b66\u8003\u7684\u662f\u540c\u4e00\u5957\u8bd5\u9898\uff0c\u53ea\u662f\u987a\u5e8f\u4e0d\u4e00\u6837\uff0c\u5f53\u7136\uff0c\u987a\u5e8f\u4e5f\u53ef\u4ee5\u4e00\u6837\u3002\u6ce8\u610f\uff0c\u5c3d\u7ba1\u7b2c2\u9053\u548c\u7b2c4\u9053\u7684\u4f30\u8ba1\u503c\u6700\u5927(17.00)\uff0c\u4f46\u4e0d\u6ee1\u8db3\u89c4\u5219\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 33, "total_accepted_number": 9, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1816, "fields": {"title": "\u5143\u7d20\u7edf\u8ba1", "description": "\u5b9a\u4e49\u4e24\u4e2a\u96c6\u5408<p></p><p></p>P = { A * (B ^ k) | 0 &lt;= k &lt; C }<p></p><p></p>Q = { D * (E ^ k) | 0 &lt;= k &lt; F }<p></p><p></p>\u8bd5\u6c42\u96c6\u5408<p></p><p></p>R = P U Q<p></p><p></p>\u4e2d\u5143\u7d20\u4e2a\u6570\u3002", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u4e2a\u6570\uff1b\n\u63a5\u4e0b\u6765\u7684\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u542b6\u4e2a\u6570\uff0c\u5373\nA B C D E F\n ( 1<=T<=30,0 <= A,B,D,E<= 500,000,000, 1 <= C, F <= 123,456)\n", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u6d4b\u8bd5\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\u4ee5\u53ca\u96c6\u5408R\u4e2d\u5143\u7d20\u4e2a\u6570\u3002\n", "samples": "[{\"input\": \"3\\n3 2 5 6 2 5\\n3 2 5 2 3 5\\n1 1 1 0 0 1\\n\", \"output\": \"Case #1: 6\\nCase #2: 9\\nCase #3: 2\\n\"}]", "test_case_id": "1816", "hint": "\u5047\u5b9a 0 ^ 0 = 1", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1500, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 59, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1817, "fields": {"title": "\u6700\u540e\u4e00\u9053\u9898", "description": "\u65e0\u9898\u3002", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T,\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u4e2a\u6570;\n\u63a5\u4e0b\u6765\u7684\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e,\u4ec5\u5305\u542b\u4e00\u4e2a\u6574\u6570n.\n(1 <= T <= 8, 2 <= n <= 9)\n", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u6d4b\u8bd5\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\u4ee5\u53ca\u8f93\u51fa\u5bf9\u5e94\u7684\u56fe\u6848\uff0c\u89c4\u5f8b\u53c2\u7167\u6837\u4f8b\u3002\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u56fe\u6848\uff0c\u6bcf\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u2019+\u2019\u540e\u9762\u6ca1\u6709\u7a7a\u683c\uff0c\u6240\u4ee5\u4e0d\u8981\u8f93\u51fa\u591a\u4f59\u7684\u7a7a\u683c\u3002\n", "samples": "[{\"input\": \"4\\n2\\n3\\n4\\n5\\n\", \"output\": \"Case #1:\\n    +\\n  + 1 +\\n+ 1 + 1 +\\n  + 1 +\\n    +\\nCase #2:\\n      +\\n    + 1 +\\n  + 1 + 1 +\\n+ 1 + 3 + 1 +\\n  + 1 + 1 +\\n    + 1 +\\n      +\\nCase #3:\\n        +\\n      + 1 +\\n    + 1 + 1 +\\n  + 1 + 3 + 1 +\\n+ 1 + 3 + 3 + 1 +\\n  + 1 + 3 + 1 +\\n    + 1 + 1 +\\n      + 1 +\\n        +\\nCase #4:\\n          +\\n        + 1 +\\n      + 1 + 1 +\\n    + 1 + 3 + 1 +\\n  + 1 + 3 + 3 + 1 +\\n+ 1 + 3 + 5 + 3 + 1 +\\n  + 1 + 3 + 3 + 1 +\\n    + 1 + 3 + 1 +\\n      + 1 + 1 +\\n        + 1 +\\n          +\\n\"}]", "test_case_id": "1817", "hint": "\u5982\u679c\u60a8\u7528chrome\u6d4f\u89c8\u5668\uff0c\u8bf7\u5c06\u56fe\u5f62\u590d\u5236\u5230\u6587\u672c\u6587\u4ef6\u4e2d\u67e5\u770b", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 141, "total_accepted_number": 54, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1818, "fields": {"title": "\u9ed1\u5c4b", "description": "\u54c8\u91cc\u6ce2\u7279\u6765\u5230\u4e86\u4e00\u4e2a\u9b54\u6cd5\u623f\u95f4\uff0c\u9ed1\u9b54\u6cd5\u5e08\u6d3e\u4e86\u5f71\u5b50\u602a\u7269\u5728\u6b64\u623f\u95f4\u7b49\u7740\u54c8\u91cc\u6ce2\u7279\uff0c\u5f71\u5b50\u602a\u7269\u53ea\u80fd\u751f\u6d3b\u5728\u6ca1\u6709\u706f\u5149\u7167\u5c04\u7684\u533a\u57df\uff0c\u623f\u95f4\u7684\u5c4b\u9876\u6709n*m\u4e2a\u5c0f\u706f\uff0c\u6bcf\u4e2a\u5c0f\u706f\u80fd\u591f\u7167\u5230\u5730\u4e0a\u56fa\u5b9a\u7684\u8303\u56f4\uff0c\u4e14\u6240\u6709\u706f\u7167\u7684\u8303\u56f4\u6ca1\u6709\u91cd\u53e0\u90e8\u5206\uff0c\u6709\u4e9b\u706f\u4eae\u7740\uff0c\u6709\u4e9b\u706f\u706d\u7740\uff0c\u706d\u7740\u7684\u706f\u4e0b\u9762\u5c31\u4f1a\u51fa\u73b0\u9634\u5f71\uff0c\u5f71\u5b50\u602a\u7269\u5c31\u4f1a\u653b\u51fb\u54c8\u5229\u6ce2\u7279\uff0c\u73b0\u5728\u54c8\u5229\u6ce2\u7279\u627e\u5230\u4e86\u4f60\uff0c\u7ed9\u4f60\u623f\u95f4\u7684\u706f\u7684\u72b6\u6001\uff0c\u54c8\u5229\u6ce2\u7279\u53ef\u4ee5\u8fdc\u7a0b\u9065\u63a7\u706f\u7684\u5f00\u5173\uff0c\u706f\u7684\u72b6\u6001\u6539\u53d8\u4e3a\uff1a\u5982\u679c\u4e00\u4e2a\u706f\u7684\u72b6\u6001\u6539\u53d8\u4e86\uff0c\u90a3\u4e48\u4ed6\u524d\u540e\u5de6\u53f3\u56db\u4e2a\u706f\u7684\u72b6\u6001\u5168\u90fd\u6539\u53d8\u3002\u4f60\u7684\u4efb\u52a1\u662f\u8ba1\u7b97\u51fa\u6700\u5c11\u8981\u6539\u53d8\u591a\u5c11\u6b21\u706f\u7684\u72b6\u6001\uff0c\u624d\u80fd\u628a\u6240\u6709\u706f\u90fd\u70b9\u4eae\u3002", "input_description": "\u6709\u591a\u7ec4\u8f93\u5165\u6570\u636e\u3002\u6bcf\u7ec4\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570\uff0cn(1<=n<=100)\u548cm(1<=m<=15)\uff0c\u63a5\u4e0b\u6765n\u884c\uff0c\u6bcf\u884cm\u4e2a\u6570\u636e\uff0c0\u4ee3\u8868\u706f\u5173\u7740\uff0c1\u4ee3\u8868\u706f\u5f00\u7740\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u8f93\u5165\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u8868\u793a\u80fd\u628a\u6240\u6709\u706f\u90fd\u70b9\u4eae\u7684\u6700\u5c11\u7684\u6539\u53d8\u706f\u7684\u72b6\u6001\u6570,\u5982\u679c\u65e0\u6cd5\u70b9\u4eae\u6240\u6709\u706f\uff0c\u8f93\u51fa\"no solution\".", "samples": "[{\"input\": \"3 3\\n1 0 1\\n0 0 0\\n1 0 1\\n2 5\\n0 0 0 0 0 \\n0 0 0 0 0\\n\", \"output\": \"1\\n3\\n\"}]", "test_case_id": "1818", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 11, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1819, "fields": {"title": "The Gougu Theorem", "description": "Pythagorean Theorem is &quot;humanity&#039;s greatest scientific discoveries of the ten&quot; is a basic elementary geometry theorems. &quot;This theorem has a very long history, almost all ancient civilizations (Greece, China, Egypt, Babylon, India, etc.) have studied this theorem. Pythagorean Theorem in the West known as the Pythagorean Theorem, are said to Ancient Greek mathematician and philosopher Pythagoras (Pythagoras, BC572 ~ BC497) was first discovered in BC550.<p></p>Pythagorean Theorem in China known as the Gougu/\u52fe\u80a1 Theorem. Around 1100 BC, the Western Zhou period, the ancient Chinese mathematician, Shanggao, first described the Gougu Theorem. In the famous ancient mathematics book, \u300a\u4e5d\u7ae0\u7b97\u672f\u300b,the proof was given (left). The Gougu Theorem is that &quot;in the right triangle, the sum of the squares of two right sides is equal to the square of the hypotenuse.&quot; In other words, the three sides (a, b, c) of right-angled triangle satisfies the following equation:<p></p><p></p>a^2+b^2=c^2<p></p><p></p>Where a is called \u52fe/Gou, b is \u80a1/Gu, and c is \u5f26/Xian.<p></p>For given c, how many different positive integer solutions are there? ((a,b,c\uff09are relatively-prime. ) It is an interesting problem.<p></p>Now, your task is to solve it.<p></p>", "input_description": "There are several test cases; each test case contains one positive integer c (0 < c < 2^30 ) in a line. c = 0 is the end of input and need not to process.\n", "output_description": "For each test case, your program should output by following format:\nCase #:\nThere are n solution(s).\na^2 + b^2 = c^2\n\u2026..(total n line(s) )\u2026.\n\nWhere # is the test case number starting from 1, two consecutive cases should be separated by a single blank line.\nFor each given c, output all solutions satisfying:\na^2+b^2=c^2\nEach solution should be in one line, and in order a < b < c.\nYou should output n solutions by ascending order of a.\n", "samples": "[{\"input\": \"65\\n20\\n0\\n\", \"output\": \"Case 1:\\nThere are 2 solution(s).\\n16^2 + 63^2 = 65^2\\n33^2 + 56^2 = 65^2\\n\\nCase 2:\\nThere are 0 solution(s).\\n\"}]", "test_case_id": "1819", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 96, "total_accepted_number": 10, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1820, "fields": {"title": "Monster", "description": "One day, v11 encounters a group of monsters in a foreast. In order to defend the homeland, V11 picks up his weapon and fights!<p></p>All the monsters attack v11 at the same time. Every enemy has its HP, and attack value ATK. In this problem, v11 has his ATK and infinite HP. The damage (also means reduction for HP) is exactly the ATK the attacker has. For example, if v11&#039;s ATK is 13 and the monster&#039;s HP is 27, then after v11&#039;s attack, the monster&#039;s HP become 27 - 13 = 14 and vice versa.<p></p>v11 and the monsters attack each other at the same time and they could only attack one time per second. When the monster&#039;s HP is less or equal to 0 , we think this monster was killed, and obviously it would not attack any more. For example, v11&#039;s ATK is 10 and a monster&#039;s HP is 5, v11 attacks and then the monster is killed! However, a monster whose HP is 15 will be killed after v11 attack for two times. v11 will never stop until all the monsters are killed ! He wants to minimum the HP reduction for the fight! Please note that if in some second, some monster will soon be killed , the monster&#039;s attack will works too.<p></p>", "input_description": "The first line is one integer T indicates the number of the test cases. (T <=100)\nThen for each case, The first line have two integers n (0 < n <= 10000), m (0 < m <= 100), indicates the number of the monsters and v11's ATK . The next n lines, each line has two integers hp (0 < hp <= 20), g(0 < g <= 1000) ,indicates the monster's HP and ATK.\n", "output_description": "Output one line.\nFirst output \u201cCase #idx: \u201d, here idx is the case number count from 1. Then output the minimum HP reduction for v11 if he arrange his attack order optimal .\n", "samples": "[{\"input\": \"2\\n3 1\\n1 10\\n1 20\\n1 40\\n1 10\\n7 3\\n\", \"output\": \"Case #1: 110\\nCase #2: 3\\n\"}]", "test_case_id": "1820", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 32, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1822, "fields": {"title": "\u6700\u5927\u7684K\u5e8f\u5217", "description": "\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3aN\uff082\u2264N\u2264100000\uff09\u7684\u5e8f\u5217\u548c\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6570S(1\u2264S\u22642*10^9)\uff0c\u6211\u4eec\u80fd\u591f\u5728\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u627e\u5230\u82e5\u5e72\u4e2a\u957f\u5ea6\u4e3a2K\uff081\u22642K\u2264N\uff0cK\u4e3a\u6b63\u6574\u6570\uff09\u7684\u8fde\u7eed\u5b50\u5e8f\u5217\uff0c\u5982\u679c\u8be5\u5b50\u5e8f\u5217\u7684\u524dK\u4e2a\u6570\u4e4b\u548c\u4e0d\u5927\u4e8eS\uff0c\u540eK\u4e2a\u6570\u4e4b\u548c\u4e5f\u4e0d\u5927\u4e8eS\uff0c\u5219\u79f0\u8be5\u5b50\u5e8f\u5217\u4e3a\u201cK\u5e8f\u5217\u201d\u3002<p></p>\u5f53\u7136\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u5f88\u591a\u4e2a\u8fd9\u6837\u7684\u201cK\u5e8f\u5217\u201d\uff0c\u73b0\u5728\u7684\u95ee\u9898\u662f\uff1a\u4f60\u80fd\u6c42\u51fa\u6700\u957f\u201cK\u5e8f\u5217\u201d\u7684\u957f\u5ea6\u5417\uff1f\uff0c\u5982\u679c\u5b58\u5728\uff0c\u8f93\u51fa\u6700\u5927\u7684K\u5373\u53ef\u3002", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u62ec\u4e24\u90e8\u5206\u3002\n\u7b2c\u4e00\u90e8\u5206\uff1a\u8f93\u5165\u4e24\u4e2a\u6570N\u548cS\u3002\n\u7b2c\u4e8c\u90e8\u5206\uff1a\u8f93\u5165N\u4e2a\u6b63\u6574\u6570\uff0c\u4fdd\u8bc1\u8fd9N\u4e2a\u6570\u4e4b\u548c\u4e0d\u5927\u4e8e2*10^9\u3002 ", "output_description": "\u8f93\u51fa\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5927\u7684K\uff0c\u5982\u679c\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684K\uff0c\u8f93\u51fa-1\u3002", "samples": "[{\"input\": \"8 3\\n1 1 1 1 1 1 1 1\\n3 1\\n100 200 300\\n\", \"output\": \"3\\n-1\\n\"}]", "test_case_id": "1822", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 81, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1823, "fields": {"title": "\u77e9\u9635\u4e58\u6cd5", "description": "\u5b9e\u73b0\u4e24\u4e2a3*3\u77e9\u9635\u7684\u4e58\u6cd5\u3002", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570n\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\u3002\u63a5\u4e0b\u6765\u67092n\u4e2a\u4e09\u9636\u77e9\u9635\u3002\u6574\u6570\u7684\u8303\u56f4\u4e3a[-1000,1000]\u3002", "output_description": "\u6bcf\u7ec4\u6570\u636e\u5bf9\u5e94\u6709\u4e00\u4e2a\u77e9\u9635\u8f93\u51fa\uff0c\u6bcf\u4e2a\u6570\u540e\u8f93\u51fa\u4e00\u4e2a\u7a7a\u683c\u3002\n\u6bcf\u7ec4\u6570\u636e\u4e4b\u540e\u8f93\u51fa\u4e00\u4e2a\u7a7a\u884c\u3002", "samples": "[{\"input\": \"2\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\\n1 0 0\\n0 1 0\\n0 0 1\\n2 3 4\\n5 6 7\\n1 5 9\\n\", \"output\": \"3 3 3 \\n3 3 3 \\n3 3 3 \\n\\n2 3 4 \\n5 6 7 \\n1 5 9 \\n\\n\"}]", "test_case_id": "1823", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 331, "total_accepted_number": 113, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1825, "fields": {"title": "\u6821\u95e8\u5916\u7684\u6811", "description": "\u67d0\u6821\u5927\u95e8\u5916\u957f\u5ea6\u4e3aL\u7684\u9a6c\u8def\u4e0a\u6709\u4e00\u6392\u6811\uff0c\u6bcf\u4e24\u68f5\u76f8\u90bb\u7684\u6811\u4e4b\u95f4\u7684\u95f4\u9694\u90fd\u662f1\u7c73\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u9a6c\u8def\u770b\u6210\u4e00\u4e2a\u6570\u8f74\uff0c\u9a6c\u8def\u7684\u4e00\u7aef\u5728\u6570\u8f740\u7684\u4f4d\u7f6e\uff0c\u53e6\u4e00\u7aef\u5728L\u7684\u4f4d\u7f6e\uff1b\u6570\u8f74\u4e0a\u7684\u6bcf\u4e2a\u6574\u6570\u70b9\uff0c\u53730\uff0c1\uff0c2\uff0c\u2026\u2026\uff0cL\uff0c\u90fd\u79cd\u6709\u4e00\u68f5\u6811\u3002<p></p>    <p></p>\u9a6c\u8def\u4e0a\u6709\u4e00\u4e9b\u533a\u57df\u8981\u7528\u6765\u5efa\u5730\u94c1\uff0c\u8fd9\u4e9b\u533a\u57df\u7528\u5b83\u4eec\u5728\u6570\u8f74\u4e0a\u7684\u8d77\u59cb\u70b9\u548c\u7ec8\u6b62\u70b9\u8868\u793a\u3002\u5df2\u77e5\u4efb\u4e00\u533a\u57df\u7684\u8d77\u59cb\u70b9\u548c\u7ec8\u6b62\u70b9\u7684\u5750\u6807\u90fd\u662f\u6574\u6570\uff0c\u533a\u57df\u4e4b\u95f4\u53ef\u80fd\u6709\u91cd\u5408\u7684\u90e8\u5206\u3002\u73b0\u5728\u8981\u628a\u8fd9\u4e9b\u533a\u57df\u4e2d\u7684\u6811\uff08\u5305\u62ec\u533a\u57df\u7aef\u70b9\u5904\u7684\u4e24\u68f5\u6811\uff09\u79fb\u8d70\u3002\u4f60\u7684\u4efb\u52a1\u662f\u8ba1\u7b97\u5c06\u8fd9\u4e9b\u6811\u90fd\u79fb\u8d70\u540e\uff0c\u9a6c\u8def\u4e0a\u8fd8\u6709\u591a\u5c11\u68f5\u6811\u3002", "input_description": "\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570L\uff081 <= L <= 10000\uff09\u548c M\uff081 <= M <= 100\uff09\uff0cL\u4ee3\u8868\u9a6c\u8def\u7684\u957f\u5ea6\uff0cM\u4ee3\u8868\u533a\u57df\u7684\u6570\u76ee\uff0cL\u548cM\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\u63a5\u4e0b\u6765\u7684M\u884c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u4e0d\u540c\u7684\u6574\u6570\uff0c\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u8868\u793a\u4e00\u4e2a\u533a\u57df\u7684\u8d77\u59cb\u70b9\u548c\u7ec8\u6b62\u70b9\u7684\u5750\u6807\u3002", "output_description": "\u8f93\u51fa\u5305\u62ec\u4e00\u884c\uff0c\u8fd9\u4e00\u884c\u53ea\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u9a6c\u8def\u4e0a\u5269\u4f59\u7684\u6811\u7684\u6570\u76ee\u3002", "samples": "[{\"input\": \"500 3\\n150 300 \\n100 200 \\n470 471 \\n\", \"output\": \"298\\n\"}]", "test_case_id": "1825", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 162, "total_accepted_number": 67, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1835, "fields": {"title": "\u5173\u7cfb\u8be2\u95ee", "description": "\u7ed9\u5b9a3\u4e2a\u70b9\uff0c \u518d\u7ed9\u51fa\u82e5\u5e72\u67e5\u8be2\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2 (A,B)( \u5176\u4e2dA,B\u662f\u4e8c\u7ef4\u70b9\uff0c\u4fdd\u8bc1A,B\u4e0d\u540c) \u4f60\u80fd\u544a\u8bc9\u8fd9\u4e2a\u7ebf\u6bb5\u548c\u6240\u7ed9\u76843\u4e2a\u70b9\u6240\u56f4\u6210\u7684\u56fe\u5f62\u7684\u5173\u7cfb\u4e48\uff1f<p></p><p></p>\u5173\u7cfb\u5305\u62ec\u4e0b\u9762\u51e0\u79cd:<p></p>(1)\tOUT_SIDE: (A,B) \u7ebf\u6bb5\u5728\u56fe\u5f62\u5916\u90e8\uff0c\u4e5f\u5c31\u662f\u8bf4(A,B)\u7ebf\u6bb5\u548c\u56fe\u5f62\u6ca1\u6709\u516c\u5171\u90e8\u5206,\u540c\u65f6A,B\u5747\u4e0d\u5728\u56fe\u5f62\u5185\u90e8;<p></p>(2)\tIN_SIDE: (A,B) \u7ebf\u6bb5\u5728\u56fe\u5f62\u5185\u90e8,\u4e5f\u5c31\u662f\u8bf4A,B\u90fd\u4e25\u683c\u5728\u56fe\u5f62\u5185\u90e8(\u5728\u8fb9\u754c\u4e0d\u7b97);<p></p>(3)\tON_EDGE: (A,B) \u7ebf\u6bb5\u5728\u56fe\u5f62\u7684\u8fb9\u754c\u4e0a\uff0c\u4e5f\u5c31\u662f\u8bf4(A,B)\u81f3\u5c11\u548c\u56fe\u5f62\u7684\u4e00\u6761\u8fb9\u5171\u7ebf\u5e73\u884c\uff0c\u540c\u65f6\u5b83\u4eec\u7684\u516c\u5171\u90e8\u5206\u4e0d\u4e3a\u7a7a<p></p>(4)\tSIM_INT: (A,B) \u7ebf\u6bb5\u548c\u56fe\u5f62\u76f8\u4ea4\uff0c\u5c31\u662f\u8bf4\u5b83\u4eec\u6709\u516c\u5171\u90e8\u5206\u3002<p></p><p></p>\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2\uff0c\u6211\u4eec\u6309\u7167\u987a\u5e8f\u5224\u65ad\u5173\u7cfb\uff0c\u8f93\u51fa\u7b2c\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u5173\u7cfb\u3002", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T ( 1 <= T <= 100 )\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u4e2a\u6570\uff1b\n\u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u662f6\u4e2a\u6574\u6570\u5206\u522b\u8868\u793a3\u4e2a\u70b9\u7684\u5750\u6807(p0x p0y p1x p1y p2x p2y)\u3002\n\u7b2c\u4e8c\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570m (1 <= m <= 100)\uff0c\u8868\u793a\u67e5\u8be2\u4e2a\u6570\n\u63a5\u4e0b\u6765\u7684m\u884c\uff0c\u6bcf\u884c\u5305\u542b4\u4e2a\u6574\u6570\u8868\u793aA,B\u7684\u5750\u6807 (Ax Ay Bx By)\uff0c\u6d4b\u8bd5\u6570\u636e\u4fdd\u8bc1A,B\u4e24\u70b9\u4e0d\u540c\uff01\u5728\u672c\u95ee\u9898\u4e2d\uff0c\u6240\u6709\u5750\u6807\u7684\u7edd\u5bf9\u503c\u5747\u4e0d\u8d85\u8fc710000\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u6d4b\u8bd5\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\uff0c\u548c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e2d\u5404\u4e2a\u9700\u8981\u67e5\u8be2\u7684\u5173\u7cfb\u3002", "samples": "[{\"input\": \"2\\n0 0 10 10 0 10\\n5\\n100 100 200 200\\n1 2 1 3\\n10 10 11 11\\n5 5 6 6\\n10 0 0 10\\n0 0 0 0 0 0\\n1\\n0 0 1 1\\n\", \"output\": \"Case #1:\\nOUT_SIDE\\nIN_SIDE\\nON_EDGE\\nON_EDGE\\nSIM_INT\\nCase #2:\\nON_EDGE\\n\"}]", "test_case_id": "1835", "hint": "The data used in this problem is unofficial data prepared by Wuhanzhou. So any mistake here does not imply mistake in the official judge data.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 18, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1836, "fields": {"title": "\u5220\u6570\u95ee\u9898\uff08I\uff09", "description": "\u7ae5\u978b\u4eec\uff0c\u5982\u679c\u6211\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u7684\u5e8f\u5217\uff1aA1, A2, A3, ... , AN.<p></p><p></p>\u4f60\u80fd\u544a\u8bc9\u6211\uff0c\u6700\u5c11\u5220\u9664\u591a\u5c11\u4e2a\u6570\u5b57\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u65b0\u5e8f\u5217\u662f\u5347\u5e8f\u7684\u5462\uff1f<p></p><p></p>\u8fd9\u53ef\u662f\u4e00\u4e2a\u597d\u73a9\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u4e0b\u4e00\u6b21\u4f60\u53ef\u4ee5\u7528\u8fd9\u9053\u9898\u53bb\u4e3a\u96be\u4f60\u7684\u8001\u5e08\uff0c\u563f\u563f~<p></p>", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u4e3a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570 T \uff08\u4e0d\u8d85\u8fc7100\uff09\uff1b\n\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u4e3a N\uff08\u4e0d\u8d85\u8fc71,000\uff09\uff0c\u5373\u5e8f\u5217\u957f\u5ea6\uff1b\u7136\u540e\u4e0b\u4e00\u884c\u4f9d\u6b21\u662f\u8fd9 N \u4e2a\u6570\uff08\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7100,000,000\uff09\u3002", "output_description": "\u8f93\u51fa\u6d4b\u8bd5\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\u548c\u6700\u5c11\u9700\u8981\u5220\u9664\u7684\u6570\u5b57\u4e2a\u6570\u3002", "samples": "[{\"input\": \"2\\n3\\n1 2 3\\n3\\n1 3 2\\n\", \"output\": \"Case 1: 0\\nCase 2: 1\\n\"}]", "test_case_id": "1836", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 343, "total_accepted_number": 89, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1837, "fields": {"title": "\u5220\u6570\u95ee\u9898\uff08II\uff09", "description": "\u7ae5\u978b\u4eec\uff0c   &lt;&lt; \u5220\u6570\u95ee\u9898(I) &gt;&gt;   \u4f60\u8fc7\u4e86\u6ca1\u6709\u5440\uff1f<p></p><p></p>\u5982\u679c\u90a3\u9053\u9898\u4f60\u6ca1\u6709\u8fc7\uff0c\u8fd9\u9053\u9898\u8981\u8fc7\uff0c\u53ef\u6709\u96be\u5ea6\u4e86\uff0c\u56e0\u4e3a\u6570\u636e\u52a0\u5f3a\u4e86\uff0c\u563f\u563f\uff01<p></p>", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u4e3a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570 T \uff08\u4e0d\u8d85\u8fc710\uff09\uff1b \n\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u4e3a N\uff08\u4e0d\u8d85\u8fc7100,000\uff09\uff0c\u5373\u5e8f\u5217\u957f\u5ea6\uff1b\u7136\u540e\u4e0b\u4e00\u884c\u4f9d\u6b21\u662f\u8fd9 N \u4e2a\u6570\uff08\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7100,000,000\uff09\u3002", "output_description": "\u8f93\u51fa\u6d4b\u8bd5\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\u548c\u6700\u5c11\u9700\u8981\u5220\u9664\u7684\u6570\u5b57\u4e2a\u6570\u3002", "samples": "[{\"input\": \"2\\n3\\n1 2 3\\n3\\n1 3 2\\n\", \"output\": \"Case 1: 0\\nCase 2: 1\\n\"}]", "test_case_id": "1837", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 183, "total_accepted_number": 52, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1839, "fields": {"title": "Beautiful numbers", "description": "Alice loves numbers. She likes such integers contains 2 or 4. <p></p><p></p>What&#039;s more, if the number of 2 and the number of 4 in an integer are all even, Alice thinks this integer is beautiful. <p></p><p></p>Now, she wants to know how many beautiful numbers in all n-digit decimal numbers.<p></p><p></p>For example, 2-digit decimal numbers are 00, 01, 02\u2026 96, 97, 98, and 99. <p></p><p></p>The numbers of beautiful numbers that contains 0 2\u2019 and 0 4\u2019 is 64(=8*8).<p></p>The numbers of beautiful numbers that contains 2 2\u2019 is 1(only 22).<p></p>The numbers of beautiful numbers that contains 2 4\u2019 is 1(only 44).<p></p><p></p>So the answer is 66(64+1+1).<p></p>", "input_description": "The first line contains an integer T, no more than 100, represents the number of test cases.\n\nEach of the following T lines represents a test case, only contains an integer n described above.\n\nAssume that n is no more than 1,000,000,000.\n", "output_description": "For each case, print the case number beginning with 1.\n\nFor each case, print the number of beautiful numbers in all n-digit decimal numbers.\n\nThe answer may be large, just print its value module 11047023 which is 3A\u2019s student ID.\n", "samples": "[{\"input\": \"2\\n1\\n2\\n\", \"output\": \"Case #1: 8\\nCase #2: 66\\n\"}]", "test_case_id": "1839", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 97, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1840, "fields": {"title": "Contest of topcoder", "description": "Nice to meet you, children!<p></p><p></p>Well, I think you are all known that ACM-ICPC is a great contest for all of us. Isn\u2019t it?<p></p><p></p>Most of you want to become a great coder, which need much hard working.<p></p><p></p>But most still can\u2019t develop their ability in programming contest, especially in ICPC. Here, I want to give you an introduction to a great contest, which is a very famous competition for coders.<p></p><p></p>I think that you will be a big cow when you enjoy coding in such a contest for years. When the color of your rating in such competition is red, I suggest that you will get silver medal or gold medal in ACM-ICPC Asia Regional Programming Contest at least. Well, just keep moving. Best wish.<p></p><p></p>Now, I will introduce you to an online programming contest called SRM (Special Round Match)!<p></p><p></p>You are now in the system test phase of the contest. There were N coders in the contest. There were 3 problems in the contest. The system has tested all submitted solutions in the contest. For each submitted solution, there are 3 possible outcomes: \u2018passed\u2019, \u2018failed\u2019, and \u2018challenged\u2019.<p></p><p></p>The contest has a division summary containing a scoreboard of all coders in the contest. For each coder, the scoreboard shows the outcome of the submitted solution of each problem, or an \u2018X\u2019 if the coder didn\u2019t submit a solution to the problem. The coders in the scoreboard are sorted in descending order of the number of passed solutions. If there is a tie, then they are sorted in ascending order of the number of challenged solutions. If there is still a tie, the scoreboard may show them in arbitrary order.<p></p><p></p>Unfortunately, you lose your internet connection in this system test phase. So, you ask your friend how the scoreboard is currently like. However, your friend only tells you the solutions submitted by each coder. This is given as a string S(*).<p></p><p></p>For the i-th coder, a string S(i) represents description of his or her submition. The j-th character of S(i) will be \u2018Y\u2019 if the i-th coder submitted a solution to the j-th problem, or \u2018N\u2019 otherwise. The input order describes the scoreboard from top to bottom, i.e., S(1) describes the 1-th coder is in the first position in the scoreboard, S(2) describes the 2-th coder is in the second position in the scoreboard, and so on.<p></p><p></p>Please tell me the number of different possible scoreboards that match your friend\u2019s description.<p></p>", "input_description": "The first line contains an integer T, no more than 30, represents the number of test cases.\n\nFor each case, the first line contains an integer N, no less than 1 and no more than 50, represents the number of coders.\n\nEach of the following N lines contains a string S, the i-th string S(i) represents description of the i-th place coder\u2019 submit ion.\n\nEach of the string only contains 3 characters and either \u2018Y\u2019 or \u2018N\u2019.\n", "output_description": "For each case, print the case number beginning with 1.\n\nFor each case, print the number of different possible scoreboards that match your friend\u2019s description. The answer may be large, just output its value module 1,000,000,007.\n", "samples": "[{\"input\": \"2\\n1\\nYYY\\n2\\nNNN\\nNNN\\n\", \"output\": \"Case #1: 27\\nCase #2: 1\\n\"}]", "test_case_id": "1840", "hint": "For the first case, there are 3 possible outcomes for each solution, so there are 3*3*3=27 different possible scoreboards.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 5, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1841, "fields": {"title": "Do you know", "description": "Do you know my password?<p></p><p></p>You will never know it until I tell you something about it.<p></p><p></p>When I need encrypt an important file, I always rand a secret string named S. The string is saved in my computer. Then I select the longest substring named T to be the password. The string T should meet the following four conditions:<p></p><p></p>&lt;1&gt; T [1, 2\u2026, LT] = S [1, 2\u2026, LT].<p></p>&lt;2&gt; T [1, 2\u2026, LT] = S [LS-LT+1, LS-LT+2\u2026, LS].<p></p>&lt;3&gt; T [1, 2\u2026, LT] = S [P, P+1\u2026, Q-1, Q].<p></p>&lt;4&gt; 0 &lt; LT &lt; LS, 1 &lt; P &lt;= Q &lt; LS.<p></p><p></p>Assume that LT is the length of string T, and LS is the length of string S. The index of characters starts from 1. <p></p><p></p>Do you know my password?<p></p>", "input_description": "The first line contains an integer T, no more than 30, represents the number of test cases.\n\nEach of the following T lines contains a string S described above, represents a case.\n\nAssume that the length of S is no less than 1 and no more than 100,000. Characters in S are from \u2018a\u2019 to \u2018z\u2019 or \u2018A\u2019 to \u2018Z\u2019.\n", "output_description": "For each case, print the case number beginning with 1.\n\nFor each case, print the password, if such password does not exist, print \u201c-1\u201d.\n", "samples": "[{\"input\": \"2\\nAAA\\nABBA\\n\", \"output\": \"Case #1: A\\nCase #2: -1\\n\"}]", "test_case_id": "1841", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 40, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1842, "fields": {"title": "Elements", "description": "Well, we have a reactor contains a set of N atoms of some chemical elements. <p></p><p></p>You are allowed to take any two different atoms and fuse a new one from them. That results in a new atom, whose number (its number in the periodic table of the chemical elements) is equal to the sum of the numbers of original atoms. The fusion operation can be performed several times.<p></p><p></p>We want to get M new atoms by fusing atoms we have. It is not allowed to split an atom into several atoms. All the N atoms must be used. Please find out whether it is possible.<p></p>", "input_description": "The first line contains an integer T, no more than 40, represents the number of test cases.\n\nFor each test case, the first line of each test case contains two integers N and M, indicating the number of atoms we have and the number of atoms we want to get.(1<=N,M<=17) \n\nThe second line contains space-separated symbols of elements of N atoms. The third line contains space-separated symbols of elements of M atoms which need to be the result of the fusion. These atoms can be the same.\n", "output_description": "For each case, print the case number beginning with 1.\n\nFor each case, if the task can be solved, print \u201cYES\u201d in a single line, else print \u201cNO\u201d.\n", "samples": "[{\"input\": \"3\\n10 3\\nMn Co Li Mg C P F Zn Sc K\\nSn Pt Y\\n2 1\\nH H\\nHe\\n2 2\\nBk Fm\\nCf Es\\n\", \"output\": \"Case #1: YES\\nCase #2: YES\\nCase #3: NO\\n\"}]", "test_case_id": "1842", "hint": "The first task can be solved because \\n\\nMn+C+K-&gt;Sn\\nCo+Zn+Sc-&gt;Pt\\nLi+Mg+P+F-&gt;Y\\n\\nThe first 100 atoms in the periodic table of the chemical elements:\\n\\n&quot;H&quot;,&quot;He&quot;,&quot;Li&quot;,&quot;Be&quot;,&quot;B&quot;,&quot;C&quot;,&quot;N&quot;,&quot;O&quot;,&quot;F&quot;,&quot;Ne&quot;,\\n&quot;Na&quot;,&quot;Mg&quot;,&quot;Al&quot;,&quot;Si&quot;,&quot;P&quot;,&quot;S&quot;,&quot;Cl&quot;,&quot;Ar&quot;,&quot;K&quot;,&quot;Ca&quot;,\\n&quot;Sc&quot;,&quot;Ti&quot;,&quot;V&quot;,&quot;Cr&quot;,&quot;Mn&quot;,&quot;Fe&quot;,&quot;Co&quot;,&quot;Ni&quot;,&quot;Cu&quot;,\\n&quot;Zn&quot;,&quot;Ga&quot;,&quot;Ge&quot;,&quot;As&quot;,&quot;Se&quot;,&quot;Br&quot;,&quot;Kr&quot;,&quot;Rb&quot;,&quot;Sr&quot;,\\n&quot;Y&quot;,&quot;Zr&quot;,&quot;Nb&quot;,&quot;Mo&quot;,&quot;Tc&quot;,&quot;Ru&quot;,&quot;Rh&quot;,&quot;Pd&quot;,&quot;Ag&quot;,\\n&quot;Cd&quot;,&quot;In&quot;,&quot;Sn&quot;,&quot;Sb&quot;,&quot;Te&quot;,&quot;I&quot;,&quot;Xe&quot;,&quot;Cs&quot;,&quot;Ba&quot;,\\n&quot;La&quot;,&quot;Ce&quot;,&quot;Pr&quot;,&quot;Nd&quot;,&quot;Pm&quot;,&quot;Sm&quot;,&quot;Eu&quot;,&quot;Gd&quot;,\\n&quot;Tb&quot;,&quot;Dy&quot;,&quot;Ho&quot;,&quot;Er&quot;,&quot;Tm&quot;,&quot;Yb&quot;,&quot;Lu&quot;,&quot;Hf&quot;,&quot;Ta&quot;,\\n&quot;W&quot;,&quot;Re&quot;,&quot;Os&quot;,&quot;Ir&quot;,&quot;Pt&quot;,&quot;Au&quot;,&quot;Hg&quot;,&quot;Tl&quot;,&quot;Pb&quot;,\\n&quot;Bi&quot;,&quot;Po&quot;,&quot;At&quot;,&quot;Rn&quot;,&quot;Fr&quot;,&quot;Ra&quot;,&quot;Ac&quot;,&quot;Th&quot;,&quot;Pa&quot;,\\n&quot;U&quot;,&quot;Np&quot;,&quot;Pu&quot;,&quot;Am&quot;,&quot;Cm&quot;,&quot;Bk&quot;,&quot;Cf&quot;,&quot;Es&quot;,&quot;Fm&quot; \\n\\nAll the atoms appear in this problem are in the table above.\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 87, "total_accepted_number": 21, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1853, "fields": {"title": "1 VS 1", "description": "Alice and Bob are playing the game SanguoSha 1VS1.If Alice take a card or use a card (it may be slash,missed,peach,duel,sabotage or theft and so on) or discard (sometimes he does not need to throw any card) we will write down an uppercase &#039;A&#039;, if Bob does this, of course, we will write down the letter &quot;B&#039;. Tell me the length of the longest operation combo performed by either player.", "input_description": "There are several test cases, each test case contains only a string composed of uppercase 'A' and 'B'.The input will finish with the end of file. The length of the string is no more than 1000.", "output_description": "For each the case, output an integer indicate for the length.", "samples": "[{\"input\": \"AAABBAAAAA\\nAABBBBAA\\nAAAAAAAA\\n\", \"output\": \"5\\n4\\n8\\n\"}]", "test_case_id": "1853", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 21, "total_accepted_number": 14, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1854, "fields": {"title": "Count the Number of Cycles", "description": "In information theory, a low-density parity-check (LDPC) code is a linear error correcting code, a method of transmitting a message over a noisy transmission channel, and is constructed using a sparse bipartite graph. LDPC codes are capacity-approaching codes, which means that practical constructions exist that allow the noise threshold to be set very close (or even arbitrarily close on the BEC) to the theoretical maximum (the Shannon limit) for a symmetric memory-less channel.<p></p>&#8195;LDPC codes are defined by a sparse parity-check matrix. This parity-check matrix is often randomly generated and the elements in it are 0 or 1. If we want use LDPC codes, we should make the parity-check matrix have no cycles. When four vertices of the rectangle in the matrix are 1, we say that the matrix has one cycle. Now we want to know how many cycles are in the matrix.<p></p>&#8195;For a given matrix, you are to count the number of cycles in the matrix. ", "input_description": "&#8195;There are several test cases, each test case starts with a line containing two positive integers M and N. M and N is the size of the matrix (1 <= M <= 100, 1 <= N <= 100). Next follow a matrix which contains only number 0 and 1. The input will finish with the end of file.", "output_description": "&#8195;For each the case, your program will output the number of cycles in the given matrix on separate line.", "samples": "[{\"input\": \"1 3\\n1 1 1\\n2 3\\n1 0 1\\n0 1 1\\n3 3\\n1 0 1\\n0 1 1\\n1 1 1\\n\", \"output\": \"0\\n0\\n2\\n\"}]", "test_case_id": "1854", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 7, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1855, "fields": {"title": "Changlong's bother", "description": "&#8195;Changlong is a handsome and clever boy and he is admired by many beautiful girls. Every day he received tens of thousands of letters form girls which express their intense desire to be his life companion. You see, Changlong is very tired of this and one day he get an idea to avoid this bother. He declares:<p></p>&#8195;Only those clever girls who can solve the problem below have the qualification to be his wife.<p></p>&#8195;Changlong&#039;s problem can be formulated like this:<p></p>&#8195;There is one interesting sequence of numbers a1, a2,...an, this sequence has a very attractive property that every number appears exactly p times except a particular number t, which occurs q times. How to extract this particular number t from this sequence? In order to let this problem more mysterious, Changlong assumes that the involved number p, q in his problem are prime to each other, i.e., gcd(p, q)=1.<p></p>&#8195;Changlong&#039;s method works very well. After his declaration, the number of received letter has decrease sufficiently. The girls are beginning to think over the problem with continuous strenuous effort, no sooner later they find this problem is beyond their ability. So most of them give up, but there is still a beautiful girl who is persistent in this problem. One day this girl comes across you and she invites you to help her. <p></p>", "input_description": "At the first line of the input is an integer k (0 < k <= 100), the number of test cases.\n&#8195;For each test case, there will be a line containing three integers: n (0 < n <= 10^7), p, q (1 < p, q < 200, gcd (p, q) =1) and a line containing n elements ai (0 < ai < 10^7) of the sequence. \n", "output_description": "For each test case, you should first output a line with \"Case #:\",where # is the id of the test case, then you should output the particular number t, i.e., the number which occurs q times in the sequence. ", "samples": "[{\"input\": \"2\\n8 3 2\\n1 2 1 2 1 2 3 3\\n7 4 3\\n1 1 1 1 2 2 2\\n\", \"output\": \"Case 1:\\n3\\nCase 2:\\n2\\n\"}]", "test_case_id": "1855", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 10000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1857, "fields": {"title": "Province Region Competition Team Play", "description": "As we know, ACM competition is not only based on personal talents, but also team works. A team can be outstanding once it combines these two factors.<p></p>A school has N ACM contest candidates. The coach wants to select K candidates from N candidates and sends them to Hunan Province Region Competition. We suppose every team has 3 members and every member has a value A that represents the personal skills. Every pair of members has a value W that shows the teamwork skills for that pair. There are 3 members a, b, c in a team then the integral skills of this team represents as following formula: <p></p>A[a]+A[b]+A[c]+W[a][b]+W[a][c]+W[b][c];<p></p>In the rules of Province Region Competition, team score is very important. A coach hope to set K teams up and the total team score is maximum.<p></p>Can you figure out what the maximum score of K teams if reasonably choosing team members from contest candidates?<p></p>", "input_description": "The first line has an integer T (T <=10) represents the number of cases. For each test cases, the first line has two numbers K, N (1 <= K <= 6, 3*K<=N<=18) which show the number of teams and the number of candidates. The second line has N integers A1.. An ,(0<=Ai<=100000) which represents the personal talent or personal skills for each candidates. The following N lines, every line has N integers which is a matrix Wnn. Wij describe the teamwork skill between team member i and j, 0<=Wij<=100000 ,and Wij=Wji.\n", "output_description": "For every case, output an integer which is maximum score for K teams.\n", "samples": "[{\"input\": \"1\\n1 4\\n10 10 10 11\\n0 15 5 0\\n15 0 15 15\\n5 15 0 5\\n0 15 5 0\\n\", \"output\": \"66\\n\"}]", "test_case_id": "1857", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 2, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1858, "fields": {"title": "Fly or not fly", "description": "Welcome to Mars! Your first mission is to send letters to K cities A1, A2, ..., AK in order. Mars consists of N cities connected by roads, different roads may have different lengths, in city i there are Pi UFOs which you can take to increase your speed, let&#039;s assume that the road&#039;s length is x, so if you walk through this road, you&#039;ll spend 5x minutes, but if you fly (by UFO of course), you&#039;ll only spend x minutes. However, you must have this mission done in minimal time, and each UFO can only be used once, it disappears when you leave it, you can&#039;t send letters when you are in the UFO, so you must leave it in order to send a letter.<p></p>", "input_description": "There are several test cases, end with EOF. For each test case, the first line contains two integers N <= 100, and K <= N, the second line is N integers, P1, P2, ..., PN.( Pi<=10), Next N lines is an N * N matrix G1..N,1..N for the lengths between every two cities(Gi,j<=100), it is guaranteed that Gi,j=Gj,i and Gi,i=0, if Gi,j=-1, it means that there is no road between city i and j. The last line of each case is K integers A1, A2, ..., AK. You are in city A1 at first.\n", "output_description": "For each the case, output the minimal time.\n", "samples": "[{\"input\": \"3 3\\n0 0 1\\n0 -1 1\\n-1 0 1\\n1 1 0\\n1 3 2\\n3 3\\n2 0 0\\n0 -1 1\\n-1 0 100\\n1 100 0\\n1 3 2\\n\", \"output\": \"6\\n107\\n\"}]", "test_case_id": "1858", "hint": "Case 1: First walk 1-&gt;3 (spend 5 minutes), and take UFO in 3, fly 3-&gt;2 (spend 1 minute), total 6 minutes.\\nCase 2: First take UFO in 1, fly 1-&gt;3 (spend 1 minute), walk back 3-&gt;1 (spend 5 minutes) and take UFO in 1 again, fly 1-&gt;2 (spend 101 minutes), total 107 minutes. ", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1860, "fields": {"title": "HaHa's Morning", "description": "HaHa is so happy today, he is going to participate the 7th Hunan University Programming Contest. He woke up in the morning, and wanted to reach Hunan University as soon as possible, but he realized that he still has N things to do before going on his journey.<p></p>At first, HaHa thought there must have N! (The factorial of N) ways to get everything done, however, he soon found that this was impossible at all, for the work has some annoying restrictions: some things must be done before getting some other things done. Now HaHa is interested in the number of ways to get everything done, and he asks you for help, so your task is to find how many ways are there to finish his work.<p></p>", "input_description": "There are several test cases, each case contains several lines, and the first line of each case is two natural numbers N (that described above) and M \u2264 400 (for the total restrictions for the work).\nThe next M lines describes the restrictions, for each line, there is two positive integers A, B, for the A-th thing must be done before the B-th thing.\nThe input will finish with the end of file, input is guaranteed that 1 \u2264 A, B \u2264 N \u2264 17.\n", "output_description": "For each the case, output one number: the ways to finish the work.\n", "samples": "[{\"input\": \"3 2\\n1 3\\n2 3\\n2 2\\n1 2\\n2 1\\n\", \"output\": \"2\\n0\\n\"}]", "test_case_id": "1860", "hint": "Way 1: The order to do things is 1, 2, 3.\\nWay 2: The order to do things is 2, 1, 3.\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1862, "fields": {"title": "Job!Job!Job!", "description": "Foreverlin is working in a company. In order to make boss happier, he must work as hard as possible, there are n projects on the todolist. Now is time 1, after time m ,foreverlin has to go back to the school .each project has two properties , the finally completion time and the value you can make if you finish this project . At every unit of time ,he can choose a project to finish . However, he can only change one project to do in one unit time, that means in one unit time ,he can choose a project to do and finish in this unit time. As the best friend of him ,can you help him to find out how to arrange these projects so that he can make the biggest values. ", "input_description": "There are several test cases, in each test case, there are two numbers n,m(1<=n<=100000,1<=m<=1000000) . The next n lines each contains two number D[i],V[i] (1 <= D[i] <= 100000,1<=V[i]<=10000) (1<=i<=n ,D[i] means if you choose to do project i ,you can not do this after time D[i],V[i] means the value of project i ) The input will finish with the end of file.", "output_description": "For each the case ,ouput a number means the biggest values.", "samples": "[{\"input\": \"4 10\\n1 8\\n1 3\\n2 10\\n5 12\\n\", \"output\": \"30\\n\"}]", "test_case_id": "1862", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 22, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1865, "fields": {"title": "Overplanting - 1", "description": "Farmer John has purchased a new machine that is capable of planting grass within any rectangular region of his farm that is &quot;axially aligned&quot; (i.e., with vertical and horizontal sides). Unfortunately, the machine malfunctions one day and plants grass in not one, but N (1 &lt;= N &lt;= 10) different rectangular regions, some of which may even overlap.<p></p><p></p>Given the rectangular regions planted with grass, please help FJ compute the total area in his farm that is now covered with grass.", "input_description": "* Line 1: The integer N.\n* Lines 2..1+N: Each line contains four space-separated integers x1 y1\nx2 y2 specifying a rectangular region with upper-left corner\n(x1,y1) and lower-right corner (x2,y2). All coordinates are\nin the range -10,000...10,000.&#8203;\n", "output_description": "* Line 1: The total area covered by grass.\n", "samples": "[{\"input\": \"2\\n0 5 4 1\\n2 4 6 2\\n\", \"output\": \"20\\n\"}]", "test_case_id": "1865", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 13, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1866, "fields": {"title": "Moo", "description": "The cows have gotten themselves hooked on a new word game, called &quot;Moo&quot;. It is played by a group of cows standing in a long line, where each cow in sequence is responsible for calling out a specific letter as quickly as possible. The first cow who makes a mistake loses.<p></p><p></p>The sequence of letters in Moo can technically continue forever. It starts like this:<p></p><p></p>m o o m o o o m o o m o o o o m o o m o o o m o o m o o o o o<p></p><p></p>The sequence is best described recursively: let S(0) be the 3-character sequence &quot;m o o&quot;. Then a longer sequence S(k) is obtained by taking a copy of the sequence S(k-1), then &quot;m o ... o&quot; with k+2 o&#039;s, and then another copy of the sequence S(k-1). For example:<p></p><p></p>S(0) = &quot;m o o&quot;<p></p>S(1) = &quot;m o o m o o o m o o&quot;<p></p>S(2) = &quot;m o o m o o o m o o m o o o o m o o m o o o m o o&quot;<p></p><p></p>As you can see, this process ultimately builds an infinitely long string, and this is the string of characters used for the game of Moo.<p></p><p></p>Bessie the cow, feeling clever, wishes to predict whether the Nth character<p></p>of this string will be an &quot;m&quot; or an &quot;o&quot;. Please help her out!<p></p>", "input_description": "* Line 1: A single integer N (1 <= N <= 10^9).", "output_description": "* Line 1: The only line of output should contain a single character, which is either m or o.", "samples": "[{\"input\": \"11\\n\", \"output\": \"m\\n\"}]", "test_case_id": "1866", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 18, "total_accepted_number": 9, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1867, "fields": {"title": "Overplanting - 2", "description": "Farmer John has purchased a new machine that is capable of planting grass within any rectangular region of his farm that is &quot;axially aligned&quot; (i.e., with vertical and horizontal sides).  Unfortunately, the machine malfunctions one day and plants grass in not one, but N (1 &lt;= N &lt;= 1000) different rectangular regions, some of which may even overlap.<p></p><p></p>Given the rectangular regions planted with grass, please help FJ compute the total area in his farm that is now covered with grass.<p></p>", "input_description": "* Line 1: The integer N.\n\n* Lines 2..1+N: Each line contains four space-separated integers x1 y1 x2 y2 specifying a rectangular region with upper-left corner (x1,y1) and lower-right corner (x2,y2).  All coordinates are in the range -10^8...10^8.", "output_description": "2\n0 5 4 1\n2 4 6 2\n", "samples": "[{\"input\": \"20\\n\", \"output\": null}]", "test_case_id": "1867", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 8, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1868, "fields": {"title": "Relocation", "description": "Farmer John is moving! He is trying to find the best place to build a new farm so as to minimize the amount of travel he needs to do each day.<p></p><p></p>The region to which FJ plans to move has N towns (1 &lt;= N &lt;= 10,000). There are M bi-directional roads (1 &lt;= M &lt;= 50,000) connecting certain pairs of towns. All towns are reachable from each-other via some combination of roads. FJ needs your help selecting the best town as the home for his new farm.<p></p><p></p>There are markets in K of the towns (1 &lt;= K &lt;= 5) that FJ wants to visit every day. In particular, every day he plans to leave his new farm, visit the K towns with markets, and then return to his farm. FJ can visit the markets in any order he wishes. When selecting a town in which to build his new farm, FJ wants to choose only from the N-K towns that do not have markets, since housing prices are lower in those towns.<p></p><p></p>Please help FJ compute the minimum distance he will need to travel during his daily schedule, if he builds his farm in an optimal location and chooses his travel schedule to the markets as smartly as possible.<p></p>", "input_description": "* Line 1: Three space-separated integers, N, M, and K.\n\n* Lines 2..1+K: Line i+1 contains an integer in the range 1...N identifying the town containing the ith market. Each market is in a different town.\n\n* Lines 2+K..1+K+M: Each line contains 3 space-separated integers, i, j (1 <= i,j <= N), and L (1 <= L <= 1000), indicating the presence of a road of length L from town i to town j.\n", "output_description": "* Line 1: The minimum distance FJ needs to travel during his daily routine, if he builds his farm in an optimal location.", "samples": "[{\"input\": \"5 6 3\\n1\\n2\\n3\\n1 2 1\\n1 5 2\\n3 2 3\\n3 4 5\\n4 2 7\\n4 5 10\\n\", \"output\": \"12\\n\"}]", "test_case_id": "1868", "hint": "FJ builds his farm in town 5. His daily schedule takes him through towns 5-1-2-3-2-1-5, for a total distance of 12.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 3, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1869, "fields": {"title": "Cow IDs", "description": "Being a secret computer geek, Farmer John labels all of his cows with binary numbers. However, he is a bit superstitious, and only labels cows with binary numbers that have exactly K &quot;1&quot; bits (1 &lt;= K &lt;= 10). The leading bit of each label is always a &quot;1&quot; bit, of course.  FJ assigns labels in increasing numeric order, starting from the smallest possible valid label -- a K-bit number consisting of all &quot;1&quot; bits. Unfortunately, he loses track of his labeling and needs your help: please determine the Nth label he should assign (1 &lt;= N &lt;= 10^7).", "input_description": "* Line 1: Two space-separated integers, N and K.", "output_description": "* Line 1: Output the Nth label he should assign.", "samples": "[{\"input\": \"7 3\\n\", \"output\": \"10110\\n\"}]", "test_case_id": "1869", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 15, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1870, "fields": {"title": "Cow Coupons", "description": "Farmer John needs new cows! There are N cows for sale (1 &lt;= N &lt;= 50,000), and FJ has to spend no more than his budget of M units of money (1 &lt;= M &lt;= 10^14). Cow i costs P_i money (1 &lt;= P_i &lt;= 10^9), but FJ has K coupons (1 &lt;= K &lt;= N), and when he uses a coupon on cow i, the cow costs C_i instead (1 &lt;= C_i &lt;= P_i). FJ can only use one coupon per cow, of course.", "input_description": "* Line 1: Three space-separated integers: N, K, and M.\n\n* Lines 2..N+1: Line i+1 contains two integers: P_i and C_i.\n", "output_description": "* Line 1: A single integer, the maximum number of cows FJ can afford.\n", "samples": "[{\"input\": \"4 1 7\\n3 2\\n2 2\\n8 1\\n4 3\\n\", \"output\": \"3\\n\"}]", "test_case_id": "1870", "hint": "FJ uses the coupon on cow 3 and buys cows 1, 2, and 3, for a total cost of 3 + 2 + 1 = 6.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 39, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1871, "fields": {"title": "Building Roads", "description": "After the war between Country X and Country Y, all the roads in Country X have been destroyed. Qiqi, the king of Country X wants to build some roads to connect all cities (it means that starting from every city, we can go to any other cities through roads Qiqi built) as soon as possible. <p></p><p></p>Every road takes one day to build and every day Qiqi can build only one road. Building the road between city i and city j costs |pi - pj| units money, where pi and pj are the population of city i and city j. What is the maximum and minimum cost if Qiqi wants to connect all cities in the shortest time?", "input_description": "There are multiple test cases. The first line of the input will be an integer T (T <= 100) indicating the number of test cases.\n\nFor each test case there is an integer N (1 <= N <= 1000) in a single line, representing the number of cities in Country X. The next line lists N integers describing the population of each city.\n\nAll cities' population are between 1 and 10000(inclusive).", "output_description": "For each test case, print \"Case #t: \" first, in which t is the number of the test case starting from 1. Then output the minimum and maximum cost.", "samples": "[{\"input\": \"1\\n3\\n1 2 3\\n\", \"output\": \"Case #1: 2 3\\n\"}]", "test_case_id": "1871", "hint": "Huge input/output. Please use scanf/printf for C/C++.\\nFor the first sample, we can build the roads between 1 and 2, 2 and 3 to get the minimum cost of 2. And build the roads between 1 and 2, 1 and 3 to get the maximum cost of 3.\\n\\nThe data used in this problem is unofficial data prepared by Wuhanzhou. So any mistake here does not imply mistake in the official judge data.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 31, "total_accepted_number": 10, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1872, "fields": {"title": "Island Wars", "description": "On a remote island, there are nine countries (numbered 1 to 9) with perennial wars. After a long period of repeatedly fighting, the relationship among them became peaceful and the area of their territory tends to stable.<p></p><p></p>To simplify the problem, we divide the island into n*m (1 \u2264 n \u2264 50000, 1 \u2264 m \u2264 200) pixels, and we have got the history of all the battles. We found that all the battlefields are geometry shape rectangle. After the end of a battle, the battlefield belongs to the winner.<p></p><p></p>There are q (1 \u2264 q \u2264 50000) battles sorted by time. And after all the battles, we want to know the amount of pixels occupied by each country.<p></p>", "input_description": "There are multiple test cases.\n\nIn the first line of each test case contains three integers n, m, q. The next q lines each line contains five integers x1, y1, x2, y2, c , which stand for the battle with battlefield: all the pixels(x, y) which satisfied x1 \u2264 x \u2264 x2, y1 \u2264 y \u2264 y2 and winner c.\n", "output_description": "For each test case you should output the case number just link \u201cCase 1:\u201d, then nine integers indicating the amount of pixels occupied by each country in the next line.", "samples": "[{\"input\": \"2 2 3\\n1 1 2 1 4\\n1 1 1 2 3\\n2 2 2 2 9\\n\", \"output\": \"Case 1:\\n0 0 2 1 0 0 0 0 1\\n\"}]", "test_case_id": "1872", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 74, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1873, "fields": {"title": "Attend the party", "description": "After the programming contest, all of the contestants would like to throw a party. After the party, however, it will be late, and the contestants will be too tired to walk a long way home. In particular, each contestant refuses to come to the party if it is more than 2.5 km from his or her house. <p></p><p></p>The solution is to hold the party as close to as many of the contestants&#039; houses as possible. This is where you come in: your job is to determine the optimal location for the party, so that as many contestants as possible will be willing to attend it. <p></p><p></p>We consider the city to be a flat square, 50 km on each side. A contestant can walk directly from the party in a straight line to his or her house (there are no obstacles). <p></p>", "input_description": "Input consists of a number of cases.\n\nFor each case, first there is a positive number N, which means the number of the contestants, and then N lines following, each line containing two floating point numbers indicating the (x,y) coordinates of the house of one of the contestants.\n\nEach coordinate is between 0.0 and 50.0 (km). Each house is at a distinct location. There are at most 200 contestants. \n", "output_description": "Standard output consists of a single integer: the maximum number of contestants that can attend the party. ", "samples": "[{\"input\": \"8\\n4.0 4.0\\n4.0 5.0\\n5.0 6.0\\n1.0 20.0\\n1.0 21.0\\n1.0 22.0\\n1.0 25.0\\n1.0 26.0\\n\", \"output\": \"4\\n\"}]", "test_case_id": "1873", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 22, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1874, "fields": {"title": "Change color", "description": "LuckyBug draws a row of lines with a red ink pen, the lines are numbered from 1 to N. Now LuckyBug wants to change the color of these lines with a black pen. At the beginning he can change any line, next only to change lines whose adjacent lines had been changed.<p></p><p></p>For example, there are three lines, first he changes the 2nd-line, the second step he can only change 1 or 2, and so on. The answer are 213 and 231, there is 2 ways.<p></p><p></p>Given N and the the kth line, LuckyBug wants to know the number of ways to change the color of these red lines if he change the kth-line first module 20095518.<p></p>", "input_description": "Input includes a number of test cases. Each case contains two integers N (1<=N<=1000) and kth (1<=kth<=N) which represent the number of lines and the kth-line that LuckyBug first changes.", "output_description": "Print the number of ways to change the color of the red lines module 20095518 in one line.", "samples": "[{\"input\": \"1 1\\n2 1\\n\", \"output\": \"1\\n1\\n\"}]", "test_case_id": "1874", "hint": "Use scanf and printf to avoid TLE.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 30, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1875, "fields": {"title": "Learn words", "description": "In high school, LuckyBug liked to read articles in English, so he learned a lot of new words.When LuckyBug saw a new word, he would remember the word, sometimes LuckyBug also think about the number of times he had seen the word.<p></p><p></p>For example, at the beginning LuckyBug didn\u2019t know any word. When he saw the word \u201clucky\u201d, he would remember the word, when he saw the word \u201cbug\u201d, he would remember the word and he might think about the number of times he saw the word \u201cbug\u201d including this time.<p></p><p></p>Surely,LuckyBug might come across and remember a word more than one times.<p></p>", "input_description": "Input includes a number of test cases. First line of each case contains one integer N (0<= N <=100000) represent the operations LuckyBug performed. The following lines is N operations:\n(1)\tR word\n(2)\tQ word\nwhich represent LuckyBug would remember a word or query the number of times he saw the word.\nAll words will only contain characters 'a'-'z', and the length will be not longer than 15.\n", "output_description": "For each case, print a line containing the case number (beginning with 1) and print the answer described above.", "samples": "[{\"input\": \"3\\nR lucky\\nR bug\\nQ bug\\n\", \"output\": \"Case #1:\\n2\\n\"}]", "test_case_id": "1875", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 87, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1876, "fields": {"title": "Let's shake our phone", "description": "&quot;WeiXin&quot;, a kind of chatting tool, There is anapplication called &quot;Shaking for a while&quot;. Once you shake your cell phone, you can find those who shake their cell phone at same time. <p></p><p></p>One day when LuckyBug was shaking his cell phone, he thought about a problem:<p></p><p></p>how large the friends group would be if everyone made friends once they find others who shake cell phone at same time and combine their friends group?<p></p><p></p>We assume all the people are lonely and have no friends at the beginning. In other word, their friends group only contains themselves. <p></p>", "input_description": "First line contains an integer T (0 < T <= 10), indicate there are T cases. \n\nFor each case, the first line contains an integer N (0 < N <= 1000), indicate the number of people who would shake their cell phone. \n\nThen follows N lines. Every line comes with an integer K[i] (0 <= K[i] <=1440), indicate the i-th person shakes cell phone K times a day. Then follows K[i] strings shown as \"HH:MM\", indicate the time the i-th person shakes Cell phone. \n", "output_description": "For each test case, the first line contains an integer X indicate how many friends group amount the people; the second line comes X integers in non-descending order, indicate the scale of each friends group. ", "samples": "[{\"input\": \"1 \\n4 \\n3 00:00 00:01 00:02 \\n2 00:01 00:03 \\n1 00:03 \\n1 00:04 \\n\", \"output\": \"2\\n1 3 \\n\"}]", "test_case_id": "1876", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 18, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1878, "fields": {"title": "Balls", "description": "N/A.", "input_description": "The first line contains an integer T, no more than 10, indicating the number of test cases. For each case, the first line contains two integers N and K, where 2<=2*K<=N<=2,000. The second line contains N integers W(1), W(2), \u2026, W(N), represent weight of balls. Weight of each ball will less than 32768 (equals 2^15).", "output_description": "For each case, print the case number beginning with 1 and the answer described above.", "samples": "[{\"input\": \"2\\n2 1\\n5 5\\n4 2\\n1 4 2 5\\n\", \"output\": \"Case #1: 0\\nCase #2: 2\\n\"}]", "test_case_id": "1878", "hint": "For the 1st case: Answer = (5 - 5)^2 = 0.\\nFor the 2nd case: Answer = (1-2) ^2 + (4-5) ^2 = 2.\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 198, "total_accepted_number": 14, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1879, "fields": {"title": "Counting problem", "description": "N/A.", "input_description": "The first line of input is an integer T, no more than 20, indicating the number of test cases. Each of the following line only contains two integers N and K, represents a test case. (1<=N<=300, 0<=K<=N^2)", "output_description": "For each case, print the case number beginning with 1. For each case, print the number of different permutations of which the number of reverses is exactly K. Well, the answer may be large, so just print its value module 2012.", "samples": "[{\"input\": \"5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\\n\", \"output\": \"Case #1: 1\\nCase #2: 2\\nCase #3: 2\\nCase #4: 1\\nCase #5: 0\\n\"}]", "test_case_id": "1879", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 88, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1880, "fields": {"title": "Decrypt-password", "description": "N/A.", "input_description": "The first line contains an integer T, no more than 20, indicating the number of test cases. For each case, the first line contains two integers L and M (0 < L, M <= 100); each of the following M lines represents a requirement.", "output_description": "For each case, print the case number beginning with 1. If the file can be decrypted (i.e. there exist a sequence S), print \u201cThe file can be decrypted!\u201d Otherwise, print \u201cSorry, the file is damaged!\u201d", "samples": "[{\"input\": \"2\\n3 2\\n1 2 > 0\\n2 3 < 0\\n3 2\\n1 2 > 0\\n1 2 < 0\\n\", \"output\": \"Case #1: The file can be decrypted!\\nCase #2: Sorry, the file is damaged!\\n\"}]", "test_case_id": "1880", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 11, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1881, "fields": {"title": "Expectation", "description": "N/A.", "input_description": "The first line of input is an integer T, no more than 20, indicating the number of test cases. For each case, the first line contains a positive integer N, no more than 100, represents there are N bottles of unknown liquid. The second line contains N real number Pi (1 <= i <= N), where P1+P2+\u2026+PN=1.", "output_description": "For each case, print the case number beginning with 1 and the expectation of the number of tests if taking optimal strategy. \nThe answers should be processed with 2 digits after the decimal point.\n", "samples": "[{\"input\": \"3\\n3\\n0.50 0.25 0.25\\n4\\n0.25 0.25 0.25 0.25\\n2\\n0.00 1.00\\n\", \"output\": \"Case #1: 1.50\\nCase #2: 2.00\\nCase #3: 1.00\\n\"}]", "test_case_id": "1881", "hint": "An event X is not impossible even P(X) = 0 according to the 3rd case.\\nFor example: Choose a real number in range [L, R].\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 28, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1882, "fields": {"title": "Find the pair", "description": "N/A.", "input_description": "The first line contains an integer T, indicating the number of test cases. For each case, the first line contains two integers N and K, where 1<=N<=100,000 and 1 <= K <= N*N. The second line contains N integers A(1), A(2), \u2026, A(N), represents the sequence. (-1,000,000,000 <= A(i)<=1,000,000,000).", "output_description": "For each case, print the case number beginning with 1 and the K-th pair.", "samples": "[{\"input\": \"1\\n3 2\\n3 1 5\\n\", \"output\": \"Case #1: 1 3\\n\"}]", "test_case_id": "1882", "hint": "The sorted sequence for the sample input is given in the statement, obviously, it is (1, 3).", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 427, "total_accepted_number": 22, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1883, "fields": {"title": "God", "description": "N/A.", "input_description": "For this problem, we will not give the number of test cases. i.e. Input contains multiple test cases. Each case has one representation of the image.", "output_description": "For each case, print the case number beginning with 1 and output the other representation of the image.", "samples": "[{\"input\": \"2 3\\nRT,\\nRT,\\n,\\nB,\\n,\\n.\\n6\\n2 3\\n2 4\\n3 3\\n3 4\\n4 2\\n4 3\\n\", \"output\": \"Case #1:\\n6\\n2 3\\n2 4\\n3 3\\n3 4\\n4 2\\n4 3\\nCase #2:\\n2 3\\nRT,\\nRT,\\n,\\nB,\\n,\\n.\\n\"}]", "test_case_id": "1883", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 16, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1884, "fields": {"title": "Home to school", "description": "N/A.", "input_description": "The first line contains an integer T, no more than 10, indicating the number of test cases. For each case, the first line contains two integers N and M described above. Then follow M lines each containing two integers S(i) and&#8201;T(i). They are the numbers of starting stops and end stops of the buses.\n(1 <= N <= 1,000,000,000; 0 <= M <=100,000; 0 <= S(i) < T(i) <= N)\n", "output_description": "For each case, print the case number beginning with 1 and the answer described above.", "samples": "[{\"input\": \"3\\n2 2\\n0 1\\n1 2\\n3 2\\n0 1\\n1 2\\n5 5\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n\", \"output\": \"Case #1: 1\\nCase #2: 0\\nCase #3: 16\\n\"}]", "test_case_id": "1884", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 5, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1885, "fields": {"title": "Increasing subsequence", "description": "N/A.", "input_description": "The first line contains an integer T, no more than 10, indicating the number of test cases. For each case, the first line contains an integer N, indicating the sequence has N positive integers. The next line come the N elements. Assume that N is no more than 100,000; all elements will no more than 1,000,000,009.", "output_description": "For each case, print the case number beginning with 1 and print the sum described above.", "samples": "[{\"input\": \"2\\n4\\n1 2 3 4\\n5\\n100 1 2 3 4\\n\", \"output\": \"Case #1: 10\\nCase #2: 100\\n\"}]", "test_case_id": "1885", "hint": "The priority of \u201csum is maximal\u201d is larger than priority of \u201clength is longest\u201d.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 148, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1886, "fields": {"title": "Jiajia\u2019s gift", "description": "N/A.", "input_description": "The first line contains an integer T, no more than 30, indicating the number of test cases. For each case, it only contains a positive integer N, no more than 50.", "output_description": "For each case, print the case number beginning with 1 and print the figure according to the sample input/output. Note that: you should know the number of leading-zeros for a certain N before solving this problem, e.g. N=10, then the number \u20181\u2019 should be printed as \u2018001\u2019 as 10*10=100 (Maximal), if N=50, then the number \u201813\u2019 should be printed as \u20180013\u2019 as 50 * 50 = 2500, which has 4 digits. ", "samples": "[{\"input\": \"5\\n1\\n2\\n3\\n4\\n5\\n\", \"output\": \"Case #1:\\n1\\nCase #2:\\n1 3\\n2 4\\nCase #3:\\n1 2 6\\n3 5 7\\n4 8 9\\nCase #4:\\n01 03 04 10\\n02 05 09 11\\n06 08 12 15\\n07 13 14 16\\nCase #5:\\n01 02 06 07 15 \\n03 05 08 14 16\\n04 09 13 17 22\\n10 12 18 21 23\\n11 19 20 24 25\\n\"}]", "test_case_id": "1886", "hint": "1 -&gt; 2 -&gt; 3 -&gt; ... -&gt; N^2", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 176, "total_accepted_number": 48, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1890, "fields": {"title": "Dean", "description": "Dean likes to play with sequences and find interesting things. For an integer sequence A[1], A[2], \u2026, A[N], he subtracts every adjacent two elements to get another sequence of length N-1, B[1], B[2], \u2026, B[N-1], where B[i] = A[i] ? A[i+1], i = 1, 2, \u2026, N-1. Keep on this method until only one element left. Obviously, for a sequence this number is unique.<p></p><p></p>Dean wants to know if he can rearrange the elements in the initial sequence A in any order, what is maximal number left using the method above?<p></p><p></p>Please use 64-bit integers (long long in C/C++) to do calculation in this problem.<p></p>", "input_description": "There will be multiple test cases. The first line of the input is an integer T (T <= 100) indicating the number of test cases. For each test case an integer N (1 <= N <= 50) comes first indicating the number of elements in the initial sequence A. The next line contains N integers with absolute value within 1000.", "output_description": "Print \u201cCase #k: x\u201d in a single line for each test case, in which k represents the case number which starts from 1, and x is the maximal number left.", "samples": "[{\"input\": \"2\\n3\\n1 1 -1\\n5\\n2 1 5 -4 2\\n\", \"output\": \"Case #1: 4\\nCase #2: 46\\n\"}]", "test_case_id": "1890", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 18, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1891, "fields": {"title": "Eddy", "description": "In Fruit Ninja, the player slices fruit with a blade controlled via a tablet. As the fruit is thrown onto the screen, the player swipes their finger across the screen to create a slicing motion, attempting to slice the fruit in half.<p></p>           --- Wikipedia<p></p><p></p>Fruit Ninja is a very popular game and Eddy likes it very much. After the game player can get a bonus based on his/her score.<p></p><p></p>Bonus 1: If the score is a multiple of 5, the player gets a bonus of M.<p></p><p></p>Bonus 2: If every digit of the score is the same, the player gets a bonus of N.<p></p><p></p>Note that if the score satisfies both conditions, the player gets a bonus of M + N.<p></p><p></p>One day when playing on it, Eddy came out an idea: if he can keep getting bonus until satisfying neither conditions, how much he can get? For example, given M = 3, N = 8, and the initial score is 55. The score 55 satisfies both conditions and the player gets a bonus of 3+8 = 11. Then the score increases to 66, which leads another bonus of 8. When it reaches 74, no more bonus is available. So the final score is 74. <p></p><p></p>Assume that Eddy can get any initial score between 1 and 10000; he wants to know what the maximum final score he can get is?<p></p>", "input_description": "There are multiple test cases. The first line of the input will be an integer T (T <= 500) indicating the number of test cases. For each test case there are two integers M and N (1 <= M, N <= 50) in a single line.", "output_description": "For each test case, print \"Case #t: \" first, in which t is the number of the test case starting from 1. Then output the maximum final score he can get. If it can be added endless, output \u201cINF\u201d. The data ensures that result is in a signed 64-bit int bound, i.e. the result is smaller than 2^63.", "samples": "[{\"input\": \"2\\n24 50\\n10 1\\n\", \"output\": \"Case #1: 10049\\nCase #2: INF\\n\"}]", "test_case_id": "1891", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 11, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1893, "fields": {"title": "Boxes on a tree", "description": "N boxes are placed on the vertices of a rooted tree, which are numbered from 1 to N, 1 &lt;= N &lt;= 10,000. Each box is either empty or contains a number of apples; the total number of apples is N. <p></p><p></p>The task is to move the apples such that each box contains exactly one apple. This is to be accomplished be a sequence of moves; each move consists of moving one apple to a box at an adjacent vertex. What is the minimum number of moves required to achieve the goal?<p></p>", "input_description": "The first line contains an integer T, no more than 10, indicating the number of test cases. Each case starts with the number N followed by N lines. Each line contains at least three numbers which are: v the number of a vertex, followed by the number of apples originally placed at vertex v, followed by a number d which is the number of children of v, followed by d numbers giving the identities of the children of v.", "output_description": "For each case, print the case number beginning with 1 and the minimum number of moves required to achieve the goal.", "samples": "[{\"input\": \"3\\n9\\n1 2 3 2 3 4\\n2 1 0\\n3 0 2 5 6\\n4 1 3 7 8 9\\n5 3 0\\n6 0 0\\n7 0 0\\n8 2 0\\n9 0 0\\n9\\n1 0 3 2 3 4\\n2 0 0\\n3 0 2 5 6\\n4 9 3 7 8 9\\n5 0 0\\n6 0 0\\n7 0 0\\n8 0 0\\n9 0 0\\n9\\n1 0 3 2 3 4\\n2 9 0\\n3 0 2 5 6\\n4 0 3 7 8 9\\n5 0 0\\n6 0 0\\n7 0 0\\n8 0 0\\n9 0 0\\n\", \"output\": \"Case #1: 7\\nCase #2: 14\\nCase #3: 20\\n\"}]", "test_case_id": "1893", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 15, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1894, "fields": {"title": "Candies", "description": "Bob has lots of candies, which makes Alice curious. <p></p>Bob has lots of candy-boxes, which also makes Alice curious.<p></p>The candy-boxes are numbered from 1\u2026N in order. <p></p>Alice gives Bob a sequence of queries, for each query, Bob should give the right answer; otherwise, as Bob\u2019s MM, Alice will be very angry.<p></p>For each query, Alice always asks Bob how many candies in the candy-box which has the minimal number of candies for candy-boxes from No. A to No. B.<p></p>And Bob will give her his answer C.<p></p>Alice wants to know how many candies at least Bob has in total.<p></p>Oh, my god, Bob has 1,000,000,000 candy-boxes!!! It means that N is equal to ***<p></p>Can you help Alice, who is your friend?<p></p>", "input_description": "The first line contains an integer T, no more than 20, indicating the number of test cases. For each case, the first line contains an integer Q, no more than 100,000, indicating the number of queries. Each of the following Q lines contains three integers A, B, and C described above.\n(1<=A<=B<=1,000,000,000, 0<=C<=1,000,000,000)\n", "output_description": "For each case, print the case number beginning with 1 and the number of candies at least Bob has in total. If there is a conflict, just print \u201cAlice is very angry!\u201d", "samples": "[{\"input\": \"5\\n1\\n1 1000000000 0\\n1\\n1 1000000000 5\\n3\\n3 4 1\\n5 6 10\\n4 5 100\\n3\\n3 4 100\\n5 6 10\\n4 5 1\\n5\\n6 6 1000\\n4 4 100\\n3 4 10\\n4 5 10\\n3 6 10\\n\", \"output\": \"Case #1: 0\\nCase #2: 5000000000\\nCase #3: 211\\nCase #4: Alice is very angry!\\nCase #5: 1120\\n\"}]", "test_case_id": "1894", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 6, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1897, "fields": {"title": "Find the sub-matrix", "description": "Given a N*M matrix A, whose element in the i-th row and j-th column is A[i][j]. Can you find a sub-matrix that the sum of all its elements is maximal?<p></p><p></p>Is it easy? Okay, what\u2019s more, I want all the elements in the sub-matrix to be same! Well, you can tell me the sum only instead of displaying the sub-matrix~<p></p>", "input_description": "The first line contains an integer T, no more than 10, indicating the number of test cases. For each case, the first line contains two integers N and M, represents the matrix has N rows and M columns. Each of the following N lines contains M integers, where element in the i-th row and j-th column is A[i][j]. (1<=N, M<=1,000, 0<=A[i][j]<=100)", "output_description": "For each case, print the case number beginning with 1 and the maximal sum.", "samples": "[{\"input\": \"2\\n2 2\\n1 2\\n3 4\\n3 4\\n1 1 4 4\\n1 1 0 0\\n1 1 0 0\\n\", \"output\": \"Case #1: 4\\nCase #2: 8\\n\"}]", "test_case_id": "1897", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 35, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1899, "fields": {"title": "How many substrings", "description": "Given a string, we need to find the total number of its distinct substrings. We say a string S(i\u2026j) is a substring of S, where 0 &lt;= i &lt;= j &lt; Length(S), if the index of first character of string S starts from 0.", "input_description": "The first line contains an integer T, no more than 20, indicating the number of test cases.\nEach of the following T lines contains a string which length is no more than 50,000, represents a test case.\nCharacters are from \u2018A\u2019 to \u2018Z\u2019 or \u2018a\u2019 to \u2018z\u2019.\n", "output_description": "For each case, print the case number beginning with 1 and the number of distinct substrings.", "samples": "[{\"input\": \"2\\nCCCCC\\nABABA\\n\", \"output\": \"Case #1: 5\\nCase #2: 9\\n\"}]", "test_case_id": "1899", "hint": "For the 1st case, we have 5 different substrings as follows:\\nC, CC, CCC, CCCC, CCCCC.\\nFor the 2nd case, we have 9 different substrings as follows:\\nA, AB, ABA, ABAB, ABABA, B, BA, BAB, BABA.\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 17, "total_accepted_number": 9, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1900, "fields": {"title": "I-number", "description": "We think that an integer is I-number if and only if its decimal representation doesn&#039;t contain digits other than 4 and 7. For example, numbers 47, 744, 4 are I-numbers and 5, 17, 467 are not.<p></p><p></p>I-number is super if its decimal representation contains equal amount of digits 4 and 7. For example, numbers 47, 7744, 474477 are super and 4, 744, 447 are not.<p></p><p></p>One day, ZZ came across a positive integer n. Help him to find the least super I-number which is not less than n.<p></p>", "input_description": "The first line contains an integer T, no more than 60, indicating the number of test cases. Each of the following T lines contains an integer n described above, represents a case. (1<=n<=1,000,000,000)", "output_description": "For each case, print the case number beginning with 1 and the answer described above.", "samples": "[{\"input\": \"2\\n4500\\n47\\n\", \"output\": \"Case #1: 4747\\nCase #2: 47\\n\"}]", "test_case_id": "1900", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 183, "total_accepted_number": 53, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1901, "fields": {"title": "Jiandanti", "description": "Given a sequence, its length is N, i.e. it has N non-negative integers. Only two different integers in the sequence appear once and others appear twice.  Please find the two integers~<p></p>", "input_description": "The first line contains an integer T, indicating the number of test cases. For each case, the first line contains a positive integer N described above, no more than 2,000,000. Then N non-negative 32-bit integers comes in the second line, represents the sequence. Assume that N is always even.", "output_description": "For each case, print the case number beginning with 1 and output the two integers by increasing order.", "samples": "[{\"input\": \"2\\n4\\n1 9 8 9\\n4\\n2 0 1 2\\n\", \"output\": \"Case #1: 1 8\\nCase #2: 0 1\\n\"}]", "test_case_id": "1901", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 2356, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 323, "total_accepted_number": 16, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1905, "fields": {"title": "SG(n)", "description": "\u5b9a\u4e49G(n)\u8868\u793a\u5c06\u5927\u4e8e11\u7684\u5947\u6570n\u5206\u89e3\u4e3a\u4e24\u4e2a\u5408\u6570\u4e4b\u548c\u7684\u65b9\u6848\u6570\uff1b\u5b9a\u4e49SG(n)=sum({G(i) | i \u2264 n})\uff0c\u5373\u6240\u6709\u4e0d\u5927\u4e8en\u7684\u5947\u6570\u7684\u5206\u62c6\u65b9\u6848\u6570\u4e4b\u548c\u3002\u4f60\u7684\u4efb\u52a1\u5c31\u662f\u5feb\u901f\u7684\u8ba1\u7b97\u7ed9\u5b9an\u6240\u5bf9\u5e94\u7684SG(n)\u3002", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff08\u4e0d\u8d85\u8fc7100\uff09\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570n\uff08\u4e0d\u5c0f\u4e8e13\uff0c\u4e0d\u8d85\u8fc71,000,000\uff09\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684SG(n)\u3002", "samples": "[{\"input\": \"13\\n14\\n15\\n\", \"output\": \"1\\n1\\n2\\n\"}]", "test_case_id": "1905", "hint": "13 = 4 + 9\\n15 = 6 + 9\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 89, "total_accepted_number": 18, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1906, "fields": {"title": "XOR Sequence", "description": "\u73b0\u5728\uff0c\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u7684\u5e8f\u5217A={A(1),A(2),...,A(N)}\uff0c\u8bd5\u6c42\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u5b50\u5e8f\u5217 &lt; i,j &gt; \u6ee1\u8db3\uff1a<p></p><p></p>F(i,j) = A(i) ^ A(i+1) ^ ... ^ A(j-1) ^ A(j) \u4e14 F(i,j) &lt;= M\u3002<p></p><p></p>^ \u8868\u793a\u6291\u6216\u8fd0\u7b97\u3002", "input_description": "\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff1b\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570N\u548cM\uff1b\n\u63a5\u4e0b\u6765\u7684\u4e00\u884c\uff0c\u5305\u542bN\u4e2a\u6574\u6570\uff1aA(1),A(2),...,A(N).\n\u6570\u636e\u8303\u56f4\uff1a1 <= N <= 100,000, 0 <= A(i)\uff0cM < 2^31.", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u6ee1\u8db3\u6761\u4ef6\u7684\u8fde\u7eed\u5b50\u5e8f\u5217\u4e2a\u6570\u3002", "samples": "[{\"input\": \"2\\n2 3\\n1 4\\n2 3\\n4 5\\n\", \"output\": \"1\\n1\\n\"}]", "test_case_id": "1906", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 28, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1907, "fields": {"title": "XOR Interval", "description": "\u8bf7\u8ba1\u7b97\uff1aF(A, B) = A ^ (A + 1) ^ ... ^ (B - 1) ^ B\uff0c\u5176\u4e2d\uff0cA\u7684\u503c\u4e0d\u5927\u4e8eB\u3002 ^ \u8868\u793a\u6291\u6216\u8fd0\u7b97\u3002", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff08\u4e0d\u8d85\u8fc71000\uff09\uff1b\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u542b\u4e24\u4e2a\u6570\uff0cA\u548cB\uff1b\n\u8f93\u5165\u6570\u636e\u4fdd\u8bc1\uff1a0 <= A <= B <= 10^18\u3002", "output_description": "\u8f93\u51faF(A, B)\u7684\u503c\u3002", "samples": "[{\"input\": \"10086 10086\\n\", \"output\": \"10086\"}]", "test_case_id": "1907", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 45, "total_accepted_number": 18, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1908, "fields": {"title": "K-\u8def\u5f84", "description": "\u4e00\u4e2a\u6709\u5411\u56feG(V,E)\uff0c\u6709N\u4e2a\u9876\u70b9\uff0cM\u6761\u8fb9\uff0c\u6bcf\u6761\u8fb9\u7684\u957f\u5ea6\u4e3a1\u3002\u8bd5\u6c42\u9876\u70b9u\u5230\u9876\u70b9v\u6709\u591a\u5c11\u6761\u957f\u5ea6\u4e3aK\u7684\u8def\u5f84\u3002", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\uff1b\n\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u5305\u542b4\u4e2a\u6574\u6570N\u3001M\u3001K\u548cQ\uff0c\u5176\u4e2d\uff0cQ\u8868\u793a\u67e5\u8be2\u6570\u76ee\uff1b\n\u63a5\u4e0b\u6765\u7684M\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6570x\u548cy\uff08\u8f93\u5165\u4fdd\u8bc1x\u4e0d\u7b49\u4e8ey\uff09\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761\u7531\u9876\u70b9x\u6307\u5411\u9876\u70b9y\u7684\u6709\u5411\u8fb9\uff1b\n\u63a5\u4e0b\u6765\u7684Q\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6570u\u548cv\uff0c\u8ba1\u7b97\u9876\u70b9u\u5230\u9876\u70b9v\u6709\u591a\u5c11\u6761\u957f\u5ea6\u4e3aK\u7684\u8def\u5f84\u3002\n\u6570\u636e\u8303\u56f4\uff1a1 <= N <= 100, 1 <= M, K, Q <= 1000\u3002\u6ce8\u610f\uff1a\u9876\u70b9\u6807\u53f7\u4ece1\u5230N\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u4f9d\u6b21\u8f93\u51fa\u9876\u70b9u\u5230\u9876\u70b9v\u8def\u5f84\u957f\u5ea6\u4e3aK\u7684\u8def\u5f84\u6570\u76ee\u3002\n\u7ed3\u679c\u53ef\u80fd\u5f88\u5927\uff0c\u53ea\u9700\u8981\u8f93\u51fa\u5b83\u5bf92012\u6c42\u6a21\u540e\u7684\u503c\u5373\u53ef\u3002", "samples": "[{\"input\": \"1\\n3 3 2 1\\n1 2\\n1 2\\n2 3\\n1 3\\n\", \"output\": \"2\\n\"}]", "test_case_id": "1908", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 8000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 38, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1909, "fields": {"title": "\u6700\u957f\u8fde\u7eed\u5b50\u6bb5", "description": "\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u768401\u5e8f\u5217\uff0c\u4f60\u53ef\u4ee5\u5c060\u6539\u53d8\u4e3a1\uff0c\u6700\u591a\u6539\u53d8K\u6b21\u3002<p></p>\u5728\u6539\u53d8\u540e\u7684\u65b0\u5e8f\u5217\u4e2d\uff0c\u8fde\u7eed1\u5e8f\u5217\u7684\u6700\u5927\u957f\u5ea6\u662f\u591a\u5c11\uff1f", "input_description": "\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\uff1b\n\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570N\u548cK\uff1b\n\u63a5\u4e0b\u6765\u7684\u4e00\u884c\u5305\u542bN\u4e2a\u6574\u6570\uff0c\u975e0\u53731\u3002\n\u6570\u636e\u8303\u56f4\uff1a1 <= N <= 100000, 0 <= K <= N\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u8fde\u7eed1\u5e8f\u5217\u7684\u6700\u5927\u957f\u5ea6\u503c\u3002", "samples": "[{\"input\": \"2\\n4 2\\n1 0 0 1\\n4 1\\n1 0 1 0\\n\", \"output\": \"4\\n3\\n\"}]", "test_case_id": "1909", "hint": "\u5bf9\u4e8e\u7b2c1\u4e2a\u6837\u4f8b\uff0c\u5c06\u4e24\u4e2a0\u5747\u6539\u4e3a1\uff0c\u5f97\u5230\u7b54\u6848\u4e3a4\uff1b\\n\u5bf9\u4e8e\u7b2c2\u4e2a\u6837\u4f8b\uff0c\u5c06\u7b2c1\u4e2a0\u6539\u4e3a1\uff0c\u5f97\u5230\u7b54\u6848\u4e3a3\u3002\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 57, "total_accepted_number": 15, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1910, "fields": {"title": "\u8fd8\u539f\u961f\u5217", "description": "\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u7684\u6574\u6570\u961f\u5217\uff0c\u5176\u503c\u5747\u4e3a1\u5230N\uff08\u542b\uff09\uff0c\u4e14\u5404\u4e0d\u76f8\u540c\u3002<p></p>\u5df2\u7ecf\u77e5\u9053M\u7ec4\u4fe1\u606f\uff0c\u6bcf\u7ec4\u4fe1\u606f\u4e3a&lt; i, j &gt;\uff0c\u8868\u793a\u7b2ci\u4e2a\u6574\u6570\u7684\u503c\u6bd4\u7b2cj\u4e2a\u6574\u6570\u7684\u503c\u5c0f\u3002<p></p>\u8bf7\u8fd8\u539f\u8be5\u6574\u6570\u961f\u5217\u3002", "input_description": "\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\uff1b\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u542b\u4e24\u4e2a\u6574\u6570N\u548cM\uff1b\u63a5\u4e0b\u6765\u7684M\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e00\u7ec4\u6570\u636e < i, j >\u3002\n\u6570\u636e\u8303\u56f4\uff1a1 <= N <= 200, 0 <= M <= 40000, 1 <= i, j <= N\u3002\n", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8fd8\u539f\u5bf9\u5e94\u7684\u6574\u6570\u961f\u5217\uff1b\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u6574\u6570\u961f\u5217\uff0c\u8f93\u51fa\u201c-1\u201d\uff1b\u5982\u679c\u5b58\u5728\u591a\u7ec4\u89e3\uff0c\u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u90a3\u4e00\u7ec4\u89e3\u3002\n", "samples": "[{\"input\": \"4\\n4 2\\n1 2\\n2 1\\n4 1\\n2 1\\n4 1\\n3 2\\n3 1\\n1 1\\n\", \"output\": \"-1\\n2 1 3 4\\n1 3 2 4\\n-1\\n\"}]", "test_case_id": "1910", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 40, "total_accepted_number": 13, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1911, "fields": {"title": "\u547d\u4ee4\u7b26", "description": "\u6709\u4e00\u4e2aN*N\u7684\u683c\u5b50\uff0c\u5176\u4e2d\uff0cN\u662f\u4e00\u4e2a\u5947\u6570\u3002\u673a\u5668\u4eba\u5904\u5728\u6700\u4e2d\u95f4\u7684\u90a3\u4e2a\u683c\u5b50\u4e0a\uff0c\u4e5f\u5c31\u662f\uff08N/2+1,N/2+1\uff09\u7684\u90a3\u4e2a\u683c\u5b50\u4e0a\uff0c\u8fd9\u91cc\u884c\u5217\u8ba1\u6570\u662f\u4ece1\u5230N\u3002\u73b0\u5728\u6709\u4e00\u4e2a\u547d\u4ee4\u7b26\uff0c\u547d\u4ee4\u7b26\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u201cE W S N \uff1f\u201d5\u4e2a\u5b57\u7b26\uff0c\u5176\u4e2d\uff0cE\u8868\u793a\u5411\u4e1c\u8d70\u4e00\u683c\uff0cW\u8868\u793a\u5411\u897f\u8d70\u4e00\u683c\uff0cS\u8868\u793a\u5411\u5357\u8d70\u4e00\u683c\uff0cN\u8868\u793a\u5411\u5317\u8d70\u4e00\u683c\uff0c\uff1f\u8868\u793a\u53ef\u4ee5\u5411\u4e1c\u3001\u6216\u8005\u5411\u897f\u3001\u6216\u8005\u5411\u5357\u548c\u6216\u8005\u5411\u5317\u8d70\u4e00\u683c\u3002\u4efb\u610f\u65f6\u523b\uff0c\u673a\u5668\u4eba\u90fd\u5fc5\u987b\u5728N*N\u4e2a\u683c\u5b50\u5f53\u4e2d\u3002\u5f53\u7ed9\u5b9a\u4e00\u4e2a\u547d\u4ee4\u7b26\u65f6\uff0c\u8bf7\u95ee\uff0c\u5728\u884c\u8d70\u7684\u201c\u8fc7\u7a0b\u201d\u4e2d\uff0c\u673a\u5668\u4eba\u8ddd\u79bb\u8fb9\u7f18\u7684\u6700\u77ed\u8ddd\u79bb\u3002<p></p><p></p>\u6ce8\u610f\uff0c\u673a\u5668\u4eba\u6267\u884c\u547d\u4ee4\u7684\u4efb\u610f\u65f6\u523b\u90fd\u5e94\u8be5\u5728N*N\u7684\u65b9\u683c\u5185\uff0c\u4e5f\u5373\uff0c\u5c3d\u7ba1\u6709\u4e9b\u547d\u4ee4\u7b26\u662f\uff1f\uff0c\u56e0\u4e3a\u9700\u8981\u4fdd\u8bc1\u4e0d\u80fd\u8d70\u51faN*N\u7684\u65b9\u683c\uff0c\u6709\u4e9b\uff1f\u53ef\u80fd\u5fc5\u987b\u662f\u67d0\u4e2a\u5b57\u7b26\u3002\u56e0\u4e3a\u6709\u4e9b\uff1f\u4e0d\u786e\u5b9a\uff0c\u53ef\u80fd\u5b58\u5728\u8bb8\u591a\u5408\u6cd5\u7684\u884c\u8d70\u8def\u5f84\uff0c\u4f60\u9700\u8981\u8ba1\u7b97\u6240\u6709\u8fd9\u4e9b\u60c5\u51b5\u4e2d\uff0c\u5728\u884c\u8d70\u7684\u201c\u8fc7\u7a0b\u201d\u4e2d\uff0c\u673a\u5668\u4eba\u8ddd\u79bb\u8fb9\u7f18\u6709\u6700\u77ed\u8ddd\u79bb\u7684\u89e3\u3002", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T\uff08\u4e0d\u8d85\u8fc750\uff09\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\uff1b\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570N\uff08\u4e0d\u8d85\u8fc72\u768420\u6b21\u65b9\uff0c\u4e14\u4e3a\u5947\u6570\uff09\uff1b\u63a5\u4e0b\u6765\u7684\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32\uff08\u957f\u5ea6\u4e0d\u8d85\u8fc72\u768410\u6b21\u65b9\uff09\uff0c\u8868\u793a\u547d\u4ee4\u7b26\uff08\u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u5408\u6cd5\uff09\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u7b54\u6848\u3002", "samples": "[{\"input\": \"3\\n15\\n?????\\n15\\nEE?WWW\\n29\\nWS?W?S?W?SES\\n\", \"output\": \"2\\n4\\n6\\n\"}]", "test_case_id": "1911", "hint": "\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6837\u4f8b\uff0c\u5f53\uff1f\u5168\u90e8\u4e3aE\uff08\u6216W\u3001S\u548cN\uff09\u65f6\uff0c\u5f97\u5230\u6700\u77ed\u8ddd\u79bb\u4e3a2\uff1b\\n\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u6837\u4f8b\uff0c\u5f53\uff1f\u53d6E\u65f6\uff0c\u53ef\u5f97\u5230\u6700\u77ed\u8ddd\u79bb\u4e3a4\u3002\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 16, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1912, "fields": {"title": "\u80cc\u5305", "description": "\u4eb2\u4eec\uff0c\u8868\u793a\u53c8\u4e00\u6b21\u5fb7\u5fb7\u53d1\u73b0\u4f60\u4eec\u5bf9\u80cc\u5305\u90fd\u4e0d\u600e\u4e48\u4e86\u89e3\uff0c\u5fb7\u5fb7\u597d\u4f24\u5fc3\u554a\u3002\u5076\u7136\u7684\u4e00\u4e2a\u673a\u4f1a\u5fb7\u5fb7\u60f3\u8d77\u6765\u4e00\u4e2a\u6709\u610f\u601d\u7684\u9898\u76ee\uff0c\u4f5c\u4e3a\u7701\u8d5b\u524d\u7684\u70ed\u8eab\uff0c\u5fb7\u5fb7\u60f3\u501f\u6b64\u68c0\u9a8c\u4e00\u4e0b\u4f60\u4eec\u80cc\u5305\u5b66\u7684\u600e\u4e48\u6837\u4e86\u3002\u5e0c\u671b\u4e0d\u8981\u8ba9\u5fb7\u5fb7\u518d\u4f24\u5fc3\u4e86\u3002<p></p><p></p>\u4e3a\u4e86\u7b80\u5316\u95ee\u9898\uff0c\u5fb7\u5fb7\u8868\u793a\u7269\u54c1\u53ea\u6709\u4e24\u79cdA,B\u3002\u73b0\u5728\u544a\u8bc9\u4f60\u4eecA,B\u6240\u5360\u7684\u7a7a\u95f4\u548c\u5177\u6709\u7684\u4ef7\u503c\u4ee5\u53ca\u80cc\u5305\u7684\u5bb9\u91cf\uff0c\u6c42\u80cc\u5305\u6240\u80fd\u88c5\u7269\u54c1\u7684\u6700\u5927\u503c\u3002\u5176\u4e2dA,B\u5f88\u591a\uff0c\u81f3\u4e8e\u6709\u591a\u591a\uff0c\u5fb7\u5fb7\u8fd8\u771f\u6ca1\u6570\u8fc7\uff0c\u4e0d\u8fc7\u5fb7\u5fb7\u77e5\u9053\u80cc\u5305\u7edd\u5bf9\u88c5\u4e0d\u5b8cA\u6216B\u3002<p></p>", "input_description": "\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6570T\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u4e2a\u6570\uff0cT\u4e0d\u4f1a\u8d85\u8fc7300.\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u62ec\u4e94\u4e2a\u6570\u5b57\uff1aN,CA,VA,CB,VB\uff1bN\u4ee3\u8868\u80cc\u5305\u7684\u5bb9\u91cf\uff0cCA\uff0cCB\u5206\u522b\u8868\u793aA\u548cB\u7684\u5bb9\u91cf\uff0cVA,VB\u8868\u793aA\u548cB\u7684\u4ef7\u503c.\u6240\u6709\u7684\u6570\u5b57\u90fd\u662f\u6b63\u6574\u6570\u4e14\u4e0d\u4f1a\u8d85\u8fc710^9.\n", "output_description": "\u6bcf\u4e00\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u884c\uff0c\u5305\u62ec\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u80cc\u5305\u6240\u80fd\u5bb9\u7eb3\u7684\u6700\u5927\u4ef7\u503c\u3002", "samples": "[{\"input\": \"2\\n100 1 1 2 2\\n100 34 34 5 3\\n\", \"output\": \"100\\n86\\n\"}]", "test_case_id": "1912", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 355, "total_accepted_number": 14, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1915, "fields": {"title": "A Famous Airport Manager", "description": "Mr. B is an airport manager. One day after lunch he looked out of his office and found that the color of each plane in the airport is either blue or green. Before supper he looked the airport again, and found that no plane is in the airport now. He couldn&#039;t remember the order in which the planes took off, but he knew between his two observations no plane had arrived at the airport. In addition, while one plane is setting its way to the takeoff area, the remaining planes must stay at their own position and not move. In other words, considering the planes taking off in a specific order, the first plane will move while others stay at their own position. After the first plane took off, the second plane could move to the takeoff area and so on, until all the planes gone. Now he wants you to find out the number of different possible color sequences he might see, if he watched at the takeoff area during the whole afternoon.<p></p><p></p>The airport can be divided into 9 square areas (3 rows x 3 columns), and at most one plane can be parked in one area. The area located at the first column of the first row is the &quot;takeoff area&quot;. The plane can take off only in the takeoff area. Besides, each plane (including the one in the takeoff area) can move to a vacant neighboring area. Two areas are neighboring if and only if they share an edge.", "input_description": "Each test case contains 3 lines, each of which contains 3 characters '*', 'B', 'G', denoting that the corresponding area is currently vacant, occupied by a blue plane, or occupied by a green plane, respectively. The first character of the first row is always a '*'. There is at least one place in the apron.\n\nThere are about 30,000 test cases. Be careful!", "output_description": "For each test case, display a single line containing the case number and the number of different possible color sequences Mr. B might see.", "samples": "[{\"input\": \"*BB\\nBBB\\nBBB\\n*GB\\nBBB\\nBBB\\n\", \"output\": \"Case 1: 1\\nCase 2: 8\\n\"}]", "test_case_id": "1915", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 11, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1916, "fields": {"title": "A Famous ICPC Team", "description": "Mr. B, Mr. G, Mr. M and their coach Professor S are planning their way to Warsaw for the ACM-ICPC World Finals. Each of the four has a square-shaped suitcase with side length Ai (1&lt;=i&lt;=4) respectively. They want to pack their suitcases into a large square box. The heights of the large box as well as the four suitcases are exactly the same. So they only need to consider the large box\u2019s side length. Of course, you should write a program to output the minimum side length of the large box, so that the four suitcases can be put into the box without overlapping.", "input_description": "Each test case contains only one line containing 4 integers Ai (1<=i<=4, 1<=Ai<=1,000,000,000) indicating the side length of each suitcase.", "output_description": "For each test case, display a single line containing the case number and the minimum side length of the large box required.", "samples": "[{\"input\": \"2 2 2 2\\n2 2 2 1\\n\", \"output\": \"Case 1: 4\\nCase 2: 4\\n\"}]", "test_case_id": "1916", "hint": "For the first case, all suitcases have size 2x2. So they can perfectly be packed in a 4x4 large box without wasting any space.\\nFor the second case, three suitcases have size 2x2 and the last one is 1x1. No matter how you rotate or move the suitcases, the side length of the large box must be at least 4.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 55, "total_accepted_number": 28, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1917, "fields": {"title": "A Famous Stone Collector", "description": "Mr. B loves to play with colorful stones. There are n colors of stones in his collection. Two stones with the same color are indistinguishable. Mr. B would like to <p></p>select some stones and arrange them in line to form a beautiful pattern. After several arrangements he finds it very hard for him to enumerate all the patterns. So he asks you to write a program to count the number of different possible patterns. Two patterns are considered different, if and only if they have different number of stones or have different colors on at least one position.", "input_description": "Each test case starts with a line containing an integer n indicating the kinds of stones Mr. B have. Following this is a line containing n integers - the number of \navailable stones of each color respectively. All the input numbers will be nonnegative and no more than 100.", "output_description": "For each test case, display a single line containing the case number and the number of different patterns Mr. B can make with these stones, modulo 1,000,000,007, \nwhich is a prime number.", "samples": "[{\"input\": \"3\\n1 1 1\\n2\\n1 2\\n\", \"output\": \"Case 1: 15\\nCase 2: 8\\n\"}]", "test_case_id": "1917", "hint": "In the first case, suppose the colors of the stones Mr. B has are B, G and M, the different patterns Mr. B can form are: B; G; M; BG; BM; GM; GB; MB; MG; \\nBGM; BMG; GBM; GMB; MBG; MGB.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 15000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 37, "total_accepted_number": 15, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1918, "fields": {"title": "A Famous Equation", "description": "Mr. B writes an addition equation such as 123+321=444 on the blackboard after class. Mr. G removes some of the digits and makes it look like \u201c1?3+??1=44?\u201d. Here \u201c?\u201d denotes removed digits. After Mr. B realizes some digits are missing, he wants to recover them. Unfortunately, there may be more than one way to complete the equation. For example \u201c1?3+??1=44?\u201d can be completed to \u201c123+321=444\u201d , \u201c143+301=444\u201d and many other possible solutions. Your job is to determine the number of different possible solutions.", "input_description": "Each test case describes a single line with an equation like a+b=c which contains exactly one plus sign \u201c+\u201d and one equal sign \u201c=\u201d with some question mark \u201c?\u201d represent missing digits. You may assume a, b and c are non-negative integers, and the length of each number is no more than 9. In the other words, the equation will contain three integers less than 1,000,000,000.", "output_description": "For each test case, display a single line with its case number and the number of possible solutions to recover the equation.", "samples": "[{\"input\": \"7+1?=1?\\n?1+?1=22\\n\", \"output\": \"Case 1: 3\\nCase 2: 1\\n\"}]", "test_case_id": "1918", "hint": "There are three solutions for the first case:\\n7+10=17, 7+11=18, 7+12=19\\nThere is only one solution for the second case:\\n11+11=22\\nNote that 01+21=22 is not a valid solution because extra leading zeros are not allowed.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 5, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1919, "fields": {"title": "A Famous King\u2019s Trip", "description": "Mr. B is the chief engineer in the Kingdom of FDUCS. Recently, the King asks Mr. B to develop a new plan of the road network in the country, since the existing one is so outdated that traffic jam often occurs. Unfortunately, Mr. B is now busy preparing for the ICPC World Finals. Therefore, He asks his friends Mr. G and Mr. M to help him finish that work. When Mr. B gets the solution from his friends, he realizes some problems: Mr. B forgot to specify the budget plan to Mr. G and Mr. M, thus the new solution contains too many new roads which the government cannot afford. After a precise calculation, Mr. B finds that he only need to delete exactly two roads in term of the financial facts (Of course, Mr. B will not delete more than two roads because he wants people in his country to have a convenient traffic).<p></p><p></p>Can Mr. B delete two roads arbitrarily? The answer is negative. The King would like to take a travel on the new road system to review Mr. B&#039;s work. However, the King is so busy that he does not want to take travel with redundancy. That is, the King wants Mr. B to design a road system so that he can travel from the palace (in one city), pass each road exactly once, and then return to the palace. Moreover, during his travelling, the king must visit each city at least once.<p></p><p></p>Mr. B feels hard to satisfy the King\u2019s demand by deleting two roads from the original design. As an ICPC candidate with unlimited potential, can you help him?", "input_description": "For each test case, the first line contains two integers, n and m (1 <= n, m <= 200,000), indicating the number of cities in the Kingdom and the roads in Mr. B's original plan. Following this are m lines, each contains a pair of integers a and b, denoting a bidirectional road between city a and city b (1 <= a, b <= n and a != b), the number of cities are counted from 1. No two roads connect the same pair of cities.\n", "output_description": "For each test case, if Mr. B can satisfy the King\u2019s requirement, then output \u201cYES\u201d in the first line, otherwise output \u201cNO\u201d (quotes for clarifying). If the answer is \u201cYES\u201d, output two integers X and Y (X < Y) in the following line, specifying the two roads that Mr. B should delete from the original design. X and Y are the indexes of roads in the input, counting from 1. If there are more than one possible answer, output the one that makes the pair of (X, Y) lexicographically smallest.", "samples": "[{\"input\": \"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\", \"output\": \"Case 1: YES\\n1 6\\n\"}]", "test_case_id": "1919", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 15000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1920, "fields": {"title": "The Famous ICPC Team Again", "description": "When Mr. B, Mr. G and Mr. M were preparing for the 2012 ACM-ICPC World Final Contest, Mr. B had collected a large set of contest problems for their daily training. When they decided to take training, Mr. B would choose one of them from the problem set. All the problems in the problem set had been sorted by their time of publish. Each time Prof. S, their coach, would tell them to choose one problem published within a particular time interval. That is to say, if problems had been sorted in a line, each time they would choose one of them from a specified segment of the line.<p></p><p></p>Moreover, when collecting the problems, Mr. B had also known an estimation of each problem\u2019s difficultness. When he was asked to choose a problem, if he chose the easiest one, Mr. G would complain that \u201cHey, what a trivial problem!\u201d; if he chose the hardest one, Mr. M would grumble that it took too much time to finish it. To address this dilemma, Mr. B decided to take the one with the medium difficulty. Therefore, he needed a way to know the median number in the given interval of the sequence.", "input_description": "For each test case, the first line contains a single integer n (1 <= n <= 100,000) indicating the total number of problems. The second line contains n integers xi (0 <= xi <= 1,000,000,000), separated by single space, denoting the difficultness of each problem, already sorted by publish time. The next line contains a single integer m (1 <= m <= 100,000), specifying number of queries. Then m lines follow, each line contains a pair of integers, A and B (1 <= A <= B <= n), denoting that Mr. B needed to choose a problem between positions A and B (inclusively, positions are counted from 1). It is guaranteed that the number of items between A and B is odd.", "output_description": "For each query, output a single line containing an integer that denotes the difficultness of the problem that Mr. B should choose.", "samples": "[{\"input\": \"5\\n5 3 2 4 1\\n3\\n1 3\\n2 4\\n3 5\\n5\\n10 6 4 8 2\\n3\\n1 3\\n2 4\\n3 5\\n\", \"output\": \"Case 1:\\n3\\n3\\n2\\nCase 2:\\n6\\n6\\n4\\n\"}]", "test_case_id": "1920", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 15000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 11, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1921, "fields": {"title": "A Famous City", "description": "After Mr. B arrived in Warsaw, he was shocked by the skyscrapers and took several photos. But now when he looks at these photos, he finds in surprise that he isn&#039;t able to point out even the number of buildings in it. So he decides to work it out as follows:<p></p>- divide the photo into n vertical pieces from left to right. The buildings in the photo can be treated as rectangles, the lower edge of which is the horizon. One building may span several consecutive pieces, but each piece can only contain one visible building, or no buildings at all.<p></p>- measure the height of each building in that piece.<p></p>- write a program to calculate the minimum number of buildings.<p></p>Mr. B has finished the first two steps, the last comes to you.", "input_description": "Each test case starts with a line containing an integer n (1 <= n <= 100,000). Following this is a line containing n integers - the height of building in each piece respectively. Note that zero height means there are no buildings in this piece at all. All the input numbers will be nonnegative and less than 1,000,000,000.", "output_description": "For each test case, display a single line containing the case number and the minimum possible number of buildings in the photo.", "samples": "[{\"input\": \"3\\n1 2 3\\n3\\n1 2 1\\n\", \"output\": \"Case 1: 3\\nCase 2: 2\\n\"}]", "test_case_id": "1921", "hint": "The possible configurations of the samples are illustrated below:\\n <img src=\"uploadFiles/1921.JPG\" /> ", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 92, "total_accepted_number": 20, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1922, "fields": {"title": "Two Famous Companies", "description": "In China, there are two companies offering the Internet service for the people from all cities: China Telecom and China Unicom. They both are planning to build cables between cities. Obviously, the government wants to connect all the cities in minimum costs. So the minister of finance Mr. B wants to choose some of the <p></p>cable plans from the two companies and calculate the minimum cost needed to connect all the cities. Mr. B knows that N-1 cables should be built in order to connect all N cities of China. For some honorable reason, Mr. B should choose K cables from the China Telecom and the rest N-1-K cables from the China Unicom. Your job is to help Mr. B determine which cables should be built and the minimum cost to build them. You may assume that the solution always exists.", "input_description": "Each test case starts with a line containing the number of cities N (1 <= N <= 50,000), number of cable plans M (N-1 <= M <= 100,000) and the number of required\ncables from China Telecom K (0 <= K <= N-1). This is followed by M lines, each containing four integers a, b, c, x (0 <= a, b <= N-1, a != b, 1 <= c <= 100, x in {0,1} indicating the pair of cities this cable will connect, the cost to build this cable and the company this cable plan belongs to. x=0 denotes that the cable plan belongs to China Telecom and x=1 denotes that the cable plan is from China Unicom.", "output_description": "For each test case, display the case number and the minimum cost of the cable building.", "samples": "[{\"input\": \"2 2 1\\n0 1 1 1\\n0 1 2 0\\n2 2 0\\n0 1 1 1\\n0 1 2 0\\n\", \"output\": \"Case 1: 2\\nCase 2: 1\\n\"}]", "test_case_id": "1922", "hint": "In the first case, there are two cable plans between the only two cities, one from China Telecom and one from \\nChina Unicom. Mr. B needs to choose the one from China Telecom to satisfy the problem requirement even the cost is higher.\\nIn the second case, Mr. B must choose the cable from China Unicom, which leads the answer to 1.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 15000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1923, "fields": {"title": "A Famous Game", "description": "Mr. B and Mr. M like to play with balls. They have many balls colored in blue and red. Firstly, Mr. B randomly picks up N balls out of them and put them into a bag.<p></p>Mr. M knows that there are N+1 possible situations in which the number of red balls is ranged from 0 to N, and we assume the possibilities of the N+1 situations are <p></p>the same. But Mr. M does not know which situation occurs. Secondly, Mr. M picks up P balls out of the bag and examines them. There are Q red balls and P-Q blue<p></p>balls. The question is: if he picks up one more ball out of the bag, what is the possibility that this ball is red?", "input_description": "Each test case contains only one line with three integers N, P and Q (2 <= N <= 100,000, 0 <= P <= N-1, 0 <= Q <= P).", "output_description": "For each test case, display a single line containing the case number and the possibility of the next ball Mr. M picks out is red. The number should be rounded to four decimal places.", "samples": "[{\"input\": \"3 0 0\\n4 2 1\\n\", \"output\": \"Case 1: 0.5000\\nCase 2: 0.5000\\n\"}]", "test_case_id": "1923", "hint": "For example as the sample test one, there are three balls in the bag. The possibilities of the four possible situations are all 0.25. If there are no red balls in the bag, \\nthe possibility of the next ball are red is 0. If there is one red ball in the bag, the possibility is 1/3. If there are two red balls, the possibility is 2/3. Finally if all balls\\nare red, the possibility is 1. So the answer is 0*(1/4)+(1/3)*(1/4)+(2/3)*(1/4)+1*(1/4)=0.5.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 33, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1925, "fields": {"title": "The Famous Clock", "description": "Mr. B, Mr. G and Mr. M are now in Warsaw, Poland, for the 2012\u2019s ACM-ICPC World Finals Contest. They\u2019ve decided to take a 5 hours training every day before the contest. Also, they plan to start training at 10:00 each day since the World Final Contest will do so. The scenery in Warsaw is so attractive that Mr. B would always like to take a walk outside for a while after breakfast. However, Mr. B have to go back before training starts, otherwise his teammates will be annoyed. Here is a problem: Mr. B does not have a watch. In order to know the exact time, he has bought a new watch in Warsaw, but all the numbers on that watch are represented in Roman Numerals. Mr. B cannot understand such kind of numbers. Can you translate for him?", "input_description": "Each test case contains a single line indicating a Roman Numerals that to be translated. All the numbers can be found on clocks. That is, each number in the input represents an integer between 1 and 12. Roman Numerals are expressed by strings consisting of uppercase \u2018I\u2019, \u2018V\u2019 and \u2018X\u2019. See the sample input for further information.", "output_description": "For each test case, display a single line containing a decimal number corresponding to the given Roman Numerals.", "samples": "[{\"input\": \"I\\nII\\nIII\\nIV\\nV\\nVI\\nVII\\nVIII\\nIX\\nX\\nXI\\nXII\\n\", \"output\": \"Case 1: 1\\nCase 2: 2\\nCase 3: 3\\nCase 4: 4\\nCase 5: 5\\nCase 6: 6\\nCase 7: 7\\nCase 8: 8\\nCase 9: 9\\nCase 10: 10\\nCase 11: 11\\nCase 12: 12\\n\"}]", "test_case_id": "1925", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 51, "total_accepted_number": 33, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1926, "fields": {"title": "Cows in a Row", "description": "Farmer John&#039;s N cows (1 &lt;= N &lt;= 1000) are lined up in a row.  Each cow is identified by an integer &quot;breed ID&quot;; the breed ID of the ith cow in the lineup is B(i).<p></p><p></p>FJ thinks that his line of cows will look much more impressive if there is a large contiguous block of cows that all have the same breed ID.  In order to create such a block, FJ decides remove from his lineup all the cows having a particular breed ID of his choosing.  Please help FJ figure out the length of the largest consecutive block of cows with the same breed ID that he can create by removing all the cows having some breed ID of his choosing.", "input_description": "* Line 1: The integer N.\n\n* Lines 2..1+N: Line i+1 contains B(i), an integer in the range 0...1,000,000.", "output_description": "* Line 1: The largest size of a contiguous block of cows with identical breed IDs that FJ can create.", "samples": "[{\"input\": \"9\\n2\\n7\\n3\\n7\\n7\\n3\\n7\\n5\\n7\\n\", \"output\": \"4\\n\"}]", "test_case_id": "1926", "hint": "By removing all cows with breed ID 3, the lineup reduces to 2, 7, 7, 7, 7, 5, 7.  In this new lineup, there is a contiguous block of 4 cows with the same breed ID (7).", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 81, "total_accepted_number": 26, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1927, "fields": {"title": "Three Lines", "description": "Farmer John wants to monitor his N cows (1 &lt;= N &lt;= 50,000) using a new surveillance system he has purchased.  <p></p><p></p>The ith cow is located at position (x_i, y_i) with integer coordinates (in the range 0...1,000,000,000); no two cows occupy the same position.  FJ&#039;s surveillance system contains three special cameras, each of which is capable of observing all the cows along either a vertical or horizontal line.  Please determine if it is possible for FJ to set up these three<p></p>cameras so that he can monitor all N cows.  That is, please determine if the N locations of the cows can all be simultaneously &quot;covered&quot; by some set of three lines, each of which is oriented either horizontally or vertically.", "input_description": "* Line 1: The integer N.\n\n* Lines 2..1+N: Line i+1 contains the space-separated integer x_i and y_i giving the location of cow i.", "output_description": "* Line 1: Please output 1 if it is possible to monitor all N cows with three cameras, or 0 if not.", "samples": "[{\"input\": \"6\\n1 7\\n0 0\\n1 2\\n2 0\\n1 4\\n3 4\\n\", \"output\": \"1\\n\"}]", "test_case_id": "1927", "hint": "The lines y=0, x=1, and y=4 are each either horizontal or vertical, and collectively they contain all N of the cow locations.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 38, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1930, "fields": {"title": "Bookshelf", "description": "When Farmer John isn&#039;t milking cows, stacking haybales, lining up his cows, or building fences, he enjoys sitting down with a good book.  Over the years, he has collected N books (1 &lt;= N &lt;= 2,000), and he wants to build a new set of bookshelves to hold them all.  <p></p><p></p>Each book i has a width W(i) and height H(i).  The books need to be added to a set of shelves in order; for example, the first shelf should contain books 1...k for some k, the second shelf should start with book k+1, and so on.  Each shelf can have a total width of at most L (1 &lt;= L &lt;= 1,000,000,000).  The height of a shelf is equal to the height of the tallest book on that shelf, and the height of the entire set of bookshelves is the sum of the heights of all the individual shelves, since they are all stacked vertically.  <p></p><p></p>Please help FJ compute the minimum possible height for the entire set of bookshelves.", "input_description": "* Line 1: Two space-separated integers: N and L.\n\n* Lines 2..1+N: Line i+1 contains two space-separated integers: H(i) and W(i).  (1 <= H(i) <= 1,000,000; 1 <= W(i) <= L).", "output_description": "* Line 1: The minimum possible total height for the set of bookshelves.", "samples": "[{\"input\": \"5 10\\n5 7\\n9 2\\n8 5\\n13 2\\n3 8\\n\", \"output\": \"21\\n\"}]", "test_case_id": "1930", "hint": "There are 3 shelves, the first containing just book 1 (height 5, width 7), the second containing books 2..4 (height 13, width 9), and the third containing book 5 (height 3, width 8).", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 5, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1931, "fields": {"title": "Running Laps", "description": "Bored with horse racing, Farmer John decides to investigate the feasibility of cow racing as a sport.  He sets up his N cows (1 &lt;= N &lt;= 100,000) to run a race of L laps around a circular track of length C.  The cows all start at the same point on the track and run at different speeds, with the race ending when the fastest cow has run the total distance of LC.  <p></p><p></p>FJ notices several occurrences of one cow overtaking another, and wonders how many times this sort of &quot;crossing event&quot; happens during the entire race.  More specifically, a crossing event is defined by a pair of cows (x,y) and a time t (less than or equal to the ending time of the race), where cow x crosses in front of cow y at time t.  Please help FJ count the<p></p>total number of crossing events during the entire race.", "input_description": "* Line 1: Three space-separated integers: N, L, and C.  (1 <= L,C <= 25,000).\n\n* Lines 2..1+N: Line i+1 contains the speed of cow i, an integer in the range 1..1,000,000.", "output_description": "* Line 1: The total number of crossing events during the entire race.", "samples": "[{\"input\": \"4 2 100\\n20\\n100\\n70\\n1\\n\", \"output\": \"4\\n\"}]", "test_case_id": "1931", "hint": "The race lasts 2 units of time, since this is the time it takes the fastest cow (cow 2) to finish.  Within that time, there are 4 crossing events: cow 2 overtakes cows 1 and 4, and cow 3 overtakes cows 1 and 4.\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 14, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1933, "fields": {"title": "Balanced Cow Subsets", "description": "Farmer John&#039;s owns N cows (2 &lt;= N &lt;= 20), where cow i produces M(i) units of milk each day (1 &lt;= M(i) &lt;= 100,000,000).  FJ wants to streamline the process of milking his cows every day, so he installs a brand new milking machine in his barn.  Unfortunately, the machine turns out to be far too sensitive: it only works properly if the cows on the left side of the barn have the exact same total milk output as the cows on the right side of the barn!  <p></p><p></p>Let us call a subset of cows &quot;balanced&quot; if it can be partitioned into two groups having equal milk output.  Since only a balanced subset of cows can make the milking machine work, FJ wonders how many subsets of his N cows are balanced.  Please help him compute this quantity.", "input_description": "* Line 1: The integer N.\n\n* Lines 2..1+N: Line i+1 contains M(i).", "output_description": "* Line 1: The number of balanced subsets of cows.", "samples": "[{\"input\": \"4\\n1\\n2\\n3\\n4\\n\", \"output\": \"3\\n\"}]", "test_case_id": "1933", "hint": "There are three balanced subsets: the subset {1,2,3}, which can be partitioned into {1,2} and {3}, the subset {1,3,4}, which can be partitioned into {1,3} and {4}, and the subset {1,2,3,4} which can be partitioned into {1,4} and {2,3}.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 56, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1934, "fields": {"title": "C++\u7684\u6ce8\u91ca", "description": "\u6ce8\u91ca\u662f\u589e\u5f3a\u7a0b\u5e8f\u53ef\u8bfb\u6027\u7684\u624b\u6bb5\uff0c\u6bcf\u79cd\u7a0b\u5e8f\u8bed\u8a00\u90fd\u5e94\u8be5\u6709\u81ea\u5df1\u7684\u6ce8\u91ca\u7684\u65b9\u5f0f\u3002\u8fd9\u91cc\u7ed9\u5927\u5bb6\u8bb2\u89e3\u4e00\u4e0bC++\u7684\u6ce8\u91ca\uff0c\u56e0\u4e3a\u6211\u4eec\u8fd9\u9053\u9898\u7684\u76ee\u7684\u662f\u4e0d\u8981\u6ce8\u91ca\u54e6~\uff01<p></p><p></p>C++\u6709\u4e24\u79cd\u6ce8\u91ca\uff1a<p></p><p></p>1\uff1a\u5355\u884c\u6ce8\u91ca\u3002\u6ce8\u91ca\u4ee5//\u4e3a\u6807\u8bc6\uff0c\u8be5\u884c\u51fa\u73b0\u5728//\u540e\u7684\u5168\u90e8\u5b57\u7b26\u4ee5\u6ce8\u91ca\u5904\u7406\u3002\u5982\u679c\u884c\u672b\u6709\u6362\u884c\u7b26&#039;<p></p>&#039;\uff0c\u6362\u884c\u7b26\u5e94\u8be5\u4fdd\u7559\u3002<p></p><p></p>\u6bd4\u5982\u73b0\u6709\u5185\u5bb9\u4e3a&quot;missing//...author&quot;\uff0c\u9664\u53bb\u6ce8\u91ca\u540e\u5e94\u4e3a&quot;missing&quot;\u3002<p></p>\t\t<p></p>2\uff1a\u591a\u884c\u6ce8\u91ca\u3002\u6ce8\u91ca\u4ee5/*\u4e3a\u8d77\u59cb\u6807\u8bc6\uff0c\u4ee5*/\u4e3a\u7ed3\u675f\u6807\u8bc6\u3002\u6240\u6709\u51fa\u73b0\u5728\u8d77\u59cb\u6807\u8bc6\u548c\u7ed3\u675f\u6807\u8bc6\u95f4\u7684\u5b57\u7b26\u90fd\u6309\u7167\u6ce8\u91ca\u5904\u7406\u3002<p></p><p></p>\u6bd4\u5982\u73b0\u6709\u5185\u5bb9&quot;missing/*...author*/&quot;\uff0c\u9664\u53bb\u6ce8\u91ca\u540e\u5e94\u4e3a&quot;missing&quot;\u3002<p></p><p></p>\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\u6211\u4eec\u4e0d\u8003\u8651\u5d4c\u5957\u6ce8\u91ca\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u6709\u5185\u5bb9&quot;/*//*/&quot;\uff0c\u5e94\u8be5\u628a\u4e2d\u95f4\u7684//\u5f53\u6210/**/\u4e2d\u7684\u6ce8\u91ca\uff0c\u800c\u4e0d\u662f\u628a*/\u5f53\u6210//\u7684\u6ce8\u91ca\u3002\u800c\u4e14\u8003\u8651\u7cfb\u7edf\u4e3awindows\u3002<p></p>", "input_description": "\u8f93\u5165\u662f\u4e00\u4e2aC++\u6e90\u4ee3\u7801\uff0c\u5373\u53ea\u6709\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u6587\u4ef6\u53ef\u4ee5\u7f16\u8bd1\u6210\u529f\uff0c\u5373\u8f93\u5165\u7684\u6570\u636e\u5408\u6cd5\uff0c\u4f5c\u4e3a\u8d77\u59cb\u6807\u8bc6\u7684/*\u4e0e\u7ed3\u675f\u6807\u8bc6*/\u914d\u5bf9\u3002", "output_description": "\u9664\u4e86\u6ce8\u91ca\u4f60\u4e0d\u5e94\u8be5\u5220\u9664\u66f4\u591a\u7684\u539f\u6709\u5185\u5bb9\u3002\u8f93\u51fa\u5220\u4e86\u6ce8\u91ca\u7684\u6e90\u6587\u4ef6\u3002\n\u8bf7\u6ce8\u610f\u6bd4\u5bf9\u6837\u4f8b\uff0c\u7a7a\u683c\u3001\u6362\u884c\u9700\u8981\u4fdd\u7559\u3002\u4f60\u5e94\u8be5\u590d\u5236\u4fdd\u5b58\u5230\u6587\u4ef6\u8fdb\u884c\u6bd4\u5bf9\u3002", "samples": "[{\"input\": \"/*******************************************************************\\n * Problem Id:1000  User Id:missing \\n * Memory:1024K  Time:0MS\\n * Language:G++  Result:Accepted\\n ******************************************************************/\\n \\n#include < stdio.h > /*/* include header file */\\n\\nint main() /*/* function: main() return int */\\n{\\n\tint a, b;\t/*variable definition*/  // a, b is integer\\n\twhile (scanf(\"%d%d\", &a, &b) != EOF)  /* function: int scanf(char *, ...)\\n\t\t\t\t\t\t\t\t\t\t\t return EOF(end of file) when read the end of file. */\\n\t\tprintf(\"%d\\n\", a+b);\t/**/ // print a+b\\n\treturn 0; // return 0 to system.\\n} // end function main.\\n// Acmer come on!\\n\", \"output\": \" \\n#include < stdio.h > \\n\\nint main() \\n{\\n\tint a, b;\t  \\n\twhile (scanf(\"%d%d\", &a, &b) != EOF)  \\n\t\tprintf(\"%d\\n\", a+b);\t \\n\treturn 0; \\n} \\n\"}]", "test_case_id": "1934", "hint": "\u8bf7\u590d\u5236\u5230\u6587\u672c\u4e2d\uff0c\u4ed4\u7ec6\u67e5\u770b\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 169, "total_accepted_number": 22, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1935, "fields": {"title": "\u7f57\u5bc6\u6b27\u4e0e\u6731\u4e3d\u53f6", "description": "\u7ecf\u8fc7\u4e00\u6b21\u5bb4\u4f1a\u540e\u7f57\u5bc6\u6b27\u4e0e\u6731\u4e3d\u53f6\u4e00\u89c1\u949f\u60c5\uff0c\u4f46\u662f\u5f53\u65f6\u53cc\u65b9\u90fd\u4e0d\u77e5\u9053\u5bf9\u65b9\u7684\u8eab\u4efd\u3002\u771f\u76f8\u5927\u767d\u540e\uff0c\u4e24\u4eba\u88ab\u91cd\u91cd\u963b\u6270\u3002\u6700\u540e\uff0c\u7f57\u5bc6\u6b27\u88ab\u9a71\u9010\uff0c\u6731\u4e3d\u53f6\u7684\u7236\u738b\u4e5f\u547d\u4ee4\u5979\u4e0b\u661f\u671f\u56db\u7ed3\u5a5a\u3002\u6731\u4e3d\u53f6\u53bb\u627e\u795e\u7236\u60f3\u529e\u6cd5\uff0c\u795e\u7236\u7ed9\u4e86\u5979\u4e00\u79cd\u836f\uff0c\u670d\u4e0b\u53bb\u540e\u5c31\u50cf\u6b7b\u4e86\u4e00\u6837\uff0c\u4f46\u56db\u5341\u4e8c\u5c0f\u65f6\u540e\u5c31\u4f1a\u82cf\u9192\u8fc7\u6765\u3002\u795e\u7236\u7b54\u5e94\u5979\u6d3e\u4eba\u53eb\u7f57\u5bc6\u6b27\uff0c\u4f1a\u5f88\u5feb\u6316\u5f00\u5893\u7a74\uff0c\u8ba9\u5979\u548c\u7f57\u5bc6\u6b27\u8fdc\u8d70\u9ad8\u98de\u3002\u6731\u4e3d\u53f6\u4f9d\u8ba1\u884c\u4e8b\uff0c\u5728\u5a5a\u793c\u7684\u5934\u5929\u665a\u4e0a\u670d\u4e86\u836f\uff0c\u7b2c\u4e8c\u5929\u5a5a\u793c\u81ea\u7136\u5c31\u53d8\u6210\u4e86\u846c\u793c\u3002\u795e\u7236\u9a6c\u4e0a\u6d3e\u4eba\u53bb\u901a\u77e5\u7f57\u5bc6\u6b27\u3002\u53ef\u662f\uff0c\u7f57\u5bc6\u6b27\u5728\u795e\u7236\u7684\u9001\u4fe1\u4eba\u5230\u6765\u4e4b\u524d\u5df2\u7ecf\u77e5\u9053\u4e86\u6d88\u606f\u3002\u4ed6\u5728\u534a\u591c\u6765\u5230\u6731\u4e3d\u53f6\u7684\u5893\u7a74\u65c1\uff0c\u6740\u6b7b\u4e86\u963b\u62e6\u4ed6\u7684\u5e15\u91cc\u65af\u4f2f\u7235\uff0c\u6398\u5f00\u4e86\u5893\u7a74\uff0c\u4ed6\u543b\u4e86\u4e00\u4e0b\u6731\u4e3d\u53f6\u4e4b\u540e\uff0c\u5c31\u638f\u51fa\u968f\u8eab\u5e26\u6765\u7684\u6bd2\u836f\u4e00\u996e\u800c\u5c3d\uff0c\u5012\u5728\u6731\u4e3d\u53f6\u8eab\u65c1\u6b7b\u53bb\u3002\u6731\u4e3d\u53f6\u9192\u540e\u89c1\u5230\u6b7b\u53bb\u7684\u7f57\u5bc6\u6b27\uff0c\u4e5f\u4e0d\u60f3\u72ec\u6d3b\u4eba\u95f4\uff0c\u5979\u6ca1\u6709\u627e\u5230\u6bd2\u836f\uff0c\u5c31\u62d4\u51fa\u7f57\u5bc6\u6b27\u7684\u5251\u523a\u5411\u81ea\u5df1\uff0c\u5012\u5728\u7f57\u5bc6\u6b27\u8eab\u4e0a\u6b7b\u53bb\u3002<p></p><p></p>------------------------------------------------------------------------------------<p></p><p></p>\u795e\u7236\u7684\u9001\u4fe1\u4eba\u4e3a\u4ec0\u4e48\u6ca1\u6709\u89c1\u5230\u7f57\u5bc6\u6b27\u5462\uff1f\uff01\u8fd9\u5927\u6982\u5c31\u662f\u6545\u4e8b\u7ed3\u5c40\u7684\u539f\u56e0\u4e86\u3002\u73b0\u5728\u6211\u4eec\u6765\u6a21\u62df\u7f57\u5bc6\u6b27\u4e0e\u795e\u7236\u9001\u4fe1\u4eba\u7684\u8def\u7ebf\uff0c\u5224\u65ad\u4ed6\u4eec\u662f\u5426\u4f1a\u76f8\u9047\uff1f", "input_description": "\u7b2c\u4e00\u884c\u662f\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570T(T<=100)\uff0c\u63a5\u4e0b\u6765\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u62ec\u56db\u884c\u3002\u7b2c\u4e00\u884c\u662f\u7f57\u5bc6\u6b27\u7684\u4f4d\u7f6e\u5750\u6807\uff0c\u7b2c\u4e8c\u884c\u662f\u7f57\u5bc6\u6b27\u7684\u8def\u7ebf\uff1b\u7b2c\u4e09\u884c\u662f\u795e\u7236\u9001\u4fe1\u4eba\u7684\u5750\u6807\uff0c\u7b2c\u56db\u884c\u662f\u795e\u7236\u9001\u4fe1\u4eba\u7684\u8def\u7ebf\u3002\u5750\u6807\u7528\u4e24\u4e2a\u6574\u6570\u8868\u793a\uff0c\u8def\u7ebf\u4ec5\u5305\u542b5\u79cd\u5b57\u7b26'U','D','L','R','_'\uff0c\u5206\u522b\u8868\u793a\u4e0a\u4e0b\u5de6\u53f3\u548c\u4f11\u606f\u3002\n\n\u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u8def\u7ebf\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5927\u4e8e0\u4f46\u4e0d\u8d85\u8fc7100\u3002\u7f57\u5bc6\u6b27\u4e0e\u795e\u7236\u9001\u4fe1\u4eba\u7684\u8d77\u59cb\u4f4d\u7f6e\u4e0d\u540c\u3002\u5982\u679c\u4e00\u4e2a\u4eba\u8d70\u5b8c\u81ea\u5df1\u7684\u8def\u7ebf\u5c31\u5e94\u8be5\u539f\u5730\u4f11\u606f\u3002", "output_description": "\u4f60\u5e94\u8be5\u8ba4\u4e3a\u4e24\u4eba\u8fdb\u884c\u8def\u7ebf\u4e0a\u7684\u4e00\u4e2a\u64cd\u4f5c\u65f6\u82b1\u8d39\u7684\u65f6\u95f4\u76f8\u540c\u3002\u5982\u679c\u4e24\u4eba\u53ef\u4ee5\u76f8\u9047\u8bf7\u8f93\u51fa\"A happy ending.\"\uff0c\u5426\u5219\u8f93\u51fa\"Damn it!\"\u3002\u5360\u4e00\u884c\u3002", "samples": "[{\"input\": \"2\\n0 0\\nUDLR\\n-1 -1\\nULRR\\n1 2\\n_\\n2 1\\n_\\n\", \"output\": \"A happy ending.\\nDamn it!\\n\"}]", "test_case_id": "1935", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 324, "total_accepted_number": 72, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1936, "fields": {"title": "\u54ea\u4e00\u74f6\u662f\u6bd2\u836f?", "description": "\u8bb0\u5f97\u5ba3\u8bb2\u4f1a\u7684\u65f6\u5019\uff0c\u7ba1\u5927\u795e\u8bb2\u8fc7\u4e00\u9053\u5c0f\u767d\u9f20\u6d4b\u6bd2\u836f\u7684\u95ee\u9898\uff0c\u73b0\u5728\u6211\u4eec\u6765\u6cdb\u5316\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\u3002\u5047\u8bbe\u6709N\u4e2a\u74f6\uff0c\u7531\u4e8e\u74f6\u5b50\u4e0a\u6807\u7b7e\u4e22\u5931\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u74f6\u5b50\u5230\u5e95\u662f\u666e\u901a\u6c34\u8fd8\u662f\u6bd2\u836f\uff0c\u4f46\u662f\u552f\u4e00\u80fd\u786e\u5b9a\u7684\u662f\uff0c\u5176\u4e2d\u6709\u4e14\u53ea\u6709\u4e00\u74f6\u662f\u6bd2\u836f\uff0c\u5176\u4ed6\u90fd\u662f\u666e\u901a\u6c34\u3002\u7531\u4e8e\u6bd2\u836f\u662f\u6162\u6027\u6bd2\u836f\uff0c\u5c0f\u767d\u9f20\u559d\u4e0b\u53bb\u53ef\u80fd\u8981\u8fc7\u51e0\u5929\u624d\u4f1a\u6b7b\u4ea1\uff0c\u4e3a\u4e86\u8282\u7ea6\u65f6\u95f4\uff0c\u6211\u4eec\u60f3\u4e00\u6b21\u6027\u6d4b\u51fa\u54ea\u4e00\u74f6\u662f\u6bd2\u836f\u3002\u4f46\u662f\u7531\u4e8e\u5b9e\u9a8c\u5ba4\u7684\u5c0f\u767d\u9f20\u4e0d\u662f\u65e0\u9650\u7684\uff0c\u6240\u4ee5\u5e0c\u671b\u7528\u5c3d\u91cf\u5c11\u7684\u5c0f\u767d\u9f20\u6765\u68c0\u6d4b\u51fa\u6bd2\u836f\u3002\u4eb2\u7231\u7684ACMer\u4eec\uff0c\u4f60\u6709\u4ec0\u4e48\u597d\u7684\u65b9\u6848\u5417\uff1f", "input_description": "\u6709\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u5165\u4e00\u4e2a\u6574\u6570N\uff080 < N < 10^8\uff09", "output_description": "\u8f93\u51fa\u6700\u5c11\u4f7f\u7528\u7684\u5c0f\u767d\u9f20\u6570\u91cf\u3002\n", "samples": "[{\"input\": \"1\\n2\\n\", \"output\": \"0\\n1\\n\"}]", "test_case_id": "1936", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 388, "total_accepted_number": 100, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1937, "fields": {"title": "\u9501\u5996\u5854\u5386\u7ec3", "description": "\u81ea\u4ece\u5251\u4ed9\u674e\u900d\u9065\u7ecf\u8fc7\u9501\u5996\u5854\u7684\u5386\u7ec3\u4e4b\u540e\uff0c\u8700\u5c71\u7684\u957f\u8001\u4eec\u4e00\u81f4\u8ba4\u4e3a\u9501\u5996\u5854\u662f\u63d0\u5347\u95e8\u4e2d\u5f1f\u5b50\u5b9e\u529b\u7684\u4e00\u4e2a\u597d\u5730\u65b9\uff0c\u6240\u4ee5\u6bcf\u8fc7\u767e\u5e74\u8700\u5c71\u4f1a\u5f00\u542f\u9501\u5996\u5854\u4e00\u6b21\uff0c\u9001\u4e00\u4e9b\u7cbe\u82f1\u5f1f\u5b50\u53bb\u5386\u7ec3\u3002\u4f46\u9501\u5996\u5854\u5185\u5371\u673a\u91cd\u91cd\u4e3a\u4e86\u4fdd\u969c\u8fd9\u4e9b\u5f1f\u5b50\u7684\u5b89\u5168\uff0c\u638c\u95e8\u90fd\u4f1a\u6d3e\u4e00\u4e2a\u5f1f\u5b50\u5148\u53bb\u63a2\u6d4b\u4e00\u4e0b\u5371\u9669\u5ea6\uff08\u9501\u5996\u5854\u8d8a\u5f80\u4e0b\u8d8a\u5371\u9669\uff0c\u800c\u4e14\u7531\u4e8e\u4e0d\u65ad\u6709\u65b0\u7684\u5996\u602a\u52a0\u5165\uff0c\u9501\u5996\u5854\u7684\u5371\u9669\u5ea6\u6bcf\u6b21\u5f00\u542f\u90fd\u4e0d\u4f1a\u4e00\u6837\uff09\uff0c\u5982\u679c\u5728\u5371\u9669\u5ea6\u9002\u5b9c\u7684\u5854\u5c42\u5386\u7ec3\u5f1f\u5b50\u7684\u5b89\u5168\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u4f46\u603b\u662f\u5728\u6700\u4e0a\u5c42\u5386\u7ec3\u5bf9\u4fee\u884c\u5e2e\u52a9\u662f\u4e0d\u5927\u7684\u3002\u8fd9\u6837\uff0c\u8be5\u5f1f\u5b50\u9700\u8981\u627e\u5230\u9002\u5408\u4ed6\u8bad\u7ec3\u7684\u5854\u5c42\uff0c\u7531\u4e8e\u5927\u5bb6\u5b9e\u529b\u76f8\u8fd1\uff0c\u53bb\u8be5\u5854\u5c42\u5386\u7ec3\u662f\u6700\u4e3a\u9002\u5b9c\u7684\u3002\u53ef\u662f\u7531\u4e8e\u4f20\u9001\u7b26\uff08\u9501\u5996\u5854\u5230\u5916\u754c\uff09\u6709\u9650\uff0c\u53ea\u80fd\u63d0\u4f9b\u8be5\u5f1f\u5b50\u4e24\u4e2a\u4f20\u9001\u7b26\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8be5\u5f1f\u5b50\u53ef\u4ee5\u5316\u89e3\u4e24\u6b21\u5371\u673a\u3002\u6bcf\u4e00\u4e2a\u5854\u5c42\u90fd\u6709\u4e00\u4e2a\u4f20\u9001\u9635\uff0c\u53ef\u4ee5\u5c06\u8be5\u5f1f\u5b50\u4f20\u9001\u81f3\u4efb\u610f\u5854\u5c42\uff0c\u4f46\u662f\u524d\u63d0\u662f\u8be5\u5f1f\u5b50\u63a2\u6d4b\u5b8c\u8be5\u5854\u5c42\u540e\u80fd\u591f\u5b89\u5168\u5230\u8fbe\u4f20\u9001\u9635\uff0c\u5982\u679c\u9047\u5230\u65e0\u6cd5\u62b5\u5fa1\u5371\u9669\u4ed6\u4f1a\u6beb\u4e0d\u72b9\u8c6b\u4f7f\u7528\u4f20\u9001\u7b26\u9000\u51fa\u9501\u5996\u5854\u3002<p></p><p></p>\u4f46\u662f\uff0c\u5982\u679c\u4ece\u6700\u9ad8\u5c42\u4e00\u4e00\u5f80\u4e0b\u63a2\u6d4b\u7684\u8bdd\uff0c\u662f\u5f88\u6d6a\u8d39\u65f6\u95f4\u7684\uff0c\u4e3a\u4e86\u6293\u7d27\u65f6\u95f4\uff0c\u8be5\u5f1f\u5b50\u5fc5\u987b\u91c7\u53d6\u6700\u4f18\u65b9\u6848\uff0c\u4f7f\u5f97\u63a2\u6d4b\u7684\u6b21\u6570\u6700\u5c11\u3002<p></p><p></p>\u8fd9\u53ef\u628a\u8700\u5c71\u7684\u957f\u8001\u4eec\u90fd\u96be\u4f4f\u4e86\uff0c\u4e0d\u8fc7\u5bf9\u4e8eACMer\u6765\u8bf4\u8fd9\u5f88\u7b80\u5355\u5bf9\u5427\uff0c\u90a3\u4e48\u8bf7\u7f16\u4e2a\u7a0b\u5e8f\u6765solve it \u5427\u3002<p></p>", "input_description": "\u6709\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u5165\u4e00\u4e2a\u6574\u6570N\uff081 < N < 10000\uff09\uff0c\u8868\u793a\u9501\u5996\u5854\u7684\u5854\u5c42\u6570\u3002", "output_description": "\u8f93\u51fa\u6700\u5c11\u63a2\u6d4b\u7684\u6b21\u6570\u3002", "samples": "[{\"input\": \"2\\n\", \"output\": \"2\\n\"}]", "test_case_id": "1937", "hint": "\u5854\u5185\u53ef\u80fd\u4e0d\u5b58\u5728\u5b89\u5168\u7684\u697c\u5c42\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 69, "total_accepted_number": 21, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1938, "fields": {"title": "\u9003\u751f\u65b9\u6848", "description": "\u4e00\u89c9\u9192\u6765\uff0c\u9ea6\u514b\u53d1\u73b0\u81ea\u5df1\u5728\u4e00\u4e2a\u8d70\u5eca\u91cc\uff0c\u5c31\u50cf\u5bc6\u5ba4\u9003\u8131\u7c7b\u6e38\u620f\u4e2d\u7684\u5267\u60c5\u4e00\u6837\uff0c\u4ed6\u53d1\u73b0\u8eab\u65c1\u6709\u4e00\u5c01\u4fe1\uff0c\u4fe1\u4e2d\u544a\u8bc9\u4ed6\uff0c\u9762\u524d\u7684\u8d70\u5eca\u5730\u9762\u662f\u7531N\u5757\u76f8\u540c\u957f\u65b9\u5f62\u5730\u677f\u7ec4\u6210(\u53ea\u6709\u4e00\u5217)\uff0c\u7f16\u53f7\u6309\u987a\u5e8f1~N\uff0c\u9ea6\u514b\u6bcf\u4e00\u6b65\u6700\u591a\u53ea\u80fd\u8d70\u4e09\u4e2a\u5730\u677f\uff0c\u6700\u5c11\u4e00\u4e2a\uff0c\u5f53\u9ea6\u514b\u8d70\u5230\u8d70\u5eca\u5c3d\u5934\u65f6\uff0c\u4ed6\u8d70\u8fc7\u7684\u7f16\u53f7\u4f1a\u7ec4\u5408\u6210\u4e00\u4e2a\u5bc6\u7801\uff0c\u5982\u679c\u6b63\u786e\uff0c\u8d70\u5eca\u5c3d\u5934\u7684\u95e8\u5c31\u4f1a\u6253\u5f00\uff0c\u5982\u679c\u4e0d\u6b63\u786e\u9ea6\u514b\u53ea\u80fd\u91cd\u65b0\u6362\u4e00\u79cd\u65b9\u6848\u8d70\u4e00\u904d\u3002\u73b0\u5728\u9ea6\u514b\u60f3\u77e5\u9053\u6700\u574f\u7684\u60c5\u51b5\u4ed6\u9700\u8981\u8d70\u591a\u5c11\u904d\u624d\u80fd\u51fa\u53bb\uff0c\u4eb2\u7231\u7684\u7f16\u7a0b\u7231\u597d\u8005\uff0c\u4f60\u80fd\u7f16\u4e2a\u7a0b\u5e8f\u5e2e\u5e2e\u4ed6\u4e48\uff1f", "input_description": "\u6709\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u5165\u4e00\u4e2a\u6574\u6570N\uff080 < N <= 20\uff09\uff0c\u8868\u793a\u5730\u677f\u6570\u3002", "output_description": "\u8f93\u51fa\u5982\u9898\u6240\u8ff0\u3002", "samples": "[{\"input\": \"1\\n2\\n3\\n\", \"output\": \"1\\n2\\n4\\n\"}]", "test_case_id": "1938", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 178, "total_accepted_number": 66, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1939, "fields": {"title": "\u4e07\u5723\u8282\u7684\u7cd6\u679c", "description": "\u201cTrick or treat\uff01\u201d\u3002\u4e00\u5e74\u4e00\u5ea6\u7684\u4e07\u5723\u8282\u53c8\u8981\u6765\u4e34\u4e86\uff0c\u5c0f\u670b\u53cb\u4eec\u65e9\u5df2\u51c6\u5907\u597d\u4e86\u9762\u5177\u6328\u5bb6\u6328\u6237\u53bb\u201cTrick or treat\uff01\u201d\u4e86\u3002<p></p><p></p>\u4eca\u5e74\uff0cMary\u50cf\u5f80\u5e74\u4e00\u6837\u51c6\u5907\u4e86\u8bb8\u591a\u76d2\u7cd6\u679c\u5e76\u4e14\u5305\u88c5\u597d\u4e86\uff0c\u5ffd\u7136\u95f4\uff0c\u5979\u60f3\u8d77\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u539f\u6765\u5e94\u5141\u513f\u5b50jack\u7684\u5c0f\u793c\u7269\u4e5f\u662f\u7528\u76f8\u540c\u7684\u5305\u88c5\u7eb8\u5305\u88c5\u7684\uff0c\u800c\u4e14\u7531\u4e8e\u662f\u4e00\u5757\u5305\u88c5\u7684\uff0c\u793c\u7269\u548c\u7cd6\u679c\u6df7\u5728\u4e00\u8d77\u4e86\uff0c\u5de7\u7684\u662f\u793c\u7269\u76d2\u7684\u5927\u5c0f\u548c\u7cd6\u679c\u76d2\u7684\u5927\u5c0f\u4e8b\u5dee\u4e0d\u591a\u7684\uff0c\u8fd9\u4e0b\u53ef\u6025\u574f\u4e86Mary\u4e86\u3002\u4e0d\u8fc7\u806a\u660e\u7684\u513f\u5b50jack\u60f3\u5230\u4e86\u4e00\u4e2a\u597d\u7684\u529e\u6cd5\u6765\uff0c\u7531\u4e8e\u793c\u7269\u6bd4\u7cd6\u679c\u7565\u91cd\u4e9b\uff08\u7cd6\u679c\u76d2\u90fd\u662f\u7b49\u91cd\u7684\uff09\uff0cjack\u505a\u4e86\u4e2a\u5efa\u8bae\u7684\u5929\u5e73\u6765\u6d4b\u91cf\u51fa\u793c\u7269\u76d2\u662f\u54ea\u4e2a\uff0c\u8fd9\u4e0b\u53ef\u5e2e\u4e86Mary\u4e2a\u5927\u5fd9\u3002<p></p><p></p>\u4e0d\u8fc7\u5bf9\u4e8e\u6211\u4eecACMer\u6765\u8bf4\u51e1\u4e8b\u90fd\u4f1a\u8ffd\u6c42\u6700\u4f18\uff0c\u73b0\u5728\u4f60\u80fd\u544a\u8bc9\u6211jack\u81f3\u5c11\u9700\u8981\u6d4b\u91cf\u591a\u5c11\u6b21\u5c31\u80af\u5b9a\u80fd\u591f\u627e\u5230\u793c\u7269\u3002<p></p>", "input_description": "\u6709\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u5165\u4e00\u4e2a\u6574\u6570N\uff081 < N < 1000\uff09\uff0c\u8868\u793a\u5305\u88c5\u76d2\uff08\u793c\u7269\u76d2\u548c\u7cd6\u679c\u76d2\u603b\u6570\uff09\u7684\u4e2a\u6570\u3002", "output_description": "\u8f93\u51fa\u6700\u5c11\u6d4b\u91cf\u7684\u6b21\u6570\u3002", "samples": "[{\"input\": \"2\\n3\\n4\\n\", \"output\": \"1\\n1\\n2\\n\"}]", "test_case_id": "1939", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 229, "total_accepted_number": 51, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1940, "fields": {"title": "\u5c0f\u6d77\u9f9f\u753b\u56fe", "description": "\u8bf4\u5230\u7f16\u7a0b\uff0c\u5fb7\u5fb7\u6700\u65e9\u63a5\u89e6\u7684\u7f16\u7a0b\u8bed\u8a00\u5e94\u8be5\u662fCX-LOGO\u8bed\u8a00\uff0c\u8bf4\u5230\u8be5\u8bed\u8a00\u5927\u5bb6\u6709\u53ef\u80fd\u4e0d\u592a\u6e05\u695a\u8fd9\u4e2a\u540d\u5b57\uff0c\u4f46\u662f\u4e0d\u5c11\u4eba\u5e94\u8be5\u542c\u8bf4\u751a\u81f3\u7528\u8fc7\u201c\u5c0f\u6d77\u9f9f\u753b\u56fe\u201d\uff0c\u5176\u5b9e\u8fd9\u5c31\u662f\u7528CX-LOGO\u8bed\u8a00\u6765\u753b\u56fe\u7684\u3002CX_LOGO\u8bed\u8a00\u662f\u901a\u8fc7\u7ed8\u56fe\u7684\u65b9\u5f0f\u6765\u5e2e\u52a9\u5b66\u4e60\u548c\u8ba4\u8bc6\u7f16\u7a0b\u8bed\u8a00\u7684\u3002<p></p><p></p>\u8be5\u8bed\u8a00\u4e3b\u8981\u662f\u4e00\u4e9b\u6307\u4ee4\u6765\u63a7\u5236\u201c\u5c0f\u6d77\u9f9f\u201d\u79fb\u52a8\u548c\u8f6c\u5411\uff0c\u5c0f\u6d77\u9f9f\u5728\u79fb\u52a8\u7684\u65f6\u5019\u53ef\u4ee5\u7559\u4e0b\u4e00\u4e9b\u75d5\u8ff9\uff0c\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\u7ed8\u753b\u51fa\u4e00\u4e9b\u56fe\u5f62\u3002\u8bb0\u5f97\u5f53\u65f6\uff0c\u5fb7\u5fb7\u73ed\u4e0a\u6709\u597d\u591a\u6709\u624d\u7684\u540c\u5b66\u753b\u51fa\u5404\u79cd\u5404\u6837\u7684\u56fe\u5f62\u50cf\u4ec0\u4e48\u6c7d\u8f66\uff0c\u624b\u67aa\u7b49\u7b49\u3002<p></p><p></p>\u73b0\u5728\u5fb7\u5fb7become ACMer\u4e86\uff0c\u633a\u6000\u5ff5\u7b2c\u4e00\u4e2a\u5b66\u4e60\u7684\u7f16\u7a0b\u8bed\u8a00\u7684\uff0c\u5076\u7136\u7684\u4e00\u4e2a\u673a\u4f1a\u548c\u670b\u53cb\u4eec\u8c08\u8bba\u8d77\u201c\u5c0f\u6d77\u9f9f\u753b\u56fe\u201d\u65f6\uff0c\u63d0\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u5df2\u77e5\u201c\u5c0f\u6d77\u9f9f\u201d\u7684\u8d77\u59cb\u5750\u6807\u548c\u671d\u5411\uff0c\u8f93\u5165\u4e00\u4e32\u6307\u4ee4\uff0c\u8f93\u51fa\u201c\u5c0f\u6d77\u9f9f\u201d\u7684\u6700\u7ec8\u5750\u6807\u548c\u671d\u5411\u3002<p></p>", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6570T\uff0cT<50,\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\u3002\n\u63a5\u4e0b\u6765\u6bcf\u7ec4\u6570\u636e\u5305\u62ec\u4e24\u884c\uff1a\n\u7b2c\u4e00\u884c\u5305\u542bX,Y,ord\u3002\u5176\u4e2dx,y\u8868\u793a\u201c\u5c0f\u6d77\u9f9f\u201d\u7684\u5750\u6807\uff081 < x, y < 1000\uff09\uff0cord\u8868\u793a\u201c\u5c0f\u6d77\u9f9f\u201d\u65b9\u5411\uff08ord\u7528\u5b57\u7b26\u2019N\u2019,\u2019E\u2019,\u2019S\u2019,\u2019W\u2019\uff09\u3002\n\u7b2c\u4e8c\u884c\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32Order\uff0c\u5176\u4e2d\u2019L\u2019\u8868\u793a\u5de6\u8f6c\uff0c\u2019R\u2019\u8868\u793a\u53f3\u8f6c\uff0c\u2019M\u2019\u524d\u8fdb\u4e00\u6b65\u3002Order\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc71000\u3002\n", "output_description": "\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u884c\uff0c\u5305\u62ecX1,Y1,ord1\uff0c\u8868\u793a\u5c0f\u6d77\u9f9f\u7684\u6700\u7ec8\u4f4d\u7f6e\u548c\u65b9\u5411\u3002", "samples": "[{\"input\": \"5\\n9 9 W\\nMMMLL\\n8 6 S\\nLMLLM\\n4 1 W\\nRMMML\\n3 4 W\\nMLLMM\\n7 1 S\\nMLLML\\n\", \"output\": \"6 9 E\\n8 6 W\\n4 4 W\\n4 4 E\\n7 1 W\\n\"}]", "test_case_id": "1940", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 130, "total_accepted_number": 67, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1941, "fields": {"title": "\u821e\u4f1a", "description": "\u4e00\u7fa4\u4eba\u5f00\u821e\u4f1a\uff0c\u6bcf\u4eba\u5934\u4e0a\u90fd\u6234\u7740\u4e00\u9876\u5e3d\u5b50\u3002\u5e3d\u5b50\u53ea\u6709\u9ed1\u767d\u4e24\u79cd\uff0c\u9ed1\u7684\u81f3\u5c11\u6709\u4e00\u9876\u3002\u6bcf\u4e2a\u4eba\u90fd\u80fd\u770b\u5230\u5176\u5b83\u4eba\u5e3d\u5b50\u7684\u989c\u8272\uff0c\u5374\u770b\u4e0d\u5230\u81ea\u5df1\u7684\u3002\u4e3b\u6301\u4eba\u5148\u8ba9\u5927\u5bb6\u770b\u770b\u522b\u4eba\u5934\u4e0a\u6234\u7684\u662f\u4ec0\u5e7a\u5e3d\u5b50\uff0c\u7136\u540e\u5173\u706f\uff0c\u5982\u679c\u6709\u4eba\u8ba4\u4e3a\u81ea\u5df1\u6234\u7684\u662f\u9ed1\u5e3d\u5b50\uff0c\u5c31\u6253\u81ea\u5df1\u4e00\u4e2a\u8033\u5149\u3002\u5df2\u77e5\u6709n\u4e2a\u4eba\u5e26\u9ed1\u5e3d\u5b50\uff0cm\u4e2a\u4eba\u5e26\u767d\u5e3d\u5b50\uff0c\u8bf7\u95ee\u7b2c\u51e0\u6b21\u5173\u706f\uff0c\u624d\u4f1a\u6709\u5288\u5288\u556a\u556a\u6253\u8033\u5149\u7684\u58f0\u97f3\u54cd\u8d77\u3002", "input_description": "\u7b2c\u4e00\u884c\u6570\u5b57N\uff0c\u8868\u793a\u6709N\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\u63a5\u4e0b\u6765N\u884c\u4e2d\uff0c\u6bcf\u4e00\u884c\u6709\u6570\u5b57n\uff0cm(1 < n, m < 1000)\uff0c\u8868\u793a\u5e26\u9ed1\u5e3d\u5b50\u7684\u4eba\u6570\u548c\u767d\u5e3d\u5b50\u7684\u4eba\u6570\u3002\n", "output_description": "\u7b2c\u51e0\u6b21\u5173\u706f\uff0c\u624d\u4f1a\u6709\u5288\u5288\u556a\u556a\u6253\u8033\u5149\u7684\u58f0\u97f3\u54cd\u8d77\u3002", "samples": "[{\"input\": \"1\\n1 1\\n\", \"output\": \"1\\n\"}]", "test_case_id": "1941", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 186, "total_accepted_number": 92, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1942, "fields": {"title": "\u53cc\u8d25\u6dd8\u6c70\u8d5b", "description": "\u53cc\u8d25\u6dd8\u6c70\u8d5b\u4e0e\u6dd8\u6c70\u8d5b\u76f8\u4eff\uff0c\u4e5f\u662f\u8d1f\u8005\u51fa\u5c40\uff0c\u4f46\u662f\u8d1f\u4e00\u573a\u5e76\u672a\u88ab\u6dd8\u6c70\uff0c\u53ea\u662f\u8dcc\u5165\u8d1f\u8005\u7ec4\uff0c\u5728\u8d1f\u8005\u7ec4\u518d\u8d1f\u8005\uff08\u5373\u603b\u5171\u5df2\u8d1f\u4e24\u573a\uff09\u624d\u88ab\u6dd8\u6c70\u3002\u73b0\u5728\u6709N\u4e2a\u4eba\u53c2\u52a0\u53cc\u8d25\u6dd8\u6c70\u8d5b\uff0c\u5047\u8bbe\u6211\u4eec\u53d6\u6d88\u6700\u540e\u7684\u80dc\u8005\u7ec4\u51a0\u519bVS\u8d1f\u8005\u7ec4\u51a0\u519b\u7684\u6bd4\u8d5b\uff0c\u90a3\u4e48\u4e00\u5171\u9700\u8981\u4e3e\u884c\u591a\u5c11\u573a\u6bd4\u8d5b\uff1f<p></p>", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u4e00\u4e2aN\u503c\uff08\u5047\u5b9aN\u662f\u5927\u4e8e2\u7684\u5076\u6570\uff0c\u4e14\u4e0d\u8d85\u8fc71000\uff09\u3002", "output_description": "\u8f93\u51fa\u603b\u5171\u8981\u4e3e\u884c\u7684\u6bd4\u8d5b\u573a\u6570\u3002\uff08\u6ce8\u610f\uff0c\u53ef\u80fd\u5b58\u5728\u8f6e\u7a7a\uff09", "samples": "[{\"input\": \"4\\n\", \"output\": \"5\\n\"}]", "test_case_id": "1942", "hint": "\u5bf9\u4e8e\u6837\u4f8b\uff1a\u4e0d\u59a8\u5047\u8bbe\u5206\u522b\u4e3aA\uff0cB\uff0cC\u548cD\uff0c\u9996\u5148\u6709\u4e24\u573a\uff0c\u5373A\u4e0eB\uff0c\u4ee5\u53caC\u4e0eD\uff1b\u5047\u8bbeA\u548cC\u80dc\u5229\uff1b\u90a3\u4e48\uff0c\u63a5\u4e0b\u6765\u662f\uff0cA\u548cC\uff0c\u4ee5\u53caB\u4e0eD\uff0c\u53c8\u5047\u8bbeA\u548cB\u80dc\u5229\uff0c\u6b64\u65f6\uff0cD\u88ab\u6dd8\u6c70\uff0cC\u8dcc\u5165\u8d25\u8005\u7ec4\uff1b\u7136\u540e\uff0c\u6700\u540e\u4e00\u573a\u5c31\u662fC\u548cB\u518d\u6bd4\u4e00\u573a\uff0c\u5373\u603b\u51715\u573a\u6bd4\u8d5b\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 117, "total_accepted_number": 46, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1944, "fields": {"title": "\u5e2e\u6d3e", "description": "\u6709n\u4e2a\u4eba(0 &lt; n &lt;= 100)\uff0c\u7f16\u53f7\u4ece1~n\uff0c\u4e00\u5f00\u59cb\u6bcf\u4eba\u5404\u81ea\u4e00\u6d3e\uff0c\u73b0\u5728\u7ed9\u51fa m\u4e2a\u4fe1\u606f(m &lt;= n)\uff0c<p></p>\u6bcf\u4e2a\u4fe1\u606f\u5305\u542b\u4e24\u4e2a\u6570\u5b57 a \u548c b\uff080 &lt; a, b &lt;= n\uff09\uff0c\u8868\u793a\u7f16\u53f7\u4e3a a \u7684\u4eba\u6240\u5728\u7684\u5e2e\u6d3e\u548c\u7f16\u53f7\u4e3a b \u7684<p></p>\u4eba\u6240\u5728\u7684\u5e2e\u6d3e\u5408\u5e76\u4e86\uff0c\u5982\u679c\u4e24\u8005\u672c\u6765\u5c31\u662f\u540c\u4e00\u5e2e\u6d3e\uff0c\u5c31\u4e0d\u505a\u5904\u7406\u3002\u95ee\u6700\u540e\u6709\u591a\u5c11\u4e2a\u5e2e\u6d3e\u3002<p></p>", "input_description": "N\uff0c\u8868\u793aN\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\u63a5\u4e0b\u6765\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e2d\uff0c\u7b2c\u4e00\u884cn\uff0c\u8868\u793a\u4e00\u5171\u6709n\u4e2a\u4eba\u3002\u7136\u540e\u4e00\u884c\u662f\u6570\u5b57m\uff0c\u8868\u793am\u4e2a\u4fe1\u606f\uff0c\u63a5\u4e0b\u6765m\u884c\u4e2d\uff0c\u6bcf\u884c\u4e24\u4e2a\u6570\u5b57a\u548cb\uff0c\u610f\u4e49\u89c1\u63cf\u8ff0\u3002", "output_description": "\u7ecf\u8fc7n\u6b21\u5e2e\u6d3e\u5408\u5e76\u540e\uff0c\u8fd8\u6709\u591a\u5c11\u4e2a\u5e2e\u6d3e\u3002", "samples": "[{\"input\": \"2\\n5\\n2\\n1 2\\n3 4\\n5\\n2\\n1 2\\n1 2\\n\", \"output\": \"3\\n4\\n\"}]", "test_case_id": "1944", "hint": "\u7b2c\u4e00\u7ec4\u6570\u636e\u4e2d\uff1a1\u548c2\u4e3a\u4e00\u4e2a\u5e2e\u6d3e\uff0c3\u548c4\u4e3a\u4e00\u4e2a\u5e2e\u6d3e\uff0c5\u4e00\u4e2a\u5e2e\u6d3e\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 355, "total_accepted_number": 93, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1945, "fields": {"title": "\u7a7f\u8d8a\u706b\u7ebf", "description": "\u8bf7\u4eceA\u9898\u4e0b\u8f7d\u8bd5\u9898\uff0c\u5e76\u67e5\u770b\u5bf9\u5e94\u9898\u76ee\u63cf\u8ff0\u3002", "input_description": "\u8f93\u5165\u5305\u542b20\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\u6bcf\u7ec4\u6570\u636e\u4e2d\uff0c\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570N\uff0cM\u3002N\uff080 < N < 10^5\uff09\u8868\u793a\u57ce\u5e02\u6570\uff0cM\uff080 < M < 10^5\uff09\u8868\u793a\u64cd\u4f5c\u547d\u4ee4\u6570\u3002\u63a5\u4e0b\u6765\u4e00\u884c\u5305\u542bN\u4e2a\u6574\u6570c[i]\uff080 < c[i] < 10^9\uff09\uff0c\u8868\u793a\u6bcf\u4e2a\u57ce\u5e02\u9a7b\u5b88\u7684\u90e8\u961f\u7f16\u53f7\u3002\u63a5\u4e0b\u6765N-1\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570x\uff0cy\uff0c\u8868\u793a\u56fe\u4e0a\u7684x\uff0cy\u4e4b\u95f4\u6709\u4e00\u6761\u65e0\u5411\u8fb9\u3002\u4e4b\u540e\u5305\u542bM\u884c\uff0c\u547d\u4ee4\u6709\u4e24\u79cd\uff1a\nC a b c \u8868\u793aa\u5230b\u4e4b\u95f4\u6240\u6709\u7684\u57ce\u5e02\u4ea4\u7531c\u90e8\u961f\u9a7b\u5b88\u3002\nQ a b  \u8868\u793a\u8be2\u95ee\u82e5\u8c0d\u62a5\u4eba\u5458\u4ecea\u5230b\u57ce\u5e02\uff0c\u9700\u8981\u7a7f\u8fc7\u591a\u5c11\u9053\u5c01\u9501\u7ebf\u3002\n", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8be2\u95ee\uff0c\u8f93\u51fa\u4e00\u884c\uff0c\u4ec5\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7a7f\u8d8a\u7684\u5c01\u9501\u7ebf\u6570\u3002", "samples": "[{\"input\": \"6 5\\n2 2 1 2 1 1\\n1 2\\n1 3\\n2 4\\n2 5\\n2 6\\nQ 3 5\\nC 2 1 1\\nQ 3 5\\nC 5 1 2\\nQ 3 5\\n\", \"output\": \"2\\n0\\n1\\n\"}]", "test_case_id": "1945", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 10000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 7, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1946, "fields": {"title": "\u5361\u724c\u7684\u8bb0\u5fc6\u529b", "description": "\u8bf7\u4eceA\u9898\u4e0b\u8f7d\u8bd5\u9898\uff0c\u5e76\u67e5\u770b\u5bf9\u5e94\u9898\u76ee\u63cf\u8ff0\u3002", "input_description": "\u7b2c\u4e00\u884c\u662f\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570T(T <= 10)\uff0c\u63a5\u4e0b\u6765\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u662f\u5361\u724c\u7684\u5361\u76d2\u6570N\uff0c\u968f\u540eN\u884c\uff0c\u6bcf\u884c\u5f00\u59cb\u4e00\u4e2a\u6574\u6570\u8868\u793a\u8be5\u5361\u76d2\u91cc\u7684\u6251\u514b\u6570\u91cf\uff0c\u7136\u540e\u662fn\u5f20\u6251\u514b\uff0c\u6251\u514b\u603b\u662f\u4ee5\"\u9762\u503c+\u82b1\u8272\"\u7684\u5f62\u5f0f\u51fa\u73b0\u3002\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u4fdd\u8bc1\u603b\u7684\u6251\u514b\u6570\u91cf\u4e0d\u8d85\u8fc7100000\u3002", "output_description": "\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5148\u8f93\u51fa\u7ec4\u53f7\"Case #k:\"\uff08k\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u53f7\uff0c\u4ece1\u5f00\u59cb\uff09\uff0c\u7136\u540e\u540c\u884c\u4e00\u4e2a\u7a7a\u683c\uff0c\u5e76\u8f93\u51fa\u5361\u724c\u9700\u8981\u8bb0\u4f4f\u7684\u6251\u514b\u6570\u91cf\u3002", "samples": "[{\"input\": \"2\\n3\\n3 5S AH 7D\\n4 5S 4D 3D 9C\\n2 5S AH\\n4\\n5 9D 5D JC KD 4H\\n10 9D 5D JC KD 8S QH 8S KC 2C 5H\\n2 3D 4S\\n9 9D 5D JC 5D 4H 8S QH KC 2C\\n\", \"output\": \"Case #1: 6\\nCase #2: 19\\n\"}]", "test_case_id": "1946", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 35, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1947, "fields": {"title": "\u94fa\u5730\u677f", "description": "\u8bf7\u4eceA\u9898\u4e0b\u8f7d\u8bd5\u9898\uff0c\u5e76\u67e5\u770b\u5bf9\u5e94\u9898\u76ee\u63cf\u8ff0\u3002", "input_description": "\u6709\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u5165\u4e24\u4e2a\u6574\u6570w\uff0cl\uff080 < w\uff0cl < 12\uff09\uff0c\u8868\u793a\u5c4b\u5b50\u7684\u957f\u548c\u5bbd\u3002\u6700\u540e\u4ee5\u8f93\u51650 0\u7ed3\u675f\u3002", "output_description": "\u94fa\u5730\u677f\u7684\u65b9\u6cd5\u5c11\u6709\u591a\u5c11\u79cd\u3002", "samples": "[{\"input\": \"1 2\\n1 3\\n1 4\\n2 2\\n0 0\\n\", \"output\": \"1\\n0\\n1\\n2\\n\"}]", "test_case_id": "1947", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 28, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1948, "fields": {"title": "\u76f8\u9047", "description": "\u8bf7\u4eceA\u9898\u4e0b\u8f7d\u8bd5\u9898\uff0c\u5e76\u67e5\u770b\u5bf9\u5e94\u9898\u76ee\u63cf\u8ff0\u3002", "input_description": "\u8fd9\u513f\u6709T\u79cd\u60c5\u51b5\uff080 < T <= 1000\uff09\uff0c\u8868\u793aT\u79cd\u4eba\uff0c\u63a5\u4e0b\u6765\u7684T\u884c\u6bcf\u884c\u8868\u793a\u8be5\u4eba\u7684\u4f18\u70b9\u6570 n\uff081 <= n <= 10^9\uff09\u3002", "output_description": "\u7b26\u5408\u6761\u4ef6\u7684k\u7684\u4e2a\u6570\uff0ck\u7684\u503c\u8981\u6c42\u5927\u4e8e\u7b49\u4e8e0\u3002", "samples": "[{\"input\": \"2\\n2\\n3\\n\", \"output\": \"2\\n4\\n\"}]", "test_case_id": "1948", "hint": "n=2\u65f6\uff0cn&0==0\uff1bn&2==2\uff1b\u5176\u4ed6\u90fd\u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u6545\u7b54\u6848\u4e3a2\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 173, "total_accepted_number": 60, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1949, "fields": {"title": "\u4e2d\u4f4d\u6570", "description": "\u8bf7\u4eceA\u9898\u4e0b\u8f7d\u8bd5\u9898\uff0c\u5e76\u67e5\u770b\u5bf9\u5e94\u9898\u76ee\u63cf\u8ff0\u3002", "input_description": "\u7b2c\u4e00\u884c\u662fN\uff0c\u8868\u793aN\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\u63a5\u4e0b\u6765\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e2d\uff0c\u7b2c\u4e00\u884c\u662fn\uff0cm\uff080 < n\uff0cm <= 1000000)\uff0c\u8868\u793a\u4e24\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u7b2c\u4e8c\u884c\u662fn\u4e2a\u6570\uff0c\u8868\u793a\u7b2c\u4e00\u4e2a\u5e8f\u5217\u7684n\u4e2a\u6570\u3002\u7b2c\u4e09\u884c\u662fn\u4e2a\u6570\uff0c\u8868\u793a\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u7684m\u4e2a\u6570\u3002\uff08\u8fd9\u4e9b\u6570\u5747\u4e3a\u503c\u4e0d\u8d85\u8fc710^8\u7684\u6574\u6570\uff09", "output_description": "\u4e24\u4e2a\u5e8f\u5217\u5408\u5e76\u4e4b\u540e\uff0c\u65b0\u5e8f\u5217\u7684\u4e2d\u4f4d\u6570\u3002", "samples": "[{\"input\": \"2\\n4 5\\n11 12 13 14\\n9 10 15 16 17\\n1 1\\n1\\n2\\n\", \"output\": \"13\\n1\\n\"}]", "test_case_id": "1949", "hint": "\u5408\u5e76\u4e4b\u540e\u5e8f\u5217\u4e3a\uff1a 9 10 11 12 13 14 15 16 17 \u4e2d\u4f4d\u6570\u4e3a13\u3002\\n\u4e2d\u4f4d\u6570\u7684\u5b9a\u4e49\uff1a\u5bf9\u957f\u5ea6\u4e3an\u7684\u7cfb\u5217\u6570\u636e\uff0c\u6839\u636e\u6570\u636e\u5927\u5c0f\u6392\u5217\u5f97\u5230\u7684\u4f4d\u4e8e[(n+1)/2]\u4f4d\u7f6e\u4e0a\u7684\u6570\u636e\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 326, "total_accepted_number": 49, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1951, "fields": {"title": "A/B", "description": "\u8bf7\u4eceA\u9898\u4e0b\u8f7d\u8bd5\u9898\uff0c\u5e76\u67e5\u770b\u5bf9\u5e94\u9898\u76ee\u63cf\u8ff0\u3002", "input_description": "\u8f93\u5165\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u542b3\u4e2a\u6574\u6570\uff1aA\uff0cB\u548cC\uff0c\u5176\u4e2d\u4fdd\u8bc1B\u4e0d\u4e3a0\uff0cA\u548cB\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71000\uff0c\u800c\u4e14C\u7684\u503c\u975e\u8d1f\uff0c\u4e14\u503c\u4e0d\u8d85\u8fc7100\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u7b54\u6848\u3002", "samples": "[{\"input\": \"1 2 0\\n1 2 1\\n999 -1000 0\", \"output\": \"1\\n0.5\\n-1\\n\"}]", "test_case_id": "1951", "hint": "\u5982\u679c\u5f97\u5230\u5f88\u591a\u6b21Wrong Answer\uff0c\u53ef\u80fd\u771f\u7684\u9700\u8981\u4ed4\u7ec6\u60f3\u60f3\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 208, "total_accepted_number": 14, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1952, "fields": {"title": "C\u8bed\u8a00\u5b9e\u9a8c\u2015\u2015\u6709\u5e8f\u63d2\u5165", "description": "\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u7684\u6570\u7ec4\uff0c\u800c\u4e14\u8fd9\u4e2a\u6570\u7ec4\u5df2\u7ecf\u6392\u597d\u5e8f(\u5347\u5e8f\u65b9\u5f0f)\u3002\u73b0\u5728\uff0c\u8981\u6c42\u8f93\u5165\u4e00\u4e2a\u6570\u540e\uff0c\u6309\u539f\u6765\u6392\u5e8f\u7684\u987a\u5e8f\u5c06\u5b83\u63d2\u5165\u5230\u6570\u7ec4\u4e2d\u3002", "input_description": "\u53ea\u6709\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff1b\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570N\uff08\u4e0d\u8d85\u8fc710\uff09\uff0c\u8868\u793a\u539f\u59cb\u6570\u7ec4\u7684\u957f\u5ea6\uff1b\n\u63a5\u4e0b\u6765\u7684\u4e00\u884c\uff0c\u5305\u542bN\u4e2a\u6574\u6570\uff1b\u7136\u540e\uff0c\u63a5\u4e0b\u6765\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570X\uff0c\u8868\u793a\u8981\u63d2\u5165\u7684\u6570\u3002", "output_description": "\u8f93\u51fa\u63d2\u5165\u65b0\u6570\u540e\u7684\u6570\u7ec4\u3002", "samples": "[{\"input\": \"5\\n1 2 3 5 6\\n4\\n\", \"output\": \"1 2 3 4 5 6\\n\"}]", "test_case_id": "1952", "hint": "\u65e0\u8bba\u662f\u7ed9\u5b9a\u7684\u6570\u7ec4\u8fd8\u662f\u6700\u7ec8\u7ed3\u679c\u53c8\u662f\u5347\u5e8f\u7684", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 306, "total_accepted_number": 74, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1953, "fields": {"title": "C\u8bed\u8a00\u5b9e\u9a8c\u2015\u2015\u6768\u8f89\u4e09\u89d2", "description": "\u7ed9\u5b9a\u7279\u5b9a\u7684\u6b63\u6574\u6570N\uff08\u4e0d\u8d85\u8fc710\uff09\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u6768\u8f89\u4e09\u89d2\u5f62\uff0c\u8bd5\u4ece\u6837\u4f8b\u5206\u6790\u5bf9\u5e94\u7684\u5173\u7cfb\u3002", "input_description": "\u7b2c\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570T\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\uff08\u4e0d\u8d85\u8fc710\uff09\uff1b\n\u63a5\u4e0b\u6765\u7684T\u884c\uff0c\u6bcf\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570N\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u6768\u8f89\u4e09\u89d2\u5f62\u3002", "samples": "[{\"input\": \"3\\n1\\n3\\n5\\n\", \"output\": \"1\\n1 1\\n1\\n1 1\\n1 2 1\\n1 3 3 1\\n1\\n1  1\\n1  2  1\\n1  3  3  1\\n1  4  6  4  1\\n1  5 10 10  5  1\\n\"}]", "test_case_id": "1953", "hint": "\u8bf7\u4e25\u683c\u6ce8\u610f\u683c\u5f0f\uff0c\u5982\u6bcf\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u540e\u9762\u6ca1\u6709\u7a7a\u683c\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 317, "total_accepted_number": 57, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1954, "fields": {"title": "C\u8bed\u8a00\u5b9e\u9a8c\u2015\u2015\u5bf9\u89d2\u7ebf\u6c42\u548c", "description": "\u7ed9\u5b9a\u4e00\u4e2a\u6574\u578b\u76843*3\u7684\u77e9\u9635\uff0c\u8bd5\u5206\u522b\u8ba1\u7b97\u4e3b\u5bf9\u89d2\u7ebf\u548c\u526f\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e4b\u548c\u3002<p></p>", "input_description": "\u8f93\u5165\u4ec5\u5305\u542b\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u53733*3\u7684\u6574\u578b\u77e9\u9635\u3002", "output_description": "\u5206\u522b\u8f93\u51fa\u4e3b\u5bf9\u89d2\u7ebf\u548c\u526f\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e4b\u548c\u3002", "samples": "[{\"input\": \"1 2 3\\n4 5 6\\n7 8 9\\n\", \"output\": \"15 15\\n\"}]", "test_case_id": "1954", "hint": "\u4e3b\u5bf9\u89d2\u7ebf\uff1a1+5+9=15\uff1b\\n\u526f\u5bf9\u89d2\u7ebf\uff1a3+5+7=15", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 554, "total_accepted_number": 184, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1955, "fields": {"title": "\u6700\u5927\u77e9\u9635\u548c", "description": "\u7ed9\u4f60\u4e00\u4e2aN*M\u7684\u77e9\u9635\uff0cN\u884cM\u5217\u3002\u4f60\u7684\u4efb\u52a1\u662f\u627e\u51fa\u8fd9\u4e2a\u77e9\u9635\u7684\u4e00\u4e2a\u5b50\u77e9\u9635\u6ee1\u8db3\uff1a\u8be5\u5b50\u77e9\u9635\u91cc\u7684\u6bcf\u4e2a\u503c\u76f8\u52a0\u5176\u548c\u6700\u5927\u3002<p></p>\u6bd4\u5982\u8bf4\u7ed9\u4f60\u4e00\u4e2a4*4\u7684\u77e9\u9635\u5982\u4e0b:<p></p>0 -2 -7 0<p></p>9 2 -6 2<p></p>-4 1 -4 1<p></p>-1 8 0 -2 <p></p>\u5219\u4f60\u6240\u5f97\u7684\u77e9\u9635\u5e94\u8be5\u662f\uff1a<p></p>9 2<p></p>-4 1<p></p>-1 8 <p></p>\u5176\u548c\u4e3a15.", "input_description": "\u591a\u7ec4\u6570\u636e\uff08\u4e0d\u8d85\u8fc710\u7ec4\uff09\uff0c\n\u6bcf\u7ec4\u5f00\u59cb\u4e24\u6574\u6570N, M(1<=N,M<=100)\uff0c\n\u7136\u540eN\u884c\uff0c\u6bcf\u884cM\u4e2a\u6574\u6570\uff0c\u8be5\u6574\u6570\u7684\u53d6\u503c\u8303\u56f4\u662f[-127, 127]\u3002\n\n", "output_description": "\u8f93\u51fa\u4f60\u5f97\u5230\u7684\u6700\u5927\u548c\u3002\u6bcf\u7ec4\u4e00\u884c\u3002", "samples": "[{\"input\": \"4 4\\n0 -2 -7 0\\n9 2 -6 2\\n-4 1 -4 1\\n-1 8 0 -2\\n\", \"output\": \"15\\n\"}]", "test_case_id": "1955", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 68, "total_accepted_number": 16, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1956, "fields": {"title": "Easy Count", "description": "\u5982\u4e0b\u5b9a\u4e49\uff1a<p></p>a - 1<p></p>b - 2<p></p>c - 3<p></p>...<p></p>z - 26<p></p>ab - 27<p></p>ac - 28<p></p>...<p></p>az - 51<p></p>bc - 52<p></p>...<p></p>vwxyz - 83681<p></p>...<p></p>\u5b57\u6bcd\u987a\u5e8f\u662f\u5347\u5e8f<p></p>\u6309\u4ee5\u4e0a\u65b9\u5f0f\uff0c\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ec5\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\uff08\u6bcf\u4e2a\u5b57\u6bcd\u6700\u591a\u51fa\u73b0\u4e00\u6b21\uff09\uff0c\u957f\u5ea6\u5927\u4e8e0\u4e0d\u8d85\u8fc710\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u6c42\u51fa\u5b83\u5bf9\u5e94\u7684\u5e8f\u53f7\u3002<p></p><p></p>", "input_description": "\u591a\u7ec4\u8f93\u5165\uff0c\u6bcf\u7ec4\u4e00\u884c\u5b57\u7b26\u4e32\uff0c\u4ec5\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\uff08\u6bcf\u4e2a\u5b57\u6bcd\u6700\u591a\u51fa\u73b0\u4e00\u6b21\uff09\uff0c\u957f\u5ea6\u5927\u4e8e0\u4e0d\u8d85\u8fc710\u3002", "output_description": "\u6bcf\u7ec4\u8f93\u5165\uff0c\u8f93\u51fa\u5bf9\u5e94\u5e8f\u53f7\u3002", "samples": "[{\"input\": \"bf\\n\", \"output\": \"55\\n\"}]", "test_case_id": "1956", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 17, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1957, "fields": {"title": "Easy String", "description": "\u4ee5\u4e0b\u5b9a\u4e49\u4e00\u79cd\u5b57\u7b26\u4e32\uff0c\u5c31\u53eb\u5b83Easy String\u5427\u3002<p></p>1\uff1a\u7a7a\u4e32\u662f\u4e00\u4e2aEasy String\u3002<p></p>2\uff1a\u5982\u679cs\u662f\u4e00\u4e2aEasy String\uff0cc\u662f\u4e00\u4e2a\u5b57\u7b26\uff0c\u5219r=c+s+c\u4e5f\u662fEasy String\u3002<p></p>3\uff1a\u5982\u679cs\u548cr\u90fd\u662fEasy String\uff0c\u5219t=s+r\u4e5f\u662fEasy String\u3002<p></p>\u73b0\u5728\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u4e0d\u662fEasy String\u3002<p></p>", "input_description": "\u591a\u7ec4\u8f93\u5165\uff08\u4e0d\u8d85\u8fc7100\u7ec4\uff09\uff0c\u6bcf\u7ec4\u4e00\u884c\u5b57\u7b26\u4e32\uff08\u957f\u5ea6\u5927\u4e8e0\u4f46\u4e0d\u8d85\u8fc7100\uff0c\u5b57\u7b26\u53ea\u5305\u62ec\u5927\u5c0f\u5199\u5b57\u6bcd\uff09\u3002\n", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u8f93\u5165\uff0c\u5982\u679c\u662fEasy String\uff0c\u8f93\u51faYes\uff0c\u5426\u5219\uff0c\u8f93\u51faNo\u3002\n", "samples": "[{\"input\": \"aa\\naBBa\\naabb\\nabcd\\n\", \"output\": \"Yes\\nYes\\nYes\\nNo\\n\"}]", "test_case_id": "1957", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 83, "total_accepted_number": 15, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1962, "fields": {"title": "A+B", "description": "\u8ba1\u7b97A+B\u3002<p></p>", "input_description": "\u8f93\u5165\u53ea\u6709\u4e00\u7ec4\u6570\u636e\uff0c\u6570\u636e\u5305\u542b5\u884c\uff0c\u6709\u4e24\u4e2a\u6570a,b\uff080 <= a,b <= 100000)\uff0c\u7528\u7a7a\u683c\u9694\u5f00\u3002\u66f4\u591a\u89e3\u91ca\u8bf7\u770b\u63d0\u793a\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51faa+b\u7684\u7ed3\u679c\u3002\u66f4\u591a\u89e3\u91ca\u8bf7\u770b\u63d0\u793a\u3002", "samples": "[{\"input\": \"<code>\\n+-+ +-+ +-+ +-+ +-+     +-+ +-+ +-+ +-+\\n  | | | |     | | |       | |     |   |\\n+-+ + + +-+   + +-+       + +-+   +   +\\n  | | |   |   |   |       |   |   |   |\\n+-+ +-+ +-+   + +-+       + +-+   +   +\\n</code>\\n\\n\", \"output\": \"<code>\\n+-+ +-+   + +-+ +-+\\n  | | |   | |   |  \\n+-+ +-+   + +-+ +-+\\n  | | |   |   | | |\\n+-+ +-+   + +-+ +-+\\n</code>\\n\"}]", "test_case_id": "1962", "hint": "\\n\u5bf9\u6837\u4f8b\u8f93\u5165\u7684\u89e3\u91ca\uff1a\\n<img src=\"uploadFiles/1962_1.png\" />\\n\u8868\u793a\u7684\u6570\u636e\u662f30579 7577\\n\u5bf9\u6837\u4f8b\u8f93\u51fa\u7684\u89e3\u91ca\uff1a\\n<img src=\"uploadFiles/1962_2.png\" />\\n\u8868\u793a\u7684\u6570\u636e\u662f38156\u3002\\n\u6ce8\u610f\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c0~9\u5206\u522b\u662f\u4e0b\u9762\u8fd9\u6837\u8868\u793a\u7684\uff1a\\n<img src=\"uploadFiles/1962_3.JPG\" />\\n\u8bf7\u4e25\u683c\u6309\u7167\u7ed9\u5b9a\u7684\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\uff0c\u5426\u5219\u5c06\u5bfc\u81f4Presentation Error\u3002\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 171, "total_accepted_number": 37, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1964, "fields": {"title": "\u4e2d\u4f4d\u6570", "description": "\u73b0\u6709\u5927\u5c0f\u4e3aN\u7684\u6570\u7ec4(\u5373\u6570\u7ec4\u4e2d\u6709N\u4e2a\u6570),\u6709\u5982\u4e0b\u6027\u8d28:<p></p>A[0]=seed,A[i]=(A[i-1]*mul+add) % 65536 (1 &lt;= i &lt; N)<p></p>\uff08\u6ce8\u610f\uff0c\u8fd9\u91cc\u6570\u7ec4\u7684\u4e0b\u89d2\u6807\u4ece0\u5f00\u59cb\u8ba1\u7b97\uff09<p></p><p></p>\u5047\u8bbe\u6211\u4eec\u8981\u53d6\u5927\u5c0f\u4e3aK\u7684\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u90a3\u4e48\u5f88\u663e\u7136\uff0c\u5171\u6709N-K+1\u6bb5\u957f\u5ea6\u4e3aK\u7684\u5b50\u5e8f\u5217\u30023A\u60f3\u77e5\u9053\u8fd9N-K+1\u6bb5\u5b50\u5e8f\u5217\u91cc\uff0c\u6240\u6709\u5b50\u5e8f\u5217\u7684\u4e2d\u4f4d\u6570\u4e4b\u548c\u662f\u591a\u5c11\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u6bb5\u91cc\u9762\u5927\u5c0f\u6392\u5728\u7b2c(K+1)/2\u7684\u6570\u4e4b\u548c\u662f\u591a\u5c11\u3002<p></p>", "input_description": "\u8f93\u5165\u53ea\u6709\u4e00\u7ec4\u6570\u636e\uff1b\u5305\u542b5\u4e2a\u6574\u6570\uff0c\u5206\u522b\u4e3aseed\uff0cmul\uff0cadd\uff0cN,K\u3002\n\u5176\u4e2d seed, mul, add\u7684\u5927\u5c0f\u90fd\u57280\u523065535\u4e4b\u95f4\uff08\u5305\u62ec0\u548c65535\uff09\uff0c0 < N <= 250000, 0< K <= 5000, K <= N\u3002\n", "output_description": "\u8f93\u51fa\u7b54\u6848\u5373\u53ef\u3002", "samples": "[{\"input\": \"3 1 1 10 3\\n\", \"output\": \"60\\n\"}]", "test_case_id": "1964", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 98, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1965, "fields": {"title": "K-\u6570\u7ec4", "description": "\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3aL\u7684\u6570\u7ec4\uff0c\u5982\u679c\u5176\u6240\u6709\u6570\u4e4b\u548c\u80fd\u88abK\u6574\u9664\uff0c\u5219\u79f0\u8be5\u6570\u7ec4\u4e3aK-\u6570\u7ec4\u3002\u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u7684\u4e14\u7531\u6b63\u6574\u6570\u7ec4\u6210\u7684\u6570\u7ec4A\uff0c\u5b83\u6709\u591a\u5c11\u4e2a\u5b50\u6570\u7ec4\u662fK-\u6570\u7ec4\u5462\uff1f<p></p><p></p>\u5b50\u6570\u7ec4\u7684\u5b9a\u4e49\u4e3aA[i,j]={A[i], A[i+1], \u2026, A[j-1], A[j] | 1&lt;=i&lt;=j&lt;=N}<p></p>(\u6ce8\u610f\uff0c\u8fd9\u91cc\u6570\u7ec4\u7684\u4e0b\u89d2\u6807\u4ece1\u5f00\u59cb\u8ba1\u7b97)<p></p>", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff1b\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u542b\u4e24\u4e2a\u6570N\u548cK\uff0c\u5747\u4e3a\u6b63\u503c\uff0c\u5176\u4e2dN\u7684\u503c\u4e0d\u8d85\u8fc750000\uff0cK\u7684\u503c\u4e0d\u8d85\u8fc71000000000\uff1b\u63a5\u4e0b\u6765\u7684\u4e00\u884c\u5305\u542bN\u7684\u6b63\u6574\u6570\uff0c\u5176\u503c\u4e0d\u8d85\u8fc71000000000\uff0c\u4ee3\u8868\u6570\u7ec4\u7684\u5143\u7d20\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51faK-\u6570\u7ec4\u7684\u4e2a\u6570\u3002", "samples": "[{\"input\": \"1\\n5 6\\n1 2 3 4 5\\n\", \"output\": \"Case #1: 2\\n\"}]", "test_case_id": "1965", "hint": "2\u4e2aK-\u6570\u7ec4\u5206\u522b\u4e3a:\\nA[1:3] : A[1] + A[2] + A[3] = 6\\nA[3:5] : A[3] + A[4] + A[5] = 12\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 117, "total_accepted_number": 10, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1966, "fields": {"title": "\u653e\u82f9\u679c", "description": "\u73b0\u6709\u4e24\u4e2a\u9ed1\u7bb1\u5b50\uff0c\u4e0d\u59a8\u8bb0\u4e3a1\u53f7\u548c2\u53f7\u3002\u6709X\u4e2a\u9752\u82f9\u679c\uff0c\u6709Y\u4e2a\u7ea2\u82f9\u679c\uff0c\u5c06\u9752\u82f9\u679c\u548c\u7ea2\u82f9\u679c\u5206\u522b\u5206\u914d\u52301\u53f7\u7bb1\u5b50\u548c2\u53f7\u7bb1\u5b50\u3002\u8bb0\u6b64\u65f61\u53f7\u7bb1\u5b50\u9752\u82f9\u679c\u548c\u7ea2\u82f9\u679c\u4e2a\u6570\u5206\u522b\u4e3aX1\u548cY1\uff1b2\u53f7\u7bb1\u5b50\u9752\u82f9\u679c\u548c\u7ea2\u82f9\u679c\u4e2a\u6570\u5206\u522b\u4e3aX2\u548cY2\u3002\u663e\u7136\u6709<p></p>X=X1+X2\uff0cY=Y1+Y2<p></p>\u7136\u540e\uff0c\u4ee5\u6982\u7387P\u9009\u62e91\u53f7\u7bb1\u5b50\uff0c\u4e5f\u5373\u4ee5\u6982\u7387\uff081-P\uff09\u9009\u62e92\u53f7\u7bb1\u5b50\uff1b\u63a5\u7740\uff0c\u4ece\u9009\u4e2d\u7684\u7bb1\u5b50\u91cc\u9762\u968f\u673a\u6478\u4e00\u4e2a\u82f9\u679c\u3002\u95ee\u5728\u8fd9\u6837\u7684\u6b65\u9aa4\u4e0b\uff0c\u5982\u4f55\u5206\u914d\u7ea2\u82f9\u679c\u548c\u9752\u82f9\u679c\uff0c\u53ef\u4f7f\u5f97\u6478\u5230\u7684\u82f9\u679c\u662f\u7ea2\u82f9\u679c\u6982\u7387\u6700\u5927\uff1f\u53ea\u9700\u8981\u8ba1\u7b97\u8fd9\u4e2a\u6700\u5927\u7684\u6982\u7387\u5373\u53ef\u3002\uff08\u5982\u679c\u9009\u4e2d\u7684\u7bb1\u5b50\u4e3a\u7a7a\u76d2\uff0c\u5219\u8bb0\u6982\u7387\u4e3a0\uff09<p></p>", "input_description": "\u8f93\u5165\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u4e0d\u8d85\u8fc730\uff1b\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u542b\u4e09\u4e2a\u6570\uff0c\u5373X\u3001Y\u548cP\uff0c\u5206\u522b\u8868\u793a\u9752\u82f9\u679c\u7684\u4e2a\u6570\uff0c\u7ea2\u82f9\u679c\u7684\u4e2a\u6570\uff0c\u4ee5\u53ca\u9009\u62e91\u53f7\u7bb1\u5b50\u7684\u6982\u7387\u3002\uff080<=X, Y <= 100, 0<=P<=1.0,\u8f93\u5165\u4fdd\u8bc1P\u53d6\u503c\u81f3\u591a\u5230\u5c0f\u6570\u70b9\u540e\u97622\u4f4d\uff09", "output_description": "\u8f93\u51fa\u6478\u5230\u7ea2\u82f9\u679c\u7684\u6700\u5927\u6982\u7387\u3002\u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e\u97622\u4f4d\u3002", "samples": "[{\"input\": \"2\\n1 1 0.5\\n1 1 0.0\\n\", \"output\": \"Case #1: 0.50\\nCase #2: 1.00\\n\"}]", "test_case_id": "1966", "hint": "\u7b2c2\u7ec4\uff1a\u53ea\u628a\u7ea2\u82f9\u679c\u653e\u52302\u53f7\u7bb1\u5b50\uff0c\u53ef\u4fdd\u8bc1\u4e00\u5b9a\u62ff\u5230\u7ea2\u82f9\u679c\uff0c\u5373\u6982\u7387\u4e3a1\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 422, "total_accepted_number": 56, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1967, "fields": {"title": "C\u8bed\u8a00\u5b9e\u9a8c---\u5b57\u7b26\u4e32\u6bd4\u8f83", "description": "\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32s1\u548cs2\uff0c\u8bd5\u6bd4\u8f83\u5b83\u4eec\u7684\u5927\u5c0f\u3002\u82e5s1&gt;s2\uff0c\u8f93\u51fa\u4e00\u4e2a\u6b63\u6570\uff1b\u82e5s1=s2\uff0c\u8f93\u51fa0\uff1b\u82e5s1&lt;s2\uff0c\u8f93\u51fa\u4e00\u4e2a\u8d1f\u6570\u3002\u4e0d\u8981\u7528strcpy\u51fd\u6570\u3002\u4e24\u4e2a\u5b57\u7b26\u4e32\u7528gets\u51fd\u6570\u8bfb\u5165\u3002\u4e24\u4e2a\u4e32\u7684\u5bf9\u5e94\u5b57\u7b26\u6bd4\u8f83\uff0c\u51fa\u73b0\u4e0d\u540c\u5b57\u7b26\u7684\u65f6\u5019\uff0c\u5f97\u5230\u6bd4\u8f83\u7ed3\u679c\uff0c\u8f93\u51fa\u7684\u6b63\u6570\u6216\u8d1f\u6570\u7684\u7edd\u5bf9\u503c\u5e94\u8be5\u662f\u76f8\u6bd4\u8f83\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u5e94\u5b57\u7b26\u7684ASCII\u7801\u7684\u5dee\u503c\u3002\u4f8b\u5982\u201cAnd\u201d\u548c\u201cAid\u201d\u6bd4\u8f83\uff0c\u6839\u636e\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u6bd4\u8f83\u7ed3\u679c\uff0c\u2018n\u2019\u6bd4\u2018i&#039;\u59275\uff0c\u56e0\u6b64\u8f93\u51fa5\u3002", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\uff0c\u4e0d\u8d85\u8fc710\u3002\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u542b\u4e24\u884c\uff0c\u7b2c\u4e00\u884c\u8868\u793a\u5b57\u7b26\u4e32s1\uff0c\u7b2c\u4e8c\u884c\u8868\u793a\u5b57\u7b26\u4e32s2\uff0c\u957f\u5ea6\u5747\u4e0d\u8d85\u8fc7100\u3002", "output_description": "\u8f93\u5165\u6570\u636e\u4fdd\u8bc1\uff1a\u975e\u7a7a\u5b57\u7b26\u4e32s1\u548cs2\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u6216\u8005\u662f\u5927\u5c0f\u5199\u5b57\u7b26\uff0c\u6216\u8005\u662f\u6570\u5b57\uff0c\u4e5f\u6216\u8005\u662f\u7a7a\u683c\u3002", "samples": "[{\"input\": \"4\\nstring1\\nstring2\\nstring3\\nstring2\\nstring1\\nstring\\nA Ba\\nA BA\\n\", \"output\": \"-1\\n1\\n49\\n32\\n\"}]", "test_case_id": "1967", "hint": "\u5bf9\u4e8e\u7b2c3\u7ec4\u6570\u636e\uff0c\u670949=\u20181\u2019-\u2018\\0\u2019\uff1b\\n\u5bf9\u4e8e\u7b2c4\u7ec4\u6570\u636e\uff0c\u670932=\u2018a\u2019-\u2018A\u2019\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 114, "total_accepted_number": 52, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1968, "fields": {"title": "C\u8bed\u8a00\u5b9e\u9a8c---\u4e32\u8fde\u5b57\u7b26", "description": "\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32S1\u548cS2\uff0c\u8bd5\u5c06S1\u548cS2\u8fde\u63a5\u8d77\u6765\uff0c\u5373\u5c06S2\u4e32\u5728S1\u7684\u672b\u5c3e\u3002\u8981\u6c42\u4e0d\u4f7f\u7528\u7cfb\u7edf\u51fd\u6570strcat\u3002", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T\uff0c\u5176\u503c\u4e0d\u8d85\u8fc710\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u4e2a\u6570\u3002\n\u63a5\u4e0b\u6765\u6709T\u884c\uff0c\u6bcf\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32S1\u548cS2\uff0c\u8868\u793a\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\u5b57\u7b26\u4e32S1\u548cS2\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7100\uff0c\u4e14\u6bcf\u4e2a\u5b57\u7b26\u6216\u8005\u662f\u5927\u5c0f\u5199\u5b57\u6bcd\u6216\u8005\u662f\u6570\u5b57\u3002", "output_description": "\u6bcf\u4e00\u884c\u5bf9\u5e94\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4e32\u8fde\u540e\u7684\u5b57\u7b26\u4e32", "samples": "[{\"input\": \"3\\n2012. 11.11\\nSWJTU IsShortForSouthwestJiaotongUniversity\\nIsShortForSouthwestJiaotongUniversity SWJTU\\n\", \"output\": \"2012.11.11\\nSWJTUIsShortForSouthwestJiaotongUniversity\\nIsShortForSouthwestJiaotongUniversitySWJTU\\n\"}]", "test_case_id": "1968", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 170, "total_accepted_number": 66, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1969, "fields": {"title": "C\u8bed\u8a00\u5b9e\u9a8c---\u5b57\u7b26\u7edf\u8ba1", "description": "\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u7531\u5b9e\u53c2\u4f20\u6765\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7edf\u8ba1\u6b64\u5b57\u7b26\u4e32\u4e2d\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7a7a\u683c\u548c\u5176\u4ed6\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u5728\u4e3b\u51fd\u6570\u4e2d\u8f93\u5165\u5b57\u7b26\u4e32\u4ee5\u53ca\u8f93\u51fa\u524d\u8ff0\u7684\u7ed3\u679c\u3002", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u6709\u4e00\u4e2a\u6574\u6570T\uff0c\u4e0d\u8d85\u8fc710\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\uff1b\n\u63a5\u4e0b\u6765\u7684T\u884c\uff0c\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u957f\u5ea6\u5927\u4e8e0\uff0c\u4e14\u4e0d\u8d85\u8fc7100\uff09\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u5360\u4e00\u884c\uff0c\u4f9d\u6b21\u8f93\u51fa\u5b57\u7b26\u4e32\u4e2d\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7a7a\u683c\u548c\u5176\u4ed6\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002", "samples": "[{\"input\": \"1\\nWelcome to SWJTU(2012) Online Judge System Beta #1.0\\n\", \"output\": \"35 6 7 4\\n\"}]", "test_case_id": "1969", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 70, "total_accepted_number": 38, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1970, "fields": {"title": "C\u8bed\u8a00\u5b9e\u9a8c---\u6700\u957f\u5355\u8bcd", "description": "\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u884c\u5b57\u7b26\uff0c\u5c06\u6b64\u5b57\u7b26\u4e32\u4e2d\u6700\u957f\u7684\u5355\u8bcd\u8f93\u51fa.", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u6709\u4e00\u4e2a\u6574\u6570T\uff0c\u4e0d\u8d85\u8fc710\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\uff1b\n\u63a5\u4e0b\u6765\u7684T\u884c\uff0c\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u957f\u5ea6\u5927\u4e8e0\uff0c\u4e14\u4e0d\u8d85\u8fc7100\uff09\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u5360\u4e00\u884c\uff0c\u8f93\u51fa\u6700\u957f\u7684\u5355\u8bcd\uff08\u4fdd\u8bc1\u5b58\u5728\u552f\u4e00\u7684\u6700\u957f\u5355\u8bcd\uff09\u3002", "samples": "[{\"input\": \"1\\nWelcome to Southwest Jiaotong University Online Judge System Beta Version\\n\", \"output\": \"University\\n\"}]", "test_case_id": "1970", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 71, "total_accepted_number": 31, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1979, "fields": {"title": "2357", "description": "\u6c42\u4e00\u4e2a\u662f2\u30013\u30015\u30017\u7684\u500d\u6570\u7684\u6700\u5c0fn\u4f4d\u6570", "input_description": "\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6570\u636e\uff0c\u6bcf\u7ec4\u6570\u636e\u5305\u62ec\u4e00\u4e2an\uff081<=n<=10^5)", "output_description": "\u8f93\u51fa\u8fd9\u4e2a\u6700\u5c0fn\u4f4d\u6570\u3002\u5982\u679c\u6ca1\u6709\u8f93\u51fa-1", "samples": "[{\"input\": \"1\\n5\\n\", \"output\": \"-1\\n10080\\n\"}]", "test_case_id": "1979", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 113, "total_accepted_number": 26, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1980, "fields": {"title": "Coins", "description": "    There are n different types of coins. For each i (1&#8201;\u2264&#8201;i&#8201;\u2264&#8201;n), coin of type i is worth ai cents. <p></p>    Boss has some set of these coins totaling t cents and q pairs of integers. For each i (1&#8201;\u2264&#8201;i&#8201;\u2264&#8201;q), the pair bi,&#8201;ci tells cxy that the number of coins of type bi is not less than coins of type ci. It is known that all bi are distinct and all ci are distinct.<p></p>    Help cxy find the number of possible combinations of coins Boss could have. Two combinations are considered different if there is some i (1&#8201;\u2264&#8201;i&#8201;\u2264&#8201;n), such that the number of coins cxy has of type i is different in the two combinations. ", "input_description": "    There are several test cases. In each case, the first line contains three space-separated integers, n,&#8201;q and t (1&#8201;\u2264&#8201;n&#8201;\u2264&#8201;300; 0&#8201;\u2264&#8201;q&#8201;\u2264&#8201;n; 1&#8201;\u2264&#8201;t&#8201;\u2264&#8201;10^5). The second line contains n space separated integers, a1,&#8201;a2,&#8201;...,&#8201;an (1&#8201;\u2264&#8201;ai&#8201;\u2264&#8201;10^5). The next q lines each contain two distinct space-separated integers, bi and ci (1&#8201;\u2264&#8201;bi,&#8201;ci&#8201;\u2264&#8201;n; bi&#8201;\u2260&#8201;ci).\n\nIt's guaranteed that all bi are distinct and all ci are distinct.", "output_description": "    A single integer, the number of valid coin combinations that Boss could have, modulo 1000000007.", "samples": "[{\"input\": \"4 2 7\\n3 1 2 5\\n4 2\\n3 4\\n\", \"output\": \"2\\n\"}]", "test_case_id": "1980", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 7, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1981, "fields": {"title": "Escape the Room", "description": "    You are trapped in a 3D room and need to find the quickest way out! The room is composed of unit cubes which may or may not be filled with rock. It takes one minute to move one unit north, south, east, west, or down. You can&#039;t climb back to the upper floor once you have jumped down to the lower one, because you can&#039;t jump so high. The maze is surrounded by solid rock on all sides.", "input_description": "    The input consists of a number of dungeons. Each dungeon description starts with a line containing three integers L, R and C (all limited to 30 in size).\nL is the number of floors making up the room. \n\n    R and C are the number of rows and columns making up the plan of each floor. \n\n    Then there will follow L blocks (frome the first floor to the last one) of R lines each containing C characters. Each character describes one cell of the room. A cell full of rock is indicated by a '#' and empty cells are represented by a '.'. Your starting position is indicated by 'S' and the exit by the letter 'E'. There's a single blank line after each level. Input is terminated by three zeroes for L, R and C.", "output_description": "    Each maze generates one line of output. If it is possible to reach the exit, print a line of the form \"Escaped in x minute(s).\", where x is replaced by the shortest time it takes to escape. If it is not possible to escape, print the line \"Trapped!\"", "samples": "[{\"input\": \"3 4 5\\nS....\\n.###.\\n.##..\\n###.#\\n\\n#####\\n#####\\n##.##\\n##...\\n\\n#####\\n#####\\n#.###\\n####E\\n\\n1 3 3\\nS##\\n#E#\\n###\\n\\n0 0 0\", \"output\": \"Escaped in 11 minute(s).\\nTrapped!\\n\"}]", "test_case_id": "1981", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 42, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1982, "fields": {"title": "A+B", "description": "\u8ba1\u7b97a+b", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\u6bcf\u7ec4\u4e24\u4e2a\u6574\u6570a,b\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\u4e3aa+b\u7684\u503c\u3002", "samples": "[{\"input\": \"3 6\\n1 2\\n\", \"output\": \"9\\n3\\n\"}]", "test_case_id": "1982", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 375, "total_accepted_number": 149, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1983, "fields": {"title": "Minimize Dissatisfaction", "description": "    Here, a sausage is an array of integers! A sausage&#039;s dissatisfaction is equal to the bitwise excluding OR (the xor operation) of all integers in that sausage.<p></p><p></p>    Today, hzWu and dede come together, but there was only one sausage left. So cxy decided to cut a prefix (several, can&#039;t be zero, first array elements) of the sausage and give it to hzWu and a postfix (several, can&#039;t be zero, last array elements) of the sausage and give it to dede. Of course, the cut pieces mustn&#039;t intersect (no array element can occur in both pieces).<p></p><p></p>    The dissatisfaction of hzW and dede is equal to the bitwise XOR of their sausages&#039; dissatisfaction.<p></p><p></p>    Find a way to cut a piece of sausage for hzWu and dede that minimize the dissatisfaction of them.<p></p>", "input_description": "    There are several test cases.\n    In each case, The first line contains an integer n (2&#8201;\u2264&#8201;n&#8201;\u2264&#8201;10^5).The next line contains n integers a1,&#8201;a2,&#8201;...,&#8201;an (0&#8201;\u2264&#8201;ai&#8201;\u2264&#8201;10^12) \u2015 cxy's sausage.\n\n", "output_description": "    Print a single integer \u2015 the minimum dissatisfaction hzWu and dede will get from the dinner.\n", "samples": "[{\"input\": \"2\\n1 2\\n3\\n1 2 3\\n2\\n1000 1000\\n4\\n1 2 3 4\\n\", \"output\": \"3\\n0\\n0\\n4\\n\"}]", "test_case_id": "1983", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 17, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1984, "fields": {"title": "Qiegao (I)", "description": "    Recently, cxy finds that there&#039;s a place to buy Qiegao at college. Now, cxy wants to try that but dare not to cut Qiegao into pieces so that have to buy them in whole piece. There are two types of Qiegao weighing A and B. As we know, if buying x pieces of A Qiegao and y pieces of B Qiegao, the total weight cxy can get is Ax+By. Here, cxy want to know the maximum of weight can&#039;t be bought, no matter how to buy Qiegao.", "input_description": "    There are several test cases. In each case, there are 2 integers A and B, meaning the weight of each kind of Qiegao.\n(1<=A, B<=10000).", "output_description": "    Print the maximum cxy can't get. If the maximum is infinite, print a line \"Inf\".", "samples": "[{\"input\": \"7 11\\n2 8\\n\", \"output\": \"59\\nInf\\n\"}]", "test_case_id": "1984", "hint": "In the first case, 59 is the maximum, which means any weight bigger than 59 can be bought.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 13, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1985, "fields": {"title": "Qiegao (II)", "description": "    One day, cxy meets Qiegao again. But this time, the idea to cut Qiegao hits cxy&#039;s head! So, what is the maximal number of Qiegao-pieces cxy can get if cutting a big Qiegao for k times using a plain knife?<p></p>", "input_description": "    There are several test cases. In each case, there is an integer k no more than 100000.", "output_description": "    Print the maximum described.", "samples": "[{\"input\": \"1\\n2\\n3\\n\", \"output\": \"2\\n4\\n8\\n\"}]", "test_case_id": "1985", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 41, "total_accepted_number": 10, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1986, "fields": {"title": "\u7334\u5b50\u722c\u697c\u68af (I)", "description": "\u3000\u3000\u4e00\u53ea\u7334\u5b50\u722c\u697c\u68af\uff0c\u4f46\u662f\u7334\u5b50\u4e0a\u697c\u68af\u7684\u53f0\u9636\u6570\u548c\u4e0b\u697c\u68af\u7684\u53f0\u9636\u6570\u662f\u56fa\u5b9a\u7684\uff0c\u76ee\u524d\u6709\u4e00\u4e2a\u697c\u68af\u5f88\u9ad8\u5f88\u9ad8\uff0c\u6709\u53ef\u80fd\u662f\u901a\u5f80\u5929\u5802\u3002\u60f3\u77e5\u9053\u7334\u5b50\u80fd\u4e0d\u80fd\u722c\u5230\u67d0\u4e00\u5c42\u3002", "input_description": "\u3000\u3000\u3000\u7b2c\u4e00\u884c\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570T\uff0cT<100\u3002\u6bcf\u7ec4\u6d4b\u8bd5\u5305\u62ec\u4e09\u4e2a\u6570\uff0cup,down,num\u3002up \u8868\u793a\u6bcf\u6b21\u4e0a\u697c\u5c42\u7684\u53f0\u9636\u6570\uff0cdown\u8868\u793a\u6bcf\u6b21\u4e0b\u697c\u68af\u7684\u53f0\u9636\u6570\uff0cnum\u8868\u793a\u697c\u68af\u7684\u5c42\u6570\u3002\n(0<=up,down<=20, 0 &lt num=<1000)", "output_description": "\u3000\u3000\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u884c\uff0cYES \u6216\u8005 NO", "samples": "[{\"input\": \"2\\n1 1 10\\n2 2 9\\n\", \"output\": \"YES\\nNO\\n\"}]", "test_case_id": "1986", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 435, "total_accepted_number": 47, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1987, "fields": {"title": "\u4e0d\u6392\u5e8f\u4e86", "description": "\u7ed9\u5b9a\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u662f\u5426\u80fd\u4ea4\u6362\u4e24\u4e2a\u76f8\u90bb\u6570\u7684\u4f4d\u7f6e\u4f7f\u5f97\u8fd9\u4e2a\u6570\u7ec4\u4e0d\u662f\u9012\u589e\u540c\u65f6\u4e5f\u4e0d\u662f\u9012\u51cf\u3002<p></p>\u5f53\u8fd9\u4e24\u4e2a\u76f8\u540c\u65f6\u4e0d\u80fd\u4ea4\u6362,\u6bd4\u5982a1 = a2,\u90a3\u4e48a1\u548ca2\u4e0d\u80fd\u4ea4\u6362<p></p>\u9012\u589e\u4e3a\uff1aa1&lt;=a2&lt;=a3....&lt;=an<p></p>\u9012\u51cf\u4e3a\uff1aa1&gt;=a2&gt;=a3....&gt;=an<p></p>", "input_description": "\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6570\u636e\uff0c\u6bcf\u7ec4\u6570\u636e\u5305\u62ec\u4e24\u884c\u3002\n\u7b2c\u4e00\u884c\u4e3an\uff0c\u8868\u793a\u6570\u7ec4\u7684\u957f\u5ea6\u3002\uff081<=n<=10^5)\n\u7b2c\u4e8c\u884c\u4e3an\u4e2a\u6574\u6570\uff0c\u4ee3\u8868a1,a2,...an\u3002\uff08\u4e3a\u4e0d\u8d85\u8fc710^9\u7684\u975e\u8d1f\u6574\u6570\uff09\u3002", "output_description": "\u8f93\u51fa\u4ea4\u6362\u7684\u4f4d\u7f6e(p1,p2)(p1 &lt;p2)\uff0c\u5982\u6709\u591a\u4e2a\uff0c\u8f93\u51fa\u6700p1\u5c0f\u7684\u3002\u5982\u679c\u6ca1\u6709\u8f93\u51fa-1", "samples": "[{\"input\": \"1\\n1\\n2\\n1 2\\n4\\n1 2 3 4\\n\", \"output\": \"-1\\n-1\\n1 2\\n\"}]", "test_case_id": "1987", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 54, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1988, "fields": {"title": "\u5fb7\u5fb7\u7684\u55dc\u597d", "description": "\t\u57287509\u662f\u5e7f\u5927ACMer\u8bad\u7ec3\u7684\u57fa\u5730\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9b\u5ea7\u4f4d\u53ef\u4ee5\u63d0\u4f9b\u7ed9\u5927\u5bb6\uff0c\u4f46\u662f\u6211\u4eec\u7684\u5fb7\u5fb7\u6709\u4e00\u4e2a\u5947\u602a\u55dc\u597d\uff0c\u4ed6\u5e0c\u671b\u6709\u4e00\u5217\u91cc\u9762\u505a\u7684\u5168\u662f\u5973\u751f\uff0c\u8fd9\u6837\u65b9\u4fbf\u4ed6\u80fd\u591f\u4f9d\u6b21\u6d4f\u89c8\u6307\u5bfc~~\u4f60\u80fd\u5e2e\u52a9\u4ed6\u5417\uff1f(\u672c\u6545\u4e8b\u7eaf\u5c5e\u865a\u6784\uff0c\u5927\u5bb6\u4e0d\u8981\u62c5\u5fc3).<p></p>   \u5047\u8bbe\u8fd9\u4e2a\u6559\u5ba4\u6709\u7684\u4f4d\u7f6em\u884cn\u5217;\u5e76\u4e14\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u90fd\u5750\u4e86\u4e00\u540dAcmer\uff08\u6216\u7537\u6216\u5973\uff0c\u5176\u4ed6\u60c5\u51b5\u4e0d\u4e88\u8003\u8651\uff09\uff1b\u4f60\u6bcf\u4e00\u6b21\u80fd\u591f\u5c06\u67d0\u4e00\u884c\u7684\u6240\u6709\u4eba\u4f9d\u6b21\u5faa\u73af\u5f80\u53f3\u6216\u8005\u5faa\u73af\u5f80\u5de6\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\uff1b\u8bf7\u95ee\u4f60\u80fd\u7528\u6700\u5c11\u7684\u6b21\u6570\u4f7f\u67d0\u4e00\u5217\u5168\u90e8\u662f\u5973-Acmer\u5417\uff1f", "input_description": "\t\u591a\u7ec4\u6570\u636e\uff0c\u8bf7\u4ee5\u8bfb\u5230\u6587\u4ef6\u5c3e\u7ed3\u675f\u3002\n\t\u7b2c\u4e00\u884c\u5305\u62ec m,n  (0&lt;m<=100; 0&lt;n<=10000);\n\t\u63a5\u4e0b\u6765\u4e3am\u884cn\u5217\u7684\u6570\u636e\uff0c\u5176\u4e2dM\u4ee3\u8868\u7537Acmer\uff0cW\u4ee3\u8868\u5973Acmer;", "output_description": "\t\u5982\u679c\u53ef\u4ee5\uff0c\u8f93\u51fa\u6700\u5c11\u7684\u6b65\u6570\uff1b\u5982\u679c\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u80fd\u4f7f\u4e00\u5217\u5168\u662f\u5973\u751f\uff0c\u8f93\u51fa\"-1\";", "samples": "[{\"input\": \"3  6\\nWMWMWM\\nMMMWMM\\nWMMMMM\\n2  3\\nWWW\\nMMM\\n\", \"output\": \"3\\n-1\\n\"}]", "test_case_id": "1988", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 30, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1990, "fields": {"title": "\u7334\u5b50\u722c\u697c\u68af (II)", "description": "\u3000\u3000\u8fc1\u79fb\u5230\u7334\u5b50\u722c\u697c\u68af\u7684\u9898\u76ee\u4e2d\u8bf4\u697c\u68af\u7684\u5c42\u6570\u662f\u65e0\u9650\u9ad8\uff0c\u53ef\u662f\u73b0\u5b9e\u5f53\u4e2d\u6ca1\u6709\u8fd9\u4e48\u9ad8\u7684\u7684\u697c\u68af\u554a\uff0c\u6240\u4ee5\u5982\u679c\u6211\u73b0\u5728\u544a\u8bc9\u4f60\u697c\u68af\u7684\u5c42\u6570\uff0c\u5148\u5728\u5982\u4f55\u89e3\u51b3\u4e0a\u4e2a\u95ee\u9898\u5462\u3002", "input_description": "\u3000\u3000\u7b2c\u4e00\u884c\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570T\uff0cT<100\u3002\u6bcf\u7ec4\u6d4b\u8bd5\u5305\u62ec\u56db\u4e2a\u6570\uff0cup,down,num,top\u3002up \u8868\u793a\u6bcf\u6b21\u4e0a\u697c\u5c42\u7684\u53f0\u9636\u6570\uff0cdown\u8868\u793a\u6bcf\u6b21\u4e0b\u697c\u68af\u7684\u53f0\u9636\u6570\uff0cnum\u8868\u793a\u5230\u8fbe\u697c\u68af\u7684\u5c42\u6570,top\u603b\u7684\u697c\u68af\u5c42\u6570\u3002\n(0<=up,down<=20, 0 < num<=top=<1000)", "output_description": "\u3000\u3000\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u884c\uff0cYES \u6216\u8005 NO", "samples": "[{\"input\": \"2\\n7 11 148 278\\n16 3 688 771\\n\\n\", \"output\": \"YES\\nYES\\n\"}]", "test_case_id": "1990", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 197, "total_accepted_number": 17, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1991, "fields": {"title": "\u7edf\u8ba1\u5b66\u53f7", "description": "\u53c8\u5230\u4e86\u4e00\u5e74\u4e00\u5ea6\u7684ACM\u6821\u8d5b\u7684\u5b63\u8282\u4e86\uff0c\u5e7f\u5927acmer\u4eec\u6469\u62f3\u64e6\u638c\uff0c\u51c6\u5907\u5927\u65bd\u62f3\u811a~\u5404\u5927\u98df\u5802\u7684\u62a5\u540d\u70b9\u90fd\u53ef\u4ee5\u62a5\u540d\uff0c\u7edf\u8ba1\u5927\u5bb6\u7684\u5b66\u53f7\u7684\u65f6\u5019\u603b\u4f1a\u53d1\u73b0\u6709\u4e9b\u91cd\u590d\u7684\u5b66\u53f7\u5728\u91cc\u9762\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u7edf\u8ba1\u51fa\u771f\u6b63\u62a5\u540d\u7684\u4eba\u7684\u4e2a\u6570~~\u4f60\u80fd\u5e2e\u4e0b\u5fd9\u5417\uff1f", "input_description": "\u7b2c\u4e00\u884c\u4e3aT\uff0c\u4ee3\u8868\u6709T\u7ec4\u6d4b\u8bd5\u6570\u636e~~ (0 &lt T<=50)\n\u63a5\u4e0b\u6765\u7684T\u7ec4\u6570\u636e\u4e2d\uff0c\u7b2c\u4e00\u884c\u4e3an(0 &lt n<=100)\uff0c\u4ee3\u8868\u540d\u5355\u4e0a\u7684\u5b66\u53f7\u6570~\n\u63a5\u4e0b\u6765\u7684\u4e00\u884c\u4e3an\u4e2a\u5b66\u53f7a(a<10^9)\uff0c\u6bcf\u4e2a\u5b66\u53f7\u7a7a\u683c\u9694\u5f00\u3002\u5176\u4e2d\u6709\u4e00\u4e9b\u662f\u91cd\u590d\u7684~", "output_description": "\u8f93\u51fa\u771f\u6b63\u7684\u540d\u5355\u6570\u3002\u6bcf\u7ec4\u6570\u636e\u7ed3\u679c\u5360\u4e00\u884c\uff0c\u89c1\u6837\u4f8b\u3002", "samples": "[{\"input\": \"3\\n3\\n1 1 2\\n1\\n20092134\\n4\\n1 2 3 4\\n\", \"output\": \"2\\n1\\n4\\n\"}]", "test_case_id": "1991", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 428, "total_accepted_number": 134, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1992, "fields": {"title": "\u5fb7\u5fb7\u7684\u55dc\u597d2.0", "description": "\u3000\u30007509\u7684acmer\u4eec\u90fd\u77e5\u9053,\u5fb7\u5fb7\u662f\u4e2a\u597d\u5b69\u5b50,\u4ece\u6765\u4e0d\u73a9dota,lol\u7b49&quot;\u5f31\u667a&quot;\u6e38\u620f,\u5fb7\u5fb7\u5c31\u559c\u6b224399web game~\u4eca\u5929\u5fb7\u5fb7\u95f2\u7684\u65e0\u804a,\u53c8\u73a9\u8d77\u4e86\u6e38\u620f,\u6e38\u620f\u7ed9\u4e86\u4e00\u5806\u6570\u5b57,\u8ba9\u4f60\u628a\u4ed6\u4eec\u62fc\u63a5\u8d77\u6765\u7ec4\u6210\u4e00\u4e2a\u6700\u5927\u6570\u5b57,\u5fb7\u5fb7\u6700\u8fd1\u52b3\u7d2f\u8fc7\u5ea6,\u4f60\u80fd\u5e2e\u52a9\u4ed6\u5417\uff1f", "input_description": "\u8fd9\u513f\u6709T\u7ec4\u6570\u636e\uff0cT<=50\n\u6bcf\u7ec4\u6570\u636e\u5360\u4e24\u884c,\u7b2c\u4e00\u884c\u4e3an(0 < n<=80) \u4ee3\u8868\u6709n\u4e2a\u6570\u5b57\u9700\u8981\u62fc\u63a5\uff1b\n\u63a5\u4e0b\u6765\u7684\u4e00\u884c\u4e3an\u4e2a\u6570\u5b57ai (a1~an), (0 < ai<=1000)", "output_description": "\u8f93\u51fa\u7ec4\u5408\u62fc\u63a5\u8d77\u6765\u7684\u6700\u5927\u6570\u5b57\uff0c\u8f93\u51fa\u683c\u5f0f\u89c1\u6837\u4f8b", "samples": "[{\"input\": \"2\\n2\\n98 97\\n3\\n12 23 31\", \"output\": \"9897\\n312312\\n\"}]", "test_case_id": "1992", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 303, "total_accepted_number": 32, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1993, "fields": {"title": "\u5fb7\u5fb7\u7684\u55dc\u597d3.0", "description": "\u5fb7\u5fb7\u4e3a\u4e86\u8bad\u7ec3\u5927\u5bb6\u7684\u6570\u5b66\u601d\u7ef4\uff0c\u4e8e\u662f\u53c8\u5f00\u59cb\u8003\u5927\u5bb6\u4e86~~\u8fd9\u513f\u6709\u8fd9\u6837\u4e00\u4e2a\u5e8f\u5217~~A(n)=4n-1\u7684\u5e8f\u5217~\u4f46\u662f\u5fb7\u5fb7\u4e0d\u559c\u6b223\u548c5\uff0c\u6240\u4ee5\u80fd\u88ab3\u6574\u9664\u6216\u88ab5\u6574\u9664\u7684\u6570\u90fd\u4e0d\u60f3\u770b\u5230\u3002\u4e8e\u662f\u5fb7\u5fb7\u62bd\u6389\u4e86\u8fd9\u4e9b\u6570\u6309\u539f\u5e8f\u5f62\u6210\u4e00\u4e2a\u65b0\u7684\u5e8f\u5217bn\uff1b\u8ba9\u5927\u5bb6\u731c\u731c\u5e8f\u5217\u4e2d\u7b2cn\u4e2a\u6570\u662f\u591a\u5c11~\u4f60\u80fd\u7ecf\u53d7\u4f4f\u7ec4\u7ec7\u7684\u8003\u9a8c\u54c7\uff1f", "input_description": "\u7b2c\u4e00\u884c\u4e3aT\uff0c\u4ee3\u8868\u6709T\u7ec4\u6570\u636e \uff080 < T<=10000\uff09\n\u63a5\u4e0b\u6765\u7684T\u884c\u4e3a\u6570\u5b57n \uff08n < 10^9\uff09", "output_description": "\u8f93\u51fa\u7b2cn\u4e2a\u6570", "samples": "[{\"input\": \"3\\n1\\n3\\n2006\\n\", \"output\": \"7\\n19\\n15043\\n\"}]", "test_case_id": "1993", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 280, "total_accepted_number": 25, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1994, "fields": {"title": "\u4e0d\u77e5\u9053\u81ea\u5df1\u4e0d\u77e5\u9053", "description": "\u3000\u3000\u5927\u4e00\u5c31\u662f\u6625\u5929\u5174\u81f4\u52c3\u52c3\u6ca1\u6709\u7ecf\u5386\u72c2\u98ce\u66b4\u96e8\u7684\u88ad\u51fb\u5e7c\u9e1f\u51fa\u5de2\u4e0d\u77e5\u5929\u9ad8\u5730\u539a!<p></p>\u3000\u3000\u5927\u4e00\u5c31\u90a3\u6837\u61f5\u61f5\u61c2\u61c2\u7684\u8d70\u8fc7\u4e86,\u8ba4\u771f\u56de\u60f3\u8d77\u6765\u5927\u4e00\u65f6\u7684\u81ea\u5df1,\u786e\u5b9e\u662f\u522b\u6837\u7684\u5f20\u626c,\u5f20\u626c\u7684\u6b22\u7b11,\u653e\u8086\u7684\u54ed\u6ce3,\u8bda\u631a\u7684\u51fb\u638c,\u8c6a\u8fc8\u7684\u4e3e\u676f...<p></p>\u3000\u3000\u6211\u4eec\u5e74\u8f7b\u6c14\u76db,\u5927\u5b66\u7684\u65b0\u9c9c\u8fd8\u5728\u54c1\u5c1d,\u786e\u5b9e\u6709\u70b9\u4e0d\u77e5\u5929\u9ad8\u5730\u539a\u3002<p></p>\u3000\u3000\u519b\u8bad,\u5927\u5b66\u7684\u7b2c\u4e00\u9053\u95e8\u69db,\u628a\u6211\u4eec\u6652\u5f97\u201c\u4f53\u65e0\u5b8c\u80a4\u201d,\u62b1\u6028\u6559\u5b98\u7684\u51f6,\u5374\u4e5f\u5728\u7ed3\u675f\u65f6\u96be\u8fc7\u7684\u843d\u6cea,\u5f53\u65f6\u7684\u6211\u4eec\u5c31\u662f\u8fd9\u6837,\u5f80\u5f80\u4e3a\u4e86\u4e00\u70b9\u70b9\u5c0f\u4e8b,\u5ffd\u60b2\u5ffd\u559c\u3002<p></p>\u3000\u3000\u6211\u4eec\u8fd8\u4e0d\u77e5\u9053\u63a5\u4e0b\u6765\u7684\u51e0\u5e74\u5c06\u662f\u6211\u4eec\u6700\u6700\u73cd\u8d35\u7684\u9752\u6625\u7eaa\u5ff5\uff0c\u6240\u4ee5\uff0c\u6709\u4eba\u8bf4\uff0c\u5927\u4e00\u65f6\u4e0d\u77e5\u9053\u81ea\u5df1\u4e0d\u77e5\u9053\u3002", "input_description": "\u6bcf\u884c\u5305\u542b\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u4ec5\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570N\uff0c\u8868\u793a\u4f60\u73b0\u5728\u7684\u5e74\u7ea7\uff0c\u5176\u4e2d,N\u4e0d\u8d85\u8fc74\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4f60\u521a\u8bfb\u5927\u4e00\u65f6\u7684\u5e74\u4efd\uff0c\u4fdd\u75594\u4f4d\u6709\u6548\u6570\u5b57\u3002\uff08\u4e0d\u8003\u8651\u7279\u6b8a\u60c5\u51b5\uff0c\u5982\u4f11\u5b66\u3001\u7559\u7ea7\u4ec0\u4e48\u7684\uff09", "samples": "[{\"input\": \"3\\n4\\n\", \"output\": \"2010\\n2009\\n\"}]", "test_case_id": "1994", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 257, "total_accepted_number": 135, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1995, "fields": {"title": "\u77e5\u9053\u81ea\u5df1\u4e0d\u77e5\u9053", "description": "\u3000\u3000\u5927\u4e8c\u597d\u4f3c\u590f\u5929\u8749\u9e23\u58f0\u58f0\u65f6\u6709\u9177\u6691\u71e5\u70ed\u4e5f\u6709\u6e05\u51c9\u4e00\u523b\u5c0f\u9e1f\u817e\u98de\u76f4\u6307\u84dd\u5929\u78a7\u6d77!<p></p>\u3000\u3000\u5927\u4e8c\u4e86\u770b\u7740\u5b66\u5f1f\u5b66\u59b9\u4eec,\u50cf\u5f53\u5e74\u7684\u6211\u4eec\u4e00\u6837\u610f\u6c14\u98ce\u53d1\u7684\u8d70\u8fd1,\u4e0d\u89c9\u95f4\u8001\u4e86\u4e00\u5c81\u3002\u5176\u5b9e\u6211\u4eec\u8fd8\u662f\u90a3\u6837\u7684\u7cbe\u6c14\u52c3\u52c3,\u53ea\u662f\u5728\u8fd9\u4e00\u5e74\u4e2d\u78e8\u5e73\u4e86\u68f1\u89d2,\u7559\u4e0b\u4e86\u66f4\u672c\u8d28\u7684\u5185\u6db5\u3002<p></p>\u3000\u3000\u5f20\u626c\u4e0d\u662f\u6211\u4eec\u6240\u9700\u8981\u7684\u4e86,\u5c31\u7559\u7ed9\u5927\u4e00\u7684\u5f1f\u5f1f\u59b9\u59b9\u5427,\u4e13\u4e1a\u8bfe\u7684\u5fd9\u788c,\u5b66\u751f\u4f1a\u7684\u8f9b\u52b3,\u6068\u4e0d\u5f97\u4e00\u5206\u949f\u63b0\u6210\u4e24\u534a\u5229\u7528,\u6211\u4eec\u771f\u771f\u5207\u5207\u7684\u77e5\u9053\u4e86\u81ea\u5df1\u7684\u4e0d\u77e5\u9053,\u6211\u4eec\u8fd8\u6709\u66f4\u591a\u7684\u4e1c\u897f\u8981\u5b66\u4e60\u3002<p></p>\u3000\u3000\u6240\u4ee5\uff0c\u6709\u4eba\u8bf4\uff0c\u5927\u4e8c\u65f6\u77e5\u9053\u81ea\u5df1\u4e0d\u77e5\u9053\u3002", "input_description": "\u3000\u3000\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\uff0c\u4e0d\u8d85\u8fc7100\u3002\n\u3000\u3000\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570N\u548cM\uff0c\u5747\u4e0d\u8d85\u8fc7100\uff0c\u5206\u522b\u8868\u793a\u4f60\u6709N\u672c\u4e66\u8981\u770b\uff0c\u6bcf\u5929\u6700\u591a\u770bM\u9875\uff1b\n\u3000\u3000\u63a5\u4e0b\u6765\u7684\u4e00\u884c\u5305\u542bN\u4e2a\u6b63\u6574\u6570\uff1aA(1)\uff0cA(2)\uff0c...\uff0cA(N)\uff0c\u5747\u4e0d\u8d85\u8fc71000\uff0c\u5206\u522b\u8868\u793a\u6bcf\u672c\u4e66\u7684\u9875\u6570\u3002", "output_description": "\u3000\u3000\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4f60\u8981\u770b\u5b8c\u6240\u6709\u4e66\u7c4d\uff0c\u6240\u9700\u8981\u7684\u5929\u6570\u3002", "samples": "[{\"input\": \"2\\n3 6\\n1 2 3\\n3 2\\n1 2 3\\n\", \"output\": \"1\\n3\\n\"}]", "test_case_id": "1995", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 301, "total_accepted_number": 108, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1996, "fields": {"title": "\u4e0d\u77e5\u9053\u81ea\u5df1\u77e5\u9053", "description": "\u3000\u3000\u5927\u4e09\u83ab\u975e\u79cb\u5929\u79cb\u9ad8\u6c14\u723d\u679c\u5b9e\u5792\u4e8e\u679d\u5934\u4f3c\u7ed3\u672a\u7ed3\u767e\u9e1f\u5f52\u5de2\u79ef\u84c4\u5bd2\u51ac\u529b\u91cf!<p></p>\u3000\u3000\u5927\u4e09\u5373\u5c06\u6765\u4e34\uff0c\u6211\u4eec\u505a\u597d\u51c6\u5907\u4e86\u4e48\uff1f\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u4f46\u662f\u6211\u4eec\u6709\u699c\u6837\u6709\u5b66\u4e60\u7684\u76ee\u6807\uff0c\u4e0d\u662f\u4e48\uff1f\u6211\u4eec\u7684\u524d\u65b9\u8fd8\u6709\u5b66\u957f\u5b66\u59d0\u5462\uff0c\u6015\u4ec0\u4e48\uff1f<p></p>\u3000\u3000\u5927\u4e09\u6211\u4eec\u5c06\u51b3\u5b9a\u662f\u7ee7\u7eed\u6df1\u9020\u6216\u662f\u6295\u8eab\u793e\u4f1a\uff0c\u4e0d\u8bba\u600e\u6837\uff0c\u6211\u4eec\u90fd\u65e0\u6240\u754f\u60e7\uff0c\u53ea\u662f\u96be\u514d\u4f1a\u6709\u4e9b\u8e1f\u8e70\u4e0e\u4e0d\u51b3\uff0c\u4f46\u662f\u6ca1\u6709\u5173\u7cfb\uff0c\u6d77\u9614\u51ed\u9c7c\u8dc3\uff0c\u5929\u9ad8\u4efb\u9e1f\u98de\uff01<p></p>\u3000\u3000\u6240\u4ee5\uff0c\u6709\u4eba\u8bf4\uff0c\u5927\u4e09\u65f6\u4e0d\u77e5\u9053\u81ea\u5df1\u77e5\u9053\u3002", "input_description": "\u3000\u3000\u8f93\u5165\u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570T\uff0c\u4e0d\u8d85\u8fc710\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\uff1b\n\u3000\u3000\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570N\uff0c\u4e0d\u8d85\u8fc7100\uff0c\u8868\u793a\u4f60\u6709N\u672c\u4e66\uff1b\n\u3000\u3000\u63a5\u4e0b\u6765\u7684N\u884c\uff0c\u6bcf\u884c\u5305\u542b1\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u6bcf\u672c\u4e66\u7684\u4e66\u540d\uff08\u4fdd\u8bc1\u4e66\u540d\u4e0d\u540c\uff09\uff0c\u4e66\u540d\u4ec5\u5305\u542b\u5b57\u6bcd\uff0c\u4e14\u4e0d\u5305\u542b\u7a7a\u683c\uff0c\u957f\u5ea6\u5927\u4e8e0\uff0c\u4e14\u4e0d\u8d85\u8fc7100\uff1b\n\u3000\u3000\u7136\u540e\uff0c\u63a5\u4e0b\u6765\u7684\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570Q\uff0c\u4e0d\u8d85\u8fc7100\uff0c\u8868\u793a\u4f60\u60f3\u67e5\u8be2\u7684\u6b21\u6570\uff1b\n\u3000\u3000\u63a5\u4e0b\u6765\u7684Q\u884c\uff0c\u6bcf\u884c\u5305\u542b1\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u4f60\u60f3\u67e5\u8be2\u7684\u4e66\u540d\uff0c\u4e66\u540d\u4ec5\u5305\u542b\u5b57\u6bcd\uff0c\u4e14\u4e0d\u5305\u542b\u7a7a\u683c\uff0c\u957f\u5ea6\u5927\u4e8e0\uff0c\u4e14\u4e0d\u8d85\u8fc7100\u3002", "output_description": "\u3000\u3000\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u6d4b\u8bd5\u6570\u636e\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u6bcf\u4e00\u6b21\u67e5\u8be2\uff0c\u5982\u679c\u6709\u8fd9\u672c\u4e66\uff0c\u5219\u8f93\u51fa\u201cYes\u201d\uff0c\u5426\u5219\u8f93\u51fa\u201cNo\u201d\u3002", "samples": "[{\"input\": \"2\\n1\\nEnglish\\n2\\nMath\\nEnglish\\n2\\nMath\\nEnglish\\n2\\nMath\\nHistory\\n\", \"output\": \"Case #1:\\nNo\\nYes\\nCase #2:\\nYes\\nNo\\n\"}]", "test_case_id": "1996", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 177, "total_accepted_number": 57, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1997, "fields": {"title": "\u77e5\u9053\u81ea\u5df1\u77e5\u9053", "description": "\u3000\u3000\u5927\u56db\u5b9e\u5c5e\u51ac\u5929\u94f6\u88c5\u7d20\u88f9\u4e30\u5e74\u5927\u5229\u65e0\u6127\u56db\u5b63\u8f9b\u52b3\u6696\u5de2\u8fc7\u51ac\u518d\u80b2\u65b0\u751f\u5e0c\u671b!<p></p>\u3000\u3000\u5927\u56db,\u770b\u7740\u4e00\u5f20\u5f20\u7b11\u8138\u5728\u62cd\u7167\u7684\u90a3\u4e00\u523b\u683c\u5916\u7684\u707f\u70c2,\u542c\u7740\u4e00\u53e5\u53e5\u795d\u798f\u5728\u9001\u522b\u7684\u665a\u4f1a\u4e0a\u522b\u6837\u7684\u4f24\u611f,\u60f3\u7740\u4e00\u5e74\u5e74\u5386\u7ec3\u5728\u6210\u957f\u7684\u9053\u8def\u4e0a\u8d8a\u79ef\u8d8a\u591a\u3002<p></p>\u3000\u3000\u5927\u56db\u4e86,\u4ed6\u4eec\u7684\u524d\u9014\u5c31\u5728\u524d\u65b9\u4e86,\u6ca1\u6709\u4efb\u4f55\u4e8b\u60c5\u80fd\u963b\u6321\u4ed6\u4eec\u524d\u8fdb\u7684\u6b65\u4f10,\u6211\u4eec\u603b\u6709\u4e00\u5929\u4e5f\u4f1a\u5982\u4ed6\u4eec\u4e00\u822c,\u53ef\u4ee5\u81ea\u7531\u81ea\u5728\u7684\u98de\u7fd4\u4e86...<p></p>\u3000\u3000\u90a3\u4e00\u523b\u4e0d\u4f1a\u5f88\u8fdc\u7684,\u90a3\u4e00\u523b\u6211\u4eec\u4f1a\u662f\u81ea\u4fe1\u6ee1\u6ee1\u7684,\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u81ea\u5df1\u77e5\u9053...<p></p>\u3000\u3000\u6240\u4ee5\uff0c\u6709\u4eba\u8bf4\uff0c\u4f60\u61c2\u7684...<p></p>\u3000\u3000\u4e00\u4e3e\u624b,\u4e00\u6295\u8db3,\u4e00\u56de\u9996,\u4e00\u7b11\u98a6,\u60ca\u8273\u4e00\u5730\u6d77\u68e0,\u8c01\u8bf4\u6211\u4eec\u4e0d\u4fca\u4fcf;<p></p>\u3000\u3000\u4e00\u8de8\u6b65,\u4e00\u4e0a\u7bee,\u4e00\u963b\u6321,\u4e00\u9632\u5b88,\u6325\u6d12\u4e00\u5730\u6c57\u6c34,\u8c01\u8bf4\u6211\u4eec\u4e0d\u501c\u50a5;<p></p>\u3000\u3000\u5e74\u8f7b\u662f\u6211\u4eec\u7684\u8d44\u672c,\u68a6\u60f3\u662f\u6211\u4eec\u7684\u9a84\u50b2,\u7b11\u95f9\u662f\u6211\u4eec\u7684\u5f20\u626c,\u5450\u558a\u662f\u6211\u4eec\u7684\u6b22\u6b4c;<p></p>\u3000\u3000\u9752\u6625\u7ec8\u4f1a\u901d\u53bb,\u5e74\u534e\u5374\u6c38\u5b58\u8bb0\u5fc6,\u5f81\u9014\u867d\u6709\u574e\u5777,\u68a6\u60f3\u5374\u4e0d\u4f1a\u505c\u6b65;<p></p>\u3000\u3000\u8ba9\u6211\u4eec\u5c3d\u60c5\u7684\u6b22\u7b11,\u5c3d\u529b\u7684\u6b22\u6b4c,\u8fd9\u624d\u662f\u6211\u4eec\u5f20\u626c\u7684\u9752\u6625\uff0c\u4eae\u4e3d\u7684\u4eba\u751f!", "input_description": "\u3000\u3000\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T\uff0c\u4e0d\u8d85\u8fc7100\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\u3002\n\u3000\u3000\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570N\uff0c\u4e0d\u8d85\u8fc7100\uff0c\u8868\u793a\u63a5\u4e0b\u6765\u6709N\u4e2a\u6574\u6570\u7ec4\u6210\u7684\u5e8f\u5217\uff1b\n\u3000\u3000\u7136\u540e\uff0c\u63a5\u4e0b\u6765\u7684\u4e00\u884c\u5305\u542bN\u4e2a\u6574\u6570\uff0c\u6784\u6210\u4e00\u7ec4\u5e8f\u5217\uff0c\u8f93\u5165\u4fdd\u8bc1\u5404\u6574\u6570\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7100\u3002", "output_description": "\u3000\u3000\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4e0d\u540c\u6574\u6570\u7684\u6570\u76ee\uff0c\u5e76\u4f9d\u6b21\u8f93\u51fa\u8fd9\u4e9b\u6574\u6570\uff0c\u4f18\u5148\u8f93\u51fa\u9891\u7387\u9ad8\u7684\u6574\u6570\uff0c\u5982\u679c\u9891\u7387\u76f8\u7b49\uff0c\u8f93\u51fa\u6570\u503c\u5c0f\u7684\u6574\u6570\u3002\n\u3000\u3000\u6bcf\u884c\u4e24\u6570\u4e4b\u95f4\u4ec5\u67091\u4e2a\u7a7a\u683c\uff0c\u6bcf\u884c\u6700\u540e\u4e00\u4e2a\u6570\u7684\u672b\u5c3e\u6ca1\u6709\u7a7a\u683c\u3002", "samples": "[{\"input\": \"2\\n10\\n4 3 2 1 3 2 1 2 1 1\\n4\\n1 2 1 2\\n\", \"output\": \"4 1 2 3 4\\n2 1 2\\n\"}]", "test_case_id": "1997", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 101, "total_accepted_number": 36, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 1999, "fields": {"title": "AJ want a girl (I)", "description": "\u3000\u3000AJ didn&#039;t have a girlfriend even though he is a good boy. Now he loves a girl and wants to make friend with her.<p></p>\u3000\u3000He decides to give some gifts to the girl. There are N kinds of gift in the love shop. One of the i-th kind of gift cost Ci dollars.The girl will be more happy if she receives bigger numbers of one kind of gift in one time. So, for the i-th kind of gift, giving k gifts(the same kind) at the same time will give the girl a happy value of  <p></p>\u3000\u3000\u3000                 Ai + k * (k-Bi)^2 (k &gt;= 1)<p></p>\u3000\u3000Now AJ have M dollars, how many happy value he can give the girl most? Note that AJ didn&#039;t give all the gifts to the girl at the same time, every time he can give only one kind of gift.", "input_description": "\u3000\u3000Each test case contains four lines. The first line are 2 integers N and M.(1 <= N, M <= 10000)\n\u3000\u3000The second line are N integers ,A1, A2, A3...(1 <= Ai <= 10000)\n\u3000\u3000The third line are N integers , B1, B2, B3...(1 <= Bi <= 10000)\n\u3000\u3000The last line are N integers , C1, C2, C3... (1 <= Ci <= 10000)", "output_description": "\u3000\u3000For each test case, print the maximum happy value AJ can give the girl.", "samples": "[{\"input\": \"3 1\\n4 5 6\\n1 1 1\\n1 1 1\\n\", \"output\": \"6\\n\"}]", "test_case_id": "1999", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 8000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 200, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2000, "fields": {"title": "AJ want a girl (II)", "description": "\u3000\u3000AJ didn&#039;t have a girlfriend even though he is a good boy. Now he loves a girl and wants to make friend with her.<p></p>\u3000\u3000He decides to give some gifts to the girl.There are N kinds of gift in the love shop. One of the i-th kind of gift cost Ci dollars. The girl receiving one kind of gifts the first time will be more happy than the second time. So, to the i-th kind of gift, k-th times giving will give the girl a happy value of <p></p>\u3000\u3000\u3000                           Ai - k*Bi<p></p>\u3000\u3000(So, the first time will value Ai-Bi, and the second time value Ai - 2*Bi).<p></p>\u3000\u3000Now AJ have M dollars, how many happy value he can give the girl most? Note that AJ didn&#039;t give all the gifts to the girl in a time, every time he can give only one kind of gift.", "input_description": "\u3000\u3000There are multiple test cases(no more than 10).\n\u3000\u3000Each test case contains four lines. The first line are 2 integers N and M(1 <= N, M <= 300).\n\u3000\u3000The second line are N integers ,A1, A2, A3...(1 <= Ai <= 300)\n\u3000\u3000The third line are N integers , B1, B2, B3...(1 <= Ai <= 300)\n\u3000\u3000The last line are N integers , C1, C2, C3... (1 <= Bi <= 300)", "output_description": "\u3000\u3000For each test case, print the maximum happy value AJ can give the girl.", "samples": "[{\"input\": \"3 1\\n4 5 6\\n1 1 1\\n1 1 1\\n\", \"output\": \"5\\n\"}]", "test_case_id": "2000", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 106, "total_accepted_number": 19, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2001, "fields": {"title": "Archipelago", "description": "\u3000\u3000Archipelago Ber-Islands consists of N islands that are vertices of equiangular and equilateral N-gon. Islands are clockwise numerated. Coordinates of island N1 are (x1, y1), and island N2(x2, y2). Your task is to find coordinates of all N islands.", "input_description": "\u3000\u3000In the first line of input there are N, N1 and N2 (3<=N<=150, 1<=N1,N2<=N, N1!=N2) separated by spaces. On the next two lines of input there are coordinates of island N1 and N2 (one pair per line) with accuracy 4 digits after decimal point. Each coordinate is more than -10000 and less than 10000.", "output_description": "\u3000\u3000Write N lines with coordinates for every island. Write coordinates in order of island numeration. Write answer with 6 digits after decimal point.", "samples": "[{\"input\": \"4 1 3\\n1.0000 0.0000 \\n1.0000 2.0000\\n\", \"output\": \"1.000000 0.000000\\n0.000000 1.000000\\n1.000000 2.000000\\n2.000000 1.000000\\n\"}]", "test_case_id": "2001", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 20, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2002, "fields": {"title": "Equation\uff08I\uff09", "description": "\u3000\u3000Given two integers N and R for the equation described as follows.<p></p>\u3000\u3000X(1) + X(2) + X(3) + ... + X(N) = R<p></p>\u3000\u3000Please find the number of different non-negative solutions for the equation.", "input_description": "\u3000\u3000The first line contains a positive integer T (no more than 100), indicating the number of test cases.\n\u3000\u3000Each of the following T lines represents a test case. For each case, it contains two integers N and R, where 1 <= N <= 10, 0 <= R <= 5.", "output_description": "\u3000\u3000For each case, output the number of different solutions for the equation.", "samples": "[{\"input\": \"2\\n1 4\\n2 4\\n\", \"output\": \"Case #1: 1\\nCase #2: 5\\n\"}]", "test_case_id": "2002", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 248, "total_accepted_number": 85, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2003, "fields": {"title": "Equation\uff08II\uff09", "description": "\u3000\u3000Given two integers N and R for the equation described as follows.<p></p>\u3000\u3000X(1) + X(2) + X(3) + ... + X(N) = R<p></p>\u3000\u3000Please find the number of different non-negative solutions for the equation.", "input_description": "\u3000\u3000The first line contains an positive integer T (no more than 100), indicating the number of test cases.\n\u3000\u3000Each of the following T lines represents a test case. For each case, it contains two integers N and R, where 1 <= N <= 100, 0 <= R <= 50.", "output_description": "\u3000\u3000For each case, output the number of different solutions for the equation. \n\u3000\u3000As the answers may be large, so just output the answers module 1000000007.", "samples": "[{\"input\": \"2\\n1 4\\n2 4\\n\", \"output\": \"Case #1: 1\\nCase #2: 5\\n\"}]", "test_case_id": "2003", "hint": "\u3000\u3000For the 1st case, the only one solution is (4); \\n\u3000\u3000For the 2nd case, the solutions are (0, 4), (1, 3), (2, 2), (3, 1) and (4, 0).", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 138, "total_accepted_number": 42, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2004, "fields": {"title": "Equation\uff08III\uff09", "description": "\u3000\u3000Given an equation described as follows.<p></p>\u3000\u3000X^2 + Y^2 + Z^2 + W^2 = R<p></p>\u3000\u3000Please find the number of different non-negative solutions for the equation.", "input_description": "\u3000\u3000The first line contains an positive integer T (no more than 200), indicating the number of test cases.\n\u3000\u3000Each of the following T lines represents a test case. For each case, it contains only one integers R, where 0 <= R <= 1,000,000.", "output_description": "\u3000\u3000For each case, output the number of different solutions for the equation. ", "samples": "[{\"input\": \"3\\n9\\n999\\n999999\\n\", \"output\": \"Case #1: 16\\nCase #2: 760\\nCase #3: 1021440\\n\"}]", "test_case_id": "2004", "hint": "\u3000\u3000For the 1st case, we have the solutions: \\n\u3000\u3000(0, 0, 0, 3), (0, 0, 3, 0), (0, 3, 0, 0), (3, 0, 0, 0),\\n\u3000\u3000(0, 1, 2, 2), (0, 2, 1, 2), (0, 2, 2, 1), (1, 0, 2, 2),\\n\u3000\u3000(1, 2, 0, 2), (1, 2, 2, 0), (2, 0, 1, 2), (2, 0, 2, 1),\\n\u3000\u3000(2, 1, 0, 2), (2, 1, 2, 0), (2, 2, 0, 1), (2, 2, 1, 0).", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 42, "total_accepted_number": 16, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2005, "fields": {"title": "Groups (I)", "description": "\u3000\u3000There are n people in the class and person pi has his value vi. Now, we&#039;d like to put them into different groups. In each group, there must be two people, and the value of this group is equal to the minimum of two member&#039;s values. For example, if pi and pj are in the same group, the value of their group is min(pi,pj). Now, your task is to tell the maximum and minimum of the sum of all groups.", "input_description": "\u3000\u3000There are several test cases.\n\u3000\u3000In each case, there is an even integer n(n<=10000) in the first line. In the second line, there are n integers indicating the value of each person.", "output_description": "\u3000\u3000For each case, print the maximum and the minimum described above.", "samples": "[{\"input\": \"4\\n2 3 4 5\\n\", \"output\": \"6 5\\n\"}]", "test_case_id": "2005", "hint": "\u3000\u3000For the 1st case, if we group people as (2,3) (4,5), we can get maximum value-sum 6; if we group people as (2,4) (3,5), we can get minimum value-sum 5.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 252, "total_accepted_number": 69, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2006, "fields": {"title": "Groups (II)", "description": "\u3000\u3000There are n people in the class. Now, we&#039;d like to put them into different groups. In each group, there can be any number of people. But in a group, any two of its members should be friends. Of course, it&#039;s ok if there&#039;s only one person in a group. We have known that there are m pairs of friends, and each person has two friends at most, maybe none. Your task is to calculate what&#039;s the minimum of groups&#039; number we can get?", "input_description": "\u3000\u3000There are several test cases.\n\u3000\u3000In each case, there are 2 integers n,m(n,m<=10000) in the first line. In the next m lines, there are 2 distinct integers a,b(1<=a,b<=n) each line indicating that a and b are friends. ", "output_description": "\u3000\u3000For each case, print the minimum of groups' number.", "samples": "[{\"input\": \"3 3\\n1 2\\n2 3\\n1 3\\n\", \"output\": \"1\\n\"}]", "test_case_id": "2006", "hint": "For the sample, people 1,2,3 can be grouped into the same group.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 47, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2007, "fields": {"title": "Lies Come True", "description": "\u3000\u3000There is an old saying &quot;Tell a lie for three or more times, it will come true&quot;. Now we get many sentences of lies, according the old saying, how many of them have come true?", "input_description": "\u3000\u3000There's only one test case.\n\u3000\u3000In the first line, there's an integer n (n<=10000) representing the number of lies we have. In the next n lines, each line has a lie sentence containing lower-case letters and blank space. It guaranteed the length of each lie is no more than 20.", "output_description": "\u3000\u3000Print the number of lies that have come true.", "samples": "[{\"input\": \"7\\ndede is smart\\ndede is smart\\ni am dede\\ni am not smart\\ndede is smart\\ndede is smart\\ni am not smart\\n\", \"output\": \"1\\n\"}]", "test_case_id": "2007", "hint": "\u3000\u3000For the sample, \u201cdede is smart\u201d has been mentioned four (not less than three) times, so it comes true. Other sentences are mentioned less than three times, so they don\u2019t come true.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 332, "total_accepted_number": 54, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2008, "fields": {"title": "7509's Computers", "description": "\u3000\u3000\u3000There are n computers in 7509, and m people want to practice on them. Each time, a person will use only one computer. Everyone has a favorite period of time to practice skills, and if the person begins to use the computer, he won&#039;t leave until his favorite time period ends. Now, if given everyone&#039;s time period, can you tell what&#039;s the maximum of people we can satisfy.", "input_description": "\u3000\u3000There are two integers n,m (1<=n<=50, 1<=m<=1000) in the first line. In next m lines, each has two integers s,e indicating this person's favorite time period is [s,e]. (1<=s<=e<=10^9)", "output_description": "\u3000\u3000Print the maximum of people can be satisfied.", "samples": "[{\"input\": \"2 3\\n1 24\\n2 4\\n4 5\\n\", \"output\": \"2\\n\"}]", "test_case_id": "2008", "hint": "\u3000\u3000\u3000If we satisfy any 2 of the given 3 people, then at the time of 4, 2 computers are occupied by 2 people, then the third person can\u2019t be satisfied. So the maximum is 2.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 24, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2009, "fields": {"title": "a^b%c", "description": "\u3000\u3000\u3000This is a simple problem. What&#039;s the result a^b%c\uff1f", "input_description": "\u3000\u3000\u3000There are several test cases.\n\u3000\u3000\u3000In each case, there is one line containing 3 integers a,b,c (-2^60<=a<=2^60, 1<=b,c<=2^60).", "output_description": "\u3000\u3000For each case, print a^b%c.", "samples": "[{\"input\": \"2 3 3\\n-2 1 3\", \"output\": \"2\\n1\"}]", "test_case_id": "2009", "hint": "\u3000\u3000\u3000For the first case: 2^3%3=8%3=2\\n\u3000\u3000\u3000For the second case: (-2)^1%3=(-2)%3=1", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 271, "total_accepted_number": 30, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2010, "fields": {"title": "Airport Scheduling", "description": "\u3000\u3000\u3000The airport scheduling is very complicated. There are N runways. And for one runway, the time occupied by a plane to land is t1 and the time occupied by a plane to take off is t2. The start time is 0, then every minute, airport will receive a message to tell the number of planes to land is A and take off is B at this moment.<p></p>\u3000\u3000\u3000The principle of airport scheduling is that landing&#039;s priority is higher than takeoff&#039;s priority. Every plane has an id. If landing, we should start from the 1st plane, and if takeoff we should start with the 5001th plane. The waiting time for a plane is regarded as the time from it asks for a runway to it occupied a runway. Every runway has an id starting from 1. For a runway, its busy time is the time occupied by plane to land or take off.", "input_description": "\u3000\u3000\u3000In the first line, there are 3 integers N,t1,t2 (N,t1,t2<10) described before.\n\u3000\u3000\u3000In next lines, each one has 2 integers A,B.\n\u3000\u3000\u3000The sum of all A and B will be no more than 5001.\n\u3000\u3000\u3000The message receiving ends when there is a pair of A and B both less than 0, but the planes that have asked for land or take off still need to do their job.", "output_description": "\u3000\u3000You should print out the information below:\n\u3000\u3000The finish time when all planes that have send a request to land or take off have done their jobs: \"simulation time: %4d\"\n\u3000\u3000For all planes wanting to land, their average time to wait: \"average waiting time of landing: %4.1f\"\n\u3000\u3000For all planes wanting to take off, their average time to wait: \"average waiting time of takeoff: %4.1f\"\n\u3000\u3000For each runway, print its id and busy time: \"runway %02d busy time: %4d\"\n\u3000\u3000For all runways, their average busy time: \"runway average busy time percentage: %4.1f\"\n\u3000\u3000See sample to find more details.", "samples": "[{\"input\": \"1 2 3\\n1 2\\n2 1\\n0 0\\n0 0\\n0 0\\n-1 -1\", \"output\": \"simulation time:   15\\naverage waiting time of landing:  1.3\\naverage waiting time of takeoff:  8.7\\nrunway 01 busy time:   15\\nrunway average busy time percentage: 100.0%\"}]", "test_case_id": "2010", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 7, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2012, "fields": {"title": "GCD Again", "description": "\u3000\u3000GCD means greatest common divisor. Given 5 integers: a, b, c, d, k, you&#039;re to find x in a...b, y in c...d that GCD(x, y) = k. GCD(x, y) means the greatest common divisor of x and y. Since the number of choices may be very large, you&#039;re only required to output the total number of different number pairs.<p></p>\u3000\u3000Please notice that, (x=5, y=7) and (x=7, y=5) are considered to be the same.", "input_description": "\u3000\u3000The input consists of several test cases. The first line of the input is the number of the cases. There are no more than 3,000 cases.\n\u3000\u3000Each case contains five integers: a, b, c, d, k, 0 < a <= b <= 100,000, 0 < c <= d <= 100,000, 0 <= k <= 100,000, as described above.", "output_description": "\u3000\u3000For each test case, print the number of choices. Use the format in the example.", "samples": "[{\"input\": \"2\\n1 3 1 5 1\\n1 11014 1 14409 9\", \"output\": \"Case 1: 9\\nCase 2: 736427\\n\"}]", "test_case_id": "2012", "hint": "\u3000\u3000\u3000In the first sample case, there are 9 pair of numbers, which GCD is 1. They\u2019re (1,1), (1,2), (1,3), (1,4), (1,5), (2,3), (2,5), (3,4), (3,5).", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 22, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2013, "fields": {"title": "Nine-Number", "description": "\u3000\u3000\u3000We define that if a number contains digit &#039;9&#039;, or can be divided by 9, or the sum of all its digits can be divided by 9, then it&#039;s a Nine-Number. <p></p>\u3000\u3000\u3000This is the 9&#039;th SWJTU programming contest. To celebrate the great day, we want to find the sum of all Nine-Number between [L,R]. Can you lend a hand?", "input_description": "\u3000\u3000There are several test cases.\n\u3000\u3000In each case, there is one line containing 2 integers L and R (1<=L<=R<=10^9).", "output_description": "\u3000\u3000For each case, print the sum of all Nine-Number between [L,R].", "samples": "[{\"input\": \"1 10\\n1 20\", \"output\": \"9\\n46\"}]", "test_case_id": "2013", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2014, "fields": {"title": "Palindrome Again", "description": "\u3000\u3000\u3000Given a string S, you should only focus on Latin letters and ignore blank space, lower or upper case or other characters, then find the longest palindrome among the sub-strings of S. When you print out the longest palindrome, you must print the answer just as how it&#039;s input.", "input_description": "\u3000\u3000There are several test cases.\n\u3000\u3000In each case, there is a string S in a simple line. Its length is no more than 10000. And the palindrome's length is no more than 1000.", "output_description": "\u3000\u3000\u3000For each case, print the longest palindrome described before. \n\u3000\u3000\u3000If there are many palindrome sub-strings of the same length, you should print the most left one.", "samples": "[{\"input\": \"Hello, I am air.\\nDog is SI god$(quat)s creation~\", \"output\": \"I am ai\\nDog is SI god\"}]", "test_case_id": "2014", "hint": "\u3000\u3000For the first sample case, when we focus on Latin letters, the string turns into \u201chelloiamair\u201d, the longest palindrome among its sub-strings is \u201ciamai\u201d, so we should print its original form as the input, \u201cI am ai\u201d.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2016, "fields": {"title": "Triangle Area", "description": "\u3000\u3000After a 7.0-magnitude earthquake hit Lushan county of Ya&#039;an city, rescuing troops act quickly to save our people\u2019s life. There is a rectangular area for them to detect. <p></p>\u3000\u3000To be more specific, the lowest left point is (0,0) and the highest right point is (m,n). Now, they have three different monitors and will place them on three different point in this area to form a triangle. The x and y of these three points are all integers. Can you tell me how many ways can we place the monitors to make the area of this triangle is even.", "input_description": "\u3000\u3000There are several test cases.\n\u3000\u3000In each case, there is one line containing 2 integers m and n (1<=m,n<=10^9).", "output_description": "\u3000\u3000\u3000For each case, print how many ways to place the monitors to make the triangle area is even, modulo 1000000007.", "samples": "[{\"input\": \"1 2\\n2 2\", \"output\": \"0\\n60\"}]", "test_case_id": "2016", "hint": "\u3000\u3000\u3000You must know that there points can\u2019t be on the same line, as it\u2019s not a triangle. And three monitors are distinct, so they exchange places, the way to manage is regarded different.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 4, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2018, "fields": {"title": "LOVE ID", "description": "\u3000\u3000\u3000After a 7.0-magnitude earthquake hit Lushan county of Ya&#039;an city, many people want to send messages to their families and friends. Thus, we produce a kind of ID called LOVE ID for them to contact with each other. <p></p>\u3000\u3000\u3000LOVE ID has a form &lt; username&gt;@&lt; hostname&gt;[/resource], where<p></p>\u3000\u3000\u3000&lt; username&gt; \u2015 is a sequence of Latin letters (lowercase or uppercase), digits or \u2018_\u2019(underscores characters), the length of &lt; username&gt; is between 1 and 16, inclusive.<p></p>\u3000\u3000\u3000&lt; hostname&gt; \u2015 is a sequence of word separated by periods (characters \u2018.\u2019), where each word should contain only characters allowed for &lt; username&gt;, the length of each word is between 1 and 16, inclusive. The length of &lt; hostname&gt; is between 1 and 32, inclusive.<p></p>\u3000\u3000\u3000&lt; resource&gt; \u2015 is a sequence of Latin letters (lowercase or uppercase), digits or \u2018_\u2019(underscores characters), the length of &lt; resource&gt; is between 1 and 16, inclusive.<p></p>\u3000\u3000\u3000There are two samples of correct LOVE IDs:<p></p>\u3000\u3000\u3000 &quot;lushan@swjtu.com&quot;, &quot;yaan@acm.swjtu.edu.cn/contest&quot;.<p></p>\u3000\u3000\u3000Your task is to write program which checks if given string is a correct LOVE ID.", "input_description": "\u3000\u3000\u3000There are several test cases.\n\u3000\u3000\u3000In each case, the input contains of a single line. The line has the length between 1 and 100 characters, inclusive. Each characters has ASCII-code between 33 and 127, inclusive. If it's a correct LOVE ID, then print the username on a single line", "output_description": "\u3000\u3000If it's a correct LOVE ID, then print the username on a single line. Otherwise print \u201cNO\u201d.", "samples": "[{\"input\": \"lushan@acm.swjtu.edu.cn/contest\\nyaan@sad/angle!\\nBest_wishes@lushan_yaan\", \"output\": \"lushan\\nNO\\nBest_wishes\"}]", "test_case_id": "2018", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 151, "total_accepted_number": 19, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2019, "fields": {"title": "We love Ya'an", "description": "\u3000\u3000\u3000A 7.0-magnitude earthquake hit Lushan county of Ya&#039;an city in south China&#039;s Sichuan province at 8:02 am Saturday, April 20, 2013, according to the China Earthquake Networks Center (CENC). The epicenter, with a depth of 13 km, was monitored at 30.3 degrees north latitude and 103.0 degrees east longitude. The quake was strongly felt by residents in Sichuan&#039;s capital city of Chengdu, which is about 140 kilometers from Ya&#039;an.<p></p>\u3000\u3000\u3000Up to 156 have been killed in the 7.0-magnitude quake in Sichuan, said a work conference held by the provincial government, CCTV reported at 20:25 pm Saturday, April 20, 2013. We are very sad to hear this bad news; we hope more people can survive; we are blessing our compatriots, we love Ya\u2019an!", "input_description": "\u3000\u3000The first line contains an integer T, no more than 30, indicating the number of test cases. Each of the following T lines represents a test case. Each case contains an integer S, no more than 10^9, representing the seconds after the earthquake.", "output_description": "\u3000\u3000For each case, print the case number beginning with 1 and the current time. The format is \u201cHH:MM:SS Month/Day/Year\u201d, which you can understand from the Sample Output. Assume the 7.0-magnitude earthquake happened at 08:02:00 4/20/2013.", "samples": "[{\"input\": \"5\\n1\\n123\\n123456\\n432316680\\n432316679\\n\\n\", \"output\": \"Case #1: 08:02:01 4/20/2013\\nCase #2: 08:04:03 4/20/2013\\nCase #3: 18:19:36 4/21/2013\\nCase #4: 00:00:00 1/1/2027\\nCase #5: 23:59:59 12/31/2026\\n\"}]", "test_case_id": "2019", "hint": "\u5bf9\u4e8e\u67d0\u4e00\u5e74\u4efdY\uff0c\u5982\u679cY\u80fd\u88ab400\u6574\u9664\uff0c\u5219\u4e3a\u95f0\u5e74\uff1b\u5426\u5219\uff0c\u5982\u679cY\u4e0d\u80fd\u88ab100\u6574\u9664\u4e14\u80fd\u88ab4\u6574\u9664\uff0c\u5219\u4e3a\u95f0\u5e74\u3002\u5176\u4ed6\u60c5\u51b5\uff0c\u4e3a\u5e73\u5e74\u3002\\n\u5929\u6570\u4e3a31\u7684\u6708\u4efd\uff1a1\u30013\u30015\u30017\u30018\u300110\u300112\uff1b\u5929\u6570\u4e3a30\u7684\u6708\u4efd\uff1a4\u30016\u30019\u300111\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 253, "total_accepted_number": 46, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2020, "fields": {"title": "\u6574\u6570\u5212\u5206", "description": "\u4e00\u4e2a\u6b63\u6574\u6570\u53ef\u4ee5\u5199\u6210\u591a\u4e2a\u6b63\u6574\u6570\u76f8\u52a0\u7684\u5f62\u5f0f\uff0c\u6bd4\u59824\u53ef\u4ee5\u5199\u6210\u4ee5\u4e0b\u5f62\u5f0f:<p></p><p></p>4=4<p></p><p></p>4=3+1<p></p><p></p>4=2+2<p></p><p></p>4=2+1+1<p></p><p></p>4=1+1+1+1<p></p><p></p>\u6ce8\u610f: 4=3+1\u548c4=1+3\u662f\u4e00\u6837\u7684\uff0c\u73b0\u5728\u591a\u52a0\u4e00\u4e2a\u8981\u6c42\uff0c\u5373\u7b49\u5f0f\u53f3\u8fb9\u7684\u6570\u4e0d\u80fd\u6709\u76f8\u540c\u7684\u6570\u3002<p></p><p></p>\u6bd4\u5982\u5bf9\u4e8e4\u6765\u8bf4\uff0c\u540e\u97623\u79cd\u5212\u5206\u65b9\u5f0f\u662f\u4e0d\u7b26\u5408\u8981\u6c42\u7684\uff0c\u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2aN\uff0c\u95ee\u6709\u591a\u5c11\u79cd\u5212\u5206\u65b9\u6cd5\u3002<p></p>", "input_description": "\u7b2c\u4e00\u884c\u6709\u4e2a\u6b63\u6574\u6570T\uff0c\u4ee3\u8868\u6570\u636e\u7ec4\u6570\uff08T<=1000\uff09\uff1b\u63a5\u4e0b\u6765\u6709T\u884c\uff0c\u6bcf\u884c\u6709\u4e2a\u6574\u6570N (1<=N<=1000) \u3002", "output_description": "\u8f93\u51faT\u884c\uff0c\u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868N\u7684\u5212\u5206\u6570\uff0c\u8fd9\u4e2a\u6570\u53ef\u80fd\u5f88\u5927\uff0c\u53ea\u9700\u8f93\u51fa\u5bf920072288\u6c42\u6a21\u540e\u7684\u503c\u3002", "samples": "[{\"input\": \"3\\n4\\n5\\n10\\n\", \"output\": \"2\\n3\\n10\\n\"}]", "test_case_id": "2020", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 150, "total_accepted_number": 43, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2021, "fields": {"title": "\u5dee\u503c\u6700\u5927\uff08I\uff09", "description": "\u7ed9\u5b9a\u957f\u5ea6\u4e3aN\u7684\u5e8f\u5217\uff0c{A(1)\uff0cA(2)\uff0cA(3)\uff0c...,A(N)}\uff0c\u8bf7\u9009\u62e9\u4e24\u4e2a\u6570A(i)\u548cA(j)\uff0c\u5176\u4e2d\u67091 &lt;= i &lt; j &lt;= N\uff0c\u4f7f\u5f97A(j)-A(i)\u6700\u5927\u3002", "input_description": "\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u5305\u542b\u4e24\u884c\u3002\n\u7b2c1\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570N\uff0c\u5176\u4e2d2 <= N <= 10^6\uff1b\u7b2c2\u884c\u5305\u542bN\u4e2a\u6570\uff0c\u5206\u522b\u8868\u793aA(1)\uff0cA(2)\uff0cA(3)\uff0c...\uff0cA(N)\uff0c\u8f93\u5165\u4fdd\u8bc1\u6570\u636e\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc710^9\u3002\n", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u7b54\u6848\u3002", "samples": "[{\"input\": \"2\\n1 2\\n\", \"output\": \"1\\n\"}]", "test_case_id": "2021", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 145, "total_accepted_number": 26, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2022, "fields": {"title": "\u5dee\u503c\u6700\u5927\uff08II\uff09", "description": "\u7ed9\u5b9a\u957f\u5ea6\u4e3aN\u7684\u5e8f\u5217\uff0c{A(1)\uff0cA(2)\uff0cA(3)\uff0c...,A(N)}\uff0c\u8bf7\u9009\u62e94\u4e2a\u6570A(x)\u3001A(y)\u3001A(z)\u548cA(w)\uff0c\u5176\u4e2d\u67091 &lt;= x &lt; y &lt; z &lt; w &lt;=N\uff0c\u4f7f\u5f97A(y)-A(x)+A(w)-A(z)\u6700\u5927\u3002", "input_description": "\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u5305\u542b\u4e24\u884c\u3002\n\u7b2c1\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570N\uff0c\u5176\u4e2d4 <= N <= 10^6\uff1b\u7b2c2\u884c\u5305\u542bN\u4e2a\u6570\uff0c\u5206\u522b\u8868\u793aA(1)\uff0cA(2)\uff0cA(3)\uff0c...,A(N)\uff0c\u8f93\u5165\u4fdd\u8bc1\u6570\u636e\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc710^9\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u7b54\u6848\u3002", "samples": "[{\"input\": \"4\\n1 2 3 4\\n\", \"output\": \"2\\n\"}]", "test_case_id": "2022", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 8, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2023, "fields": {"title": "\u6539\u8fb9\u6700\u5c11", "description": "\u73b0\u6709\u4e00\u9897\u6709\u5411\u6811\uff0c\u8282\u70b9\u6570\u4e3aN\uff08\u7f16\u53f7\u4f9d\u6b21\u4e3a1,2,...,N\uff09\uff0c\u8fb9\u6570\u4e3aN-1\u3002\u73b0\u5728\u9700\u8981\u9009\u5b9a\u4e00\u4e2a\u8282\u70b9\uff0c\u4f7f\u5f97\u8be5\u8282\u70b9\u5230\u5176\u4ed6\u4efb\u610f\u8282\u70b9\u90fd\u5b58\u5728\u4e00\u6761\u8def\u5f84\u3002\u56e0\u4e3a\u8fd9\u4e9b\u8fb9\u662f\u6709\u5411\u7684\uff0c\u6240\u4ee5\u5f53\u4f60\u9009\u62e9\u67d0\u4e2a\u8282\u70b9\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u6539\u53d8\u67d0\u4e9b\u8fb9\u7684\u65b9\u5411\uff0c\u624d\u80fd\u4f7f\u5f97\u4ece\u8fd9\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u80fd\u591f\u5230\u8fbe\u4efb\u610f\u8282\u70b9\u3002\u4f60\u7684\u4efb\u52a1\u5c31\u662f\uff0c\u5bfb\u627e\u5177\u6709\u6539\u53d8\u8fb9\u65b9\u5411\u4e2a\u6570\u6700\u5c11\u7684\u8fd9\u4e2a\u8282\u70b9\uff0c\u5f53\u7136\uff0c\u8fd9\u4e2a\u8282\u70b9\u53ef\u80fd\u4e0d\u552f\u4e00\uff0c\u6240\u4ee5\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u6700\u5c11\u6539\u53d8\u8fb9\u65b9\u5411\u7684\u4e2a\u6570\u5373\u53ef\u3002", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u5305\u542b1\u4e2a\u6574\u6570N\uff082<=N<=10^4\uff09\uff0c\u8868\u793a\u8282\u70b9\u4e2a\u6570\u3002\n\u63a5\u4e0b\u6765\u5305\u542bN-1\u884c\uff0c\u6bcf\u884c2\u4e2a\u6574\u6570\uff0c\u5373u\u548cv\uff0c\u8868\u793a\u6709\u4e00\u6761\u8fb9<u,v>\uff0c\u5176\u65b9\u5411\u7531u\u6307\u5411v\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u6539\u53d8\u8fb9\u65b9\u5411\u7684\u4e2a\u6570\u6700\u5c11\u7684\u503c\u3002", "samples": "[{\"input\": \"3\\n1 2\\n3 2\", \"output\": \"1\\n\"}]", "test_case_id": "2023", "hint": "\u63d0\u793a\uff1a\u6539\u53d8\u8fb9&lt;1,2&gt;\u7684\u65b9\u5411\uff0c\u53ef\u4ee5\u4ece\u8282\u70b93\u5230\u8fbe\u8282\u70b91\uff0c\u53733-&gt;2-&gt;1\uff0c\u4ece\u8282\u70b93\u4e5f\u53ef\u4ee5\u5230\u8fbe\u8282\u70b92\uff0c\u53733-&gt;2\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 7, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2024, "fields": {"title": "\u6807\u7a0b\u4e5f\u51fa\u9519", "description": "\u6bcf\u4e2aACMer\u90fd\u4f1a\u4e0d\u65ad\u4f7f\u7528\u548c\u6298\u817e\u6570\u7ec4\uff0cshrimp\u4e5f\u7ecf\u5e38\u5728\u6570\u7ec4\u4e0a\u9762\u8df3\u5751\uff0c\u8bb0\u4e0d\u5f97\u591a\u5c11\u6b21\u9898\u76ee\u662f10\u4e07\u7684\u6570\u7ec4\u5374\u5f00\u6210\u4e861\u4e07\u800c\u5f97\u5230RE\uff0c\u4e5f\u4e0d\u8bb0\u5f97\u591a\u6b21\u5fd8\u8bb0\u4e86\u521d\u59cb\u5316\u6570\u7ec4\u800c\u5f97\u5230WA\u3002\u5f53\u7136\u5e76\u4e0d\u662f\u4f60\u521d\u59cb\u5316\u4e86\u6570\u7ec4\u4f60\u5c31\u80fd\u6b63\u786e\uff0c\u56e0\u4e3a\u8ba1\u7b97\u7a0b\u5e8f\u6b63\u786e\u800c\u6807\u7a0b\u51fa\u73b0\u9519\u8bef\u7684\u65f6\u5019\uff0c\u53ef\u5c31\u7ea0\u7ed3\u4e86\u3002<p></p><p></p>2012\u5e74\u7684\u590f\u5929\uff0cShrimp 3\u4eba\u7ec4\u8e0f\u4e0a\u4e86\u91d1\u534e\u6218\u573a\uff0c\u4ed6\u4eec\u9047\u5230\u4e86\u8fd9\u6837\u4e00\u4e2a\u9898\u76ee\uff0c\u9898\u610f\u5f88\u7b80\u5355\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4A{1...n}\uff0c\u7136\u540e\u5728\u4e0a\u9762\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\uff1a<p></p><p></p>Set   i   x\uff1a   \u5c06A[i]\u91cd\u7f6e\u4e3ax\uff0c\u5373A[i]=x\uff1b<p></p>Add   i   x\uff1a   \u5c06\u7b2ci\u4e2a\u6570A[i]\u52a0\u4e0ax\uff0c\u5373A[i]+=x\uff1b<p></p>Q     a   b\uff1b   \u6c42\u51faF\uff08a\uff0cb\uff09 \uff0c\u5176\u4e2dF\uff08a\uff0cb\uff09\u7684\u8ba1\u7b97\u65b9\u6cd5\u662f\uff1aF\uff08a\uff0cb\uff09=[A(a)*A(a+1)*...*A(b-1)*A(b)]^20092134\u3002<p></p><p></p>Shrimp\u5f88\u5feb\u6572\u5b8c\u4e86\u9898\u76ee\uff0c\u4ea4\u4e0a\u53bb\u7126\u6025\u7b49\u5f85\u4e2d\u5374\u8fd4\u56de\u4e00\u4e2aWA\uff0c\u4ed6\u4eec\u4e0d\u505c\u7684Debug\u5374\u6ca1\u6709\u53d1\u73b0\u9519\u8bef\u3002\u800c\u4e8b\u5b9e\u4e0a\u5374\u662f\u6807\u7a0b\u5fd8\u8bb0\u4e86\u521d\u59cb\u5316\u6570\u7ec4\u800c\u8bef\u5224\u4e86\u3002<p></p><p></p>\u806a\u660e\u7684\u4f60\u4e5f\u6765\u505a\u4e00\u505a\u8fd9\u4e2a\u9898\u76ee\u5427\uff01<p></p>", "input_description": "\u8f93\u5165\u6709T\u7ec4\u6570\u636e\uff0cT <= 25\uff1b\n\u63a5\u4e0b\u6765\u4e3aT\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\u7b2c\u4e00\u884c\u4e3aN\uff0cM \uff081 < N <= 500,000\uff09(0 <= M <= 100)\uff0c\u5176\u4e2dN\u8868\u793a\u6570\u7ec4A\u7684\u5927\u5c0f\uff0cM\u8868\u793a\u64cd\u4f5c\u6570\u3002\n\u63a5\u4e0b\u6765\u4e00\u884c\u4e3aN\u4e2a\u6570\uff0c\u5206\u522b\u8868\u793a A[1],A[2], ..., A[N]\uff1b\n\u63a5\u4e0bM\u7ec4\u64cd\u4f5c\u6570\uff0c\u64cd\u4f5c\u683c\u5f0f\u5982\u9898\u76ee\u63cf\u8ff0\u3002\nSet   i   x  (i <= N, 0 <= x <= 10^8)\nAdd   i   x  (i <= N, 0 <= x <= 10^8)\nQ     a   b  (1 <= a <= b <= 10^8)", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8bd5\u7ed9\u51faQ\u547d\u4ee4\u7684\u7ed3\u679c\u3002\n\u5982\u679cQ\u3000a\u3000b\u7684\u67e5\u8be2\u8303\u56f4\u8d85\u51fa\u4e4b\u524d\u5176\u4ed6\u4efb\u610f\u7ec4\u7684\u6d4b\u8bd5\u6570\u7ec4\u7684\u8303\u56f4\uff0c\u8f93\u51faRE\u548c-1\uff1b\n\u5982\u679cQ\u3000a\u3000b\u7684\u67e5\u8be2\u8303\u56f4\u53ea\u662f\u8d85\u51fa\u5f53\u524d\u7ec4\u6d4b\u8bd5\u6570\u7ec4\u7684\u8303\u56f4\uff0c\u8f93\u51faWA\uff0c\u7136\u540e\u518d\u8f93\u51fa\u7ed3\u679c\uff1b\n\u5982\u679cQ\u3000a\u3000b\u7684\u67e5\u8be2\u8303\u56f4\u6ca1\u6709\u8d85\u51fa\u4e4b\u524d\u5176\u4ed6\u4efb\u610f\u7ec4\u4ee5\u53ca\u5f53\u524d\u7ec4\u7684\u6d4b\u8bd5\u6570\u7ec4\u8303\u56f4\uff0c\u8f93\u51faAC\uff0c\u7136\u540e\u518d\u8f93\u51fa\u7ed3\u679c\uff1b\n\u9664\u6b64\u4e4b\u5916\uff0c\u8f93\u5165\u4fdd\u8bc1Set\u4e0eAdd\u7684\u8303\u56f4\u90fd\u6b63\u786e\uff1b\u7531\u4e8eF\uff08a\uff0cb\uff09\u7684\u7ed3\u679c\u592a\u5927\uff0c\u6240\u4ee5\u53ea\u9700\u8f93\u51fa\u7ed3\u679c\u5bf920092134\u53d6\u6a21\uff0c\u8fd9\u91cc\u8981\u6c42\u9664\u4e86\u5148\u8f93\u51fa\u53d6\u6a21\u7ed3\u679c\u5916\u8fd8\u8981\u518d\u8f93\u51faF\uff08a\uff0cb\uff09\u7684\u4f4d\u6570length\uff0c\u8f93\u51fa\u683c\u5f0f\u89c1\u6837\u4f8b\u3002", "samples": "[{\"input\": \"2\\n6 1\\n1 1 1 1 1 1\\nQ 1 3\\n3 5\\n5 2 1\\nAdd 1 -4\\nQ 1 1\\nSet 2 1\\nQ 1 9\\nQ 1 5\\n\", \"output\": \"Case #1:\\nAC 1 1\\nCase #2:\\nAC 1 1\\nRE -1\\nWA 1 1\\n\"}]", "test_case_id": "2024", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 32, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2025, "fields": {"title": "\u6574\u6570\u5212\u5206(II)", "description": "\u4e00\u4e2a\u6b63\u6574\u6570\u53ef\u4ee5\u5199\u6210\u591a\u4e2a\u6b63\u6574\u6570\u76f8\u52a0\u7684\u5f62\u5f0f\uff0c\u6bd4\u59824\u53ef\u4ee5\u5199\u6210\u4ee5\u4e0b\u5f62\u5f0f: <p></p><p></p>4=4 <p></p><p></p>4=3+1 <p></p><p></p>4=2+2 <p></p><p></p>4=2+1+1 <p></p><p></p>4=1+1+1+1 <p></p><p></p>\u6ce8\u610f: 4=3+1\u548c4=1+3\u662f\u4e00\u6837\u7684\uff0c\u73b0\u5728\u591a\u52a0\u4e00\u4e2a\u8981\u6c42\uff0c\u5373\u7b49\u5f0f\u53f3\u8fb9\u7684\u6570\u4e0d\u80fd\u6709\u76f8\u540c\u7684\u6570\u3002 <p></p><p></p>\u6bd4\u5982\u5bf9\u4e8e4\u6765\u8bf4\uff0c\u540e\u97623\u79cd\u5212\u5206\u65b9\u5f0f\u662f\u4e0d\u7b26\u5408\u8981\u6c42\u7684\uff0c\u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2aN\uff0c\u95ee\u6709\u591a\u5c11\u79cd\u5212\u5206\u65b9\u6cd5\u3002 ", "input_description": "\u7b2c\u4e00\u884c\u6709\u4e2a\u6b63\u6574\u6570T\uff0c\u4ee3\u8868\u6570\u636e\u7ec4\u6570\uff08T<=1000\uff09\uff1b\u63a5\u4e0b\u6765\u6709T\u884c\uff0c\u6bcf\u884c\u6709\u4e2a\u6574\u6570N (1<=N<=50,000) \u3002", "output_description": "\u8f93\u51faT\u884c\uff0c\u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868N\u7684\u5212\u5206\u6570\uff0c\u8fd9\u4e2a\u6570\u53ef\u80fd\u5f88\u5927\uff0c\u53ea\u9700\u8f93\u51fa\u5bf920072288\u6c42\u6a21\u540e\u7684\u503c\u3002", "samples": "[{\"input\": \"3\\n4\\n5\\n10\\n\", \"output\": \"2\\n3\\n10\\n\"}]", "test_case_id": "2025", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 43, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2035, "fields": {"title": "\u5357\u90ed\u5148\u751f", "description": "Now Sailormoon girls want to tell you a ancient idiom story named \u201cbe there just to make up the number\u201d. The story can be described by the following words.<p></p>In the period of the Warring States (475-221 BC), there was a state called Qi. The king of Qi was so fond of the yu, a wind instrument, that he had a band of many musicians play for him every afternoon. The number of musicians is just a square number.Beacuse a square formation is very good-looking.Each row and each column have X musicians.<p></p>The king was most satisfied with the band and the harmonies they performed. Little did the king know that a member of the band, Nan Guo, was not even a musician. In fact, Nan Guo knew nothing about the yu. But he somehow managed to pass himself off as a yu player by sitting right at the back, pretending to play the instrument. The king was none the wiser. But Nan Guo&#039;s charade came to an end when the king&#039;s son succeeded him. The new king, unlike his father, he decided to divide the musicians of band into some equal small parts. He also wants the number of each part is square number. Of course, Nan Guo soon realized his foolish would expose, and he found himself without a band to hide in anymore.So he run away soon.<p></p>After he leave,the number of band is Satisfactory. Because the number of band now would be divided into some equal parts,and the number of each part is also a square number.Each row and each column all have Y musicians.", "input_description": "There are multiple test cases. Each case contains a positive integer N ( 2 <= N < 29). It means the band was divided into N equal parts. The folloing number is also a positive integer K ( K < 10^9).\n", "output_description": "There may have many positive integers X,Y can meet such conditions.But you should calculate the Kth smaller answer of X. The Kth smaller answer means there are K ? 1 answers are smaller than them. Beacuse the answer may be very large.So print the value of X % 8191.If there is no answers can meet such conditions,print \u201cNo answers can meet such conditions\u201d.", "samples": "[{\"input\": \"2 999888\\n3 1000001\\n4 8373\\n\", \"output\": \"7181\\n600 \\nNo answers can meet such conditions\\n\"}]", "test_case_id": "2035", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 4, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2052, "fields": {"title": "\uf8de\u8fe8\uf8fd", "description": "<p>\u8bf7\u4eceA\u9898\u4e0b\u8f7d\u6240\u6709\u9898\u76ee\u3002</p>", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\u6bcf\u7ec4\u4e00\u884c\uff0c\u8f93\u51651\u4e2a\u6574\u6570max\uff08max<10^9\uff09\u3002", "output_description": "\u6bcf\u7ec4\u8f93\u51fa\u4e00\u884c\u4e3a\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684n\u7684\u548c\u3002", "samples": "[{\"input\": \"3\\n4\\n10\", \"output\": \"0\\n4\\n12\"}]", "test_case_id": "2052", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-18T07:04:31.025Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": false, "total_submit_number": 331, "total_accepted_number": 35, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 2053, "fields": {"title": "\u4e32\u4e32\u9999", "description": "\u5bf9\u67d0\u5b57\u7b26\u4e32\uff0c\u82e5\u5176\u5b57\u7b26\u4ece\u5de6\u5230\u53f3\u6309ASSIC\u7801\u975e\u9012\u51cf\u7684\u987a\u5e8f\u6392\u5217\uff0c\u5219\u79f0\u4e3a\uf8de\u5b95\u0000\u3002<p></p>\u73b0\u5728JingG\u6bcf\u89c1\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4fbf\u60f3\u5728\u6bcf\u79cd\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u4e0d\u53d8\u7684\u524d\u63d0\u4e0b\uff0c\u627e\u5230\u5176\u5bf9\u5e94\u7684\uf8de\u5b95\u0000\u3002\u8bf7\u806a\u660e\u7684\u4f60\u7ed9\u4e88\u5e2e\u52a9\u3002", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\u6bcf\u7ec4\u4e00\u884c\uff0c\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u53ea\u53ef\u80fd\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u6570\u5b57\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc710000\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\uf8de\u5b95\u0000\u3002", "samples": "[{\"input\": \"aCM\\nloveCODE7509\", \"output\": \"CMa\\n0579CDEOelov\"}]", "test_case_id": "2053", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 346, "total_accepted_number": 24, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2054, "fields": {"title": "\u4ee3\u7801&\u7231", "description": "JingG\u7684\u5e08\u5085DS\u8bf4\u8fc7\uff1a\u76f8\u4fe1\u4ee3\u7801\u76f8\u4fe1\u7231\u3002\u6df1\u4fe1\u4e0d\u7591\u7684JingG\u627e\u6765\u4e00\u6bb5\u8bdd\uff0c\u60f3\u7edf\u8ba1\u51fa\u8be5\u6bb5\u8bdd\u4e2d\u6709\u591a\u5c11\u4e2a\u201c\u4ee3\u7801\u201d\uff1f\u591a\u5c11\u4e2a\u201c\u7231\u201d\uff1f", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u4e00\u884c\u5b57\u7b26\u4e32\uff0c\u4ec5\u542b\u5c0f\u5199\u5b57\u6bcd\uff01\u957f\u5ea6\u4e0d\u8d85\u8fc7200\u3002", "output_description": "\u5bf9\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u5b57\u7b26\u4e32\u91cc\u542b\u201dcode\u201d,\u201dlove\u201d\u7684\u4e2a\u6570\uff01", "samples": "[{\"input\": \"codelove\\ncodecodelove\", \"output\": \"1 1\\n2 1\"}]", "test_case_id": "2054", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 226, "total_accepted_number": 89, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2055, "fields": {"title": "\uf8de?\u9026\u67ff?", "description": "<p>\u4e8c\u8fdb\u5236\u662fJingG\u63a5\u89e6\u7f16\u7a0b\u540e\u4e3a\u4e4b\u60ca\u8273\u7684\u7b2c\u4e00\u7269\u3002\u67d0\u5341\u8fdb\u5236\u6570\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u540e\uff0c\u672b\u5c3e\u591a\u5c11\u4e2a0\u5462\uff1f</p>", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u4e00\u4e2a\u6b63\u6574\u6570N\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\uff1aN\u5316\u4e3a\u4e8c\u8fdb\u5236\u540e\u672b\u5c3e0\u7684\u4e2a\u6570\u3002", "samples": "[{\"input\": \"2\\n4\\n\", \"output\": \"1\\n2\\n\"}]", "test_case_id": "2055", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-26T12:30:08.732Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": false, "total_submit_number": 99, "total_accepted_number": 60, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 2056, "fields": {"title": "CET_4", "description": "\u5927\u5b66\u4e3a\u4ec0\u4e48\u8981\u8003CET_4\uff1f\u5509\uff0c\u591a\u4e48\u53ef\u601c\u7684\u5c0fG\u554a\u3002\u6240\u4ee5\uff0c\u67d0\u5929\u5c0fG\u51b3\u5b9a\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u7684\u76ee\u7684\u662f\u6a21\u62df\u4e00\u6839\u624b\u6307\u6572\u952e\u76d8\u6765\u6253\u5370\u4e00\u4e2a\u4ec5\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c\u7684\u82f1\u8bed\u53e5\u5b50^_^\uff01\uff01\uff01\u7a0b\u5e8f\u4f1a\u5148\u7ed9\u51fa\u201c\u624b\u6307\u201d\u5904\u5728\u7684\u521d\u59cb\u4f4d\u7f6e\uff08\u4e00\u5b9a\u5728\u952e\u76d8\u7684\u5b57\u6bcd\u8868\u4e0a\uff09\u3002\u7136\u540e\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u7531\u5c0fG\u51b3\u5b9a\uff0c\u5c0fG\u53ef\u4ee5\u8ba9\u201c\u624b\u6307\u201d\u4e0a\u4e0b\u5de6\u53f3\u79fb\u52a8\uff0c\u6216\u6253\u5370\u5f53\u524d\u4f4d\u7f6e\u7684\u5b57\u6bcd\uff0c\u6216\u6253\u5370\u7a7a\u683c\u3002\u5c0fG\u7684\u6307\u4ee4\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u79cd\u5b57\u7b26\u4ee3\u8868\u7684\u64cd\u4f5c\u5982\u4e0b\uff1a\u2018^\u2019\uff1a\u5411\u5de6\u4e0a\u79fb\u52a8\uff1b\u2018v\u2019\uff1a\u5411\u53f3\u4e0b\u79fb\u52a8\uff1b\u2018&lt;\u2019\uff1a\u5411\u5de6\u79fb\u52a8\uff1b\u2018&gt;\u2019\uff1a\u5411\u53f3\u79fb\u52a8\uff1b\u2018_\u2019\uff1a\u6253\u5370\u5f53\u524d\u4f4d\u7f6e\u7684\u5b57\u6bcd\uff1b\u20180\u2019\uff1a\u6253\u5370\u7a7a\u683c\u3002\u4f46\u662f\uff0c\u5982\u679c\u624b\u6307\u7684\u5f53\u524d\u4f4d\u7f6e\u662f\u5b57\u6bcd\u8868\u7684\u6700\u53f3\u7aef\uff0c\u53f3\u79fb\u2018&gt;\u2019\u64cd\u4f5c\u540e\uff0c\u624b\u6307\u5e94\u8be5\u5728\u952e\u76d8\u5b57\u6bcd\u8868\u7684\u5f53\u524d\u884c\u7684\u6700\u5de6\u7aef\u3002\u6bd4\u5982\uff1a\u5f53\u524d\u4f4d\u7f6e\u662f\u2018L\u2019\u952e\uff0c\u53f3\u79fb\u540e\u5e94\u8be5\u662f\u2018A\u2019\u952e\uff1b\u540c\u7406\uff0c\u5f53\u524d\u4f4d\u7f6e\u662f\u2018Q\u2019\u952e\uff0c\u5de6\u4e0a\u79fb\u540e\u5e94\u8be5\u662f\u2018Z\u2019\u952e\uff1b\u5f53\u524d\u4f4d\u7f6e\u662f\u2018P\u2019\u952e\uff0c\u53f3\u4e0b\u79fb\u540e\u5e94\u8be5\u4ecd\u662f\u2018P\u2019\u952e\u3002<p></p>\u7ec8\u4e8e\uff0c\u4e00\u4e2a\u5b8c\u7f8e\u7684\u82f1\u8bed\u53e5\u5b50\u51fa\u73b0\u4e86\uff0c\u5c0fG\u559d\u4e86\u53e3\u6c34\uff0c\u5f00\u59cb\u5b66\u4e60\u82f1\u8bed\u3002\u5c0fG\u5b66\u4e60\u82f1\u8bed\u7684\u65b9\u5f0f\u5f88\u7279\u522b\u3002\u4ed6\u4f1a\u628a\u4eca\u5929\u80cc\u8fc7\u7684\u5355\u8bcd\u6216\u77ed\u8bed\u8bb0\u4e0b\u6765\uff0c\u7136\u540e\u7ed9\u5b83\u4eec\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u8fd9\u4e2a\u6574\u6570\u8868\u793a\u5982\u679c\u5c0fG\u5728\u4f5c\u6587\u91cc\u7528\u5230\u8fd9\u4e2a\u5355\u8bcd\u6216\u77ed\u8bed\uff0c\u4ed6\u80fd\u5f97\u5230\u7684\u5206\u6570\u3002\u4e00\u5929\u6162\u6162\u7ed3\u675f\u4e86\uff0c\u665a\u4e0a\u5c0fG\u6253\u5f00\u4e86\u4e0a\u9762\u90a3\u4e2a\u7a0b\u5e8f\u5f97\u5230\u7684\u82f1\u8bed\u53e5\u5b50\u3002\u4ed6\u5ffd\u7136\u60f3\u77e5\u9053\uff0c\u5982\u679c\u8fd9\u4e2a\u53e5\u5b50\u51fa\u73b0\u5728\u4f5c\u6587\u91cc\uff0c\u4ed6\u80fd\u5f97\u5230\u591a\u5c11\u5206\u6570\uff1f\u4f46\u5c0fG\u5b9e\u5728\u592a\u56f0\u4e86\uff0c\u4ed6\u60f3\u4f60\u5e2e\u4ed6\u5b9e\u73b0\u8fd9\u4e2a\u4ee3\u7801\uff0c\u4e8e\u662f\uff0c\u9898\u76ee\u51fa\u73b0\u4e86\u3002", "input_description": "\u4e00\u4e2a\u6574\u6570T\uff08T<=100\uff09\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\uff0c\u6bcf\u7ec4\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u8868\u793a\u201c\u624b\u6307\u201d\u7684\u521d\u59cb\u4f4d\u7f6e\uff1b\u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u957f\u5ea6\u4e0d\u8d85\u8fc7520\u7684\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u5c0fG\u5bf9\u7a0b\u5e8f\u7684\u6307\u4ee4\uff0c\u5b57\u7b26\u4e32\u5408\u6cd5\uff0c\u4e14\u81f3\u5c11\u6709\u4e00\u4e2a\u2018_\u2019\u64cd\u4f5c\uff1b\u7b2c\u4e09\u884c\u662f\u4e00\u4e2a\u6574\u6570N(0<=N<=50)\u8868\u793a\u5c0fG\u4eca\u5929\u80cc\u7684\u82f1\u8bed\u5355\u8bcd\u548c\u77ed\u8bed\u7684\u4e2a\u6570\uff0c\u968f\u540e\u76842*N\u884c\uff0c\u6bcf\u4e24\u884c\u662f\u4e00\u7ec4\u63cf\u8ff0\uff0c\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u82f1\u8bed\u77ed\u8bed\u6216\u5355\u8bcd\uff08\u957f\u5ea6\u4e0d\u8d85\u8fc730\uff09\uff0c\u7b2c\u4e8c\u884c\u662f\u8fd9\u4e2a\u82f1\u8bed\u77ed\u8bed\u6216\u5355\u8bcd\u51fa\u73b0\u5728\u4f5c\u6587\u91cc\u5c0fG\u7684\u5f97\u5206V\uff081<=V<=100\uff09\u3002\u6570\u636e\u4fdd\u8bc1\u5355\u8bcd\u548c\u77ed\u8bed\u4e0d\u540c\uff0c\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u884c\u9996\u548c\u884c\u672b\u6ca1\u6709\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u77ed\u8bed\u4e2d\u7684\u5355\u8bcd\u7531\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\u5c0fG\u7a0b\u5e8f\u4ea7\u751f\u7684\u82f1\u8bed\u53e5\u5b50\u4e0d\u5c5e\u4e8e\u8f93\u5165\u5b57\u7b26\u4e32\uff0c\u6bcf\u7ec4\u6570\u636e\u540e\u6709\u4e00\u4e2a\u7a7a\u884c\uff0c\u5404\u7ec4\u6570\u636e\u76f8\u4e92\u4e4b\u95f4\u6ca1\u6709\u5f71\u54cd\u3002", "output_description": "\u8f93\u51fa\u7b54\u6848\uff0c\u6bcf\u7ec4\u5360\u4e00\u884c\u3002\u4e00\u4e2a\u82f1\u8bed\u5355\u8bcd\u6216\u77ed\u8bed\u5728\u4f5c\u6587\u4e2d\u51fa\u73b0\u591a\u6b21\uff0c\u53ea\u505a\u4e00\u6b21\u5904\u7406\uff0c\u4e0d\u7528\u8003\u8651\u5355\u8bcd\u6216\u77ed\u8bed\u7684\u53d8\u5f62\uff0c\u6bd4\u5982\uff1ause\u548cused\u5e94\u8be5\u662f\u4e0d\u540c\u7684\uff0cfriend\u548cfriends\u4e5f\u662f\u4e0d\u540c\u7684\u3002", "samples": "[{\"input\": \"3\\nq\\nv_&gt&gt&gt^_&lt_0&gt&gt&gt&gt_&lt&lt&lt&lt&ltv_&gt^_v_0&gt&gt&gt&gt&gt^_&lt&ltvv_\\n2\\nused\\n5\\nare used in\\n7\\n\\ns\\n&lt_0&gt_0&lt_0&gt_0\\n2\\na\\n2\\ns\\n3\\n\\nt\\n__\\n2\\nt\\n100\\ntt\\n10\\n\\n\\n\", \"output\": \"12\\n5\\n10\"}]", "test_case_id": "2056", "hint": "\u7b2c\u4e00\u7ec4\u6570\u636e\uff0c\u5c0fG\u4ea7\u751f\u7684\u82f1\u8bed\u53e5\u5b50\u662f\u201care used in\u201d\uff0c\u6240\u4ee5\u7b54\u6848\u662f12\u3002\\n\u7b2c\u4e8c\u7ec4\u6570\u636e\uff0c\u5c0fG\u4ea7\u751f\u7684\u82f1\u8bed\u53e5\u5b50\u662f\u201ca s a s \u201d\uff0c\u6240\u4ee5\u7b54\u6848\u662f5\u3002\\n\u7b2c\u4e09\u7ec4\u6570\u636e\uff0c\u5c0fG\u4ea7\u751f\u7684\u82f1\u8bed\u53e5\u5b50\u662f\u201ctt\u201d\uff0c\u6240\u4ee5\u7b54\u6848\u662f10\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 34, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2057, "fields": {"title": "UnkelTao\u7684\u70e6\u607c", "description": "UnkelTao\u6700\u8fd1\u83b7\u5f97\u4e86\u4e00\u4e2aN*M*K\u7684\u5947\u602a\u7acb\u65b9\u4f53\u9b54\u65b9\uff0c\u73a9\u4e86\u5f88\u4e45\u4ed6\u8fd8\u662f\u4e0d\u4f1a\u62fc\uff0c\u6280\u672f\u5947\u5dee\u7684\u4ed6\u60f3\u5230\u4e86\u4e00\u4e2a\u5f88\u66b4\u529b\u7684\u65b9\u6cd5\uff0c\u4ed6\u5c06\u9b54\u65b9\u62c6\u6210N*K*M \u4e2a1*1*1\u7684\u5c0f\u6b63\u65b9\u4f53\uff0c\u7136\u540e\u91cd\u65b0\u62fc\u63a5\u8d77\u6765\uff0c\u8fd9\u6837\u5c31\u80fd\u591f\u62fc\u597d\u4e00\u4e2a\u9b54\u65b9\u4e86\u3002<p></p>\u5047\u8bbe\u4ed6\u4e00\u6b21\u80fd\u5c06\u4e00\u4e2a\u542b\u6709p\u4e2a1*1*1\u7684\u5c0f\u6b63\u65b9\u4f53\u7684\u5757\u5206\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u542b\u6709x (0 &lt; x &lt; p)\u4e2a1*1*1\u7684\u5c0f\u6b63\u65b9\u4f53\u65b9\u4f53, \u90a3\u4e48\u53e6\u5916\u4e00\u5757\u81ea\u7136\u542b\u6709(p-x)\u4e2a1*1*1\u5c0f\u6b63\u65b9\u4f53\uff0c\u4ed6\u6240\u9700\u8981\u6d88\u8017\u7684\u5361\u8def\u91cc\u662f(x)*(p-x)\u3002\u90a3\u4e48\u4ed6\u5c06\u4e00\u4e2aN*M*K\u5927\u5c0f\u7684\u7acb\u65b9\u4f53\u901a\u8fc7\u4e0a\u9762\u65b9\u6cd5\u4e0d\u65ad\u5206\u6210\u4e24\u5757\uff0c\u6700\u540e\u5206\u6210N*K*M\u4e2a1*1*1\u7684\u5c0f\u6b63\u65b9\u4f53\u6700\u5c11\u9700\u8981\u6d88\u8017\u591a\u5c11\u5361\u8def\u91cc\u3002", "input_description": "\u7b2c\u4e00\u884c\u4e3aT(0 < T <= 100\uff09, \u8868\u793a\u6709\u591a\u5c11\u7ec4\u6d4b\u8bd5\u6837\u4f8b\uff1b\n\u63a5\u4e0b\u6765T \u884c\uff0c\u6bcf\u884c\u542b\u67093 \u4e2a\u6b63\u6574\u6570N\u3001M\u3001K \uff080 < N,M,K <= 12\uff09\u3002", "output_description": "\u8f93\u51fa\u6700\u5c0f\u9700\u8981\u6d88\u8017\u7684\u5361\u8def\u91cc\u3002", "samples": "[{\"input\": \"2\\n1 1 1\\n1 1 3\", \"output\": \"0\\n3\"}]", "test_case_id": "2057", "hint": "\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u6837\u4f8b\uff0c\u4ed6\u5df2\u7ecf\u662f1*1*1 \u7684\u5c0f\u6b63\u65b9\u4f53\u4e86\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u6d88\u8017\u5361\u8def\u91cc\u3002\\n\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u6837\u4f8b\uff0c\u4e00\u5171\u67093 \u4e2a\u5c0f\u6b63\u65b9\u4f53\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5206\u62101 \u548c2\uff0c\u518d\u628a2 \u5206\u62101 \u548c1\uff0c\u5171\u6d88\u80171*2 + 1*1 = 3\uff1b", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 99, "total_accepted_number": 62, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2058, "fields": {"title": "\uf8de?\u5b84\u6714\u016b?", "description": "<p>\u5c0f\u5b66\u8981\u80cc\u4e5d\u4e5d\u4e58\u6cd5\u8868\uff0c\u5927\u5b66\u8981\u5199\uf8de?\u5b84\u6714\u016b\u603c\uff2a\u6dd9? \u548cB\uff0c\u6c42A \u4e58\u4ee5B\u7684\u503c\u3002</p>", "input_description": "\u591a\u7ec4\u6570\u636e\u8f93\u5165\uff0c\u6bcf\u7ec4\u6570\u636e\u4e24\u4e2a\u6574\u6570A, B\uff08-2^32<=A, B<=2^32-1\uff09\u3002", "output_description": "\u6bcf\u7ec4\u6570\u636e\u8f93\u51faA*B\u7684\u503c\u3002", "samples": "[{\"input\": \"1 2\\n2 4\", \"output\": \"2\\n8\"}]", "test_case_id": "2058", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-26T12:31:18.492Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": false, "total_submit_number": 315, "total_accepted_number": 41, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 2059, "fields": {"title": "\uf8de???", "description": "<p>JingG\u5728\u7eb8\u4e0a\u753b\u4e86\u4e09\u4e2a\uf8de\u6fb9\u7a81\u7136\u597d\u5947\u5b83\u4eec\u4e4b\u95f4\u7684\u4ea4\u70b9\u6570\u91cf\u3002\u7531\u4e8e\u201c\uf8de\u6fc9\u5f0a\u76f4\u5189\u7ec6\u4e1b\u6a31JingG\u6539\u6210\u5728\u7eb8\u4e0a\u753b\u4e09\u4e2a\u5706\uff0c\u8bf7\u4f60\u5e2e\u5fd9\u6c42\u51fa\u4e09\u4e2a\u4e0d\u540c\u5706\u7684\u4ea4\u70b9\u4e2a\u6570\u3002</p>", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\u6bcf\u7ec4\u8f93\u5165\u4e3a3\u884c\uff0c\u6bcf\u884c\u4e3a\u4e09\u4e2a\u6d6e\u70b9\u6570\uff0c\u8868\u793a\u8be5\u5706\u7684\u6a2a\u5750\u6807x\uff0c\u7eb5\u5750\u6807y\uff0c\u534a\u5f84r\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\u8868\u793a\u4ea4\u70b9\u4e2a\u6570\u3002", "samples": "[{\"input\": \"-1.00 0.00 1.00\\n1.00 0.00 1.00\\n0.00 1.00 1.00\\n-1.00 0.00 1.00\\n1.00 0.00 1.00\\n0.00 0.00 1.00\", \"output\": \"3\\n5\"}]", "test_case_id": "2059", "hint": "\u7b2c\u4e00\u7ec4\u6570\u636e\uff0c\u793a\u610f\u56fe\u5982\u4e0b\u56fe\u5de6\u56fe\u3002\\n\u7b2c\u4e8c\u7ec4\u6570\u636e\uff0c\u793a\u610f\u56fe\u5982\u4e0b\u56fe\u53f3\u56fe\u3002\\n<img src=\"uploadFiles/2059.png\" />", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-26T12:31:37.326Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": false, "total_submit_number": 20, "total_accepted_number": 5, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 2060, "fields": {"title": "\uf8de\u8ff3\u7ae6\u54ea\u0425?", "description": "<p>JingG\u6700\u8fd1\u6536\u83b7\u4e86\u4e00\u4e2a\u6b6312\u9762\u4f53\u7684\u9b54\u65b9\uff0c\u6bcf\u9762\u4e3a\u6b636\u8fb9\u5f62\u3002\u4eba\u79f0\uf8de\u8ff3\u7ae6?ingG\u5f88\u60f3\u9020\u51fa\u7c7b\u4f3c\u7684\u9b54\u65b9\uff1a\u6bcf\u4e2a\u9762\u662f\u6b63n\u8fb9\u5f62\u7684\u6b63m\u9762\u4f53\uff0c\u5b83\u662f\u5426\u5b58\u5728\u5462\uff1f</p>", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6570\u636e\u5305\u542b\u4e24\u4e2a\u6574\u6570n,m(0<=n,m<=20)\u3002", "output_description": "\u5982\u679c\u5b58\u5728\u6bcf\u4e2a\u9762\u662f\u6b63n\u8fb9\u5f62\uff0c\u6574\u4f53\u6709m\u4e2a\u9762\u7684\u9b54\u65b9\uff0c\u8f93\u51fa\u201dYes\u201d\uff1b\u5426\u5219\uff0c\u8f93\u51fa\u201dNo\u201d\u3002", "samples": "[{\"input\": \"4 6\\n2 2\", \"output\": \"Yes\\nNo\"}]", "test_case_id": "2060", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-26T12:31:51.134Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": false, "total_submit_number": 162, "total_accepted_number": 27, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 2061, "fields": {"title": "\u6709\u5411\u56fe", "description": "\u7ed9\u51fan\u4e2a\u9876\u70b9\uff0cm\u6761\u8fb9\u7684\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9876\u70b9\uff0c\u5b9a\u4e49A(v)\u4e3a\u4ece\u9876\u70b9v\u51fa\u53d1\uff0c\u6cbf\u7740\u8fb9\u8d70\u82e5\u5e72\u6b65\u540e\uff0c\u80fd\u5230\u8fbe\u7684\u7f16\u53f7\u6700\u5927\u7684\u70b9\u7684\u7f16\u53f7\uff0c\u6c42A(v)\u3002", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6837\u4f8b\uff0c\u6bcf\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570n\uff0cm\u3002n\u8868\u793a\u6709n\u4e2a\u9876\u70b9\uff0c\u7f16\u53f7\u4ece1-n\uff0c\u63a5\u4e0b\u6765m\u884c\uff0c\u6bcf\u4e00\u884c\u4e24\u4e2a\u6574\u6570\uff0ci\uff0cj\uff0c\u4fdd\u8bc1i\uff0cj\u4e0d\u76f8\u7b49\uff0c\u8868\u793a\u6709\u4e00\u6761\u4ece\u9876\u70b9i\u5230\u9876\u70b9j\u7684\u6709\u5411\u8fb9\u3002n\u6700\u5927\u4e3a100000\uff0cm\u6700\u5927\u4e3a150000\uff0ci\uff0cj\u4e0d\u5927\u4e8en\uff0c\u5e76\u4e14\u5927\u4e8e0\u3002", "output_description": "n\u4e2a\u6574\u6570A(1),A(2),\u2026\u2026,A(n)\u3002\u6bcf\u7ec4\u6d4b\u8bd5\u6837\u4f8b\u4e00\u884c\uff0c\u4e4b\u95f4\u7528n-1\u4e2a\u7a7a\u683c\u9694\u5f00\u3002", "samples": "[{\"input\": \"4 3\\n1 2\\n2 4\\n4 3\", \"output\": \"4 4 3 4\"}]", "test_case_id": "2061", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 86, "total_accepted_number": 16, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2062, "fields": {"title": "\u8d8a\u72f1", "description": "\u76d1\u72f1\u6709\u8fde\u7eed\u7684N\u4e2a\u623f\u95f4\uff0c\u6bcf\u4e00\u4e2a\u623f\u95f4\u6709\u4e00\u4e2a\u72af\u4eba\uff0c\u6240\u6709\u7684\u72af\u4eba\u603b\u5171\u6709M\u79cd\u5b97\u6559\uff0c\u6bcf\u4e2a\u72af\u4eba\u53ef\u80fd\u4fe1\u4ef0\u5176\u4e2d\u4e00\u79cd\u3002\u5982\u679c\u76f8\u90bb\u623f\u95f4\u7684\u72af\u4eba\u7684\u5b97\u6559\u76f8\u540c\uff0c\u5c31\u53ef\u80fd\u53d1\u751f\u8d8a\u72f1\uff0c\u6c42\u6709\u591a\u5c11\u79cd\u72b6\u6001\u53ef\u80fd\u53d1\u751f\u8d8a\u72f1\u3002", "input_description": "\u6bcf\u4e00\u6b21\u8f93\u5165\u4e24\u4e2a\u6574\u6570\uff0cN,M\uff0c\u5176\u4e2dN\uff0cM\u7684\u8303\u56f4\u4e3a[1,100000],\u8bfb\u5230\u6587\u4ef6\u7ed3\u675f\u4e3a\u6b62\u3002", "output_description": "\u53ef\u80fd\u8d8a\u72f1\u7684\u72b6\u6001\u6570\uff0c\u5bf910000009\u53d6\u6a21\uff0c\u6bcf\u884c\u4e00\u7ec4\u3002", "samples": "[{\"input\": \"2 3\", \"output\": \"3\"}]", "test_case_id": "2062", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 113, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2063, "fields": {"title": "\u987a\u98ce\u8f66", "description": "PROLAZY\u662f\u4e00\u4e2a\u795e\u5947\u7684\u57ce\u5e02\uff0c\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u4e2d\uff0c\u53ef\u4ee5\u8868\u793a\u4e3a4\u4e2a\u89d2\u6807\u4e3a(0,0)\uff0c(m,0)\uff0c(0,n)\uff0c(m,n)\u7684\u77e9\u5f62\u7f51\u683c\u3002\u5373\u5171\u6709m+1\u6761\u516c\u8def\u8d2f\u7a7f\u5357\u5317\uff0cn+1\u6761\u516c\u8def\u8d2f\u7a7f\u4e1c\u897f\u3002\u6c7d\u8f66\u80fd\u4e14\u53ea\u80fd\u6cbf\u7740\u516c\u8def\u524d\u8fdb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6c7d\u8f66\u6bcf\u6b21\u53ef\u80fd\u7684\u524d\u8fdb\u65b9\u5411\u4e3a\u4e1c\u3001\u5357\u3001\u897f\u3001\u5317\u3002<p></p>\u73b0\u5728\uff0cJingG\u8ba1\u5212\u4eceA\u5730(XA,YA)\uff0c\u4ee5\u6700\u77ed\u8def\u7a0b\u5c06missing\u5f00\u8f66\u9001\u5f80B\u5730(XB,YB)\u3002\u5c06\u8981\u51fa\u53d1\u65f6\uff0c\u63a5\u5230C\u5730(XC,YC)\u7684\u670b\u53cbMakingMaker\u7684\u6765\u7535\uff0c\u8bf4\u4ed6\u4e5f\u60f3\u642d\u987a\u98ce\u8f66\u53bbB\u5730\u3002\u4e3a\u4e86\u4e0d\u60f9\u607cA\u5730\u4e0a\u8f66\u7684missing\uff0cJingG\u4e0d\u80fd\u884c\u9a76\u6bd4\u539f\u8ba1\u5212\u8fdc\u7684\u8ddd\u79bb\u5230\u8fbeB\u5730\uff0c\u95ee\u5728\u6b64\u7ea6\u675f\u4e0b\uff0c\u80fd\u5426\u8def\u8fc7C\u5730\uff0c\u8ba9MakingMaker\u642d\u4e0a\u987a\u98ce\u8f66\uff1f", "input_description": "\u591a\u7ec4\u8f93\u5165\u3002\u6bcf\u7ec4\u8f93\u5165\u4e00\u884c\uff0c\u4e3a6\u4e2a\u5c0f\u4e8e50000\u7684\u6574\u6570XA,YA,XB,YB,XC,YC\uff0c\u5206\u522b\u8868\u793aA\uff0cB\uff0cC\u4e09\u5730\u7684\u6a2a\u5750\u6807\u548c\u7eb5\u5750\u6807\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u5148\u8f93\u51fa\u6d4b\u8bd5\u6570\u636e\u662f\u7b2c\u51e0\u7ec4\u3002\u63a5\u7740\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u80fd\u642d\u987a\u98ce\u8f66\u4e32\u4e3a\u201cYes\u201d\uff0c\u4e0d\u80fd\u5219\u4e3a\u201cNo\u201d\u3002\u5177\u4f53\u8f93\u51fa\u683c\u5f0f\u89c1\u6837\u4f8b\u3002", "samples": "[{\"input\": \"0 0 2 2 1 1\\n0 0 2 2 0 3\", \"output\": \"Case 1: Yes\\nCase 2: No\"}]", "test_case_id": "2063", "hint": "\u7b2c\u4e00\u7ec4\u6570\u636e\uff0c\u8ba1\u5212\u8def\u7a0b\u662f4\uff0c\u8981\u8def\u8fc7(1,1)\uff0c\u6700\u5c11\u8d70\u8fc7\u7684\u8def\u7a0b\u4e5f\u4e3a4\uff0c\u6210\u529f\u3002\\n\u7b2c\u4e8c\u7ec4\u6570\u636e\uff0c\u8ba1\u5212\u8def\u7a0b\u662f4\uff0c\u8981\u8def\u8fc7(0,3)\uff0c\u6700\u5c11\u8d70\u8fc7\u7684\u8def\u7a0b\u4e5f\u4e3a6\uff0c\u5931\u8d25\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 267, "total_accepted_number": 62, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2082, "fields": {"title": "2048", "description": "Now there is a very popular game called \u201c2048\u201d on PC or mobile phone. \u201c2048\u201d is played on a simple gray 4\u00d74 grid with tiles of varying colors overlaid that slide smoothly when a player moves them. The game uses the arrow keys to move tiles left, right, up, and down. If two tiles of the same number collide while moving, they will merge into a tile with the total value of the two tiles that collided. Higher-scoring tiles emit a soft glow. Every turn, a new tile will randomly appear in an empty spot on the board with a value of either 2 or 4. (If you want to play this game just click http://gabrielecirulli.github.io/2048/ and note the contest time.)<p></p>For this problem, luckily, it doesn\u2019t exist the random new title. We will give you a status of the game and then execute a series of commands. We de&#64257;ne the arrow keys left, right, up, and down as \u2019L\u2019, \u2019R\u2019, \u2019U\u2019 and \u2019D\u2019. After &#64257;nishing the commands you should tell us what\u2019s the status of the game.<p></p>As the image showing above, we will get:<p></p>32 8 4 2 <p></p>2 4 2 0 <p></p>0 2 0 0 <p></p>2 4 0 0<p></p>We execute a command \u2019U\u2019, after &#64257;nishing it we will get:<p></p>32 8 4 2 <p></p>4 4 2 0 <p></p>0 2 0 0 <p></p>0 4 0 0<p></p>", "input_description": "There exists multiple test cases. For each case there is 5 lines. The &#64257;rst four lines describe the 4\u00d74 grids. Each row includes 4 integer: 2^k (1 \u2264 k \u2264 11) separated by a space.\nThe &#64257;fth line is a string of characters whose length is L(1 \u2264 L \u2264 100).\n", "output_description": "For each case print a 4\u00d74 grid which describes the &#64257;nished status. For each integer you must use \u201c%5d\u201d to print it. There is a blank line between each two cases.\n", "samples": "[{\"input\": \"32 8 4 2\\n2 4 2 0\\n0 2 0 0\\n2 4 0 0\\nU\\n0 0 0 2\\n0 0 2 0\\n0 2 0 0\\n2 0 0 0\\nR\", \"output\": \"   32    8    4    2\\n    4    4    2    0\\n    0    2    0    0\\n    0    4    0    0\\n\\n    0    0    0    2\\n    0    0    0    2\\n    0    0    0    2\\n    0    0    0    2\"}]", "test_case_id": "2082", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 191, "total_accepted_number": 39, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2146, "fields": {"title": "\u3010\u624b\u901f\u3011\u9614\u7ef0\u7684Dim", "description": "<font>\u51ac\u74dc\u7ed9\u4e86\u4e2a\u5b57\u7b26\u4e32\uff0cDim\u8bf4\u8c01\u627e\u51fa\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\uff0c\u5c31\u8bf7\u8c01\u5403\u5bb5\u591c\u3002<p></p></font>", "input_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u7b2c\u4e00\u884c\u7ed9\u4e00\u4e2a\u6b63\u6574\u6570T\uff08T<12\uff09\u3002\n\n\u63a5\u4e0b\u6765T\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32s\uff08length < 250\uff09\u3002\n\n\u4fdd\u8bc1\u5b57\u7b26\u4e32\u4e2d\u4e0d\u542b\u7a7a\u683c\u3002</font>", "output_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u8f93\u51fa\u6700\u957f\u7684\u957f\u5ea6\u3002</font>", "samples": "[{\"input\": \"2\\nabcde\\nabcba\", \"output\": \"1\\n5\"}]", "test_case_id": "2146", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 28, "total_accepted_number": 10, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2152, "fields": {"title": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u4e22\u5931\u7684\u6570\u5217</font>", "description": "<font>\u524d\u51e0\u5929\u6211\u4ea4\u7ed9\u4e86\u51ac\u74dc\u4e00\u4e2a\u6570\u5217A\uff0cA\u4e2d\u542b\u6709N\u4e2a\u6574\u6570\u4e14\u6bcf\u4e2a\u6574\u6570\u90fd\u6709\u4e24\u4e2a\uff0c\u5982{1,1,2,2,3,3}\uff0c{2,6,4,6,4,2}\uff0c\u53ef\u7531\u4e8e\u4e00\u4e9b\u4e0d\u53ef\u63a7\u56e0\u7d20\uff0c\u51ac\u74dc\u4e0d\u5c0f\u5fc3\u4e22\u5931\u4e86\u4e00\u4e2a\u6574\u6570\u4f7f\u5f97\u6570\u5217\u53d8\u6210\u4e86\uff0c\u5982{1,1,2,2,3},{2,4,6,4,2}\uff0c\u6240\u4ee5\u4ed6\u5f88\u60f3\u77e5\u9053\u4ed6\u4e22\u5931\u7684\u6570\u662f\u4ec0\u4e48\uff0c\u7136\u540e\u8d81\u6211\u4e0d\u6ce8\u610f\u7684\u65f6\u5019\u8865\u4e0a\u53bb\uff0c\u4e0d\u7136\u65e0\u6cd5\u5411\u6211\u4ea4\u4ee3 ^_^ \u4f60\u4eec\u53ef\u4ee5\u5e2e\u52a9\u4ed6\u627e\u56de\u8fd9\u4e2a\u6570\u5417\uff1f</font>", "input_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u7b2c\u4e00\u884c\u662f\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570T(T <= 10)\u3002\u63a5\u4e0b\u6765\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u662fN(1 <= N <= 10^6 - 1),\u8868\u793a\u51ac\u74dc\u73b0\u6709\u7684\u6570\u5217\u6240\u542b\u6709\u7684\u6574\u6570\u4e2a\u6570,\u4fdd\u8bc1N\u4e3a\u5947\u6570,\u63a5\u4e0b\u6765\u4e00\u884c\u662fN\u4e2a\u6574\u6570,\u8868\u793a\u6570\u5217\u4e2d\u542b\u6709\u7684\u6574\u6570,\u6574\u6570\u8303\u56f4\u4e3a[1,10^6]\u3002</font>", "output_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u8f93\u51fa\u51ac\u74dc\u4e22\u5931\u7684\u6574\u6570\u5373\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6574\u6570\u3002</font>", "samples": "[{\"input\": \"2\\n1\\n1\\n3\\n1 1 2\", \"output\": \"1\\n2\"}]", "test_case_id": "2152", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 177, "total_accepted_number": 30, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2153, "fields": {"title": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u7a7a\u60f3\uff08I\uff09</font>", "description": "<font>\u6700\u662f\u4eba\u95f4\u7559\u4e0d\u4f4f\uff0c\u6731\u989c\u8f9e\u955c\u82b1\u8f9e\u6811\u3002\u97f6\u534e\u767d\u9996\uff0c\u4e0d\u8fc7\u8f6c\u77ac T T\u3002\u3002\u3002\u3002\u9752\u6625\u8fd9\u672c\u592a\u4ed3\u4fc3\u7684\u4e66\uff0c\u8fd8\u6ca1\u600e\u4e48\u7ffb\u8bfb\u5c31\u5df2\u7ecf\u88ab\u866b\u86c0\u4e86\u3002\u3002\u3002\u4e00\u4e0d\u5c0f\u5fc3\u5c31\u5927\u4e09\u4e86\uff0c\u56de\u987e\u4e24\u5e74ACM\u5386\u7a0b\uff0c\u771f\u7684\u662f\u592a\u591a\u653e\u7eb5\uff0c\u592a\u591a\u7684\u65f6\u95f4\u7528\u6765\u7a7a\u60f3\u4e86\u3002\u3002\u3002<p></p>\u90a3\u4e48\u95ee\u9898\u6765\u4e86!\u7ed9\u4f60\u82e5\u5e72\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u5224\u65ad\u51fa\u6709\u591a\u5c11\u4e2a\u5b57\u7b26\u4e32\u8868\u660eMG\u5728\u7a7a\u60f3\uff0c\u5373\u8be5\u4e32\u53ea\u5305\u542b\u7a7a\u683c\u548c\u7b26\u53f7\uff08\u4e0d\u5305\u542b\u5927\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u548c\u6570\u5b57\uff09\u3002</font>", "input_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2aT\uff0c\u8868\u793a\u6709t\u7ec4\u6570\u636e\uff0c\u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u662f\u4e00\u4e2an\uff0c\u8868\u793a\u8be5\u7ec4\u6709n\u4e2a\u5b57\u7b26\u4e32\uff0c\u968f\u540en\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u4e32\u957f\u5ea6\u4e0d\u8d85\u8fc71000\u3002</font>", "output_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u5bf9\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u5176\u4e2d\u6709\u591a\u5c11\u4e2a\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u7a7a\u683c\u548c\u7b26\u53f7\u3002</font>", "samples": "[{\"input\": \"2\\n4\\nAn ac a day,keep the wrong answer away!\\n!?????? ?\\nT T\\n~.~\\n5\\nOrz.....\\n#@$#%!#@%&\\n@#$!%zzzzzzzzzzzzzz...\\nmeizi meizi meng meizi..........\\nhai shi han zi hao!\", \"output\": \"2\\n1\"}]", "test_case_id": "2153", "hint": "<font>\u4e0d\u4f1a\u51fa\u73b0\u7a7a\u4e32\u548c\u5168\u4e3a\u7a7a\u683c\u7684\u4e32</font>", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 129, "total_accepted_number": 45, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2154, "fields": {"title": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u5e73\u9762\u5212\u5206</font>", "description": "<font>\u51ac\u74dc\u548cWID\u544a\u8bc9\u5c0fy\u51fa\u7684\u9898\u76ee\u8981\u80fd\u591f\u63a8\u51fa\u6765\uff0c\u6240\u4ee5\u5c0fy\u5c31\u51fa\u4e86\u4e00\u9053\u52a8\u52a8\u8111\u5b50\u5c31\u53ef\u4ee5\u63a8\u51fa\u6765\u7684\u9898\u76ee\u3002<p></p>\u6211\u4eec\u90fd\u77e5\u9053\u4e00\u6761\u76f4\u7ebf\u53ef\u4ee5\u628a\u5e73\u9762\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e24\u6761\u5212\u5206\u4e3a4\u90e8\u5206\uff0c\u4e09\u6761\u6700\u591a\u5212\u5206\u4e3a7\u90e8\u5206\u2026\u2026<p></p>\u90a3\u4e48\u73b0\u5728\u95ee\u9898\u6765\u4e86\uff0c\u5982\u679c\u662fV\u578b\u7684\u6298\u7ebf\uff0c\u4f1a\u662f\u600e\u6837\u7684\u7ed3\u679c\u5462\uff1f<p></p>\u7ed9\u5b9a\u4e00\u4e2an\u4ee3\u8868v\u578b\u6298\u7ebf\u7684\u6570\u91cf\uff0c\u6c42\u6700\u5927\u7684\u5e73\u9762\u5212\u5206\u6570max\u3002</font>", "input_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u591a\u7ec4\u6570\u636e\uff0c\u6bcf\u7ec4\u5360\u4e00\u884c\uff0c\u53ea\u6709\u4e00\u4e2a\u975e\u8d1f\u6574\u6570N\uff08N<10^8\uff09\u3002\n</font>", "output_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u6bcf\u7ec4\u8f93\u51fa\u4e00\u884c\uff0c\u4e00\u4e2amax</font>", "samples": "[{\"input\": \"1\\n2\\n3\", \"output\": \"2\\n7\\n16\"}]", "test_case_id": "2154", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 289, "total_accepted_number": 37, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2155, "fields": {"title": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u70e6\u607c\u7684\u674e\u96f7</font>", "description": "<font>\u9a6c\u4e0a\u53cc\u5341\u4e00\u5c31\u5230\u4e86\uff0c\u4e3a\u4e86\u8131\u5355\uff0c\u4e00\u76f4\u6697\u604b\u97e9\u6885\u6885\u7684\u674e\u96f7\u7ec8\u4e8e\u5411\u5979\u544a\u767d\u3002\u4f46\u662f\u5f97\u5230\u4e86\u4e00\u4e2a\u975e\u5e38\u96be\u4e3a\u4eba\u7684\u8981\u6c42\uff0c\u201c\u6211\u559c\u6b22\u6570\u5b66\u597d\u7684\u7537\u5b69\u7eb8\uff0c \u5982\u679c\u4f60\u80fd\u89e3\u51fa\u6211\u8fd9\u9053\u4e00\u5143\u4e09\u6b21\u65b9\u7a0b\u7684\u4e00\u4e2a\u5927\u4e8e\u96f6\u7684\u6839\uff0c \u6211\u5c31\u7b54\u5e94\u201d\u3002\u4e3a\u6b64\uff0c\u674e\u96f7\u975e\u5e38\u70e6\u607c\uff0c\u4e0d\u5f97\u5df2\u5411\u4f60\u6c42\u52a9\u3002<p></p>\u65b9\u7a0b\uff1aa * x3 + b * x2 + c * x = d </font>", "input_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u4e00\u884c\u56db\u4e2a\u6574\u6570 a, b, c, d(0 < a, b, c, d <= 10^9)</font>", "output_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u8f93\u51fa\u6570x\u5360\u4e00\u884c\u3002x\u4e3a\u4e00\u4e2a\u5927\u4e8e0\u7684\u5b9e\u6570\u4fdd\u75594\u4f4d\u5c0f\u6570\u3002</font>", "samples": "[{\"input\": \"1 1 1 3\", \"output\": \"1.0000\"}]", "test_case_id": "2155", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 87, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2156, "fields": {"title": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u5207\u86cb\u7cd5</font>", "description": "<font>\u6700\u8fd1\u597d\u5ba2WID\u7684\u751f\u65e5\u5230\u4e86\uff0c\u4ed6\u51b3\u5b9a\u8bf7\u5927\u5bb6\u5230\u4ed6\u5bb6\u53bb\u5403\u86cb\u7cd5\uff0c\u4f46\u662fyeahpeng,Dim\uff0c\u8fd8\u6709\u5176\u4ed6\u540c\u5b66\u544a\u8bc9\u4ed6\u90a3\u5929\u53ef\u80fd\u6ca1\u6cd5\u53bb\u5403\u86cb\u7cd5\u3002\u6240\u4ee5WID\u8bf7\u4f60\u5e2e\u4ed6\u63d0\u524d\u5207\u597d\u86cb\u7cd5\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u670b\u53cb\u65e0\u8bba\u53bb\u4e0d\u53bb\uff08\u5373\u65e0\u8bban\u4eba\u53bb\u8fd8\u662fm\u4e2a\u4eba\u53bb\uff09\uff0c\u6bcf\u4e2a\u4eba\u5403\u5f97\u86cb\u7cd5\u90fd\u4e00\u6837\u591a\u3002<p></p></font>", "input_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u6bcf\u884c\u6709\u4e24\u4e2a\u6570m\u548cn\uff081<= m,n <= 1e6).\u8bf7\u8bfb\u5230\u6587\u4ef6\u672b\u5c3e\u3002\n</font>", "output_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5c11\u8981\u5c06\u86cb\u7cd5\u5207\u6210\u591a\u5c11\u5757</font>", "samples": "[{\"input\": \"2 3\", \"output\": \"4\"}]", "test_case_id": "2156", "hint": "<font>\u5c06\u86cb\u7cd5\u5207\u6210\u5927\u5c0f\u5206\u522b\u4e3a1/3,1/3,1/6,1/6\u7684\u56db\u5757\u5373\u6ee1\u8db3\u8981\u6c42.\\n\u5f532\u4e2a\u4eba\u6765\u65f6\uff0c\u6bcf\u4eba\u53ef\u4ee5\u54031/3+1/6=1/2 , 1/2\u5757\u3002\\n\u5f533\u4e2a\u4eba\u6765\u65f6\uff0c\u6bcf\u4eba\u53ef\u4ee5\u54031/6+1/6=1/3 , 1/3, 1/3\u5757\u3002\\n</font>", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 172, "total_accepted_number": 27, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2157, "fields": {"title": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u88c1\u5224\u5458</font>", "description": "<font>\u51ac\u74dc\u7ec3\u4e60\u4e86\u4e00\u5929\uff0c\u4eceA + B + C\u7684\u5165\u95e8\u5f00\u59cb\uff0c\u9ad8\u5174\u7684\u627e\u5230\u4e86\u57fa\u5730\uff0c\u5fd0\u5fd1\u7684\u8fd8\u7ed9\u4e86JM\u5b57\u6761\u3002\u8def\u8fc7\u697c\u9053\u91cc\u7a7a\u60f3\u7684MG\uff0c\u5403\u5230\u4e86WID\u7684\u86cb\u7cd5\uff0c\u8fd8\u770b\u89c1\u4e86\u5728\u53cc\u5341\u4e00\u4e4b\u524d\u6210\u529f\u8131\u5149\u7684\u674e\u96f7\u540c\u5b66\u3002<p></p>\u53d1\u751f\u4e86\u8fd9\u4e48\u591a\uff0c\u53ef\u662f\u7adf\u7136\u8fd8\u4e0d\u77e5\u9053ACM\u7684\u7ade\u8d5b\u7684\u8ba1\u5206\u89c4\u5219\u3002\u4e8e\u662f\uff0c\u6253\u5f00QQ\uff0c\u627e\u5230\u4e86\u524d\u8f88JingG\u5b66\u59d0\u3002<p></p>\u51ac\u74dc\uff1a\u201c\u7ba1\u535a\u58eb\uff0c\u7ba1\u535a\u58eb\uff01\u201d<p></p>\u201c\u53eb\u5b66\u59d0~\u201d<p></p>\u201c\u54e6\uff0c\u5b66\u59d0\u3002\u5feb\u7ed9\u6211\u8bb2\u8bb2ACM\u7ade\u8d5b\u7684\u89c4\u5219\u5427\u3002~\u201d<p></p>\u201c\u51ac\u74dc\u5c0f\u670b\u53cb\u4e00\u5929\u90fd\u5728\u5fd9\u4ec0\u4e48\u554a\uff1f\u8fd9\u4e2a\u5c45\u7136\u8fd8\u4e0d\u77e5\u9053\u3002\u201c\u5b66\u59d0\u6c89\u9ed8\u4e86\u4e00\u4f1a\uff0c\u201d\u8fd9\u6837\uff0c\u6211\u544a\u8bc9\u4f60\u5b83\u7684\u89c4\u5219\uff0c\u4f60\u8981\u5e2e\u6211\u505a\u51fa\u8fd9\u6b21\u65b0\u79c0\u676f\u7684\u4f18\u80dc\u961f\u9009\u62e9\u5668\uff0c\u597d\u5427\uff1f\u201c<p></p>\u201d\u6069\uff0cok\uff01\u201c<p></p>\u201d\u4e00\u652f\u53c2\u8d5b\u961f\u7684\u8ba1\u5206\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a\u7b2c\u4e00\u90e8\u5206\u662f\u88ab\u89e3\u51fa\u7684\u9898\u6570\uff0c\u7b2c\u4e8c\u90e8\u5206\u662f\u7f5a\u65f6\uff0c\u8868\u793a\u89e3\u9898\u603b\u7684\u8017\u8d39\u65f6\u95f4\u548c\u8bd5\u9898\u6ca1\u6709\u88ab\u89e3\u51fa\u524d\u9519\u8bef\u7684\u63d0\u4ea4\u6240\u53e6\u52a0\u7684\u7f5a\u65f6\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u88ab\u6b63\u786e\u89e3\u51fa\u7684\u95ee\u9898\uff0c\u7f5a\u65f6\u7b49\u4e8e\u8be5\u95ee\u9898\u88ab\u89e3\u51fa\u7684\u65f6\u95f4\u52a0\u4e0a\u6bcf\u6b21\u9519\u8bef\u63d0\u4ea4\u768420\u5206\u949f\u7f5a\u65f6\u3002\u4f46\u662f\u5728\u95ee\u9898\u6ca1\u88ab\u89e3\u51fa\u524d\u4e0d\u8ba1\u7f5a\u65f6\u3002<p></p>\u56e0\u6b64\uff0c\u5982\u679c\u4e00\u652f\u961f\u4f0d\u5728\u6bd4\u8d5b20\u5206\u949f\u7684\u65f6\u5019\u518d\u7b2c\u4e8c\u6b21\u63d0\u4ea4\u89e3\u51fa\u7b2c\u4e00\u9898\uff0c\u4ed6\u4eec\u7684\u7f5a\u65f6\u662f\u56db\u5341\u5206\u949f\u3002\u5982\u679c\u4ed6\u4eec\u63d0\u4ea4\u7b2c\u4e8c\u9898\u4e09\u6b21\uff0c\u4f46\u6ca1\u6709\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5219\u6ca1\u6709\u7f5a\u65f6\u3002\u5982\u679c\u4ed6\u4eec\u5728120\u5206\u949f\u63d0\u4ea4\u7b2c\u4e09\u9898\uff0c\u5e76\u4e00\u6b21\u89e3\u51fa\u7684\u8bdd\uff0c\u8be5\u9898\u7684\u7f5a\u65f6\u662f120\u5206\u949f\u3002\u8fd9\u6837\uff0c\u8be5\u961f\u7684\u6210\u7ee9\u662f\u7f5a\u65f6160\u5206\u949f\uff0c\u89e3\u51b3\u4e24\u4e2a\u95ee\u9898\u3002\u4f18\u80dc\u961f\u662f\u89e3\u51fa\u6700\u591a\u95ee\u9898\u7684\u961f\u3002\u5982\u679c\u4e24\u961f\u5728\u89e3\u9898\u6570\u4e0a\u6253\u6210\u5e73\u624b\uff0c\u90a3\u4e48\u7f5a\u65f6\u5c11\u7684\u961f\u4e3a\u4f18\u80dc\u961f\u3002\u201d\u5b66\u59d0\u8bf4\u5b8c\u7528\u671f\u5f85\u7684\u773c\u795e\u770b\u7740\u51ac\u74dc\u3002<p></p>\u201c\u597d\u7684\uff01\u6211\u8fd9\u5c31\u53bb\u6572\uff01~\u201d<p></p></font>", "input_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u7a0b\u5e8f\u8bc4\u5224\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u67094\u9898\u3002\u7a0b\u5e8f\u8981\u786e\u4fdd\u5728\u8ba1\u7b97\u7f5a\u65f6\u540e\uff0c\u4e0d\u4f1a\u5bfc\u81f4\u961f\u4e0e\u961f\u4e4b\u95f4\u90e8\u5206\u80dc\u8d1f\u7684\u60c5\u51b5\u3002\n\u7b2c\u4e00\u884c\u4e3a\u53c2\u8d5b\u961f\u6570n\uff1b\n\u7b2c2 \u81f3 n + 1 \u884c\u4e3a\u6bcf\u4e2a\u961f\u7684\u53c2\u8d5b\u60c5\u51b5\u3002\u6bcf\u884c\u7684\u683c\u5f0f\u4e3a\uff1a\n< Name > < p1Sub > < p1Time > < p2Sub > < p2Time > ...< p4Time >\n\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u4e0d\u542b\u7a7a\u683c\u7684\u961f\u540d\u3002\u540e\u9762\u662f\u5bf9\u4e8e\u56db\u9053\u8bd5\u9898\u7684\u89e3\u9898\u60c5\u51b5\uff08\u8be5\u961f\u5bf9\u8fd9\u4e00\u8bd5\u9898\u7684\u63d0\u4ea4\u6b21\u6570\u548c\u6b63\u786e\u89e3\u51fa\u8be5\u9898\u7684\u65f6\u95f4\uff08\u90fd\u662f\u6574\u6570\uff09\uff09\u3002\u5982\u679c\u6ca1\u6709\u89e3\u51fa\u8be5\u9898\uff0c\u5219\u89e3\u9898\u65f6\u95f4\u4e3a0\u3002\n\u5982\u679c\u4e00\u9898\u88ab\u89e3\u51fa\uff0c\u63d0\u4ea4\u6b64\u65f6\u81f3\u5c11\u662f\u4e00\u6b21\u3002</font>\n", "output_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u8f93\u51fa\u4e00\u884c\u3002\u7ed9\u51fa\u4f18\u80dc\u961f\u7684\u961f\u540d\uff0c\u89e3\u51fa\u9898\u76ee\u7684\u6570\u91cf\u4ee5\u53ca\u7f5a\u65f6\u3002\n</font>", "samples": "[{\"input\": \"4\\nStars 2 20 5 0 4 190 3 220\\nWWD 5 180 1 0 2 0 3 100\\nusingTC 1 15 3 120 1 300 4 0\\n_Enjoy_AC 9 0 3 100 2 220 3 80\", \"output\": \"usingTC 3 475\"}]", "test_case_id": "2157", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 47, "total_accepted_number": 30, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2158, "fields": {"title": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u751f\u65e5\u8ba1\u7b97</font>", "description": "<font>kuangbin\u8001\u5927\u5bf9\u6211\u8bf4\u8fc7\uff1a\u201c\u4eba\u4e00\u6211\u767e\uff0c\u4eba\u5341\u6211\u4e07\uff01\u8ffd\u9010\u9752\u6625\u7684\u68a6\u60f3\uff0c\u6000\u7740\u81ea\u4fe1\u7684\u5fc3\uff0c\u6c38\u4e0d\u653e\u5f03\uff01\u51ac\u74dc\uff0c\u4f60\u8981\u597d\u597d\u5199\u4ee3\u7801\uff0c\u4e00\u76f4\u5199\u523030\u5c81\u3002\u201d<p></p>\u51ac\u74dc\u5fc3\u91cc\u5bb3\u6015\u4e86\uff0c\u90a3\u5f97\u591a\u5c11\u5929\u554a\u3002\u3002<p></p>\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff1a\u5047\u8bbe\u4e00\u4e2a\u4eba\u751f\u4e0b\u6765\u5c31\u5f00\u59cb\u5199\u4ee3\u7801\uff0c\u523030\u5c81\u751f\u65e5\u90a3\u5929\uff0c\u4e00\u5171\u7ec3\u4e60\u4e86\u591a\u5c11\u5929\u5462\uff1f</font>", "input_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u4e00\u4e2a\u6570T\uff0c\u540e\u9762T\u884c\u6bcf\u884c\u6709\u4e00\u4e2a\u65e5\u671f\uff0c\u683c\u5f0f\u662fYYYY-MM-DD\u3002\u5982\u751f\u65e5\u662f1988-03-07\u3002</font>", "output_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">T\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u6b64\u4eba\u4ece\u51fa\u751f\u523030\u5c81\u751f\u65e5\u6240\u7ecf\u8fc7\u7684\u5929\u6570\u3002\u5982\u679c\u8fd9\u4e2a\u4eba\u6ca1\u670930\u5c81\u751f\u65e5\uff0c\u5c31\u8f93\u51fa-1\u3002</font>", "samples": "[{\"input\": \"1\\n1988-03-07\", \"output\": \"10957\"}]", "test_case_id": "2158", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 52, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2160, "fields": {"title": "\u7a7a\u60f3(II)", "description": "\u6587\u827a\u5c11\u5e74MG\u4eca\u65e5\u53c8\u5f98\u5f8a\u5728\u6559\u5b66\u697c\u4e2d\u2026\u2026<p></p>\u90a3\u4e48\u95ee\u9898\u53c8\u6765\u4e86\uff0cMG\u53c8\u5f00\u59cb\u7a7a\u60f3\u4e86\uff0c\u8fd9\u6b21\u4ed6\u7684\u7a7a\u60f3\u5347\u7ea7\u4e86\uff01<p></p>\u73b0\u5728\u6bcf\u4e00\u4e2a\u7a7a\u683c\u90fd\u8868\u793aMG\u8fdb\u884c\u4e86\u4e00\u6b21\u7a7a\u60f3\uff01<p></p>\u8bf7\u4f60\u5224\u65ad\u4e00\u4e0bMG\u8fdb\u884c\u4e86\u591a\u5c11\u6b21\u7a7a\u60f3\u5427\uff01", "input_description": "\u82e5\u5e72\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u4e32\u957f\u5ea6\u4e0d\u8d85\u8fc71000\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u7b26\u4e32\u8f93\u51fa\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u5176\u4e2d\u6709\u591a\u5c11\u4e2a\u7a7a\u683c\u3002", "samples": "[{\"input\": \"An ac a day,keep the wrong answer away!\\n~.~\\nO r z .....\\nmeizi meizi meng meizi..........\\n MG \\n  MG\", \"output\": \"7\\n0\\n3\\n3\\n1\\n2\"}]", "test_case_id": "2160", "hint": "\u7a7a\u683c\u53ef\u80fd\u51fa\u73b0\u5728\u4efb\u4f55\u4f4d\u7f6e\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2161, "fields": {"title": "\u7b80\u5355\u7684\u6570\u5b66\u9898", "description": "\u7ed9\u4f60\u4e00\u4e2aN*N\u7684\u6570\u5b57\u77e9\u9635\uff0c\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\u90fd\u662f\u7531\u957f\u5ea6\u4e3aN\u5b57\u7b26\u4e32\u7ec4\u6210\u3002<p></p>\u6bd4\u59823*3\u7684\u6570\u5b57\u77e9\u9635\uff1a<p></p>123<p></p>456<p></p>789<p></p>\u5bf9\u4e8e\u7b2c\u4e00\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5b50\u5e8f\u5217\u4e00\u51716\u4e2a\u6570\u5b57\uff1a1,2,3,12,23,123.<p></p>\u5bf9\u4e8e\u7b2c\u4e00\u5217\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5f97\u5230\u5b50\u5e8f\u5217\u4e00\u51716\u4e2a\u6570\u5b57\uff1a1,4,7,14,47,147.<p></p>\u51ac\u74dc\u60f3\u77e5\u9053\u6240\u6709\u7684\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\u6240\u5f97\u5230\u7684\u6570\u5b57\u7d2f\u52a0\u8d77\u6765\u5f97\u5230\u7684\u603b\u548c\uff0c\u4f60\u4eec\u80fd\u5e2e\u5e2e\u4ed6\u5417\uff1f", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570N\uff081<=N<=1000\uff09\n\u5728\u63a5\u4e0b\u6765\u7684N\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u7684\u5b57\u7b26\u4e32\u3002", "output_description": "\u8f93\u51fa\u7684\u6570\u503c\u53ef\u80fd\u5f88\u5927\uff0c\u6240\u4ee5\u53ea\u8981\u8f93\u51fa\u7b54\u6848\u6a211,000,000,007(1e9+7)\u7684\u7ed3\u679c\u3002", "samples": "[{\"input\": \"3\\n123\\n456\\n789\", \"output\": \"2784\"}]", "test_case_id": "2161", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2162, "fields": {"title": "\u7edf\u8ba1\u5b57\u6570", "description": "JM \u5e73\u65f6\u6700\u559c\u6b22\u770b\u6fc0\u60c5\u5c0f\u6545\u4e8b\uff0c\u7136\u540e\u7edf\u8ba1\u6545\u4e8b\u5f53\u4e2d\u51fa\u73b0\u7684\u5b57\u6bcd\u6570\u91cf\u3002\u4e3a\u4e86\u5bb9\u6613\u89c2\u5bdf\u51fa\u90a3\u4e9b\u5b57\u6bcd\u7684\u591a\u5c11\uff0cJM\u89c9\u5f97\u505a\u4e00\u4e2a\u5782\u76f4\u67f1\u72b6\u56fe\u663e\u793a\u5728\u8f93\u5165\u4e2d\u51fa\u73b0\u7684\u6240\u6709\u5927\u5199\u5b57\u6bcd\uff08\u4e0d\u5305\u62ec\u7a7a\u683c\u3001\u6570\u5b57\u6216\u6807\u70b9\u7b26\u53f7\uff09\u51fa\u73b0\u591a\u5c11\u6b21\u3002<p></p>\u8f93\u51fa\u683c\u5f0f\u5982\u6837\u4f8b\u3002", "input_description": "\u7b2c\u4e00\u884c\u5230\u7b2c\u56db\u884c\uff1a4\u884c\u5927\u5199\u5b57\u6bcd\u7684\u6587\u672c\uff0c\u6bcf\u884c\u4e0d\u8d85\u8fc772\u4e2a\u5b57\u7b26\u3002", "output_description": "\u7b2c\u4e00\u884c\u5230\u7b2cN\u884c\uff1a\u7531\u661f\u53f7\u548c\u7a7a\u683c\u7ec4\u6210\u7684\u82e5\u5e72\u884c\uff0c\u540e\u9762\u8ddf\u7740\u4e00\u884c\uff0c\u540e\u9762\u8ddf\u7740\u4e00\u884c\uff0c\u7531\u88ab\u7a7a\u683c\u5206\u5f00\u7684\u5927\u5199\u5b57\u6bcd\u7ec4\u6210\u3002\u5728\u4efb\u610f\u4e00\u884c\u7ed3\u675f\u65f6\u4e0d\u8981\u8f93\u51fa\u4e0d\u9700\u8981\u7684\u7a7a\u683c\uff0c\u4e5f\u4e0d\u8981\u8f93\u51fa\u524d\u5bfc\u7a7a\u683c\u3002", "samples": "[{\"input\": \"HELLO JM !\\nI$(quat)M DONG_GUA.\\nYUE ME?\\nYUE!\", \"output\": \"        *\\n        *               *               *\\n        *   *         * *   *           *       *\\n*     * *   * * * *   * * * *           *       *\\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\"}]", "test_case_id": "2162", "hint": "\u6837\u4f8b\u8f93\u51fa\u4f4d\u7f6e\u51fa\u73b0\u9519\u7248\uff0c\u63d0\u793a\u4ee5\u56fe\u7247\u5c55\u793a\u6837\u4f8b\u8f93\u51fa\u3002\\n<img src=\"uploadFiles/2162_s.png\" />", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2172, "fields": {"title": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u5b57\u6570\u7edf\u8ba1</font>", "description": "<font>\u51ac\u74dc\u7684\u961f\u53cbJM \u5e73\u65f6\u6700\u559c\u6b22\u770b\u6fc0\u60c5\u5c0f\u6545\u4e8b\uff0c\u7136\u540e\u7edf\u8ba1\u6545\u4e8b\u5f53\u4e2d\u51fa\u73b0\u7684\u5b57\u6bcd\u6570\u91cf\u3002\u4e3a\u4e86\u5bb9\u6613\u89c2\u5bdf\u51fa\u90a3\u4e9b\u5b57\u6bcd\u7684\u591a\u5c11\uff0cJM\u51b3\u5b9a\u505a\u4e00\u4e2a\u5782\u76f4\u67f1\u72b6\u56fe\u663e\u793a\u5728\u8f93\u5165\u4e2d\u51fa\u73b0\u7684\u6240\u6709\u5927\u5199\u5b57\u6bcd\uff08\u4e0d\u5305\u62ec\u7a7a\u683c\u3001\u6570\u5b57\u6216\u6807\u70b9\u7b26\u53f7\uff09\u51fa\u73b0\u591a\u5c11\u6b21\u3002<p></p>\u8f93\u51fa\u683c\u5f0f\u5982\u6837\u4f8b\u3002</font>", "input_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u591a\u7ec4\u6570\u636e\u6d4b\u8bd5\uff0c\u6bcf\u7ec4\u6570\u636e\u5305\u62ec\u56db\u884c\u3002\n\u7b2c\u4e00\u884c\u5230\u7b2c\u56db\u884c\uff1a4\u884c\u5927\u5199\u5b57\u6bcd\u7684\u6587\u672c\uff0c\u6bcf\u884c\u4e0d\u8d85\u8fc772\u4e2a\u5b57\u7b26\uff08\u6bcf\u884c\u5b57\u7b26\u4e32\u53ef\u80fd\u4f1a\u51fa\u73b0\u7a7a\u683c\uff09\u3002</font>", "output_description": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\u7b2c\u4e00\u884c\u5230\u7b2cN\u884c\uff1a\u7531\u661f\u53f7\u548c\u7a7a\u683c\u7ec4\u6210\u7684\u82e5\u5e72\u884c\uff0c\u540e\u9762\u8ddf\u7740\u4e00\u884c\uff0c\u540e\u9762\u8ddf\u7740\u4e00\u884c\uff0c\u7531\u88ab\u7a7a\u683c\u5206\u5f00\u7684\u5927\u5199\u5b57\u6bcd\u7ec4\u6210\u3002\u5728\u4efb\u610f\u4e00\u884c\u7ed3\u675f\u65f6\u4e0d\u8981\u8f93\u51fa\u4e0d\u9700\u8981\u7684\u7a7a\u683c\uff0c\u4e5f\u4e0d\u8981\u8f93\u51fa\u524d\u5bfc\u7a7a\u683c\u3002</font>", "samples": "[{\"input\": \"<font face=\"u5faeu8f6fu96c5u9ed1\">HELLO JM !\\nI$(quat)M DONG_GUA.\\nYUE ME?\\nYUE!\\n</font>\", \"output\": \"<font face=\"u5faeu8f6fu96c5u9ed1\">\\n        *\\n        *               *               *\\n        *   *         * *   *           *       *\\n*     * *   * * * *   * * * *           *       *\\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\\n</font>\"}]", "test_case_id": "2172", "hint": "<font color=\"red\">\u7531\u4e8ehtml\u663e\u793a\uff0c\u8fd9\u91cc\u7ed9\u51fa\u6837\u4f8b\u8f93\u51fa\u7684\u6b63\u786e\u683c\u5f0f\uff08\u56fe\u7247\uff09\u3002\u6216\u8005\u5c06\u4e0a\u65b9\u6837\u4f8b\u8f93\u51fa\u590d\u5236\u5230\u6587\u672c\u7f16\u8f91\u5668\u4e2d\u5373\u53ef\u6b63\u5e38\u663e\u793a\u3002</font>\\n<img src=\"uploadFiles/2162_s.png\" />", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 99, "total_accepted_number": 19, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2173, "fields": {"title": "Problem A\uff1a\u4ece\u5934\u518d\u6765", "description": "\u6628\u5929\u6240\u6709\u7684\u8363\u8a89\uff0c\u5df2\u53d8\u6210\u9065\u8fdc\u7684\u56de\u5fc6\u3002<p></p>\u52e4\u52e4\u82e6\u82e6\u5df2\u5ea6\u8fc7\u534a\u751f\uff0c\u4eca\u591c\u91cd\u53c8\u8d70\u5165\u98ce\u96e8\u3002<p></p>\u6211\u4e0d\u80fd\u968f\u6ce2\u6d6e\u6c89\uff0c\u4e3a\u4e86\u6211\u81f4\u7231\u7684\u4eb2\u4eba\u3002<p></p>\u518d\u82e6\u518d\u96be\u4e5f\u8981\u575a\u5f3a\uff0c\u53ea\u4e3a\u90a3\u4e9b\u671f\u5f85\u773c\u795e\u3002<p></p>\u5fc3\u82e5\u5728\u68a6\u5c31\u5728\uff0c\u5929\u5730\u4e4b\u95f4\u8fd8\u6709\u771f\u7231\u3002<p></p>\u770b\u6210\u8d25\u4eba\u751f\u8c6a\u8fc8\uff0c\u53ea\u4e0d\u8fc7\u662f\u4ece\u5934\u518d\u6765\u3002<p></p>", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u542b\u6709\u4e24\u884c\uff0c\u7b2c\u4e00\u884c\u4e3a\u53ea\u542b\u5c0f\u5199\u5b57\u6bcd\u7684\u5355\u8bcdA\uff0c\u7b2c\u4e8c\u884c\u4e3a\u53ea\u542b\u5c0f\u5199\u5b57\u6bcd\u7684\u5355\u8bcdB\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u90fd\u5927\u4e8e0\u4e14\u5c0f\u4e8e10000\uff0c\u5355\u8bcdB\u7684\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u5355\u8bcdA\u7684\u957f\u5ea6\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u8f93\u51fa\u5360\u4e00\u884c,\u5982\u679c\u80fd\u591f\u91cd\u65b0\u6392\u5217\u548c\u5220\u51cfA\u5355\u8bcd\u4e2d\u7684\u5b57\u6bcd\uff08\u5141\u8bb8\u5220\u9664A\u4e2d\u4e0d\u9700\u8981\u7684\u5b57\u6bcd\uff0c\u4e0d\u5141\u8bb8\u589e\u52a0\uff09\uff0c\u5982\u679c\u80fd\u591f\u6784\u6210B\u5355\u8bcd\u8f93\u51fa\u201dYes\u201d,\u5426\u5219\u8f93\u51fa\u201dNo\u201d\u3002", "samples": "[{\"input\": \"hello\\nhe\\naaab\\nbaa\\naaab\\naabb\\n\", \"output\": \"Yes\\nYes\\nNo\\n\"}]", "test_case_id": "2173", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 201, "total_accepted_number": 46, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2176, "fields": {"title": "Problem D\uff1a\u5f3a\u8feb\u75c7\u6539\u53d8\u4e16\u754c", "description": "UnkelTao\u662f\u4e2a\u597d\u4eba\uff0c\u4e0d\u662f\u56e0\u4e3a\u4ed6\u8001\u662f\u6536\u5230\u597d\u4eba\u5361\uff0c\u800c\u662f\u56e0\u4e3a\u4ed6\u662f\u4e2a\u5f3a\u8feb\u75c7\uff0c\u7ecf\u5e38\u4e3a\u4eba\u6c11\u8c0b\u798f\u5229\u3002\u773c\u770b\u5149\u68cd\u8282\u5c31\u8981\u6765\u4e34\u4e86\uff0cUnkelTao\u51b3\u5b9a\u51fa\u8d44\u514d\u8d39\u8bf7\u5355\u8eab\u7537\u5973\u4eec\u770b\u7535\u5f71\uff0c\u4ed6\u627e\u5230\u4e86\u4e00\u4e2a\u975e\u5e38\u5947\u602a\u7684\u7535\u5f71\u9662\uff0c\u91cc\u9762\u53ea\u67091\u6392N\u4e2a\u5ea7\u4f4d\uff0c\u6bcf\u4e2a\u5ea7\u4f4d\u5fc5\u987b\u63d0\u524d\u51b3\u5b9a\u5750\u7537\u751f\u8fd8\u662f\u5750\u5973\u751f\u3002<p></p>UnkelTao\u7684\u5f3a\u8feb\u75c7\u53d1\u4f5c\uff0c\u4ed6\u4e0d\u80fd\u5fcd\u53d7\u4e24\u4e2a\u7537\u7684\u5750\u5728\u4e00\u8d77\uff08\u4f46\u662f\u4e24\u4e2a\u5973\u751f\u4ed6\u80fd\u591f\u6109\u5feb\u7684\u63a5\u53d7\uff09\uff0c\u4e8e\u662f\u4ed6\u51b3\u5b9a\u8bf7\u4eba\u5e2e\u4ed6\u627e\u51fa\u5ea7\u4f4d\u7684\u5b89\u6392\u65b9\u6848(\u51b3\u5b9a\u6bcf\u4e2a\u5ea7\u4f4d\u5750\u7537\u751f\u8fd8\u662f\u5750\u5973\u751f)\u3002\u4f60\u80fd\u6392\u51fa\u591a\u5c11\u79cd\u4ee4UnkelTao\u6ee1\u610f\u7684\u65b9\u6848\u5462\uff1f<p></p>", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5360\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570N\u3002 (0 &lt; N\u22641000)", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u5360\u4e00\u884c\uff0c\u8f93\u51fa\u6807\u53f7\u4e3a\u6ee1\u610f\u7684\u65b9\u6848\u6570\u7684\u4e2a\u6570\u3002\u7531\u4e8e\u7ed3\u679c\u5de8\u5927\uff0c\u8f93\u51fa\u5bf92014\u53d6\u6a21\u540e\u7684\u7ed3\u679c\u3002", "samples": "[{\"input\": \"1\\n3\\n\", \"output\": \"2\\n5\\n\"}]", "test_case_id": "2176", "hint": "\u7b2c1\u7ec4\uff1a\u7537\uff0c\u5973 \u51712\u79cd\\n\u7b2c2\u7ec4:  \u7537\u5973\u7537\uff0c\u5973\u7537\u5973\uff0c\u5973\u5973\u7537\uff0c\u7537\u5973\u5973\uff0c\u5973\u5973\u5973 \u51715\u79cd\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 168, "total_accepted_number": 35, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2177, "fields": {"title": "Problem E: \u5f3a\u8feb\u75c7\u6539\u53d8\u4e16\u754cII", "description": "\u4e2d\u56fd\u4eba\u4ec0\u4e48\u90fd\u559c\u6b22\u4e1c\u897f\u90fd\u559c\u6b22\u8d4b\u4e88\u542b\u4e49\uff0c\u6570\u5b57\u4e5f\u4e0d\u4f8b\u5916\uff0c\u5f88\u591a\u4eba\u628a6\u548c8\u5f53\u6210\u5e78\u8fd0\u6570\u5b57\u3002\u540c\u65f6\u4e5f\u6709\u5f88\u591a\u4eba\u8ba8\u538c4\u548c7\u8fd9\u4e24\u4e2a\u6570\u5b57\uff0cUnkelTao\u5c31\u662f\u5176\u4e2d\u7684\u4e00\u4e2a\uff0c\u4f5c\u4e3a\u4e00\u540d\u91cd\u5ea6\u5f3a\u8feb\u75c7\u60a3\u8005\uff0c\u4ed6\u4e0d\u4ec5\u8ba8\u538c4\u548c7\u8fd9\u4e24\u4e2a\u6570\u5b57\uff0c\u51e1\u662f\u75314\u548c7\u7ec4\u6210\u7684\u6570\u5b57\u4ed6\u90fd\u8ba8\u538c\u3002\u751a\u81f3\u51e1\u662f\u53ea\u8981\u662f4\u548c7\u7ec4\u6210\u7684\u6570\u7684\u500d\u6570\u4ed6\u4e5f\u5f88\u8ba8\u538c\uff08\u598244\u7684\u500d\u657088\uff1b77\u7684\u500d\u6570154\uff1b47\u7684\u500d\u657094\uff1b447\u7684\u500d\u6570894\u7b49\uff09\u3002", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5360\u4e00\u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570l,r. \uff080 &lt; l\u2264r\u226410^9\uff09", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u8f93\u51fa\u5360\u4e00\u884c\uff0c\u8f93\u51fa\u5728\u533a\u95f4[l,r]\u4e4b\u5185\uff0c\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u662fUnkelTao\u6240\u8ba8\u538c\u7684\u3002", "samples": "[{\"input\": \"1 7\\n1 10\\n10 20\\n\", \"output\": \"2\\n3\\n4\\n\"}]", "test_case_id": "2177", "hint": "\u7b2c1\u7ec4\uff1a4,7\\n\u7b2c2\u7ec4:  4,7,8\\n\u7b2c2\u7ec4:  12,14,16,20\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 64, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2179, "fields": {"title": "Problem G\uff1a\u4f60\u662f\u4e2a\u597d\u4eba", "description": "\u201c\u505a\u4e2a\u597d\u4eba\u5e76\u4e0d\u96be\uff0c\u53ea\u8981\u4f60\u6562\u52c7\u6562\u7684\u8868\u767d\uff0c\u5f88\u53ef\u80fd\u5c31\u4f1a\u5f97\u5230\u4e00\u5f20\u597d\u4eba\u5361\u3002\u201d<p></p>\u201c\u4f60\u662f\u4e2a\u597d\u4eba\uff0c\u6211\u914d\u4e0d\u4e0a\u4f60\u201d\uff1b\u201c\u4f60\u72e0\u597d\uff0c\u4f46\u6211\u4e0d\u9002\u5408\u4f60\u201d\uff1b\u201c\u6211\u4eec\u8fd8\u662f\u505a\u670b\u53cb\u6bd4\u8f83\u597d\u201d\uff1b\u201c\u4f60\u5f88\u597d\uff0c\u4f46\u662f\u6211\u73b0\u5728\u53ea\u60f3\u4e00\u4e2a\u4eba\u201d\u2026..\u4f20\u8bf4\u4e2d\u5b58\u5728\u7740\u8fd9\u6837\u7684N\u5f20\u4e0d\u540c\u7684\u597d\u4eba\u5361\uff0c\u96c6\u9f50\u8fd9N\u5f20\u597d\u4eba\u5361\u5c31\u53ef\u4ee5\u53ec\u5524\u795e\u9f99\uff0c\u5b9e\u73b0\u8131\u5355\u7684\u613f\u671b\u3002<p></p>\u4e8e\u662f\u5c0f\u660e\u51b3\u5b9a\u627e\u5bfbM\u4e2a\u5973\u5b69\u5b50\u8fdb\u884c\u8868\u767d\uff0c\u6536\u96c6\u597d\u4eba\u5361\u3002\u5973\u5b69\u5b50\u4eec\u90fd\u5f88\u201d\u5584\u826f\u201d,\u4e00\u5b9a\u4f1a\u7ed9\u4e88\u5c0f\u660e\u4e00\u5f20\u597d\u4eba\u5361\u3002\u5047\u8bbe\u5973\u5b69\u5b50\u4f1a\u968f\u673a\uff08\u7b49\u6982\u7387\uff09\u7684\u7ed9\u51fa\u5176\u4e2d\u67d0\u4e00\u5f20\u597d\u4eba\u5361\u6253\u53d1\u5c0f\u660e\u3002\u95ee\u5c0f\u660e\u80fd\u591f\u6210\u529f\u7684\u8131\u5355\u7684\u6982\u7387\u662f\u591a\u5c11\u3002<p></p>", "input_description": "\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T (1\u2264T\u2264100)\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\uff1b\u63a5\u4e0b\u6765\u7684T\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570N\u548cM\uff0c\u8868\u793a\u597d\u4eba\u5361\u7684\u5f20\u6570\u4ee5\u53ca\u5973\u5b69\u5b50\u7684\u4e2a\u6570\u3002\uff080 &lt; N\u2264100,0\u2264M\u22642000\uff09", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u5c0f\u660e\u6210\u529f\u8131\u5355\u7684\u6982\u7387\uff0c\u4fdd\u75596\u5c0f\u6570\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5360\u75281\u884c\u3002", "samples": "[{\"input\": \"2\\n1 1\\n2 3\\n\", \"output\": \"1.000000\\n0.750000\\n\"}]", "test_case_id": "2179", "hint": "40%\u7684\u6570\u636e 0&lt;n\u226420,0\u2264m\u2264100\\n50%\u7684\u6570\u636e 0&lt;n\u226450,0\u2264m\u2264200\\n10%\u7684\u6570\u636e 0&lt;n\u2264100,0\u2264m\u22642000\\n\\n\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u6837\u4f8b\uff1a \u5176\u53ef\u80fd\u7684\u7ed3\u679c\u6709: 111,112,121,122,211,212,221,222 \u51718\u79cd\u60c5\u51b5\uff0c6\u79cd\u60c5\u51b5\u6536\u96c6\u4e86\u6240\u6709\u5361\u7247\uff0c\u6240\u4ee5\u6982\u7387\u4e3a6/8=0.75", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 43, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2180, "fields": {"title": "Problem H\uff1a\u6700\u840c\u8eab\u9ad8\u5dee", "description": "\u8fd9\u4e2a\u4e16\u754c\u4e0a\u4e00\u76f4\u6709\u4e00\u79cd\u53eb\u505a\u6700\u840c\u8eab\u9ad8\u5dee\u60c5\u4fa3\u7684\u4e1c\u897f\uff0c\u6bcf\u4e2a\u4eba\u8ba4\u4e3a\u7684\u90fd\u4e0d\u592a\u4e00\u6837\uff0cUnkelTao\u8ba4\u4e3a\u5b58\u5728\u7740\u4e00\u4e2a\u7cfb\u6570\u03b2(1\u2264 \u03b2\u226410), \u53ea\u8981\u60c5\u4fa3\u7684\u8eab\u9ad8\u5dee\u7684\u7edd\u5bf9\u503c\u4e3a\u03b2\u7684\u500d\u6570\uff0c\u8fd9\u5bf9\u60c5\u4fa3\u5c31\u88ab\u8ba4\u4e3a\u662f\u6700\u840c\u8eab\u9ad8\u5dee\u3002<p></p>\u67d0\u5927\u578b\u76f8\u4eb2\u6d3b\u52a8\u7b56\u5212\u4e00\u573a\u76f8\u4eb2\u6d3b\u52a8\uff0c\u5171\u6709 n \u4e2a\u4eba\u62a5\u540d\uff0c\u4ed6\u4eec\u7684\u7f16\u53f7\u662f 1,2, 3\u2026n , \u5bf9\u5e94\u7684\u8eab\u9ad8\u4e3a H[1],H [2], H [3]\u2026H [n]\u3002<p></p>\u7b56\u5212\u4eba UnkelTao \u4e3a\u516c\u53f8\u51c6\u5907\u4e86\u4e00\u5957\u5b8c\u6574\u7684\u914d\u5bf9\u7cfb\u7edf\uff0c\u53ef\u4ee5\u8fdb\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\u3002\u53ef\u4ee5\u66f4\u65b0\u67d0\u7f16\u53f7\u7684\u8eab\u9ad8\uff0c\u4e5f\u53ef\u4ee5\u8fdb\u884c\u667a\u80fd\u914d\u5bf9\uff1b\u53ea\u8981\u8f93\u5165\u8d77\u59cb\u7f16\u53f7 a<sub>l</sub> \u4e0e\u7ed3\u675f\u7f16\u53f7 a<sub>r</sub> \u548c\u6700\u840c\u8eab\u9ad8\u5dee\u7cfb\u6570\u03b2\uff0c\u5c31\u80fd\u51c6\u786e\u7684\u628a\u7f16\u53f7\u8303\u56f4 [a<sub>l</sub>,a<sub>r</sub> ]\u5185\u7684\u6240\u6709\u7684\u53ef\u80fd\u914d\u5bf9\u7ed9\u51fa\uff08UnkelTao \u4ece\u4e0d\u6b67\u89c6\u5f02\u6027\u604b\uff0cSo \u6027\u522b\u4ece\u6765\u4e0d\u662f\u7cfb\u7edf\u8003\u8651\u7684\u4e8b\u60c5\uff09, \u4f46\u662f UnkelTao \u6700\u8fd1\u4ee3\u7801\u80fd\u529b\u4e25\u91cd\u4e0b\u964d\uff0c\u4f60\u80fd\u5e2e\u52a9\u4ed6\u5417\uff1f<p></p>", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6837\u4f8b\uff08\u4e0d\u8d85\u8fc7 20 \u7ec4\uff09\n\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570 n \u548c m , \u8868\u793a\u6709 n \u4e2a\u4eba\u548c m \u6b21\u64cd\u4f5c\uff0c\u5176\u4e2d\uff082\u2264n\u226410^5,1\u2264m\u226410^5\uff09\u3002\n\u63a5\u4e0b\u6765\u4e00\u884c\u4e3an\u4e2a\u6574\u6570\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793an\u4eba\u7684\u8eab\u9ad8\uff0cH[1],H[2]\u2026H[n].(1\u2264H[i] \u226410^7),\u4e0d\u8981\u6000\u7591\uff0c\u8fd9\u4e2a\u4e16\u754c\u5c31\u662f\u8fd9\u4e48\u5947\u602a\u3002\n\u63a5\u4e0b\u6765\u6709m\u884c\uff0c\u6bcf\u4e00\u884c\u4ee3\u8868\u7740\u4e00\u4e2a\u64cd\u4f5c\uff0c\u6bcf\u884c\u53ef\u80fd\u6709\u4e24\u79cd\u683c\u5f0f(1\u64cd\u4f5c\u4e0e0\u64cd\u4f5c)\uff1a\n1 i p \uff1a 1\u64cd\u4f5c\uff0c\u8868\u793a\u66f4\u65b0\u7f16\u53f7\u4e3ai\u7684\u6210\u5458\u8eab\u9ad8\uff0c\u4e3a\u5176\u589e\u52a0p; (1\u2264i\u2264n;0\u2264p\u2264100);\n0 a<sub>l</sub> a<sub>r</sub> \u03b2: 0\u64cd\u4f5c\uff0c\u8868\u793a\u5728\u7cfb\u6570\u4e3a\u03b2\u7684\u60c5\u51b5\u4e0b\uff0c\u7f16\u53f7\u8303\u56f4\u5728[al,ar]\u7684\u914d\u5bf9\u7ec4\u6570\uff0c\u5176\u4e2d(1\u2264a<sub>l</sub>\u2264a<sub>r</sub>\u2264n,1\u2264 \u03b2\u226410)\n", "output_description": "\u5bf9\u4e8e\u4e3a\u64cd\u4f5c 0 \u7684\u67e5\u8be2\uff0c\u8f93\u51fa\u4e00\u5171\u6709\u591a\u5c11\u79cd\u7ec4\u5408\uff08\u7b54\u6848\u53ef\u80fd\u8fc7\u5927\uff0c\u8f93\u51fa\u5bf9 13041290 \u53d6\u6a21\u540e\u7684\u7ed3\u679c\u5373\u53ef\uff09\u3002", "samples": "[{\"input\": \"5 4\\n5 5 7 8 9\\n0 1 5 2\\n1 2 1\\n0 1 5 2\\n0 2 5 3\\n\", \"output\": \"6\\n4\\n1\\n\"}]", "test_case_id": "2180", "hint": "\u7b2c\u4e00\u4e2a0\u64cd\u4f5c\uff1a  a<sub>1</sub>\u4e0ea<sub>2</sub>\uff0ca<sub>1</sub>\u4e0ea<sub>3</sub>\uff0ca<sub>1</sub>\u4e0ea<sub>5</sub>\uff0ca<sub>2</sub>\u4e0ea<sub>3</sub>\uff0ca<sub>2</sub>\u4e0ea<sub>5</sub>\uff0ca<sub>3</sub>\u4e0ea<sub>5</sub> \u51716\u5bf9\\n\u7b2c\u4e8c\u4e2a0\u64cd\u4f5c: \u5176\u4e2d\u7b2c\u4e8c\u4e2a\u6570\u5b575\u53d8\u6210\u4e866\uff0c\u6392\u5217\u53d8\u62105,6,7,8,9\u3002  a<sub>1</sub>\u4e0ea<sub>3</sub>\uff0ca<sub>1</sub>\u4e0ea<sub>5</sub>\uff0ca<sub>2</sub>\u4e0ea<sub>4</sub>\uff0ca<sub>3</sub>\u4e0ea<sub>5</sub>  \u51714\u5bf9\\n\u7b2c\u4e09\u4e2a0\u64cd\u4f5c: \u53ea\u6709a<sub>1</sub>\u4e0ea<sub>4</sub>\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u662f3\u7684\u500d\u6570\uff0c\u6240\u4ee5\u53ea\u67091\u7ec4", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 32768, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 4, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2181, "fields": {"title": "Problem I\uff1aMissing\u6559\u5927\u5bb6\u753b\u77e9\u5f62", "description": "\u7ed9\u4f60N\uff081&lt;=N&lt;=4\uff09\u4e2a\u4e0d\u540c\u70b9\u3002\u5982\u679c\u7531\u8fd9\u4e9b\u70b9\u80fd\u786e\u5b9a\u4e00\u4e2a\u77e9\u5f62\uff0c\u4e14\u8fd9\u4e2a\u77e9\u5f62\u7684\u8fb9\u5e73\u884c\u4e8e\u5750\u6807\u8f74\uff0c\u53c2\u7167\u6837\u4f8b\u753b\u51fa\u8fd9\u4e2a\u77e9\u5f62\uff1b\u5426\u5219\uff0c\u8f93\u51faNone\u3002", "input_description": "\u8f93\u5165\u5305\u542b\u6d4b\u8bd5\u7ec4\u6570T\uff08T<=100\uff09\uff0c\u968f\u540eT\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570N\uff081<=N<=4\uff09\uff0c\u4ee3\u8868\u7ed9\u51fa\u7684\u70b9\u6570\uff0c\u63a5\u4e0b\u6765N\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570x\uff0cy\uff080<=x\uff0cy<=50\uff09\uff0c\u4ee3\u8868\u4e00\u4e2a\u70b9\u7684\u5750\u6807\uff08x\uff0cy\uff09\uff0c\u4fdd\u8bc1N\u4e2a\u70b9\u4e0d\u76f8\u540c\u3002", "output_description": "\u5bf9\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u6d4b\u8bd5\u5e8f\u53f7\u201cCase #k:\u201d\uff08k\u4ece1\u5f00\u59cb\uff09\uff0c\u7136\u540e\u6362\u884c\u3002\u6211\u4eec\u5b9a\u4e49\u5de6\u4e0a\u89d2\u4e3a\u539f\u70b9\uff080\uff0c0\uff09\uff0c\u5782\u76f4\u4e3ax\u8f74\uff0c\u5411\u4e0b\u5750\u6807\u9012\u589e\uff0c\u6c34\u5e73\u4e3ay\u8f74\uff0c\u5411\u53f3\u5750\u6807\u9012\u589e\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e3a\u4e00\u4e2a\u5355\u4f4d\u957f\u5ea6\u3002\u5982\u679c\u5b58\u5728\u77e9\u5f62\u8f93\u51fa\u77e9\u5f62\uff1b\u5426\u5219\u8f93\u51fa\u201cNone\u201d\u3002", "samples": "[{\"input\": \"3\\n2\\n1 1\\n3 3\\n2\\n2 4\\n4 2\\n2\\n0 0\\n0 1\\n\", \"output\": \"Case #1:\\n\\n ***\\n * *\\n ***\\nCase #2:\\n\\n\\n  ***\\n  * *\\n  ***\\nCase #3:\\nNone\\n\"}]", "test_case_id": "2181", "hint": "\u8bf7\u590d\u5236\u7f51\u9875\u4e0a\u7684\u6837\u4f8b\u5230\u6587\u672c\u6587\u4ef6\u4e2d\u67e5\u770b\u7ec6\u8282\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u6362\u884c\u548c\u7a7a\u683c\u54e6\uff08\u5982\u679c\u67d0\u4e00\u884c\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u8fd9\u884c\u53ea\u6709\u4e00\u4e2a\u56de\u8f66\uff0c\u6ca1\u6709\u591a\u4f59\u7684\u7a7a\u683c\uff09\\n\u6700\u540e\u4e00\u4e2a\u6837\u4f8b\u4e5f\u9700\u8981\u6362\u884c\u7b26\uff0c\u5982sample\u4e2d\u7684None\u540e\u9762\u6709&quot;\\n&quot;", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 149, "total_accepted_number": 30, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2182, "fields": {"title": "Let the Balloon Rise", "description": "Contest time again! How excited it is to see balloons floating around. But to tell you a secret, the judges&#039; favorite time is guessing the most popular problem. When the contest is over, they will count the balloons of each color and find the result.<p></p><p></p>This year, they decide to leave this lovely job to you. ", "input_description": "Input contains multiple test cases. Each test case starts with a number N (0 < N <= 1000) -- the total number of balloons distributed. The next N lines contain one color each. The color of a balloon is a string of up to 15 lower-case letters.\n\nA test case with N = 0 terminates the input and this test case is not to be processed.", "output_description": "For each case, you should print a line containing the case number (beginning with 1) and the final string. And then print the color of balloon for the most popular problem on a single line. If the max number of the different color is same, print the first one by dictionary order.", "samples": "[{\"input\": \"5\\ngreen\\nred\\nblue\\nred\\nred\\n3\\npink\\norange\\npink\\n0\", \"output\": \"Case #1:\\nred\\nCase #2:\\npink\"}]", "test_case_id": "2182", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 64, "total_accepted_number": 30, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2183, "fields": {"title": "Todo List", "description": "You have some things to do,and for i-th thing can only do it on&#8201;day ai. You must do it in non-decreasing ordre.However,for everything you also can do it before the schedule time on day bi. Suppose you can do several things in one day.", "input_description": "The first line contains a single positive integer n (1&#8201;\u2264&#8201;n&#8201;\u2264&#8201;3000) \u2015 the number of thins you will do.\nEach of the next n lines contains two positive space-separated integers ai and bi (1&#8201;\u2264&#8201;bi&#8201;<&#8201;ai&#8201;\u2264&#8201;1e9) \u2015 the date of the thing in the schedule and the early date of things.", "output_description": "Print a single integer \u2015 the minimum possible number of the day when you can do everything in the todo list.", "samples": "[{\"input\": \"3\\n5 2\\n3 1\\n4 2\\n3\\n6 1\\n5 2\\n4 3\", \"output\": \"2\\n6\"}]", "test_case_id": "2183", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 14, "total_accepted_number": 10, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2184, "fields": {"title": "DongGua: Save our SWJTU!", "description": "One night ,Desgard_Duan was caught by an alien named \u201cDG\u201dwhen he was sleeping soundly.<p></p>\u201cNow,you are in a extremely complicated maze, if you can\u2019t escape from this maze,you will be trapped in it all your life!And I will destroy SWJTU OJ! hhhhhhhhhhhhhhh\u201d<p></p>\u201cWhy you choose me?!\u201d<p></p>\u201cOK,shut up,now I will give you some prompts.This is a N rows and M columns maze ,and then your start point (X1,Y1),the end of maze (X2,Y2).For every location,i will give you a value which means the value of walls around it.\u201d<p></p>\u201cWhat\u2019s the value mean?\u201d(mad)<p></p>\u201cXiao Xiao Duan Donggua,so clever ya!<p></p>If the location has a wall above it the variable has 8 added to it.<p></p>If the location has a wall to the left of it the variable has 4 added to it.<p></p>If the location has a wall below it the variable has 2 added to it.<p></p>If the location has a wall to the right of it the variable has 1 added to it.\u201d<p></p>But,as you know ,Duan Donggua\u2019s ID is not so reliable.Can you help him?", "input_description": "For each case, the first line of input contains two numbers: m and n (0 <= m, n <= 600).\nThe second line contains two number X1, Y1. They are start point.\nAs the second line, two number X2, Y2 are the end of maze. (0 <= X1, X2 < m, 0 <= Y1, Y2 < n)\nThe following m lines include n numbers each. And this is the Matrix to describe the maze. ", "output_description": "Your program should output a text file with two lines:\nThe first line should be the number of moves required to get from the start location to the end location.\nThe second line should be a list of moves that will trace a path from the start position to the end position without going through any walls. Each move is represented by a single letter U, D, L or R for Up, Down, Left or Right respectively.", "samples": "[{\"input\": \"5 4\\n2 2\\n4 0\\n14 9 12 9\\n14 2 3 5\\n13 12 8 3\\n5 5 6 9\\n6 2 11 7\", \"output\": \"4\\nLDDL\"}]", "test_case_id": "2184", "hint": "<img src=\"uploadFiles/2184.png\" />", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 64, "total_accepted_number": 36, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2186, "fields": {"title": "\u201cyou\u201d or \u201cwe\u201d?", "description": "\u7b2c 38 \u5c4a ACM-ICPC \u4e9a\u6d32\u533a\u6210\u90fd\u8d5b\u533a\u5728 10 \u6708 20 \u53f7\u8fd9\u5929\u9686\u91cd\u5f00\u59cb\u4e86\u3002\u73b0\u573a\u6709\u6765<p></p>\u81ea\u5317\u5927\u3001\u6e05\u534e\u7b49 100 \u591a\u6240\u9ad8\u6821\uff0c\u5404\u8def\u5927\u795e\u7ade\u76f8\u8650\u573a\u3002\u9762\u5bf9\u5982\u6b64\u5927\u7684\u538b\u529b\uff0cWDD<p></p>\u6218\u961f\u7684\u961f\u957f\u5c0f\u5c71\u540c\u5b66\u51b3\u5b9a\u8981\u505a\u70b9\u4ec0\u4e48\u4e86\uff01\u4ed6\u5728\u6bd4\u8d5b\u524d\u4e00\u5929\u7ed9\u961f\u53cb\u4eec\u5199\u4e86\u4e00\u5c01\u6fc0<p></p>\u52b1\u4fe1\uff0c\u540d\u4e3a\u300awe are a team\u300b\u3002\u90e8\u5206\u5185\u5bb9\u5982\u4e0b\uff1a<p></p>You will live every single day of your life with absolute passion, and you will show<p></p>your passion through the words you speak and the actions you take. I must do it! I can<p></p>do it! You will do it! You will succeed! You should believe we are a team......<p></p>\u5199\u5b8c\u8fd9\u4efd\u52b1\u5fd7\u77ed\u6587\uff0c\u5c0f\u5c71\u89c9\u5f97\u4fe1\u5fc3\u6ee1\u6ee1\uff0c\u4ed6\u7684\u961f\u53cb\u4eec\u4e00\u5b9a\u4f1a\u5927\u53d7\u611f\u67d3\uff0c\u660e\u5929\u7684<p></p>\u5956\u724c\uff0c\u6210\u7af9\u5728\u80f8\uff01\u4e0d\u8fc7\uff0c\u4ed6\u53c8\u53d1\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u628a\u6587\u4e2d\u7684\u7b2c\u4e8c\u4eba\u79f0\u201cyou\u201d<p></p>\u6539\u4e3a\u7b2c\u4e00\u4eba\u79f0\u201cwe\u201d\uff0c\u8981\u66f4\u4e3a\u59a5\u5f53\u4e00\u4e9b\uff0c\u4f53\u73b0 WDD \u7684\u6210\u5458\u662f\u65e0\u6bd4\u56e2\u7ed3\u7684\u3002<p></p>\u73b0\u5728\u5c0f\u5c71\u9700\u8981\u4f60\u5e2e\u4e2a\u5fd9\uff0c\u5e2e\u4ed6\u628a\u6587\u4e2d\u6240\u6709\u7684\u201cyou\u201d\u6362\u4e3a\u201cwe\u201d\u3002", "input_description": "\u8f93\u5165\u82e5\u5e72\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u884c\u6570\u636e\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc71000\u3002", "output_description": "\u5bf9\u4e8e\u8f93\u5165\u7684\u6bcf\u4e00\u884c\uff0c\u8f93\u51fa\u66ff\u6362\u540e\u7684\u5b57\u7b26\u4e32\u3002", "samples": "[{\"input\": \"you are what you do\", \"output\": \"we are what we do\"}]", "test_case_id": "2186", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 3, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2187, "fields": {"title": "\u201cyou\u201d or \u201cwe\u201d?", "description": "\u7b2c 38 \u5c4a ACM-ICPC \u4e9a\u6d32\u533a\u6210\u90fd\u8d5b\u533a\u5728 10 \u6708 20 \u53f7\u8fd9\u5929\u9686\u91cd\u5f00\u59cb\u4e86\u3002\u73b0\u573a\u6709\u6765<p></p>\u81ea\u5317\u5927\u3001\u6e05\u534e\u7b49 100 \u591a\u6240\u9ad8\u6821\uff0c\u5404\u8def\u5927\u795e\u7ade\u76f8\u8650\u573a\u3002\u9762\u5bf9\u5982\u6b64\u5927\u7684\u538b\u529b\uff0cWDD<p></p>\u6218\u961f\u7684\u961f\u957f\u5c0f\u5c71\u540c\u5b66\u51b3\u5b9a\u8981\u505a\u70b9\u4ec0\u4e48\u4e86\uff01\u4ed6\u5728\u6bd4\u8d5b\u524d\u4e00\u5929\u7ed9\u961f\u53cb\u4eec\u5199\u4e86\u4e00\u5c01\u6fc0<p></p>\u52b1\u4fe1\uff0c\u540d\u4e3a\u300awe are a team\u300b\u3002\u90e8\u5206\u5185\u5bb9\u5982\u4e0b\uff1a<p></p>You will live every single day of your life with absolute passion, and you will show<p></p>your passion through the words you speak and the actions you take. I must do it! I can<p></p>do it! You will do it! You will succeed! You should believe we are a team......<p></p>\u5199\u5b8c\u8fd9\u4efd\u52b1\u5fd7\u77ed\u6587\uff0c\u5c0f\u5c71\u89c9\u5f97\u4fe1\u5fc3\u6ee1\u6ee1\uff0c\u4ed6\u7684\u961f\u53cb\u4eec\u4e00\u5b9a\u4f1a\u5927\u53d7\u611f\u67d3\uff0c\u660e\u5929\u7684<p></p>\u5956\u724c\uff0c\u6210\u7af9\u5728\u80f8\uff01\u4e0d\u8fc7\uff0c\u4ed6\u53c8\u53d1\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u628a\u6587\u4e2d\u7684\u7b2c\u4e8c\u4eba\u79f0\u201cyou\u201d<p></p>\u6539\u4e3a\u7b2c\u4e00\u4eba\u79f0\u201cwe\u201d\uff0c\u8981\u66f4\u4e3a\u59a5\u5f53\u4e00\u4e9b\uff0c\u4f53\u73b0 WDD \u7684\u6210\u5458\u662f\u65e0\u6bd4\u56e2\u7ed3\u7684\u3002<p></p>\u73b0\u5728\u5c0f\u5c71\u9700\u8981\u4f60\u5e2e\u4e2a\u5fd9\uff0c\u5e2e\u4ed6\u628a\u6587\u4e2d\u6240\u6709\u7684\u201cyou\u201d\u6362\u4e3a\u201cwe\u201d\u3002", "input_description": "\u8f93\u5165\u82e5\u5e72\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u884c\u6570\u636e\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc71000\u3002", "output_description": "\u5bf9\u4e8e\u8f93\u5165\u7684\u6bcf\u4e00\u884c\uff0c\u8f93\u51fa\u66ff\u6362\u540e\u7684\u5b57\u7b26\u4e32\u3002", "samples": "[{\"input\": \"you are what you do\", \"output\": \"we are what we do\"}]", "test_case_id": "2187", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 18, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2188, "fields": {"title": "Sticks", "description": "George took sticks of the same length and cut them randomly until all parts became at most 50 units long. Now he wants to return sticks to the original state, but he forgot how many sticks he had originally and how long they were originally. Please help him and design a program which computes the smallest possible original length of those sticks. All lengths expressed in units are integers greater than zero.", "input_description": "The input contains blocks of 2 lines. The first line contains the number of sticks parts after cutting, there are at most 64 sticks. The second line contains the lengths of those parts separated by the space. The last line of the file contains zero. ", "output_description": "The output should contains the smallest possible length of original sticks, one per line.", "samples": "[{\"input\": \"9\\n5 2 1 5 2 1 5 2 1\\n4\\n1 2 3 4\\n0\", \"output\": \"6\\n5\"}]", "test_case_id": "2188", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 10, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2189, "fields": {"title": "A + B", "description": "I have a very simple problem for you. Given two integers A and B, your task<p></p>is to calculate the sum of A and B.", "input_description": "The first line of the input contains an integer T (1 \u2264 T \u2264 20) which means\nthe number of test cases. Each of the following T lines consists of two positive\nintegers, A and B. Notice that the integers may be large, which means you\nshould not process them by using 32-bit integer. You may assume the decimal\nlength of each integer will not exceed 1000", "output_description": "For each test case, you should output two lines. The first line is \u201cCase k:\u201d, k\nmeans the order of the test case. The second line is an equation A + B = Sum,\nSum means the result of A + B. Note that A, B and Sum are separated by a\nspace, and a blank line is given between two test cases.", "samples": "[{\"input\": \"2\\n1 2\\n112233445566778899 998877665544332211\", \"output\": \"Case 1:\\n1 + 2 = 3\\n\\nCase 2:\\n112233445566778899 + 998877665544332211 = 1111111111111111110\"}]", "test_case_id": "2189", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 63, "total_accepted_number": 10, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2190, "fields": {"title": "\u751f\u65e5\u8ba1\u7b97", "description": "\u67d0\u74dc\u5927\u5927\u662f\u4e2a\u5b66\u4e60\u673a\u5668\uff0c\u5929\u5929\u71ac\u591c\u5230\u5f88\u665a\uff0c\u4ed6\u4e5f\u4e3a\u81ea\u5df1\u62c5\u5fc3,&quot;\u6211\u4f1a\u4e0d\u4f1a\u731d\u6b7b\u5462&quot;\uff0c\u4f46\u662f\u67d0\u74dc\u5927\u5927\u8bf4&quot;\u6211\u8981\u5b66\u6574\u6574\u4e09\u5341\u5e74!&quot;\u3002\u4f46\u662f\u67d0\u74dc\u5927\u5927\u6570\u5b66\u4e0d\u597d\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\uff0c\u4ed6\u60f3\u77e5\u9053\uff0c\u5982\u679c\u4ed6\u4ece\u51fa\u751f\u5f00\u59cb\u5b66\u4e60\u6574\u6574\u4e09\u5341\u5e74\u7684\u8bdd\uff0c\u8981\u5b66\u591a\u5c11\u5929\uff1f", "input_description": "\u4e00\u4e2a\u6570T\uff0c\u540e\u9762T\u884c\u6bcf\u884c\u662f\u67d0\u74dc\u5927\u5927\u7684\u751f\u65e5\uff0c\u683c\u5f0f\u662fYYYY-MM-DD\u3002\u4f8b\u59821988-03-07\u3002", "output_description": "T\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u67d0\u74dc\u5927\u5927\u518d\u5b66\u4e60\u4e09\u5341\u5e74\u7684\u5929\u6570\u3002\u5982\u679c\u6ca1\u6709\u90a3\u4e00\u5929\uff0c\u5c31\u8f93\u51fa-1\u3002", "samples": "[{\"input\": \"1\\n1988-03-07\", \"output\": \"10957\"}]", "test_case_id": "2190", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2191, "fields": {"title": "\u751f\u65e5\u8ba1\u7b97", "description": "\u67d0\u74dc\u5927\u5927\u662f\u4e2a\u5b66\u4e60\u673a\u5668\uff0c\u5929\u5929\u71ac\u591c\u5230\u5f88\u665a\uff0c\u4ed6\u4e5f\u4e3a\u81ea\u5df1\u62c5\u5fc3,&quot;\u6211\u4f1a\u4e0d\u4f1a\u731d\u6b7b\u5462&quot;\uff0c\u4f46\u662f\u67d0\u74dc\u5927\u5927\u8bf4&quot;\u6211\u8981\u518d\u5b66\u6574\u6574\u4e09\u5341\u5e74!&quot;\u3002\u4f46\u662f\u67d0\u74dc\u5927\u5927\u6570\u5b66\u4e0d\u597d\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\uff0c\u4ed6\u60f3\u77e5\u9053\uff0c\u5982\u679c\u4ed6\u4ece\u51fa\u751f\u5f00\u59cb\u5b66\u4e60\u6574\u6574\u4e09\u5341\u5e74\u7684\u8bdd\uff0c\u8981\u5b66\u591a\u5c11\u5929\uff1f", "input_description": "\u4e00\u4e2a\u6570T\uff0c\u540e\u9762T\u884c\u6bcf\u884c\u662f\u67d0\u74dc\u5927\u5927\u751f\u65e5\u7684\u65e5\u671f\uff0c\u683c\u5f0f\u662fYYYY-MM-DD\u3002\u4f8b\u59821988-03-07\u3002", "output_description": "T\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u67d0\u74dc\u5927\u5927\u518d\u5b66\u4e60\u4e09\u5341\u5e74\u7684\u5929\u6570\u3002\u5982\u679c\u6ca1\u6709\u90a3\u4e00\u5929\uff0c\u5c31\u8f93\u51fa-1\u3002", "samples": "[{\"input\": \"1\\n1988-03-07\", \"output\": \"10957\"}]", "test_case_id": "2191", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2192, "fields": {"title": "Octal Fractions", "description": "Fractions in octal (base 8) notation can be expressed exactly in decimal notation. For example, 0.75 in octal is 0.963125 (7/8 + 5/64) in decimal. All octal numbers of n digits to the right of the octal point can be expressed in no more than 3n decimal digits to the right of the decimal point. <p></p><p></p>Write a program to convert octal numerals between 0 and 1, inclusive, into equivalent decimal numerals.", "input_description": "The input to your program will consist of octal numbers, one per line, to be converted. Each input number has the form 0.d1d2d3 ... dk, where the di are octal digits (0..7). There is no limit on k.", "output_description": "Your output will consist of a sequence of lines of the form \n\n\n\n0.d1d2d3 ... dk [8] = 0.D1D2D3 ... Dm [10] \n\n\nwhere the left side is the input (in octal), and the right hand side the decimal (base 10) equivalent. There must be no trailing zeros, i.e. Dm is not equal to 0.", "samples": "[{\"input\": \"0.75\\n0.0001\\n0.01234567\", \"output\": \"0.75 [8] = 0.953125 [10]\\n0.0001 [8] = 0.000244140625 [10]\\n0.01234567 [8] = 0.020408093929290771484375 [10]\"}]", "test_case_id": "2192", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2193, "fields": {"title": "Octal Fractions", "description": "Fractions in octal (base 8) notation can be expressed exactly in decimal notation. For example, 0.75 in octal is 0.963125 (7/8 + 5/64) in decimal. All octal numbers of n digits to the right of the octal point can be expressed in no more than 3n decimal digits to the right of the decimal point. <p></p><p></p>Write a program to convert octal numerals between 0 and 1, inclusive, into equivalent decimal numerals.", "input_description": "The input to your program will consist of octal numbers, one per line, to be converted. Each input number has the form 0.d1d2d3 ... dk, where the di are octal digits (0..7). There is no limit on k.", "output_description": "Your output will consist of a sequence of lines of the form \n\n\n\n0.d1d2d3 ... dk [8] = 0.D1D2D3 ... Dm [10] \n\n\nwhere the left side is the input (in octal), and the right hand side the decimal (base 10) equivalent. There must be no trailing zeros, i.e. Dm is not equal to 0.", "samples": "[{\"input\": \"0.75\\n0.0001\\n0.01234567\", \"output\": \"0.75 [8] = 0.953125 [10]\\n0.0001 [8] = 0.000244140625 [10]\\n0.01234567 [8] = 0.020408093929290771484375 [10]\"}]", "test_case_id": "2193", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 6, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2194, "fields": {"title": "Prime Ring Problem", "description": "A ring is compose of n circles as shown in diagram. Put natural number 1, 2, ..., n into each circle separately, and the sum of numbers in two adjacent circles should be a prime.<p></p><p></p>Note: the number of first circle should always be 1.", "input_description": "n (0 < n < 20).", "output_description": "The output format is shown as sample below. Each row represents a series of circle numbers in the ring beginning from 1 clockwisely and anticlockwisely. The order of numbers must satisfy the above requirements. Print solutions in lexicographical order.\n\nYou are to write a program that completes above process.\n\nPrint a blank line after each case.\n", "samples": "[{\"input\": \"6\\n8\", \"output\": \"Case 1:\\n1 4 3 2 5 6\\n1 6 5 2 3 4\\n\\nCase 2:\\n1 2 3 8 5 6 7 4\\n1 2 5 8 3 4 7 6\\n1 4 7 6 5 8 3 2\\n1 6 7 4 3 8 5 2\"}]", "test_case_id": "2194", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 8000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 33, "total_accepted_number": 13, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2195, "fields": {"title": "N\u7687\u540e\u95ee\u9898", "description": "\u5728N*N\u7684\u65b9\u683c\u68cb\u76d8\u653e\u7f6e\u4e86N\u4e2a\u7687\u540e\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0d\u76f8\u4e92\u653b\u51fb\uff08\u5373\u4efb\u610f2\u4e2a\u7687\u540e\u4e0d\u5141\u8bb8\u5904\u5728\u540c\u4e00\u6392\uff0c\u540c\u4e00\u5217\uff0c\u4e5f\u4e0d\u5141\u8bb8\u5904\u5728\u4e0e\u68cb\u76d8\u8fb9\u6846\u621045\u89d2\u7684\u659c\u7ebf\u4e0a\u3002<p></p>\u4f60\u7684\u4efb\u52a1\u662f\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684N\uff0c\u6c42\u51fa\u6709\u591a\u5c11\u79cd\u5408\u6cd5\u7684\u653e\u7f6e\u65b9\u6cd5\u3002", "input_description": "\u5171\u6709\u82e5\u5e72\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6b63\u6574\u6570N\u226410\uff0c\u8868\u793a\u68cb\u76d8\u548c\u7687\u540e\u7684\u6570\u91cf\uff1b\u5982\u679cN=0\uff0c\u8868\u793a\u7ed3\u675f\u3002", "output_description": "\u5171\u6709\u82e5\u5e72\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u5bf9\u5e94\u8f93\u5165\u884c\u7684\u7687\u540e\u7684\u4e0d\u540c\u653e\u7f6e\u6570\u91cf\u3002", "samples": "[{\"input\": \"1\\n8\\n5\\n0\", \"output\": \"1\\n92\\n10\"}]", "test_case_id": "2195", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 13, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2196, "fields": {"title": "Save Angel ", "description": "Angel was caught by the MOLIGPY! He was put in prison by Moligpy. The prison is described as a N * M (N, M &lt;= 200) matrix. There are WALLs, ROADs, and GUARDs in the prison.<p></p><p></p>Angel&#039;s friends want to save Angel. Their task is: approach Angel. We assume that &quot;approach Angel&quot; is to get to the position where Angel stays. When there&#039;s a guard in the grid, we must kill him (or her?) to move into the grid. We assume that we moving up, down, right, left takes us 1 unit time, and killing a guard takes 1 unit time, too. And we are strong enough to kill all the guards.<p></p><p></p>You have to calculate the minimal time to approach Angel. (We can move only UP, DOWN, LEFT and RIGHT, to the neighbor grid within bound, of course.)", "input_description": "First line contains two integers stand for N and M.\n\nThen N lines follows, every line has M characters. \".\" stands for road, \"a\" stands for Angel, and \"r\" stands for each of Angel's friend. \n\nProcess to the end of the file.", "output_description": "For each test case, your program should output a single integer, standing for the minimal time needed. If such a number does no exist, you should output a line containing \"Poor ANGEL has to stay in the prison all his life.\" ", "samples": "[{\"input\": \"7 8\\n#.#####.\\n#.a#..r.\\n#..#x...\\n..#..#.#\\n#...##..\\n.#......\\n........\", \"output\": \"13\"}]", "test_case_id": "2196", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 6, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2197, "fields": {"title": "\u7ea2\u4e0e\u9ed1", "description": "There is a rectangular room, covered with square tiles. Each tile is colored either red or black. A man is standing on a black tile. From a tile, he can move to one of four adjacent tiles. But he can&#039;t move on red tiles, he can move only on black tiles.<p></p><p></p>Write a program to count the number of black tiles which he can reach by repeating the moves described above. ", "input_description": "The input consists of multiple data sets. A data set starts with a line containing two positive integers W and H; W and H are the numbers of tiles in the x- and y- directions, respectively. W and H are not more than 20.\n\nThere are H more lines in the data set, each of which includes W characters. Each character represents the color of a tile as follows.\n\n'.' - a black tile \n'#' - a red tile \n'@' - a man on a black tile(appears exactly once in a data set) ", "output_description": "For each data set, your program should output a line which contains the number of tiles he can reach from the initial tile (including itself). ", "samples": "[{\"input\": \"6 9\\n....#.\\n.....#\\n......\\n......\\n......\\n......\\n......\\n#@...#\\n.#..#.\\n0 0\", \"output\": \"45\"}]", "test_case_id": "2197", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 11, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2198, "fields": {"title": "Tempter of the Bone", "description": "The doggie found a bone in an ancient maze, which fascinated him a lot. However, when he picked it up, the maze began to shake, and the doggie could feel the ground sinking. He realized that the bone was a trap, and he tried desperately to get out of this maze.<p></p><p></p>The maze was a rectangle with sizes N by M. There was a door in the maze. At the beginning, the door was closed and it would open at the T-th second for a short period of time (less than 1 second). Therefore the doggie had to arrive at the door on exactly the T-th second. In every second, he could move one block to one of the upper, lower, left and right neighboring blocks. Once he entered a block, the ground of this block would start to sink and disappear in the next second. He could not stay at one block for more than one second, nor could he move into a visited block. Can the poor doggie survive? Please help him.", "input_description": "The input consists of multiple test cases. The first line of each test case contains three integers N, M, and T (1 < N, M < 7; 0 < T < 50), which denote the sizes of the maze and the time at which the door will open, respectively. The next N lines give the maze layout, with each line containing M characters. A character is one of the following:\n\n'X': a block of wall, which the doggie cannot enter; \n'S': the start point of the doggie; \n'D': the Door; or\n'.': an empty block.\n\nThe input is terminated with three 0's. This test case is not to be processed.", "output_description": "For each test case, print in one line \"YES\" if the doggie can survive, or \"NO\" otherwise.", "samples": "[{\"input\": \"4 4 5\\nS.X.\\n..X.\\n..XD\\n....\\n3 4 5\\nS.X.\\n..X.\\n...D\\n0 0 0\", \"output\": \"NO\\nYES\"}]", "test_case_id": "2198", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2199, "fields": {"title": "\u8ba1\u7b97\u7403\u4f53\u79ef", "description": "\u6839\u636e\u8f93\u5165\u7684\u534a\u5f84\u503c\uff0c\u8ba1\u7b97\u7403\u7684\u4f53\u79ef\u3002", "input_description": "\u8f93\u5165\u6570\u636e\u6709\u591a\u7ec4\uff0c\u6bcf\u7ec4\u5360\u4e00\u884c\uff0c\u6bcf\u884c\u5305\u62ec\u4e00\u4e2a\u5b9e\u6570\uff0c\u8868\u793a\u7403\u7684\u534a\u5f84\u3002", "output_description": "\u8f93\u51fa\u5bf9\u5e94\u7684\u7403\u7684\u4f53\u79ef\uff0c\u5bf9\u4e8e\u6bcf\u7ec4\u8f93\u5165\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\uff0c\u8ba1\u7b97\u7ed3\u679c\u4fdd\u7559\u4e09\u4f4d\u5c0f\u6570\u3002", "samples": "[{\"input\": \"1\\n1.5\", \"output\": \"4.189\\n14.137\"}]", "test_case_id": "2199", "hint": "#define PI 3.1415927", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 198, "total_accepted_number": 82, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2200, "fields": {"title": "\u5e73\u5b89\u591c\u7684\u82f9\u679c", "description": "\u5e73\u5b89\u591c\u90a3\u5929\uff0cRose\u5de8\u5de8\u4e70\u82f9\u679c\u81ea\u5df1\u8fc7\u5e72\u763e\u3002\u4f46\u662f\u6bcf\u79cd\u82f9\u679c\u7684\u5927\u5c0f\u548c\u597d\u5403\u7a0b\u5ea6\u4e0d\u540c\u3002Rose\u5de8\u5de8\u53ea\u60f3\u8fc7\u4e00\u4e2a\u5b8c\u7f8e\u7684\u5355\u8eab\u5e73\u5b89\u591c\uff0c\u6240\u4ee5\u4efb\u6027\u4e86\u4e00\u628a\uff0c\u53ea\u7ba1\u5f80\u5305\u91cc\u88c5\u82f9\u679c\uff0c\u4e0d\u7ba1\u4ef7\u683c\u3002<p></p>\u806a\u660e\u7684\u4f60\u80af\u5b9a\u4e0d\u4f1a\u548cRose\u5de8\u5de8\u4e00\u6837\u6ce8\u5b64\u751f\uff0c\u6240\u4ee5\u4f60\u4f1a\u6289\u62e9\u6700\u4f18\u88c5\u82f9\u679c\u7684\u65b9\u6cd5\u3002\u5047\u8bbe\u4f60\u7684\u80cc\u5305\u7684\u5bb9\u79ef\u662fV\uff0c\u6765\u88c5\u4f53\u79ef\u4e3av1, v2, ......, vn\u7684\u591a\u4e2a\u82f9\u679c\uff0c\u4e14\u5df2\u77e5\u6bcf\u4e2a\u82f9\u679c\u7684\u597d\u5403\u7a0b\u5ea6\u4e3at1, t2, ......, tn\uff0c\u8bf7\u5728\u4e0d\u5c06\u80cc\u5305\u6491\u7834\u7684\u6761\u4ef6\u4e0b\uff0c\u5c06\u597d\u5403\u7a0b\u5ea6\u603b\u548c\u53d8\u6210\u6700\u5927\uff0c\u8ba9Rose\u5de8\u5de8\u8fc7\u4e00\u4e2a\u5b8c\u7f8e\u7684\u5e73\u5b89\u591c\u3002", "input_description": "\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T(T <= 100)\uff0c\u6d4b\u8bd5\u7ec4\u6570\n\u63a5\u4e0b\u6765\u7684T\u7ec4\u6570\u636e\uff0c\u6bcf\u4e00\u7ec4\u6709\u4e09\u884c\u3002\n\u7b2c\u4e00\u884c\u5305\u62ec\u4e24\u4e2a\u6574\u6570N\u3001V (N <= 1000 , V <= 1000 )\uff0c\u5206\u522b\u8868\u793a\u82f9\u679c\u7684\u6570\u91cf\u548cRose\u80cc\u5305\u7684\u5bb9\u79ef\u3002\n\u7b2c\u4e8c\u884c\u5305\u542bN\u4e2a\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u82f9\u679c\u7684\u597d\u5403\u7a0b\u5ea6\uff0c\u7b2c\u4e09\u884c\u5305\u62ecN\u4e2a\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u82f9\u679c\u7684\u6240\u5360\u4f53\u79ef\u3002", "output_description": "\u6ca1\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6700\u5927\u6574\u6570M\uff0c\u5373\u4e3a\u8fd9\u79cd\u60c5\u51b5\u4e0b\u53ef\u4ee5\u83b7\u5f97\u7684\u82f9\u679c\u6700\u5927\u597d\u5403\u7a0b\u5ea6\u4e4b\u548c\u3002", "samples": "[{\"input\": \"1\\n5 10\\n1 2 3 4 5\\n5 4 3 2 1\", \"output\": \"14\"}]", "test_case_id": "2200", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2201, "fields": {"title": "\u5e73\u5b89\u591c\u7684\u82f9\u679c", "description": "\u5e73\u5b89\u591c\u90a3\u5929\uff0cRose\u5de8\u5de8\u4e70\u82f9\u679c\u81ea\u5df1\u8fc7\u5e72\u763e\u3002\u4f46\u662f\u6bcf\u79cd\u82f9\u679c\u7684\u5927\u5c0f\u548c\u597d\u5403\u7a0b\u5ea6\u4e0d\u540c\u3002Rose\u5de8\u5de8\u53ea\u60f3\u8fc7\u4e00\u4e2a\u5b8c\u7f8e\u7684\u5355\u8eab\u5e73\u5b89\u591c\uff0c\u6240\u4ee5\u4efb\u6027\u4e86\u4e00\u628a\uff0c\u53ea\u7ba1\u5f80\u5305\u91cc\u88c5\u82f9\u679c\uff0c\u4e0d\u7ba1\u4ef7\u683c\u3002<p></p>\u806a\u660e\u7684\u4f60\u80af\u5b9a\u4e0d\u4f1a\u548cRose\u5de8\u5de8\u4e00\u6837\u6ce8\u5b64\u751f\uff0c\u6240\u4ee5\u4f60\u4f1a\u6289\u62e9\u6700\u4f18\u88c5\u82f9\u679c\u7684\u65b9\u6cd5\u3002\u5047\u8bbe\u4f60\u7684\u80cc\u5305\u7684\u5bb9\u79ef\u662fV\uff0c\u6765\u88c5\u4f53\u79ef\u4e3av1, v2, ......, vn\u7684\u591a\u4e2a\u82f9\u679c\uff0c\u4e14\u5df2\u77e5\u6bcf\u4e2a\u82f9\u679c\u7684\u597d\u5403\u7a0b\u5ea6\u4e3at1, t2, ......, tn\uff0c\u8bf7\u5728\u4e0d\u5c06\u80cc\u5305\u6491\u7834\u7684\u6761\u4ef6\u4e0b\uff0c\u5c06\u597d\u5403\u7a0b\u5ea6\u603b\u548c\u53d8\u6210\u6700\u5927\uff0c\u8ba9Rose\u5de8\u5de8\u8fc7\u4e00\u4e2a\u5b8c\u7f8e\u7684\u5e73\u5b89\u591c\u3002", "input_description": "\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570T(T <= 100)\uff0c\u6d4b\u8bd5\u7ec4\u6570\n\u63a5\u4e0b\u6765\u7684T\u7ec4\u6570\u636e\uff0c\u6bcf\u4e00\u7ec4\u6709\u4e09\u884c\u3002\n\u7b2c\u4e00\u884c\u5305\u62ec\u4e24\u4e2a\u6574\u6570N\u3001V (N <= 1000 , V <= 1000 )\uff0c\u5206\u522b\u8868\u793a\u82f9\u679c\u7684\u6570\u91cf\u548cRose\u80cc\u5305\u7684\u5bb9\u79ef\u3002\n\u7b2c\u4e8c\u884c\u5305\u542bN\u4e2a\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u82f9\u679c\u7684\u597d\u5403\u7a0b\u5ea6\uff0c\u7b2c\u4e09\u884c\u5305\u62ecN\u4e2a\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u82f9\u679c\u7684\u6240\u5360\u4f53\u79ef\u3002", "output_description": "\u6ca1\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6700\u5927\u6574\u6570M\uff0c\u5373\u4e3a\u8fd9\u79cd\u60c5\u51b5\u4e0b\u53ef\u4ee5\u83b7\u5f97\u7684\u82f9\u679c\u6700\u5927\u597d\u5403\u7a0b\u5ea6\u4e4b\u548c\u3002", "samples": "[{\"input\": \"1\\n5 10\\n1 2 3 4 5\\n5 4 3 2 1\", \"output\": \"14\"}]", "test_case_id": "2201", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 161, "total_accepted_number": 49, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2203, "fields": {"title": "\u51ac\u74dc\u4e0e\u754c\u9762\u718a\u7684\u7edd\u4e16\u535a\u5f08", "description": "\u51ac\u74dc\u5e73\u65e5\u4e0e\u754c\u9762\u718a\u7ecf\u5e38\u53ae\u6df7\u5728\u4e00\u8d77\uff0c\u51ac\u74dc\u89c9\u5f97\u754c\u9762\u718a\u4ec0\u4e48\u90fd\u6bd4\u81ea\u5df1\u5f3a\uff0c\u4e8e\u662f\u51b3\u5b9a\u4ee5\u4e00\u573a\u535a\u5f08\u6765\u8f83\u91cf\u4e00\u756a\uff0c\u4e00\u5c40\u8f6e\u82f1\u96c4\u3002<p></p>\u6211\u4eec\u7ed9\u68cb\u76d8\u4e0a\u9762\u6bcf\u4e2a\u68cb\u5b50\u5b9a\u4e0b\u4e86\u4e00\u4e2a\u80dc\u7387\u51b3\u5b9a\u6743\u503c\uff0c\u80dc\u7387\u51b3\u5b9a\u6743\u503c\u8d8a\u9ad8\u7684\u4e00\u65b9\u80dc\u7387\u8d8a\u5927\u3002\u4ee5\u4e0b\u662f\u6211\u4eec\u5bf9\u6bcf\u4e2a\u68cb\u5b50\u80dc\u7387\u51b3\u5b9a\u6743\u7684\u89c4\u5b9a\uff1a<p></p>\t\u7687\u540e\uff08quene\uff09 \u7684\u80dc\u6743\u4e3a 9\uff0c<p></p>\t?\uff08rook\uff09\u7684\u80dc\u6743\u4e3a 5\uff0c<p></p>\t\u76f8\uff08biship\uff09\u7684\u80dc\u6743\u4e3a 3\uff0c<p></p>\t\u9a6c\uff08knight\uff09\u7684\u80dc\u6743\u4e3a 3\uff0c<p></p>\t\u5352\uff08pawn\uff09\u7684\u80dc\u6743\u4e3a 1\u3002<p></p>\t\u4e3a\u4e86\u7b80\u5316\u95ee\u9898\uff0c\u6211\u4eec\u6682\u4e14\u4e0d\u8003\u8651\u56fd\u738b\uff08king\uff09\u7684\u6709\u65e0\u5bf9\u4e8e\u80dc\u7387\u7684\u5f71\u54cd\u3002<p></p>\u8bf7\u4f30\u8ba1\u51ac\u74dc\u4e0eJM\u5728\u67d0\u4e00\u5c40\u9762\u4e0b\u7684\u60c5\u51b5\uff0c\u63a8\u6d4b\u51fa\u8c01\u7684\u80dc\u7387\u66f4\u5927\u3002", "input_description": "\u591a\u7ec4\u6570\u636e\u8f93\u5165\u3002\n\u6bcf\u7ec4\u6570\u636e\u5305\u62ec\uff0c\u8f93\u5165\u5305\u542b\u516b\u884c\uff0c\u6bcf\u884c\u516b\u4e2a\u5b57\u7b26\u8bf4\u660e\u68cb\u76d8\u6bcf\u4e2a\u683c\u5b50\u7684\u60c5\u51b5\u3002\n\u51ac\u74dc\u9009\u62e9\u767d\u65b9\uff0cJM\u4e3a\u9ed1\u65b9\u3002\u767d\u65b9\u5728\u68cb\u76d8\u4e0a\u7528\u5927\u5199\u5b57\u6bcd\u8868\u793a\uff0c\u9ed1\u65b9\u4e3a\u5c0f\u5199\u3002\n\u767d\u5757\u8868\u793a\u5982\u4e0b\uff1a\u7687\u540e\u2015\u2015'Q' \uff0c?\u2015\u2015'R' \uff0c\u76f8\u2015\u2015'B' \uff0c\u9a6c\u2015\u2015'N'\uff0c\u5352\u2015\u2015'P' \uff0c\u56fd\u738b\u2015\u2015'K' \u3002\n\u9ed1\u65b9\u6362\u6210\u5c0f\u5199\u5373\u53ef\u3002\n\u68cb\u76d8\u5728\u65e0\u68cb\u72b6\u6001\u7528'.'\u8868\u793a\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u68cb\u76d8\u5c40\u9762\uff0c\u8f93\u51fa\u4e00\u884c\u5b57\u7b26\u4e32\u8868\u793a\u8c01\u7684\u80dc\u7387\u66f4\u5927\u3002\n\u82e5\u4e3a\u51ac\u74dc\uff0c\u8f93\u51fa\"White\"\uff1b\u82e5\u4e3aJM\uff0c\u8f93\u51fa\"Black\"\uff1b\u82e5\u662f\u5e73\u5c40\uff0c\u8f93\u51fa\"Draw\"\u3002", "samples": "[{\"input\": \"<code>\\n...QK...\\n........\\n........\\n........\\n........\\n........\\n........\\n...rk...\\n\\nrppppppr\\n...k....\\n........\\n........\\n........\\n........\\nK...Q...\\n........\\n</code>\", \"output\": \"White\\nBlack\"}]", "test_case_id": "2203", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 90, "total_accepted_number": 31, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2204, "fields": {"title": "\"RUO\"\u578b\u67e5\u9519\u673a", "description": "\u51ac\u74dc\u6700\u8fd1\u5236\u4f5c\u4e86\u4e00\u4e2a\u67e5\u9519\u8f6f\u4ef6\uff0c\u53eb\u4f5c\uff1aRUO \u578b\u67e5\u9519\u673a\u3002\u5177\u4f53\u53ef\u4ee5\u5b9e\u73b0\u5982\u4e0b\u529f\u80fd\uff1a<p></p>\u5f80\u673a\u5b50\u4e2d\u63d0\u4ea4\u4e24\u53e5\u8bdd\uff0c\u7b2c\u4e00\u53e5\u4e3a\u7b54\u6848\uff0c\u7b2c\u4e8c\u53e5\u4e3a\u81ea\u5df1\u7684\u586b\u5199\u7b54\u6848\u3002\u4e4b\u540e\uff0cRUO\u5c31\u80fd\u628a\u81ea\u5df1\u7684\u4f5c\u7b54\u4e0e\u7b54\u6848\u8fdb\u884c\u6838\u5bf9\uff0c\u5c06\u91cc\u9762\u4efb\u610f\u5bf9\u5b57\u6bcd\u8fdb\u884c\u4f4d\u7f6e\u4ea4\u6362\u4ece\u800c\u4f7f\u5f97\u81ea\u5df1\u4f5c\u7b54\u6240\u4f7f\u7528\u7684\u5b57\u6bcd\u4e0d\u53d8\u800c\u5339\u914d\u7b54\u6848\u7684\u5b57\u6bcd\u6570\u6700\u591a\u3002<p></p>\u51ac\u74dc\u60f3\u628aRUO\u7684\u6838\u5fc3\u6559\u7ed9\u4f60\u6765\u7f16\u5199\uff0c\u4e3a\u4e86\u7b80\u5316\u95ee\u9898\uff0c\u6211\u4eec\u7684\u67e5\u9519\u673a\u53ea\u8fdb\u884c\u4e00\u6b21\u5de5\u4f5c\uff0c\u5373\u5148\u4ea4\u6362\u4efb\u610f\u4e00\u5bf9\u5b57\u6bcd\uff0c\u8fbe\u6210\u6700\u5927\u5339\u914d\u6570\uff0c\u7136\u540e\u5c06\u5904\u7406\u60c5\u51b5\u53cd\u9988\u51fa\u6765\u3002", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u5305\u62ec\u4e09\u884c\u3002\n\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6570\u5b57L\uff081 <= L <= 200&#8201;000\uff09\uff0c\u4ee3\u8868\u7b54\u6848\u4e32\u548c\u5339\u914d\u4e32\u7684\u957f\u5ea6\u3002\n\u7b2c\u4e8c\u884c\u548c\u7b2c\u4e09\u884c\u662f\u5206\u522b\u4e3a\u4e24\u4e2a\u957f\u5ea6\u4e3aL\u7684\u5b57\u7b26\u4e32\uff0c\u5168\u90e8\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\u3002", "output_description": "\u6bcf\u7ec4\u8f93\u51fa\u4e24\u884c\uff0c\u4e3a\u53cd\u9988\u4f7f\u7528\u8005\u7684\u4fe1\u606f\u3002\n\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6570\u5b57A\uff0c\u4ee3\u8868\u5728\u4e00\u6b21\u5de5\u4f5c\u540e\u7b54\u6848\u4e32\u4e0e\u5339\u914d\u4e32\u5bf9\u5e94\u4f4d\u7f6e\u4e0d\u76f8\u540c\u5b57\u6bcd\u7684\u6570\u91cf\u3002\n\u7b2c\u4e8c\u884c\u4e3a\u4e24\u4e2a\u6570\u5b57B\u3001C\uff0c\u4ee3\u8868\u5339\u914d\u4e32\u9700\u8981\u4ea4\u6362\u7684\u4e24\u4e2a\u5b57\u6bcd\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u6ca1\u6709\u9700\u8981\u4ea4\u6362\u7684\u5b57\u6bcd\uff0c\u5219\u8f93\u51fa-1 -1\u3002\n\u82e5\u5b58\u5728\u9700\u4ea4\u6362\u7684\u4e24\u4e2a\u5b57\u6bcd\uff0c\u5219\u4fdd\u8bc1\u6bcf\u7ec4\u7b54\u6848B \u548c C\u7684\u552f\u4e00\u6027\u3002", "samples": "[{\"input\": \"<code>\\n4\\npetr\\negor\\n\\n9\\npergament\\npermanent\\n</code>\", \"output\": \"2\\n1 2\\n\\n1\\n4 6\"}]", "test_case_id": "2204", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 89, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2206, "fields": {"title": "\u6392\u5e8f", "description": "  \u8bb0\u5f97\u7b2c\u4e00\u6b21\u5b66\u4e60C\u8bed\u8a00\u7684\u6392\u5e8f\u65f6\u63a5\u89e6\u5230\u4e86\u5192\u6ce1\u6392\u5e8f\uff0c\u7136\u540e\u5c31\u5728\u8bfe\u540e\u5199\u4e0b\u4e86\u5982\u4e0b&quot;\u5192\u6ce1\u6392\u5e8f&quot;\u7684\u4ee3\u7801<p></p>  void sort(int a[], int n)<p></p>{<p></p>    for (int i = 0; i &lt; n; ++ i)<p></p>        for (int j = 0; j + 2 &lt; n; ++ j)<p></p>            if (a[j] &gt; a[j + 2])<p></p>                swap(a[j], a[j + 2]);<p></p>}<p></p>\u867d\u7136\u540e\u6765\u53d1\u73b0\u4ee3\u7801\u5199\u7684\u4e0d\u5bf9\uff0c\u53ef\u662f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4e0a\u8ff0\u4ee3\u7801\u8fd8\u662f\u80fd\u591f\u5bf9\u6570\u7ec4\u7684\u5b8c\u6210\u6392\u5e8f\u7684\uff01", "input_description": "  \u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u5165\u5171\u6709\u4e24\u884c\uff0c\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6574\u6570N(1\u2264N\u226410^5)\u4ee3\u8868\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u7b2c\u4e8c\u884c\u4e3aN\u4e2a\u6574\u6570a(1\u2264a\u2264100)\u8868\u793a\u6570\u7ec4\u4e2d\u7684N\u4e2a\u6570\u3002", "output_description": "  \u5982\u679c\u6309\u7167\u4e0a\u8ff0\u4ee3\u7801\u80fd\u591f\u5bf9\u6570\u7ec4\u5b8c\u6210\u6b63\u786e\u7684\u6392\u5e8f\u8f93\u51fa\u201cYES\u201d\uff0c\u5426\u5219\u8f93\u51fa\u201cNO\u201d\u4e0d\u5305\u62ec\u5f15\u53f7\uff0c\u6ce8\u610f\u5927\u5c0f\u5199\u3002", "samples": "[{\"input\": \"4\\n1 2 3 4\\n4\\n1 4 3 2\\n4\\n4 3 2 1\", \"output\": \"YES\\nYES\\nNO\"}]", "test_case_id": "2206", "hint": "\u5982\u7b2c\u4e8c\u7ec41 4 3 2\u5728\u8fd0\u884c\u4e0a\u8ff0&quot;\u5192\u6ce1\u6392\u5e8f&quot;\u7684\u4ee3\u7801\u540e \u5f97\u5230\u5e8f\u52171 2 3 4\u6240\u4ee5\u662fYES\uff01\\n\u7b2c\u4e09\u7ec44 3 2 1\u5728\u8fd0\u884c\u4e0a\u8ff0&quot;\u5192\u6ce1\u6392\u5e8f&quot;\u7684\u4ee3\u7801\u540e \u5f97\u5230\u5e8f\u52172 1 4 3 \u6ca1\u6709\u5b8c\u6210\u6392\u5e8f\uff0c\u6240\u4ee5\u662fNO\uff01", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 78, "total_accepted_number": 13, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2207, "fields": {"title": "\u6709\u8da3\u7684\u6570\u72ec", "description": "  \u6570\u72ec\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u610f\u601d\u7684\u6e38\u620f\uff0c\u6211\u4eec\u7ecf\u5e38\u53ef\u4ee5\u5728\u62a5\u7eb8\u6742\u5fd7\u770b\u5230\u5b83\uff0c\u4f5c\u4e3a\u4e00\u4e2aACMER\uff0c\u6211\u5e0c\u671b\u4f60\u4eec\u80fd\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5e2e\u6211\u5b9e\u73b0\u5b83\u3002<p></p>  \u4e0b\u9762\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u6570\u72ec<p></p>  \u6570\u72ec\u662f\u4e00\u79cd\u8fd0\u7528\u7eb8\u3001\u7b14\u8fdb\u884c\u6f14\u7b97\u7684\u903b\u8f91\u6e38\u620f\u3002\u73a9\u5bb6\u9700\u8981\u6839\u636e16\u00d716\u76d8\u9762(\u5e38\u89c1\u7684\u4e3a9*9)\u4e0a\u7684\u5df2\u77e5\u6570\u5b57\uff0c\u63a8\u7406\u51fa\u6240\u6709\u5269\u4f59\u7a7a\u683c\u7684\u6570\u5b57\uff0c\u5e76\u6ee1\u8db3\u6bcf\u4e00\u884c\u3001\u6bcf\u4e00\u5217\u3001\u6bcf\u4e00\u4e2a4*4\u5bab\u5185\u7684\u6570\u5b57\u5747\u542b1-16\uff0c\u4e0d\u91cd\u590d\u3002 \u6bcf\u4e00\u9053\u5408\u683c\u7684\u6570\u72ec\u8c1c\u9898\u90fd\u6709\u4e14\u4ec5\u6709\u552f\u4e00\u7b54\u6848\uff0c\u63a8\u7406\u65b9\u6cd5\u4e5f\u4ee5\u6b64\u4e3a\u57fa\u7840\uff0c\u4efb\u4f55\u65e0\u89e3\u6216\u591a\u89e3\u7684\u9898\u76ee\u90fd\u662f\u4e0d\u5408\u683c\u7684\u3002", "input_description": "  \u5355\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u662f\u7531\u4e00\u4e2a16*16\u7684\u5341\u516d\u5bab\u683c\u6784\u6210\uff0c0\u8868\u793a\u5bf9\u5e94\u7684\u683c\u5b50\u4e3a\u7a7a\uff0c\u4fdd\u8bc1\u6d4b\u8bd5\u6570\u636e\u5408\u6cd5\uff0c\u53ea\u6709\u552f\u4e00\u7b54\u6848\uff01", "output_description": "  \u8f93\u51fa\u5df2\u89e3\u51fa\u768416*16\u7684\u6570\u72ec\u77e9\u9635", "samples": "[{\"input\": \"0 0 5 3 0 0 0 0 0\\n8 0 0 0 0 0 0 2 0\\n0 7 0 0 1 0 5 0 0\\n4 0 0 0 0 5 3 0 0\\n0 1 0 0 7 0 0 0 6\\n0 0 3 2 0 0 0 8 0\\n0 6 0 5 0 0 0 0 9\\n0 0 4 0 0 0 0 3 0\\n0 0 0 0 0 9 7 0 0\", \"output\": \"1 4 5 3 2 7 6 9 8 \\n8 3 9 6 5 4 1 2 7 \\n6 7 2 9 1 8 5 4 3 \\n4 9 6 1 8 5 3 7 2 \\n2 1 8 4 7 3 9 5 6 \\n7 5 3 2 9 6 4 8 1 \\n3 6 7 5 4 2 8 1 9 \\n9 8 4 7 6 1 2 3 5 \\n5 2 1 8 3 9 7 6 4 \"}]", "test_case_id": "2207", "hint": "\u7531\u4e8e\u8981\u4fdd\u8bc116*16\u6570\u72ec\u7684\u5408\u6cd5\u6027\uff0c\u6240\u4ee5\u6d4b\u8bd5\u7ec4\u6570\u4e0d\u591a\uff0c\u6837\u4f8b\u4e3a9*9\u7684\u6570\u72ec\u89e3\uff0c\u4f9b\u53c2\u8003\uff0c\u6d4b\u8bd5\u6570\u636e\u4e3a16*16\uff01", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 4, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2208, "fields": {"title": "\u6700\u5927\u8986\u76d6", "description": "  \u6211\u4eec\u5b9a\u4e49\u4e00\u6761\u7ebf\u6bb5\uff0c\u9996\u5148\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u5728X\u8f74\u4e0a\uff0c\u5b83\u7684\u8d77\u70b9\u4e3a(a,0)\u7ec8\u70b9\u4e3a(b,0)\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7b80\u5316\u6210[a,b]\u3002\u73b0\u5728\u6211\u4eec\u6709N\u6761\u8fd9\u6837\u7684\u7ebf\u6bb5\u90fd\u4f4d\u4e8eX\u8f74\u4e0a\uff0c\u6240\u4ee5\u80af\u5b9a\u5b58\u5728\u4e00\u70b9\u88ab\u8986\u76d6\u591a\u6b21\u6216\u8005\u4e00\u6b21\uff0c\u6211\u4eec\u7684\u4efb\u52a1\u5c31\u662f\u627e\u5230\u6700\u591a\u88ab\u8986\u76d6\u7684\u6b21\u6570\uff0c\u8bf7\u53c2\u8003\u6837\u4f8b\u4fbf\u4e8e\u7406\u89e3\u3002", "input_description": "  \u7b2c\u4e00\u884c\u8f93\u5165\u4e3a\u4e00\u4e2a\u6574\u6570N(1\u2264N\u226410^5),\u8868\u793a\u6211\u4eec\u6709N\u6761\u7ebf\u6bb5\uff0c\u63a5\u4e0b\u6765\u7684N\u884c\u6bcf\u884c\u5305\u62ec\u4e24\u4e2a\u6574\u6570a,b(1\u2264a\u2264b\u226410^9)\u8868\u793a\u7ebf\u6bb5\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u3002", "output_description": "  \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u8868\u793a\u88ab\u8986\u76d6\u7684\u6700\u5927\u6b21\u6570\u3002", "samples": "[{\"input\": \"5\\n1 2 \\n2 2\\n2 4\\n3 4\\n5 1000\\n3\\n1 1\\n2 2\\n3 3\", \"output\": \"3\\n1\"}]", "test_case_id": "2208", "hint": "\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6211\u4eec\u53ef\u4ee5\u53d1\u73b02\u88ab\u8986\u76d6\u6b21\u6570\u6700\u591a\u4e3a3\u6b21,\u4f9d\u6b21\u88ab[1 2],[2 2],[2 4]\u8fd9\u4e09\u6761\u7ebf\u6bb5\u8986\u76d6,\u6240\u4ee5\u8f93\u51fa\u4e3a3\u3002\\n\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u6700\u5927\u8986\u76d6\u6b21\u6570\u4e3a1\u4e141 2 3\u90fd\u88ab\u8986\u76d61\u6b21\uff0c\u6240\u4ee5\u8f93\u51fa1\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 32768, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 23, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2209, "fields": {"title": "Search For The Golden", "description": "  \u4e0d\u4e45\u4e4b\u524d\u6211\u4eec\u627e\u5230\u4e86\u4e00\u4efd\u85cf\u6709\u9ec4\u91d1\u7684\u5730\u56fe\uff0c\u5e76\u7531\u6b64\u627e\u5230\u4e86\u4e00\u4e2a\u8ff7\u5bab\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u7279\u522b\u7684\u8ff7\u5bab\uff0c\u8ff7\u5bab\u91cc\u6709N\u4e2a\u7f16\u8fc7\u53f7\u7684\u95e8\uff08N&lt;=5)\uff0c\u5b83\u4eec\u5206\u522b\u88ab\u7f16\u53f7\u4e3aA,B,C,D,E.\u4e3a\u4e86\u627e\u5230\u5b9d\u85cf\uff0c\u4f5c\u4e3a\u5bfb\u5b9d\u8005\u7684\u6211\u4eec\u53ef\u4ee5\u53bb\u6253\u5f00\u95e8(\u610f\u601d\u662f\u5982\u679c\u6ca1\u6709\u5fc5\u8981\u7684\u8bdd\u5f53\u7136\u53ef\u4ee5\u4e0d\u53bb\u6253\u5f00)\uff0c\u4f46\u662f\uff0c\u5f00\u95e8\u4e4b\u524d\u5fc5\u987b\u5728\u8ff7\u5bab\u91cc\u627e\u5230\u8fd9\u4e2a\u6253\u5f00\u8fd9\u4e2a\u95e8\u6240\u9700\u7684\u6240\u6709\u94a5\u5319\uff0c\u4f8b\u5982\uff1a\u73b0\u5728A\u95e8\u6709\u4e09\u628a\u94a5\u5319\uff0cACM\u5c31\u5fc5\u987b\u627e\u5168\u4e09\u628a\u94a5\u5319\u624d\u80fd\u6253\u5f00A\u95e8\uff0c\u5e76\u4e14\u95e8\u6253\u5f00\u4e4b\u540e\u4fbf\u4fdd\u6301\u6253\u5f00\u7684\u72b6\u6001\u4e0d\u4f1a\u518d\u6b21\u5173\u95ed\uff0c\u73b0\u5728\u8bf7\u4f60\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u544a\u8bc9\u6211\uff0c\u662f\u5426\u80fd\u4e0d\u80fd\u987a\u5229\u7684\u5f97\u5230\u5b9d\u85cf\u3002", "input_description": "  \u8f93\u5165\u53ef\u80fd\u4f1a\u6709\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff08\u4e0d\u8d85\u8fc710\u7ec4\uff09\u3002\n  \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e86\u4e24\u4e2a\u6574\u6570M,N\n  \u5176\u4e2dN,M\u90fd\u4e0d\u5927\u4e8e20\n  \u4e14\u5206\u522b\u4ee3\u8868\u8ff7\u5bab\u7684\u884c\u548c\u5217\u3002\n  \u63a5\u4e0b\u6765\u7684M\u6bcf\u884c\u6709N\u4e2a\u5b57\u7b26\uff0c\u63cf\u8ff0\u4e86\u8ff7\u5bab\u7684\u5e03\u5c40\u3002\n  \u5176\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u7684\u542b\u4e49\u5982\u4e0b:\n  . : \u8868\u793a\u53ef\u4ee5\u8d70\u7684\u8def\n  S : \u8868\u793aACM\u7684\u51fa\u53d1\u70b9\n  G : \u8868\u793a\u5b9d\u85cf\u7684\u4f4d\u7f6e\n  X : \u8868\u793a\u8fd9\u91cc\u6709\u5899\uff0cACM\u65e0\u6cd5\u8fdb\u5165\u6216\u8005\u7a7f\u8fc7\u3002\n  A,B,C,D,E\u8868\u793a\u8fd9\u91cc\u662f\u95e8\uff0ca,b,c,d,e\u8868\u793a\u5bf9\u5e94\u5927\u5199\u5b57\u6bcd\u7684\u95e8\u4e0a\u7684\u94a5\u5319\u3002\n  \u6ce8\u610f\u6211\u4eec\u53ea\u80fd\u5728\u8ff7\u5bab\u91cc\u5411\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u3002\n  \u6700\u540e\uff0c\u8f93\u51650 0\u8868\u793a\u8f93\u5165\u7ed3\u675f\u3002", "output_description": "  \u6bcf\u884c\u8f93\u51fa\u4e00\u4e2aYES\u8868\u793a\u80fd\u627e\u5230\u5b9d\u85cf\uff0c\u8f93\u51faNO\u8868\u793a\u627e\u4e0d\u5230\u5b9d\u85cf\u3002\n", "samples": "[{\"input\": \"<code>\\n3 4\\nS.Xa\\n.aXB\\nb.AG\\n3 2\\neS\\nEE\\nXG\\n0 0\\n</code>\", \"output\": \"NO\\nYES\"}]", "test_case_id": "2209", "hint": "Sorry No Hint!", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 40, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2210, "fields": {"title": "\u51ac\u74dc\u67e5\u5b57\u5178", "description": "\u51ac\u74dc\u7684\u82f1\u8bed\u5dee\uff0c\u73b0\u5728\u8fd8\u5728\u6bcf\u5929\u6267\u884c\u81ea\u5df1\u7684\u82f1\u8bed\u516d\u7ea7\u5907\u6218\u8ba1\u5212\u3002<p></p>\u6bcf\u5929\u505a\u82f1\u8bed\u9605\u8bfb\uff0c\u4f1a\u9047\u5230\u5f88\u591a\u4e0d\u8ba4\u8bc6\u7684\u5355\u8bcd\uff0c\u4e8e\u662f\u5c31\u7ecf\u5e38\u67e5\u5b57\u5178\u3002<p></p>JM \u770b\u89c1\u51ac\u74dc\u6bcf\u5929\u8fd8\u5728\u7ec3\u4e60\u82f1\u8bed\u9605\u8bfb\uff0c\u81ea\u5df1\u7684\u5b64\u72ec\u4e4b\u5fc3\u6cb9\u7136\u800c\u751f\u3002\u4e8e\u662f\u8fc7\u6765\u9080\u8bf7\u51ac\u74dc\u966a\u4ed6\u73a9\u4e00\u4e2a\u6e38\u620f\u3002<p></p>\u5177\u4f53\u7684\u6e38\u620f\u89c4\u5219\u662f\u8fd9\u6837\uff0cJM \u4f1a\u7ed9\u51ac\u74dc\u4e00\u4e2a\u5b57\u5178\u8868\uff0c\u7136\u540e\u51ac\u74dc\u4f1a\u4ece\u4e00\u7bc7\u6587\u7ae0\u4e2d\u627e\u51fa\u4e0d\u8ba4\u8bc6\u7684\u5355\u8bcd\uff0c\u53bb\u67e5\u627e\u5b57\u5178\u8868\u4e2d\u7684\u5355\u8bcd\uff0c\u4ece\u800c\u77e5\u9053\u8fd9\u4e9b\u5355\u8bcd\u7684\u610f\u601d\u3002<p></p>\u7136\u540e\u65e0\u804a\u7684JM \u60f3\u8ba9\u6e38\u620f\u8fdb\u884c\u7684\u65f6\u95f4\u66f4\u957f\u4e00\u4e9b\uff0c\u6240\u4ee5\u53c8\u6dfb\u52a0\u4e86\u5982\u4e0b\u89c4\u5b9a\uff1a\u51ac\u74dc\u627e\u51fa\u7684\u751f\u8bcd\u4e2d\uff0c\u5fc5\u987b\u9700\u8981\u6539\u53d8\u5f53\u4e2d\u7684\u4e00\u4e2a\u5b57\u6bcd\uff0c\u624d\u80fd\u4ece\u5355\u8bcd\u8868\u4e2d\u83b7\u53d6\u76f8\u5e94\u7684\u610f\u601d\u3002<p></p>\u8fd9\u8ba9\u51ac\u74dc\u5f88\u662f\u65e0\u8bed\uff0c\u820d\u547d\u966a\u541b\u5b50\u5427\uff01~<p></p>\u4e3a\u4e86\u7b80\u5316\u8fc7\u7a0b\uff0cJM \u4f1a\u7ed9\u51fa\u4e00\u4e2a\u5355\u8bcd\u8868\uff0c\u51ac\u74dc\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u751f\u8bcd\u8868\u3002\u53ea\u8981\u4f60\u4e00\u4e00\u5224\u65ad\u751f\u8bcd\u8868\u4e2d\u7684\u5355\u8bcd\u662f\u5426\u5728\u6539\u52a8\u4e00\u4e2a\u5b57\u6bcd\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5728\u5355\u8bcd\u8868\u4e2d\u67e5\u9605\u5230\u5373\u53ef\u3002", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\u6bcf\u4e00\u7ec4\u7b2c\u4e00\u884c\u662f\u4e24\u4e2aM\u3001N(0 \u2264 N \u2264 3 * 10^5, 0 \u2264 M \u2264 3 * 10^5)\uff0c\u5206\u522b\u4ee3\u8868\u5355\u8bcd\u8868\u4e2d\u6709N\u6761\u5355\u8bcd\uff0c\u751f\u8bcd\u8868\u4e2d\u6709M\u6761\u751f\u8bcd\uff0c\u6bcf\u6761\u5355\u8bcd\u548c\u751f\u8bcd\u4ec5\u7531'a'\u3001'b'\u3001'c'\u3002\n\u63a5\u4e0b\u6765M\u884c\uff0c\u6bcf\u884c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32S(S\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc76 * 10^5)\u3002\n", "output_description": "\u6bcf\u7ec4\u8f93\u51faN\u6761\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u679c\u4e3a\u5224\u65ad\u5bf9\u5e94\u7684\u751f\u8bcd\u662f\u5426\u5728\u6539\u52a8\u4e00\u4e2a\u5b57\u6bcd\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5728\u5355\u8bcd\u8868\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5355\u8bcd\u5339\u914d\u3002\n\u82e5\u5b58\u5728\u8fd9\u6837\u7684\u5355\u8bcd\uff0c\u8f93\u51fa\"YES\"\uff0c\u5426\u5219\u8f93\u51fa\"NO\"\u3002", "samples": "[{\"input\": \"2 3\\naaaaa\\nacacaca\\naabaa\\nccacacc\\ncaaac\", \"output\": \"YES\\nNO\\nNO\"}]", "test_case_id": "2210", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 16, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2212, "fields": {"title": "\u7b80\u5355\u7684GCD", "description": "\u95ee\u9898\u5f88\u7b80\u5355(\u6d01)\uff0c\u6709 T \u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee a,b,d \uff0c\u95ee\u6709\u591a\u5c11\u5bf9 (x,y) \u6ee1\u8db3 1 \u2264 x \u2264 a, 1 \u2264 y \u2264 b \uff0c\u4e14 Gcd(x,y) = d \u3002<p></p>\u6ce8\u610f\u8fd9\u91cc(x=1, y=2)\u4e0e(x=2, y=1)\u8ba4\u4e3a\u662f\u4e00\u5bf9\u3002", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u4e3aT\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\u3002\n\u4e0b\u9762\u7684T\u884c\uff0c\u6bcf\u884c\u5305\u62ec\u4e09\u4e2a\u6574\u6570a,b,d\u3002\n1 \u2264 d \u2264 a,b \u2264 100000, 1 \u2264 T \u2264 3000\u3002", "output_description": "\u8f93\u51fa\u4e3aCase\u7684\u5f62\u5f0f\uff0c\u8be6\u89c1\u6837\u4f8b", "samples": "[{\"input\": \"2\\n3 5 1\\n41 18467 20\\n\", \"output\": \"Case 1: 9\\nCase 2: 1384\"}]", "test_case_id": "2212", "hint": "\u7b2c\u4e00\u7ec4\u6837\u4f8b\u6709\u4ee5\u4e0b9\u5bf9\u6ee1\u8db3\u6761\u4ef6(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 5), (3, 4), (3, 5).", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 32768, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 15, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2228, "fields": {"title": "A Easy Problem", "description": "There are two circles, calculates the area of their intersection with the accuracy of three digits after decimal point.", "input_description": "The input consists of multiple test cases. For each case,two lines follow, each line are three integers x, y, z (0 < x, y, z \u2264100). They represent center coordinates and radii\uff08x,y\uff09 of the circle(z).", "output_description": "The output file must contain single real number - the area.", "samples": "[{\"input\": \"20 30 15\t\\n40 30 30\", \"output\": \"608.366\"}]", "test_case_id": "2228", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 131, "total_accepted_number": 29, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2229, "fields": {"title": "Apple\u2019s game", "description": "There are three apple trees in orchard. Donggua and Mugua pick any number of apples from any tree or the same number from any two trees by turns. Who get the last apple will win.  Donggua and Mugua are very clever. And Donggua first.", "input_description": "The input consists of multiple test cases. Each test case contains of a single line containing 3 integers a b c, indicating the numbers of apples of these trees.It is assumed that 0 <= a,b,c <= 300 and a + b + c > 0. ", "output_description": "For each test case, output 1 if Donggua will win, ouput 0 if Mugua will win. ", "samples": "[{\"input\": \"1 0 0\\n1 1 1\\n2 3 6\", \"output\": \"1\\n0\\n0\"}]", "test_case_id": "2229", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 57, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2230, "fields": {"title": "Cards", "description": "XiaoMing has n cards, and each card is only one color (black or white). He need to fold every cards gradually. But in this process, if there are 3 cards which have the same color on the top of card heap, XiaoMing will throw them away. So how many schemes, that XiaoMing could throw all cards?", "input_description": "The input consists of multiple test cases. Each test case contains of a single line containing a integers n, which is the number of the cards.(1\u2264n\u22641000)", "output_description": "The answer is the number of schemes modulo&#160;1000000007.", "samples": "[{\"input\": \"1\\n2\\n3\", \"output\": \"0\\n0\\n2\"}]", "test_case_id": "2230", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 45, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2231, "fields": {"title": " How many left?", "description": "Xiao Ming has n friends (the number from 1 to n), and he has m candies, now he wants to share these candies with his friends. Everyone has their own expectations to get the candy , Ai(1&lt;=i&lt;=n) In the process of giving away these candies, some will be lost because of many reasons. There are some rules during the process:<p></p>   1.Xiao Ming only gives each person candy once.<p></p>   2.Xiao Ming will get the same number of candies from God  while  handing out candies to a friend in the first time!<p></p>   3. After the first time, Xiao Ming will gives out candies to some rest persons (we define \u201csome\u201d = Xj ) in the presence of the person marked with k who has gotten candy and is selected randomly. At the same time there are Ak*Xj candies will be lost . <p></p>Xiao Ming will choose from Q kinds of order to complete his task. What should he do to let the number of the rest candies be maximization on the promise of satisfying all the friends ?<p></p>", "input_description": "The first line : input two positive integers n and m , that is there are n friends and m candies (1<=n<=2000,1<=m<=3000000).\nThe second line: input n positive integer, the meaning of the ith number is Ai ( the expectation of the person marked with \u201ci\u201d,1<=Ai<=10000).\nThe third line: input a positive integer Q \uff080<=Q<=100000\uff09, it means that there are Q kinds of order in the task. After that, in the following Q lines, in each line input two positive integers x and y.\uff08x!=y, x and y are these persons\u2019 number\uff09; it means Xiao Ming gives candies to y in the presence of x or the other way round.", "output_description": "There are how many the most candies left on the promise of satisfying all the friends, if not, output \u201c-1\u201d.", "samples": "[{\"input\": \"4&#160;30\\n4&#160;1&#160;2&#160;3\\n3\\n1&#160;4\\n3&#160;2\\n1&#160;2&#160;&#160;&#160;\\n4 14\\n4 1 2 3\\n3\\n1 4\\n3 2\\n1 2   \\n4 15\\n4 1 2 3\\n3\\n1 4\\n3 2\\n1 2   \", \"output\": \"15\\n-1\\n0\"}]", "test_case_id": "2231", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 20, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2232, "fields": {"title": "Set change", "description": "In this problem you will receive two sets A and B that contain only positive integers.And all the numbers are less than 27.<p></p>Each time you can swap any two numbers of A. After swap,both of the two numbers will increase their value by one. If the previous number is &#039;26&#039;,it will become &#039;1&#039; after being swapped.<p></p>That is to say ,&quot;1&quot; becomes &quot;2&quot;,&quot;2&quot; becomes &quot;3&quot;.....&quot;26&quot; becomes &quot;1&quot; and so on.<p></p>You can do the change operation in A as many times as you want.<p></p>Please tell us whether you can change A to B after some operations or not.", "input_description": "There are several cases. For each case, the first line is an integer N(2<=N<=100),and then two lines follow.Each line N integers follow in the same line. The first line is A and the second line is B.", "output_description": "For each case,if it is possible change A to B output \"Yes\",otherwise output \"No\".", "samples": "[{\"input\": \"2\\n1 2\\n2 1\\n3\\n2 1 3\\n4 4 2\\n5\\n1 1 1 2 2\\n3 2 3 3 4\", \"output\": \"No\\nYes\\nYes\"}]", "test_case_id": "2232", "hint": "For the first case:\\nit&#039;s impossible to change &quot;1 2&quot; to &quot;2 1&quot; .\\nFor the second case:\\nswap(A[0],A[2])-&gt;swap(A[1],A[2]),meanwhile:(2 1 3)-&gt;(4 1 3)-&gt;(4 4 2).\\nFor the third case:\\nswap(A[0],A[3])-&gt;swap(A[1],A[2])-&gt;swap(A[2],A[3])-&gt;swap(A[3],A[4]), meanwhile:(1 1 1 2 2)-&gt;(3 1 1 2 2)-&gt;(3 2 2 2 2)-&gt;(3 2 3 3 2)-&gt;(3 2 3 3 4).", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 8, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2233, "fields": {"title": "Not a easy problem", "description": "One day,UnkelTao took part in an interview and got a simple problem: sum of the prime number which is less than 5000. unkeltao solved it quickly.<p></p><p></p>UnkelTao  went through the interview process. he was luckly because it is so easy. <p></p><p></p>A few days later,UnkelTao got an another qustion: sum of the prime number which is less than N,and the N is very large(2=&lt;N&lt;=2*10^8).  He can not solve the problem. can yue help him?", "input_description": "The first line contains a number T(T<25) which means the number of test cases. Then T lines follow,each line contains an integer N(2 <= N <= 2*10^8) whose meaning is explained by Description. \n", "output_description": "For each test case, you should only output sum of the prime number which is less than N. (the answer is very large .please use the 'long long' )", "samples": "[{\"input\": \"2\\n10\\n1000000\", \"output\": \"17\\n37550402023\"}]", "test_case_id": "2233", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 69, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2235, "fields": {"title": "DongGua Miss You", "description": "This is last problem for you by me. DongGua will miss you.<p></p>So in the end of this competition, I will introduce a funny game, Fight _missing Mouse.<p></p>I have a box which consist of n rows and n columns. Each cell has a _missing Mouse, and if we use the hammer to fight it, we will get the corresponding score. But the hammer is only used m times, so if we has known the score of each _missing Mouse, what the most score can we get at all?", "input_description": "The input contains several test cases.&nbsp;\nIn each test case, the first line contains one number N (1 \u2264 N \u2264 1,000) which means N rows and N columns.\nThe next N line is the description of the box surface. The Aij data means the _missing Mouse in i row, j column cell worth Aij score. (1 \u2264 Aij \u2264 1,000).\nThe N + 2 line contains one number M (1 \u2264 M \u2264 N * N), which means how many times we can use the hammer.", "output_description": "For each test case, you should only output a number X&nbsp;which is the most score we can get at all.", "samples": "[{\"input\": \"3\\n3 2 1\\n6 5 4\\n9 8 7\\n4\", \"output\": \"30\"}]", "test_case_id": "2235", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 8000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 103, "total_accepted_number": 43, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2237, "fields": {"title": "How many colorings", "description": "This is a tree with N nodes, whose number are from 1 to N. You need to color them, and adjacent nodes (not their numbers are adjacent) have different colors. So there are M kinds of color you can choose whose number are from 1 to M. Each node can be colored by some colors from M kinds. Please calculate the case number by different way to color nodes, and the result need to modulo 1000000007. ", "input_description": "First line of input contains N and M (1 <= N <= 5000,1 <= M <= 5000)\nThe next N line,  each line contains k+1 numbers, the ith line represents how many color the ith node can be dying. Fisrt number is k (0 < k < M)which represents the ith node can pen k different color. next k integers(c1,c2..ck) are the number of color(1<=ci<=M).   \nThe next N - 1 lines each line contains two integer Ai and Bi indicating there is one tree edge between Ai and Bi. (1 <= Ai, Bi <= N)", "output_description": "For each test case, output a number module 1000000007 (1e9 + 7) indicating the answer.", "samples": "[{\"input\": \"2 2\\n1 1\\n2 1 2\\n1 2\", \"output\": \"1\"}]", "test_case_id": "2237", "hint": "for sample: the node 1 can only dye color 1,  the node 2 can dye color 1 and color 2,but the node 1 and node 2 is adjacent, so that node 2 must dye color 2.\\nthere only 1 solution.  ", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 6000, "memory_limit": 204800, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 29, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2238, "fields": {"title": "Best Time to Buy and Sell Stock \u2161", "description": "Another day, Unkeltao want to buy some stocks.Say you have an array for which the ith element is the price of a given stock on day i. If you were only permitted to complete at most k transaction (only buy one and sell one share of the stock), design an algorithm to help unkeltao to find the maximum profit.<p></p>Note: You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).", "input_description": "The first line of the input contains an integer T(1<=T<=40) which means the number of test cases. Each case contains wo line, fisrt line has two number N and k(1<=N<=100000,1<=k<=20, k*2<=N), the second line contain N integers. (all the integers are less than 2000000 and big than zero).\n", "output_description": "For each test case, you should output the maxinum profit.", "samples": "[{\"input\": \"2\\n4 2\\n1 2 3 4\\n5 2\\n1 2 5 3 4\", \"output\": \"3\\n5\"}]", "test_case_id": "2238", "hint": "case 1: buy 1 and sell 4; 4-1=3\\ncase 2: buy 1,sell 5,buy 3,sell 4; 5-1+4-3=5", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 21, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2239, "fields": {"title": "Best Time to Buy and Sell Stock", "description": "Recently, the changes in stock price continues. Unkeltao want to buy some stocks.Say you have an array for which the ith element is the price of a given stock on day i. If you were only permitted to complete at most one transaction (only buy one and sell one share of the stock), design an algorithm to help unkeltao to find the maximum profit.", "input_description": "The first line of the input contains an integer T(1<=T<=40) which means the number of test cases. Then T lines follow, each line starts with a number N(1<=N<=500000), then N integers followed(all the integers are between 1 and 1000000).", "output_description": "For each test case, you should output the maxinum profit.\n", "samples": "[{\"input\": \"2\\n2 1 2\\n4 2 1 5 4\", \"output\": \"1\\n4\\n\"}]", "test_case_id": "2239", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 134, "total_accepted_number": 33, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2240, "fields": {"title": "517na_1", "description": "517na sales often need to go out to visit customers. Every time, they will chose airplane to visit a number of cities.<p></p> <p></p>Since the air tickets prices changes with date\uff0csuppose sales will stay one day\uff0cand need to return to the departure city. Please select the lowest-cost travel routes.<p></p>", "input_description": "The number of cities visited\n \nDeparture city\n \n [Departure city\uff0cArrival City\uff0cDate of travel\uff0cTicket prices]\n", "output_description": "Date1: Departure city - Arrival City\n \nDate2: Departure city - Arrival City\n \nDate3: Departure city - Arrival City\n", "samples": "[{\"input\": null, \"output\": null}]", "test_case_id": "2240", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 10, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2241, "fields": {"title": "517na_2", "description": "The ticket price is mainly decided by the discount of shipping space. As time change\uff0cthe airlines will adjust the quantity and discount ,according to the sales.<p></p> <p></p>Therefore, according to the price changes, the original high-priced tickets will be drained away, the company will purchase of new cheap ticket\uff0cto help guests save costs. Refunding shipping space will be used again.<p></p> <p></p>Law of lower cabin purchasing: Original ticket prices- Refund fee- The new ticket prices&gt;0<p></p> <p></p> In order to improve user influence, hoping to maximize the impact of lower cabin.<p></p> <p></p>The maximum amount of savings\uff0cunder the same number of influence.<p></p>", "input_description": "Order number, Original ticket prices, Number of people, Refund fee rate.\nThe current price of shipping, Number.", "output_description": "lower cabin order\uff0c Original ticket price\uff0cThe new price\uff0cRefund fee\uff0cSaving cost", "samples": "[{\"input\": \"A,1200,2,0.2\\n \\nB, 900,2,0.25\\n \\nC, 800,1,0.3\\n500,1\\n \\n600,3\\n\", \"output\": \"C,800,500,280,20\\n \\nB,900,600,270,30\\n \\nB,900,600,270,30\\n \\nA,1200,600,240,360\\n \\nA,1200,800,240,100\\n\"}]", "test_case_id": "2241", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 7, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2247, "fields": {"title": "\u6f2b\u5929\u90fd\u662f\u5c0f\u661f\u661fI", "description": "\u6211\u4ef0\u671b\u661f\u7a7a\uff0c\u5b83\u662f\u90a3\u6837\u5be5\u5ed3\u800c\u6df1\u9083\uff1b\u90a3\u65e0\u7a77\u7684\u771f\u7406\uff0c\u8ba9\u6211\u82e6\u82e6\u5730\u6c42\u7d22\u3001\u8ffd\u968f\u3002   <p></p>  \u6211\u4ef0\u671b\u661f\u7a7a\uff0c\u5b83\u662f\u90a3\u6837\u5e84\u4e25\u800c\u5723\u6d01\uff1b\u90a3\u51db\u7136\u7684\u6b63\u4e49\uff0c\u8ba9\u6211\u5145\u6ee1\u70ed\u7231\u3001\u611f\u5230\u656c\u754f\u3002   <p></p>  \u6211\u4ef0\u671b\u661f\u7a7a\uff0c\u5b83\u662f\u90a3\u6837\u81ea\u7531\u800c\u5b81\u9759\uff1b\u90a3\u535a\u5927\u7684\u80f8\u6000\uff0c\u8ba9\u6211\u7684\u5fc3\u7075\u6816\u606f\u3001\u4f9d\u504e\u3002   <p></p>  \u6211\u4ef0\u671b\u661f\u7a7a\uff0c\u5b83\u662f\u90a3\u6837\u58ee\u4e3d\u800c\u5149\u8f89\uff1b\u90a3\u6c38\u6052\u7684\u70bd\u70ed\uff0c\u8ba9\u6211\u5fc3\u4e2d\u71c3\u8d77\u5e0c\u671b\u7684\u70c8\u7130\u3001\u54cd\u8d77\u6625\u96f7\u3002 <p></p>  \u6f2b\u6e38\u661f\u7a7a\u7684\u6211\u53d1\u73b0\u5bf9\u4e8e\u76f8\u4e92\u8fde\u901a\u7684\u591a\u9897\u661f\u661f\uff0c\u8ffd\u5bfb\u5b83\u4eec\u7684\u56f0\u96be\u5ea6\u4e3a\u4eae\u5ea6\u6700\u4f4e\u4e00\u9897\u661f\u661f\u7684\u4eae\u5ea6\uff0c\u7136\u800c\uff0c\u4e3a\u4e86\u5929\u4f53\u7684\u79e9\u5e8f\uff0c\u6211\u5fc5\u987b\u5207\u65ad\u661f\u661f\u4e4b\u95f4k\u6761\u76f8\u8fde\u7684\u8def\u7ebf\u3002", "input_description": "\u8f93\u5165\u6570\u636e\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 t \u4ee3\u8868\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570;\n  \u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570:n,m,k\u3002n\u4ee3\u8868\u661f\u661f\u7684\u603b\u6570\uff0cm\u4ee3\u8868\u901a\u8def\u7684\u6761\u6570\uff0ck\u4ee3\u8868\u6211\u5fc5\u987b\u5207\u65ad\u7684\u8def\u7ebf\u7684\u6761\u6570\u3002\n  \u7b2c\u4e8c\u884c\u662fn\u4e2a\u6574\u6570\u5206\u522b\u4ee3\u8868\u6bcf\u4e2a\u661f\u661f\u7684\u4eae\u5ea6wi\n  \u63a5\u4e0b\u6765m\u884c\u6bcf\u884c\u5305\u62ec\u4e24\u4e2a\u6570a,b\uff0c\u8868\u793a\u661fi\u4e0e\u661fj\u4e4b\u95f4\u6709\u4e00\u6761\u9053\u8def\n  \u6570\u636e\u8303\u56f4\n  1 <= t <= 10;\n  0 < wi <= 100000000\n  0 <= k <= m\n  \u5c0f\u6570\u636e\n  1 <= n <= 1000\n  1 <= m <= 1000\n  \u5927\u6570\u636e\n  1 <= n <= 1000000\n  1 <= m <= 1000000", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\uff0c\u8f93\u51fa\u201cCase #x: \u201dx\u4e3a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\uff0c\u8868\u793a\u8ffd\u5bfb\u6f2b\u5929\u7fa4\u661f\u7684\u6700\u5c0f\u56f0\u96be\u5ea6", "samples": "[{\"input\": \"  2\\n  3 2 0\\n  1 2 3\\n  1 2\\n  1 3\\n  3 2 2\\n  1 2 3\\n  1 2\\n  1 3\", \"output\": \"  Case #1: 1\\n  Case #2: 6\"}]", "test_case_id": "2247", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2248, "fields": {"title": "\u9ad8\u50b2\u7684\u9a70\uf8f7?", "description": "\u4f5c\u4e3a\u4e00\u540d\u5f13\u7bad\u624b\uff0c \u6700\u91cd\u8981\u7684\u5c31\u662f\u7cbe\u51c6\u5ea6\u3002\u79f0\u9738\u7bad\u573a\u591a\u5e74\u7684\u9a70\uf8f7\u6320\u51f6\u76fc\u5955\u56db\u827f\u68b0\u6728\u0000\u786e\u5ea6\uff0c\u4ece\u672a\u6709\u8fc7\u8d25\u7ee9\u3002\u4e00\u5929\uff0c \u4e00\u540d\u53ebdim\u7684\u7537\u5b69\u5e0c\u671b\u80fd\u6311\u6218\u9a70\uf8f7\u6479?\u7136\u800c\uff0c\u9a70\uf8f7\u59c6\u6d45\uff12\u604d\u8ff9\u0000\u8ba4\u4e3a\u81ea\u5df1\u5b9d\u8d35\u7684\u65f6\u95f4\u4e0d\u80fd\u6d6a\u8d39\u5728\u8fd9\u5c0f\u9b3c\u4e0a\uff0c\u4e8e\u662f\u6d3e\u51fayeahpeng\u8fce\u6218\u3002\u4ed6\u4eec\u8f6e\u6d41\u8fdb\u884c\u5c04\u51fb\uff0cdim\u4e3a\u5148\u624b\u3002\u5df2\u77e5dim\u5c04\u4e2d\u7684\u53ef\u80fd\u6027\u4e3a a/b\uff0cyeahpeng\u4e3ac/d\u3002\u7531\u4e8e\u65f6\u95f4\u5b9d\u8d35\uff0c\u4ed6\u4eec\u4e00\u5171\u5c04\u51fb\u4e0d\u8d85\u8fc7n\u8f6e\u3002\u5148\u5c04\u4e2d\u7684\u4eba\u80dc\u5229\u3002<p></p><img src=\"uploadFiles/x1.jpg\" />", "input_description": "\u8f93\u51fa\u4e00\u884c5\u4e2a\u6574\u6570: a,b,c,d,n ( 1 <= a , b, c, d <= 100, 0 < a/b < 1, 0 < c/d < 1,0 < n < 10^9)", "output_description": "\u8f93\u51fa\u4e00\u4e2a\u5c0f\u6570\uff0c\u8868\u793adim\u83b7\u80dc\u7684\u6982\u7387\u3002\u7ed3\u679c\u4fdd\u75595\u4f4d\u5c0f\u6570", "samples": "[{\"input\": \"1 2 1 2 3\", \"output\": \"0.65625\"}]", "test_case_id": "2248", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-28T03:39:59.765Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": false, "total_submit_number": 16, "total_accepted_number": 3, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 2265, "fields": {"title": "\u9ad8\u50b2\u7684\u9a70\uf8f7\u66ae\u9e35??", "description": "rose\u6700\u8fd1\u5728\u5fd9\u7740\u6253dota2\uff0c\u56e0\u4e3a\u592a\u83dc\uff0c\u4e0d\u5e78\u88ab\u9ad8\u50b2\u7684\u9a70\uf8f7\u76ee\u5439\u6405\u800d\u0000\u4ed6\u8bf4\uff0c\u5c31\u5728\u7ed9\u4f60\u7684\u8fd9n\u4e2a\u82f1\u96c4\u91cc\uff0c\u4f60\u9009\u4e00\u4e32\u8fde\u7eed\u7684\u51e0\u4e2a\u82f1\u96c4\u90fd\u6253\u4e0d\u8fc7\u6211\uff0c\u53f6\uf8f7\u6728\u5c24\u7070\u82cd\u8c1d\u614c\u733f\u9776\u0393\u0000rose\u5b9e\u5728\u4e0d\u80fd\u5fcd\u4e86\uff0c\u4f46\u662f\u9a70\uf8f7\u7261\u6c16\u76d7\u03c4\u75d4\u0000\u5f3a\uff0c\u6240\u4ee5rose\u51b3\u5b9a\u9009\u62e9\u6700\u5c11\u6570\u91cf\u7684\u82f1\u96c4\u6253\u8d25\u9a70\uf8f7\u6479\uff35?\u4e2a\u82f1\u96c4\u7684\u8840\u91cf\u5206\u522b\u4e3aA1,A2,...,An,\uff0c\u5728rose\u770b\u6765\uff0c\u53ea\u8981\u9009\u62e9\u4e00\u4e32\u8fde\u7eed\u7684\u82f1\u96c4\u8840\u91cf\u548c\u5927\u4e8e\u7b49\u4e8e\u9a70\uf8f7\u7261\u96be\u0000\u91cfS\uff0c\u5c31\u80fd\u6253\u8d25\u4ed6\uff0c\u8bf7\u95ee\u83dc\u83dc\u7684rose\u6700\u5c11\u9700\u8981\u9009\u62e9\u8fde\u7eed\u7684\u51e0\u4e2a\u82f1\u96c4\u624d\u4e0d\u81f3\u4e8e\u8f93\u7684\u90a3\u4e48\u4e22\u4eba~QAQ\u5982\u679crose\u6ce8\u5b9a\u6253\u4e0d\u8fc7\u9a70\uf8f7\u6a21\u0000\u8bf7\u8f93\u51fa&quot;Master yeahpeng win!&quot;", "input_description": "\u591a\u7ec4\u8f93\u5165\n\u7b2c\u4e00\u884c\u4e3a\u6240\u6709\u82f1\u96c4\u7684\u6570\u76een(10 < n < 10^5), \u9a70\uf8f7\u7261\u96be\u0000\u91cfS(S < 10^8)\uff0c\n\u7b2c\u4e8c\u884c\u5206\u522b\u4e3a\u6bcf\u4e2a\u82f1\u96c4\u5404\u81ea\u7684\u8840\u91cf(0 < Ai < 10^4)\u3002", "output_description": "\u8bf7\u8f93\u51farose\u9700\u8981\u9009\u62e9\u4e00\u4e32\u8fde\u7eed\u7684\u82f1\u96c4\u6700\u5c11\u7684\u4e2a\u6570\u3002", "samples": "[{\"input\": \"10 15\\n5 1 3 5 10 7 4 9 2 8\", \"output\": \"2\"}]", "test_case_id": "2265", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-28T03:38:21.933Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": false, "total_submit_number": 50, "total_accepted_number": 19, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 2266, "fields": {"title": "\u6b64\u9898\u4e0d\u8981YY", "description": "\u521a\u679c\u8bf4\uff1a\u51ac\u74dc\u603b\u4e0d\u6572\u9898\uff0c\u6572\u7684\u9898\u76ee\u4e5f\u90fd\u662fyy\u51fa\u6765\u7684\u3002<p></p>\u51ac\u74dc\u77e5\u9053\u9519\u4e86\uff0c\u4e8e\u662f\u4ed6\u51b3\u5b9a\uff0c\u4ee5\u540e\u518d\u4e5f\u4e0d\u8981yy\u3002\u4e0d\u7ba1\u662f\u6572\u9898\uff0c\u8fd8\u662f\u8bf4\u8bdd\uff0c\u4ed6\u90fd\u4e0d\u8981yy\u3002\u80cc\u5230\u542b\u6709yy\u7684\u5355\u8bcd\uff0c\u4ed6\u62d2\u7edd\uff1b\u770b\u89c1\u542b\u6709yy\u7684\u8bdd\uff0c\u4ed6\u62d2\u7edd\uff1b\u8ba4\u8bc6\u540d\u5b57\u91cc\u542b\u6709yy\u7684\u4eba\uff0c\u4ed6\u62d2\u7edd\u3002<p></p>\u90a3\u5929\uff0cusedRose\u8fc7\u4e86\u516d\u7ea7\uff0c\u4e8e\u662f\u8fc7\u6765\u7ed9\u51ac\u74dc\u8865\u82f1\u8bed\uff0c\u6559\u4ed6\u4e00\u4e9b\u5e38\u7528\u7684\u5355\u8bcd\u3002\u53ef\u662f\uff0c\u51ac\u74dc\u5df2\u7ecf\u6212\u6389\u4e86yy\uff0c\u4e8e\u662f\u4ed6\u4f1a\u62d2\u7edd\u542b\u6709yy\u7684\u5355\u8bcd\u3002\u7136\u800c\uff0cusedRose\u7684\u82f1\u8bed\u8bf4\u7684\u6709\u4e9b\u95ee\u9898\uff0c\u4ed6\u8bf4\u7684\u5355\u8bcd\u4e2d\u81f3\u5c11\u542b\u6709\u4e00\u4e2a\u539f\u56e0\u5b57\u6bcd\uff08a\u3001e\u3001i\u3001o\u3001u\uff09\uff0c\u5e76\u4e14\u5176\u4e2d\u4e0d\u80fd\u5305\u62ec\u8fde\u7eed\u4e09\u4e2a\u5143\u97f3\uff0c\u4e5f\u4e0d\u80fd\u662f\u8fde\u7eed\u4e09\u4e2a\u975e\u5143\u97f3\u3002<p></p>\u8bf7\u5224\u65ad\uff0c\u4ee5\u4e0b\u591a\u7ec4\u5b57\u7b26\u4e32\u4e2d\uff0c\u6709\u54ea\u4e9b\u53ef\u4ee5\u8ba9usedRose\u6210\u529f\u5730\u8bfb\u51fa\uff0c\u5e76\u4e14\u4e0d\u4f1a\u8ba9\u51ac\u74dc\u62d2\u7edd\u3002", "input_description": "\u591a\u7ec4\u6570\u636e\u6d4b\u8bd5\u3002\n\u6bcf\u7ec4\u6570\u636e\u5305\u542b\u4e00\u884c\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\uff08\u4e0d\u542b\u7a7a\u683c\uff0c\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u2264500\uff09\u3002", "output_description": "\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u884c\u3002\n\u5982\u679c\u6ee1\u8db3uesdRose\u6210\u529f\u8bfb\u51fa\u5e76\u4e14\u4e0d\u4f1a\u8ba9\u51ac\u74dc\u62d2\u7edd\uff0c\u8bf7\u8f93\u51fa\u201d&ltword&gt is acceptable.\u201d\u5426\u5219\u8f93\u51fa\u201d&ltword&gt is not acceptable.\u201d", "samples": "[{\"input\": \"a\\ntv\\nyy\", \"output\": \"&lta&gt is acceptable.\\n&lttv&gt is not acceptable.\\n&ltyy&gt is not acceptable.\"}]", "test_case_id": "2266", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2267, "fields": {"title": "\u6b64\u9898\u4e0d\u8981GG", "description": "\u5728\u51ac\u74dc\u5237\u9898\u7684\u591c\u665a\uff0c\u56e0\u4e3a\u6709GG\u7684\u9f13\u52b1\uff0c\u6240\u4ee5\u5f88\u591a\u9898\u76ee\u4e0d\u4f1a\u8f7b\u6613\u7684GG\u3002\u51ac\u74dc\u5f88\u611f\u52a8\u3002<p></p>\u51ac\u74dc\u4e0eGG\u5171\u540c\u7684\u8bdd\u9898\u5f88\u5c11\uff0c\u4f46\u662f\u51ac\u74dc\u603b\u662f\u5e0c\u671b\u627e\u5230\u5171\u540c\u7684\u8bed\u8a00\u3002\u4e8e\u662f\uff0c\u51ac\u74dc\u5728\u4e0eGG\u7684\u804a\u5929\u5f53\u4e2d\uff0c\u63d0\u53d6\u4e86\u5f88\u591a\u5f88\u591a\u7684\u516c\u5171\u5b57\u4e32\uff0c\u6765\u770b\u770b\u4ed6\u4eec\u4e4b\u95f4\u7684\u5171\u540c\u8bdd\u9898\u3002\u6211\u4eec\u7528\u516c\u5171\u5b57\u4e32\u7684\u957f\u5ea6\u6765\u53cd\u6620\u51ac\u74dc\u4e0eGG\u5bf9\u4e8e\u8be5\u8bdd\u9898\u7684\u559c\u597d\u7a0b\u5ea6\uff0c\u7136\u800c\u51ac\u74dc\u5e0c\u671b\u8ba1\u7b97\u51fa\u4ed6\u4eec\u6700\u7231\u7684\u8bdd\u9898\u7684\u597d\u611f\u5ea6\uff0c\u4e8e\u662f\u60f3\u6c42\u51fa\u6c42\u51fa\u4e86\u6700\u957f\u516c\u5171\u5b57\u4e32\u7684\u957f\u5ea6\u3002\u5feb\u5e2e\u4ed6\uff01", "input_description": "\u6bcf\u7ec4\u6570\u636e\u5305\u542b\u4e24\u884c\uff0c\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e14\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u2264100\uff0c\u4e14\u5747\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\u3002", "output_description": "\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e3a\u4e00\u884c\uff0c\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5373\u6700\u957f\u516c\u5171\u5b57\u4e32\u7684\u957f\u5ea6\u3002", "samples": "[{\"input\": \"genggeng\\ngenge\", \"output\": \"4\"}]", "test_case_id": "2267", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2268, "fields": {"title": "\u6b64\u9898\u4e0d\u8981GG\u30fb\u8d30", "description": "\u51ac\u74dc\u4e0eGG\u804a\u5929\u8bb0\u5f55\u8d8a\u6765\u8d8a\u591a\uff0c\u4e8e\u662f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e5f\u8d8a\u6765\u8d8a\u957f\u3002\u7ee7\u7eed\u5b8c\u6210\u4e0a\u4e00\u95ee\u9898\u7684\u89e3\u7b54\uff01", "input_description": "\u6bcf\u7ec4\u6570\u636e\u5305\u542b\u4e24\u884c\uff0c\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e14\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u2264100000\uff0c\u4e14\u5747\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\u3002", "output_description": "\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e3a\u4e00\u884c\uff0c\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5373\u6700\u957f\u516c\u5171\u5b57\u4e32\u7684\u957f\u5ea6\u3002", "samples": "[{\"input\": \"genggeng\\ngenge\", \"output\": \"4\"}]", "test_case_id": "2268", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2269, "fields": {"title": "n\u7684\u9636\u4e58", "description": "\u6c42 n\uff01mod 2017 (1 &lt;= n &lt;= 10^9)\u3002\u6ce8\u610f n! \u8868\u793a n \u7684\u9636\u4e58\uff0cmod \u662f\u6307\u53d6\u6a21\u8fd0\u7b97\uff08\u53d6\u6a21\u5373\u4e3a\u6c42\u4f59\u6570\uff0c\u4f8b\u59825 % 2\uff0c\u5148\u7b975 / 2\uff0c\u5546\u4e3a2\uff0c\u4f59\u6570\u4e3a1\uff0c\u6240\u4ee55 % 2 = 1\u7b49\u5f0f\u6210\u7acb\uff09,C\u8bed\u8a00\u4e2d\u7528%\u8868\u793a\u3002", "input_description": "\u8f93\u5165\u5305\u62ec\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e3a\u4e00\u884c\uff0c\u5305\u62ec\u4e00\u4e2a\u6b63\u6574\u6570n &#160;(1 <= n <= 10^9) \uff0cn = 0\u8868\u793a\u8f93\u5165\u7ed3\u675f\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u8f93\u5165\u6570\u636e\uff0c\u8bf7\u8f93\u51fa n! mod 2017\u3002", "samples": "[{\"input\": \"5\\n10\\n15\\n0\", \"output\": \"120\\n217\\n1047\"}]", "test_case_id": "2269", "hint": "\u8bf7\u6ce8\u610fn\u7684\u8303\u56f4\u662f1\u81f310\u76849\u6b21\u65b9\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 195, "total_accepted_number": 41, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2270, "fields": {"title": "\u62fc\u63a5\u6d77\u62a5", "description": "\u6d77\u62a5\u4e00\u5171\u6709\u4e09\u5f20\u6d77\u62a5\uff0c\u8981\u6c42\u4e09\u5f20\u6d77\u62a5\u5f20\u8d34\u540e\u7ec4\u6210\u4e00\u4e2a\u5b8c\u6574\u3001\u65e0\u7f1d\u9699\u7684\u6b63\u65b9\u5f62\uff01\u5982\u679c\u53ef\u4ee5\u8f93\u51fa\u6b63\u65b9\u5f62\u8fb9\u957f\u5426\u5219\u8f93\u51fa\u201dNo\u201d\u3002", "input_description": "\u8f93\u5165\u5305\u62ec\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e(\u5c0f\u4e8e\u7b49\u4e8e70)\uff0c\u6bcf\u4e00\u884c\u8f93\u5165\u516d\u4e2a\u6574\u6570x1,&#8201;y1,&#8201;x2,&#8201;y2,&#8201;x3,&#8201;y3 (1 <= x1,&#8201;y1,&#8201;x2,&#8201;y2,&#8201;x3,&#8201;y3&#8201; <= 100)\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u8f93\u5165\u6570\u636e\uff0c\u5982\u679c\u53ef\u4ee5\u6d77\u62a5\u7ec4\u6210\u6b63\u65b9\u5f62\uff0c\u7b2c\u4e00\u884c\u8f93\u51fa\u6b63\u65b9\u5f62\u7684\u8fb9\u957f n, \u5426\u5219\u8f93\u51fa\"No\"\u3002", "samples": "[{\"input\": \"<code>\\n5 1 2 5 5 2\\n4 4 2 6 4 2\\n</code>\", \"output\": \"5\\n6\"}]", "test_case_id": "2270", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 148, "total_accepted_number": 29, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2272, "fields": {"title": "\u53cd\u5411\u5339\u914d\u4e32", "description": "\u51ac\u74dc\u548c\u754c\u9762\u718a\u975e\u5e38\u559c\u6b22\u7814\u7a76\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u95ee\u9898\uff0c\u7531\u4e8e\u754c\u9762\u718a\u7684\u6570\u5b66\u5f88\u597d\uff0c\u6240\u4ee5\u51ac\u74dc\u95ee\u4ed6\u7684\u95ee\u9898\u4e00\u5411\u4e0d\u4f1a\u662f\u6570\u5b66\u9898\u3002\u8fd9\u5929\uff0c\u51ac\u74dc\u53c8\u6765\u5201\u96be\u754c\u9762\u718a\u3002<p></p>\u51ac\u74dc\u4ece\u53e3\u888b\u91cc\u62ff\u51fa\u4e86\u4e09\u5f20\u5361\u7247\uff0c\u6bcf\u5f20\u4e0a\u9762\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5206\u522b\u662f&quot;usedrose&quot;, &quot;yeahpeng&quot;, \u201cafterstory\u201d\u3002\u51ac\u74dc\u8bf4\uff1a\u6211\u73b0\u5728\u60f3\u8ba9\u4f60\u627e\u51fa\u6240\u6709\u7684\u53cd\u5411\u914d\u5bf9\u4e32\u3002\u6240\u8c13\u53cd\u5411\u914d\u5bf9\u4e32\uff0c\u5982\u679c\u6211\u4eec\u53e6\u201dusedrose\u201d\u4e3a\u5b57\u7b26\u4e32A\uff0c\u5219\u4e32A\u7684\u8f6c\u7f6eA*=\u201cesordesu\u201d\uff0c\u5982\u679c\u8fd8\u6709\u53e6\u5916\u4e00\u4e2a\u4e32B\uff0c\u53ea\u8981\u6ee1\u8db3A\u7684\u5b57\u5178\u5e8f\u5927\u4e8eB\uff0c\u4e14A*\u7684\u5b57\u5178\u5e8f\u5c0f\u4e8eB*\u7684\u8bdd\uff0c\u6211\u4eec\u5219\u79f0A\u3001B\u4e3a\u4e00\u5bf9\u53cd\u5411\u914d\u5bf9\u4e32\u3002<p></p>\u754c\u9762\u718a\uff1a\u4e0d\u5c31\u4e09\u5f20\u5361\u7247\u561b\uff0c\u6211\u4e00\u4e2a\u4e2a\u6570\u4e0d\u5c31\u5b8c\u4e86\u3002\u4e00\u4e2a\u3001\u4e24\u4e2a\u2026\u2026<p></p>\u8fd9\u65f6\u51ac\u74dc\u4ece\u53e6\u4e00\u4e2a\u53e3\u888b\u91cc\u638f\u51fa\u4e86\u4e00\u6c93\u5361\u7247.............", "input_description": "\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6574\u6570 T (1 <= T <= 100)\uff0c\u8868\u9762\u5171\u6709 T \u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6574\u6570 N(1 <= N <= 10 000)\uff0c\u63a5\u4e0b\u6765 N\u884c\u6bcf\u4e00\u884c\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ee3\u8868\u7740\u4e0d\u540c\u5361\u7247\u4e0a\u7684\u5b57\u7b26\u4e32\u3002(\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u4f1a\u5927\u4e8e20)\u3002", "output_description": "\u8f93\u5165\u4e00\u4e2a\u6574\u6570 R\uff0c\u4e3a\u5728N\u4e2a\u5361\u7247\u4e2d\uff0c\u4e00\u5171\u6709\u591a\u5c11\u5bf9\u53cd\u5411\u5339\u914d\u4e32\u3002", "samples": "[{\"input\": \"1\\n14 \\nbranimir \\nvladimir \\ntom \\nkruz \\nbred \\npit \\nzemlja \\nnije \\nravna \\nploca \\nko \\nje \\nzapalio \\nzito\", \"output\": \"48\"}]", "test_case_id": "2272", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 54, "total_accepted_number": 9, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2273, "fields": {"title": "\u5706\u4e0a\u7684\u548c", "description": "n\u4e2a\u6570A1,A2,A3,...,An\u9996\u5c3e\u76f8\u8fde\u7ec4\u6210\u4e00\u4e2a\u5706(An\u540e\u8fde\u63a5A1)\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u8fde\u7eed\u7684m\u4e2a\u6570\uff0c\u4f7f\u8fd9m\u4e2a\u6570\u7684\u548c\u6700\u5927\u3002", "input_description": "\u8f93\u5165\u5305\u62ec\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e3a\u4e24\u884c\uff0c\u7b2c\u4e00\u884c\u5305\u62ec\u4e24\u4e2a\u6b63\u6574\u6570n,m &#160;(1<=m<=n<=1000) \u3002\u7b2c\u4e8c\u884c\u6709n\u4e2a\u6570A1,A2,A3,...,An(-1000<=Ai<=1000)\u3002", "output_description": "\u8f93\u51fa\u8fde\u7eedm\u4e2a\u6570\u7684\u6700\u5927\u548c\u3002", "samples": "[{\"input\": \"5 3\\n3 2 1 -5 -3\\n4 1\\n1 -2 3 -2\", \"output\": \"6\\n3\"}]", "test_case_id": "2273", "hint": "\u8f93\u5165\u5efa\u8bae\u4f7f\u7528scanf", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2100, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 329, "total_accepted_number": 69, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2274, "fields": {"title": "Orsum again", "description": "yeahpeng\u88ab\u4e00\u9053\u5173\u4e8e\u5f02\u6216\u7684\u9898\u56f0\u6270\u4e86\u8bb8\u4e45\uff0c\u73b0\u5728\uff0c\u4ed6\u5411\u4f60\u5bfb\u6c42\u5e2e\u52a9\u3002<p></p>\u4e00\u4e2a\u542b\u6709n\u4e2a\u5143\u7d20\u7684\u5e8f\u5217A\uff08a1, a2, a3\u2026 an\uff09\u7ed9\u51faq\u4e2a\u8be2\u95ee\u533a\u95f4[Li,Ri],\u6c42\u6ee1\u8db3Li&lt;= i &lt;= j &lt;= Ri\u7684S(i,j)\u4e4b\u548c, \u5176\u4e2dL0,L1,L2\u2026L(q-1)  R0,R1,R2\u2026R(q-1)\u3002<p></p>\u4e3a\u4e86\u8f93\u5165\u65b9\u4fbf\uff0c\u4ee4x = (a * Li + b) %(n+1), y = (c * Ri + d) % (n + 1)<p></p>L(i+1) = min(x, y)<p></p>R(i+1) = max(x,y)<p></p>\u5b9a\u4e49S(i,j)=ai xor a(i+1) xor a(i+2) \u2026 xor aj,", "input_description": "\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570T\uff0c\u8868\u793acase\u603b\u6570\u3002\n\u6bcf\u4e2acase:\n\u7b2c\u4e00\u884c\u8f93\u5165\u56db\u4e2a\u6574\u6570n,q,L0,R0 (1 <= n , q, <= 100000, 1<=L0<=R0<=n)\n\u7b2c\u4e8c\u884c\u56db\u4e2a\u6574\u6570 a,b,c,d(1<=a,b,c,d<=10000)\n\u7b2c\u4e09\u884c n\u4e2a\u6574\u6570 ai  (1<=ai<=10^9)", "output_description": "q\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\u8868\u793a\u533a\u95f4[Li,Ri]\u5185\u6ee1\u8db3\u6761\u4ef6\u7684S(i,j)\u4e4b\u548c\uff0c\u7ed3\u679c\u5bf91000000009\u53d6\u6a21\u3002", "samples": "[{\"input\": \"1\\n4 2 1 4\\n1 2 3 4\\n1 2 3 4\", \"output\": \"30\\n10\"}]", "test_case_id": "2274", "hint": "T\u5927\u7ea6\u4e3a150\uff0c\u5176\u4e2dn&gt;= 10000\u7684case\u4e0d\u8d85\u8fc73\u7ec4", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 5, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2276, "fields": {"title": "Problem B", "description": "\u8f93\u5165\u4e00\u884c\u5b57\u7b26\uff0c\u5206\u522b\u7edf\u8ba1\u51fa\u5176\u4e2d\u82f1\u6587\u5b57\u6bcd\u3001\u7a7a\u683c\u3001\u6570\u5b57\u548c\u5176\u4ed6\u5b57\u7b26\u4e2a\u6570\u3002", "input_description": "\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002", "output_description": "\u82f1\u6587\u5b57\u6bcd\u3001\u7a7a\u683c\u3001\u6570\u5b57\u548c\u5176\u4ed6\u5b57\u7b26\u4e2a\u6570\uff0c\u4e2d\u95f4\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5176\u4ed6\u5b57\u7b26\u4e2a\u6570\u540e\u9762\u6ca1\u6709\u7a7a\u683c\u3002", "samples": "[{\"input\": \"asd 123..\\nAsd123\\n123\", \"output\": \"3 1 3 2\\n3 0 3 0\\n0 0 3 0\"}]", "test_case_id": "2276", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 9, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2277, "fields": {"title": "Problem D", "description": "\u8f93\u51fa\u6240\u6709\u201c\u6c34\u4ed9\u82b1\u6570\u201d\uff0c\u6240\u8c13\u7684\u201c\u6c34\u4ed9\u82b1\u6570\u201d\u662f\u6307\u4e00\u4e2a\u4e09\u4f4d\u6570\uff0c\u5176\u4e2a\u4f4d\u6570\u5b57\u7acb\u65b9\u548c\u7b49\u4e8e\u5176\u672c\u8eab", "input_description": "\u65e0", "output_description": "\u8f93\u51fa\u6240\u6709\u6c34\u4ed9\u82b1\u6570\uff0c\u6bcf\u4e2a\u6570\u5355\u72ec\u4e00\u4e2a\u884c", "samples": "[{\"input\": \"u65e0\", \"output\": null}]", "test_case_id": "2277", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 18, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2278, "fields": {"title": "Problem E", "description": "\u4f01\u4e1a\u53d1\u653e\u7684\u5956\u91d1\u6839\u636e\u5229\u6da6\u63d0\u6210\u3002\u5229\u6da6I \u4f4e\u4e8e\u6216\u8005\u7b49\u4e8e100000\u5143\u7684\uff0c\u5956\u91d1\u53ef\u63d010%\uff1b\u9ad8\u4e8e100000\u5143\u800c\u4f4e\u4e8e200000\u5143\u65f6\uff0c\u8d85\u51fa\u90e8\u5206\u6309\u71677.5%\u63d0\u6210\uff0c\u4f4e\u4e8e100000\u5143\u7684\u90e8\u5206\u8fd8\u662f\u6309\u716710%\uff1b<p></p>  200000 &lt; I &lt;= 400000\u65f6\uff0c\u9ad8\u4e8e200000\u5143\u7684\u90e8\u5206\u6309\u71675%\u63d0\u6210\uff0c\u5269\u4f59\u90e8\u5206\u6309\u4e0a\u8ff0\u529e\u6cd5\u63d0\u6210\uff1b400000 &lt; I &lt;= 600000\u65f6\uff0c\u9ad8\u4e8e400000\u5143\u7684\u90e8\u5206\u6309\u71673%\u63d0\u6210\uff1b600000 &lt; I &lt;= 1000000\u65f6\uff0c<p></p>  \u8d85\u8fc7600000\u5143\u7684\u90e8\u5206\u6309\u71671.5%\u63d0\u6210\uff1b I &gt; 1000000\u65f6\uff0c\u8d85\u51fa100000\u5143\u7684\u90e8\u5206\u6309\u71671%\u6765\u63d0\u6210\u3002\u4ece\u952e\u76d8\u8f93\u5165\u5f53\u6708\u5229\u6da6I,\u6c42\u5e94\u53d1\u5956\u91d1\u989d\u6570s\u3002<p></p>\t\u8981\u6c42\uff1a<p></p>\t1.\u7528if\u8bed\u53e5\u7f16\u7a0b\u5e8f\uff1b<p></p>\t2.\u7528switch\u8bed\u53e5\u7f16\u7a0b\u5e8f ", "input_description": "\u8f93\u5165\uff1aI", "output_description": "\u8f93\u51fa\uff1as (\u4fdd\u75592\u4f4d\u5c0f\u6570\u70b9)", "samples": "[{\"input\": \"900\\n100000\\n400030\", \"output\": \"90.00\\n10000.00\\n27500.90\"}]", "test_case_id": "2278", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2279, "fields": {"title": "LCM", "description": "\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570N\uff081&lt;=N&lt;=1000000\uff09,\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u6574\u6570M\uff0c\u6ee1\u8db3M&gt;N\uff0c\u540c\u65f6LCM(1,2,3,4,...,N-1,N) \u6574\u9664 LCM(N+1,N+2,....,M-1,M)\uff0c\u5373LCM(N+1,N+2,....,M-1,M)\u662fLCM(1,2,3,4,...,N-1,N) \u7684\u500d\u6570.\u6c42\u6700\u5c0f\u7684M\u503c\u3002<p></p>LCM(Lowest Common Multiple)--\u6700\u5c0f\u516c\u500d\u6570<p></p>\u5982LCM(1,2,3)=6,LCM(1,2,3,4)=12", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570T\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u6570\u91cf.\n\u63a5\u4e0b\u6765T\u884c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570N,1<=N<=1000000\u3002", "output_description": "\u6bcf\u7ec4\u6570\u636e\u4e00\u884c\u8f93\u51fa\uff0c\u5373M\u7684\u6700\u5c0f\u503c\u3002", "samples": "[{\"input\": \"3\\n2\\n3\\n4\", \"output\": \"4\\n6\\n8\"}]", "test_case_id": "2279", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 44, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2285, "fields": {"title": "Problem C", "description": "\u6c42S = a + aa + aaa + ...aa...a(\u6700\u540e\u4e00\u4e2a\u6570\u6709n\u4e2aa)\u7684\u503c\uff0c\u5176\u4e2da\u662f\u4e00\u4e2a\u6570\u5b57\uff0cn\u8868\u793aa\u7684\u4f4d\u6570\u3002\u4f8b\u5982 2+22+222+2222 (\u6b64\u65f6n=4\uff09<p></p>n\u7531\u952e\u76d8\u8f93\u5165\u3002 0 &lt; a \u2264 9 , 0 &lt; n &lt; 9", "input_description": "\u8f93\u5165\u4e3aa\u548cn\u7684\u503c", "output_description": "\u8f93\u51fas\u7684\u7ed3\u679c", "samples": "[{\"input\": \"1 1\\n4 2\\n3 2\", \"output\": \"1\\n48\\n36\\n\"}]", "test_case_id": "2285", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 5, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2286, "fields": {"title": "\u6d77\u62a5", "description": "\u5728\u6821\u56ed\u7684\u5f20\u8d34\u680f\u4e0a\u8d34\u4e86\u8bb8\u591a\u6d77\u62a5\uff0c\u4f46\u662f\u5728\u6bcf\u4e2a\u70b9\u53ea\u6709\u6700\u4e0a\u65b9\u7684\u6d77\u62a5\u80fd\u88ab\u770b\u89c1\uff0c\u73b0\u5728\u7af9\u5b50\u60f3\u77e5\u9053\u5728\u67d0\u4e2a\u70b9\u4e0a\u6700\u4e0a\u9762\u7684\u6d77\u62a5\u662f\u7b2c\u51e0\u5f20\u88ab\u8d34\u4e0a\u53bb\u7684\u3002\u5f20\u8d34\u680f\u53ca\u6d77\u62a5\u5747\u53ef\u770b\u505a\u4e00\u4e2a\u77e9\u5f62\uff0c\u6d77\u62a5\u662f\u6309\u7167\u7b2c1\u5f20\u5230\u7b2cn\u5f20\u7684\u987a\u5e8f\u8d34\u4e0a\u53bb\u7684\u3002\u6ce8\u610f\u5728\u77e9\u5f62\u8fb9\u4e0a\u7684\u70b9\u4e5f\u7b97\u4f5c\u88ab\u77e9\u5f62\u8986\u76d6\u3002", "input_description": "\u8f93\u5165\u6709\u591a\u7ec4\u6570\u636e\uff0c\u8bf7\u8bfb\u53d6\u5230\u6587\u4ef6\u7ed3\u675f\u3002\n\u6bcf\u7ec4\u6570\u636e\u5305\u542bn+2\u884c\uff0c\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6574\u6570n(n <= 1000)\uff0c\u8868\u793a\u6d77\u62a5\u7684\u5f20\u6570\uff0c\u7b2c\u4e8c\u884c\u4e3a\u4e24\u4e2a\u6574\u6570x, y\u8868\u793a\u8be2\u95ee\u7684\u70b9\uff0c\u7b2c3\u884c\u5230\u7b2cn+2\u884c\uff0c\u6bcf\u884c\u56db\u4e2a\u6574\u6570x, y, lx, ly(0 <= x,y,lx,ly <= 1e4), \u6309\u7f16\u53f7\u4ece1\u5230n\u7684\u987a\u5e8f\u7ed9\u51fan\u5f20\u6d77\u62a5\u7684\u5de6\u4e0b\u89d2\u5750\u6807\u548cx\u65b9\u5411\u4e0a\u548cy\u65b9\u5411\u4e0a\u7684\u957f\u5ea6\u3002", "output_description": "\u5bf9\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u503c\uff0c\u8868\u793a\u6240\u6c42\u6d77\u62a5\u7f16\u53f7\uff0c\u82e5\uff08x,y\uff09\u5904\u65e0\u6d77\u62a5\u5219\u8f93\u51fa-1\u3002", "samples": "[{\"input\": \"3\\n2 2\\n1 0 2 3\\n0 2 3 3\\n2 1 3 3\\n1\\n4 4\\n0 1 2 2\", \"output\": \"3\\n-1\"}]", "test_case_id": "2286", "hint": "Bamboo", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 56, "total_accepted_number": 21, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2287, "fields": {"title": "\u53d6\u77f3\u5b50", "description": "1\u3001 \u672c\u6e38\u620f\u662f\u4e00\u4e2a\u4e8c\u4eba\u6e38\u620f\uff1b<p></p>2\u3001 \u6709\u4e00\u5806\u77f3\u5b50\u4e00\u5171\u6709n\u4e2a\uff1b<p></p>3\u3001 \u4e24\u4eba\u8f6e\u6d41\u8fdb\u884c\uff1b<p></p>4\u3001 \u6bcf\u8d70\u4e00\u6b65\u53ef\u4ee5\u53d6\u8d701\u2026m\u4e2a\u77f3\u5b50\uff1b<p></p>5\u3001 \u6700\u5148\u53d6\u5149\u77f3\u5b50\u7684\u4e00\u65b9\u4e3a\u80dc\uff1b<p></p>\u5982\u679c\u6e38\u620f\u7684\u53cc\u65b9\u4f7f\u7528\u7684\u90fd\u662f\u6700\u4f18\u7b56\u7565\uff0c\u8bf7\u8f93\u51fa\u54ea\u4e2a\u4eba\u80fd\u8d62\u3002 ", "input_description": "\u8f93\u5165\u6570\u636e\u9996\u5148\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570T(T <= 20)\uff0c\u8868\u793a\u6709T\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002 \n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5360\u4e00\u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6574\u6570n\u548cm\uff081 <= n, m <= 1000\uff09\uff0cn\u548cm\u7684\u542b\u4e49\u89c1\u9898\u76ee\u63cf\u8ff0\u3002", "output_description": "\u5982\u679c\u5148\u8d70\u7684\u4eba\u80fd\u8d62\uff0c\u8bf7\u8f93\u51fa\"first\"\uff0c\u5426\u5219\u8bf7\u8f93\u51fa\"second\"\uff0c\u6bcf\u4e2a\u5b9e\u4f8b\u7684\u8f93\u51fa\u5360\u4e00\u884c\u3002", "samples": "[{\"input\": \"2\\n23 2\\n4 3\", \"output\": \"first\\nsecond\"}]", "test_case_id": "2287", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 94, "total_accepted_number": 47, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2288, "fields": {"title": "\u670b\u53cb\u5708", "description": "\u4e00\u5929\uff0cyeahpeng\u9080\u8bf7n\u4e2a\u4eba\u6765\u53c2\u52a0\u805a\u4f1a\uff0c\u4ed6\u9996\u5148\u8bf7\u6ca1\u6709\u670b\u53cb\u7684\u4eba\u79bb\u5f00\u665a\u4f1a\uff0c\u7136\u540e\u8bf7\u5269\u4e0b\u7684\u4eba\u4e2d\u8fd8\u67091\u4e2a\u670b\u53cb\u5728\u573a\u7684\u4eba\u79bb\u5f00\u665a\u4f1a\uff0c\u4e4b\u540e\u8bf7\u5269\u4e0b\u7684\u4eba\u4e2d\u8fd8\u67092\u4e2a\u670b\u53cb\u5728\u573a\u7684\u4eba\u79bb\u5f00\u665a\u4f1a\uff0c\u7136\u540e3\uff0c4\u2026.n-1\u3002\u8f93\u51fa\u6700\u540e\u665a\u4f1a\u8fd8\u5269\u7684\u6700\u591a\u4eba\u6570\u3002<p></p>\u670b\u53cb\u7684\u5173\u7cfb\u4e0d\u5177\u6709\u4f20\u9012\u6027\uff0c\u5373\uff1aa\u548cb\u662f\u670b\u53cb\uff0cb\u548cc\u662f\u670b\u53cb\uff0c\u4f46a\u548cc\u4e0d\u8981\u6c42\u4e5f\u662f\u670b\u53cb\u3002", "input_description": "\u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570T (T <= 10^5)\uff0c\u8868\u793a\u6709T\u7ec4\u6837\u4f8b\u3002\n\u63a5\u4e0b\u6765\uff0cT\u884c\uff0c\u6bcf\u884c\u4e00\u7ec4\u6574\u6570n\uff081<=n <=  10^9\uff09\u8868\u793a\u53c2\u52a0\u7684\u603b\u4eba\u6570", "output_description": "\u8f93\u51fa\u5171n\u884c\uff0c\u7b2ci\u884c\u8868\u793a\u7b2ci\u7ec4\u6837\u4f8b\u665a\u4f1a\u6700\u591a\u6240\u5269\u7684\u4eba\u6570\u3002", "samples": "[{\"input\": \"1\\n3\", \"output\": \"1\"}]", "test_case_id": "2288", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 36, "total_accepted_number": 13, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2289, "fields": {"title": "GCD", "description": "\u73b0\u6709\u4e00\u4e2aN\u4e2a\u6570\u6784\u6210\u7684\u6570\u7ec4\uff0c\u6211\u4eec\u5bf9\u5176\u8fdb\u884cN-1\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5982\u4e0b\uff1a\u53d6\u51fa\u6570\u7ec4\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u6570a\u4e0e\u6700\u5c0f\u7684\u4e00\u4e2a\u6570b\uff0c\u7136\u540ea,b\u8fdb\u884cgcd\u8fd0\u7b97\u5373\u53d6GCD(a,b)\u6700\u540e\u5c06\u8fd0\u7b97\u7ed3\u679c\u63d2\u5165\u6570\u7ec4\u4e2d\u3002<p></p>GCD(greatest common divisor)--\u6700\u5927\u516c\u7ea6\u6570", "input_description": "\u591a\u7ec4\u6570\u636e\u8f93\u5165\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u542b\u4e24\u884c.\n\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6574\u6570N(2\u2264N\u2264100000).\n\u7b2c\u4e8c\u884c\u4e3aN\u4e2a\u6574\u6570a(1\u2264a\u22641000000).", "output_description": "\u8f93\u51fa\u4e00\u884c\u8868\u793a\u6700\u7ec8\u5269\u4f59\u7684\u4e00\u4e2a\u6570", "samples": "[{\"input\": \"3\\n2 4 6\\n4\\n1 5 4 9\", \"output\": \"2\\n1\"}]", "test_case_id": "2289", "hint": "\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6837\u4f8b\uff0c\u9996\u5148\u53d6\u51fa\u6700\u5c0f\u503c2\u4e0e\u6700\u5927\u503c6\u8fdb\u884c\u53d6\u6700\u5927\u516c\u7ea6\u6570\u4e3a2\u5e76\u63d2\u5165\u6570\u7ec4\u4e2d,\u6570\u7ec4\u76ee\u524d\u4e3a{2,2},\u518d\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\u540e\u5219\u4e3a2,\u6240\u4ee5\u8f93\u51fa\u4e3a2", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 179, "total_accepted_number": 19, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2290, "fields": {"title": "Osu!", "description": "Osu\uff01\u662f\u4e00\u6b3e\u8457\u540d\u7684\u4f53\u80b2\u953b\u70bc\uff08\u5212\u6389\uff09\u8282\u594f\u6e38\u620f\uff0c\u800c\u7af9\u5b50\u6b63\u662f\u8fd9\u4e00\u6e38\u620f\u7684\u7231\u597d\u8005\uff0c\u4f46\u4e3a\u4e86\u4e0d\u5360\u7528\u5199\u5927\u7269\u4f5c\u4e1a\u5199\u5b9e\u9a8c\u62a5\u544a\u4ee5\u53ca\u770b\u52a8\u753b\u8bfb\u5c0f\u8bf4\u4ee5\u53ca\u5237\u9898\u7684\u65f6\u95f4\uff0c\u7af9\u5b50\u4e25\u683c\u9650\u5236\u81ea\u5df1\u6bcf\u5929\u73a9osu!\u7684\u65f6\u95f4\u3002\u4f46\u82e5\u662f\u5230\u65f6\u95f4\u9650\u5236\u65f6\u4ecd\u5728\u73a9\u67d0\u4e00\u9996\u66f2\u5b50\uff0c\u80af\u5b9a\u662f\u4e0d\u80fd\u505c\u4e0b\u6765\u7684\uff0c\u7af9\u5b50\u60f3\u5c3d\u91cf\u591a\u73a9\u4e00\u4e9b\u66f2\u5b50\uff0c\u540c\u65f6\u5c06\u81ea\u5df1\u6700\u559c\u6b22\u7684\u300a\u60f3\u8c61\u68ee\u6797\u300b\u653e\u5728\u6700\u540e\u73a9\uff08\u957f\u5ea6250\u79d2\uff09\uff0c\u4f46\u7531\u4e8eosu\uff01\u73a9\u592a\u591a\u5bfc\u81f4\u667a\u5546\u4e0b\u964d\uff0c\u7b97\u4e0d\u6e05\u695a\u7684\u4ed6\u5f00\u59cb\u65b9\u4e86\uff0c\u8bf7\u4f60\u62ef\u6551\u4e00\u4e0b\u8fd9\u4e2a\u53ef\u601c\u7684\u5bb6\u4f19\uff0c\u544a\u8bc9\u4ed6\u4eca\u5929\u80fd\u73a9\u591a\u5c11\u66f2\u76ee\u3002", "input_description": "\u8f93\u5165\u6709\u591a\u7ec4\u6570\u636e\uff0c\u8bf7\u8bfb\u53d6\u5230\u6587\u4ef6\u7ed3\u675f\u3002\n\u6bcf\u7ec4\u6570\u636e\u5305\u542b2\u884c\uff0c\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6574\u6570a(1<=a<=100)\uff0cb(1<=b<=10000)\uff0c\u8868\u793a\u6b4c\u66f2\u6570\u91cf\uff0c\u8868\u793a\u4eca\u5929\u7684\u65f6\u95f4\u9650\u5236\uff08\u79d2\uff09\uff0c\u7b2c\u4e8c\u884c\u5305\u542b\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2c\u9996\u6b4c\u66f2\u957f\u5ea6\uff0c\u6b4c\u66f2\u957f\u5ea6\u4e0d\u8d85\u8fc7300\u79d2", "output_description": "\u5bf9\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u503c\uff0c\u8868\u793a\u6700\u591a\u80fd\u73a9\u7684\u66f2\u76ee\uff08\u5305\u542bSouzou Forest\uff09", "samples": "[{\"input\": \"3 100\\n60 70 80\\n3 100\\n30 69 70\\n1 100\\n110\", \"output\": \"2\\n3\\n1\"}]", "test_case_id": "2290", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 217, "total_accepted_number": 39, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2291, "fields": {"title": "MOD", "description": "\u6709\u4e00\u53ea\u9752\u86d9,\u5728\u4ed6\u7684\u9762\u524d\u6709M\u4e2a\u77f3\u9636,\u7f16\u53f7\u4f9d\u6b21\u4e3a0\u5230M-1,\u9752\u86d9\u521d\u59cb\u4f4d\u7f6e\u57280,\u4e14\u77f3\u9636\u4e3a\u73af\u5f62\u9996\u5c3e\u76f8\u63a5,\u9752\u86d9\u6bcf\u6b21\u53ef\u4ee5\u8df3\u5230\u8ddd\u79bb\u5b83A\u7684\u90a3\u4e2a\u77f3\u9636\u4e0a,\u6bd4\u5982A=3,M=9,\u5373\u5b83\u4e0b\u4e00\u6b65\u4f1a\u8df3\u5230(0+3)%9=3\u7684\u4f4d\u7f6e,\u4e0b\u4e00\u6b65\u4e3a(3+3)%9=6\u7684\u4f4d\u7f6e,\u4f9d\u6b21\u8df3\u4e0b\u53bb,\u53ef\u662f\u6709\u4e9b\u77f3\u9636\u662f\u600e\u4e48\u4e5f\u8df3\u4e0d\u5230\u7684,\u6240\u4ee5\u5e0c\u671b\u4f60\u80fd\u8f93\u51fa\u4e0d\u80fd\u8df3\u5230\u7684\u77f3\u9636\u7f16\u53f7\u7684\u548c\u3002", "input_description": "\u591a\u7ec4\u8f93\u5165\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u542b\u4e24\u4e2a\u6574\u6570M,A.\n(1\u2264M\u226410^9,1\u2264A\u2264100)", "output_description": "\u7b54\u6848\u8f93\u51fa\u4e3a\u4e00\u884c\u5373\u53ef", "samples": "[{\"input\": \"9 3\\n4 3\", \"output\": \"27\\n0\"}]", "test_case_id": "2291", "hint": "\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6837\u4f8b\u4e0d\u80fd\u8df3\u5230\u7684\u7f16\u53f7\u4f9d\u6b21\u4e3a1,2,4,5,7,8\\n\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u9752\u86d9\u53ef\u4ee5\u8df3\u5230\u6240\u6709\u7684\u7f16\u53f7\u6240\u4ee5\u8f93\u51fa\u4e3a0", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 106, "total_accepted_number": 14, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2292, "fields": {"title": "\u51ac\u74dc\u7684Penta Kill\uff1f", "description": "\u51ac\u74dc\u6700\u8fd1\u603b\u8ddf\u5ba4\u53cb\u5f00\u9ed15 LOL\uff0c\u5e76\u4e14\u603b\u662f\u4e2d\u5355\u5c0f\u6cd5\u548c\u62c9\u514b\u4e1d\u3002\u51ac\u74dc\u60f3\u62ff\u66f4\u591a\u7684\u4eba\u5934\uff0c\u4e8e\u662f\u6bcf\u573a\u90fd\u51fa\u6740\u4eba\u4e66\u3002\u5230\u540e\u671f\uff0c\u51ac\u74dc\u7684\u6cd5\u5f3a\u5f88\u9ad8\uff0c\u7528\u2019QWER\u2019\u4e2d\u7684\u4efb\u610f\u4e09\u4e2a\u6280\u80fd\u5c31\u80fd\u79d2\u6389\u4e00\u4e2a\u5bf9\u624b\u3002\u4f46\u662f\u6bcf\u4e2a\u6280\u80fd\u90fd\u6709\u51b7\u5374\u65f6\u95f4\uff0c\u2019QWE\u2019\u9700\u8981\u7b49\u5f85\u4e24\u4e2a\u6280\u80fd\u65f6\u95f4\uff08\u8ddd\u79bb\u4e0a\u4e00\u4e2a\u76f8\u540c\u6280\u80fd\u8981\u95f4\u9694\u4e24\u4e2a\u4e0d\u540c\u6280\u80fd\uff09\uff0c\u800c\u2019R\u2019\u9700\u8981\u7b49\u5f85\u56db\u4e2a\u3002\u5982\u679c\u5728\u51b7\u5374\u65f6\u95f4\u5185\u53c8\u7528\u4e86\u8fd9\u4e2a\u6280\u80fd\uff0c\u5219\u4f1a\u6709\u4e0d\u5fc5\u8981\u7684\u65f6\u95f4\u6d88\u8017\uff0c\u800c\u5728\u8fd9\u4e2a\u65f6\u95f4\u91cc\uff0c\u81ea\u5df1\u5c31\u4f1a\u88ab\u5bf9\u65b9\u77ac\u95f4\u79d2\u6389\u3002\u5728\u4e00\u6b21\u56e2\u6218\u4e2d\uff0c\u5df2\u77e5\u51ac\u74dc\u7684\u6309\u952e\u6b21\u5e8f\uff0c\u6c42\u5728\u81ea\u5df1\u6b7b\u4ea1\u6216\u8005\u5bf9\u65b9\u56e2\u706d\u4e4b\u524d\u80fd\u62ff\u5230\u51e0\u4e2a\u4eba\u5934\u3002\uff08\u5bf9\u9762\u6700\u591a5\u4e2a\u4eba\uff09", "input_description": "\u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u6709\u4e00\u4e2aT\uff0c\u8868\u793a\u6709T\u6b21\u56e2\u6218\u3002(1 <= T <= 100)\n\u63a5\u4e0b\u6765T\u884c\uff0c\u6bcf\u884c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u5f53\u4e2d\u53ea\u7531\u2018QWER\u2019\u6784\u6210\uff08\u5747\u4e3a\u5927\u5199\uff0c\u4e14\u957f\u5ea6\u5c0f\u4e8e50\uff09\u3002", "output_description": "\u8f93\u51fa\u6bcf\u6b21\u6309\u952e\u65f6\u51ac\u74dc\u53ef\u4ee5\u65a9\u6740\u5bf9\u9762\u7684\u4eba\u5934\u6570\u3002", "samples": "[{\"input\": \"2\\nQWERQW\\nRQWERQ\", \"output\": \"2\\n1\"}]", "test_case_id": "2292", "hint": "\u7b2c\u4e00\u7ec4\u6d4b\u8bd5\u6837\u4f8b\uff0c\u8fde\u7eed\u653e\u4e866\u4e2a\u6280\u80fd\uff0c\u5e76\u4e14\u6240\u6709\u6280\u80fd\u5982\u679c\u6709\u591a\u6b21\u65bd\u6cd5\uff0c\u5747\u4e0d\u5728\u8be5\u6280\u80fd\u7684\u51b7\u5374\u65f6\u95f4\u4e2d\u3002\u6240\u6709\u7b54\u6848 ans = 6 / 3 = 2;\\n\u7b2c\u4e8c\u7ec4\u6570\u636e\u4e2d\uff0c\u8fde\u7eed\u653e\u4e866\u4e2a\u6280\u80fd\uff0c\u4f46\u662fR\u6280\u80fd\u5fc5\u987b\u4e2d\u95f4\u95f4\u96944\u4e2a\u4e0d\u540c\u7684\u5408\u7406\u6280\u80fd\uff0c\u6240\u4ee5\u51ac\u74dc\u4f1a\u5728\u7b2c\u516d\u6b21\u65bd\u6cd5\uff08\u5373\u7b2c\u4e8c\u6b21\u653eR\uff09\u7684\u65f6\u5019\u6b7b\u4ea1\u3002\u5728\u6b7b\u4ea1\u4e4b\u524d\uff0c\u524d\u4e09\u6b21\u65bd\u6cd5\u2019RQW\u2019\u4f1a\u6253\u6b7b\u4e00\u4e2a\u5bf9\u624b\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 278, "total_accepted_number": 27, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2293, "fields": {"title": "\u5751\u4eba\u7684\u6b63\u591a\u8fb9\u5f62", "description": "\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\u4e0a\u6709n\u4e2a\u70b9\uff0c\u82e5\u5df2\u7ecf\u7ed9\u51fa\u8fd9n\u4e2a\u70b9\u7684\u5750\u6807\u3002\u8bf7\u95ee\u8fd9n\u4e2a\u70b9\u80fd\u5426\u6784\u6210\u6b63n\u8fb9\u5f62\u7684\u9876\u70b9\u3002", "input_description": "\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2aT\uff080 <= T <= 50\uff09\u3002\u4ee5\u4e0bT\u884c\u6bcf\u7ec4\u7b2c\u4e00\u4e2a\u6570\u662fn\uff083 <= n <= 100\uff09\u3002\u7d27\u63a5\u7740\u7ed9\u51fan\u4e2a\u70b9\u7684\u5750\u6807xi, yi (-1000 <= xi, yi <= 1000)\uff0c\u4e14xi, yi\u5747\u4e3a\u6574\u6570\u3002", "output_description": "\u5982\u679c\u53ef\u4ee5\u6784\u6210\u6b63n\u8fb9\u5f62\uff0c\u8f93\u51fa\u2019yes\u2019\uff0c\u5426\u5219\u8f93\u51fa\u2019no\u2019\u3002", "samples": "[{\"input\": \"3\\n3\\n0 0\\n1 1\\n1 0\\n4\\n0 0\\n0 1\\n1 0\\n1 1\\n5\\n0 0\\n0 1\\n0 2\\n2 2\\n2 0\", \"output\": \"no\\nyes\\nno\"}]", "test_case_id": "2293", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 24, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2294, "fields": {"title": "\u7af9\u5b50\u6361\u624b\u529e", "description": "wth\u662f\u4e00\u4e2a\u571f\u8c6a\uff0c\u5bb6\u4e2d\u6709\u5f88\u591a\u5f88\u591a\u7684\u624b\u529e\u3002\u6709\u4e00\u5929\uff0c\u7af9\u5b50\u901a\u8fc7\u67d0\u79cd\u624b\u6bb5\u95ef\u8fdb\u4e86wth\u7684\u5bb6\u91cc\uff0c\u60f3\u8981\u6361\u4e00\u4e9b\u624b\u529e\u3002wth\u7684\u5bb6\u5206\u6210\u4e86\u5f88\u591a\u5f88\u591a\u7684\u623f\u95f4\uff0c\u5e76\u4e14\u623f\u95f4\u4e4b\u95f4\u90fd\u6ca1\u6709\u901a\u9053\uff0c\u800c\u662f\u4f7f\u7528\u4f20\u9001\u95e8\u8fdb\u884c\u79fb\u52a8\uff0c\u6bcf\u4e2a\u623f\u95f4\u91cc\u90fd\u6709\u4e00\u5ea7\u4f20\u9001\u95e8\u548c\u4e00\u4e9b\u624b\u529e\uff0c\u4f7f\u7528\u4f20\u9001\u95e8\u53ef\u4ee5\u5230\u8fbe\u5176\u4ed6\u67d0\u4e00\u4e9b\u623f\u95f4\uff0c\u6bcf\u5230\u4e00\u4e2a\u623f\u95f4\uff0c\u7af9\u5b50\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u623f\u95f4\u7684\u624b\u529e\u5168\u90e8\u6361\u8d70\u3002\u7af9\u5b50\u60f3\u77e5\u9053\u4ed6\u6700\u591a\u80fd\u6361\u5230\u591a\u5c11\u624b\u529e\uff0c\u4f60\u80fd\u5e2e\u5e2e\u4ed6\u5417\uff1f<p></p>\u7af9\u5b50\u6700\u5f00\u59cb\u5728\u623f\u95f41\u3002<p></p>", "input_description": "\u591a\u7ec4\u6570\u636e\u8f93\u5165\uff0c\u8bf7\u8bfb\u5165\u5230\u6587\u4ef6\u672b\u5c3e\u3002\n\u6bcf\u7ec4\u6570\u636e\u9996\u884c\u4e3a\u4e00\u4e2a\u6574\u6570n(0 <= n <= 1e4)\uff0cn\u4e3a\u95e8\u7684\u4e2a\u6570\uff0c\u63a5\u4e0b\u6765\u4e00\u884cn\u4e2a\u6570\uff0c\u7b2ci\u4e2a\u6570a(i)\u8868\u793a\u7b2ci\u4e2a\u623f\u95f4\u5185\u7684\u624b\u529e\u6570\u91cf(0 < a(i) <= 10000)\uff0c\u63a5\u4e0b\u6765n\u884c\u6bcf\u884c\u6709m(i) + 1\u4e2a\u6570\uff0c\u6bcf\u884c\u7b2c\u4e00\u4e2a\u6570\u4e3ami(0 <= m(i))\uff0c\u4e4b\u540em(i)\u4e2a\u6570b(i,j)\uff081 <= b(i,j) <= n\uff09\uff0c\u8868\u793a\u4ece\u623f\u95f4i\u53ef\u4ee5\u7528\u4f20\u9001\u95e8\u5230\u8fbe\u623f\u95f4b(i,j)\u3002\nm(i)\u4e4b\u548c\u4e0d\u5927\u4e8e1e5\u3002\n", "output_description": "\u5bf9\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7af9\u5b50\u6700\u591a\u80fd\u6361\u5230\u7684\u624b\u529e\u6570\u91cf\u3002", "samples": "[{\"input\": \"6\\n2 4 3 5 4 4\\n2 2 3\\n1 4\\n2 5 6\\n0\\n0\\n1 3\\n2\\n1 2\\n0\\n0\\n\", \"output\": \"13\\n1\\n\\n\"}]", "test_case_id": "2294", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 11, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2295, "fields": {"title": "\u7af9\u5b50\u4e70\u5956\u54c1", "description": "\u7af9\u5b50\u8981\u53bb\u4e3a\u96c6\u8bad\u961f\u672a\u6765\u7684\u5b66\u5f1f\u5b66\u59b9\u4eec\u4e70\u5956\u54c1\uff0c\u7af9\u5b50\u6253\u7b97\u4e70\u5956\u54c1\u7684\u5e97\u5206\u5e03\u5728\u4e00\u6761\u5927\u8857\u4e0a\uff0c\u73b0\u5728\u7af9\u5b50\u5df2\u7ecf\u77e5\u9053\u4e86\u5728\u6bcf\u5bb6\u5e97\u6240\u4e70\u5956\u54c1\u7684\u4ef7\u683c\u3002\u4f46\u7531\u4e8e\u7af9\u5b50\u4f53\u578b\u5a07\u5c0f\uff0c\u5f88\u5bb9\u6613\u88ab\u4eba\u8ba4\u51fa\u6765\uff0c\u56e0\u6b64\u7af9\u5b50\u6bcf\u5230\u4e00\u5bb6\u5e97\u4e70\u4e1c\u897f\uff0c\u8fd9\u5bb6\u5e97\u5de6\u53f3\u6700\u8fd1\u7684\u4e24\u5bb6\u6ca1\u4e70\u8fc7\u5956\u54c1\u7684\u5e97\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u5c31\u4f1a\u63d0\u9ad8\u4ef7\u683c\uff0c\u53ef\u601c\u7684\u7af9\u5b50\u60f3\u77e5\u9053\u4ed6\u8981\u4e70\u5230\u6240\u6709\u5956\u54c1\u9700\u8981\u82b1\u591a\u5c11\u94b1\u3002", "input_description": "\u591a\u7ec4\u6570\u636e\u8f93\u5165\uff0c\u8bf7\u8bfb\u5165\u5230\u6587\u4ef6\u672b\u5c3e\u3002\n\u6bcf\u7ec4\u6570\u636e\u9996\u884c\u4e3a\u4e00\u4e2a\u6574\u6570n(0 <= n <= 200)\uff0cn\u4e3a\u5e97\u94fa\u7684\u4e2a\u6570\uff0c\u63a5\u4e0b\u6765\u4e00\u884cn\u4e2a\u6570\uff0c\u7b2ci\u4e2a\u6570a(i)\u8868\u793a\u7b2ci\u4e2a\u5e97\u94fa\u5185\u7684\u5956\u54c1\u4ef7\u683c(0 < a(i) <= 1000)\uff0c\u63a5\u4e0b\u6765\u4e00\u884cn\u4e2a\u6570\uff0c\u7b2ci\u4e2a\u6570b(i)\u8868\u793a\u7b2ci\u4e2a\u5e97\u94fa\u6bcf\u6b21\u63d0\u9ad8\u7684\u4ef7\u683c(0 < b(i) <= 1000)\u3002\n", "output_description": "\u5bf9\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7af9\u5b50\u4e70\u5230\u6240\u6709\u5956\u54c1\u6700\u5c11\u8981\u82b1\u591a\u5c11\u94b1\u3002", "samples": "[{\"input\": \"3\\n3 5 7\\n8 2 0\\n10\\n1 3 5 7 9 2 4 6 8 10\\n9 4 1 2 1 2 1 4 5 1\\n\", \"output\": \"17\\n74\\n\"}]", "test_case_id": "2295", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 4, "total_accepted_number": 0, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2296, "fields": {"title": "\u51ac\u74dc\u7684\u9057\u7559\u95ee\u9898", "description": "\u51ac\u74dc\u4e0a\u4e00\u573a\u6bd4\u8d5b\u4e2d\uff0c\u7531\u4e8e\u6253LOL\u800c\u9519\u8fc7\u4e86\u6bd4\u8d5b\u3002\u4f46\u662f\u4ed6\u8ba4\u8bc6\u51fa\u9898\u4eba\u754c\u9762\u718a\uff0c\u4ed6\u60f3\u62b1\u4e2a\u5927\u817f\u3002<p></p>\u800c\u754c\u9762\u718a\u8bf4\uff0c\u6211\u8fd9\u91cc\u6709\u4e00\u4e2a\u5386\u53f2\u9057\u7559\u95ee\u9898\uff0c\u53ea\u8981\u4f60\u505a\u51fa\u6765\uff0c\u6211\u53ef\u4ee5\u653e\u6c34\uff0c\u8ba9\u4f60\u8fdb\u5165\u7b2c\u4e8c\u8f6e\u3002<p></p>\u8fd9\u4e2a\u95ee\u9898\u662f\u8fd9\u6837\u7684\uff1a<p></p>\u5df2\u77e5\u4e00\u4e2a\u542b\u6709n\u4e2a\u6570\u7684\u5e8f\u5217A\uff0c\u6211\u73b0\u5728\u8981\u5728\u5f53\u4e2d\u627e\u5230\u4e00\u4e2a\u8fde\u7eed\u7684\u5b50\u5e8f\u5217B\uff0c\u5e76\u4e14\u9700\u8981\u6ee1\u8db3\u5b50\u5e8f\u5217B\u4e2d\u7684\u6240\u6709\u6570\u76f8\u52a0\u4e4b\u548c\u53ef\u4ee5\u6574\u9664n\u3002\u73b0\u5728\u8981\u627e\u51fa\u8fd9\u6837\u7684\u6240\u6709\u5b50\u5e8f\u5217\u3002<p></p>\u4f46\u662f\u754c\u9762\u718a\u662f\u4e00\u53ea\u5fc3\u8f6f\u7684\u718a\uff0c\u4ed6\u4e5f\u60f3\u8ba9\u51ac\u74dc\u8fdb\u5165\u4e0b\u4e00\u8f6e\u3002\u4e8e\u662f\u4ed6\u7b80\u5316\u4e86\u95ee\u9898\uff0c\u53ea\u8981\u6c42\u5f97\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u6700\u957f\u5b50\u5e8f\u5217\u957f\u5ea6\u5373\u53ef\u3002<p></p>\u51ac\u74dc\u7684\u667a\u5546\u592a\u4f4e\uff0c\u65e0\u6cd5\u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u806a\u660e\u7684\u4f60\uff0c\u80fd\u5e2e\u52a9\u51ac\u74dc\u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u4ece\u800c\u987a\u5229\u8fdb\u5165\u4e0b\u4e00\u8f6e\u5417\uff1f<p></p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570T\uff081 <= T <= 50\uff09\uff0c\u8868\u793a\u4e4b\u540e\u4f1a\u6709T\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570n\uff081 <= n <= 10^6\uff09\uff0c\u4ee3\u8868\u5e8f\u5217\u4e2d\u6709n\u4e2a\u6570\u3002\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e8c\u884c\u662fn\u4e2a\u6b63\u6574\u6570a1, a2, ... , an\u3002\uff081 <= a1, a2, ... , an <= 10^9\uff09", "output_description": "\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u51fa\u6ee1\u8db3(a[x] + a[x+1] + ... + a[y]) % n = 0\u4e2d\uff0c\u5e8f\u5217B\u7684\u957f\u5ea6\uff0c\u5373\u5e8f\u5217{a[x], a[x + 1], ..., a[y]}\u7684\u5143\u7d20\u4e2a\u6570\u3002\u5982\u679c\u627e\u4e0d\u5230\u5e8f\u5217\uff0c\u5219\u8f93\u51fa-1\u3002", "samples": "[{\"input\": \"2\\n5\\n1 2 6 8 9\\n5\\n1 6 9 5 3\", \"output\": \"4\\n3\"}]", "test_case_id": "2296", "hint": "\u5728\u7b2c\u4e00\u7ec4\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fde\u7eed\u5e8f\u5217{2, 6, 8, 9}\u7684\u548c\u662f25, 25\u53ef\u4ee5\u6574\u96645\uff0c\u6240\u4ee5\u8f93\u51fa\u7ed3\u679c\u4e3a4\\n\u5728\u7b2c\u4e8c\u7ec4\u4e2d\uff0c\u8fde\u7eed\u5e8f\u5217{6, 9}\u548c{6, 9, 5}\u5747\u6ee1\u8db3\u8981\u6c42\uff0c\u4f46\u662f\u540e\u8005\u957f\u5ea6\u8981\u5927\uff0c\u6240\u4ee5\u8f93\u51fa\u7ed3\u679c\u4e3a3", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 66, "total_accepted_number": 10, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2297, "fields": {"title": "\u5947\u602a\u7684\u8868\u8fbe\u5f0f", "description": "\u6709\u4e00\u79cd\u5947\u602a\u7684\u8868\u8fbe\u5f0f\uff0c\u5176\u4e2d\u53ea\u6709\u4e00\u79cd\u5947\u602a\u7684\u8fd0\u7b97\u7b26*\uff0c \u53ea\u6709\u4e00\u79cd\u64cd\u4f5c\u6570\u75281\u8868\u793a\uff0c\u8fd0\u7b97\u987a\u5e8f\u662f\u4ece\u5de6\u5f80\u53f3\uff0c\u5e76\u4e14\u8981\u6c42\u662f\u540e\u7f00\u5f0f\uff0c\u6bd4\u598211*\u5c31\u662f\u4e00\u79cd\u5408\u6cd5\u7684\u8868\u8fbe\u5f0f\u3002\u8fd9\u91cc\u6709\u4e24\u4e2a\u64cd\u4f5c\uff0c\u4f60\u53ef\u4ee5\u4ea4\u6362\u8fd0\u7b97\u7b26\u548c\u64cd\u4f5c\u6570\u7684\u4f4d\u7f6e\uff0c\u6216\u8005\u6dfb\u52a0\u4e00\u4e2a\u64cd\u4f5c\u6570\u3002\u8bf7\u95ee\u806a\u660e\u7684\u5c0f\u670b\u53cb\uff0c\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b21\u64cd\u4f5c\u53ef\u4ee5\u8ba9\u8868\u8fbe\u5f0f\u5408\u6cd5\u3002", "input_description": "\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6570n \u8868\u793a\u6709n\u884c\u8f93\u5165\u6570\u636e\uff0c\n\u63a5\u4e0b\u6765\u7684n\u884c\u6bcf\u884c\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32(\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc71000)\u3002", "output_description": "\u8f93\u51fa\u8ba9\u8868\u8fbe\u5f0f\u5408\u6cd5\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b21\u64cd\u4f5c\u3002", "samples": "[{\"input\": \"4\\n1111*\\n1*1\\n11*111**\\n*\", \"output\": \"0\\n1\\n0\\n2\"}]", "test_case_id": "2297", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 24, "total_accepted_number": 1, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2298, "fields": {"title": "A Simple Graph", "description": "\u674e\u857e\u548c\u97e9\u6885\u6885\u662f\u975e\u5e38\u597d\u7684\u670b\u53cb\uff0c\u674e\u96f7\u5c45\u4f4f\u5728\u57ce\u5e021\uff0c\u97e9\u6885\u6885\u5c45\u4f4f\u5728\u57ce\u5e02n\u3002\u57ce\u5e02\u4e0e\u57ce\u5e02\u4e4b\u95f4\u4e00\u5171m\u6761\u8def\u8fde\u63a5\u3002\u5df2\u7ecf\u8bb8\u4e45\u672a\u89c1\u9762\u7684\u4e24\u4eba\u51b3\u5b9a\u8fd9\u4e2a\u5468\u672b\u4e00\u540c\u51fa\u6765\uff0c\u5728\u57ce\u5e02a\u4e2d\u89c1\u9762\u3002\u5979\u4eec\u60f3\u5c3d\u53ef\u80fd\u65e9\u7684\u89c1\u9762\uff0c\u4f46\u662f\u4e00\u5171n\u4e2a\u57ce\u5e02\uff0c\u8ba9\u5979\u4eec\u96be\u4ee5\u6289\u62e9\u3002\u4e8e\u662f\uff0c\u674e\u548c\u97e9\u5411\u4f60\u6c42\u6551\uff0c\u5e0c\u671b\u627e\u51fa\u57ce\u5e02a\uff0c\u4f7f\u5979\u4eec\u82b1\u8d39\u6700\u77ed\u7684\u65f6\u95f4\u89c1\u9762\u3002", "input_description": "\u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570T\uff081 <= T <= 110\uff09\n\u7b2c\u4e8c\u884c\uff0c\u4e24\u4e2a\u6574\u6570n\uff082 <= n<=10^3\uff09,m(0<=m<= n*(n-1)/2);\n\u63a5\u4e0b\u6765m\u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570u\uff081<=u<=n\uff09,v(1<=v<=n), t(1<=t<=10^4),\u8868\u793a\u57ce\u5e02u\uff0cv\u4e4b\u95f4\u6709\u4e00\u6761\u65e0\u5411\u8fb9\uff0c\u7ecf\u8fc7\u8fd9\u6761\u8def\u9700\u8981\u82b1\u8d39\u65f6\u95f4t\u3002\nn\u5927\u4e8e100\u7684\u6837\u4f8b\u4e0d\u8d85\u8fc73\u7ec4\u3002\n", "output_description": "\u4e00\u884c\uff0c\u5982\u679c\u4e24\u4eba\u65e0\u6cd5\u89c1\u9762\uff0c\u8f93\u51fa\u201cImpossible\u201d\uff0c\u5426\u5219\u7684\u57ce\u5e02a\u548c\u6700\u5c11\u82b1\u8d39\u65f6\u95f4tmin\uff0c\u4e2d\u95f4\u7528\u7a7a\u683c\u683c\u5f00\u3002\u5982\u679c\u6709\u591a\u4e2a\u57ce\u5e02\u7b26\u5408\uff0c\u8f93\u51fa\u5e8f\u53f7\u6700\u5c0f\u7684\u3002", "samples": "[{\"input\": \"1\\n3 3\\n1 3 100\\n1 2 10\\n2 3 11\\n\", \"output\": \"2 11\"}]", "test_case_id": "2298", "hint": "\u8f93\u5165\u91cf\u8f83\u5927\uff0c\u5efa\u8bae\u7528scanf\uff0cprintf\u8f93\u5165\u8f93\u51fa\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 34, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2300, "fields": {"title": "GCD Final", "description": "\u7ed9\u5b9aN\u4e2a\u6570\uff0c\u90a3\u4e48\u4ece\u4e2d\u53d6\u51fa\u4e24\u4e2a\u6570a,b\u4e14\u5e0c\u671bGCD(a,b)\u8d8a\u5927\u8d8a\u597d\uff0c\u95ee\u9898\u6765\u4e86\u6700\u5927\u7684GCD\u503c\u4e3a\u591a\u5c11\uff1f\uff08 GCD--\u6700\u5927\u516c\u7ea6\u6570 \uff09", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u4e3a\u6574\u6570N(2\u2264N\u226410000)\u3002\n\u63a5\u4e0b\u6765\u4e00\u884c\u7ed9\u51faN\u4e2a\u6574\u6570a(1\u2264a\u2264100000)\u3002", "output_description": "\u8f93\u51fa\u4e00\u884c\u4e3a\u53d6\u4e24\u4e2a\u6570\u7684\u6700\u5927GCD\u503c\u5373\u53ef", "samples": "[{\"input\": \"5\\n6 7 8 9 10\\n4\\n4 8 16 17\\n2\\n1 2\\n\", \"output\": \"3\\n8\\n1\"}]", "test_case_id": "2300", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 90, "total_accepted_number": 10, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2301, "fields": {"title": "\u5207\u5272\u6b63\u65b9\u4f53", "description": "\u6709n\u4e2a\u6b63\u65b9\u4f53\u653e\u5728\u6c34\u5e73\u9762\u4e0a\uff0c\u73b0\u5728\u60f3\u7528\u9ad8\u5ea6\u4e3ah\u7684\u5e73\u884c\u4e8e\u6c34\u5e73\u9762\u7684\u9762\u53bb\u5207\u5272\u8fd9n\u4e2a\u6b63\u65b9\u4f53\uff08\u53ef\u80fd\u6709\u7684\u6b63\u65b9\u4f53\u5207\u5272\u4e0d\u5230\uff09\uff0c\u82e5\u60f3\u8ba9\u5272\u5e73\u9762\u4e0a\u4e0b\u6b63\u65b9\u4f53\u7684\u4f53\u79ef\u76f8\u7b49\uff0c\u5207\u5272\u9ad8\u5ea6h\u5e94\u8be5\u4e3a\u591a\u5c11\uff1f", "input_description": "\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570n \u8868\u793a\u6709n\uff08n <= 100\uff09\u4e2a\u6b63\u65b9\u4f53\uff0c\n\u7b2c\u4e8c\u884c\u6709n\u4e2a\u6574\u6570\u5206\u522b\u8868\u793a\u6b63\u65b9\u4f53\u7684\u8fb9\u957fd(d <= 1000)\u3002", "output_description": "\u5bf9\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u5207\u5272\u9ad8\u5ea6h,\u7cbe\u786e\u52301e-4\u3002", "samples": "[{\"input\": \"2\\n2 4\\n1 \\n1\", \"output\": \"1.8000\\n0.5000\"}]", "test_case_id": "2301", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 282, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2303, "fields": {"title": "Fibonacci", "description": "\u76f8\u4fe1\u6211\u8fd9\u662f\u4e00\u9053\u53ef\u4ee5\u62a2FB\u7684\u9898\uff0c\u8bf4\u5230FB\u4fbf\u60f3\u8d77\u4e86\u6590\u6ce2\u90a3\u5951\u6570\u5217(Fibonacci sequence) \u5728\u6570\u5b66\u4e0a\uff0c\u6590\u6ce2\u7eb3\u5951\u6570\u5217\u4ee5\u5982\u4e0b\u88ab\u4ee5\u9012\u5f52\u7684\u65b9\u6cd5\u5b9a\u4e49\uff1aF\uff080\uff09=0\uff0cF\uff081\uff09=1\uff0cF\uff08n\uff09=F(n-1)+F(n-2)\uff08n\u22652\uff0cn\u2208N*\uff09.<p></p>\u5f53\u7136\u4eca\u5929\u6211\u4eec\u6c42\u7684\u662fQ(n),\u5b9a\u4e49Q(n)=F[0]|F[1]|F[2]|F[3].....|F[n].<p></p>\u5176\u4e2d\u201d| \u201d\u4ee3\u8868\u6216\u8fd0\u7b97.<p></p>", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u62ec\u4e00\u4e2a\u6574\u6570 n\uff0c\uff080\u2264n\u2264100\uff09.", "output_description": "\u8f93\u51fa\u4e00\u884c\u4e3aQ(n)\u7684\u503c\uff0c\u7531\u4e8eQ(n)\u53ef\u80fd\u6bd4\u8f83\u5927\uff0c\u8f93\u51faQ(n)%1,000,000,007\u7684\u503c\u5373\u53ef.", "samples": "[{\"input\": \"1\\n2\\n3\\n4\\n\", \"output\": \"1\\n1\\n3\\n3\\n\"}]", "test_case_id": "2303", "hint": "\u5bf9\u4e8en=4\u7684\u60c5\u51b5 Q(n)=0|1|1|2|3=3.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 102, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2306, "fields": {"title": "\u5730\u9707\u5927\u9003\u4ea1", "description": "\u5730\u9707\u53d1\u751f\u65f6\uff0c\u6211\u4eec\u80fd\u505a\u4ec0\u4e48\uff0c\u8dd1~<p></p>Bob\u73b0\u5728\u5728\u4e00\u680b\u5199\u5b57\u697c\u91cc\uff0c\u5199\u5b57\u697c\u88ab\u63cf\u8ff0\u4e3a\u4e00\u4e2aA*B*C\u7684\u7acb\u65b9\u4f53\uff0c\u6bcf\u4e2a\u623f\u95f4\u4e3a\u4e00\u4e2a\u683c\u5b50\uff1b<p></p>Bob\u7684\u4f4d\u7f6e\u4e3a\uff080,0,0\uff09 \u51fa\u53e3\u7684\u4f4d\u7f6e\u4e3a(A-1,B-1,C-1)\uff1b<p></p>Bob\u73b0\u5728\u6709T\u79d2\u8dd1\u51fa\u5199\u5b57\u697c\uff0c\u4f46\u56e0\u4e3a\u5730\u9707\u7684\u7f18\u6545\u6709\u4e9b\u623f\u95f4\u5df2\u7ecf\u4e0d\u80fd\u901a\u8fc7\u4e86\uff1b<p></p>\u5982\u679cBob  1\u79d2\u80fd\u901a\u8fc71\u4e2a\u623f\u95f4\uff1b<p></p>\u90a3\u4e48Bob\u80fd\u4e0d\u80fd\u9003\u51fa\u5199\u5b57\u697c\u5462\uff0c\u5982\u679c\u53ef\u4ee5\u8bf7\u8f93\u51fa\u9700\u8981\u591a\u5c11\u79d2\u624d\u80fd\u79bb\u5f00,\u5982\u679c\u4e0d\u80fd\u5219\u8f93\u51fa-1.<p></p>", "input_description": "\u8f93\u5165\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570K,\u8868\u660e\u6d4b\u8bd5\u6570\u636e\u7684\u6570\u91cf.\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662f\u56db\u4e2a\u6b63\u6574\u6570A,B,C\u548cT(1<=A,B,C<=10,1<=T<=100),\u5b83\u4eec\u5206\u522b\u4ee3\u8868\u5199\u5b57\u697c\u7684\u957f\uff0c\u5bbd\uff0c\u9ad8\u548c\u5269\u4f59\u7684\u9003\u4ea1\u65f6\u95f4.\n\u7136\u540e\u662fA\u7ec4\u8f93\u5165\u6570\u636e,\u6bcf\u7ec4\u8f93\u5165\u6570\u636e\u6709B\u884c,\u6bcf\u884c\u6709C\u4e2a\u6b63\u6574\u6570,\u4ee3\u8868\u5199\u5b57\u697c\u7684\u5e03\u5c40,\u5176\u4e2d0\u4ee3\u8868\u53ef\u4ee5\u901a\u8fc7\u7684\u623f\u95f4,1\u4ee3\u8868\u5df2\u7ecf\u4e0d\u80fd\u901a\u8fc7\u7684\u623f\u95f4\uff0c\u4fdd\u8bc1\uff080,0,0\uff09\u548c(A-1,B-1,C-1)\u53ef\u4ee5\u901a\u8fc7.\n", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e,\u5982\u679cBob\u80fd\u591f\u5728\u5269\u4f59\u65f6\u95f4\u5185\u9003\u79bb\u5199\u5b57\u697c,\u90a3\u4e48\u8bf7\u8f93\u51fa\u4ed6\u6700\u5c11\u9700\u8981\u591a\u5c11\u79d2,\u82e5\u4e0d\u80fd\u9003\u79bb\u5219\u8f93\u51fa-1.", "samples": "[{\"input\": \"1\\n3 3 4 20\\n0 1 1 1\\n0 0 1 1\\n0 1 1 1\\n1 1 1 1\\n1 0 0 1\\n0 1 1 1\\n0 0 0 0\\n0 1 1 0\\n0 1 1 0\\n\", \"output\": \"11\"}]", "test_case_id": "2306", "hint": "\u6837\u4f8b\u4e2d\u5199\u5b57\u697c\u7684\u5e03\u5c40\u53ef\u4ee5\u53c2\u8003\u4e0b\u56fe\\n\\n<img src=\"uploadFiles/2306.jpg\" />", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 20, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2307, "fields": {"title": "Vking\u5206\u91d1\u5e01", "description": "LOL\u804c\u4e1a\u6253\u91ce\u9009\u624bVking\u6253\u91ce\u602a\u6253\u4e86\u4e00\u5806\u91d1\u5e01\uff0c\u73b0\u5728\u4ed6\u60f3\u628a\u8fd9\u4e9b\u91d1\u5e01\u5206\u4e3a\u82e5\u5e72\u5806\uff0c\u6bcf\u5806\u6709\u82e5\u5e72\u4e2a\u91d1\u5e01\uff08\u522b\u95ee\u600e\u4e48\u5206\u7684\uff0c\u6211\u778e\u7f16\u7684\uff09\u3002\u4f46\u662fVking\u4f5c\u4e3a\u4e00\u4e2a\u5f3a\u8feb\u75c7\u60a3\u8005\uff0c\u4ed6\u4e0d\u80fd\u5fcd\u53d7\u6bcf\u5806\u91d1\u5e01\u6bd4\u524d\u4e00\u5806\u91d1\u5e01\u5c11\u3002\u73b0\u5728Vking\u60f3\u77e5\u9053\u5728\u7ed9\u5b9a\u91d1\u5e01\u6570\u7684\u60c5\u51b5\u4e0b\u6709\u591a\u5c11\u79cd\u5206\u6cd5\uff0c\u6c42\u89e3\u7b54\u3002", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u5165\uff08\u5927\u7ea61000\u7ec4\uff09\uff0c\u6bcf\u6b21\u8f93\u5165\u4e00\u4e2a\u6574\u6570n\uff0c\u4ee3\u8868\u91d1\u5e01\u7684\u6570\u91cf\u3002\uff081 <= n <= 1000\uff09", "output_description": "\u6bcf\u7ec4\u6570\u636e\u7684\u8f93\u51fa\u5360\u4e00\u884c\uff0c\u8868\u793a\u6709\u591a\u5c11\u79cd\u5206\u6cd5\u3002\u7531\u4e8e\u8ba1\u7b97\u7684\u503c\u4f1a\u6bd4\u8f83\u5927\uff0c\u5c06\u7ed3\u679c\u6a219998\u3002", "samples": "[{\"input\": \"1\\n4\\n\", \"output\": \"1\\n5\\n\"}]", "test_case_id": "2307", "hint": "\u7b2c2\u7ec4\u6570\u636e\u4e2d\uff0c4\u4e2a\u91d1\u5e01\u53ef\u4ee5\u6709\u4ee5\u4e0b\u5206\u6cd5\uff1a\\n1 1 1 1\\n1 1 2\\n1 3\\n2 2\\n4\\n\u6240\u4ee5\u4e00\u5171\u67095\u79cd\u5206\u6cd5\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 42, "total_accepted_number": 8, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2308, "fields": {"title": "\u97ec\u97ec\u4e0e\u795e\u306e\u6570", "description": "\u6709\u4e00\u5929\uff0c\u6709\u4e00\u4e2a\u5c0f\u670b\u53cb\u9001\u7ed9\u840c\u840c\u7684\u97ec\u97ec\u4e00\u672c\u4e66\uff0c\u4e66\u7684\u540d\u5b57\u53eb\u505a\u300a\u6570\u300b\uff0c\u97ec\u97ec\u5bf9\u4e8e\u6570\u5b57\u6709\u7740\u65e0\u6bd4\u7684\u72c2\u70ed\uff0c\u4e00\u62ff\u5230\u8fd9\u672c\u4e66\u5c31\u6c89\u8ff7\u4e8e\u6570\u7684\u4e16\u754c\u65e0\u6cd5\u81ea\u62d4\uff0c\u4e0d\u4e45\u97ec\u97ec\u770b\u5230\u4e00\u4e2a\u6570\u5b57\u88ab\u79f0\u4e3a\u795e\u306e\u6570\u5b57\u2015\u201536\uff0c\u89c9\u5f97\u5f88\u597d\u5947\uff0c\u4ece\u672a\u542c\u8bf4\u8fc7\uff0c\u53c8\u7ee7\u7eed\u5f80\u4e0b\u770b\uff0c\u53d1\u73b0\u539f\u676536\u597d\u5389\u5bb3\u5462\uff0c\u6709\u597d\u591a\u795e\u5947\u7684\u6027\u8d28\u3002<p></p>   36 = (1 + 3 + 5 +7) + (2 + 4 + 6 + 8) \u662f\u524d4\u4e2a\u5947\u6570\u4e0e\u524d4\u4e2a\u5076\u6570\u7684\u548c<p></p>   36 = 1^3+2^3+3^3 \u8fd8\u662f\u524d3\u4e2a\u81ea\u7136\u6570\u7684\u7acb\u65b9\u548c<p></p>   \u300a\u4e09\u5341\u516d\u8ba1\u300b\u662f\u4e00\u4e2a\u795e\u5947\u7684\u4e1c\u897f\uff0c\u53ef\u4ee5\u89e3\u51b3\u597d\u591a\u795e\u5947\u7684\u95ee\u9898\uff0c\u662f\u6770\u51fa\u7684\u519b\u4e8b\u5bb6\u5b59\u5b50\u5927\u5927\u5199\u5c31\u7684\u4e00\u7bc7\u4f20\u4e16\u5de8\u64d8\u3002<p></p>   \u4eba\u4f53\u80fd\u627f\u53d7\u7684\u5b89\u5168\u7535\u538b\u662f36V\uff0c\u597d\u5de7\u8036\u3002<p></p>   \u2026 \u2026<p></p>   \u97ec\u97ec\u770b\u5230\u4e86\u8fd9\u4e48\u591a36\u7684\u795e\u5947\u6027\u8d28\uff0c\u60f3\u5230\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u7ed9\u5b9a\u533a\u95f4\u8303\u56f4[l, r]\u5185\u6709\u591a\u5c11\u8ddf36\u76f8\u5173\u7684\u6570\u5462\uff0c\u97ec\u97ec\u5728\u60f3\u4ec0\u4e48\u6837\u7684\u6570\u662f\u548c36\u76f8\u5173\u7684\u5462\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u97ec\u97ec\u5728\u601d\u8003\u5982\u4f55\u7ed9\u201c36\u76f8\u5173\u7684\u6570\u201d\u4e00\u4e2a\u5b9a\u4e49\u3002<p></p>   \u4e00\u4e2a\u201c36\u76f8\u5173\u7684\u6570\u201d\uff0c\u9996\u5148\u5b83\u7684\u5341\u8fdb\u5236\u8868\u793a\u4e2d\u5fc5\u987b\u5f97\u670936\u5427\uff0c\u561b\uff0c\u76f8\u5173\u5ea6\u8fd8\u5f97\u591f\uff0c\u4e00\u5b9a\u4e0d\u80fd\u6709\u5355\u4e2a\u76843\u6216\u80056\uff0c\u5355\u4e2a\u76843\u62166\u4e0d\u662f\u771f\u768436\u5440\u3002\u597d\u50cf\u6f0f\u6389\u4e86\u4ec0\u4e48\u4e1c\u897f\uff0c\u201c\u8fd9\u8fd8\u4e0d\u591f\u201d\uff0c\u97ec\u97ec\u8bf4\u9053\u3002<p></p>   \u4e00\u4e2a\u201c36\u76f8\u5173\u7684\u6570\u201d\uff0c\u5b83\u5fc5\u987b\u80fd\u88ab36\u6574\u9664\uff0c\u8fd9\u624d\u662f\u771f\u7684\u548c36\u76f8\u5173\u561b\uff0c\u97ec\u97ec\u53d1\u73b0\u5728[1, 36]\u533a\u95f4\u4e2d\u53ea\u670936\u8fd9\u4e2a\u6570\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\u3002\u97ec\u97ec\u60f3\u77e5\u9053\u7b2c\u4e8c\u4e2a\u8fd9\u6837\u7684\u6570\u662f\u591a\u5c11\u5462\uff0c\u5f88\u9057\u61be\uff0c\u8c8c\u4f3c100\u4ee5\u5185\u627e\u4e0d\u5230\u8fd9\u6837\u7684\u6570\u4e86\u5462\u3002<p></p>   \u97ec\u97ec\u975e\u5e38\u6cae\u4e27\uff0c\u4ed6\u70ed\u5207\u5730\u60f3\u77e5\u9053\u533a\u95f4[l, r]\u4e2d\u201c36\u76f8\u5173\u7684\u6570\u201d\u6709\u591a\u5c11\u3002\u597d\u50cf\u53c8\u6f0f\u6389\u4e86\u70b9\u4ec0\u4e48\u5462\uff0c\u97ec\u97ec\u8fd8\u60f3\u77e5\u9053[l, r]\u533a\u95f4\u4e2d\u8fd9\u4e9b36\u76f8\u5173\u6570\u4e2d\u6709\u591a\u5c11\u201c36\u201d\u5b58\u5728\uff0c\u6bd5\u7adf\u662f36\u561b\u3002<p></p>   \u65e2\u7136\u97ec\u97ec\u73b0\u5728\u5f88\u6cae\u4e27\uff0c\u4e00\u70b9\u7b97\u6570\u7684\u5fc3\u60c5\u90fd\u6ca1\u6709\u4e86\uff0c\u4f46\u662f\u4ed6\u5f88\u60f3\u77e5\u9053\u4e0a\u9762\u63d0\u5230\u7684\u8fd9\u4e9b\u6570\u5462\uff0c\u4eb2\u7231\u7684\u5c0f\u4f19\u4f34\u4f60\u53ef\u4ee5\u5e2e\u5e2e\u4ed6\u561b\uff1f<p></p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u6d4b\u8bd5\u6837\u4f8b\u6570 t (1 <= t <= 10^5)\n   \u63a5\u4e0b\u6765t\u884c\u6bcf\u884c\u5305\u62ec\u4e24\u4e2a\u6b63\u6574\u6570 l, r (1 &#8201;<= &#8201;l <= &#8201;r&#8201; <=&#8201; 10^5).\n\n", "output_description": "   \u8f93\u51fa\u5305\u62ect\u884c\uff0c\u6bcf\u884c\u5bf9\u5e94\u4e00\u6b21\u8be2\u95ee\uff0c\u6bcf\u884c\u5305\u62ec2\u4e2a\u6570\u2015 \u533a\u95f4[l, r]\u4e2d36\u76f8\u5173\u6570\u7684\u6570\u91cf, 36\u76f8\u5173\u6570\u4e2d\u201c36\u201d\u7684\u6570\u91cf\u3002", "samples": "[{\"input\": \"2\\n1 36\\n1 3636\\n\", \"output\": \"1 1\\n8 9\\n\"}]", "test_case_id": "2308", "hint": "[1, 3636]\u4e2d36\u76f8\u5173\u6570\u670936, 360, 936, 1368, 1836, 2736, 3600, 3636\u8fd98\u4e2a, \u201c36\u201d\u51fa\u73b0\u4e869\u6b21", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 151, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2309, "fields": {"title": "\u4e09\u89d2\u5f62\u9762\u79ef\u5e76", "description": "\u5df2\u77e5\u4e8c\u7ef4\u5e73\u9762\u5750\u6807\u7cfb\u5185\u6709\u4e24\u4e2a\u4e09\u89d2\u5f62\u3002\u6c42\u4ed6\u4eec\u7684\u9762\u79ef\u5e76\u3002<p></p>\uff08\u9762\u79ef\u5e76\u5373\u4e3a\u4e24\u4e2a\u4e09\u89d2\u5f62\u5728\u5750\u6807\u7cfb\u4e0a\u5168\u90e8\u7684\u8986\u76d6\u90e8\u5206\u7684\u9762\u79ef\u3002\uff09", "input_description": "\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2aT\u3002\u4ee3\u8868\u6837\u4f8b\u7ec4\u6570\u3002\n\u63a5\u4e0b\u6765\u6709T\u7ec4\u6837\u4f8b\uff0c\u6bcf\u7ec4\u6837\u4f8b\u670912\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u4e24\u4e2a\u4e09\u89d2\u5f62\u7684\u516d\u4e2a\u9876\u70b9\u7684\u5750\u6807\u3002\u524d\u516d\u4e2a\u6570\u8868\u793a\u7b2c\u4e00\u4e2a\u4e09\u89d2\u5f62\u7684\u5750\u6807\uff0c\u540e\u516d\u4e2a\u6570\u5206\u522b\u8868\u793a\u7b2c\u4e8c\u4e2a\u4e09\u89d2\u5f62\u7684\u5750\u6807\u3002\u5750\u6807\u6570\u636e\u8303\u56f4\u5c0f\u4e8e10000. \n", "output_description": "\u6bcf\u4e00\u7ec4\u6837\u4f8b\uff0c\u8f93\u51fa\u4e00\u4e2a\u4fdd\u7559\u4e00\u4f4d\u5c0f\u6570\u7684\u6d6e\u70b9\u6570\uff0c\u4ee3\u8868\u4e24\u4e2a\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u5e76\u3002", "samples": "[{\"input\": \"5\\n0 0 10 0 0 10 3 3 9 9 7 4\\n0 0 1 0 0 1 2 2 5 5 6 9\\n0 0 10 0 0 10 1 2 4 5 -6 1\\n2 3 100 6 -1 100 45 66 23 44 1000 99\\n1 2  3 4 9 8 100 1 30 55 66 1000\\n\", \"output\": \"56.6\\n5.0\\n54.6\\n14618.9\\n34049.0\\n\"}]", "test_case_id": "2309", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 5, "total_accepted_number": 4, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2310, "fields": {"title": "\u4e0d\u884c\uff0c\u4e0d\u53ef\u80fd\uff0c\u529e\u4e0d\u5230", "description": "\u201c\u4e0d\u884c\uff0c\u4e0d\u53ef\u80fd\uff0c\u529e\u4e0d\u5230\u3002\u6211\u6700\u8ba8\u538c\u8fd9\u4e09\u53e5\u8bdd\u3002\u5982\u679c\u81ea\u5df1\u90fd\u8ba4\u4e3a\u81ea\u5df1\u529e\u4e0d\u5230\uff0c\u90a3\u5c31\u771f\u7684\u6ca1\u529e\u6cd5\u4e86\u3002\u201d<p></p>\u2015\u2015\u795e\u5d0e&#8226;H&#8226;\u4e9a\u91cc\u4e9a<p></p>\u73b0\u5728\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5305\u542b\u7740\u5927\u91cf\u7684N\uff08no\uff09\uff0cI\uff08impossible\uff09\uff0cC\uff08can\u2019t\uff09\uff0c\u8ba8\u538c\u8fd9\u4e09\u4e2a\u8bcd\u7684\u4e9a\u91cc\u4e9a\u5728\u201cNIC\u201d\u51fa\u73b0\u65f6\uff0c\u5c31\u4f1a\u5927\u558a\u201c\u65e0\u8def\u8d5b\u201d\uff0c\u5bf9\u4e8e\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2ck\u4e2a\u201cNIC\u201d\uff0c\u4e9a\u91cc\u4e9a\u4f1a\u8bf43^k\u6b21\u201c\u65e0\u8def\u8d5b\u201d\uff0c\u73b0\u5728\u6211\u4eec\u60f3\u77e5\u9053\uff0c\u4e9a\u91cc\u4e9a\u5230\u5e95\u8bf4\u4e86\u591a\u5c11\u6b21\u201c\u65e0\u8def\u8d5b\u201d\u3002<p></p>", "input_description": "\u9996\u884c\u4e00\u4e2a\u6574\u6570t\uff0c\u8868\u793a\u6570\u636e\u7684\u7ec4\u6570\u3002\n\u6bcf\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u5927\u4e8e100000\uff0c\u5b57\u7b26\u4e32\u4ec5\u7531\u5927\u5199\u5b57\u6bcd\u7ec4\u6210\u3002\n", "output_description": "\u5bf9\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e9a\u91cc\u4e9a\u8bf4\u201c\u65e0\u8def\u8d5b\u201d\u7684\u6b21\u6570\uff0c\u7531\u4e8e\u8fd9\u4e2a\u6570\u53ef\u80fd\u5f88\u5927\uff0c\u8bf7\u8f93\u51fa\u7b54\u6848 mod \uff081e9 + 7\uff09\u7684\u7ed3\u679c\u3002", "samples": "[{\"input\": \"3\\nDNICW\\nNICONICONI\\nDUDULU\\n\", \"output\": \"3\\n12\\n0\\n\"}]", "test_case_id": "2310", "hint": "\u53ef\u80fd\u9700\u8981\u4f7f\u7528long long\u6570\u636e\u7c7b\u578b\uff0c\u5176\u8f93\u5165\u8f93\u51fa\u63a7\u5236\u7b26\u4e3a%lld", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 543, "total_accepted_number": 36, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2311, "fields": {"title": "\u4e00\u9053\u7b80\u5355\u9898", "description": "n\u4e2a\u4eba\uff0c\u4ece1\u5f00\u59cb\u62a5\u6570\uff0c\u62a5\u5230m\u7684\u9000\u51fa\uff0c\u5269\u4e0b\u7684\u4eba\u7ee7\u7eed\u4ece1\u5f00\u59cb\u62a5\u6570\u3002\u6c42\u80dc\u5229\u8005", "input_description": "n < 1e8 ,m <= n", "output_description": "\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u80dc\u5229\u8005\u7f16\u53f7", "samples": "[{\"input\": \"1 1\\n2 2\", \"output\": \"1\\n1\\n\"}]", "test_case_id": "2311", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 18, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2312, "fields": {"title": "\u7269\u7269\u4ea4\u6362", "description": "\t\u5728\u8fd8\u6ca1\u6709\u8d27\u5e01\u7684\u5e74\u4ee3\uff0c\u4e3a\u4e86\u83b7\u53d6\u67d0\u4ef6\u5546\u54c1\uff0c\u7269\u7269\u4ea4\u6362\u662f\u4eba\u4eec\u552f\u4e00\u7684\u9009\u62e9\uff0c\u4f46\u53d7\u5e02\u573a\u89c4\u5219\u5236\u7ea6\uff0c\u5e76\u975e\u7269\u54c1\u95f4\u53ef\u4ee5\u4efb\u610f\u4ea4\u6362\uff0c\u4e00\u5929\u5185\u53ea\u53ef\u4ee5\u7528\u7279\u5b9a\u7684\u4e00\u4ef6\u7269\u54c1xi\u4ea4\u6362\u4e00\u4ef6yi\uff0c\u6700\u591aki\u6b21\u3002<p></p>\tYeahpeng\u6709n\u7c7b\u7269\u54c1\uff0c\u6bcf\u7c7b\u7269\u54c1\u4e2a\u6570\u4e3aa1,a2,a3\u2026\u2026an\uff0c\u4ed6\u5e0c\u671b\u5728\u4e00\u5929\u5185\uff0c\u5c06\u7269\u54c1\u5728\u96c6\u5e02\u5185\u4ea4\u6362\uff0c\u6700\u7ec8\u4f7f\u4e2a\u6570b1,b2,b3\u2026\u2026bn\uff0c\u4f46\u662f\u4ed6\u4e0d\u77e5\u9053\u53ef\u5426\u5b8c\u6210\u3002<p></p><p></p>", "input_description": "\u7b2c\u4e00\u884c \u4e00\u4e2a\u6574\u6570T\u8868\u793a\u6d4b\u8bd5\u7ec4\u6570\n\u7b2c\u4e8c\u884c\u4e24\u4e2a\u6574\u6570n\uff0cm\uff081<=n<=1000, 1 <= m <=10000\uff09n\u4ef6\u7269\u54c1\uff0cm\u4e2a\u4ea4\u6362\u89c4\u5219\n\u7b2c\u4e09\u884cn\u4e2a\u6574\u6570 a1,a2,a3\u2026an  (1<=ai<=10^3)\n\u7b2c\u56db\u884cn\u4e2a\u6574\u6570 b1,b2,b3\u2026bn \uff081<=bi<=10^3\uff09\n\u63a5\u4e0b\u6765m\u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570xi,yi,ki (1<=xi,yi<=n,1<=ki<=10^3),\u6ce8\u610f\uff0c\u53ef\u4ee5\u7528xi\u4ea4\u6362\u5f97\u5230yi\uff0c\u4f46\u53cd\u5411\u4e0d\u4e00\u5b9a\u53ef\u5f97\u5230\u3002\n", "output_description": "\u5982\u679c\u53ef\u4ee5\u5c06n\u7c7b\u7269\u54c1\u4ea4\u6362\u5f97\u5230b1,b2,b3\u2026bn\u8f93\u51faYES\uff0c \u5426\u5219\u8f93\u51faNO", "samples": "[{\"input\": \"2\\n2 1\\n3 4\\n5 2\\n2 1 2\\n2 1\\n3 4\\n5 2\\n1 2 2\\n\\n\", \"output\": \"YES\\nNO\\n\"}]", "test_case_id": "2312", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 10, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2313, "fields": {"title": "\u9b42\u4e4b\u633d\u6b4c", "description": "rose\u6700\u8fd1\u5728\u6253dota2\uff0c\u7279\u522b\u8ff7\u604b\u5f71\u9b54\u8fd9\u4e2a\u82f1\u96c4\uff0c\u566c\u9b42\u4e4b\u9b54\u52a0\u9e92\u9e9f\u81c2\uff0c\u7279\u522b\u662f\u65bd\u653e\u9b42\u4e4b\u633d\u6b4c\u7684\u65f6\u5019\u7b80\u76f4\u5e05\u5446\u4e86\uff01\u5bf9\u4e8e\u5f71\u9b54\u6765\u8bf4\u6700\u91cd\u8981\u7684\u5c31\u662f\u5237\u94b1\u901f\u5ea6\u4e86\uff0crose\u7279\u522b\u559c\u6b22\u5237\u91ce\uff0c\u73b0\u5728\u8fd9\u91cc\u6709n\uff081&lt;=n&lt;=50\uff09\u5806&quot;\u795e\u5947&quot;\u7684\u91ce\u602a\uff0c\u6740\u6b7b\u4e00\u6ce2\u91ce\u602a\u4f1a\u5f97\u5230Mi(-1000&lt;=Mi&lt;=1000)\u7684\u91d1\u5e01,\uff08\u6ca1\u529e\u6cd5\uff0c\u5c31\u662f\u8fd9\u4e48\u795e\u5947\uff09\uff0crose\u51fa\u4e86\u4e00\u628a\u795e\u5947\u7684\u9b54\u68d2\uff0c\u53ef\u4ee5\u8ba9\u5176\u4e2d\u6740\u6b7b\u4e00\u6ce2\u91ce\u602a\u5f97\u5230\u7684\u91d1\u5e01\u4e58\u4ee5k\uff08-100&lt;=k&lt;=100\uff09\uff0crose\u5fc5\u987b\u4f7f\u7528\u8fd9\u628a\u9b54\u68d2,\u73b0\u5728\u7531\u4e8erose\u8981\u53bb\u8d76\u56e2\u6218\u53ea\u80fd\u5237\u4e5f\u4e00\u5b9a\u8981\u5237m(m &lt;= n)\u5806\u91ce\u602a\uff0c\u4ed6\u60f3\u77e5\u9053\u5f71\u9b54\u6700\u591a\u53ef\u4ee5\u5237\u591a\u5c11\u91d1\u5e01\u3002", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\u7b2c\u4e00\u884c\u8f93\u5165\u4e09\u4e2a\u6574\u6570n, m, k\uff0c\u5206\u522b\u8868\u793a\u91ce\u602a\u5806\u6570\uff0c rose\u8981\u5237\u7684\u91ce\u602a\u6570\uff0c\u548c\u9b54\u68d2\u5bf9\u91ce\u602a\u7684\u4f5c\u7528\u6570\u3002\n\u7b2c\u4e8c\u884c\u8f93\u5165n\u4e2a\u6574\u6570\u4ee3\u8868\u6740\u6b7b\u6bcf\u5806\u91ce\u602a\u53ef\u4ee5\u5f97\u5230\u7684\u91d1\u5e01\u3002", "output_description": "\u8f93\u51farose\u7684\u5f71\u9b54\u6700\u591a\u53ef\u4ee5\u5237\u591a\u5c11\u91d1\u5e01\u3002", "samples": "[{\"input\": \"5 2 3\\n1 1 1 1 1\\n3 2 -2\\n1 1 1\", \"output\": \"4\\n2\"}]", "test_case_id": "2313", "hint": "\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u6837\u4f8b\u67093\u5806\u91ce\u602a\u91d1\u5e01\u5206\u522b\u4e3a1 1 1\uff0c\u4f60\u5fc5\u987b\u5bf9\u67d0\u5806\u91ce\u602a\u4f7f\u7528\u9b54\u6cd5\u68d2\uff0c\u56e0\u6b64\u91d1\u5e01\u53d8\u6210\u4e86 1 1 -2\\n\u7136\u800c\u4f60\u53ea\u9700\u8981\u62532\u5806\u91ce\u602a\uff0c\u5373\u4f60\u53ef\u4ee5\u9009\u62e9\u62531 1\u800c\u4e0d\u62532\uff08\u4e5f\u5c31\u662f\u8bf4\u4f60\u672a\u5fc5\u9700\u8981\u6253\u88ab\u9b54\u6cd5\u68d2\u51fb\u4e2d\u7684\u90a3\u4e00\u6ce2\u602a\uff09", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 247, "total_accepted_number": 46, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2314, "fields": {"title": "\u754c\u9762\u718a\u5e26\u4f60\u98de", "description": "\u51ac\u74dc\u8fd9\u5b66\u671f\u73a9\u5fc3\u8fc7\u91cd\u4e86\uff0c\u5148\u662f\u6253LOL\uff0c\u7136\u540e\u73a9\u624b\u6e38\uff0c\u4e00\u76f4\u90fd\u6ca1\u6709\u8ba4\u771f\u7684\u5b66\u4e60\u3002\u770b\u7740\u90a3\u4e9b\u56f0\u96be\u7684\u4e13\u4e1a\u8bfe\uff0c\u4ec0\u4e48\u5085\u91cc\u53f6\u53d8\u6362\u3001\u4ec0\u4e48\u8303\u5fb7\u8499\u884c\u5217\u5f0f\uff0c\u4e00\u70b9\u5934\u7eea\u90fd\u6ca1\u6709\uff0c\u5f88\u662f\u5934\u75bc\u3002<p></p>\u51ac\u74dc\u77e5\u9053\u754c\u9762\u718a\u662f\u4e00\u4e2a\u5b66\u9738\uff0c\u9664\u4e86\u6572\u9898\uff0c\u5c31\u662f\u5b66\u4e60\u3002\u4e8e\u662f\u51ac\u74dc\u53c8\u51c6\u5907\u53bb\u62b1\u754c\u9762\u718a\u7684\u5927\u817f\u3002\u754c\u9762\u718a\u662f\u4e00\u4e2a\u5f88\u9ad8\u50b2\u7684\u4eba\uff0c\u4ed6\u5f88\u559c\u6b22\u6570\u5b66\uff0c\u6240\u4ee5\u4ed6\u4e0d\u4f1a\u8ddf\u6570\u5b66\u4e0d\u597d\u7684\u51ac\u74dc\u76f8\u5904\uff0c\u9664\u975e\u505a\u51fa\u4ed6\u51fa\u7684\u9898\u76ee\u3002\u8fd9\u6b21\u7684\u9898\u76ee\u662f\u8fd9\u6837\u7684\uff1a<p></p>\u7ed9\u51fa\u4e09\u4e2a\u6d6e\u70b9\u6570A\u3001B\u3001C\uff0c\u800c\u4e14\u4f4d\u7f6e\u5df2\u7ecf\u56fa\u5b9a\u3002\u73b0\u5728\uff0c\u8bf7\u5728A\u3001B\u4e4b\u95f4\u548cB\u3001C\u4e4b\u95f4\u589e\u52a0\u4e00\u4e2a\u8fd0\u7b97\u7b26\u53f7\uff08\u52a0\u3001\u51cf\u3001\u4e58\u3001\u9664\uff09\uff0c\u4f7f\u5f97\u6539\u4ee3\u6570\u5f0f\u6709\u8fd0\u7b97\u7ed3\u679c\uff0c\u4e14\u662f\u6240\u6709\u60c5\u51b5\u7684\u6700\u5927\u503cX\u3002\u754c\u9762\u718a\u5185\u5fc3\u5584\u826f\uff0c\u53ea\u8ba9\u6c42\u51faX\u7684\u503c\u5c31\u597d\u3002<p></p>\u51ac\u74dc\u4e0d\u60f3\u671f\u672b\u6302\u79d1\uff0c\u53ef\u53c8\u505a\u4e0d\u51fa\u754c\u9762\u718a\u51fa\u7684\u9898\u76ee\u3002\u4e8e\u662f\u53c8\u6765\u62dc\u6258\u806a\u660e\u7684\u4f60\u4e86\u3002\u2192_\u2192<p></p>", "input_description": "\u591a\u7ec4\u6570\u636e\u8f93\u5165\uff0c\u6bcf\u7ec4\u6570\u636e\u4e00\u884c\uff0c\u6bcf\u884c\u662f\u4e09\u4e2a\u6d6e\u70b9\u6570A\u3001B\u3001C (0 <= A, B, C <= 200)\u3002", "output_description": "\u5728A\u3001B\u4e2d\u548cB\u3001C\u4e2d\u6dfb\u52a0\u64cd\u4f5c\u7b26\uff0c\u4f7f\u5f97\u4ee3\u6570\u5f0fA_B_C\u8fd0\u7b97\u7ed3\u679c\u6709\u610f\u4e49\u4e14\u4e3a\u6240\u6709\u60c5\u51b5\u7684\u6700\u5927\u503c\uff08\u8f93\u51fa\u4e24\u4f4d\u5c0f\u6570\uff09\uff0c\u5e76\u8f93\u51fa\u7ed3\u679c\u3002\uff08_\u4e0a\u53ea\u80fd\u586b\u5199\u2019+\u2019\u3001\u2019-\u2019\u3001\u2019*\u2019\u3001\u2019/\u2019\uff0c\u4e14\u4e0d\u80fd\u589e\u52a0\u62ec\u53f7\uff09\u3002", "samples": "[{\"input\": \"1 2 3\\n0 0 0\\n\", \"output\": \"7.00\\n0.00\\n\"}]", "test_case_id": "2314", "hint": "ANS1 = 1 + 2 * 3 = 7\\nANS2 = 0 + 0 + 0 = 0\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 275, "total_accepted_number": 48, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2315, "fields": {"title": "Ctrl + H", "description": "\tAs we know, \u2019Ctrl + H\u2019 is shortcut key of \u2018replace\u2019. In the problem, we define the \u2018replace\u2019 as replacing one character (all the same character) for another. Now, Junko receives a text and should do some \u2018replace\u2019 on it. She has finished the task, do you?<p></p>\tThe text consists of only lowercase English letters. <p></p>", "input_description": "Input contains multiple test cases. \nThe first line of each test case contains two integer n and m (1 <= n, m < 1000), the length of text, and the number of operation.\nThe second line is the text. Next m lines describe the \u2018replace\u2019, two letters.\n\n\n", "output_description": "Print a line, the text after finishing the operation.", "samples": "[{\"input\": \"4 1\\nguaa\\na b\\n10 2\\njavajavaja\\na b\\nb c\\n\", \"output\": \"gubb\\njcvcjcvcjc\\n\"}]", "test_case_id": "2315", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 354, "total_accepted_number": 92, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2316, "fields": {"title": "Alpha and Beta", "description": "Alpha and Beta are best friends and make company with each other all the time.<p></p>There is a time when a game called \u201cmake pairs\u201d gains much popularity. Alpha and Beta are very fond of it and like to invite you to play with them. <p></p>Given a string, which is simply composed of either A or B, they want to know how many AB pairs can Alpha and Beta find in that string. Can you help them?<p></p>A pair is legal if and only if A appears at first, and whether B is near to A is not required. In other words, B makes pair with A which is nearest before B, and they both can be used only once.<p></p>", "input_description": "There are a series of strings. The length of each string is less than 1000.", "output_description": "For each case, if there is none legal pair that they can find, print -1. Otherwise, print the number of them.\nPlease note the output format.\n", "samples": "[{\"input\": \"BA\\nAABB\\nBAB\\n\", \"output\": \"Case #1: -1\\nCase #2: 2\\nCase #3: 1\\n\"}]", "test_case_id": "2316", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 512, "total_accepted_number": 69, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2317, "fields": {"title": "Ranking Problem", "description": "If you are a LOLer, then you must be very familiar with LPL league. In the spring of 2016 LPL league game to take the points system, if a team won in BO3, then increase 1 point, failure does not buckle points, followed by each team based on the standings, the higher the ranking the higher the points, the same points if the same rank.Then only if there are n teams participating, the total number of cases the ranking in the game?<p></p>For example, 2 teams ranking has 3 ways.<p></p>1. Both first<p></p>2. team A first and team B second<p></p>3. team B first and team A second<p></p>", "input_description": "Input consists of several datasets. Each of them has a single integer number n (1 \u2264 n \u2264 1000) \u2015 the number of LPL teams.", "output_description": "For each case, print the number of cases the ranking in the game. The result can be very large, print the result modulo 2016515.", "samples": "[{\"input\": \"1\\n3\\n1000\\n\", \"output\": \"1\\n13\\n1878195\\n\"}]", "test_case_id": "2317", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 90, "total_accepted_number": 19, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2318, "fields": {"title": "Juju's lessons", "description": "Juju is a child who enjoys learning. she has two majors and many courses have time conflict.As a child who love to learn, she wants to take lessons as many as she can. There are each lesson&#039;s start time and end time. She wants to know how many  lessons can be taked after she master the replication.", "input_description": "Input contains multiple test cases. \nThe first line of each test case contains one interger n(1 <= n <= 100),the numbers of lesson.\nNext n lines have two integers a, b. (1 <= a < b <= 1000),the start time and the end time of each lesson.", "output_description": "For each test case, Print a line, the numbers of lessons she can take.", "samples": "[{\"input\": \"2\\n1 3\\n4 5\\n3\\n1 4\\n3 5\\n2 3\", \"output\": \"2\\n2\"}]", "test_case_id": "2318", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 220, "total_accepted_number": 46, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2319, "fields": {"title": "Piece of Cake", "description": "The annual neonatal trials will start next week, at the same time, all old guys of the ACM teams want to reward all M students who work hard in the match. So, we buy N cakes which are of different radius. Consider the height of each cake is 1.<p></p>However, Master Ye consider that every student should assign to the equal size of cake, which means every cake assigned to students should be the same volume. Also, he mentions, one student should assign only one piece of cake.<p></p>Master Ye want you to calculate the maximum volume that every student can get. Can you help him figure out this problem?<p></p>", "input_description": "The first line contain the number of test cases,no more than 20.\nThe second line contain two integers,1 \u2264 N, M \u2264 65536 which means the number of cakes and students\nThen following one line contain N integers represent each cake\u2019s radius,and 1 \u2264 r \u2264 65536.\n", "output_description": "For each test case, output one line with the largest possible volume V such that me and my friends can all get a pie piece of size V. The answer should be given as a floating point number with an absolute error of at most 1e&#8722;4.", "samples": "[{\"input\": \"3\\n3 3\\n4 3 3\\n1 24\\n5\\n10 5\\n1 4 2 3 4 5 6 5 4 2\", \"output\": \"Case#1: 28.274\\nCase#2: 3.272\\nCase#3: 50.265\\n\"}]", "test_case_id": "2319", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 87, "total_accepted_number": 21, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2320, "fields": {"title": "How many primes", "description": "\tA prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, 5 is prime because 1 and 5 are its only positive integer factors, whereas 6 is composite because it has the divisors 2 and 3 in addition to 1 and 6.<p></p>\tPrime looks so lonely because it only has a few factors. That is the reason Junko show special preference to the prime. Now, She wants to know how many primes in [l, r].<p></p>", "input_description": "Input contains multiple test cases. \nEach test case contains two integers l, r. (1 <= l <= r <= 1,000,000)\n", "output_description": "For each test case, Print a line, the numbers of prime in [l, r].", "samples": "[{\"input\": \"1 1\\n1 10\\n233 666\\n\", \"output\": \"0\\n4\\n71\\n\"}]", "test_case_id": "2320", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 410, "total_accepted_number": 23, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2321, "fields": {"title": "Yeahpeng's inequality", "description": "Yeahpeng is not good at inequality. Unfortunately, there are many inequalities in his homework and they make him be in trouble. Cornered yeah wants your help.<p></p>There are n inequalities in total and the form is:<p></p>\tOp x<p></p>Op is one of {&gt;=, &gt;, =, &lt;, &lt;=}, x is an integer. What he wants to know is how many inequalities can be satisfied at most in the first i inequalities.<p></p>", "input_description": "\tInput contains multiple test cases.\n\tIn each test case, the first line is a integer n(1 <= n <= 50,000)\n\tThe following n line is the inequalities [op x].\n", "output_description": "\tFor each test case print n lines. An integer in each line, the maximum numbers can be satisfied in the first i inequalities.", "samples": "[{\"input\": \"5\\n<= 10\\n< 9\\n> 6\\n>= 7\\n= 8\\n\", \"output\": \"1\\n2\\n3\\n4\\n5 \\n\"}]", "test_case_id": "2321", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 37, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2322, "fields": {"title": "Catfish\u2019s Box", "description": "Catfish is a person who is very curious , he is good at finding strange things. Recently, he found a strange box in SWJTU. It was a treasure chest which contains a great gift. However, it\u2019s extremely difficult for people to open it. There is a row of switches in the front of the box, and a screen on the top surface of the box. Only in the way of the state of the switches toggling to the state which the screen displays, can we open the box. The following are the rules of toggling switch: The rightmost switch can toggling states discretionarily , but you should meet both two conditions when you want to toggle the Nth switch from the right. 1. The n-1-th switch must be open 2.the first switch to the n-2th switches must be closed. So the question is that how many times the switches will be toggled in order to open the box?", "input_description": "Multiply test cases.\nFor each case:\nThe first line of the input contains integer n ? the number of the switches\nThe second line of the input contains a binary code ? the begin state of the switches on the box.\nThe third line of the input also contains a binary code ? the end state of the switches on the screen\n(1<=t<=1000,1<=n<=500)", "output_description": "For each test case print an integer,the minimum times to open the bow. \n", "samples": "[{\"input\": \"3\\n110\\n101\\n\", \"output\": \"2\"}]", "test_case_id": "2322", "hint": "110  -&gt;  111  -&gt;  101\\nTotal : 2 Steps\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 26, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2323, "fields": {"title": "Tickets", "description": "\tBamboo want to buy a ticket cost P. she can buy the ticket by app and get a concession to D. At the same time, she can appoint an agent and have different discount. Please tell her what kind of way is most economical and the minimum cost. Print the first way if there is more than one possibility.", "input_description": "\tInput contains multiple test cases. \n\tThe first line of each test contains two integers P, D, n. (1 <= P, D <= 1e9, 1 <= n <= 1e5), the ticket price, the concession of app and the number of agent.\n\tThe second n line contains a real number a[i], the discount of i th agent.\n", "output_description": "\tFor each test case, print a line. Print \u201cAPP\u201d if buy ticket by app or print the agent\u2019s order if buy ticket by appoint an agent. And an integer means the minimum cost, keeping two decimal places.", "samples": "[{\"input\": \"600 20 3\\n0.01\\n0.03\\n0.02\\n600 10 3\\n0.01\\n0.03\\n0.02\\n\", \"output\": \"APP 580.00\\n2 582.00\\n\"}]", "test_case_id": "2323", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 233, "total_accepted_number": 32, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2324, "fields": {"title": "Wave string", "description": "There is a kind of string called \u201cwave string\u201d.  If str is made as s1s2s3...sL-1sLsL-1sL-2...s2s1s2s3...., we will call it \u201cwave string\u201d and s1s2s3...sL and sLsL-1...s1 are its waves and they must appear alternately.<p></p>\tFor example,  \u201cabc\u201d, \u201cabcba\u201d, \u201cabcbabc\u201d,\u201dabcbabcba\u201d... are wave strings. But they have different number of wave, \u201cabc\u201d have 1 wave, \u201cabcba\u201d have 2 waves(abc,cba), \u201cabcbabc\u201d have 3 waves(abc,cba,abc).<p></p>\tNow, s is a string of lenth n(s1s2s3s4s5...sn), and str is a wave string which is a substring of s(sisi+1si+2...si+m-1) . We have known i and L and we want to know the maxium number of wave str have.<p></p>", "input_description": "\tInput contains multiple test cases. \n\tEach test case: \n\t\tThe first line is a string s (1<= |s| <= 10^6)\n\t\tThe second line is a integer k (1 <= k <= 10^5)\n\t\tThe next k lines, each line is i and L, (1<= i <=|s|,2 <= L <=10^4).\n", "output_description": "\tk lines, each lines is  the maxium number of wave str have.", "samples": "[{\"input\": \"aabaab\\n2\\n1 2\\n1 3\\nabcbabcbabc\\n5\\n1 2\\n1 3\\n3 2\\n3 3\\n10 3\\n\", \"output\": \"1\\n2\\n1\\n5\\n1\\n4\\n0\\n\"}]", "test_case_id": "2324", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 30, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2325, "fields": {"title": "The road ahead to be boundless", "description": "We will find life is difficult and run into a stone wall sometimes. But we must go ahead because there is no way to turn back. Recently in the last Labor Day, UsedRose and Yeah with some friends went to park. Unfortunately they were trapped by a storm. So they must drive back to school. But they only have one car and the car can take two people at most. The important thing is that the car\u2019s speed depend on the person who is the slowest in the car. They are a team, so they ask for your help to let all people go back to school as soon as possible.", "input_description": "Input contains multiple test cases. \nEach test case contains an integer n (1<=N<=10000),m(999 <= m <= 999999),Said a total of N people to cross the river.and the length of river is m.\nNext row contains n integers ni, show the i-th people\u2019s speed that he can accept max .(1 <= ni <= 1000)", "output_description": "For each test case, Print a line, the times of everyone can go back to school(round up to an integer) and make as soon as possible.", "samples": "[{\"input\": \"3 999\\n1 10 100\\n2 9999\\n1 1\\n4 30\\n30 15 6 5\", \"output\": \"1109\\n9999\\n13\"}]", "test_case_id": "94f6b5e87d527a1ae9b60415c40b5a7f", "hint": "For the first input, the strategy is that firstly 3-th people goes back to school with 2-th people cost 99.9 then 3-th people return to park cost 9.99,finally go back to school with 1-th people costs 999.Sum of the time is 1108.89,so the output is 1109.\\nfor the thrid input:\\n30 15 -&gt; (30/15 = 2)\\n&lt;-30 (30/30 = 1)\\n6 5 -&gt;(30/5 = 6)\t\\n&lt;-15(30/15 = 2)\\n30 15 -&gt;(30/15 = 2)\\nTsum = 2 + 1 + 6 + 2 + 2 = 13", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-28T03:56:43.422Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 164, "total_accepted_number": 20, "difficulty": 1, "source": "null", "tags": [10]}}, {"model": "problem.problem", "pk": 2326, "fields": {"title": "Escape from the earth", "description": "\tIt is said that the doomsday will come and earth would be destroyed. n people want to escape from earth. There are m stars can be arrived. Moreover, some of them are suitable for a particular person. Within the limit of resource, i th star\u2019s maximum capacity is ai. Can you find a feasible solution to make everyone arrive a star suit him? ", "input_description": "\tInput contains multiple test cases.\n\tThe first line of each test contains two integers n, m. (1 <= n <= 1e5, 1 <= m <= 10), the number of people and the number of stars.\n\tThe second n line contains m integers k [i, j], k [i, j] = 1 means star j suit person i and k [i, j] = 0 means unsuitable.\n\tThe last line have m integer a[i] (1 <= a[i] <= 1e5), meaning star i \u2019s maximum capacity is a[i].\n", "output_description": "\tFor each test case, Print a line \u201cYES\u201d if everyone can arrive a star suit him and \u201cNO\u201d if can\u2019t. ", "samples": "[{\"input\": \"1 1\\n1\\n1\\n\\n2 2\\n1 0\\n1 0\\n1 1\\n\", \"output\": \"YES\\nNO\\n\"}]", "test_case_id": "2326", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 38, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2327, "fields": {"title": "King\u2019s Knight", "description": "Long time ago, there was a powerful magic kingdom. The king led his Knights to go on an expedition in order to acquire more treasure. When they came back, the king decided to reward the Knights who fought for him.<p></p>The king declared that every Knight would gain A coins during the first year. Every year after the first year the gold they would gain are Q times as many as the last year. Could you please help the Knights count how many coins would they gain N years later\uff1f(The answer must be very large, so give the answer module M)<p></p>(1&lt;=T&lt;=50,1&lt;=A&lt;=500,1&lt;=Q&lt;=500,2&lt;=M&lt;=10^9+7,1&lt;=P&lt;=1000)<p></p>", "input_description": "The first line of the input contains integer t ? the number of the test cases\nFor each case:\nThe first line of the input contains three integers A, Q, M ? the gold of the first year, the number of the multiple and the modulus.\nThe second line of the input contains a P-digits Big Integer n ? the number of years\n", "output_description": "For each case there must be an integer. The answer that module M.", "samples": "[{\"input\": \"2\\n1 2 100\\n3\\n1 3 101\\n3\\n\", \"output\": \"7\\n13\\n\"}]", "test_case_id": "2327", "hint": "(1 + 2 + 4) mod 100 = 7", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 152, "total_accepted_number": 3, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2328, "fields": {"title": "DaVinci code", "description": "DaVinci Code is a famous novel which is written by Dan Brown. And a DaVinci Code Tube is a lock that has five code wheels. Only you put the code wheels into a right order, could you open the lock. Catfish is a person who is very curious. So after a few days, he finally made one, which is different from that one in the novel. The tube he made has only four Alphabet code wheels, and each wheel only contains eight characters in upper case. They are \u2018A\u2019,\u2019B\u2019,\u2019C\u2019,\u2019D\u2019,\u2019E\u2019,\u2019F\u2019,\u2019G\u2019 and \u2018H\u2019. In order to open the code tube, you have to put the code wheel to the right order. Each time, you could add or minus 1 to any character. When add 1 to \u2018H\u2019, the character will change to \u2018A\u2019 and minus 1 to \u2018A\u2019, the character will change to \u2018H\u2019. You could also exchange the character with its neighbor. Each action will cost one step. Catfish wants to know that how can we use minimum number of steps to open the code tube.<p></p>(1&lt;=t&lt;=20)<p></p>", "input_description": "The first line of the input contains integer t ? the number of the test cases\nFor each case:\nThe first line of the input contains four characters ? the beginning of the code tube\nThe second line of the input contains four characters ?the password of the code tube\n", "output_description": "For each case there must be an integer.  The minimum number of steps", "samples": "[{\"input\": \"2\\nAAAA\\nAAAB\\nAAAH\\nBAHA\\n\", \"output\": \"1\\n2\\n\"}]", "test_case_id": "2328", "hint": "AAAZ-&gt;BAAZ-&gt;BAZA\\nTotal:2 steps\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 61, "total_accepted_number": 12, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2329, "fields": {"title": "Legend of the Galactic Heroes", "description": "\t\u201cThere are something can be done, something can\u2019t.\u201d<p></p>\tIn 799 years of The Milky Calendar, Yang Wen-li commanded the Iserlohn Fleet to defense the Reinhard\u2019s attack. Yang deeply understands the enemy is stronger than his fleet. The idea here is to avoid a head on battle with a strong enemy, and instead strike at his weakness elsewhere. The emperor fleet was divided into n parts, named 1,2,3\u2026n from left to right. The numbers of warships in i th fleet is ai. Similarly, Yang sent out n fleets and the numbers is bi.(|ai|,|bi| &lt;= 1e4)<p></p>\tM messages formatted \u201cl r k\u201d about battlefield were sent to Flagship Hyperion and they are sorted in time-ordered. The massage expresses \u201ck is the sum of emperor\u2019s fleets subtract the sum of Yang\u2019s in [l,r]\u201d.But the information passing sometimes make mistakes. The task is checking messages and tell Yang how many conflicts happen(You can ignore the messages have conflicts with previous messages). The fate of Yang\u2019s Fleet depends on you, go for it!<p></p>", "input_description": "\tInput contains multiple test cases.\n\tThe first line of each test contains two integers n, m. (1 <= n <= 1e5,1 <= m <= 1e4)\n\tThe following m lines have three integer l, r, k (1 <= l <= r <= n, |k| <= 1e9)\n", "output_description": "\tFor each test case, Print a integer, the numbers of conflicts.", "samples": "[{\"input\": \"4 3\\n1 2 1\\n3 4 2\\n1 4 2\\n4 4\\n1 1 1\\n1 2 2\\n1 3 3\\n1 4 4\\n\", \"output\": \"1\\n0\\n\"}]", "test_case_id": "2329", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 4, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2330, "fields": {"title": "White album 2", "description": "\t\u201cWhy is it go? ...For the first time having a person I love, and a person who can be lifetime friend. Two piece of happiness come together, and they bring more happiness to me. What I get should be wonderful time like a dream. But why is it go?\u201d <p></p>The \u201chappiness\u201d has a value called \u201cfavor degree\u201d. One piece of happiness can bring more happiness. Unfortunately, Touma can only choose one of them. She can choose different happiness to get if she gets the same happiness twice or more. Touma knows the happiness\u2019 \u201cfavor degree\u201d and some information meaning happiness A can brings happiness B. How much \u201cfavor degree\u201d Touma can get? And, if Touma gets the same happiness more than once, the \u201cfavor degree\u201d will only be counted once. At first time Touma have the 1th Happiness.<p></p><p></p>", "input_description": "\tInput contains multiple test cases. \n\tThe first line of each test contains two integers n, m. (1 <= n <= 1e4, 1 <= m <= 1e5),n is the number of happiness, m is the number of information.\n\tThe second line contains n integers v[i], the \u201cfavor degree\u201d of i th happiness.(0 < v[i] <= 1e4)\n\tThe following m lines have three integer a, b (1 <= a, b <= n), meaning happiness a can bring happiness b.\n", "output_description": "\tFor each test case, Print a integer, the maximum \u201cfavor degree\u201d Touma can get.", "samples": "[{\"input\": \"6 6\\n2 4 3 5 4 4\\n1 2\\n2 4\\n1 3\\n3 5\\n3 6\\n6 3\\n\", \"output\": \"13\"}]", "test_case_id": "2330", "hint": "1-&gt;3-&gt;6-&gt;3-&gt;5", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 6, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2331, "fields": {"title": "Put an elephant into a refrigerator", "description": "Yesterday when i had a talk with my bamboo, he said that he went hunting recently and harvest the highly. So he wants to have a party, but he has too much dead elephant. Fortunately,he also has many refrigerators, and he want to put everyone elephant into a refrigerator. Elephants were put on an X-coordinate axis. The i-th elephant&#039;s coordinate is Xi meters. Bamboo can only put an elephant into a refrigerator once, and his start position is the point in the x-coordinate axis. Putting an elephant into a refrigerator does not cost time, but every elephant will decay if it isn\u2019t in the refrigerator, and the i-th elephant has a decay speed vi.<p></p>Now he wants to let the sum of elephants decay is minimum. Would you please calculate the minimum decay of all elephants?<p></p>", "input_description": "Input contains multiple test cases. \nEach test case contains two integers N (1<= N <= 2000),V(V > 0),X(x > 0),represents the number of elephants, the speed and start position of bamboo.\nThen N lines followed. Each line contains two integers Xi ( Xi >= 0 ), Yi(Yi >=0),which showed i-th elephant\u2019s position and decay speed.", "output_description": "For each test case, Print a line, the sum of decay that is minimum.", "samples": "[{\"input\": \"1 1 1\\n1 1\\n2 1 0\\n1 1\\n2 2\\n\", \"output\": \"0\\n5\\n\"}]", "test_case_id": "0c2b002777cfb7df74170d22713a1cae", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-28T03:53:43.691Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 15, "total_accepted_number": 4, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 2332, "fields": {"title": "Buy buy buy", "description": "    yeahpeng like apple very much. One day, he comes to the street of apple and so many watermelons which make him want to &quot;buy buy buy&quot;. But, he cant not buy all because of money. So, he makes a rule to buy watermelons.<p></p>    There are n stores on the street. yeahpeng will start at the first store and end in the last store. And he will buy one or zero watermelon in every store and never turn back.  <p></p>    Every watermelon has its price p and weight w. If the price of previous in jth store he buy is pj and the next one in ith store is pi, there mush be i &gt; j and pi - ki &lt;= pj &lt;= pi + ki, the first watermelon he could buy in any store.<p></p>    yeahpeng want to get the maximum sum of weight.<p></p>", "input_description": "\tInput contains multiple test cases. \n\tEach test case: \n    Begin with an integer n(1 <= n <= 30000), \n    n lines follow, each with three integers: pi wi ki (1 <= pi <= 10^10, 1 <= wi <= 10^6, 1 <= ki <= 10^10)\n", "output_description": "    One line: the maximum sum of weight", "samples": "[{\"input\": \"3\\n2 2 1\\n6 3 1\\n5 3 3\\n6\\n1 1 1\\n2 1 1\\n3 2 1\\n1 2 1\\n2 2 1\\n3 2 1\\n\", \"output\": \"6\\n8\\n\"}]", "test_case_id": "2332", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 18, "total_accepted_number": 2, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2333, "fields": {"title": "\u7f57\u5927\u5e08\u89e3\u6570\u5b66", "description": "\u76f8\u4fe1\u6211\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2aC\u8bed\u8a00\u5165\u95e8\u9898\u3002<p></p>\u7f57\u5927\u5e08\u7684C\u8bed\u8a00\u671f\u672b\u8003\u8bd5\u9047\u5230\u4e86\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\u7ed9\u51fa\u4e00\u4e2a\u4e0d\u5b9a\u65b9\u7a0b111x+112y= N,\u6c42\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u6b63\u6574\u6570x,y,\u5e76\u6c42\u51fa\u4ed6\u4eec\u6700\u5927\u516c\u7ea6\u6570\u7684\u548c\u3002\u7f57\u5927\u5e08\u5199\u4e86\u597d\u4e45\u90fd\u662fTLE\uff08\u8d85\u65f6\uff09,\u6240\u4ee5\u4ed6\u6302\u4e86\u4e0a\u673a\u3002\u8003\u8bd5\u7ed3\u675f\u540e\uff0c\u4ed6\u627e\u5230\u4e86\u4f60\uff0c\u4f60\u80fd\u5e2e\u4ed6\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f<p></p>", "input_description": "\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2aT,  (T <= 10),\u4ee3\u8868\u6d4b\u8bd5\u7ec4\u6570\n\u4e0b\u9762T\u884c,\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570N\uff08N <= 1000000000\uff09\n", "output_description": "\u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u5b9e\u4f8b\uff0c \u8f93\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684x,y\u7684\u6700\u5927\u516c\u7ea6\u6570\u7684\u548c.", "samples": "[{\"input\": \"2\\n23\\n1000\\n\", \"output\": \"0\\n1\\n\"}]", "test_case_id": "2333", "hint": "\u5bf9\u4e8e23\uff0c\u6211\u4eec\u627e\u4e0d\u5230\u6ee1\u8db3\u6761\u4ef6\u7684x\uff0cy.\\n\u5bf9\u4e8e1000\uff0c\u6211\u4eec\u53ef\u4ee5\u6709111*8 + 112*1 = 1000\\n\u800cgcd(8,1) = 1,\u6240\u4ee5\u7ed3\u679c\u4e3a1.", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 209, "total_accepted_number": 27, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2334, "fields": {"title": "\u7f57\u5927\u5e08\u4e0e\u6587\u660e", "description": "\u6587\u660e\u662f\u4e00\u6b3e\u4e0d\u9519\u7684\u6e38\u620f\u51fa\u6765\u4e86\uff0c\u6821\u961f\u6c89\u8ff7\u4e8e\u6e38\u620f\u4e0d\u80fd\u81ea\u62d4\u7684\u7f57\u5927\u5e08\u81ea\u7136\u4e5f\u4f1a\u5438\u4e24\u53e3\u3002\u6587\u660e\u8fd9\u4e2a\u6e38\u620f\u91cc\u9762\u4e00\u4e2a\u91cd\u8981\u7684\u73af\u8282\u5c31\u662f\u7ef4\u6301\u4e8e\u4ed6\u56fd\u4e4b\u95f4\u7684\u5916\u4ea4\uff0c\u4f46\u662f\u6211\u4eec\u7684\u7f57\u5927\u5e08\u56e0\u4e3a\u6ca1\u6709\u5f97\u5230\u6f02\u4eae\u7684\u5927\u59d0\u59d0\uff0c\u5fc3\u60c5\u4e0d\u723d\uff0c\u4e00\u4e0b\u5ba3\u6218\u4e864\u4e2a\u56fd\u5bb6\uff0c\u7ed3\u679c\u88ab\u654c\u56fd\u52c7\u58eb\u56f4\u57ce\uff0c\u57ce\u5e02\u94c1\u8def\u906d\u5230\u4e25\u91cd\u7834\u574f\uff0c\u4ed6\u9700\u8981\u91cd\u5efa\u94c1\u8def\uff0c\u4fee\u5efa\u94c1\u8def\u662f\u9700\u8981\u94b1\u6765\u7ef4\u62a4\u7684\uff0c\u5f88\u660e\u663e\uff0c\u6211\u4eec\u7684\u5927\u5e08\u4e3a\u4e86\u4fdd\u62a4\u81ea\u5df1\u4ea4\u4e86\u4e00\u5927\u7b14\u8d4e\u91d1\uff0c\u94b1\u4e0d\u591f\u4e86\uff0c\u6240\u4ee5\u7f57\u5927\u5e08\u7684\u6bcf\u4e2a\u57ce\u5e02\u6700\u591a\u53ea\u80fd\u548c\u5176\u5b83\u7684k\u5ea7\u57ce\u5e02\u4fee\u5efa\u94c1\u8def\u3002\u73b0\u5728\uff0c\u7f57\u5927\u5e08\u6709n\u4e2a\u57ce\u5e02\uff0c\u6700\u591a\u80fd\u4fee\u5efa\u51e0\u6761\u94c1\u8def\uff0c\u4ece\u800c\u4fdd\u8bc1\u4efb\u610f\u4e24\u4e2a\u57ce\u5e02\u90fd\u80fd\u591f\u7ecf\u7531\u94c1\u8def\u76f4\u63a5\u6216\u8005\u95f4\u63a5\u8fde\u901a\uff1f\u6211\u4eec\u8ba4\u4e3a\u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u94fa\u8bbe\u591a\u6761\u94c1\u8def\u662f\u4e0d\u5408\u6cd5\u7684\u3002\u5982\u679c\u65e0\u8bba\u600e\u4e48\u4fee\u5efa\u90fd\u4e0d\u80fd\u8fde\u901a\uff0c\u5219\u8f93\u51fa0\u3002<p></p>", "input_description": "\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6570\u636e,\u8bf7\u8bfb\u5230\u6587\u4ef6\u5c3e\u3002\n\u6bcf\u7ec4\u6570\u636e\u5305\u542b\u4e00\u884c2\u4e2a\u6574\u6570n,k\uff0c\uff081 <= n <= 10000, 0 <= k <= 10000\uff09,\u5206\u522b\u8868\u793a\u57ce\u5e02\u7684\u4e2a\u6570\u548c\u6bcf\u4e2a\u57ce\u5e02\u6700\u591a\u76f4\u63a5\u76f8\u8fde\u7684\u94c1\u9053\u6570\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u8f93\u51fa\uff0c\u8f93\u51fa\u9898\u76ee\u6240\u6c42\u7684\u94c1\u8def\u6761\u6570\u3002", "samples": "[{\"input\": \"5 3\\n5 0\\n\", \"output\": \"7\\n0\\n\"}]", "test_case_id": "2334", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2017-04-26T12:33:23.252Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 81, "total_accepted_number": 14, "difficulty": 1, "source": "NULL", "tags": [10]}}, {"model": "problem.problem", "pk": 2335, "fields": {"title": "\u6570\u5b57\u6c42\u548c", "description": "\u7ed9\u4f60\u4e00\u4e2aN*N\u7684\u6570\u5b57\u77e9\u9635\uff0c\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\u90fd\u662f\u7531\u957f\u5ea6\u4e3aN\u5b57\u7b26\u4e32\u7ec4\u6210\u3002<p></p>\u6bd4\u59823*3\u7684\u6570\u5b57\u77e9\u9635\uff1a<p></p>123<p></p>456<p></p>789<p></p>\u5bf9\u4e8e\u7b2c\u4e00\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u51716\u4e2a\u6570\u5b57\uff1a1,2,3,12,23,123.<p></p>\u5bf9\u4e8e\u7b2c\u4e00\u5217\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5f97\u52306\u4e2a\u6570\u5b57\uff1a1,4,7,14,47,147.<p></p>\u4f60\u7684\u4efb\u52a1\u6c42\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\u6240\u5f97\u5230\u7684\u6570\u5b57\u7d2f\u52a0\u8d77\u6765\u5f97\u5230\u7684\u603b\u548c\u3002<p></p>", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8bf7\u8bfb\u5230\u6587\u4ef6\u5c3e\u3002\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570N\uff081<=N<=1000\uff09\n\u5728\u63a5\u4e0b\u6765\u7684N\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u7684\u5b57\u7b26\u4e32\u3002\n", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u8f93\u5165\uff0c\u8f93\u51fa\u9898\u76ee\u6240\u6c42\u7684\u548c\uff0c\u8f93\u51fa\u7684\u6570\u503c\u53ef\u80fd\u5f88\u5927\uff0c\u6240\u4ee5\u53ea\u8981\u8f93\u51fa\u7b54\u6848\u6a211,000,000,007(1e9+7)\u7684\u7ed3\u679c\u3002\n", "samples": "[{\"input\": \"3\\n123\\n456\\n789\\n\", \"output\": \"2784\"}]", "test_case_id": "2335", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 89, "total_accepted_number": 13, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2336, "fields": {"title": "MAXHP", "description": "\u5c0f\u660e\u6b63\u5728\u73a9\u4e00\u4e2a\u6e38\u620f\uff0c\u5728\u4ed6\u9762\u524d\u6709n\u4e2a\u679c\u5b9e\uff0c\u6bcf\u4e2a\u679c\u5b9e\u4f1a\u4ee4\u4ed6\u589e\u52a0\u6216\u6216\u51cf\u5c11ai\u70b9HP\uff08a1\uff0ca2\u2026..an\uff09\uff0c\u8fc7\u7a0b\u4e2d\u4e00\u65e6HP\u5c0f\u4e8e\u7b49\u4e8e0\uff0c\u4ed6\u5c31\u4f1a\u6b7b\u4ea1\u3002\u8d77\u59cbHP\u4e3aL, \u800c\u4ed6\u7684HP\u4e0a\u9650\u4e3aM(\u5f53\u4f60\u6709M-1\u70b9HP\u7684\u65f6\u5019\u4f60\u53ef\u4ee5\u5403\u4e00\u4e2aai=2\u7684\u679c\u5b9e\uff0c\u4f46\u6b64\u65f6\u4f60\u7684HP\u4e0d\u662fM+1\u800c\u662fM)\u3002\u4ed6\u73b0\u5728\u8981\u4ee5\u67d0\u4e00\u987a\u5e8f\u5403\u5b8c\u679c\u5b9e\uff0c\u4ed6\u60f3\u77e5\u9053\u5728\u5b58\u6d3b\u7684\u524d\u63d0\u4e0b\uff0c\u6240\u5269\u7684\u6700\u5927HP\u4e3a\u591a\u5c11\u3002<p></p>", "input_description": "\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8bf7\u8bfb\u5230\u6587\u4ef6\u5c3e\u3002\n\u6bcf\u7ec4\u6570\u636e\uff0c\u7b2c\u4e00\u884c n,L,M (1 <= n <= 20, 1 <= L <= 100000, L <= M <= 1000000)\u5176\u4e2d n > 15\u7684\u6570\u636e\u7ec4\u6570\u4e0d\u8d85\u8fc75\u7ec4\u3002\n\u6bcf\u7ec4\u6570\u636e\u7684\u7b2c\u4e8c\u884c\u5171n\u4e2a\u6570a1,a2\u2026\u2026an. (-1000000 <= ai <= 1000000)\n", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\u3002\u8f93\u51fa\u4e00\u884c\u3002\u5982\u679c\u8fc7\u7a0b\u4e2d\u6b7b\u4ea1\u5219\u8f93\u51fa-1\u5426\u5219\u8f93\u51fa\u6240\u5269\u6700\u5927\u7684HP\u3002\n", "samples": "[{\"input\": \"5 3 6\\n-5 4 3 4 2\\n5 10 10\\n4 -2 -2 -3 0\\n5 4 7\\n1 -5 4 -4 1\\n\", \"output\": \"6\\n7\\n1\\n\"}]", "test_case_id": "2336", "hint": "\u5bf9\u4e8e\u7b2c\u4e09\u7ec4\u6837\u4f8b\uff0c\u4ed6\u5403\u679c\u5b9e\u7684\u987a\u5e8f\u53ef\u4ee5\u662f\uff1a1 -&gt; -4 -&gt; 4 -&gt; 1 -&gt; -5\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 4000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 63, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2337, "fields": {"title": "\u51ac\u74dc\u548c\u754c\u9762\u718a\u6700\u540e\u7684\u6218\u5f79", "description": "\u51ac\u74dc\u548c\u754c\u9762\u718a\u4e00\u8d77\u73a9\u4e86\u56db\u5e74\uff0c\u7ec8\u4e8e\u8981\u6bd5\u4e1a\u4e86\u3002\u4f46\u662f\u8eab\u4e3a\u961f\u53cb\u7684\u4e24\u4e2a\u4eba\u4ece\u6765\u6ca1\u6709\u540c\u573a\u7ade\u6280\u8fc7\u3002<p></p><p></p>\u8fd9\u5929\uff0c\u754c\u9762\u718a\u7528\u4ed6\u9ad8\u8d85\u7684\u667a\u5546\u6765\u78be\u538b\u51ac\u74dc\u3002\u4ed6\u62ff\u51fa\u4e86\u5f88\u591a ICPC \u7684\uff08\u5706\u5f62\uff09\u5956\u724c\uff0c\u548c\u51ac\u74dc\u8bf4\uff1a\u201c\u6211\u4eec\u6765\u73a9\u4e00\u4e2a\u6e38\u620f\u4e00\u51b3\u9ad8\u4e0b\u3002\u6211\u8fd9\u91cc\u6709\u8db3\u591f\u591a\u7684\u5956\u724c\uff0c\u6211\u4eec\u6bcf\u4e2a\u4eba\u8f6e\u6d41\u5f80\u684c\u5b50\u4e0a\u653e\u4e00\u679a\uff0c\u6bcf\u4e00\u679a\u4e0d\u80fd\u91cd\u53e0\uff0c\u5982\u679c\u8c01\u4e0d\u80fd\u518d\u653e\u4e0b\u5956\u724c\uff0c\u90a3\u4e48\u8c01\u5c31\u8f93\u4e86\u3002\u201d<p></p><p></p>\u8fd8\u6ca1\u7b49\u51ac\u74dc\u53cd\u5e94\u8fc7\u6765\uff0c\u754c\u9762\u718a\u5c31\u5728\u684c\u5b50\u4e2d\u592e\u653e\u4e86\u4e00\u5757.....\uff08\u5f53\u7136\u8fd9\u4ec5\u4ec5\u662f\u6e38\u620f\u89c4\u5219\uff0c\u5f88\u6709\u53ef\u80fd\u754c\u9762\u718a\u7684\u7b2c\u4e00\u679a\u5956\u724c\u5c31\u65e0\u6cd5\u653e\u5728\u684c\u5b50\u4e0a\uff09<p></p><p></p>\u5047\u8bbe\u51ac\u74dc\u548c\u754c\u9762\u718a\u90fd\u8db3\u591f\u806a\u660e\uff0c\u7ed9\u51fa\u684c\u5b50\u7684\u957f\u5bbd\u4ee5\u53ca\u5956\u724c\u7684\u534a\u5f84\uff0c\u754c\u9762\u718a\u653e\u7b2c\u4e00\u679a\u5956\u724c\u3002\u8bf7\u4f60\u9884\u6d4b\u8c01\u5c06\u4f1a\u8d62\u5f97\u8fd9\u6b21\u6e38\u620f\u3002<p></p>", "input_description": "\u7b2c\u4e00\u884c\u5305\u62ec\u4e00\u4e2a\u6b63\u6574\u6570 N (1 <= N <= 10000)\uff0c\u4ee3\u8868\u63a5\u4e0b\u6765\u6709 N \u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\u63a5\u4e0b\u6765 N \u884c\u6570\u636e\u4e2d\uff0c\u6bcf\u4e00\u884c\u5305\u62ec\u4e09\u4e2a\u6b63\u6574\u6570 A, B, N (1 <= A, B, N <= 1000)\uff0c\u5206\u522b\u4ee3\u8868\u684c\u5b50\u7684\u957f\u3001\u5bbd\u3001\u5956\u724c\u7684\u534a\u5f84\u3002\n", "output_description": "\u8f93\u51fa\u6700\u7ec8\u6e38\u620f\u7684\u83b7\u80dc\u8005\u3002\u8bf7\u7528 \"DG\" \u548c \"JM\" \u8868\u793a\u3002\u5176\u4e2d\"DG\"\u8868\u793a\u51ac\u74dc\u4f1a\u80dc\u5229\uff0c\"JM\"\u8868\u793a\u754c\u9762\u718a\u4f1a\u80dc\u5229\u3002", "samples": "[{\"input\": \"2\\n3 3 2\\n5 6 2\\n\", \"output\": \"DG\\nJM\\n\"}]", "test_case_id": "2337", "hint": "\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6837\u4f8b,\u754c\u9762\u718a\u653e\u4e0d\u4e0b\u7b2c\u4e00\u5757\u5956\u724c,\u6240\u4ee5\u51ac\u74dc\u80dc\u3002\\n<img src=\"uploadFiles/2337_1.png\" />\\n\\n\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u6837\u4f8b,\u754c\u9762\u718a\u653e\u4e0b\u7b2c\u4e00\u5757\u5956\u724c,\u51ac\u74dc\u653e\u4e0d\u4e0b\u7b2c\u4e8c\u5757\u5956\u724c\u3002\\n<img src=\"uploadFiles/2337_2.png\" />\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 70, "total_accepted_number": 37, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2338, "fields": {"title": "\u51ac\u74dc\u4e0e\u9ec4\u91d1\u57ce", "description": "\u51ac\u74dc\u662f\u4e2a\u6d77\u8d3c\u8ff7\uff0c\u6b63\u503c\u9ec4\u91d1\u57ce\u4e0a\u6620\uff0c\u51ac\u74dc\u4e00\u4e2a\u4eba\u5174\u594b\u7684\u8dd1\u53bb\u7535\u5f71\u9662\u770b\u4e86\uff0c\u56de\u6765\u4e4b\u540e\u51ac\u74dc\u5374\u5fd8\u4e86\u5267\u60c5\uff0c\u4ed6\u7a81\u7136\u56de\u60f3\u8d77\u7535\u5f71\u91cc\u63b7\u9ab0\u5b50\u7684\u4e00\u5e55\uff0c\u4e8e\u662f\u7231\u597d\u6570\u5b66\u7684\u51ac\u74dc\u5c31\u60f3\u8ba1\u7b97\u540c\u65f6\u63b7n\u4e2a\u9ab0\u5b50\uff0c\u8fd9n\u4e2a\u9ab0\u5b50\u6b63\u9762\u671d\u4e0a\u7684\u6570\u603b\u548c\u4e3am\u7684\u6982\u7387\uff0c\u4ed6\u53c8\u60f3\u8d77\u6765\u4ed6\u8fd8\u6709\u4f5c\u4e1a\u8981\u8865\uff0c\u806a\u660e\u7684\u4f60\u80fd\u591f\u5e2e\u52a9\u51ac\u74dc\u89e3\u51b3\u8fd9\u9898\u5417\uff1f", "input_description": "\u591a\u7ec4\u8f93\u5165\u6570\u636e\uff0c\u8bf7\u8bfb\u5230\u6587\u4ef6\u5c3e\u3002\n\u6bcf\u7ec4\u6570\u636e\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570n\uff0cm\uff081<=n<=100, 1<=m<=600\uff09\n", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u8f93\u5165\uff0c\u8f93\u51fa\u9898\u76ee\u6240\u6709\u7684\u767e\u5206\u6bd4\uff0c\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\u3002\n", "samples": "[{\"input\": \"1 3\\n2 10\\n\", \"output\": \"16.67\\n8.33\\n\"}]", "test_case_id": "2338", "hint": "\u5bf9\u4e8e\u6837\u4f8b1\uff0c\u63b7\u4e00\u6b21\u9ab0\u5b50\u6b63\u9762\u671d\u4e0a\u7684\u6570\u4e3a3\u7684\u6982\u7387\u4e3a1/6\uff0c\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\u5c31\u662f16.67%", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 100, "total_accepted_number": 24, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2340, "fields": {"title": "\u5b57\u7b26\u6d88\u6d88\u4e50", "description": "\u201c\u6d88\u6d88\u4e50\u201d\u662f\u5c0f\u660e\u6700\u559c\u6b22\u73a9\u7684\u6e38\u620f\uff0c\u4f46\u4ed6\u65e9\u5df2\u96be\u4ee5\u6ee1\u8db3\u5355\u7eaf\u7684\u6d88\u6d88\u4e50\u3002\u4e8e\u662f\u5c0f\u660e\u53d1\u660e\u4e86\u5b57\u7b26\u6d88\u6d88\u4e50\u3002<p></p>\u201c\u5b57\u7b26\u6d88\u6d88\u4e50\u201d\u7684\u89c4\u5219\u975e\u5e38\u7b80\u5355\uff0c\u73a9\u5bb6\u9700\u8981\u4e0d\u65ad\u5220\u9664\u5b57\u7b26\u4e32\u4e2d\u76f8\u90bb\u4e14\u76f8\u540c\u7684\u4e00\u5bf9\u5b57\u7b26\uff0c\u76f4\u5230\u5269\u4f59\u7684\u5b57\u7b26\u4e32\u4e2d\u4e0d\u5b58\u5728\u76f8\u90bb\u4e14\u76f8\u540c\u7684\u5b57\u7b26\u3002<p></p>", "input_description": "\u591a\u7ec4\u8f93\u5165\u6570\u636e\u3002\n\u6bcf\u7ec4\u6570\u636e\u4e00\u884c\u957f\u5ea6\u4e3an\u7684\u5b57\u7b26\u4e32\uff081<=n<=1000\uff09\u3002\n", "output_description": "\u6bcf\u7ec4\u8f93\u51fa\u4e00\u884c\uff0c\u8868\u793a\u5904\u7406\u540e\u7684\u5b57\u7b26\u4e32\u3002\u82e5\u6700\u540e\u6574\u4e2a\u5b57\u7b26\u4e32\u90fd\u88ab\u6d88\u5b8c\u4e86\uff0c\u76f4\u63a5\u8f93\u51fa\u56de\u8f66\u5373\u53ef\u3002", "samples": "[{\"input\": \"aaa\\nabba\\nabbba\\n\", \"output\": \"a\\n\\naba\\n\"}]", "test_case_id": "2340", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 87, "total_accepted_number": 39, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2341, "fields": {"title": "\u53f6\u9e4f\u5b66\u957f\u7684\u68c9\u82b1\u7cd6", "description": "\u4f17\u6240\u5468\u77e5\u7684\u662f\uff0c\u53f6\u9e4f\u5b66\u957f\u957f\u5f97\u5f88\u5e05\uff0c\u5b66\u957f\u957f\u5f97\u5e05\u7684\u539f\u56e0\u662f\u4ed6\u4e0d\u5403\u8089\u5374\u5f88\u559c\u6b22\u5403\u68c9\u82b1\u7cd6\u3002\u4e00\u5929\u53f6\u9e4f\u5b66\u957f\u5728\u897f\u5929\u53d6\u7ecf\u8def\u4e0a\u8def\u8fc7\u4e00\u7247\u832b\u832b\u5927\u6f20\uff0c\u5927\u6f20\u4e4b\u4e2d\u77d7\u7acb\u7740\u4e00\u680b\u5f88\u5947\u602a\u7684\u9ad8\u697c\uff0c\u7ecf\u8fc7\u4e0e\u89c2\u97f3\u59d0\u59d0\u89c6\u9891\u804a\u5929\u540e\uff0c\u53f6\u9e4f\u5b66\u957f\u5f97\u77e5\u5728\u8fd9\u680b\u697c\u4e2d\uff0c2\u7684\u975e\u8d1f\u6b21\u5e42\u7684\u697c\u5c42\uff0c\u4e5f\u5c31\u662f1\u30012\u30014\u30018\u300116\u300132\u300164\u2026\u2026\u8fd9\u4e9b\u697c\u5c42\u4e2d\uff0c\u90fd\u6709\u4e00\u7c92\u68c9\u82b1\u7cd6\uff0c\u5b66\u957f\u4e3a\u4e86\u767b\u9ad8\u4e34\u65e7\u56fd,\u6000\u53e4\u5bf9\u7a77\u79cb\uff0c\u73b0\u5728\u51c6\u5907\u5728\u6709\u68c9\u82b1\u7cd6\u7684\u6700\u9ad8\u697c\u5c42\u5403\u68c9\u82b1\u7cd6\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u680bk\u5c42\u7684\u697c\uff0c\u4f60\u80fd\u6253\u7535\u8bdd\u544a\u8bc9\u53f6\u9e4f\u5b66\u957f\u5e94\u8be5\u53bb\u54ea\u4e00\u5c42\u5417\uff1f", "input_description": "\u591a\u7ec4\u8f93\u5165\u6570\u636e\uff0c\u8bf7\u8bfb\u5230\u6587\u4ef6\u5c3e\n\u6bcf\u7ec4\u6570\u636e\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570k\uff081<=k<=9*10^18\uff09\n\n", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u5bf9\u5e94\u7684\u697c\u5c42\u3002", "samples": "[{\"input\": \"8\\n9\\n7\\n31\\n\", \"output\": \"8\\n8\\n4\\n16\\n\"}]", "test_case_id": "2341", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 470, "total_accepted_number": 49, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2342, "fields": {"title": "\u6c89\u8ff7\u7f51\u8d2d\u7684\u7af9\u5b50", "description": "\u7af9\u5b50\u6700\u8fd1\u975e\u5e38\u6020\u60f0\uff0c\u6bcf\u5929\u90fd\u8fc7\u7740\u5feb\u4e50\u7684\u54b8\u9c7c\u751f\u6d3b\uff0c\u5982\u679c\u53ea\u662f\u8fd9\u6837\uff0c\u6787\u6777\u80af\u5b9a\u4e0d\u4f1a\u7ba1\u4ed6\uff0c\u4f46\u6700\u8fd1\u7af9\u5b50\u6c89\u8ff7\u7f51\u8d2d\uff0c\u5929\u5929\u5241\u624b\u3002\u6787\u6777\u5b9e\u5728\u770b\u4e0d\u4e0b\u53bb\u4e86\uff0c\u628a\u7af9\u5b50\u53eb\u8fc7\u6765\u8bf4\u6559\uff0c\u6787\u6777\u6bcf\u4e00\u53e5\u8bf4\u6559\u7684\u5f62\u5f0f\u662f\uff0c\u5728\u6787\u6777\u770b\u5230\u7684\u67d0\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u7af9\u5b50\u82b1\u4e86\u591a\u5c11\u94b1\u3002\u867d\u7136\u7af9\u5b50\u5e76\u4e0d\u8bb0\u5f97\u81ea\u5df1\u5728\u67d0\u4e00\u5929\u82b1\u4e86\u591a\u5c11\u94b1\uff0c\u4f46\u4ed6\u53d1\u73b0\u6787\u6777\u7684\u8bf4\u6cd5\u4e2d\u6709\u77db\u76fe\uff0c\u4ed6\u60f3\u627e\u51fa\u8fd9\u4e9b\u77db\u76fe\u8ba9\u6787\u6777\u505c\u6b62\u8bf4\u6559\uff0c\u8d81\u673a\u9003\u8d70\u53bb\u5f53\u4e00\u53ea\u5feb\u4e50\u7684\u54b8\u9c7c\uff0c\u8bf7\u4f60\u544a\u8bc9\u4ed6\uff0c\u6787\u6777\u7684\u8bf4\u6559\u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u77db\u76fe\u3002<p></p>\u4e0e\u4e4b\u524d\u7684\u8bf4\u6559\u51fa\u73b0\u77db\u76fe\u7684\u8bf4\u6559\uff0c\u662f\u88ab\u770b\u4f5c\u9519\u8bef\u7684\uff0c\u5426\u5219\u7af9\u5b50\u53ea\u80fd\u8ba4\u4e3a\u6787\u6777\u8bf4\u7684\u662f\u5bf9\u7684\u3002<p></p>\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u7531\u4e8e\u5e97\u5bb6\u6709\u8fd4\u73b0\u7b49\u6d3b\u52a8\uff0c\u6240\u4ee5\u7af9\u5b50\u6bcf\u5929\u82b1\u7684\u94b1\uff0c\u4e0d\u4e00\u5b9a\u90fd\u662f\u6b63\u6570<p></p>", "input_description": "\u591a\u7ec4\u8f93\u5165\u8f93\u51fa\u3002\n\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u7ed9\u51fa\u4e24\u4e2a\u6574\u6570n,m(1 <= n <= 1e5\uff0c1 <= m <= 1e4)\uff0c\u8868\u793a\u5929\u6570\u548c\u6787\u6777\u8bf4\u6559\u7684\u6570\u91cf\uff0c\u63a5\u4e0b\u6765\u7684m\u884c\u6bcf\u884c\u4e09\u4e2a\u6570l,r,s(1 <= l <= r <= n,|s|<=1e9)\uff0c\u8868\u793a\u7b2cl\u5929\u5230\u7b2cr\u5929\uff08\u5305\u62ec\u8fd9\u4e24\u5929\uff09\uff0c\u7af9\u5b50\u4e00\u5171\u82b1\u4e86s\u5143\u3002\n", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6787\u6777\u7684\u8bf4\u6559\u4e2d\u6709\u591a\u5c11\u80fd\u88ab\u770b\u505a\u9519\u8bef\u7684\u3002", "samples": "[{\"input\": \"10 5\\n1 10 100\\n7 10 28\\n1 3 32\\n4 6 41\\n6 6 1\\n\", \"output\": \"1\"}]", "test_case_id": "2342", "hint": "\u6839\u636e\u7b2c1\u6761\uff0c\u7af9\u5b50\u5728\u7b2c1\u5929\u5230\u7b2c10\u5929\u5171\u82b1\u4e86100\u5143\uff0c\u6839\u636e\u7b2c2\u6761\u5230\u7b2c4\u6761\uff0c\u7af9\u5b50\u5171\u82b1\u4e8628+32+41=101\u5143\uff0c\u4e0e\u7b2c\u4e00\u6761\u77db\u76fe\uff0c\u6240\u4ee5\u8ba4\u4e3a\u7b2c4\u6761\u662f\u9519\u8bef\u7684\uff0c\u800c\u5bf9\u4e8e\u5176\u4ed6\uff0c\u6ca1\u6709\u53cd\u9a73\u7684\u7406\u7531\uff0c\u53ea\u80fd\u8ba4\u4e3a\u662f\u6b63\u786e\u7684\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 16, "total_accepted_number": 5, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2343, "fields": {"title": "\u7af9\u5b50\u5f53Dalao", "description": "\u7af9\u5b50\u662f\u4e2a\u5f88\u4f18\u79c0\u7684\u4eba\uff0c\u5728\u5404\u4e2a\u65b9\u9762\u90fd\u5f88\u5389\u5bb3\u3002\u6700\u8fd1SWJTU\u5f00\u59cb\u4e86\u9009\u62d4Dalao\u6d3b\u52a8\uff0c\u7af9\u5b50\u4e5f\u5c31\u8fd9\u6837\u88ab\u63a8\u8350\u4e3aDalao\u5019\u9009\u4eba\u3002Dalao\u7684\u9009\u62d4\u9700\u8981\u6bcf\u4e2a\u8857\u533a\u6295\u7968\u6765\u9009\u62d4\u3002\u5047\u8bbe\u7edf\u8ba1\u7684\u5927\u5c0f\u4e3an\uff0c\u4e14\u6bcf\u4e2a\u8857\u533a\u7684\u6784\u6210\u662f\u4e00\u4e2a1*1\u7684\u6b63\u65b9\u5f62\uff0c\u5219\u6574\u4e2a\u7edf\u8ba1\u8303\u56f4\u4e3an\uff0an\u4e2a\u5927\u5c0f\u4e3a1*1\u7684\u8857\u533a\u6784\u6210\uff0c\u6bcf\u4e2a\u8857\u533a\u5c06\u4f1a\u7531\u4e24\u4e2a\u6570i\uff0cj\u4f5c\u4e3a\u7f16\u53f7\uff0c\u4e14\u6bcf\u4e2a\u8857\u533a\u4f1a\u4ea7\u751f\u4e00\u4e2a\u6295\u7968\u6570\uff0c\u6700\u7ec8\u6295\u7968\u5219\u7531\u8fd9\u8fd9n*n\u4e2a\u8857\u533a\u6765\u8ba1\u7b97\u7684\u3002\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\uff1a\u5bf9\u4e8e\u4e00\u4e2an*n\u7684\u8857\u533a\uff0c\u4f1a\u8fdb\u884cn!\u6b21\u7edf\u8ba1\uff0c\u5c06\u6bcf\u6b21\u7edf\u8ba1\u7ed3\u679c\u76f8\u52a0\u5219\u4e3a\u6700\u7ec8\u7edf\u8ba1\u7ed3\u679c\u3002\u5bf9\u4e8e\u6bcf\u6b21\u7edf\u8ba1\uff0c\u9009\u62e9n\u4e2a\u8857\u533a\u5e76\u4e14\u4f7f\u4ed6\u4eec\u7684i,j\u5404\u4e0d\u76f8\u540c\uff0c\u5728n!\u6b21\u7edf\u8ba1\u4e2d\u9009\u62e9\u7684\u8857\u533a\u5e8f\u5217\u5404\u4e0d\u76f8\u540c\uff0c\u6bcf\u6b21\u9009\u62e9\u7684\u7ed3\u679c\u4e3a\u9009\u62e9\u7684\u5404\u7ed3\u679c\u7684\u4e58\u79ef\u518d\u4e58\u4e0a(-1)^k\uff0ck\u4e3a\u53d6\u5f97\u8857\u533aj\u7684\u5e8f\u5217\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570\u3002\u5c06\u8fd9n!\u6b21\u7ed3\u679c\u76f8\u52a0\u5219\u4e3a\u6295\u7968\u7684\u7ed3\u679c\u3002<p></p>\u5bf9\u4e8e\u4e00\u5217\u6570 a1,a2,a3...an,\u5982\u679c\u6709ai,aj\u6ee1\u8db3(i &gt; j\u4e14ai &lt; aj)\uff0c\u6211\u4eec\u5c31\u79f0\u8fd9\u662f\u4e00\u4e2a\u9006\u5e8f\u5bf9\u3002", "input_description": "\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6b63\u6574\u6570t\uff0c\u4e3a\u6d4b\u8bd5\u7684\u6570\u636e\u7ec4\u6570\u3002\n\u63a5\u4e0b\u6765\u6709t\u7ec4\u6570\u636e\uff0c\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u4e3an\uff0c\u4e3a\u7edf\u8ba1\u7684\u8857\u533a\u5927\u5c0f\uff0c\u63a5\u4e0b\u6765\u5c06\u4f1a\u6709n\u884c\uff0c\u6bcf\u884c\u6709n\u4e2a\u6574\u6570a[i][j]\u3002\n(1<=n<=15;1<=i,j<=n;0<=a[i][j]<10)\n", "output_description": "\u8f93\u51fa\u4e3at\u7ec4\u6570\u636e\uff0c\u6bcf\u7ec4\u6570\u636e\u4e3a\u4e00\u884c\uff0c\u5728\u8be5\u884c\u4e2d\u5305\u542b\u4e00\u4e2a\u6574\u6570\u3002", "samples": "[{\"input\": \"2\\n2\\n2 5 \\n1 2\\n3\\n1 2 3\\n2 0 1\\n2 3 1\\n\", \"output\": \"-1\\n15\\n\"}]", "test_case_id": "2343", "hint": "\u8857\u533a\u6295\u7968\u7ed3\u679c\\n\\n<img src=\"uploadFiles/2343_1.png\" />\\n\\n\\n\u8857\u533a\u7f16\u53f7\\n\\n<img src=\"uploadFiles/2343_2.png\" />\\n\\n\u9009\u62e96\u6b21\\n1.(1,1)-&gt;(2,2)-&gt;(3,3) \u884c\u5e8f\u52171,2,3 \u9006\u5e8f\u5bf9\u4e3a0\u3002\u7ed3\u679c\u4e3a0\u3002\\n2.(1,1)-&gt;(3,2)-&gt;(2,3) \u884c\u5e8f\u52171,3,2 \u9006\u5e8f\u5bf9\u4e3a1(&lt;3,2&gt;)\u3002\u7ed3\u679c\u4e3a-3\u3002\\n3.(2,1)-&gt;(1,2)-&gt;(3,3) \u884c\u5e8f\u52172,1,3 \u9006\u5e8f\u5bf9\u4e3a1(&lt;2,1&gt;)\u3002\u7ed3\u679c\u4e3a-4\u3002\\n4.(2,1)-&gt;(3,2)-&gt;(1,3) \u884c\u5e8f\u52172,3,1 \u9006\u5e8f\u5bf9\u4e3a2(&lt;2,1&gt;,&lt;3,1&gt;)\u3002\u7ed3\u679c\u4e3a18\u3002\\n5.(3,1)-&gt;(1,2)-&gt;(2,3) \u884c\u5e8f\u52173,1,2 \u9006\u5e8f\u5bf9\u4e3a2(&lt;3,1&gt;,&lt;3,2&gt;)\u3002\u7ed3\u679c\u4e3a4\u3002\\n6.(3,1)-&gt;(2,2)-&gt;(1,3) \u884c\u5e8f\u52173,2,1\u9006\u5e8f\u5bf9\u4e3a3(&lt;3,2&gt;,&lt;3,1&gt;,&lt;2,1&gt;)\u3002\u7ed3\u679c\u4e3a0\u3002\\n\\n\u603b\u7684\u7ed3\u679c\u4e3a0-3-4+18+4+0 = 15\\n\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 31, "total_accepted_number": 9, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2344, "fields": {"title": "\u91cd\u53e0\u7684\u7ebf\u6bb5", "description": "X\u8f74\u4e0a\u6709N\u6761\u7ebf\u6bb5\uff0c\u6bcf\u6761\u7ebf\u6bb5\u5305\u62ec1\u4e2a\u8d77\u70b9\u548c\u7ec8\u70b9\u3002\u7ebf\u6bb5\u7684\u91cd\u53e0\u662f\u8fd9\u6837\u6765\u7b97\u7684\uff0c[10 20]\u548c[12 25]\u7684\u91cd\u53e0\u90e8\u5206\u4e3a[12 20]\u3002<p></p>\u7ed9\u51faN\u6761\u7ebf\u6bb5\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u4ece\u4e2d\u9009\u51fa2\u6761\u7ebf\u6bb5\uff0c\u4f7f\u5f97\u8fd9\u4e24\u6761\u7ebf\u6bb5\u7684\u91cd\u53e0\u90e8\u5206\u662f\u6700\u957f\u7684\u3002\u8f93\u51fa\u8fd9\u4e2a\u6700\u957f\u7684\u8ddd\u79bb\u3002\u5982\u679c\u6ca1\u6709\u91cd\u53e0\uff0c\u8f93\u51fa0\u3002", "input_description": "\u591a\u7ec4\u6570\u636e\u8f93\u5165\uff0c\u8bf7\u8bfb\u81f3\u6587\u4ef6\u5c3e\u3002\n\u6bcf\u7ec4\u6570\u636e\u7684\u7b2c1\u884c\u662f\u4e00\u4e2a\u6574\u6570N(2 <= N <= 50000)\uff0c\u8868\u793a\u7ebf\u6bb5\u7684\u6570\u91cf\u3002\n\u4ece\u7b2c2\u884c\u8d77\u7684N\u884c\uff1a\u6bcf\u884c2\u4e2a\u6570\uff0c\u7ebf\u6bb5\u7684\u8d77\u70b9s\u548c\u7ec8\u70b9e\u3002(0 <= s , e <= 10^9).\n\n", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u8be2\u95ee\u8f93\u51fa\u91cd\u590d\u533a\u95f4\u6700\u957f\u7684\u957f\u5ea6\u3002\n", "samples": "[{\"input\": \"5\\n1 5\\n2 4\\n3 7\\n7 9\\n2 8\", \"output\": \"4\\n\"}]", "test_case_id": "2344", "hint": "\u5bf9\u4e8e\u6837\u4f8b\uff0c\u6700\u957f\u7684\u4e00\u6bb5\u662f[2,8]\u548c[3,7]\u91cd\u5408\u7684 [3,7] \u4ed6\u7684\u957f\u5ea6\u4e3a4", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 108, "total_accepted_number": 23, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2345, "fields": {"title": "\u7b80\u5355\u7684A+B\u95ee\u9898", "description": "\u5728\u5b66\u4e60\u7ebf\u6027\u4ee3\u6570\u8bfe\u7a0b\u65f6\uff0cMaster Luo\u5bf9\u65e0\u6570\u7684\u8ba1\u7b97\u611f\u5230\u538c\u70e6\uff0c\u73b0\u5728\u4ed6\u5e0c\u671b\u4f60\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5e2e\u4ed6\u8ba1\u7b97\u8fd9\u4e9b\u77e9\u9635\u3002\u6bcf\u4e00\u6b21\u7ed9\u4f60\u4e24\u4e2am \u00d7 n\u7684\u77e9\u9635\uff0c\u4f60\u9700\u8981\u7ed9\u51fa\u8fd9\u4e24\u4e2a\u77e9\u9635\u7684\u548c\u3002", "input_description": "\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8bf7\u8bfb\u5230\u6587\u4ef6\u5c3e\u3002\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6574\u6570m\uff0cn(1<=m,n<=1000)\u3002\n\u63a5\u4e0b\u6765m\u884c\uff0c\u6bcf\u884cn\u4e2a\u6574\u6570\u8868\u793a\u7b2c\u4e00\u4e2a\u77e9\u9635\u3002\n\u63a5\u4e0b\u6765m\u884c\uff0c\u6bcf\u884cn\u4e2a\u6574\u6570\u8868\u793a\u7b2c\u4e8c\u4e2a\u77e9\u9635\u3002\n\u77e9\u9635\u4e2d\u7684\u5143\u7d20\u5c5e\u4e8e[0,100000]\u3002\n", "output_description": "\u5bf9\u6bcf\u4e00\u7ec4\u8f93\u5165\u7ed9\u51fa\u4e24\u4e2a\u77e9\u9635\u7684\u548c\u77e9\u9635\uff0c\u8f93\u51fam\u884c\uff0c\u6bcf\u884cn\u4e2a\u6570\uff0cn\u4e2a\u6570\u4e4b\u95f4\u4ee5\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u884c\u672b\u4e0d\u8981\u6709\u591a\u4f59\u7684\u7a7a\u683c\u3002", "samples": "[{\"input\": \"1 3\\n6 3 0 \\n0 3 6\\n2 2\\n1 0\\n0 2\\n1 2\\n2 0\\n\", \"output\": \"6 6 6\\n2 2\\n2 2\\n\"}]", "test_case_id": "2345", "hint": "[6 3 0]+[0 3 6]=[6 6 6]\\n\\n\u6ce8\u610f\uff1a\u6570\u636e\u91cf\u8f83\u5927\uff0c\u8bf7\u4f7f\u7528scanf\u4ee3\u66ffcin\uff0c\u5426\u5219\u5bb9\u6613\u8d85\u65f6\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 4000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 178, "total_accepted_number": 50, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2346, "fields": {"title": "\u6e38\u73a9", "description": "\u5927\u7c73\u548c\u5c0f\u7c73\u662f\u4e00\u5bf9\u5144\u5f1f\uff0c\u4e00\u5929\uff0c\u4ed6\u4eec\u6765\u5230\u6e38\u4e50\u56ed\uff0c\u8ba1\u5212\u6e38\u73a9\u5176\u4e2dn\u4e2a\u6e38\u4e50\u70b9\uff081,2,3\u3002\u3002\u3002\u3002n\uff09\uff0c\u7136\u800c\u6e38\u4e50\u56ed\u6709\u89c4\u5b9a\uff0c\u6bcf\u4e2a\u6e38\u4e50\u70b9\u4e00\u5929\u53ea\u80fd\u8ba9\u4e00\u4e2a\u4eba\u6e38\u73a9\uff0c\u5e76\u4e14\u53ea\u6709\u5f53\u524di\u4e2a\u6e38\u4e50\u70b9\u90fd\u6709\u4eba\u6e38\u73a9\uff0c\u624d\u4f1a\u5f00\u653e\u7b2ci+1\u6e38\u4e50\u70b9\u3002<p></p>\u5982\u4eca\uff0c\u4ed6\u4eec\u90fd\u4f4d\u4e8e\u7b2c\u4e00\u4e2a\u6e38\u4e50\u70b9\uff0c\u800c\u4e14\u4ed6\u4eec\u5df2\u7ecf\u5f97\u5230n\u4e2a\u6e38\u4e50\u70b9\u4e4b\u95f4\u7684\u4ea4\u901a\u56fe\uff0c\u4f46\u4e0d\u6653\u5f97\u8be5\u5982\u4f55\u89c4\u5212\u8def\u7ebf\u3002(\u5f53\u4ed6\u4eec\u67d0\u4eba\u8981\u4ece\u7b2ci\u4e2a\u6e38\u4e50\u70b9\u53bb\u7b2cj\u4e2a\u6e38\u4e50\u70b9\u7684\u65f6\u5019\uff0c\u53ea\u4f1a\u76f4\u63a5\u8d70\u4ea4\u901a\u56fe\u4e0a\u7684\u9053\u8def\uff0c\u800c\u4e0d\u4f1a\u7ecf\u8fc7\u67d0\u4e9b\u4e2d\u8f6c\u70b9\u518d\u53bb\u7b2cj\u4e2a\u4ea4\u901a\u70b9)\u3002<p></p>", "input_description": "\u591a\u7ec4\u6837\u4f8b\u3002\n\u6bcf\u7ec4\u6837\u4f8b\u7b2c\u4e00\u884c n\uff081<= n <= 1000\uff09\u8868\u793a\u6e38\u4e50\u70b9\u4e2a\u6570\u3002\n\u63a5\u4e0b\u6765n\u884c\uff0c\u6bcf\u884cn\u4e2a\u6574\u6570\uff08ai1,ai2\u2026ain\uff09aij\u8868\u793ai\u6e38\u4e50\u70b9\u5230j\u6e38\u4e50\u70b9\u7684\u8ddd\u79bb(0 <= aij <= 10000)\u3002\n", "output_description": "\u6bcf\u884c\u5bf9\u5e94\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e24\u4eba\u7ecf\u8fc7\u7684\u6700\u5c0f\u8def\u7ebf\u548c\u3002", "samples": "[{\"input\": \"2\\n0 1\\n1 0\\n3\\n0 1 2\\n1 0 3\\n2 3 0\\n4\\n0 1 2 3\\n1 0 4 5\\n2 4 0 6\\n3 5 6 0\\n\", \"output\": \"1\\n3\\n8\\n\"}]", "test_case_id": "2346", "hint": "\u5bf9\u4e8e\u7b2c\u4e09\u7ec4\u6837\u4f8b\uff0c\u5927\u7c73\u5148\u4ece1\u8d70\u52302\uff0c\u63a5\u7740\u5c0f\u7c73\u4ece1\u8d70\u52303\uff0c\u63a5\u7740\u5927\u7c73\u4ece2\u8d70\u52304\uff0c\u603b\u8ddd\u79bb\u4e3a8\u3002", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 5000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 39, "total_accepted_number": 7, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2347, "fields": {"title": "\u56fd\u738b\u4e0e\u8def", "description": "\u5728\u4e00\u4e2a\u56fd\u5bb6\u91cc\u6709n\u4e2a\u57ce\u5e02\uff0c\u8fd9\u4e2a\u56fd\u5bb6m\u6761\u9053\u8def\uff0c\u5176\u4e2d\u7b2ci\u6761\u9053\u8def\u7684\u957f\u5ea6\u4e3adis[i]\uff0c\u4e14\u4e0d\u5b58\u5728\u4e24\u6761\u9053\u8def\u957f\u5ea6\u4e00\u6837\u3002\u56fd\u738b\u89c9\u5f97\u6709\u5f88\u591a\u9053\u8def\u662f\u591a\u4f59\u7684\uff0c\u4e8e\u662f\u4ed6\u51b3\u5b9a\u6467\u6bc1\u4e00\u4e9b\u9053\u8def\uff0c\u4f7f\u5f97\u6467\u6bc1\u540e\u5269\u4e0b\u7684\u6240\u6709\u57ce\u5e02\u90fd\u80fd\u5230\u8fbe\u57ce\u5e021\uff0c\u5e76\u4f7f\u5f97\u5269\u4e0b\u7684\u9053\u8def\u7684\u8ddd\u79bb\u548c\u6700\u5c0f\u3002<p></p><p></p>\u5728\u6467\u6bc1\u5b8c\u4ee5\u540e\u7684t\u5929\u91cc\uff0c\u56fd\u738b\u6bcf\u5929\u4f1a\u544a\u8bc9\u4f602\u4e2a\u6ca1\u88ab\u6467\u6bc1\u7684\u57ce\u5e02a,b\uff0c\u5e76\u4f1a\u8ba9\u4f60\u505a\u4ee5\u4e0b\u51e0\u4ef6\u4e8b\u4e4b\u4e00\uff1a<p></p><p></p>1. \u4ed6\u60f3\u77e5\u9053\u4ecea\u57ce\u5e02\u5230b\u57ce\u5e02\u7684\u6700\u77ed\u8ddd\u79bb\u662f\u591a\u5c11\u3002<p></p>2. \u4ed6\u8ba9\u4f60\u53bb\u91cd\u5efa\u8fd9\u4e9b\u9053\u8def\uff0c\u5bf9\u4e8e\u8fd92\u4e2a\u57ce\u5e02\u95f4\u7684\u8ddd\u79bb\u6700\u77ed\u7684\u65b9\u6848\u4e0a\u7684\u6bcf\u6761\u9053\u8def\uff0c\u90fd\u5ef6\u957fc\u7c73\u3002<p></p>3. \u4ed6\u8ba9\u4f60\u53bb\u91cd\u5efa\u8fd9\u4e9b\u9053\u8def\uff0c\u5bf9\u4e8e\u8fd92\u4e2a\u57ce\u5e02\u95f4\u7684\u8ddd\u79bb\u6700\u77ed\u7684\u65b9\u6848\u4e0a\u7684\u6bcf\u6761\u9053\u8def\uff0c\u90fd\u51cf\u5c11c\u7c73 <p></p>\u6ce8\u610f\uff1a\u4ee5\u4e0a\u6240\u6709\u7684\u8ddd\u79bb\u6700\u77ed\u7684\u65b9\u6848\u90fd\u8981\u6c42\u6bcf\u4e2a\u57ce\u5e02\u6700\u591a\u53ea\u7ecf\u8fc7\u4e00\u6b21(\u4e5f\u5c31\u662f\u8bf4\uff0c\u5373\u4f7f\u901a\u8fc7\u4e00\u4e9b\u64cd\u4f5c\u4f7f\u5f97\u6709\u9053\u8def\u7684\u957f\u5ea6\u4e3a\u8d1f\u6570\uff0c\u4f60\u4e5f\u6700\u591a\u53ea\u80fd\u8d70\u4e00\u6b21)<p></p><p></p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T(T<=2) \u8868\u793a\u8981\u6d4b\u8bd5\u7684\u6570\u636e\u7ec4\u6570\n\u63a5\u4e0b\u6765\u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u662f3\u4e2a\u6574\u6570n,m,t\u610f\u601d\u8bf7\u53c2\u8003\u9898\u76ee\u63cf\u8ff0\u3002\n(n<=100000,m<=1000000,t<=10000)\n\u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\u7684\u63a5\u7740m\u884c\uff0c\u6bcf\u884c\u662f3\u4e2a\u6574\u6570\u5206\u522b\u4e3a\u8fd9\u6761\u9053\u8def\u8fde\u63a5\u7684\u57ce\u5e02a\u548cb,\u4ee5\u53ca\u9053\u8def\u7684\u957f\u5ea6,\u4fdd\u8bc1a!=b\u3002\n\u6700\u540e\u7684t\u884c\u6bcf\u884c\u5c06\u662f\u4ee5\u4e0b\u5f62\u5f0f\u4e4b\u4e00\uff0c\u8868\u793a\u56fd\u738b\u8ba9\u4f60\u505a\u7684\u4e8b\n\t1 a b\n\t2 a b c\n\t3 a b c\n\u4fdd\u8bc1\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u6240\u6709\u7684\u8ddd\u79bb\u548c\u5728[-10^9,10^9]\u8303\u56f4\u5185\n", "output_description": "\u4f60\u9700\u8981\u5bf9\u4e8e\u6bcf\u4e00\u4e2a 1 a b \u64cd\u4f5c\uff0c\u8f93\u51fa\u4e00\u884c\uff0c\u4e3a\u4ed6\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002", "samples": "[{\"input\": \"1\\n4 4 5\\n1 2 10\\n1 3 15\\n2 4 20\\n3 4 30\\n1 1 4\\n2 1 4 3\\n1 1 4\\n3 1 4 20\\n1 1 4\\n\", \"output\": \"30\\n36\\n-4\\n\"}]", "test_case_id": "2347", "hint": "<img src=\"uploadFiles/2347.png\" />\\n\\n\u5982\u56fe\u6240\u793a\u4e3a\u521a\u5f00\u59cb\u8fd9\u4e2a\u56fd\u5bb6\u7684\u57ce\u5e02\u4e0e\u9053\u8def\uff0c\u4e4b\u540e\u5c06\u6467\u6bc1\u4e00\u4e9b\u9053\u8def\uff0c\u663e\u7136\u6467\u6bc13\u548c4\u4e4b\u95f4\u957f\u5ea6\u4e3a30\u7684\u9053\u8def\u662f\u7b26\u5408\u9898\u610f\u7684\u3002\\n\u7b2c\u4e00\u6b21\u8be2\u95ee1\u548c4\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a10+20=30\\n\u7b2c\u4e8c\u6b21\u64cd\u4f5c\u5c061\u548c4\u4e4b\u95f4\u7684\u6bcf\u6761\u9053\u8def\u7684\u957f\u5ea6\u589e\u52a0\u4e863\uff0c\u53d8\u6210\u4e8613\u548c23\\n\u7b2c\u4e09\u6b21\u8be2\u95ee1\u548c4\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a13+23=36\\n\u7b2c\u56db\u6b21\u64cd\u4f5c1\u548c4\u4e4b\u95f4\u7684\u9053\u8def\u53d8\u6210\u4e86-7\u548c 3\\n\u7b2c\u4e94 \u6b21\u8be2\u95ee1\u548c4\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a-7+3=-4\\n", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 8000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 37, "total_accepted_number": 16, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2348, "fields": {"title": "\u5faa\u73af\u6392\u5e8f\u96c6", "description": "\u5927\u5bb6\u5927\u4e00\u7684\u65f6\u5019\u90fd\u4e0a\u8fc7\u3010C\u7a0b\u5e8f\u8bbe\u8ba1&#8226;\u4e0a\u673a\u5b9e\u9a8c\u3011\u8fd9\u95e8\u8bfe\uff0c\u5176\u4e2d\u6709\u4e00\u8282\u5c31\u662f\u8ba9\u6211\u4eec\u7ed9\u5b9a\u4e00\u4e2a\u9012\u589e\uff08\u542b\u76f8\u7b49\uff09\u5e8f\u5217\uff0c\u8ba9\u6211\u4eec\u5faa\u73af\u53f3\u79fbn\u4f4d\uff0c\u4ece\u800c\u83b7\u5f97\u4e00\u4e2a\u5faa\u73af\u6392\u5e8f\u96c6(Rotate Sort Array)\uff0c\u76f8\u5f53\u4e8e\u628a\u6700\u53f3\u8fb9\u7684n\u4f4d\u653e\u5230\u5e8f\u5217\u6700\u524d\u7aef\u3002\u4f8b\u5982\uff1a[1, 2, 3, 4]\u8fd9\u4e2a\u5e8f\u5217\uff0c\u6211\u4eec\u5faa\u73af\u53f3\u79fb2\u4f4d\u53d8\u6210[3, 4, 1, 2]\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5faa\u73af\u6392\u5e8f\u96c6\u3002<p></p><p></p>\u8fd9\u6b21\u7684\u95ee\u9898\u5e76\u4e0d\u662f\u6784\u9020\u4e00\u4e2a\u5faa\u73af\u6392\u5217\u96c6\uff0c\u800c\u662f\u67e5\u627e\u51fa\u7ed9\u5b9a\u5faa\u73af\u6392\u5e8f\u96c6\u4e2d\u7684\u6700\u5c0f\u503c\u3002<p></p>", "input_description": "\u591a\u7ec4\u6570\u636e\u6d4b\u8bd5\uff0c\u8bf7\u8bfb\u5230\u6587\u4ef6\u5c3e\u3002\n\u6bcf\u7ec4\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570n( 1 <= n <= 1e6 )\u4ee3\u8868\u96c6\u5408\u7684\u957f\u5ea6\u3002\n\u7b2c\u4e8c\u884c\u6709n\u4e2a\u6574\u6570 a1, a2, ..., an ( -1e9 <= ai <= 1e9 )\uff0c\u5e76\u4e14\u9075\u5faa\u65cb\u8f6c\u6392\u5217\u96c6\u5408\u7684\u89c4\u5f8b\u3002", "output_description": "\u8f93\u51fa\u8be5\u96c6\u5408\u7684\u6700\u5c0f\u503c\u3002", "samples": "[{\"input\": \"5\\n5 1 2 3 4\\n6\\n20 25 3 6 7 9\\n\", \"output\": \"1\\n3\\n\"}]", "test_case_id": "2348", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 199, "total_accepted_number": 62, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2349, "fields": {"title": "\u8ffd\u98ce\u7b5d\u7684\u4eba", "description": "\u6211\u4eec\u77e5\u9053\uff0c\u300a\u8ffd\u98ce\u7b5d\u7684\u4eba\u300b\u662f\u4e00\u90e8\u7545\u9500\u5168\u7403\u7684\u8457\u540d\u5c0f\u8bf4\uff0c\u4e66\u4e2d\u63cf\u7ed8\u4e86\u963f\u5bcc\u6c57\u5bcc\u5bb6\u5c11\u7237\u963f\u7c73\u5c14\u4e0e\u4ed6\u7684\u4ec6\u4eba\u4e4b\u95f4\u7684\u53cb\u8c0a\u4e0e\u80cc\u53db\u7684\u6545\u4e8b\uff0c\u4f5c\u8005\u4ee5\u6e29\u6696\u7ec6\u817b\u7684\u7b14\u6cd5\u52fe\u52d2\u51fa\u4eba\u6027\u7684\u672c\u8d28\u4e0e\u6551\u8d4e\u3002\u5176\u5b9e\uff0c\u5f53\u65f6\u4ed6\u4eec\u8fd8\u73a9\u8fc7\u4e00\u79cd\u73bb\u7483\u7403\u7684\u6e38\u620f\uff1a\u5728\u4e00\u4e2ax-y\u5750\u6807\u7cfb\u7684\u7b2c\u4e00\u8c61\u9650\uff08x&gt;0\u4e14y&gt;0\uff09\u67d0\u4e9b\u4f4d\u7f6e\u653e\u4e0a\u4e00\u9897\u73bb\u7483\u7403\uff0c\u5047\u82e5\u8fd9\u4e2a\u73bb\u7483\u7403a\u5411x\u8f74\uff0cy\u8f74\u4f5c\u5782\u7ebf\u65f6\uff0c\u5c31\u53ef\u4ee5\u4e0ex\u8f74,y\u8f74\u7ec4\u6210\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\uff0c\u5982\u679c\u8fd9\u4e2a\u77e9\u5f62\u533a\u57df\u5185\u8fd8\u6709\u4e00\u9897\u522b\u7684\u73bb\u7483\u7403b\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8bf4\uff0c\u7403a\u5305\u542b\u4e86\u7403b\uff0c\u73b0\u5728\u7ed9\u4f60n\u4e2a\u7403\u7684\u4f4d\u7f6e\u5750\u6807\uff0c\u4f60\u80fd\u544a\u8bc9\u963f\u7c73\u5c14\u4e0d\u88ab\u5176\u4ed6\u4efb\u4f55\u7403\u5305\u542b\u7684\u7403\u7684\u4e2a\u6570\u5417\uff1f", "input_description": "\u5305\u542b\u591a\u7ec4\u6570\u636e\uff0c\u8bf7\u8bfb\u5230\u6587\u4ef6\u5c3e\u3002\n\u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570n(1<=n<=1e5)\uff0c\u4ee3\u8868\u73bb\u7483\u7403\u7684\u4e2a\u6570\u3002\n\u63a5\u4e0b\u6765n\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6570\u5b57\uff0c\u4f9d\u6b21\u4ee3\u8868\u7403\u7684x,y\u5750\u6807(x,y\u5728int\u8303\u56f4\u5185)\n\u8f93\u5165\u4fdd\u8bc1\u6ca1\u6709\u4e24\u4e2a\u7403\u4f1a\u51fa\u73b0\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u3002\n", "output_description": "\u8f93\u51fa\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5355\u72ec\u5360\u4e00\u884c\uff0c\u4ee3\u8868\u4e0d\u88ab\u5176\u4ed6\u4efb\u4f55\u7403\u5305\u542b\u7684\u7403\u7684\u4e2a\u6570\u3002", "samples": "[{\"input\": \"1\\n3 2\\n2\\n3 2\\n4 2\\n2\\n3 2\\n4 1\\n2\\n3 2\\n4 4\\n\", \"output\": \"1\\n1\\n2\\n1\\n\"}]", "test_case_id": "2349", "hint": "\u5047\u82e5\u4e00\u4e2a\u73bb\u7483\u7403a\u5904\u5728\u4e00\u4e2a\u73bb\u7483\u7403b\u7684\u77e9\u5f62\u533a\u57df\u8fb9\u754c\u4e0a\uff0c\u90a3\u4e48\u4e5f\u53ef\u4ee5\u8bf4\u7403a\u88ab\u7403b\u5305\u542b", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 170, "total_accepted_number": 13, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2350, "fields": {"title": "\u4e3a\u7f8e\u597d\u7684\u4e16\u754c\u732e\u4e0a\u795d\u798f\uff08\u7206\u708e\uff09", "description": "\u4eca\u5929\uff0c\u60e0\u60e0\u4e5f\u5728\u52aa\uff08\u641e\uff09\u529b\uff08\u4e8b\uff09\u3002<p></p>\u4eba\u578b\u81ea\u8d70\u6838\u6b66\u5668\u2015\u2015\u60e0\u60e0\u6b63\u5728\u7528\u6700\u64c5\u957f\u7684\u7206\u88c2\u9b54\u6cd5\uff0c\u6d88\u706d\u8349\u539f\u4e0a\u7684\u602a\u7269\u3002\u8349\u539f\u53ef\u4ee5\u770b\u505a\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\uff0c\u60e0\u60e0\u7684\u7206\u88c2\u9b54\u6cd5\uff0c\u80fd\u591f\u6d88\u706d\u8349\u539f\u4e0a\u4e00\u4e2a\u5706\u5f62\u8303\u56f4\u4e2d\u7684\u6240\u6709\u751f\u7269\uff0c\u73b0\u5728\u7ed9\u51fa\u60e0\u60e0\u4eca\u5929\u65bd\u653e\u7206\u88c2\u9b54\u6cd5\u7684\u4e2d\u5fc3\u70b9\u548c\u534a\u5f84\uff0c\u5e76\u7ed9\u51fa\u8349\u539f\u4e0a\u751f\u7269\u7684\u4f4d\u7f6e\uff0c\u8bf7\u8ba1\u7b97\u6709\u591a\u5c11\u65e0\u8f9c\u7684\u602a\u7269\u4f1a\u88ab\u5377\u5165\uff08\u5728\u7206\u70b8\u8303\u56f4\u8fb9\u7f18\u4e0a\u7684\u751f\u7269\u4e5f\u4f1a\u88ab\u5377\u5165\uff09\u3002", "input_description": "\u591a\u7ec4\u8f93\u5165\u8f93\u51fa\uff0c\u8bf7\u8bfb\u5230\u6587\u4ef6\u5c3e\u3002\n\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u7ed9\u51fa\u4e09\u4e2a\u6574\u6570\uff0cx, y, r(-1e4 <= x,y <= 1e4\uff0c1 <= r <= 1e5)\uff0c\u8868\u793a\u7206\u88c2\u9b54\u6cd5\u7684\u4e2d\u5fc3\u70b9\u548c\u7206\u70b8\u534a\u5f84\uff0c\u63a5\u4e0b\u6765\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570n(1 <= n <= 1000)\uff0c\u8868\u793a\u8349\u539f\u4e0a\u602a\u7269\u7684\u6570\u91cf\uff0c\u63a5\u4e0b\u6765\u7684n\u884c\u6bcf\u884c\u4e24\u4e2a\u6570xi, yi(-1e4 <=xi, yi <= 1e4)\uff0c\u8868\u793a\u7b2ci\u4e2a\u751f\u7269\u7684\u4f4d\u7f6e\u3002\n", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6709\u591a\u5c11\u751f\u7269\u88ab\u5377\u5165\u4e86\u60e0\u60e0\u7684\u7206\u88c2\u9b54\u6cd5\u4e4b\u4e2d\u3002", "samples": "[{\"input\": \"0 0 1\\n2\\n0 1\\n1 1\\n0 0 2\\n2\\n0 1\\n1 1\\n\", \"output\": \"1\\n2\\n\"}]", "test_case_id": "2350", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 106, "total_accepted_number": 48, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2351, "fields": {"title": "A+B", "description": "I have a very simple problem for you. Given two integers A and B, your task<p></p>is to calculate the sum of A and B.", "input_description": "The first line of the input contains an integer T (1 \u2264 T \u2264 20) which means\nthe number of test cases. Each of the following T lines consists of two positive\nintegers, A and B. Notice that the integers may be large, which means you\nshould not process them by using 32-bit integer. You may assume the decimal\nlength of each integer will not exceed 1000.", "output_description": "For each test case, you should output two lines. The first line is \u201cCase k:\u201d, k\nmeans the order of the test case. The second line is an equation A + B = Sum,\nSum means the result of A + B. Note that A, B and Sum are separated by a\nspace, and a blank line is given between two test cases.", "samples": "[{\"input\": \"3\\n1 2\\n112233445566778899 998877665544332211\\n100000000000000000000000000000000 12345678901234567890120000000000\\n\", \"output\": \"Case 1:\\n1 + 2 = 3\\n\\nCase 2:\\n112233445566778899 + 998877665544332211 = 1111111111111111110\\n\\nCase 3:\\n100000000000000000000000000000000 + 12345678901234567890120000000000 = 112345678901234567890120000000000\\n\\n\\n\"}]", "test_case_id": "2351", "hint": "", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 1000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 50, "total_accepted_number": 6, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2352, "fields": {"title": "HandsomeHow\u7092\u80a1", "description": "HandsomeHow\u6700\u8fd1\u5f88\u7a77\uff0c\u4e8e\u662f\u5f00\u59cb\u4e86\u7092\u80a1\u3002<p></p>\u73b0\u5728\u4ed6\u624b\u4e0a\u6709n\u79cd\u80a1\u7968\uff0c\u7b2ci\u79cd\u80a1\u7968\u7684\u4ef7\u683c\u662fpi\u3002<p></p>\u7136\u540e\u4f1a\u53d1\u751fk\u4ef6\u4e8b\uff0c\u53ef\u80fd\u662f\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a<p></p>1.\u7b2cx\u79cd\u80a1\u7968\u7684\u4ef7\u683c\u53d8\u6210\u4e86y<p></p>2.HandsomeHow\u60f3\u77e5\u9053\u73b0\u5728\u4ed6\u7684\u7b2ca\u652f\u80a1\u7968\u5230\u7b2cb\u652f\u80a1\u7968\u603b\u5171\u503c\u591a\u5c11\u94b1\u3002", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T\u8868\u793a\u6570\u636e\u7ec4\u6570\u3002\n\u63a5\u4e0b\u6765\u662fT\u7ec4\u6570\u636e\u3002\n\u6bcf\u7ec4\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662f1\u4e2a\u6574\u6570n\u3002\n\u63a5\u7740\u4e00\u884c\u662fn\u4e2a\u6574\u6570\uff0c\u7b2ci\u4e2a\u6574\u6570\u8868\u793a\u7b2ci\u652f\u80a1\u7968\u7684\u521d\u59cb\u4ef7\u683cpi\n\u63a5\u7740\u4e00\u884c\u662f1\u4e2a\u6574\u6570k\uff0c\u8868\u793a\u53d1\u751f\u4e86k\u4ef6\u4e8b\n\u63a5\u7740k\u884c\u662f\u4ee5\u4e0b\u4e24\u79cd\u5f62\u5f0f\u4e4b\u4e00\uff1a\n1 x y\n2 a b\n\u5206\u522b\u8868\u793a\u53d1\u751f\u7684\u4e8b,\u8bf7\u53c2\u8003\u63cf\u8ff0\u3002", "output_description": "\u4f60\u9700\u8981\u5bf9\u6bcf\u6b21\u76842\u8be2\u95ee\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff08\u4e00\u884c\uff09\uff0c\u8868\u793a\u73b0\u5728\u4ece\u7b2ca\u652f\u80a1\u7968\u5230\u7b2cb\u652f\u80a1\u7968\u7684\u603b\u4ef7\u503c\u3002", "samples": "[{\"input\": \"1\\n4\\n1 2 3 4\\n3\\n2 1 4\\n1 2 4\\n2 1 4\", \"output\": \"10\\n12\"}]", "test_case_id": "2352", "hint": "\u7b2c\u4e00\u6b21\u8be2\u95ee\u7684\u603b\u4ef7\u4e3a1+2+3+4=10\\n\u7b2c\u4e8c\u6b21\u8be2\u95ee\u7684\u603b\u4ef7\u4e3a1+4+3+4=12\\n\\n\u6570\u636e\u7ea6\u5b9a\uff1a\\nT&lt;=10\\nn&lt;=100000\\nk&lt;=100000\\n\u5728\u7b2c\u4e8c\u79cd\u64cd\u4f5c\u4e2da &lt; b\\n\u4fdd\u8bc1\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u6240\u6709\u80a1\u7968\u7684\u603b\u4ef7\u503c\u4e0d\u4f1a\u8d85\u8fc71000000000(int\u7684\u8303\u56f4\u5185)\\n\\n\u6570\u636e\u91cf\u5927\uff0c\u8bf7\u7528scanf\u4ee3\u66ffcin", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 105, "total_accepted_number": 27, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2353, "fields": {"title": "HandsomeHow\u53d6\u5feb\u9012", "description": "\u53cc\u5341\u4e00\u7684\u65f6\u5019HandsomeHow\u4e70\u4e86\u4e00\u5806\u4e1c\u897f,\u8fd9\u5929\uff0c\u8fd9\u4e9b\u5feb\u9012\u90fd\u5230\u4e86\u3002<p></p>\u6bcf\u4ef6\u5feb\u9012\u90fd\u6709\u4e00\u4e2a\u91cd\u91cfm\uff0cHandsomeHow\u7531\u4e8e\u592a\u4e45\u6ca1\u953b\u70bc\u6240\u4ee5\u4e00\u6b21\u53ea\u80fd\u62ff\u8d28\u91cf\u4e0d\u8d85\u8fc7x\u7684\u4e00\u4ef6\u6216\u4e24\u4ef6\u7269\u54c1\u3002<p></p>HandsomeHow\u4f4f\u5728\u516d\u697c\uff0c\u6240\u4ee5\u4ed6\u4e0d\u60f3\u4e0a\u4e0a\u4e0b\u4e0b\u8dd1\uff0c\u4ed6\u73b0\u5728\u60f3\u77e5\u9053\uff0c\u4ed6\u6700\u5c11\u9700\u8981\u642c\u8fd0\u51e0\u6b21\u624d\u80fd\u628a\u8fd9\u5806\u5feb\u9012\u5168\u90e8\u642c\u5230\u5bdd\u5ba4\u3002<p></p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T\u8868\u793a\u6570\u636e\u7ec4\u6570\u3002 \n\u63a5\u4e0b\u6765\u662fT\u7ec4\u6570\u636e\u3002 \n\u6bcf\u7ec4\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662f2\u4e2a\u6574\u6570n,x\uff0c\u8868\u793a\u8981\u642c\u8fd0\u7684\u7269\u54c1\u7684\u6570\u91cf\u4ee5\u53caHandsomeHow\u4e00\u6b21\u80fd\u642c\u52a8\u7684\u6700\u5927\u8d28\u91cf\n\u7b2c\u4e8c\u884c\u662fn\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6bcf\u4e00\u4ef6\u7269\u54c1\u7684\u91cd\u91cf", "output_description": "\u4f60\u9700\u8981\u5bf9\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff08\u4e00\u884c\uff09\uff0c\u8868\u793aHandsomeHow\u6700\u5c11\u9700\u8981\u642c\u51e0\u6b21\u3002", "samples": "[{\"input\": \"2\\n2 3\\n1 2\\n3 3\\n3 1 2\\n\", \"output\": \"1\\n2\\n\"}]", "test_case_id": "2353", "hint": "\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6837\u4f8b,HandsomeHow\u53ef\u4ee5\u4e00\u6b21\u642c\u5b8c\u8fd9\u4e24\u4ef6\u5feb\u9012\uff0c\u603b\u91cd\u91cf\u4e3a3\uff0c\u4ed6\u662f\u642c\u5f97\u52a8\u7684\u3002\\n\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u6837\u4f8b,HandsomeHow\u53ef\u4ee5\u7b2c\u4e00\u6b21\u642c\u91cd\u91cf\u4e3a3\u7684\u5feb\u9012\uff0c\u7b2c\u4e8c\u6b21\u642c\u5269\u4e0b\u76842\u4ef6\u5feb\u9012\u3002\\n\\n\u6570\u636e\u7ea6\u5b9a\uff1a\\nT&lt;=100\\n1&lt;=n&lt;=100000,1&lt;=x&lt;=1000000000\\n\u6bcf\u4ef6\u5feb\u9012\u7684\u8d28\u91cf1&lt;=m&lt;=x\\n\\n\u6570\u636e\u91cf\u5927\uff0c\u8bf7\u7528scanf\u4ee3\u66ffcin", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3500, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 85, "total_accepted_number": 21, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2354, "fields": {"title": "HandsomeHow\u590d\u4e60", "description": "\u5feb\u5230\u671f\u672b\u4e86\uff0cHandsomeHow\u73a9\u4e86\u4e00\u5b66\u671f\u4e5f\u8981\u5f00\u59cb\u590d\u4e60\u4e86\u3002<p></p>HandsomeHow\u4e00\u5929\u6709n\u8282\u81ea\u4e60\u8bfe(1,2,3....n)\u3002<p></p>\u4ed6\u6709m\u95e8\u529f\u8bfe\u9700\u8981\u590d\u4e60(1,2,3...m)\u3002<p></p>\u4f46\u662fHandsomeHow\u4e0d\u60f3\u5728\u67d0\u4e9b\u81ea\u4e60\u8bfe\u4e0a\u590d\u4e60\u67d0\u4e9b\u529f\u8bfe\uff08\u6bd4\u5982\u4ed6\u4e0d\u60f3\u5728\u65e9\u4e0a\u7b2c\u4e00\u8282\u81ea\u4e60\u8bfe\u590d\u4e60\u9ad8\u7b49\u6570\u5b66\uff09\u3002<p></p>HandsomeHow\u590d\u4e60\u4e00\u95e8\u529f\u8bfe\u9700\u8981\u4e00\u8282\u81ea\u4e60\u8bfe\u3002<p></p>\u73b0\u5728HandsomeHow\u544a\u8bc9\u4f60\u4ed6\u5728\u54ea\u8282\u81ea\u4e60\u8bfe\u4e0a\u4e0d\u60f3\u590d\u4e60\u54ea\u4e9b\u8bfe\uff0c<p></p>\u4ed6\u60f3\u8ba9\u4f60\u5e2e\u4ed6\u8ba1\u7b97\u51fa\u4ed6\u6709\u51e0\u79cd\u590d\u4e60\u65b9\u6848\u8ba9\u4ed6\u5728\u8fd9n\u8282\u81ea\u4e60\u8bfe\u91cc\u80fd\u628a\u529f\u8bfe\u5168\u90e8\u590d\u4e60\u5b8c\uff08\u5f53\u7136\u4ed6\u53ef\u4ee5\u5077\u61d2\uff0c\u5728\u67d0\u8282\u81ea\u4e60\u8bfe\u4e0a\u4ec0\u4e48\u90fd\u4e0d\u590d\u4e60\uff09\u3002<p></p>\u4e24\u79cd\u590d\u4e60\u65b9\u6848\u4e0d\u540c\u5f53\u4e14\u4ec5\u5f53\u81f3\u5c11\u4e00\u95e8\u8bfe\u5728\u4e24\u79cd\u65b9\u6848\u4e2d\u6240\u5bf9\u5e94\u7684\u81ea\u4e60\u8bfe\u4e0d\u540c\u3002", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T\u8868\u793a\u6570\u636e\u7ec4\u6570\u3002 \n\u63a5\u4e0b\u6765\u662fT\u7ec4\u6570\u636e\u3002 \n\u6bcf\u7ec4\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662f2\u4e2a\u6574\u6570n,m\uff0c\u8868\u793a\u4ed6\u6709n\u8282\u81ea\u4e60\u8bfe\uff0cm\u95e8\u529f\u8bfe\u9700\u8981\u590d\u4e60\u3002\n\u63a5\u4e0b\u6765\u662fn\u884c\u3002\n\u6bcf\u4e00\u884c\u7684\u5f00\u5934\u662f\u4e00\u4e2a\u6574\u6570x\uff0c\u8868\u793aHandsomeHow\u5728\u8fd9\u4e00\u8282\u81ea\u4e60\u8bfe\u4e0a\u6709x\u95e8\u4e0d\u60f3\u590d\u4e60\u7684\u8bfe\u7a0b\u3002\n\u63a5\u7740\u662fx\u4e2a\u6574\u6570ai\uff0c\u8868\u793a\u4ed6\u4e0d\u60f3\u5728\u8fd9\u8282\u81ea\u4e60\u8bfe\u590d\u4e60\u7684x\u95e8\u8bfe\u7684\u7f16\u53f7\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\u4f60\u9700\u8981\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff08\u4e00\u884c\uff09\u4e3aHandsomeHow\u80fd\u590d\u4e60\u5b8c\u7684\u65b9\u6848\u6570\u3002", "samples": "[{\"input\": \"2\\n3 2\\n1 1\\n0\\n0\\n2 3\\n1 1\\n2 1 2\\n\", \"output\": \"4\\n0\\n\"}]", "test_case_id": "2354", "hint": "\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6570\u636e\uff0c\u57281\u30012\u30013\u4e09\u8282\u81ea\u4e60\u8bfe\u4e0a\u4ed6\u53ef\u4ee5\u8fd9\u6837\u590d\u4e60\uff1a\\n2X1 21X X12 X21  (X\u8868\u793a\u5077\u61d2)\u51714\u79cd\u65b9\u6848\\n\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u6570\u636e\uff0cHandsomeHow\u6ca1\u6709\u529e\u6cd5\u5168\u90e8\u590d\u4e60\u5b8c\u4e86\u3002\\n\\n\u6570\u636e\u7ea6\u5b9a\uff1a\\nT&lt;=10\\n1&lt;=n&lt;=9\\n1&lt;=m&lt;=9\\n0&lt;=x&lt;=m\\n1&lt;=ai&lt;=m\\n\u4fdd\u8bc1\u6bcf\u4e00\u8282\u81ea\u4e60\u8bfe\u7ed9\u51fa\u7684x\u4e2aai\u5404\u4e0d\u76f8\u540c", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 3000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 19, "total_accepted_number": 14, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2355, "fields": {"title": "\u5c11\u5973\u7f16\u53f7", "description": "\u4f17\u6240\u5468\u77e5\uff0c\u4e4c\u4e38\u5343\u5c81\u662f\u4e00\u4e2a\u6b63\u76f4\uff08\u96fe\uff09\uff0c\u5584\u826f\uff08\u96fe\uff09\uff0c\u8868\u91cc\u5982\u4e00\uff08\u8fd9\u662f\u771f\u7684\uff09\u7684\u53ef\u7231\u7684\u5973\u5b69\u5b50\u3002\u8fd9\u6837\u8868\u91cc\u5982\u4e00\u7684\u5343\u5c81\u5728\u5e86\u529f\u5bb4\u4e0a\uff0c\u60f3\u8981\u5403\u4e0b\u5168\u90e8\u7684\u86cb\u7cd5\uff0c\u86cb\u7cd5\u6392\u6210\u4e00\u52171,2..n\uff0c\u6bcf\u4e2a\u86cb\u7cd5\u7684\u5927\u5c0f\u4e3aai\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u5973\u5b69\u5b50\u6709\u5f88\u591a\u4e2a\u7528\u6765\u88c5\u751c\u98df\u7684\u80c3\uff0c\u5343\u5c81\u6bcf\u6b21\u4f1a\u5c06\u8fde\u7eed\u7684\u51e0\u4e2a\u86cb\u7cd5\u5403\u8fdb\u540c\u4e00\u4e2a\u80c3\u4e2d\uff0c\u7136\u540e\u6362\u4e00\u4e2a\u80c3\u5403\u86cb\u7cd5\uff08\u4e0d\u4f1a\u518d\u628a\u86cb\u7cd5\u5403\u8fdb\u88c5\u6709\u86cb\u7cd5\u7684\u80c3\u4e2d\uff09\uff0c\u5343\u5c81\u60f3\u8ba9\u86cb\u7cd5\u6700\u591a\u7684\u80c3\u4e2d\u88c5\u7684\u86cb\u7cd5\u5c3d\u91cf\u5c11\uff08\u5403\u591a\u4e86\u4f1a\u6491\uff0c\u6491\u4e86\u5c31\u4f1a\u53d8\u6210\u2468\uff09\uff0c\u5343\u5c81\u8ba9\u516b\u91cd\u5e2e\u5979\u7b97\u4e0b\uff0c\u5403\u4e0b\u5168\u90e8\u86cb\u7cd5\u540e\uff0c\u86cb\u7cd5\u6700\u591a\u7684\u90a3\u4e2a\u80c3\u4e2d\u88c5\u4e86\u591a\u5c11\u86cb\u7cd5\u3002", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T\u8868\u793a\u6570\u636e\u7ec4\u6570\u3002 \n\u63a5\u4e0b\u6765\u662fT\u7ec4\u6570\u636e\u3002 \n\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u7ed9\u51fa\u4e24\u4e2a\u6574\u6570n,k\uff081<=n\uff0ck<=10000\uff09\uff0c\u4ee3\u8868\u5343\u5c81\u7684\u9762\u524d\u6709n\u5757\u86cb\u7cd5\uff0c\u5343\u5c81\u6709k\u4e2a\u80c3\uff0c\u63a5\u4e0b\u6765\u4e00\u884c\u4e2d\u6709n\u4e2a\u6570a1,a2\u2026an(1<=ai<=10000)\uff0c\u4ee3\u8868\u6bcf\u5757\u86cb\u7cd5\u7684\u5927\u5c0f\u3002\n", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u6491\u7684\u90a3\u4e2a\u80c3\u4e2d\u88c5\u4e86\u591a\u5c11\u86cb\u7cd5\u3002", "samples": "[{\"input\": \"2\\n4 1\\n1 2 3 4\\n4 2\\n1 2 3 4\\n\", \"output\": \"10\\n6\\n\"}]", "test_case_id": "2355", "hint": "\u6837\u4f8b\u4e00\u4e2d\uff0c\u628a\u6240\u6709\u86cb\u7cd5\u90fd\u88c5\u5728\u7b2c\u4e00\u4e2a\u80c3\u4e2d\uff0c\u5927\u5c0f\u4e3a10\\n\u6837\u4f8b\u4e8c\u4e2d\uff0c\u628a1,2,3,\u4e09\u4e2a\u86cb\u7cd5\u88c5\u5728\u7b2c\u4e00\u4e2a\u80c3\u4e2d\uff0c\u7b2c\u56db\u4e2a\u86cb\u7cd5\u88c5\u5728\u7b2c\u4e8c\u4e2a\u80c3\u4e2d\uff0c\u6b64\u65f6\u6700\u591a\u7684\u80c3\u5927\u5c0f\u4e3a6\uff081+2+3\uff09", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 26, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2356, "fields": {"title": "\u54c8\u58eb\u5947\u4e0e\u738b\u5b88\u4e49", "description": "\u5728\u7f57\u4f26\u65af\u548c\u8d6b\u841d\u65c5\u884c\u7684\u9014\u4e2d\uff0c\u4f1a\u6309\u987a\u5e8f\u7ecf\u8fc7n\u4e2a\u5c0f\u9547\uff0c\u5728\u8fd9\u4e9b\u9547\u4e0a\u6709\u8bb8\u591a\u8d27\u7269\u8d29\u5356\uff0c\u7f57\u4f26\u65af\u80fd\u4ee5ai\u7684\u4ef7\u683c\u4e70\u5230\u6216\u4ee5bi\u7684\u4ef7\u683c\u5356\u51fa\u4e00\u4e2a\u5355\u4f4d\u7684\u8d27\u7269\uff0c\u7f57\u4f26\u65af\u5728\u6bcf\u4e2a\u5c0f\u9547\u4e0a\u4f1a\u4e70\u5356\u82e5\u5e72\u8d27\u7269\uff0c\u5e26\u5230\u4e4b\u540e\u7ecf\u8fc7\u7684\u57ce\u9547\u4e2d\u8d29\u5356\uff0c\u4f46\u9a6c\u8f66\u7684\u5bb9\u91cf\u662f\u6709\u9650\u7684\uff0c\u5e76\u4e14\u7531\u4e8e\u8def\u9014\u98a0\u7c38\uff0c\u6bcf\u5230\u4e00\u4e2a\u65b0\u7684\u57ce\u9547\u4f1a\u635f\u5931\u4e00\u4e2a\u5355\u4f4d\u7684\u8d27\u7269\uff08\u6ca1\u6709\u5c31\u4e0d\u4f1a\u635f\u5931\uff09\uff0c\u7f57\u4f26\u65af\u5728\u65c5\u884c\u8ba1\u5212\u4e2d\u5199\u4e0a\u4e86\u5728\u6bcf\u4e2a\u57ce\u9547\u4e2d\u4f1a\u4e70\u5356\u591a\u5c11\u8d27\u7269(\u5f53\u7136\u8fd9\u53ea\u662f\u8ba1\u5212\uff0c\u5982\u679c\u5230\u65f6\u5019\u4ed6\u53d1\u73b0\u4e70\u4e86c\u4e2a\u8d27\u7269\u4f1a\u8d85\u8fc7\u9a6c\u8f66\u7684\u5bb9\u91cf\uff0c\u90a3\u4ed6\u53ea\u4f1a\u4e70\u6ee1\u5230\u9a6c\u8f66\u7684\u5bb9\u91cf\u800c\u4e0d\u4f1a\u4e70c\u4e2a\uff0c\u540c\u7406\u5982\u679c\u4ed6\u8ba1\u5212\u5356c\u4e2a,\u800c\u5230\u65f6\u5019\u5982\u679c\u4ed6\u7684\u8d27\u7269\u4e0d\u8db3c,\u4ed6\u4f1a\u628a\u5269\u4e0b\u7684\u8d27\u7269\u90fd\u5356\u4e86)\uff0c\u8d6b\u841d\u62ff\u5230\u8fd9\u4efd\u6e05\u5355\u60f3\u7b97\u4e00\u4e0b\u7f57\u4f26\u65af\u8d5a\u4e86\u591a\u5c11\u94b1\uff0c\u4ee5\u786e\u5b9a\u81ea\u5df1\u80fd\u4e70\u5230\u591a\u5c11\u8702\u871c\u814c\u6e0d\u6843\u5b50\u3002", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T\u8868\u793a\u6570\u636e\u7ec4\u6570\u3002 \n\u63a5\u4e0b\u6765\u662fT\u7ec4\u6570\u636e\u3002 \n\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u7ed9\u51fa\u4e09\u4e2a\u6574\u6570\uff0cn\uff0ck\uff0cp(1 <= n,k <= 1000,0 < p <= 1e9)\uff0c\u8868\u793a\u4f1a\u7ecf\u8fc7n\u4e2a\u5c0f\u9547\uff0c\u9a6c\u8f66\u7684\u88c5\u8f7d\u91cf\u4e3ak\uff0c\u8702\u871c\u814c\u6e0d\u6843\u5b50\u7684\u4ef7\u683c\u4e3ap\uff0c\u7b2c\u4e8c\u884cn\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2ci\u4e2a\u57ce\u9547\u4e2d\u8d27\u7269\u7684\u4e70\u4ef7\u4e3aai\uff0c\u7b2c\u4e09\u884cn\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2ci\u4e2a\u57ce\u9547\u4e2d\u8d27\u7269\u7684\u5356\u4ef7\u4e3abi(0 < ai,bi <= 1e9)\uff0c\u6700\u540e\u4e00\u884cn\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7f57\u4f26\u65af\u5728\u7b2ci\u4e2a\u57ce\u9547\u4e2d\u4e70\u5356\u4e86ci\u4e2a\u5355\u4f4d\u7684\u8d27\u7269(|ci| <= 1000)\uff08\u6b63\u6570\u4e3a\u4e70\u8fdb\uff0c\u8d1f\u6570\u4e3a\u5356\u51fa\uff09\u3002\n", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8d6b\u841d\u80fd\u7528\u7f57\u4f26\u65af\u7684\u94b1\u4e70\u5230\u591a\u5c11\u6843\u5b50\u3002", "samples": "[{\"input\": \"2\\n2 5 2\\n2 2\\n3 6\\n2 -1\\n2 5 2\\n2 4\\n3 4\\n2 -2\\n\", \"output\": \"1\\n0\\n\"}]", "test_case_id": "2356", "hint": "\u5728\u7b2c\u4e00\u4e2a\u6837\u4f8b\u4e2d\uff0c\u5728\u57ce\u95471\u4e2d\u4e70\u8fdb\u4e24\u4e2a\u8d27\u7269\u5e76\u5728\u57ce\u95472\u4e2d\u5356\u51fa\u4e00\u4e2a\u8d27\u7269\uff0c\u83b7\u5229\u4e3a2\uff0c\u80fd\u4e701\u4e2a\u6843\u5b50\uff0c\u800c\u5728\u6837\u4f8b2\u4e2d\uff0c\u5728\u57ce\u95472\u4e2d\u5356\u51fa\u4e00\u4e2a\u8d27\u7269\uff08\u4e2d\u9014\u6389\u4e86\u4e00\u4e2a\uff09\u6ca1\u6709\u83b7\u5229\uff0c\u4e70\u4e0d\u4e86\u6843\u5b50\\n\u6570\u636e\u91cf\u5927\uff0c\u5efa\u8bae\u4f7f\u7528scanf\u4ee3\u66ffcin", "create_time": "2016-12-03T08:34:27Z", "last_update_time": "2016-12-03T08:34:27Z", "created_by": 1, "time_limit": 2000, "memory_limit": 65536, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 26, "total_accepted_number": 11, "difficulty": 1, "source": null, "tags": [10]}}, {"model": "problem.problem", "pk": 2357, "fields": {"title": "21312", "description": "<p>321321</p>", "input_description": "12321", "output_description": "11", "samples": "[{\"input\": \"1\", \"output\": \"1\"}]", "test_case_id": "2357", "hint": "", "create_time": "2017-04-12T15:34:46.156Z", "last_update_time": "2017-04-12T15:34:55.662Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": false, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": "11", "tags": []}}, {"model": "problem.problem", "pk": 2358, "fields": {"title": "\u5b64\u72ec\u7684\u4e32", "description": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; orphans: 2; widows: 2;\">&quot;\u4eba\u4f1a\u5b64\u72ec,\u90a3\u5b57\u7b26\u4e32\u4e5f\u4f1a\u5b64\u72ec\u5417?&quot;</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; orphans: 2; widows: 2;\">\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5b64\u72ec\u7684,\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u6570\u5217\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ec5\u51fa\u73b0\u4e00\u6b21</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; orphans: 2; widows: 2;\">\u6bd4\u5982&quot;$abcde$&quot;\u662f\u5b64\u72ec\u7684,\u56e0\u4e3a$a,b,c,d,e$\u8fd95\u4e2a\u5143\u7d20\u90fd\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; orphans: 2; widows: 2;\">\u800c&quot;$aabcde$&quot;\u5219\u662f\u4e0d\u5b64\u72ec\u7684,\u56e0\u4e3a$a$\u8fd9\u4e2a\u6570\u5728\u8fd9\u4e2a\u4e32\u91cc\u51fa\u73b0\u4e862\u6b21</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; orphans: 2; widows: 2;\">\u7ed9\u4f60\u4e00\u4e2a\u4e32 $s_1s_2s_3....s_n$ ,\u4ed6\u7684\u957f\u5ea6\u662f$n$,\u73b0\u5728\u8bf7\u4f60\u5224\u65ad\u4ed6\u662f\u4e0d\u662f\u5b64\u72ec\u7684</p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570$T$($T \\leq 10$),\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570.\n\n\u63a5\u7740T\u884c,\u6bcf\u884c\u7684\u5f00\u5934\u662f\u4e00\u4e2a\u6574\u6570$l$($1 \\leq l \\leq 100000 $)\u8868\u793a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n\n\u63a5\u7740\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a$l$\u7684\u5b57\u7b26\u4e32,\u4fdd\u8bc1\u53ea\u542b\u6709\u5c0f\u5199\u5b57\u6bcd", "output_description": "\u8f93\u51fa$T$\u884c,\u5bf9\u4e8e\u7b2c$i$\u884c,\u5982\u679c\u7b2c$i$\u4e2a\u5b57\u7b26\u4e32\u662f\u5b64\u72ec\u7684,\u8f93\u51fa\"Yes\",\u5426\u5219\u8f93\u51fa\"No\"(\u4e0d\u542b\u5f15\u53f7)", "samples": "[{\"input\": \"3\\n3 abc\\n2 aa\\n4 aabc\\n\", \"output\": \"Yes\\nNo\\nNo\\n\"}]", "test_case_id": "5a7fc1451cb019259c0929d2b357e6fb", "hint": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; orphans: 2; widows: 2;\">\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32,$a,b,c$\u90fd\u53ea\u51fa\u73b0\u4e00\u6b21</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; orphans: 2; widows: 2;\">\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u5b57\u7b26\u4e32,$a$\u90fd\u51fa\u73b0\u8d85\u8fc71\u6b21</p>", "create_time": "2017-04-23T05:37:11.320Z", "last_update_time": "2017-05-04T13:53:34.111Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 10, "total_accepted_number": 4, "difficulty": 1, "source": "HandsomeHow", "tags": [14]}}, {"model": "problem.problem", "pk": 2359, "fields": {"title": "\u5b64\u72ec\u7684\u6570\u5217", "description": "<p>&quot;\u4eba\u4f1a\u5b64\u72ec,\u90a3\u6570\u5217\u4e5f\u4f1a\u5b64\u72ec\u5417?&quot;</p><p>\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6570\u5217\u662f\u5b64\u72ec\u7684,\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u6570\u5217\u4e2d\u7684\u6bcf\u4e2a\u6570\u4ec5\u51fa\u73b0\u4e00\u6b21</p><p>\u6bd4\u5982&quot;$1,2,3,4,5$&quot;\u662f\u5b64\u72ec\u7684,\u56e0\u4e3a$1,2,3,4,$5\u8fd95\u4e2a\u5143\u7d20\u90fd\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21</p><p>\u800c&quot;$1,1,2,3,4,5$&quot;\u5219\u662f\u4e0d\u5b64\u72ec\u7684,\u56e0\u4e3a\uffe51\u8fd9\u4e2a\u6570\u5728\u8fd9\u4e2a\u6570\u5217\u91cc\u51fa\u73b0\u4e862\u6b21</p><p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u5217 $a_1a_2a_3....a_n$ ,\u4ed6\u7684\u957f\u5ea6\u662f$n$,\u73b0\u5728\u8bf7\u4f60\u8ba1\u7b97\u51fa\u8fd9\u4e2a\u6570\u5217\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u5b50\u6570\u5217\u662f\u5b64\u72ec\u7684</p><p>\u6570\u5217$a$\u7684\u4e24\u4e2a\u8fde\u7eed\u5b50\u6570\u5217$a_{i_1}a_{i_1+1}a_{i_1+2}a_{i_1+3}...a_{i_1+k}$ , $a_{j_1}a_{j_1+1}a_{j_1+2}a_{j_1+3}...a_{j_1+l}$\u89c6\u4e3a\u4e0d\u540c,\u5f53\u4e14\u4ec5\u5f53$i_1 <p></p>eq j_1$ \u6216 $i_{1+k} <p></p>eq j_{1+l} $</p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570$T$($T \\leq 10$),\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570.\n\n\u63a5\u7740T\u884c,\u6bcf\u884c\u7684\u5f00\u5934\u662f\u4e00\u4e2a\u6574\u6570$l$($1 \\leq l \\leq 100000 $)\u8868\u793a\u8fd9\u4e2a\u6570\u5217\u7684\u957f\u5ea6\n\n\u63a5\u7740\u662fl\u4e2a\u6574\u6570$a_1,a_2....a_l$\u8868\u793a\u8fd9\u4e2a\u5e8f\u5217($0 \\leq a_i \\leq l$)", "output_description": "\u8f93\u51fa$T$\u884c,\u6bcf\u884c\u4e00\u4e2a\u6574\u6570,\u8868\u793a\u7b2c$i$\u4e2a\u6570\u5217\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u5b50\u6570\u5217\u662f\u5b64\u72ec\u7684", "samples": "[{\"input\": \"3\\n3 1 2 3\\n2 1 1\\n4 1 1 2 3\\n\", \"output\": \"6\\n2\\n7\"}]", "test_case_id": "0b138d05c08aa4ee4359725c86e6171b", "hint": "<p>\u5bf9\u4e8e1 2 3,\u4ed6\u67096\u4e2a\u8fde\u7eed\u5b50\u5e8f\u5217&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;1,2&quot;,&quot;2,3&quot;,&quot;1,2,3&quot;,\u90fd\u662f\u5b64\u72ec\u7684</p><p>\u5bf9\u4e8e1 1,\u4ed6\u67093\u4e2a\u8fde\u7eed\u5b50\u6570\u5217, &quot;1&quot; &quot;1&quot; &quot;1,1&quot; \u5176\u4e2d&quot;1,1&quot;\u662f\u4e0d\u5b64\u72ec\u7684</p><p>\u5bf9\u4e8e1 1 2 3,\u4ed6\u670910\u4e2a\u8fde\u7eed\u5b50\u5e8f\u5217,\u5176\u4e2d\u9664\u4e86&quot;1,1&quot;, &quot;1,1,2&quot;,&quot;1,1,2,3&quot;\u662f\u4e0d\u5b64\u72ec\u7684\u5916,\u5269\u4e0b\u7684\u90fd\u662f\u5b64\u72ec\u7684</p>", "create_time": "2017-04-23T05:38:44.091Z", "last_update_time": "2017-05-04T13:53:46.349Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 2, "total_accepted_number": 1, "difficulty": 2, "source": "HandsomeHow", "tags": [15]}}, {"model": "problem.problem", "pk": 2360, "fields": {"title": "\u4e0d\u518d\u5b64\u72ec\u7684HandsomeHow", "description": "<p>&quot;\u4eba\u4f1a\u5b64\u72ec,\u90a3$HandsomeHow$\u4e5f\u4f1a\u5b64\u72ec\u5417?&quot;</p><p>\u5f53\u7136\u4e0d\u4f1a\u5566~</p><p>\u67d0\u65e5,$HandsomeHow$\u548c\u4ed6\u7684\u5973\u670b\u53cb\u5728\u5403\u70e7\u70e4, \u4ed6\u4eec\u73b0\u5728\u6709$n$\u4e32\u70e7\u70e4,\u6211\u4eec\u628a\u70e7\u70e4\u4e32\u6807\u8bb0\u4e3a$1,2,3....n$.</p><p>\u5403\u70e7\u70e4\u7684\u65f6\u5019\u4e24\u4e2a\u4eba\u4e92\u76f8\u770b\u5bf9\u65b9\u4e00\u773c\u751f\u6015\u5bf9\u65b9\u5403\u7684\u6bd4\u81ea\u5df1\u591a,\u4e8e\u662f\u4ed6\u4eec\u603b\u662f\u540c\u65f6\u5403,\u4e5f\u5c31\u662f$HandsomeHow$\u5403\u4e00\u4e32\u7684\u65f6\u5019\u4ed6\u7684\u5973\u670b\u53cb\u4e5f\u4f1a\u5403\u4e00\u4e32.</p><p>\u4ed6\u4eec\u53d1\u73b0\u5f53\u4ed6\u4eec\u540c\u65f6\u5403\u7b2c$i$\u4e32\u548c\u7b2c$j$\u4e32\u70e7\u70e4\u7684\u65f6\u5019,\u4ed6\u4eec\u4e4b\u95f4\u7684\u597d\u611f\u5ea6\u4f1a\u589e\u52a0$a_{ij}$</p><p>\u73b0\u5728$HandsomeHow$\u8bf7\u4f60\u5e2e\u5fd9\u8ba1\u7b97,\u4ed6\u4eec\u5403\u5b8c\u8fd9\u4e9b\u70e7\u70e4,\u597d\u611f\u5ea6\u6700\u591a\u53ef\u4ee5\u589e\u52a0\u591a\u5c11</p><p>\u5f53\u7136\u6bcf\u4e32\u70e7\u70e4\u53ea\u80fd\u5403\u4e00\u6b21<br /></p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570$T$($T \\leq 10$),\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570.\n\n\u63a5\u7740T\u884c,\u6bcf\u884c\u7684\u5f00\u5934\u662f\u4e00\u4e2a\u6574\u6570$n$($1 \\leq n \\leq 14 $),\u8868\u793a\u4ed6\u4eec\u9762\u524d\u6709$n$\u79cd\u70e7\u70e4,\u4fdd\u8bc1$n$\u662f\u5076\u6570.\n\n\u63a5\u7740\u662f\u4e00\u4e2a$n*n$\u7684\u77e9\u9635,\u7b2c$i$\u884c\u7b2c$j$\u4e2a\u6570\u8868\u793a\u4ed6\u4eec\u540c\u65f6\u5403\u7b2c$i$\u4e32\u548c\u7b2c$j$\u4e32\u7684\u65f6\u5019\u53ef\u4ee5\u589e\u52a0\u597d\u611f\u5ea6$a_{ij}$\n\n($a_{ij} = a_{ji} , 0 \\leq a_{ij} \\leq 100 $)", "output_description": "\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u8868\u793a\u5403\u5b8c\u8fd9\u987f\u70e7\u70e4$HandsomeHow$\u548c\u4ed6\u7684\u5973\u670b\u53cb\u53ef\u4ee5\u589e\u52a0\u591a\u5c11\u597d\u611f\u5ea6", "samples": "[{\"input\": \"2\\n2\\n0 2\\n2 0\\n4\\n0 2 4 6\\n2 0 8 3\\n4 8 0 7\\n6 3 7 0\\n\", \"output\": \"2\\n14\\n\"}]", "test_case_id": "0c28c8862a7fc45c1a4a4fcd4313cb2f", "hint": "<p>\u5bf9\u4e8e\u7ec4\u6837\u4f8b, \u4ed6\u4eec\u540c\u65f6\u5403\u7b2c\u4e00\u4e32\u548c\u7b2c\u4e8c\u4e32, \u597d\u611f\u5ea6\u4f1a\u589e\u52a02</p><p>\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u6837\u4f8b, \u4ed6\u4eec\u5148\u5403\u7b2c\u4e00\u4e32\u548c\u7b2c\u56db\u4e32,\u597d\u611f\u5ea6\u589e\u52a0\u4e866, \u7136\u540e\u5403\u7b2c\u4e8c\u4e32\u548c\u7b2c\u4e09\u4e32,\u597d\u611f\u5ea6\u589e\u52a0\u91cf8,\u603b\u5171\u589e\u52a0\u4e8614</p>", "create_time": "2017-04-23T05:41:37.756Z", "last_update_time": "2017-05-04T13:54:07.541Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 2, "source": "HandsomeHow", "tags": [16, 17]}}, {"model": "problem.problem", "pk": 2361, "fields": {"title": "An easy A * B Problem", "description": "<p><img src=\"/static/upload/c32f5779e839edcda24017abc5d67a5d.jpg\" alt=\"programming-cat.jpg\" /></p><p>$HH$&#039;s cat is learning coding, he find it&#039;s difficult to calcute &nbsp;$a \\times &nbsp;b$, can you help $HH$&#039;s cat?</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\n\nFor each test case:\n\nTwo integers $a, b (0 \\leq a, b \\leq 10)$.", "output_description": "For each test case, output one line an integer: $a \\times b$", "samples": "[{\"input\": \"3\\n1 2\\n3 5\\n4 6\\n\", \"output\": \"2\\n15\\n24\\n\"}]", "test_case_id": "d228ce14eefd6ee6f7fea6a781b3a9b6", "hint": "", "create_time": "2017-05-07T09:10:47.964Z", "last_update_time": "2017-05-07T09:11:45.411Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 7, "total_accepted_number": 7, "difficulty": 1, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b", "tags": [14]}}, {"model": "problem.problem", "pk": 2362, "fields": {"title": "An easy life Problem", "description": "<p>Programmer do four things one day:&nbsp;</p><p>$EAT$,$SLEEP$,$CODE$,$FIND \\ &nbsp;A \\ &nbsp;GIRLFRIEND$.</p><p><br /></p><p><img src=\"/static/upload/efcbabd86b5a9b1bab2ce608c6319412.png\" alt=\"14MOI8XLU8Y2]K3FXK7A5$K.png\" /><br /></p><p>Now give you $WT$&#039;s timetable of $EAT$, $SLEEP$ and $CODE$, he asks you to tell him how many time does he have to find a girlfriend everyday.<br /></p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line is in tht format of $xx:yy:zz$\n($0 \\leq xx \\leq 23,0 \\leq yy \\leq 59,0 \\leq zz \\leq 59$)\nindicating $WT$ eat $xx$ hour $yy$ miniute $zz$ second every day.\n\nThe second line is in tht format of $xx:yy:zz$\n($0 \\leq xx \\leq 23,0 \\leq yy \\leq 59,0 \\leq zz \\leq 59$)\nindicating $WT$ sleep $xx$ hour $yy$ miniute $zz$ second every day.\n\nThe third line is in tht format of $xx:yy:zz$\n($0 \\leq xx \\leq 23,0 \\leq yy \\leq 59,0 \\leq zz \\leq 59$)\nindicating $WT$ code $xx$ hour $yy$ miniute $zz$ second every day.\n\nIt's guaranteed that $xx:yy:zz$ is valid and the total time of $eat, sleep \\ and \\ code$ is not greater than $24$ hours", "output_description": "For each test case, out put online int the format of $xx:yy:zz$ --- the time $WT$ have to find a girlfriend.\n\nYou should make it valid, that is $0 \\leq xx \\leq 24,0 \\leq yy \\leq 59,0 \\leq zz \\leq 59$, and if $xx,yy,zz$ is less than 10, you should add one leading zero before it.", "samples": "[{\"input\": \"3\\n08:00:00\\n08:00:00\\n06:59:51\\n08:00:00\\n08:40:15\\n05:15:15\\n01:11:11\\n02:22:22\\n03:33:33\", \"output\": \"01:00:09\\n02:04:30\\n16:52:54\"}]", "test_case_id": "72f38f6089d84aa2a9c0b95630bb5642", "hint": "<p>08:00:00+08:00:00+06:59:51+01:00:09=24:00:00</p><p>08:00:00+08:40:15+05:15:15+02:04:30=24:00:00</p><p>01:11:11+02:22:22+03:33:33+16:52:54=24:00:00</p>", "create_time": "2017-05-07T09:10:50.490Z", "last_update_time": "2017-05-07T09:11:59.967Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 11, "total_accepted_number": 7, "difficulty": 1, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b", "tags": [14]}}, {"model": "problem.problem", "pk": 2363, "fields": {"title": "Operating System is not easy", "description": "<p>$HandsomeHow$ is learning $Operating System$ this semester, he find it&#039;s difficult, one reason is that the book is in $English$.</p><p><img src=\"/static/upload/31b273c554c555fa377867fdba6ded54.jpg\" alt=\"czxt.jpg\" /><br /></p><p>One day when he opened the book he found he don&#039;t know whether he had read this page before, but he believed &nbsp;that if he know some words in this page, he must read this page before.</p><p>Now tell you the words $HandsomeHow$ knows, and the words in the page, tell him whether he had read this page before.</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line contains an integer $n(1\\leq n \\leq 100)$ - the number of the words $HandsomeHow$ knows.\n\nThen $n$ lines - the words he know.\n\nThe next line contains an integer $m(1\\leq m \\leq 100)$ - the\nnumber of the words in this page.\n\nThen $m$ lines -the words in the page.\n\nThe length of the each word in the page and $HandsomeHow$ knows is less than $20$.\n\nWords only contain lowercase letters($a,b ... x,y,z$)", "output_description": "For each test case, output one line \"YES\" (without quotes) if $HandsomeHow$ had read this page before, and \"NO\" (without quotes) otherwise.", "samples": "[{\"input\": \"3\\n3\\nhello\\nworld\\nnice\\n2\\nnice\\nbook\\n2\\nhello\\nworld\\n2\\ngood\\nbook\\n2\\nnice\\nbook\\n2\\ngood\\nbook\\n\", \"output\": \"YES\\nNO\\nYES\"}]", "test_case_id": "b8fbe4bd704f974bb92a5cf4f8a0db1f", "hint": "<p>In the first example:</p><p>$HandsomeHow$ knows &quot;nice&quot;, and it appears in the page.</p><p>In the second example:</p><p>$HandsomeHow$ doesn&#039;t all the words in the page.</p><p>In the second example:</p><p>$HandsomeHow$ knows the words &quot;book&quot;</p>", "create_time": "2017-05-07T09:10:51.624Z", "last_update_time": "2017-05-07T09:12:23.388Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 18, "total_accepted_number": 9, "difficulty": 1, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b", "tags": [14, 19, 20]}}, {"model": "problem.problem", "pk": 2364, "fields": {"title": "A room Problem(easy)", "description": "<p>Everyday, $YeahPeng$ walks up many stairs to the room. One Day, a problem comes to him. There are $n$ stairs\uff0cand he can walk up stairs which is one, two, or three stairs in single step. He wants to know how many ways to reach the top.<br /></p><p><b style=\"background-color: transparent;\">There may be too many ways, so output the ans mod $(10^9+7)$.</b></p><p><img src=\"/static/upload/10948bd05f63bc8b0c5ba88650196cd1.jpg\" alt=\"e19543c2bab924a3b0a0d19433e0773b8afc9d72.jpg\" /><br /></p>", "input_description": "The first line: the number of case $T(1 \\leq T \\leq 1000)$ \nThen $T$ lines follow, each line contains one integers: $n(2 \\leq n \\leq 1000)$", "output_description": "For each case, out put an integer $v$ one line  -- the number of the ways mod $10^9+7$", "samples": "[{\"input\": \"2\\n3\\n4\\n\", \"output\": \"2\\n4\\n\"}]", "test_case_id": "39a87b529abbab4570cc1e3294f53367", "hint": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Case 1\uff1a</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">1 -&gt; 2 -&gt; 3</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">1 -&gt; 3</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Case 2:</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">1 -&gt; 2 -&gt; 3-&gt;4</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">1 -&gt; 2-&gt; 4</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">1 -&gt; 3-&gt; 4</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">1 -&gt;4</p>", "create_time": "2017-05-07T09:10:52.186Z", "last_update_time": "2017-05-07T09:12:38.323Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 32, "total_accepted_number": 13, "difficulty": 2, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b", "tags": [21]}}, {"model": "problem.problem", "pk": 2365, "fields": {"title": "A room Problem (medium)", "description": "<p>Everyday, $YeahPeng$ walks up many stairs to the room. One Day, a problem comes to him. There are $n$ stairs\uff0cand he can walk down the stairs $k$ times <b>at most</b> which is one stair in single time or walk up stairs which is one, two, or three stairs in single step. He wants to know how many ways to reach the top.<br /></p><p><b>There may be too many ways, so output the ans mod $(10^9+7)$.</b></p><p><img src=\"/static/upload/206212086bb0f760e61ead46aa842101.jpg\" alt=\"c05e644de3f26ee0a5d408c0e6f914e4c0af2b48.jpg\" /></p>", "input_description": "The first line: the number of case $T(1 \\leq T \\leq 110)$ \nThen $T$ lines follow, each line contains two integers: $n,k (1 \\leq n \\leq 1000, 0 \\leq  k \\leq 1000)$", "output_description": "For each case, out put an integer $v$ one line  -- the number of the ways mod $10^9+7$", "samples": "[{\"input\": \"2\\n3 0\\n3 1\\n\", \"output\": \"2\\n6\\n\"}]", "test_case_id": "9800acc30d7faf5fdaaf62c0873cfc66", "hint": "<p>Case 1\uff1a</p><p>1 -&gt; 2 -&gt; 3</p><p>1 -&gt; 3</p><p>Case 2:</p><p>1 -&gt; 2 -&gt; 3</p><p>1 -&gt; 3</p><p>1 -&gt; 2 -&gt; 1 -&gt; 2 -&gt; 3</p><p>1 -&gt; 2 -&gt; 1 -&gt; 3</p><p>1 -&gt; 3 -&gt; 2 -&gt; 3</p><p>1 -&gt; 2 -&gt; 3 -&gt; 2 -&gt; 3&nbsp;</p>", "create_time": "2017-05-07T09:10:52.652Z", "last_update_time": "2017-05-07T09:13:00.220Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 10, "total_accepted_number": 6, "difficulty": 3, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b", "tags": [17]}}, {"model": "problem.problem", "pk": 2366, "fields": {"title": "A chess Problem (easy)", "description": "<p>&nbsp;In chinese chess, &quot;\u9a6c&quot; is an interesting piece, when it is at position $(x,y)$, it can move to$(x\u22122,y\u22121),(x\u22122,y+1),(x\u22121,y\u22122),(x\u22121,y+2),(x+1,y\u22122),(x+1,y+2),(x+2,y\u22121), (x+2,y+1)$,<br /></p><p>Now the problem is, when a \u201c\u9a6c\u201d is at position $(x,y)$, how many ways does it have for he to move to $(x_0,y_0)$.</p><p><b>To&nbsp;simplify this problem, when our &quot;\u9a6c&quot; is at $(x,y)$, it can only move to $(x+1,y+2) $ or $ (x+2,y+1)$</b></p><p><font><br /></font></p><p><img src=\"/static/upload/8f5213e3b937189b78ab523a0d7a8161.png\" alt=\"UPR4BJ7X[25OJG[[WQNK5%F.png\" /><br /></p>", "input_description": "The first line: the number of case $T( \\leq T \\leq 100)$\nThen T lines follow, each line contains four integers: $x,y,x_0,y_0(0 \\leq x,y,x_0,y_0 \\leq 8)$ - the position the \"\u9a6c\" at and the position it want's to go.", "output_description": "For each case, out put an integer $ans$ one line -- the number of the ways to go from $(x,y)$ to $(x_0,y_0)$", "samples": "[{\"input\": \"3\\n0 0 3 3\\n0 0 6 6\\n3 3 6 6\\n\", \"output\": \"2\\n6\\n2\\n\"}]", "test_case_id": "044eb721338d94da83ec394828175cd6", "hint": "<p>In the first example:</p><p></p><p></p><p></p><p>$(0,0) -&gt; (2,1) -&gt; (3,3) $,$(0,0) -&gt; (1,2) -&gt; (3,3) $</p><p>In the second example:</p><p>$(0,0) -&gt; (2,1) -&gt; (4,2) -&gt; (5,4) -&gt; (6,6),(0,0) -&gt; (2,1) -&gt; (3,3) -&gt; (5,4) -&gt; (6,6)$</p><p>$(0,0) -&gt; (2,1) -&gt; (3,3) -&gt; (4,5) -&gt; (6,6),(0,0) -&gt; (1,2) -&gt; (3,3) -&gt; (5,4) -&gt; (6,6)$</p><p>$(0,0) -&gt; (1,2) -&gt; (3,3) -&gt; (4,5) -&gt; (6,6),(0,0) -&gt; (1,2) -&gt; (2,4) -&gt; (4,5) -&gt; (6,6)$</p><p>In the third example:</p><p>$(3,3) -&gt; (5,4) -&gt; (6,6),(3,3) -&gt; (4,5) -&gt; (6,6)$</p>", "create_time": "2017-05-07T09:10:55.471Z", "last_update_time": "2017-05-07T09:13:24.660Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 22, "total_accepted_number": 6, "difficulty": 1, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b", "tags": [14, 17, 21, 22]}}, {"model": "problem.problem", "pk": 2367, "fields": {"title": "A  chess Problem (medium)", "description": "<p>The term of this problem is the same as <a href=\"http://swjtuoj.cn/contest/6/problem/52/\" target=\"_blank\">the previous one</a>, the only exception \u2014 increased restrictions.</p><p>Since the ans may be too large, out put the ans mod $(10^9+7)$</p>", "input_description": "The first line: the number of case T(\u2264T\u22641000)\nThen T lines follow, each line contains four integers: x,y,x0,y0(0\u2264x,y,x0,y0\u2264100000) - the position the \"\u9a6c\" at and the position it want's to go.", "output_description": "For each case, out put an integer ans one line -- the number of the ways to go from (x,y) to (x0,y0) mod $10^9+7$", "samples": "[{\"input\": \"3\\n0 0 3 3\\n0 0 6 6\\n3 3 6 6\", \"output\": \"2\\n6\\n2\"}]", "test_case_id": "dd5daf36cbef2aba25f615fa0bc847ba", "hint": "<p style=\"font-size: 15px;\">In the first example:</p><p style=\"font-size: 15px;\">(0,0)\u2212&gt;(2,1)\u2212&gt;(3,3),(0,0)\u2212&gt;(1,2)\u2212&gt;(3,3)</p><p style=\"font-size: 15px;\">In the second example:</p><p style=\"font-size: 15px;\">(0,0)\u2212&gt;(2,1)\u2212&gt;(4,2)\u2212&gt;(5,4)\u2212&gt;(6,6),(0,0)\u2212&gt;(2,1)\u2212&gt;(3,3)\u2212&gt;(5,4)\u2212&gt;(6,6)</p><p style=\"font-size: 15px;\">(0,0)\u2212&gt;(2,1)\u2212&gt;(3,3)\u2212&gt;(4,5)\u2212&gt;(6,6),(0,0)\u2212&gt;(1,2)\u2212&gt;(3,3)\u2212&gt;(5,4)\u2212&gt;(6,6)</p><p style=\"font-size: 15px;\">(0,0)\u2212&gt;(1,2)\u2212&gt;(3,3)\u2212&gt;(4,5)\u2212&gt;(6,6),(0,0)\u2212&gt;(1,2)\u2212&gt;(2,4)\u2212&gt;(4,5)\u2212&gt;(6,6)</p><p style=\"font-size: 15px;\">In the third example:</p><p style=\"font-size: 15px;\">(3,3)\u2212&gt;(5,4)\u2212&gt;(6,6),(3,3)\u2212&gt;(4,5)\u2212&gt;(6,6)</p>", "create_time": "2017-05-07T09:10:56.037Z", "last_update_time": "2017-05-07T09:13:43.281Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 12, "total_accepted_number": 4, "difficulty": 2, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b", "tags": [21]}}, {"model": "problem.problem", "pk": 2368, "fields": {"title": "A chess Problem (hard)", "description": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">The term of this problem is the same as&nbsp;<a href=\"http://swjtuoj.cn/contest/6/problem/52/\" target=\"_blank\">the previous one</a>, the only exception \u2014 increased restrictions.</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Since the ans may be too large, out put the ans mod $(10^4+7)$</p>", "input_description": "The first line: the number of case T(\u2264T\u22641000)\nThen T lines follow, each line contains four integers: x,y,x0,y0(0\u2264x,y,x0,y0\u226410000000) - the position the \"\u9a6c\" at and the position it want's to go.", "output_description": "For each case, out put an integer ans one line -- the number of the ways to go from (x,y) to (x0,y0) mod $10^4+7$", "samples": "[{\"input\": \"3\\n0 0 3 3\\n0 0 6 6\\n3 3 6 6\", \"output\": \"2\\n6\\n2\"}]", "test_case_id": "0b548abfc608aca8e0e1a7a8c4e85138", "hint": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 15px;\">In the first example:</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 15px;\">(0,0)\u2212&gt;(2,1)\u2212&gt;(3,3),(0,0)\u2212&gt;(1,2)\u2212&gt;(3,3)</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 15px;\">In the second example:</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 15px;\">(0,0)\u2212&gt;(2,1)\u2212&gt;(4,2)\u2212&gt;(5,4)\u2212&gt;(6,6),(0,0)\u2212&gt;(2,1)\u2212&gt;(3,3)\u2212&gt;(5,4)\u2212&gt;(6,6)</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 15px;\">(0,0)\u2212&gt;(2,1)\u2212&gt;(3,3)\u2212&gt;(4,5)\u2212&gt;(6,6),(0,0)\u2212&gt;(1,2)\u2212&gt;(3,3)\u2212&gt;(5,4)\u2212&gt;(6,6)</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 15px;\">(0,0)\u2212&gt;(1,2)\u2212&gt;(3,3)\u2212&gt;(4,5)\u2212&gt;(6,6),(0,0)\u2212&gt;(1,2)\u2212&gt;(2,4)\u2212&gt;(4,5)\u2212&gt;(6,6)</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 15px;\">In the third example:</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 15px;\">(3,3)\u2212&gt;(5,4)\u2212&gt;(6,6),(3,3)\u2212&gt;(4,5)\u2212&gt;(6,6)</p>", "create_time": "2017-05-07T09:10:56.631Z", "last_update_time": "2017-05-07T09:13:52.842Z", "created_by": 1, "time_limit": 1000, "memory_limit": 64, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 15, "total_accepted_number": 9, "difficulty": 2, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b", "tags": [21]}}, {"model": "problem.problem", "pk": 2369, "fields": {"title": "Tickets", "description": "<p>Bamboo want to buy a ticket cost P. she can buy the ticket by app and get a concession to D. At the same time, she can appoint an agent and have different discount. Please tell her what kind of way is most economical and the minimum cost. Print the first way if there is more than one possibility.<br /></p>", "input_description": "Input contains multiple test cases. \nThe first line of each test contains three integers P, D, n. (1 <= P, D <= 1e9, 1 <= n <= 1e5), the ticket price, the concession of app and the number of agent.\nThe second n line contains a real number a[i], the discount of i th agent.", "output_description": "For each test case, print a line. Print \u201cAPP\u201d if buy ticket by app or print the agent\u2019s order if buy ticket by appoint an agent. And an integer means the minimum cost, keeping two decimal places.", "samples": "[{\"input\": \"600 20 3\\n0.01\\n0.03\\n0.02\\n600 10 3\\n0.01\\n0.03\\n0.02\\n\", \"output\": \"APP 580.00\\n2 582.00\"}]", "test_case_id": "c0a4c3270b503cd7c354ef82becf6430", "hint": "", "create_time": "2017-05-09T04:51:16.293Z", "last_update_time": "2017-05-09T04:52:52.143Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b\u70ed\u8eab\u8d5b", "tags": [14]}}, {"model": "problem.problem", "pk": 2370, "fields": {"title": "Wave string", "description": "<p>There is a kind of string called \u201cwave string\u201d. If str is made as s1s2s3...sL-1sLsL-1sL-2...s2s1s2s3...., we will call it \u201cwave string\u201d and s1s2s3...sL and sLsL-1...s1 are its waves and they must appear alternately.</p><p>For example, \u201cabc\u201d, \u201cabcba\u201d, \u201cabcbabc\u201d,\u201dabcbabcba\u201d... are wave strings. But they have different number of wave, \u201cabc\u201d have 1 wave, \u201cabcba\u201d have 2 waves(abc,cba), \u201cabcbabc\u201d have 3 waves(abc,cba,abc).</p><p>Now, s is a string of lenth n(s1s2s3s4s5...sn), and str is a wave string which is a substring of s(sisi+1si+2...si+m-1) . We have known i and L and we want to know the maxium number of wave str have.</p>", "input_description": "Input contains multiple test cases. \nEach test case: \nThe first line is a string s (1<= |s| <= 10^6)\nThe second line is a integer k (1 <= k <= 10^5)\nThe next k lines, each line is i and L, (1<= i <=|s|,2 <= L <=10^4).", "output_description": "k lines, each lines is the maxium number of wave str have.", "samples": "[{\"input\": \"aabaab\\n2\\n1 2\\n1 3\\nabcbabcbabc\\n5\\n1 2\\n1 3\\n3 2\\n3 3\\n10 3\\n\", \"output\": \"1\\n2\\n1\\n5\\n1\\n4\\n0\"}]", "test_case_id": "74dacb7954f99accf47119e6976849bc", "hint": "", "create_time": "2017-05-09T04:51:28.684Z", "last_update_time": "2017-05-09T04:53:44.699Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 2, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b\u70ed\u8eab\u8d5b", "tags": [19]}}, {"model": "problem.problem", "pk": 2371, "fields": {"title": "The road ahead to be boundless", "description": "<p>We will find life is difficult and run into a stone wall sometimes. But we must go ahead because there is no way to turn back. Recently in the last Labor Day, UsedRose and Yeah with some friends went to park. Unfortunately they were trapped by a storm. So they must drive back to school. But they only have one car and the car can take two people at most. The important thing is that the car\u2019s speed depend on the person who is the slowest in the car. They are a team, so they ask for your help to let all people go back to school as soon as possible.<br /></p>", "input_description": "Input contains multiple test cases. \nEach test case contains an integer n (1<=N<=10000),m(999 <= m <= 999999),Said a total of N people to cross the river.and the length of river is m.\nNext row contains n integers ni, show the i-th people\u2019s speed that he can accept max .(1 <= ni <= 1000)", "output_description": "For each test case, Print a line, the times of everyone can go back to school(round up to an integer) and make as soon as possible.", "samples": "[{\"input\": \"3 999\\n1 10 100\\n2 9999\\n1 1\\n4 30\\n30 15 6 5\", \"output\": \"1109\\n9999\\n13\"}]", "test_case_id": "377e4d410d3999cd16f993ee6dab0431", "hint": "", "create_time": "2017-05-09T04:51:34.005Z", "last_update_time": "2017-05-09T04:54:04.052Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 2, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b\u70ed\u8eab\u8d5b", "tags": [23]}}, {"model": "problem.problem", "pk": 2372, "fields": {"title": "King\u2019s Knight", "description": "<p>Long time ago, there was a powerful magic kingdom. The king led his Knights to go on an expedition in order to acquire more treasure. When they came back, the king decided to reward the Knights who fought for him.</p><p>The king declared that every Knight would gain A coins during the first year. Every year after the first year the gold they would gain are Q times as many as the last year. Could you please help the Knights count how many coins would they gain N years later\uff1f(The answer must be very large, so give the answer module M)</p><p>(1&lt;=T&lt;=50,1&lt;=A&lt;=500,1&lt;=Q&lt;=500,2&lt;=M&lt;=10^9+7,1&lt;=P&lt;=1000)</p>", "input_description": "The first line of the input contains integer t ? the number of the test cases\nFor each case:\nThe first line of the input contains three integers A, Q, M ? the gold of the first year, the number of the multiple and the modulus.\nThe second line of the input contains a P-digits Big Integer n ? the number of years", "output_description": "For each case there must be an integer. The answer that module M.", "samples": "[{\"input\": \"2\\n1 2 100\\n3\\n1 3 101\\n3\\n\", \"output\": \"7\\n13\\n\"}]", "test_case_id": "bd0934faf03a6a9ed99a54e6277cb426", "hint": "", "create_time": "2017-05-09T04:51:35.880Z", "last_update_time": "2017-05-09T04:54:20.001Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 2, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b\u70ed\u8eab\u8d5b", "tags": [21]}}, {"model": "problem.problem", "pk": 2373, "fields": {"title": "DaVinci code", "description": "<p>DaVinci Code is a famous novel which is written by Dan Brown. And a DaVinci Code Tube is a lock that has five code wheels. Only you put the code wheels into a right order, could you open the lock. Catfish is a person who is very curious. So after a few days, he finally made one, which is different from that one in the novel. The tube he made has only four Alphabet code wheels, and each wheel only contains eight characters in upper case. They are \u2018A\u2019,\u2019B\u2019,\u2019C\u2019,\u2019D\u2019,\u2019E\u2019,\u2019F\u2019,\u2019G\u2019 and \u2018H\u2019. In order to open the code tube, you have to put the code wheel to the right order. Each time, you could add or minus 1 to any character. When add 1 to \u2018H\u2019, the character will change to \u2018A\u2019 and minus 1 to \u2018A\u2019, the character will change to \u2018H\u2019. You could also exchange the character with its neighbor. Each action will cost one step. Catfish wants to know that how can we use minimum number of steps to open the code tube.</p><p>(1&lt;=t&lt;=20)</p>", "input_description": "The first line of the input contains integer t ? the number of the test cases\nFor each case:\nThe first line of the input contains four characters ? the beginning of the code tube\nThe second line of the input contains four characters ?the password of the code tube", "output_description": "For each case there must be an integer. The minimum number of steps", "samples": "[{\"input\": \"2\\nAAAA\\nAAAB\\nAAAH\\nBAHA\\n\", \"output\": \"1\\n2\"}]", "test_case_id": "8823e4048edfc4a750dde4a020367486", "hint": "", "create_time": "2017-05-09T04:51:36.627Z", "last_update_time": "2017-05-09T04:54:47.253Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 1, "difficulty": 1, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b\u70ed\u8eab\u8d5b", "tags": [24]}}, {"model": "problem.problem", "pk": 2374, "fields": {"title": "Legend of the Galactic Heroes", "description": "<p>\u201cThere are something can be done, something can\u2019t.\u201d</p><p>In 799 years of The Milky Calendar, Yang Wen-li commanded the Iserlohn Fleet to defense the Reinhard\u2019s attack. Yang deeply understands the enemy is stronger than his fleet. The idea here is to avoid a head on battle with a strong enemy, and instead strike at his weakness elsewhere. The emperor fleet was divided into n parts, named 1,2,3\u2026n from left to right. The numbers of warships in i th fleet is ai. Similarly, Yang sent out n fleets and the numbers is bi.(|ai|,|bi| &lt;= 1e4)</p><p>M messages formatted \u201cl r k\u201d about battlefield were sent to Flagship Hyperion and they are sorted in time-ordered. The massage expresses \u201ck is the sum of emperor\u2019s fleets subtract the sum of Yang\u2019s in [l,r]\u201d.But the information passing sometimes make mistakes. The task is checking messages and tell Yang how many conflicts happen(You can ignore the messages have conflicts with previous messages). The fate of Yang\u2019s Fleet depends on you, go for it!</p>", "input_description": "Input contains multiple test cases.\nThe first line of each test contains two integers n, m. (1 <= n <= 1e5,1 <= m <= 1e4)\nThe following m lines have three integer l, r, k (1 <= l <= r <= n, |k| <= 1e9)", "output_description": "For each test case, Print a integer, the numbers of conflicts.", "samples": "[{\"input\": \"4 3\\n1 2 1\\n3 4 2\\n1 4 2\\n4 4\\n1 1 1\\n1 2 2\\n1 3 3\\n1 4 4\\n\", \"output\": \"1\\n0\"}]", "test_case_id": "81318fa08392d85f9fb284cd3a118c8a", "hint": "", "create_time": "2017-05-09T04:51:37.181Z", "last_update_time": "2017-05-09T04:55:10.562Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 2, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b\u70ed\u8eab\u8d5b", "tags": [25]}}, {"model": "problem.problem", "pk": 2375, "fields": {"title": "White album 2", "description": "<p>\u201cWhy is it go? ...For the first time having a person I love, and a person who can be lifetime friend. Two piece of happiness come together, and they bring more happiness to me. What I get should be wonderful time like a dream. But why is it go?\u201d</p><p>The \u201chappiness\u201d has a value called \u201cfavor degree\u201d. One piece of happiness can bring more happiness. Unfortunately, Touma can only choose one of them. She can choose different happiness to get if she gets the same happiness twice or more. Touma knows the happiness\u2019 \u201cfavor degree\u201d and some information meaning happiness A can brings happiness B. How much \u201cfavor degree\u201d Touma can get? And, if Touma gets the same happiness more than once, the \u201cfavor degree\u201d will only be counted once. At first time Touma have the 1th Happiness.</p>", "input_description": "Input contains multiple test cases. \nThe first line of each test contains two integers n, m. (1 <= n <= 1e4, 1 <= m <= 1e5),n is the number of happiness, m is the number of information.\nThe second line contains n integers v[i], the \u201cfavor degree\u201d of i th happiness.(0 < v[i] <= 1e4)\nThe following m lines have three integer a, b (1 <= a, b <= n), meaning happiness a can bring happiness b.", "output_description": "For each test case, Print a integer, the maximum \u201cfavor degree\u201d Touma can get.", "samples": "[{\"input\": \"6 6\\n2 4 3 5 4 4\\n1 2\\n2 4\\n1 3\\n3 5\\n3 6\\n6 3\\n\", \"output\": \"13\"}]", "test_case_id": "499d4453e4bb0ed70df32c5e864716b1", "hint": "", "create_time": "2017-05-09T04:51:37.812Z", "last_update_time": "2017-05-09T04:59:14.200Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 7, "total_accepted_number": 1, "difficulty": 2, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b\u70ed\u8eab\u8d5b", "tags": [26]}}, {"model": "problem.problem", "pk": 2376, "fields": {"title": "Put an elephant into a refrige", "description": "<p>Yesterday when i had a talk with my bamboo, he said that he went hunting recently and harvest the highly. So he wants to have a party, but he has too much dead elephant. Fortunately,he also has many refrigerators, and he want to put everyone elephant into a refrigerator. Elephants were put on an X-coordinate axis. The i-th elephant&#039;s coordinate is Xi meters. Bamboo can only put an elephant into a refrigerator once, and his start position is the point in the x-coordinate axis. Putting an elephant into a refrigerator does not cost time, but every elephant will decay if it isn\u2019t in the refrigerator, and the i-th elephant has a decay speed vi.</p><p>Now he wants to let the sum of elephants decay is minimum. Would you please calculate the minimum decay of all elephants?</p>", "input_description": "Input contains multiple test cases. \nEach test case contains two integers N (1<= N <= 2000),V(V > 0),X(x > 0),represents the number of elephants, the speed and start position of bamboo.\nThen N lines followed. Each line contains two integers Xi ( Xi >= 0 ), Yi(Yi >=0),which showed i-th elephant\u2019s position and decay speed.", "output_description": "For each test case, Print a line, the sum of decay that is minimum.", "samples": "[{\"input\": \"1 1 1\\n1 1\\n2 1 0\\n1 1\\n2 2\\n\", \"output\": \"0\\n5\"}]", "test_case_id": "e70d02fffdeae30906c85746d54d6c1f", "hint": "", "create_time": "2017-05-09T04:51:38.376Z", "last_update_time": "2017-05-09T05:00:00.817Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 2, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b\u70ed\u8eab\u8d5b", "tags": [17]}}, {"model": "problem.problem", "pk": 2377, "fields": {"title": "Buy buy buy", "description": "<p>yeahpeng like apple very much. One day, he comes to the street of apple and so many watermelons which make him want to &quot;buy buy buy&quot;. But, he cant not buy all because of money. So, he makes a rule to buy watermelons.</p><p>There are n stores on the street. yeahpeng will start at the first store and end in the last store. And he will buy one or zero watermelon in every store and never turn back.</p><p>Every watermelon has its price p and weight w. If the price of previous in jth store he buy is pj and the next one in ith store is pi, there mush be i &gt; j and pi - ki &lt;= pj &lt;= pi + ki, the first watermelon he could buy in any store.</p><p>yeahpeng want to get the maximum sum of weight.</p>", "input_description": "Input contains multiple test cases. \nEach test case: \nBegin with an integer n(1 <= n <= 30000), \nn lines follow, each with three integers: pi wi ki (1 <= pi <= 10^10, 1 <= wi <= 10^6, 1 <= ki <= 10^10)", "output_description": "One line: the maximum sum of weight", "samples": "[{\"input\": \"3\\n2 2 1\\n6 3 1\\n5 3 3\\n6\\n1 1 1\\n2 1 1\\n3 2 1\\n1 2 1\\n2 2 1\\n3 2 1\\n\", \"output\": \"6\\n8\\n\"}]", "test_case_id": "4731c89e07c500b508322329f2b8d3a7", "hint": "", "create_time": "2017-05-09T04:51:39.258Z", "last_update_time": "2017-05-09T05:00:15.242Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 2, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b\u70ed\u8eab\u8d5b", "tags": [17, 20]}}, {"model": "problem.problem", "pk": 2378, "fields": {"title": "Escape from the earth", "description": "<p>It is said that the doomsday will come and earth would be destroyed. n people want to escape from earth. There are m stars can be arrived. Moreover, some of them are suitable for a particular person. Within the limit of resource, i th star\u2019s maximum capacity is ai. Can you find a feasible solution to make everyone arrive a star suit him?<br /></p>", "input_description": "Input contains multiple test cases.\nThe first line of each test contains two integers n, m. (1 <= n <= 1e5, 1 <= m <= 10), the number of people and the number of stars.\nThe second n line contains m integers k [i, j], k [i, j] = 1 means star j suit person i and k [i, j] = 0 means unsuitable.\nThe last line have m integer a[i] (1 <= a[i] <= 1e5), meaning star i \u2019s maximum capacity is a[i].", "output_description": "For each test case, Print a line \u201cYES\u201d if everyone can arrive a star suit him and \u201cNO\u201d if can\u2019t.", "samples": "[{\"input\": \"1 1\\n1\\n1\\n\\n2 2\\n1 0\\n1 0\\n1 1\\n\", \"output\": \"YES\\nNO\"}]", "test_case_id": "ae43ec78413d095a7c16f17a099b0883", "hint": "", "create_time": "2017-05-09T04:51:42.557Z", "last_update_time": "2017-05-09T05:00:29.485Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 2, "source": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b\u70ed\u8eab\u8d5b", "tags": [26]}}, {"model": "problem.problem", "pk": 2379, "fields": {"title": "\u5e9f\u7ebf\u3010\u5e9f\u5f03\u8f66\u7ad9\u7684\u4e0b\u8f66\u4e4b\u65c5\u3011(\u672a\u7ffb\u8bd1)", "description": "<p>\u5728\u65e0\u4eba\u6240\u77e5\u94c1\u9053\u4e0a\u7684\u5e9f\u5f03\u8f66\u7ad9\u4e2d\uff0c\u6709\u8bb8\u591a\u5e7d\u7075\u5f77\u5fa8\u3002</p><p>&nbsp;\u6211\u4eec\u5c06\u5e9f\u5f03\u8f66\u7ad9\u6309\u7167\u987a\u5e8f\u4f9d\u6b21\u6807\u8bb0\u4e3a1\uff0c2...n\uff0c\u5728\u7b2ci\u4e2a\u5e9f\u5f03\u8f66\u7ad9\u6709\u7740ai\u53ea\u5e7d\u7075\uff0c\u800c\u7d2b\u65f6\u5e38\u4f1a\u5728\u67d0\u4e2a\u8f66\u7ad9\u5c55\u5f00\u88c2\u9699\uff0c\u8ba9\u8f7d\u6709\u5e7d\u7075\u7684\u5217\u8f66\u51fa\u73b0\u5728\u6b64\u5904\uff0c\u5e76\u6cbf\u7740\u94c1\u9053\u5f00\u5411\u7b2cn\u4e2a\u7ad9\uff0c\u5f53\u5217\u8f66\u5728\u8f66\u7ad9x\u51fa\u73b0\u65f6\uff0c\u6709k\u4e2a\u5e7d\u7075\u4f1a\u5728\u6b64\u5904\u4e0b\u8f66\uff0c\u800c\u5728\u7b2cx+1\u4e2a\u8f66\u7ad9\uff0c\u4f1a\u6709k+d\u4e2a\u5e7d\u7075\u4e0b\u8f66\uff0c\u4f9d\u6b64\u7c7b\u63a8\uff0c\u5728\u7b2cx+y\u4e2a\u8f66\u7ad9\uff0c\u4f1a\u6709k+y*d\u4e2a\u5e7d\u7075\u4e0b\u8f66\uff0c\u76f4\u5230\u5217\u8f66\u4ece\u7b2cn\u4e2a\u7ad9\u5f00\u8fc7\uff0c\u6d88\u5931\u5728\u53e6\u4e00\u4e2a\u88c2\u9699(\u5217\u8f66\u4ee5\u5149\u901f\u884c\u9a76\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u4e9b\u5e7d\u7075\u662f\u540c\u65f6\u4e0b\u8f66\u7684)\u3002\u800c\u5728\u67d0\u4e9b\u65f6\u523b\uff0c\u5c0f\u753a\u524d\u53bb\u67d0\u4e2a\u7ad9\u5f15\u5bfc\u5e7d\u7075\uff08\u8fd9\u4e2a\u7ad9\u7684\u5e7d\u7075\u6570\u91cf\u4f1a\u53d8\u4e3a0\uff09\uff0c\u73b0\u5728\u7ed9\u51fa\u5217\u8f66\u5f00\u884c\u548c\u5c0f\u753a\u5230\u6765\u7684\u4fe1\u606f\uff0c\u8bf7\u4f60\u544a\u8bc9\u5c0f\u753a\u5728\u5979\u53bb\u67d0\u4e2a\u7ad9\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u7ad9\u6709\u591a\u5c11\u5e7d\u7075\u3002</p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T,\u8868\u793a\u6570\u636e\u7ec4\u6570.\n\u63a5\u4e0b\u6765\u662fT\u7ec4\u6570\u636e.\n\u6bcf\u7ec4\u6570\u636e\u7684\u4e00\u5f00\u59cb\u6709\u4e24\u4e2a\u6574\u6570n\uff0cm\uff0cd(1<=n<=1e5\uff0c1<=m<=1e5,0<=d<=1e3),\u8868\u793a\u603b\u5171\u6709n\u4e2a\u8f66\u7ad9\uff0cm\u6761\u4fe1\u606f\uff0cd\u7684\u542b\u4e49\u5982\u9898\u4e2d\u6240\u793a\u3002\n\u7b2c\u4e8c\u884cn\u4e2a\u6570a1\uff0ca2...an\uff080<=ai<=1e3\uff09\uff0c\u8868\u793a\u4e00\u5f00\u59cb\u6bcf\u4e2a\u8f66\u7ad9\u4e2d\u5e7d\u7075\u7684\u6570\u91cf\u3002\n\u63a5\u4e0b\u6765m\u884c\u6bcf\u884c\u4e00\u6761\u4fe1\u606f\uff0c\u6709\u4e24\u79cd\u683c\u5f0f\n\u7b2c\u4e00\u79cd\uff1a1 x y\uff0c\u8868\u793a\u5217\u8f66\u4ecex\u7ad9\u5f00\u51fa\uff0c\u5728x\u7ad9\u6709y\u4e2a\u5e7d\u7075\u4e0b\u8f66\n\u7b2c\u4e8c\u79cd\uff1a2 x\uff0c\u8868\u793a\u5c0f\u753a\u6765\u5230\u7b2cx\u4e2a\u8f66\u7ad9\u3002\n(1<=x<=n,0<=y<=1e3)", "output_description": "\u5bf9\u4e8e\u6bcf\u6761\u7b2c\u4e8c\u79cd\u4fe1\u606f\uff0c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5c0f\u753a\u6765\u5230\u8fd9\u4e2a\u8f66\u7ad9\u65f6\u5e7d\u7075\u7684\u6570\u76ee\u5bf91e9+7\u53d6\u6a21\u7684\u503c", "samples": "[{\"input\": \"2\\n6 6 1\\n1 2 3 3 2 1\\n1 1 1\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n5 3 2\\n1 2 3 4 5\\n1 3 0\\n2 4\\n2 4\", \"output\": \"2\\n4\\n6\\n7\\n7\\n6\\n0\"}]", "test_case_id": "5035b40452102f154934317cf46f2b1d", "hint": "<p>&nbsp;\u4ee5\u4e0b\u5217\u51fa\u4e86\u6bcf\u4e2a\u7ad9\u7684\u5e7d\u7075\u6570\u91cf\u53d8\u5316\u3002</p><p>&nbsp;case1\uff1a</p><p>&nbsp;1 2 3 3 2 1</p><p>&nbsp;2 4 6 7 7 7</p><p>&nbsp;0 4 6 7 7 7</p><p>&nbsp;0 0 6 7 7 7</p><p>&nbsp;0 0 0 7 7 7</p><p>&nbsp;0 0 0 0 7 7</p><p>&nbsp;0 0 0 0 0 7</p><p>&nbsp;case2\uff1a</p><p>&nbsp;1 2 3 4 5</p><p>&nbsp;1 2 3 6 9</p><p>&nbsp;1 2 3 0 9</p><p>&nbsp;1 2 3 0 9</p>", "create_time": "2017-05-10T07:25:08.048Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": false, "total_submit_number": 0, "total_accepted_number": 0, "difficulty": 1, "source": "bamboohiko", "tags": [5]}}, {"model": "contest.contest", "pk": 1, "fields": {"title": "The first test contest", "description": "<p><b>nothing</b></p>", "real_time_rank": true, "password": "nope", "contest_type": 2, "start_time": "2016-12-04T04:00:00Z", "end_time": "2016-12-04T04:55:00Z", "create_time": "2016-12-04T03:04:42.224Z", "last_updated_time": "2017-03-16T04:55:43.398Z", "created_by": 1, "visible": false, "groups": []}}, {"model": "contest.contest", "pk": 2, "fields": {"title": "swjtu2017 winter holiday review", "description": "<p>\u5bd2\u5047\u4e13\u9898\u9a8c\u6536</p>", "real_time_rank": true, "password": null, "contest_type": 1, "start_time": "2017-04-09T15:55:00Z", "end_time": "2017-04-09T17:00:00Z", "create_time": "2017-02-27T07:37:16.508Z", "last_updated_time": "2017-04-09T15:52:52.392Z", "created_by": 1, "visible": true, "groups": []}}, {"model": "contest.contest", "pk": 3, "fields": {"title": "2017\u5e743\u6708\u6708\u8d5b", "description": "<p>\u524d\u5341\u5fc5\u987b\u6709\u5956</p><p>AC\u9898\u76ee\u5927\u4e8e\u7b49\u4e8e\u4e00\u9898\u5373\u53ef\u53c2\u52a0\u62bd\u5956\uff0c\u62bd\u5956\u7a0b\u5e8f\u5728\u7fa4\u5185\u516c\u5f00\u3002</p><p>\u6bd4\u8d5b\u4ea4\u6d41\u7fa4\uff1a&nbsp;198757793</p>", "real_time_rank": true, "password": null, "contest_type": 1, "start_time": "2017-03-18T04:00:00Z", "end_time": "2017-03-18T09:00:00Z", "create_time": "2017-03-14T09:59:18.781Z", "last_updated_time": "2017-03-18T03:59:43.633Z", "created_by": 1, "visible": true, "groups": []}}, {"model": "contest.contest", "pk": 4, "fields": {"title": "2017\u5e743\u6708\u6708\u8d5b\u70ed\u8eab", "description": "<p>\u8fd9\u662f2015\u5e7410\u6708\u7684\u6708\u8d5b\u9898\u76ee</p>", "real_time_rank": true, "password": null, "contest_type": 1, "start_time": "2017-03-15T04:00:00Z", "end_time": "2017-03-17T16:00:00Z", "create_time": "2017-03-15T03:12:54.610Z", "last_updated_time": "2017-03-15T04:22:07.802Z", "created_by": 1, "visible": true, "groups": []}}, {"model": "contest.contest", "pk": 5, "fields": {"title": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b\u70ed\u8eab\u8d5b", "description": "<p>\u9898\u76ee\u4e3a\u53bb\u5e74\u7684\u6821\u8d5b\u9898\u76ee</p><p>A-J\u4e3a\u51b3\u8d5b\u9898</p><p>K-Q\u4e3a\u521d\u8d5b\u9898</p><p>\u51b3\u8d5b\u7684\u9898\u89e3\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230</p><p><a href=\"http://blog.csdn.net/bamboohiko/article/details/51356780\" target=\"_blank\">http://blog.csdn.net/bamboohiko/article/details/51356780</a><br /></p><p>\u521d\u8d5b\u7684\u9898\u89e3\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230</p><p><a href=\"http://blog.csdn.net/HandsomeHow/article/category/6202641\" target=\"_blank\">http://blog.csdn.net/HandsomeHow/article/category/6202641</a><br /></p>", "real_time_rank": true, "password": null, "contest_type": 1, "start_time": "2017-04-28T05:00:00Z", "end_time": "2017-05-07T03:30:00Z", "create_time": "2017-03-25T07:42:11.461Z", "last_updated_time": "2017-05-07T02:26:16.796Z", "created_by": 7, "visible": true, "groups": []}}, {"model": "contest.contest", "pk": 6, "fields": {"title": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b", "description": "<p>\u6392\u540d\u524d40\u7684\u961f\u4f0d\u8fdb\u5165\u51b3\u8d5b</p><p>\u53c2\u52a0\u6b64\u6bd4\u8d5b\u8bf7\u5148\u5728\u7f51\u9875\u4e0a\u65b9\u201c<a href=\"http://swjtuoj.cn/groups/\" target=\"_blank\">\u961f\u4f0d</a>\u201d\u5904\u7533\u8bf7\u52a0\u5165\u201c<a href=\"http://swjtuoj.cn/group/3/\" target=\"_blank\">\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u8d44\u683c\u8d5b\u5c0f\u7ec4</a>\u201d</p><p><img src=\"/static/upload/302e5a5d52f7597a8cddb890ca31d294.png\" alt=\"T_M4IIKJ6%S0CIDLBWNUUYK.png\" /><br /></p><p>\u6709\u4efb\u4f55\u95ee\u9898\u8bf7\u5728QQ\u7fa4198757793\u4e2d\u63d0\u95ee</p>", "real_time_rank": true, "password": null, "contest_type": 0, "start_time": "2017-05-07T04:00:00Z", "end_time": "2017-05-07T09:00:00Z", "create_time": "2017-04-22T06:59:21.469Z", "last_updated_time": "2017-05-10T08:54:09.210Z", "created_by": 1, "visible": true, "groups": [3]}}, {"model": "contest.contest", "pk": 7, "fields": {"title": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u51b3\u8d5b\u70ed\u8eab\u8d5b", "description": "<p>\u73af\u5883\u6d4b\u8bd5</p>", "real_time_rank": true, "password": null, "contest_type": 1, "start_time": "2017-05-14T01:00:00Z", "end_time": "2017-05-14T03:00:00Z", "create_time": "2017-04-22T07:01:15.871Z", "last_updated_time": "2017-04-22T07:01:37.259Z", "created_by": 1, "visible": true, "groups": []}}, {"model": "contest.contest", "pk": 8, "fields": {"title": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u51b3\u8d5b", "description": "<p>\u6682\u65e0</p>", "real_time_rank": true, "password": null, "contest_type": 0, "start_time": "2017-05-14T04:00:00Z", "end_time": "2017-05-14T09:00:00Z", "create_time": "2017-04-22T07:02:02.404Z", "last_updated_time": "2017-04-28T02:43:34.189Z", "created_by": 1, "visible": true, "groups": [4]}}, {"model": "contest.contest", "pk": 9, "fields": {"title": "\u7b2c\u5341\u4e09\u5c4aACM\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\u51b3\u8d5b-\u7f51\u7edc\u540c\u6b65\u8d5b", "description": "<p>\u7f51\u7edc\u540c\u6b65\u8d5b</p>", "real_time_rank": true, "password": null, "contest_type": 1, "start_time": "2017-05-14T04:30:00Z", "end_time": "2017-05-14T09:30:00Z", "create_time": "2017-04-25T06:07:04.766Z", "last_updated_time": "2017-05-14T06:01:28.516Z", "created_by": 1, "visible": false, "groups": []}}, {"model": "contest.contest", "pk": 10, "fields": {"title": "\u5c0f\u7ec4\u8d5b\u6d4b\u8bd5", "description": "<p>\u5c0f\u7ec4\u8d5b\u6d4b\u8bd5<br /></p>", "real_time_rank": true, "password": null, "contest_type": 0, "start_time": "2017-04-28T02:00:00Z", "end_time": "2017-04-28T02:10:00Z", "create_time": "2017-04-25T06:12:58.689Z", "last_updated_time": "2017-04-28T02:16:37.485Z", "created_by": 1, "visible": false, "groups": [2]}}, {"model": "contest.contest", "pk": 11, "fields": {"title": "NO", "description": "<p>\u672a\u4f7f\u7528\u7684\u9898<br /></p>", "real_time_rank": true, "password": null, "contest_type": 1, "start_time": "2049-12-31T16:00:00Z", "end_time": "2049-12-31T17:00:00Z", "create_time": "2017-04-25T08:21:15.777Z", "last_updated_time": "2017-05-11T12:36:15.381Z", "created_by": 1, "visible": false, "groups": []}}, {"model": "contest.contest", "pk": 12, "fields": {"title": "\u6253\u5370\u670d\u52a1", "description": "<p>NO</p>", "real_time_rank": true, "password": null, "contest_type": 1, "start_time": "2017-05-14T04:00:00Z", "end_time": "2017-05-14T09:00:00Z", "create_time": "2017-05-14T03:48:01.789Z", "last_updated_time": "2017-05-14T03:51:37.143Z", "created_by": 1, "visible": true, "groups": []}}, {"model": "contest.contestproblem", "pk": 1, "fields": {"title": "a+b", "description": "<p>a+b</p>", "input_description": "a+b", "output_description": "a+b", "samples": "[{\"input\": \"1 2\\n3 4\", \"output\": \"3\\n7\\n\"}]", "test_case_id": "4ee15282a83f1b7a13b8f0d487a2526b", "hint": "", "create_time": "2016-12-04T03:06:56.853Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 4, "total_accepted_number": 3, "contest": 1, "sort_index": "1001", "is_public": false}}, {"model": "contest.contestproblem", "pk": 2, "fields": {"title": "go down", "description": "<p>\u6770\u514b\u51c6\u5907\u4ece\u4e00\u4e2an\u9636\u7684\u697c\u68af\u4e0a\u8d70\u4e0b\u6765,\u6bcf\u4e00\u9636\u4e0a\u90fd\u6709\u4e00\u4e2a\u5206\u6570,\u6770\u514b\u4e00\u6b21\u53ef\u4ee5\u8de8\u4efb\u610f\u9636(\u81f3\u5c11\u4e00\u9636),\u4f46\u662f\u6770\u514b\u6709\u5f3a\u8feb\u75c7\uff0c\u4ed6\u5e0c\u671b\u4ed6\u6bcf\u4e00\u6b21\u6240\u7ad9\u7684\u53f0\u9636\u4e0a\u7684\u5206\u6570\u6bd4\u4ed6\u4e0a\u4e00\u6b65\u6240\u5728\u7684\u9636\u5c42\u7684\u5206\u6570\u8981\u9ad8(\u6bd4\u5982\u4ed6\u4ece\u7b2c\u4e94\u9636\u8df3\u5230\u4e86\u7b2c\u4e09\u9636,\u90a3\u4e48\u7b2c\u4e09\u9636\u7684\u5206\u6570\u8981\u6bd4\u7b2c\u4e94\u9636\u7684\u5206\u6570\u9ad8\u624d\u884c)\u3002\u73b0\u5728\u6770\u514b\u544a\u8bc9\u4f60\u6bcf\u4e00\u9636\u53f0\u9636\u4e0a\u7684\u5206\u6570,\u4ed6\u60f3\u8ba9\u4f60\u5e2e\u4ed6\u7b97\u4e00\u4e0b\u4ed6\u4ece\u7b2cn\u9636\u8d70\u5230\u7b2c1\u9636\u6240\u80fd\u5f97\u5230\u7684\u5206\u6570\u6700\u591a\u662f\u591a\u5c11\u3002</p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T,\u8868\u793a\u6570\u636e\u7ec4\u6570.\n\u63a5\u4e0b\u6765\u662fT\u7ec4\u6570\u636e.\n\u6bcf\u7ec4\u6570\u636e\u7684\u4e00\u5f00\u59cb\u662f\u4e00\u4e2a\u6574\u6570n(1<=n<=1000),\u8868\u793a\u603b\u5171\u6709n\u9636\u53f0\u9636\u3002\n\u63a5\u4e0b\u6765\u662fn\u4e2a\u6570,\u7b2ci\u4e2a\u6570ai\u8868\u793a\u7b2ci\u9636\u53f0\u9636\u7684\u5206\u6570\u662fai(0<ai<10000).\n(\u4fdd\u8bc1a1>an\uff0c\u6240\u4ee5\u6770\u514b\u4e00\u5b9a\u53ef\u4ee5\u8d70\u5230\u7b2c\u4e00\u9636)", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6770\u514b\u4ece\u7b2cn\u9636\u8d70\u5230\u7b2c1\u9636\u6240\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570\u662f\u591a\u5c11\u3002", "samples": "[{\"input\": \"3\\n5\\n10 8 6 4 2\\n5\\n15 4 7 9 1\\n8\\n100 6 5 99 4 3 2 1\", \"output\": \"30\\n25\\n209\\n\"}]", "test_case_id": "8736a8fe654a23c3bd0477a688af841d", "hint": "<p>\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6837\u4f8b\uff0c\u6770\u514b\u53ef\u4ee5\u8d70\u8fd9\u51e0\u96365-&gt;4-&gt;3-&gt;2-&gt;1\u8fd9\u6837\u4ed6\u5f97\u5230\u7684\u5206\u6570\u662f2+4+6+8+10=30</p><p>\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u6837\u4f8b\uff0c\u6770\u514b\u53ef\u4ee5\u8d70\u8fd9\u51e0\u96365-&gt;4-&gt;1 \u8fd9\u6837\u4ed6\u5f97\u5230\u7684\u5206\u6570\u662f15+9+1=25</p>", "create_time": "2017-02-27T08:23:17.279Z", "last_update_time": "2017-04-25T09:44:48.840Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 19, "total_accepted_number": 13, "contest": 2, "sort_index": "A", "is_public": true}}, {"model": "contest.contestproblem", "pk": 3, "fields": {"title": "go down2", "description": "<p>\u8fd9\u4e2a\u9898\u76ee\u548cA\u9898\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u6570\u636e\u8303\u56f4\u4e0d\u4e00\u6837\u3002<br /></p><p>\u6570\u636e\u8f83\u591a\uff0c\u8bf7\u4e0d\u8981\u4f7f\u7528cin</p><p><b style=\"font-family: arial, sans-serif; font-size: 15px;\">\u5982\u679c\u4f60\u5728\u524d\u4e00\u4e2a\u9898\u76ee\u505a\u7684\u590d\u6742\u5ea6\u662fO(n^2),\u90a3\u4e48\u4f60\u5728\u8fd9\u4e2a\u9898\u53ef\u80fd\u9700\u8981\u4f18\u5316\u4e00\u4e0b\uff0c\u628a\u4ed6\u4f18\u5316\u5230O(nlogn)</b><br /></p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T,\u8868\u793a\u6570\u636e\u7ec4\u6570.\n\u63a5\u4e0b\u6765\u662fT\u7ec4\u6570\u636e.\n\u6bcf\u7ec4\u6570\u636e\u7684\u4e00\u5f00\u59cb\u662f\u4e00\u4e2a\u6574\u6570n(1<=n<=100000),\u8868\u793a\u603b\u5171\u6709n\u9636\u53f0\u9636\u3002\n\u63a5\u4e0b\u6765\u662fn\u4e2a\u6570,\u7b2ci\u4e2a\u6570ai\u8868\u793a\u7b2ci\u9636\u53f0\u9636\u7684\u5206\u6570\u662fai(0<ai<10000).\n(\u4fdd\u8bc1a1>an\uff0c\u6240\u4ee5\u6770\u514b\u4e00\u5b9a\u53ef\u4ee5\u8d70\u5230\u7b2c\u4e00\u9636)", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6770\u514b\u4ece\u7b2cn\u9636\u8d70\u5230\u7b2c1\u9636\u6240\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570\u662f\u591a\u5c11\u3002", "samples": "[{\"input\": \"2\\n5\\n5 4 3 2 1\\n5\\n15 4 7 9 1\", \"output\": \"15\\n25\"}]", "test_case_id": "8a4e43a03d3130d83a312d8b46d54e98", "hint": "<p style=\"font-size: 15px;\">\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6837\u4f8b\uff0c\u6770\u514b\u53ef\u4ee5\u8d70\u8fd9\u51e0\u96365-&gt;4-&gt;3-&gt;2-&gt;1\u8fd9\u6837\u4ed6\u5f97\u5230\u7684\u5206\u6570\u662f1+2+3+4+5=15</p><p style=\"font-size: 15px;\">\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u6837\u4f8b\uff0c\u6770\u514b\u53ef\u4ee5\u8d70\u8fd9\u51e0\u96365-&gt;4-&gt;1 \u8fd9\u6837\u4ed6\u5f97\u5230\u7684\u5206\u6570\u662f15+9+1=25</p>", "create_time": "2017-02-27T08:33:42.663Z", "last_update_time": "2017-04-25T09:45:51.640Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 24, "total_accepted_number": 3, "contest": 2, "sort_index": "B", "is_public": true}}, {"model": "contest.contestproblem", "pk": 4, "fields": {"title": "gourd and Homework", "description": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u53ea\u80fd \u52a0\u4e0a\u6216\u8005\u51cf\u53bb- \u4e00\u4e2a\u6570val\uff0c\u6216\u8005\u4e0d\u64cd\u4f5c\u3002</p><p>\u95ee\u80fd\u5426\u4f7f\u6240\u6709\u7684\u6570\u76f8\u540c\u3002</p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570n(1<=n<=1e5)\n\u63a5\u7740\u662fn\u4e2a\u6574\u6570(0<=ai<=1e9)", "output_description": "\u5982\u679c\u80fd\u627e\u5230\u8fd9\u6837\u4e00\u4e2aval\u4f7f\u5f97\u4ed6\u4eec\u53d8\u6210\u4e00\u6837\uff0c\u8f93\u51fa \"YES\", \u5426\u5219\u8f93\u51fa \"NO\"", "samples": "[{\"input\": \"5\\n1 3 3 2 1\\n\", \"output\": \"YES\"}, {\"input\": \"5\\n1 2 3 4 5\\n\", \"output\": \"NO\"}]", "test_case_id": "09f2b37e8c432525523261807e7ff6f2", "hint": "<p>\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6837\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e91,\u7136\u540e\u4f7f\u6240\u6709\u76841+1\uff0c\u4f7f\u6240\u6709\u76842\u4e0d\u52a8\uff0c\u6240\u6709\u76843-1\u3002</p>", "create_time": "2017-03-01T14:15:47.691Z", "last_update_time": "2017-04-25T09:46:27.573Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 25, "total_accepted_number": 14, "contest": 2, "sort_index": "C", "is_public": true}}, {"model": "contest.contestproblem", "pk": 5, "fields": {"title": "\u7f57\u5927\u5e08\u63a8galgame", "description": "<p>\u7f57\u5927\u5e08\u6700\u8fd1\u6c89galgame\u4e0d\u80fd\u81ea\u62d4\uff0c\u4e3a\u4e86\u57f9\u517b\u597d\u611f\u5ea6\uff0c\u4ed6\u9700\u8981\u5236\u4f5c\u5947\u5947\u602a\u602a\u7684\u7269\u54c1\u3002\u6e38\u620f\u91cc\u7f57\u5927\u5e08\u73b0\u5728\u9700\u8981\u5236\u4f5cn\u74f6\u836f\u6c34\uff08\u96fe....\uff09\uff0c\u6bcf\u5236\u4f5c\u4e00\u74f6\u8981x\u79d2\u3002\u4ed6\u73b0\u5728\u6709m\u79cdA\u7c7b\u7269\u54c1\uff0c\u4f7f\u7528\u7b2ci\u79cdA\u7269\u54c1\u9700\u8981\u82b1\u8d39b[i]\u7684\u91d1\u94b1\uff0c\u53ef\u4ee5\u4f7f\u5f97\u6bcf\u74f6\u5236\u4f5c\u65f6\u95f4\u7f29\u77ed\u6210a[i],\uff08\u6700\u591a\u53ea\u80fd\u4f7f\u7528\u4e00\u79cd\u4e14\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff09\uff1b\u4ed6\u8fd8\u6709k\u79cdB\u7c7b\u7269\u54c1\uff0c\u4f7f\u7528\u7b2ci\u79cd\u9700\u8981\u82b1\u8d39d[i]\u7684\u91d1\u94b1\uff0c\u53ef\u4ee5\u7acb\u523b\u5236\u4f5cc[i]\u74f6\u836f\u6c34\uff0cB\u7c7b\u7269\u54c1\u4e5f\u662f\u80fd\u7528\u4e00\u79cd\u4e14\u4e00\u6b21\uff08\u5389\u5bb3\u4e86...\uff09\uff0c\u6211\u4eec\u4fdd\u8bc1\u8f93\u5165\u7684c[i],d[i]\u662f\u975e\u9012\u51cf\u7684\uff0c\u5373d[i] &lt;= d[i+1], c[i] &lt;= c[i+1]\u3002\u6211\u4eec\u7684\u7f57\u5927\u5e08\u53ea\u6709s\u7684\u94b1\uff0c\u4ed6\u53c8\u60f3\u65e9\u65e5\u63d0\u5347\u597d\u611f\u5ea6\uff0c\u7136\u800c\u7f57\u5927\u5e08\u63a8gal\u5df2\u7ecf\u63a8\u6210\u4e86\u54b8\u9c7c\uff0c\u4ed6\u8bf7\u6559\u4f60\uff0c\u4ed6\u6700\u5feb\u80fd\u4ec0\u4e48\u65f6\u95f4\u5b8c\u6210\uff1f</p>", "input_description": "\u7b2c\u4e00\u884c\u8f93\u5165 n,m,k(1\u2009\u2264\u2009n\u2009\u2264\u20092e9,\u20091\u2009\u2264\u2009m,\u2009k\u2009\u22642e5)\n\u7b2c\u4e8c\u884c\u8f93\u5165 x \u548c s\uff082\u2009\u2264\u2009x\u2009\u2264\u20092e9,\u20091\u2009\u2264\u2009s\u2009\u2264\u20092e9\uff09\n\u7b2c\u4e09\u884c\u8f93\u5165 m\u4e2aa[i], 1\u2009\u2264\u2009a[i]\u2009<\u2009x\n\u7b2c\u56db\u884c\u8f93\u5165 m\u4e2ab[i]\uff081\u2009\u2264\u2009bi\u2009\u2264\u20092e9\uff09\n\u7b2c\u4e94\u884c\u8f93\u5165 k\u4e2ac[i] (1\u2009\u2264\u2009c[i]\u2009\u2264\u2009n)\n\u7b2c\u516d\u884c\u8f93\u5165 k\u4e2ad[i] (1\u2009\u2264\u2009d[i]\u2009\u2264\u20092e9)", "output_description": "\u8f93\u51fa\u4e00\u884c\uff0c\u4e3a\u6700\u5c11\u9700\u8981\u82b1\u8d39\u7684\u65f6\u95f4\u3002", "samples": "[{\"input\": \"20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80\", \"output\": \"20\"}]", "test_case_id": "7388b977083176b361b11757ac3c3dcc", "hint": "<p>\u4ed6\u9009\u62e9A\u7c7b\u7b2c\u4e8c\u79cd\uff0cB\u7c7b\u7b2c\u4e8c\u79cd\uff0c\u603b\u8ba120s\u3002</p>", "create_time": "2017-03-02T11:16:21.234Z", "last_update_time": "2017-04-25T09:47:01.533Z", "created_by": 7, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 32, "total_accepted_number": 5, "contest": 2, "sort_index": "D", "is_public": true}}, {"model": "contest.contestproblem", "pk": 6, "fields": {"title": "\u7f57\u5927\u5e08\u5c0f\u59d0\u59d0", "description": "<p>\u7f57\u5927\u5e08\u7528\u4ed6\u7684128G\u76846S\u62cd\u4e86\u8bb8\u8bb8\u591a\u591a\u840c\u59b9\u5b50\u7684\u7167\u7247\uff0c\u5e76\u4e14\u6d17\u4e86\u51fa\u6765\u3002\u4ed6\u65e0\u804a\u7684\u65f6\u5019\u5c31\u559c\u6b22\u628a\u8fd9\u4e9b\u59b9\u5b50\u7684\u7167\u7247\u6392\u6210\u4e00\u6392\uff0c\u4e00\u4e00\u6b23\u8d4f\u3002\u7f57\u5927\u5e08\u7ed9\u4ed6\u6536\u96c6\u7684\u5c0f\u59d0\u59d0\u7684\u7167\u7247\u4e00\u4e00\u6807\u8bb0\u4e86\u5206\u503c\uff08\u53ef\u80fd\u76f8\u540c\uff09\uff0c\u5f53\u7f57\u5927\u5e08\u6b23\u8d4f\u5c0f\u59d0\u59d0\u7167\u7247\u7684\u65f6\u5019\uff0c\u5982\u679c\u540e\u9762\u4e00\u5f20\u7684\u5206\u503c\u4e25\u683c\u5927\u4e8e\u524d\u9762\u4e00\u5f20\uff0c\u90a3\u4e48\u4ed6\u5c31\u4f1a\u83b7\u5f97\u4e00\u70b9\u6109\u60a6\u503c\u3002\u6211\u4eec\u7f57\u5927\u5e08\u770b\u7167\u7247\u662f\u4f1a\u4ece\u5934\u770b\u5230\u5c3e\uff0c\u90a3\u4e48\u6211\u4eec\u8bf7\u95ee\uff0c\u4ed6\u5e94\u8be5\u600e\u4e48\u653e\u7f6e\u7167\u7247\u7684\u4f4d\u7f6e\uff0c\u624d\u80fd\u83b7\u5f97\u6700\u5927\u7684\u6109\u60a6\u503c\uff1f</p>", "input_description": "\u7b2c\u4e00\u884c\u8f93\u5165 n ( 1 <= n <= 1000)\n\u7b2c\u4e8c\u884c\u8f93\u5165n\u4e2a\u5206\u503cdi(1 <= di <= 1000)", "output_description": "\u8f93\u51fa\u4e00\u884c\uff0c", "samples": "[{\"input\": \"5\\n20 30 10 50 40\", \"output\": \"4\"}, {\"input\": \"4\\n200 100 100 200\", \"output\": \"2\"}]", "test_case_id": "137ab28ec5c1dc26f805474dafef8009", "hint": "<p>\u7b2c\u4e00\u7ec4\u6570\u636e 10 20 30 40 50 \u7b54\u68484</p><p>\u7b2c\u4e8c\u7ec4 100 200 100 200</p>", "create_time": "2017-03-02T12:21:40.450Z", "last_update_time": "2017-04-25T09:47:27.593Z", "created_by": 7, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 11, "total_accepted_number": 8, "contest": 2, "sort_index": "E", "is_public": true}}, {"model": "contest.contestproblem", "pk": 7, "fields": {"title": "\u5f8b\u840c\u840c\u586b\u6570", "description": "<p>\u5728\u53e4\u8001\u7684\u963f\u74e6\u6258\u65af\u6709\u8fd9\u4e48\u4e00\u4e2a\u53e4\u8001\u7684\u9884\u8a00\uff0c\u53ea\u8981\u662f\u80fd\u591f\u6311\u6218\u516d\u8292\u661f\u9635\u6210\u529f\u7684\u4eba\uff0c\u5c31\u53ef\u4ee5\u6210\u4e3a\u8fd9\u4e2a\u56fd\u5bb6\u7684\u56fd\u738b\u3002\u73b0\u5728\uff0c\u5f8b\u840c\u840c\u4f5c\u4e3a\u7b2c987654721.33\u4e2a\u6311\u6218\u8005\u524d\u6765\u6311\u6218\u3002\u4e8e\u662f\u7ec6\u5fc3\u7684\u5f8b\u840c\u840c\u53d1\u73b0\u8fd9\u4e2a\u9635\u6cd5\u867d\u7136\u6709\u65e0\u6570\u7684\u53d8\u5316\uff0c\u53ef\u662f\u603b\u6709\u89c4\u5f8b\u627e\u5230\u9635\u6cd5\u7684\u9635\u773cK\uff0c\u4e8e\u662f\u4ed6\u5c06\u89c4\u5f8b\u5f52\u7eb3\u4e3a\uff0c\u53ea\u8981\u75281-12\u628a\u6574\u4e2a\u516d\u8292\u661f\u9635\u586b\u6ee1\u5e76\u4e14\u4f7f\u6bcf\u6761\u76f4\u7ebf\u7684\u6570\u7684\u548c\u90fd\u76f8\u540c\u5c31\u884c\u4e86\uff0c\u8fd9\u65f6\u5019\u53ea\u9700\u8981\u628a\u9635\u773cK\u5904\u7684\u6570\u5b57\u8bb0\u4e0b\u5373\u53ef\u3002\u53ef\u662f\u5f8b\u840c\u840c\u7b97\u4e86\u51e0\u4e2a\u4e4b\u540e\uff0c\u4ed6\u7684\u667a\u5546\u5c31\u88ab\u69a8\u5e72\u4e86\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u4f60\u8fd9\u4e2a\u667a\u6167\u7684\u5316\u8eab\u6765\u534f\u52a9\u4ed6\u89e3\u51b3\u8fd9\u4e2a\u96be\u9898\u6210\u4e3a\u7b2c12450\u4e2a\u56fd\u738b\u5019\u8865\u4e86\uff01</p><p>\u516d\u8292\u661f\u5404\u4e2a\u8282\u70b9\u4ee5\u6309\u7167\u4e0b\u56fe\u987a\u5e8f\u7f16\u53f7</p><p><img src=\"/static/upload/87be34ec8e3d49b44e763d20967aa22b.png\" alt=\"1.png\" /><br /></p><p>\u4e8e\u662f\u7ed9\u4f60\u5df2\u7ecf\u63a8\u7b97\u51fa\u6765\u7684\u6570\u5b57\u4e2a\u6570n\u548c\u9635\u773c\u7684\u4f4d\u7f6ek\uff0c\u4ee5\u53ca\u7d27\u8ddf\u7740\u76842\u884c\u6570\u5b57\uff0c\u7b2c\u4e00\u884c\u8868\u793a\u8fd9n \u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u884c\u8868\u793a\u8fd9n\u4e2a\u4f4d\u7f6e\u7684\u503c\u3002<br /></p>", "input_description": "\u7b2c\u4e00\u884c\u662f2\u4e2a\u6574\u6570n,k,\u5982\u9898\u610f\u6240\u793a\n\u7b2c\u4e8c\u884c\u662fn\u4e2a\u6570,\u7b2ci\u4e2a\u6570ai\u8868\u793aai\u4f4d\u7f6e\u5df2\u7ecf\u8ba1\u7b97\u51fa\n\u7b2c\u4e09\u884c\u662fn\u4e2a\u6570,\u7b2ci\u4e2a\u6570bi\u8868\u793a\u7b2cai\u4e2a\u6570\u586bbi\n\u4fdd\u8bc1\u8f93\u5165\u5408\u6cd5\u4e14\u6709\u552f\u4e00\u89e3", "output_description": "\u8f93\u51fa\u4e00\u884c\uff0c\u4ee3\u8868K\u4f4d\u7f6e\u9700\u8981\u586b\u7684\u6570", "samples": "[{\"input\": \"3 6\\n1 2 12\\n1 8 3\\n\", \"output\": \"10\"}, {\"input\": \"4 8\\n1 9 3 11\\n8 12 10 9\\n\", \"output\": \"2\"}]", "test_case_id": "414b36e0650c45216ca6a6fdc96837e9", "hint": "<p>\u5bf9\u4e8e\u6837\u4f8b\u4e00<br /></p><p><img src=\"/static/upload/e589b15a389a1b20c32681a9b5a6ccf9.png\" alt=\"8M$TF_H_A(FIU36CLE6]4O8.png\" /><br /></p><p>*\u7684\u4f4d\u7f6e\u586b\u516510\u5c31\u597d</p>", "create_time": "2017-03-03T06:03:29.861Z", "last_update_time": "2017-04-25T09:47:55.546Z", "created_by": 7, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 8, "total_accepted_number": 7, "contest": 2, "sort_index": "F", "is_public": true}}, {"model": "contest.contestproblem", "pk": 8, "fields": {"title": "\u821e\u4f1a", "description": "<p>\u4e00\u7fa4\u4eba\u5f00\u821e\u4f1a\uff0c\u6bcf\u4eba\u5934\u4e0a\u90fd\u6234\u7740\u4e00\u9876\u5e3d\u5b50\u3002\u5e3d\u5b50\u53ea\u6709\u9ed1\u767d\u4e24\u79cd\uff0c\u9ed1\u7684\u81f3\u5c11\u6709\u4e00\u9876\u3002\u6bcf\u4e2a\u4eba\u90fd\u80fd\u770b\u5230\u5176\u5b83\u4eba\u5e3d\u5b50\u7684\u989c\u8272\uff0c\u5374\u770b\u4e0d\u5230\u81ea\u5df1\u7684\u3002\u4e3b\u6301\u4eba\u5148\u8ba9\u5927\u5bb6\u770b\u770b\u522b\u4eba\u5934\u4e0a\u6234\u7684\u662f\u4ec0\u5e7a\u5e3d\u5b50\uff0c\u7136\u540e\u5173\u706f\uff0c\u5982\u679c\u6709\u4eba\u8ba4\u4e3a\u81ea\u5df1\u6234\u7684\u662f\u9ed1\u5e3d\u5b50\uff0c\u5c31\u6253\u81ea\u5df1\u4e00\u4e2a\u8033\u5149\u3002\u5df2\u77e5\u6709n\u4e2a\u4eba\u5e26\u9ed1\u5e3d\u5b50\uff0cm\u4e2a\u4eba\u5e26\u767d\u5e3d\u5b50\uff0c\u8bf7\u95ee\u7b2c\u51e0\u6b21\u5173\u706f\uff0c\u624d\u4f1a\u6709\u5288\u5288\u556a\u556a\u6253\u8033\u5149\u7684\u58f0\u97f3\u54cd\u8d77\u3002<br /></p>", "input_description": "\u7b2c\u4e00\u884c\u6570\u5b57N\uff0c\u8868\u793a\u6709N\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002 \n\u63a5\u4e0b\u6765N\u884c\u4e2d\uff0c\u6bcf\u4e00\u884c\u6709\u6570\u5b57n\uff0cm(1 < n, m < 1000)\uff0c\u8868\u793a\u5e26\u9ed1\u5e3d\u5b50\u7684\u4eba\u6570\u548c\u767d\u5e3d\u5b50\u7684\u4eba\u6570\u3002", "output_description": "\u7b2c\u51e0\u6b21\u5173\u706f\uff0c\u624d\u4f1a\u6709\u5288\u5288\u556a\u556a\u6253\u8033\u5149\u7684\u58f0\u97f3\u54cd\u8d77\u3002", "samples": "[{\"input\": \"1\\n1 1\\n\", \"output\": \"1\\n\"}]", "test_case_id": "23823a9657f85e4f60a1b070bc0db950", "hint": "", "create_time": "2017-03-15T04:07:15.165Z", "last_update_time": "2017-03-18T03:38:45.068Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 40, "total_accepted_number": 19, "contest": 4, "sort_index": "A", "is_public": true}}, {"model": "contest.contestproblem", "pk": 9, "fields": {"title": "\u5706\u4e0a\u7684\u548c", "description": "<p>n\u4e2a\u6570A1,A2,A3,...,An\u9996\u5c3e\u76f8\u8fde\u7ec4\u6210\u4e00\u4e2a\u5706(An\u540e\u8fde\u63a5A1)\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u8fde\u7eed\u7684m\u4e2a\u6570\uff0c\u4f7f\u8fd9m\u4e2a\u6570\u7684\u548c\u6700\u5927\u3002<br /></p>", "input_description": "\u8f93\u5165\u5305\u62ec\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e3a\u4e24\u884c\uff0c\u7b2c\u4e00\u884c\u5305\u62ec\u4e24\u4e2a\u6b63\u6574\u6570n,m  (1<=m<=n<=1000) \u3002\u7b2c\u4e8c\u884c\u6709n\u4e2a\u6570A1,A2,A3,...,An(-1000<=Ai<=1000)\u3002", "output_description": "\u8f93\u51fa\u8fde\u7eedm\u4e2a\u6570\u7684\u6700\u5927\u548c\u3002", "samples": "[{\"input\": \"5 3\\n3 2 1 -5 -3\\n4 1\\n1 -2 3 -2\", \"output\": \"6\\n3\"}]", "test_case_id": "0789e1a32f83dbfcd329149253fd0519", "hint": "<p>\u8f93\u5165\u5efa\u8bae\u4f7f\u7528scanf<br /></p>", "create_time": "2017-03-15T04:09:01.309Z", "last_update_time": null, "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 103, "total_accepted_number": 22, "contest": 4, "sort_index": "B", "is_public": true}}, {"model": "contest.contestproblem", "pk": 10, "fields": {"title": "n\u7684\u9636\u4e58", "description": "<p>\u6c42 n\uff01mod 2017 (1 &lt;= n &lt;= 10^9)\u3002\u6ce8\u610f n! \u8868\u793a n \u7684\u9636\u4e58\uff0cmod \u662f\u6307\u53d6\u6a21\u8fd0\u7b97\uff08\u53d6\u6a21\u5373\u4e3a\u6c42\u4f59\u6570\uff0c\u4f8b\u59825 % 2\uff0c\u5148\u7b975 / 2\uff0c\u5546\u4e3a2\uff0c\u4f59\u6570\u4e3a1\uff0c\u6240\u4ee55 % 2 = 1\u7b49\u5f0f\u6210\u7acb\uff09,C\u8bed\u8a00\u4e2d\u7528%\u8868\u793a\u3002<br /></p>", "input_description": "\u8f93\u5165\u5305\u62ec\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e3a\u4e00\u884c\uff0c\u5305\u62ec\u4e00\u4e2a\u6b63\u6574\u6570n  (1 <= n <= 10^9) \uff0cn = 0\u8868\u793a\u8f93\u5165\u7ed3\u675f\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u8f93\u5165\u6570\u636e\uff0c\u8bf7\u8f93\u51fa n! mod 2017\u3002", "samples": "[{\"input\": \"5\\n10\\n15\\n0\\n\", \"output\": \"120\\n217\\n1047\\n\"}]", "test_case_id": "88767be41ab32360034c28d581c841c2", "hint": "<p>\u8bf7\u6ce8\u610fn\u7684\u8303\u56f4\u662f1\u81f310\u76849\u6b21\u65b9\u3002<br /></p>", "create_time": "2017-03-15T04:09:54.189Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 66, "total_accepted_number": 15, "contest": 4, "sort_index": "C", "is_public": true}}, {"model": "contest.contestproblem", "pk": 11, "fields": {"title": "\u62fc\u63a5\u6d77\u62a5", "description": "<p style=\"margin-left: 40px;\">\u6d77\u62a5\u4e00\u5171\u6709\u4e09\u5f20\u6d77\u62a5\uff0c\u8981\u6c42\u4e09\u5f20\u6d77\u62a5\u5f20\u8d34\u540e\u7ec4\u6210\u4e00\u4e2a\u5b8c\u6574\u3001\u65e0\u7f1d\u9699\u7684\u6b63\u65b9\u5f62\uff01\u5982\u679c\u53ef\u4ee5\u8f93\u51fa\u6b63\u65b9\u5f62\u8fb9\u957f\u5426\u5219\u8f93\u51fa\u201dNo\u201d\u3002<br /></p>", "input_description": "\u8f93\u5165\u5305\u62ec\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e(\u5c0f\u4e8e\u7b49\u4e8e70)\uff0c\u6bcf\u4e00\u884c\u8f93\u5165\u516d\u4e2a\u6574\u6570x1,\u2009y1,\u2009x2,\u2009y2,\u2009x3,\u2009y3 (1 <= x1,\u2009y1,\u2009x2,\u2009y2,\u2009x3,\u2009y3\u2009 <= 100)\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u8f93\u5165\u6570\u636e\uff0c\u5982\u679c\u53ef\u4ee5\u6d77\u62a5\u7ec4\u6210\u6b63\u65b9\u5f62\uff0c\u7b2c\u4e00\u884c\u8f93\u51fa\u6b63\u65b9\u5f62\u7684\u8fb9\u957f n, \u5426\u5219\u8f93\u51fa\"No\"\u3002", "samples": "[{\"input\": \"5 1 2 5 5 2\\n4 4 2 6 4 2\\n\", \"output\": \"5\\n6\\n\"}]", "test_case_id": "93d175c4055f3913886e1af853f38352", "hint": "", "create_time": "2017-03-15T04:10:39.324Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 38, "total_accepted_number": 6, "contest": 4, "sort_index": "D", "is_public": true}}, {"model": "contest.contestproblem", "pk": 12, "fields": {"title": "\u6597\u5730\u4e3b", "description": "<p>\u4ea4\u5927\u5c06\u8981\u4e3e\u884c\u4e00\u6b21\u7f51\u4e0a\u6597\u5730\u4e3b\u8054\u8d5b\uff0c\u540c\u5b66\u4eec\u5f88\u79ef\u6781\uff0c\u73b0\u5728\u5df2\u7ecf\u6709N\u4e2a\u4eba\u62a5\u540d\u53c2\u52a0\u8054\u8d5b\u3002\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u573a\u6597\u5730\u4e3b\u6bd4\u8d5b\u9700\u89813\u4e2a\u4eba\u53c2\u52a0\uff0c\u4f46\u662f\u540c\u5b66\u4e4b\u95f4\u6709\u7684\u662f\u76f8\u4e92\u8ba4\u8bc6\u7684\uff0c\u800c\u6709\u7684\u4e0d\u8ba4\u8bc6\u3002&nbsp;</p><p>\u5982\u679c3\u4e2a\u4eba\u76f8\u4e92\u90fd\u8ba4\u8bc6\uff0c\u90a3\u4e48\u4ed6\u4eec\u4f1a\u5f88\u9ad8\u5174\u5730\u6597\u5730\u4e3b\uff1b&nbsp;</p><p>\u5982\u679c3\u4e2a\u4eba\u76f8\u4e92\u90fd\u4e0d\u8ba4\u8bc6\uff08\u5373\u4efb\u610f\u4e24\u4e2a\u4eba\u90fd\u4e0d\u8ba4\u8bc6\uff09\uff0c\u867d\u7136\u4e0d\u5f88\u5c3d\u5174\uff0c\u4f46\u4e5f\u80fd\u516c\u5e73\u5730\u6597\u5730\u4e3b\u3002&nbsp;</p><p>\u4f46\u5f533\u4e2a\u4eba\u4e0d\u662f\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\u65f6\uff0c\u4ed6\u4eec\u5c31\u4f1a\u6000\u7591\u6709\u4eba\u4e32\u901a\u4f5c\u5f0a\u800c\u5bfc\u81f4\u8054\u8d5b\u4e0d\u516c\u5e73\u3002\u8003\u8651\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u7ec4\u59d4\u4f1a\u51b3\u5b9a\u4e0d\u5b89\u6392\u8fd9\u6837\u7684\u4e09\u4e2a\u4eba\u5728\u4e00\u8d77\u6597\u5730\u4e3b\u3002&nbsp;</p><p>\u5728N\u4e2a\u53c2\u8d5b\u8005\u4e2d\uff0c\u539f\u8ba1\u5212\u662f\u6bcf3\u4e2a\u4eba\u90fd\u8981\u8fdb\u884c\u4e00\u573a\u6bd4\u8d5b\uff0c\u56e0\u4e3a\u4e0a\u8ff0\u539f\u56e0\uff0c\u7ec4\u59d4\u4f1a\u60f3\u77e5\u9053\u5728\u907f\u514d\u88ab\u6000\u7591\u4e0d\u516c\u5e73\u7684\u524d\u63d0\u4e0b\uff0c\u6700\u591a\u80fd\u8fdb\u884c\u591a\u5c11\u573a\u6bd4\u8d5b\u5462\uff1f&nbsp;</p>", "input_description": "\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff08\u4e0d\u8d85\u8fc710\u7ec4\uff09\u3002 \n\u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570N\uff083 <= N <= 1,000\uff09\uff0cM( 0 <= M <= 250,000)\uff0c\u5206\u522b\u8868\u793a\u53c2\u52a0\u6bd4\u8d5b\u7684\u4eba\u6570\u548c\u7ec4\u59d4\u4f1a\u83b7\u5f97\u7684\u5173\u7cfb\u6570\u76ee\u3002 \n\u63a5\u4e0b\u6765\u7684M\u884c\u4e2d\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570A\u548cB\uff081 <= A, B <= N\uff0c\u4e14A\u4e0d\u7b49\u4e8eB\uff09\uff0c\u8868\u793a\u7b2cA\u4e2a\u4eba\u548c\u7b2cB\u4e2a\u4eba\u662f\u76f8\u4e92\u8ba4\u8bc6\u7684\uff0c\u6ce8\u610f\uff1a\u8ba4\u8bc6\u7684\u5173\u7cfb\u662f\u6ca1\u6709\u4f20\u9012\u6027\u7684\uff0c\u4f8b\u5982A\u8ba4\u8bc6B\uff0cB\u8ba4\u8bc6C\uff0c\u4f46A\u4e0d\u4e00\u5b9a\u8ba4\u8bc6C\uff1b\u800c\u4e14\uff0c\u7531\u4e8e\u7ec4\u59d4\u4f1a\u7684\u6d88\u606f\u6765\u6e90\u5f88\u591a\uff0c\u6240\u4ee5\u8f93\u5165\u7684\u8ba4\u8bc6\u5173\u7cfb\u53ef\u80fd\u6709\u91cd\u590d\uff0c\u5e76\u4e14\u7c7b\u4f3c\u201c1\uff0c2\u201d\u548c\u201c2\uff0c1\u201d\u8fd9\u79cd\u60c5\u51b5\u662f\u7b49\u4ef7\u7684\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u5360\u4e00\u884c\uff0c\u8f93\u51fa\u53ef\u4ee5\u4e3e\u884c\u7684\u6bd4\u8d5b\u7684\u573a\u6570\u3002", "samples": "[{\"input\": \"4 1\\n1 2\\n10 7\\n1 9\\n1 2\\n2 1\\n4 5\\n3 7\\n6 8\\n4 5\", \"output\": \"2\\n81\"}]", "test_case_id": "de522d3b382c6796ec923b02e222314e", "hint": "<p>\u5bf9\u4e8e\u7b2c1\u7ec4\uff0c\u603b\u5171\u53ef\u4ee5\u4e3e\u884c2\u573a\uff0c\u5373&lt;1,3,4&gt;\u548c&lt;2,3,4&gt;.&nbsp;<br /></p>", "create_time": "2017-03-15T04:11:31.285Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 7, "total_accepted_number": 2, "contest": 4, "sort_index": "E", "is_public": true}}, {"model": "contest.contestproblem", "pk": 13, "fields": {"title": "\u8865\u5175", "description": "<p>\u5728\u975e\u5e38\u6d41\u884c\u7684DOTA\u6e38\u620f\u4e2d\uff0c\u8865\u5175\u662f\u975e\u5e38\u91cd\u8981\u7684\u4e00\u79cd\u6280\u672f\u7edf\u8ba1\u3002\u5982\u679c\u4e00\u4e2a\u5355\u4f4d\u88ab\u5bf9\u65b9\u7684\u591a\u4e2a\u5355\u4f4d\u653b\u51fb\u81f3\u6b7b\uff0c\u5219\u5bf9\u8be5\u5355\u4f4d\u9020\u6210\u6700\u540e\u4e00\u6b21\uff08\u81f4\u547d\u7684\uff09\u4f24\u5bb3\u7684\u653b\u51fb\u8005\u5c06\u4f1a\u83b7\u5f97\u66f4\u591a\u7684\u5956\u52b1\uff08\u91d1\u94b1\u548c\u7ecf\u9a8c\uff09\uff0c\u8fd9\u540d\u653b\u51fb\u8005\u88ab\u8bb0\u5f55\u4e00\u6b21\u8865\u5175\u3002&nbsp;</p><p>\u73b0\u5728\u6709N\u4e2a\u4eba\uff08\u7f16\u53f7\u4e3a1\u30012\u3001...\u3001N\uff09\u653b\u51fb\u5bf9\u65b9\u7684\u4e00\u4e2a\u5355\u4f4d\u3002\u5047\u8bbe\u6bcf\u4eba\u6bcf\u6b21\u653b\u51fb\u7684\u4f24\u5bb3\u548c\u6bcf\u4e24\u6b21\u653b\u51fb\u4e4b\u95f4\u7684\u95f4\u9694\u90fd\u662f\u56fa\u5b9a\u7684\u3002\u8f93\u5165\u5c06\u7ed9\u51fa\u6bcf\u4e2a\u4eba\u4e24\u6b21\u653b\u51fb\u4e4b\u95f4\u7684\u95f4\u9694\u65f6\u95f4\uff0c\u5e76\u5047\u8bbe\u6bcf\u4e2a\u4eba\u7b2c\u4e00\u6b21\u653b\u51fb\u7684\u65f6\u523b\u503c\u5c31\u662f\u4ed6\u7684\u4e24\u6b21\u653b\u51fb\u4e4b\u95f4\u7684\u65f6\u95f4\u95f4\u9694\u503c\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u4eba\u653b\u51fb\u95f4\u9694\u4e3a2\uff0c\u5219\u4ed6\u4f1a\u5728\u65f6\u523b2\u30014\u30016\u30018\u2026\u2026\u8fdb\u884c\u653b\u51fb\u3002\u65f6\u95f4\u4ee5\u6574\u6570\u8ba1\u7b97\u3002&nbsp;</p><p>\u5982\u679c\u591a\u4e2a\u4eba\u540c\u65f6\u653b\u51fb\u5bfc\u81f4\u5bf9\u65b9\u6b7b\u4ea1\uff0c\u653b\u51fb\u4f24\u5bb3\u6700\u5927\u7684\u90a3\u4e2a\u88ab\u8bb0\u5f55\u4e00\u6b21\u8865\u5175\u3002\u5982\u679c\u653b\u51fb\u4f24\u5bb3\u6700\u5927\u7684\u4e0d\u6b62\u4e00\u4e2a\uff0c\u5219\u5176\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\u4eba\u88ab\u8bb0\u5f55\u4e00\u6b21\u8865\u5175\u3002&nbsp;</p><p>\u4e00\u4e2a\u5355\u4f4d\u8840\u91cf\u5c0f\u4e8e\u7b49\u4e8e0\u5c31\u88ab\u5224\u4e3a\u6b7b\u4ea1\u3002&nbsp;</p><p>\u4f60\u7684\u4efb\u52a1\u662f\u6c42\u51fa\u5bf9\u65b9\u5355\u4f4d\u6b7b\u4ea1\u7684\u65f6\u523b\u548c\u88ab\u8bb0\u5f55\u4e00\u6b21\u8865\u5175\u7684\u90a3\u4e2a\u4eba\u7684\u7f16\u53f7\u3002</p>", "input_description": "\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570M (1 < M \u2264 100)\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\u3002 \n\u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570N (2 \u2264 N \u2264 1000)\u548cH (1 < H \u2264 1000000)\uff0c\u8868\u793a\u653b\u51fb\u5bf9\u65b9\u67d0\u4e2a\u5355\u4f4d\u7684\u4eba\u6570\u548c\u5bf9\u65b9\u5355\u4f4d\u7684\u8840\u91cf\u3002 \n\u63a5\u4e0b\u6765\u6709N\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u6bcf\u4e2a\u4eba\u6bcf\u6b21\u653b\u51fb\u7684\u4f24\u5bb3A (1 \u2264 A \u2264 100)\uff0c\u4ee5\u53ca\u6bcf\u4e24\u6b21\u653b\u51fb\u4e4b\u95f4\u7684\u95f4\u9694T (1 \u2264 T \u2264 100)\u3002", "output_description": "\u5bf9\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\uff0c\u5bf9\u65b9\u5355\u4f4d\u6b7b\u4ea1\u7684\u65f6\u523b\u548c\u88ab\u8bb0\u5f55\u4e00\u6b21\u8865\u5175\u7684\u90a3\u4e2a\u4eba\u7684\u7f16\u53f7\uff0c\u7528\u7a7a\u683c\u9694\u5f00\u3002", "samples": "[{\"input\": \"2\\n2 10\\n2 2\\n3 3\\n2 10\\n5 3\\n2 10\", \"output\": \"6 2\\n6 1\"}]", "test_case_id": "47ce84ba497fb7e52aef9f5edf7d0c54", "hint": "<p>\u8f93\u5165\u6570\u636e\u8f83\u591a\uff0c\u5c3d\u91cf\u7528scanf\u548cprintf\u4ee3\u66ffcin\u548ccout\u3002<br /></p>", "create_time": "2017-03-15T04:13:01.151Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 8, "total_accepted_number": 3, "contest": 4, "sort_index": "F", "is_public": true}}, {"model": "contest.contestproblem", "pk": 14, "fields": {"title": "Short Problem", "description": "<p>\u4f5c\u4e3a\u4e00\u4e2aacmer\u6700\u4e0d\u80fd\u5fcd\u53d7\u7684\u5c31\u662ffor\u5faa\u73af\u4e24\u5708\uff0c\u56e0\u4e3a\u5f88\u5bb9\u6613\u5f97\u5230TLE\uff0c\u6240\u4ee5\u5e0c\u671b\u4f60\u4eec\u80fd\u4f18\u5316\u4e0b\u9762\u7684\u7a0b\u5e8f\uff0c\u7531\u4e8e\u7ed3\u679c\u53ef\u80fd\u5f88\u5927\uff0c\u53ea\u8981\u8f93\u51fasum%mod\u7684\u503c\u5373\u53ef(sum\u521d\u59cb\u503c\u4e3a0,&quot;^&quot;\u8868\u793a\u5f02\u6216\u64cd\u4f5c)\u3002<br /></p><p><img src=\"/static/upload/1c746e04d1bc49df4509d467abc4b6b2.jpg\" alt=\"2271.jpg\" /><br /></p>", "input_description": "\u8f93\u5165\u7b2c\u4e00\u884c\u4e3aT(T\u22642000)\uff0c\u8868\u793a\u6d4b\u8bd5\u7684\u6570\u636e\u7ec4\u6570\uff0c\u7b2c\u4e8c\u884c\u5230T+1\u884c\uff0c\u6bcf\u884c5\u4e2a\u6570\u5b57\uff0c\u5206\u522b\u4e3aa,b,c,d,mod (1\u2264a,b,c,d<2^31,a\u2264b,c\u2264d,1\u2264mod\u22641,000,000,007).", "output_description": "\u6bcf\u884c\u8f93\u51fasum%mod\u7684\u503c\u5373\u53ef.", "samples": "[{\"input\": \"2\\n9 12 5 11 83\\n1 1 2 2 3\", \"output\": \"24\\n0\\n\"}]", "test_case_id": "8cc81ac8ac76b73a2f3b2b9087072b1e", "hint": "<p>\u76f4\u63a5\u63d0\u4ea4\u4e0a\u8ff0\u4ee3\u7801\u4f1a\u5f97\u5230TLE<br /></p>", "create_time": "2017-03-15T04:14:42.527Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 8, "total_accepted_number": 4, "contest": 4, "sort_index": "G", "is_public": true}}, {"model": "contest.contestproblem", "pk": 15, "fields": {"title": "\u53cd\u5411\u5339\u914d\u4e32", "description": "<p>\u51ac\u74dc\u548c\u754c\u9762\u718a\u975e\u5e38\u559c\u6b22\u7814\u7a76\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u95ee\u9898\uff0c\u7531\u4e8e\u754c\u9762\u718a\u7684\u6570\u5b66\u5f88\u597d\uff0c\u6240\u4ee5\u51ac\u74dc\u95ee\u4ed6\u7684\u95ee\u9898\u4e00\u5411\u4e0d\u4f1a\u662f\u6570\u5b66\u9898\u3002\u8fd9\u5929\uff0c\u51ac\u74dc\u53c8\u6765\u5201\u96be\u754c\u9762\u718a\u3002&nbsp;</p><p>\u51ac\u74dc\u4ece\u53e3\u888b\u91cc\u62ff\u51fa\u4e86\u4e09\u5f20\u5361\u7247\uff0c\u6bcf\u5f20\u4e0a\u9762\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5206\u522b\u662f&quot;usedrose&quot;, &quot;yeahpeng&quot;, \u201cafterstory\u201d\u3002\u51ac\u74dc\u8bf4\uff1a\u6211\u73b0\u5728\u60f3\u8ba9\u4f60\u627e\u51fa\u6240\u6709\u7684\u53cd\u5411\u914d\u5bf9\u4e32\u3002\u6240\u8c13\u53cd\u5411\u914d\u5bf9\u4e32\uff0c\u5982\u679c\u6211\u4eec\u53e6\u201dusedrose\u201d\u4e3a\u5b57\u7b26\u4e32A\uff0c\u5219\u4e32A\u7684\u8f6c\u7f6eA*=\u201cesordesu\u201d\uff0c\u5982\u679c\u8fd8\u6709\u53e6\u5916\u4e00\u4e2a\u4e32B\uff0c\u53ea\u8981\u6ee1\u8db3A\u7684\u5b57\u5178\u5e8f\u5927\u4e8eB\uff0c\u4e14A*\u7684\u5b57\u5178\u5e8f\u5c0f\u4e8eB*\u7684\u8bdd\uff0c\u6211\u4eec\u5219\u79f0A\u3001B\u4e3a\u4e00\u5bf9\u53cd\u5411\u914d\u5bf9\u4e32\u3002&nbsp;</p><p>\u754c\u9762\u718a\uff1a\u4e0d\u5c31\u4e09\u5f20\u5361\u7247\u561b\uff0c\u6211\u4e00\u4e2a\u4e2a\u6570\u4e0d\u5c31\u5b8c\u4e86\u3002\u4e00\u4e2a\u3001\u4e24\u4e2a\u2026\u2026&nbsp;</p><p>\u8fd9\u65f6\u51ac\u74dc\u4ece\u53e6\u4e00\u4e2a\u53e3\u888b\u91cc\u638f\u51fa\u4e86\u4e00\u6c93\u5361\u7247.............</p>", "input_description": "\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6574\u6570 T (1 <= T <= 100)\uff0c\u8868\u9762\u5171\u6709 T \u7ec4\u6d4b\u8bd5\u6570\u636e\u3002 \n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6574\u6570 N(1 <= N <= 10 000)\uff0c\u63a5\u4e0b\u6765 N\u884c\u6bcf\u4e00\u884c\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ee3\u8868\u7740\u4e0d\u540c\u5361\u7247\u4e0a\u7684\u5b57\u7b26\u4e32\u3002(\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u4f1a\u5927\u4e8e20)\u3002", "output_description": "\u8f93\u5165\u4e00\u4e2a\u6574\u6570 R\uff0c\u4e3a\u5728N\u4e2a\u5361\u7247\u4e2d\uff0c\u4e00\u5171\u6709\u591a\u5c11\u5bf9\u53cd\u5411\u5339\u914d\u4e32\u3002", "samples": "[{\"input\": \"1\\n14 \\nbranimir \\nvladimir \\ntom \\nkruz \\nbred \\npit \\nzemlja \\nnije \\nravna \\nploca \\nko \\nje \\nzapalio \\nzito\", \"output\": \"48\"}]", "test_case_id": "fba3b3b564fa1e468bfc44070bad4338", "hint": "", "create_time": "2017-03-15T04:15:40.725Z", "last_update_time": "2017-03-17T11:06:33.812Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 10, "total_accepted_number": 2, "contest": 4, "sort_index": "H", "is_public": true}}, {"model": "contest.contestproblem", "pk": 16, "fields": {"title": "Orsum again", "description": "<p>yeahpeng\u88ab\u4e00\u9053\u5173\u4e8e\u5f02\u6216\u7684\u9898\u56f0\u6270\u4e86\u8bb8\u4e45\uff0c\u73b0\u5728\uff0c\u4ed6\u5411\u4f60\u5bfb\u6c42\u5e2e\u52a9\u3002&nbsp;</p><p>\u4e00\u4e2a\u542b\u6709n\u4e2a\u5143\u7d20\u7684\u5e8f\u5217A\uff08a1, a2, a3\u2026 an\uff09\u7ed9\u51faq\u4e2a\u8be2\u95ee\u533a\u95f4[Li,Ri],\u6c42\u6ee1\u8db3Li&lt;= i &lt;= j &lt;= Ri\u7684S(i,j)\u4e4b\u548c, \u5176\u4e2dL0,L1,L2\u2026L(q-1) R0,R1,R2\u2026R(q-1)\u3002&nbsp;</p><p>\u4e3a\u4e86\u8f93\u5165\u65b9\u4fbf\uff0c\u4ee4x = (a * Li + b) %(n+1), y = (c * Ri + d) % (n + 1)&nbsp;</p><p>L(i+1) = min(x, y)&nbsp;</p><p>R(i+1) = max(x,y)&nbsp;</p><p>\u5b9a\u4e49S(i,j)=ai xor a(i+1) xor a(i+2) \u2026 xor aj,</p>", "input_description": "\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570T\uff0c\u8868\u793acase\u603b\u6570\u3002 \n\u6bcf\u4e2acase: \n\u7b2c\u4e00\u884c\u8f93\u5165\u56db\u4e2a\u6574\u6570n,q,L0,R0 (1 <= n , q, <= 100000, 1<=L0<=R0<=n) \n\u7b2c\u4e8c\u884c\u56db\u4e2a\u6574\u6570 a,b,c,d(1<=a,b,c,d<=10000) \n\u7b2c\u4e09\u884c n\u4e2a\u6574\u6570 ai (1<=ai<=10^9)", "output_description": "q\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\u8868\u793a\u533a\u95f4[Li,Ri]\u5185\u6ee1\u8db3\u6761\u4ef6\u7684S(i,j)\u4e4b\u548c\uff0c\u7ed3\u679c\u5bf91000000009\u53d6\u6a21\u3002", "samples": "[{\"input\": \"1\\n4 2 1 4\\n1 2 3 4\\n1 2 3 4\", \"output\": \"30\\n10\\n\"}]", "test_case_id": "88f0ac51651c1545e2623710220c20d2", "hint": "", "create_time": "2017-03-15T04:16:29.829Z", "last_update_time": "2017-03-17T11:07:01.022Z", "created_by": 1, "time_limit": 3000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 6, "total_accepted_number": 0, "contest": 4, "sort_index": "I", "is_public": true}}, {"model": "contest.contestproblem", "pk": 17, "fields": {"title": "How many different roads?", "description": "<p>\u5c0f\u6b66\u6700\u8fd1\u6c89\u8ff7\u4e8e\u7089\u77f3\u3002\u6b66\u5927\u7237\u8eab\u4e3a\u4ed6\u7684\u957f\u8f88\uff0c\u4e0d\u80fd\u5750\u89c6\u4e0d\u7ba1\uff0c\u9700\u8981\u7ed9\u4ed6\u627e\u70b9\u5176\u4ed6\u4e8b\u60c5\u5206\u6563\u4e00\u4e0b\u4ed6\u7684\u6ce8\u610f\u529b\u3002\u4e8e\u662f\u4ed6\u4e3a\u5c0f\u6b66\u627e\u4e86\u4e00\u5f20\u77e9\u5f62\u7684\u7eb8\uff0c\u8fd9\u5f20\u7eb8\u88ab\u5212\u5206\u4e3an*m\u4e2a\u5c0f\u65b9\u683c\uff0c\u89c4\u5b9a\u8fd9\u5f20\u7eb8\u7684\u5de6\u4e0b\u89d2\u4e3a\u8d77\u70b9\uff0c\u53f3\u4e0a\u89d2\u4e3a\u7ec8\u70b9\uff0c\u6211\u4eec\u6bcf\u6b21\u53ef\u4ee5\u6cbf\u7740\u8fd9\u4e9b\u5c0f\u65b9\u683c\u7684\u8fb9\u7f18\u5411\u53f3\u6216\u8005\u5411\u4e0a\u79fb\u52a8\u4e00\u5c0f\u683c(\u89c1\u56fe)\uff0c\u95ee\u4ece\u8fd9\u5f20\u7eb8\u7684\u8d77\u70b9\u79fb\u52a8\u5230\u7ec8\u70b9\uff0c\u5171\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u8def\u5f84\uff1f</p><p>\t\u5c0f\u6b66\u6700\u8fd1\u592a\u8fc7\u4e8e\u6c89\u8ff7\u7089\u77f3\uff0c\u7740\u5b9e\u88ab\u8fd9\u4e2a\u95ee\u9898\u96be\u4f4f\u4e86\u3002\u8bf7\u95ee\u4f60\u80fd\u5e2e\u5e2e\u4ed6\u5417\uff1f</p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T,\u8868\u793a\u6570\u636e\u7ec4\u6570.\n\u63a5\u4e0b\u6765\u662fT\u7ec4\u6570\u636e.\n\u6bcf\u7ec4\u6570\u636e\u6709\u4e24\u4e2a\u6574\u6570n\uff0cm( 1<=n,m<=2^31),\u8868\u793a\u77e9\u5f62\u7eb8\u5f20\u88ab\u5212\u5206\u4e3an*m\u4e2a\u5c0f\u65b9\u683c\u3002\n\u4fdd\u8bc1 $\\prod_{i=1}^{n+m} \\over \\prod_{i=1}^{max(n,m)}$ <=2^64-1", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6574\u6570(\u7ed3\u679c\u4e0d\u4f1a\u8d85\u8fc72^64-1)\uff0c\u8868\u793a\u4ece\u8fd9\u5f20\u7eb8\u7684\u8d77\u70b9\u79fb\u52a8\u5230\u7ec8\u70b9\u5171\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u8def\u5f84\u3002", "samples": "[{\"input\": \"3\\n1 1\\n2 1\\n4 5\", \"output\": \"2\\n3\\n126\"}]", "test_case_id": "405e5a3b9d23241ebe1fa084fd9fc1e4", "hint": "<p>\u5bf9\u4e8e4 5\u8fd9\u4e00\u7ec4\uff0c\u4ee5\u4e0b\u4e3a\u4e24\u79cd\u53ef\u80fd\u7684\u60c5\u51b5</p><p><img src=\"/static/upload/00d22ab7c320e7cc79671c4029198b63.png\" alt=\"1.png\" /><br /></p>", "create_time": "2017-03-15T05:21:36.413Z", "last_update_time": "2017-03-17T08:29:57.912Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 126, "total_accepted_number": 12, "contest": 3, "sort_index": "A", "is_public": true}}, {"model": "contest.contestproblem", "pk": 18, "fields": {"title": "Find the string", "description": "<p>\u9898\u76ee\u975e\u5e38\u7b80\u5355\uff0c\u752826\u4e2a\u82f1\u6587\u5b57\u6bcd\u4e2d\u7684\u524dm\u4e2a\u5b57\u6bcd\uff0c\u53ef\u4ee5\u6784\u9020\u51fa\u5f88\u591a\u7ec4\u4e0d\u540c\u7684\u957f\u5ea6\u4e3an\u7684\u5b57\u7b26\u4e32\u3002</p><p>\u8981\u6c42\u627e\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32str\uff0c\u5176\u957f\u5ea6\u4e3an\u3002\u5e76\u4e14\u5728\u6240\u6709\u7531\u8fd9m\u4e2a\u5b57\u6bcd\u6784\u6210\u7684\uff0c\u957f\u5ea6\u4e3an\u7684\u5b57\u7b26\u4e32\u4e2d\uff0c\u8981\u4f7f\u5f97str\u4e2d\u957f\u5ea6\u6700\u5927\u7684\u56de\u6587\u5b50\u4e32\u5176\u957f\u5ea6\u6700\u5c0f\uff0c\u5982\u679c\u6709\u591a\u4e2a\u8fd9\u6837\u7684str,\u5219\u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u90a3\u4e2a\u3002</p><p>\t\u6ce8\u610f\u8f93\u51fa\u7684\u7b54\u6848\u4e2d\u5b57\u6bcd\u5747\u4e3a\u5c0f\u5199\u3002</p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T(T<=30),\u8868\u793a\u6570\u636e\u7ec4\u6570.\n\u63a5\u4e0b\u6765\u662fT\u7ec4\u6570\u636e.\n\u6bcf\u7ec4\u6570\u636e\u6709\u4e24\u4e2a\u6574\u6570m\uff0cn( 1<=m<=26,1<=n<=100000),\u5206\u522b\u8868\u793a26\u4e2a\u5b57\u6bcd\u4e2d\u5141\u8bb8\u4f7f\u7528\u7684\u524dm\u4e2a\u5b57\u6bcd\uff0c\u548c\u6240\u9700\u627e\u5230\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u7ec4\u5b57\u7b26\u4e32\u3002", "samples": "[{\"input\": \"2\\n1 2\\n2 2\", \"output\": \"aa\\nab\"}]", "test_case_id": "195e3cd43ce0f973d17318ac48162a2b", "hint": "<p>\u7b2c\u4e00\u7ec4\u6570\u636e\u4e2d\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u5b57\u6bcda,\u6545\u7b54\u6848\u4e3aaa</p><p>\t\u7b2c\u4e8c\u7ec4\u6570\u636e\u4e2d\uff0c\u53ef\u4ee5\u7ec4\u6210\u5b57\u7b26\u4e32aa,ab,bb,ba\u3002\u5176\u4e2dab,ba\u7684\u6700\u5927\u56de\u6587\u5b50\u4e32\u957f\u5ea6\u4e3a1\uff0c\u800caa,bb\u4e3a2\uff0c\u53c8\u56e0\u4e3aab\u5b57\u5178\u5e8f\u5c0f\u4e8eba,\u6545\u7b54\u6848\u4e3aab</p>", "create_time": "2017-03-15T05:23:20.176Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 19, "total_accepted_number": 0, "contest": 3, "sort_index": "B", "is_public": true}}, {"model": "contest.contestproblem", "pk": 19, "fields": {"title": "\u5206\u72d7\u7cae", "description": "<p>\u4eca\u5929handsomehow\u7ed9\u5927\u5bb6\u53d1\u4e86n\u5305\u72d7\u7cae,\u6bcf\u4e00\u5305\u72d7\u7cae\u91cc\u9762\u88c5\u6709a\u9897\u72d7\u7cae.\u800c\u73b0\u5728\u4f60\u9700\u8981\u628a\u8fd9n\u5305\u72d7\u7cae\u5e73\u5747\u5206\u62104\u4efd,\u4ee5\u4fbf\u4f60\u548c\u4f60\u7684\u5ba4\u53cb\u4eab\u7528,\u5e76\u4e14\u4e0d\u80fd\u628a\u5305\u88c5\u7ed9\u62c6\u5f00.\u95ee\u4f60\u662f\u5426\u80fd\u591f\u5e73\u5747\u5206\u7ed9\u4f60\u7684\u5ba4\u53cb,\u5e76\u4e14\u6ca1\u6709\u5269\u4f59?<br /></p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T,\u8868\u793a\u6570\u636e\u7ec4\u6570.\n\u63a5\u4e0b\u6765\u6709T\u7ec4\u6570\u636e.\n\u6bcf\u7ec4\u6570\u636e\u7684\u5f00\u5934\u662f\u4e00\u4e2a\u6574\u6570n(4<=n<=20),\u8868\u793a\u6709n\u5305\u72d7\u7cae,\u63a5\u7740n\u4e2a\u6570\u4ee3\u8868\u6bcf\u5305\u72d7\u7cae\u7684\u9897\u6570.\n\u4fdd\u8bc1\u6bcf\u5305\u72d7\u7cae\u7684\u9897\u6570a\u6ee1\u8db3\u6761\u4ef61<=a<=10,000", "output_description": "\u5982\u679c\u80fd\u591f\u5747\u5206\u4e00\u884c\u8f93\u51fayes\n\u5426\u5219\u8f93\u51fa\u4e00\u884cno", "samples": "[{\"input\": \"2\\n6 1 1 1 1 1 3\\n9 1 7 2 2 6 3 5 4 2\", \"output\": \"no\\nyes\\n\"}]", "test_case_id": "0d14b883faa01266c250473ef34fbf66", "hint": "<p>\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u6570\u636e,\u4f60\u53ef\u4ee5\u8fd9\u6837\u5206(1,7),(2,6),(3,5),(2,4,2),\u521a\u597d\u6bcf\u4eba8\u9897.</p><p>\t\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6570\u636e,\u4f60\u4e0d\u80fd\u5c06\u4ed6\u4eec\u5e73\u5747\u5206\u62104\u5806.(\u5c06\u4f1a\u6709\u5269\u4f59)</p>", "create_time": "2017-03-15T05:25:32.059Z", "last_update_time": "2017-03-16T10:50:20.387Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 21, "total_accepted_number": 1, "contest": 3, "sort_index": "C", "is_public": true}}, {"model": "contest.contestproblem", "pk": 20, "fields": {"title": "SSR\uff0c\u6211\u4e5f\u4e00\u5b9a\u80fd\u51fa\u7684", "description": "<p>\u6709\u4e00\u5929\uff0cHandsomeHow\u53d1\u73b0\u7af9\u5b50\u5728\u73a9\u9634\u9633\u5e08\uff0c\u4f46\u662f\u7af9\u5b50\u4e00\u76f4\u6ca1\u6709SSR\u6240\u4ee5\u5feb\u8981\u5bf9\u8fd9\u4e2a\u6e38\u620f\u7edd\u671b\u4e86\uff0cHandsomeHow\u5f97\u77e5\u4ee5\u540e\u51b3\u5b9a\u7ed9\u7af9\u5b50\u4e24\u5f20\u8d85\u7ea7\u7b26\u5492\uff0c\u8fd9\u79cd\u7b26\u5492\u53ea\u80fd\u62bd\u51faSR\u548cSSR\uff0c\u5e76\u4e14\u8fde\u7eed\u4e24\u6b21\u51fa\u7684\u7ea7\u522b\u662f\u4e0d\u4f1a\u76f8\u540c\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u7af9\u5b50\u80af\u5b9a\u4f1a\u62bd\u51fa\u4e00\u5f20SR\u548c\u4e00\u5f20SSR\uff0c\u73b0\u5728\u6211\u4eec\u8981\u6765\u91cd\u73b0\u4e00\u4e0b\u7af9\u5b50\u62bd\u5361\u7684\u753b\u9762\u3002</p><p>\u4f60\u9700\u8981\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u4f60\u7684\u7a0b\u5e8f\u4f1a\u88ab\u8fd0\u884c2\u6b21\uff0c\u6bcf\u4e00\u6b21\u7684\u8f93\u5165\u90fd\u662f&quot;GO&quot;\uff0c\u4ee3\u8868\u7740\u7af9\u5b50\u8981\u62bd\u5361\u4e86\u3002</p><p>\u4f60\u9700\u8981\u7b2c\u4e00\u6b21\u8f93\u51fa&quot;bamboo gets SR!&quot;\uff0c \u7b2c\u4e8c\u6b21\u8f93\u51fa&quot;bamboo gets SSR!&quot;</p><p><br /></p><p><img src=\"/static/upload/cc36004044d071081d96e0894bab78df.jpg\" alt=\"ssr.jpg\" /><br /></p>", "input_description": "\u4e00\u884c  GO", "output_description": "\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u6587\u4ef6\u8f93\u51fa   bamboo gets SR!\n\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u6d4b\u8bd5\u6587\u4ef6\u8f93\u51fa   bamboo gets SSR!", "samples": "[{\"input\": \"GO\", \"output\": \"bamboo gets SR!\"}, {\"input\": \"GO\", \"output\": \"bamboo gets SSR!\"}]", "test_case_id": "f06d29a8f853b10c4ab11dd4e9fddc50", "hint": "<p>\u4f60\u7684\u7a0b\u5e8f\u4f1a\u88ab\u540c\u65f6\u8fd0\u884c2\u6b21</p>", "create_time": "2017-03-15T14:36:36.663Z", "last_update_time": "2017-03-18T01:23:04.441Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 408, "total_accepted_number": 3, "contest": 3, "sort_index": "D", "is_public": true}}, {"model": "contest.contestproblem", "pk": 21, "fields": {"title": "\u94f6\u6cb3\u94c1\u9053\u4e4b\u591c", "description": "<p>\u5728\u94f6\u6cb3\u4e4b\u4e2d\u7a7f\u68ad\u7684\u5217\u8f66\u4e0a\uff0c\u4e54\u73ed\u5c3c\u548c\u67ef\u8d1d\u5185\u62c9\u770b\u7740\u7a97\u5916\u7684\u666f\u8272\u6b62\u4e0d\u4f4f\u7684\u8d5e\u53f9\uff0c\u6ca1\u6709\u6bd4\u8fd9\u66f4\u52a0\u7f8e\u4e3d\uff0c\u66f4\u52a0\u707f\u70c2\u7684\u666f\u8272\u4e86\uff0c\u4f46\u8ba9\u4eba\u96be\u8fc7\u7684\u662f\uff0c\u5217\u8f66\u7ec8\u5c06\u4f1a\u5230\u7ad9\uff0c\u67ef\u8d1d\u5185\u62c9\u9a6c\u4e0a\u5c31\u4f1a\u79bb\u5f00\u4e54\u73ed\u5c3c\u7684\u8eab\u8fb9\u4e86\uff0c\u53bb\u5411\u51a5\u6cb3\u7684\u53e6\u4e00\u8fb9\uff0c\u518d\u4e5f\u56de\u4e0d\u6765\u4e86</p><p>\t\u201c\u660e\u660e\uff0c\u660e\u660e\u662f\u6211\u5148\u6765\u7684\uff0c\u4e0d\u7ba1\u662f\u9047\u89c1\u5fc3\u53f6\u4e5f\u597d\uff0c\u5199\u6545\u4e8b\u4e5f\u597d\uff0c\u6295\u7a3f\u4e5f\u597d\uff0c\u660e\u660e\u90fd\u662f\u6211\u5148\u6765\u7684\uff0c\u4e8b\u60c5\u4e3a\u4ec0\u4e48\u4f1a\u53d8\u6210\u8fd9\u6837\u5462\uff1f\u201d\u5408\u4e0a\u4e66\u672c\uff0c\u7f8e\u7fbd\u53f9\u4e86\u4e00\u53e3\u6c14\uff0c\u201c\u65e2\u7136\u8fd9\u6837\uff0c\u90a3\u4e48\u5728\u79bb\u5f00\u4e4b\u524d\uff0c\u8fdc\u5b50\u5b66\u59d0\uff0c\u8bf7\u4f60\u56de\u7b54\u6211\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u597d\u5417\uff1f\u201d</p><p>\t\u201c\u597d\u7684\u201d\u8fdc\u5b50\u5b66\u59d0\u6495\u4e0b\u4e00\u9875\u4e66\u9001\u8fdb\u5634\u91cc\u3002</p><p>\t\u201c\u5217\u8f66\u5728\u7ecf\u8fc7\u534a\u4eba\u9a6c\u963f\u5c14\u6cd5\u661f\u8f66\u7ad9\u7684\u65f6\u5019\u4f1a\u8fdb\u884c\u8f6c\u8f66\uff0c\u9700\u8981\u5c06\u5230\u8fbe\u7684\u4e58\u5ba2\u6309\u6b21\u5e8f\u5206\u914d\u8f66\u53a2\uff0c\u73b0\u5728\u6709n\u6279\u4e58\u5ba2\u5230\u8fbe\u8f66\u7ad9\uff0c\u6bcf\u6279\u4e58\u5ba2\u7684\u4eba\u6570\u4e3aai\uff0c\u9700\u8981\u5c06\u4ed6\u4eec\u5b89\u6392\u5728\u4e00\u5217\u6709m\u4e2a\u8f66\u53a2\u7684\u5217\u8f66\u4e2d\uff0c\u540c\u4e00\u6279\u4e58\u5ba2\u53ea\u80fd\u5206\u914d\u5728\u540c\u4e00\u4e2a\u8f66\u53a2\u4e2d\uff0c\u5e76\u4e14\u4e0d\u80fd\u6253\u4e71\u4e58\u5ba2\u4e4b\u95f4\u7684\u987a\u5e8f\uff0c\u5982\u679c\u60f3\u8981\u6700\u591a\u7684\u8f66\u53a2\u4e2d\u4eba\u6700\u5c11\uff0c\u8bf7\u95ee\u5e94\u8be5\u600e\u6837\u5b89\u6392\uff0c\u6700\u591a\u7684\u8f66\u53a2\u4e2d\u6709\u591a\u5c11\u4eba\uff1f\u201d</p><p>\t\uff08\u7a81\u7136\u61f5\u903c\u7684\u8fdc\u5b50\u5b66\u59d0\uff09</p><p>\t\u90a3\u8fb9\u90a3\u4e2a\uff0c\u6ca1\u9519\uff0c\u522b\u770b\u4e86\u8bf4\u7684\u5c31\u662f\u4f60\uff0c\u8fc7\u6765\u56de\u7b54\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\u3002</p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T,\u8868\u793a\u6570\u636e\u7ec4\u6570.\n\u63a5\u4e0b\u6765\u662fT\u7ec4\u6570\u636e.\n\u6bcf\u7ec4\u6570\u636e\u7684\u4e00\u5f00\u59cb\u662f\u4e24\u4e2a\u6574\u6570n(1<=n<=10000),m(1<=m<=10000)\uff0c\u8868\u793a\u603b\u5171\u6709n\u6279\u4e58\u5ba2\uff0c\u5217\u8f66\u6709m\u4e2a\u8f66\u53a2\u3002\n\u63a5\u4e0b\u6765\u4e00\u884c\u6709n\u4e2a\u6570$a_{1},a_{2}....a_{n}$( 1<=$a_{i}$ <= 10000)\uff0c$a_{i}$\u8868\u793a\u7b2ci\u6279\u4e58\u5ba2\u7684\u4eba\u6570", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4eba\u6570\u6700\u591a\u7684\u8f66\u53a2\u4e2d\u6709\u591a\u5c11\u4eba\u3002", "samples": "[{\"input\": \"2\\n3 1\\n1 2 3\\n3 2\\n1 2 3\", \"output\": \"6\\n3\\n\"}]", "test_case_id": "53795d9753639d9adb2a178f2c46f26c", "hint": "<p>\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6837\u4f8b\uff0c\u5c06\u6240\u6709\u7684\u4e58\u5ba2\u5b89\u6392\u5728\u7b2c\u4e00\u4e2a\u8f66\u53a2</p><p>\t\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u6837\u4f8b\uff0c\u5c06\u7b2c\u4e00\u6279\u548c\u7b2c\u4e8c\u6279\u4e58\u5ba2\u5b89\u6392\u5728\u7b2c\u4e00\u4e2a\u8f66\u53a2\uff0c\u7b2c\u4e09\u6279\u4e58\u5ba2\u5b89\u6392\u5728\u7b2c\u4e8c\u4e2a\u8f66\u53a2</p>", "create_time": "2017-03-16T04:53:06.386Z", "last_update_time": "2017-03-18T05:05:38.545Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 43, "total_accepted_number": 10, "contest": 3, "sort_index": "E", "is_public": true}}, {"model": "contest.contestproblem", "pk": 22, "fields": {"title": "\u5de7\u514b\u529b\u5c0f\u59d0\u7684\u5927\u60ca\u5c0f\u602a", "description": "<p>\u53c8\u4e00\u6b21\uff0c\u56fd\u670d\u7684\u6d3b\u52a8\u5728\u9519\u8bef\u7684\u65f6\u95f4\u70b9\u5f00\u59cb\u4e86\uff0c\u4f46\u8fd9\u6837\u4e0d\u4e5f\u5f88\u597d\u5417\uff1f\u4e0d\u7528\u5728\u60c5\u4eba\u8282\u7684\u65f6\u5019\u7a9d\u5728\u5bb6\u91cc\u5237\u6d3b\u52a8\u800c\u662f\u53ef\u4ee5\u51fa\u95e8\u53bb\u5403\u72d7\u7cae\u4e86\uff08\u5e76\u4e0d\uff09\u3002\u603b\u4e4b\uff0c\uff0c\u5404\u4f4dmasta\u51c6\u5907\u597d\u82f9\u679c\u548c\u809d\u4e86\u5417\uff1f</p><p>\t\u5728\u60c5\u4eba\u8282\u6d3b\u52a8\u4e2d\uff0c\u5495\u54d2\u5b50\u80fd\u591f\u901a\u8fc7\u4efb\u52a1\u83b7\u53d6\u5de7\u514b\u529b\u786c\u5e01\uff0c\u7136\u540e\u4f7f\u7528\u5de7\u514b\u529b\u786c\u5e01\u53bb\u5151\u6362servent\u4eec\u8d60\u9001\u7684\u5de7\u514b\u529b\uff08\u4e3a\u7b80\u5316\u95ee\u9898\uff0c\u5de7\u514b\u529b\u786c\u5e01\u90fd\u662f\u76f8\u540c\u7684\uff09\uff0c\u53ef\u4ee5\u4ece\u6bcf\u4f4dservent\u90a3\u91cc\u5151\u6362\u6700\u591a\u4e00\u4e2a\u5de7\u514b\u529b\uff0c\u5495\u54d2\u5b50\u4e00\u5171\u6709n\u79cdservent\uff08i = 1,2,3....n\uff09\uff0c\u7b2ci\u79cdservent\u6709ai\u4e2a\uff0c\u7b2ci\u4f4dservent\u7684\u5de7\u514b\u529b\u9700\u8981bi\u4e2a\u786c\u5e01\u5151\u6362\uff0c\u800c\u6536\u5230\u7b2ci\u4f4d\u4ece\u8005\u7684\u5de7\u514b\u529b\uff0c\u4f1a\u8ba9\u5495\u54d2\u5b50\u589e\u52a0ci\u70b9\u7684\u201c\u6df7\u4e71\u90aa\u6076\u5ea6\u201d\uff0c\u73b0\u5728\u5df2\u7ecf\u77e5\u9053\u5728\u6574\u4e2a\u6d3b\u52a8\u8fc7\u7a0b\u4e2d\u4e00\u5171\u80fd\u83b7\u5f97m\u4e2a\u5de7\u514b\u529b\u786c\u5e01\uff0c\u8bf7\u95ee\uff0c\u5495\u54d2\u5b50\u7684\u201c\u6df7\u4e71\u90aa\u6076\u5ea6\u201d\u6700\u9ad8\u80fd\u8fbe\u5230\u591a\u5c11\uff1f</p><p>\t\uff08\u5c3c\u7984\u6c89\u8239\u2026\u2026\u6d88\u6c89\u4e2d\uff09</p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T,\u8868\u793a\u6570\u636e\u7ec4\u6570.\n\u63a5\u4e0b\u6765\u662fT\u7ec4\u6570\u636e.\n\u6bcf\u7ec4\u6570\u636e\u7684\u4e00\u5f00\u59cb\u662f\u4e24\u4e2a\u6574\u6570n(1<=n<=200),m(1<=m<=200)\uff0c\u8868\u793a\u603b\u5171\u6709n\u79cdservent\uff0c\u4e00\u5171\u80fd\u83b7\u5f97\u5de7\u514b\u529b\u786c\u5e01\u3002\n\u63a5\u4e0b\u6765n\u884c\u6bcf\u884c\u6709\u4e09\u4e2a\u6570$a_{i}$(1 <= $a_{i}$ <= 200)\uff0c$b_{i}$(1 <= $b_{i}$ <= 200)\uff0c$c_{i}$(1 <= $c_{i}$ <= 200)\uff0c$a_{i}$\u8868\u793a\u7b2ci\u79cdservent\u7684\u4e2a\u6570\uff0c$b_{i}$\u8868\u793a\u5151\u6362\u7b2ci\u79cdservent\u7684\u5de7\u514b\u529b\u9700\u8981\u591a\u5c11\u4e2a\u5de7\u514b\u529b\u786c\u5e01\uff0c$c_{i}$\u8868\u793a\u5151\u6362\u4e4b\u540e\u589e\u52a0\u7684\u6df7\u4e71\u90aa\u6076\u5ea6", "output_description": "\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5495\u54d2\u5b50\u6700\u5927\u7684\u201c\u6df7\u4e71\u90aa\u6076\u5ea6\u201d\u3002", "samples": "[{\"input\": \"2\\n2 200\\n1 50 10\\n1 150 20\\n2 200\\n2 100 10\\n2 100 20\", \"output\": \"30\\n40\\n\"}]", "test_case_id": "d073b3c43b80afd9383b393011e3c72b", "hint": "<p>\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6837\u4f8b\uff0c\u5151\u6362\u7b2c\u4e00\u79cd\u548c\u7b2c\u4e8c\u79cd\u4ece\u8005\u7684\u5de7\u514b\u529b\u5404\u4e00\u4e2a\uff0c20*1+10*1=30</p><p>\t\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u6837\u4f8b\uff0c\u5151\u6362\u4e24\u4e2a\u7b2c\u4e8c\u79cd\u4ece\u8005\u7684\u5de7\u514b\u529b\uff0c10*0+20*2=40</p>", "create_time": "2017-03-16T04:54:46.869Z", "last_update_time": "2017-03-17T08:35:09.567Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 45, "total_accepted_number": 11, "contest": 3, "sort_index": "F", "is_public": true}}, {"model": "contest.contestproblem", "pk": 23, "fields": {"title": "\u62bd\u5361\u7684\u79d8\u8bc0", "description": "<p>\u4eca\u5929\uff0c\u7af9\u5b50\u5f88\u5f00\u5fc3\uff0c\u56e0\u4e3a\u4ed6\u5728\u73a9\u9634\u9633\u5e08\u7684\u65f6\u5019\u62bd\u5230\u4e86SSR\uff0c\u4f46\u662f\u4ed6\u73b0\u5728\u6709\u5f88\u591a\u591a\u4f59\u7684\u7b26\u5492\u3002</p><p>\t\u7af9\u5b50\u628a\u8fd9\u4e9b\u7b26\u5492\u6392\u6210\u4e00\u6392\uff0c\u5e76\u7ed9\u6bcf\u4e00\u4e2a\u7b26\u5492\u4e00\u4e2a\u53ef\u7231\u503c\u3002</p><p>\t\u7b2c$i$\u4e2a\u7b26\u5492\u7684\u53ef\u7231\u503c\u4e3a$cute_{i}$</p><p>\t\u73b0\u5728\u7af9\u5b50\u7ed9\u4f60k\u4e2a\u6570$a_{1},a_{2}\\cdots a_{k}$\uff0c\u4ed6\u60f3\u95ee\u4f60\u5bf9\u4e8e\u6bcf\u4e00\u4e2a$a_{i}$,\u6709\u591a\u5c11\u5bf9{l,r}(1&lt;=l&lt;=r&lt;=n),\u80fd\u4f7f\u5f97</p><p>\t$cute_{l}\\ xor\\ cute_{l+1}\\ xor\\ \\cdots\\ xor\\ cute_{r}\\ &nbsp;= a_{i}$.</p><p>\t\u5176\u4e2dxor\u4e3a\u6309\u4f4d\u5f02\u6216\u8fd0\u7b97.</p>", "input_description": "\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T(T<=5)\n\u63a5\u7740\u662fT\u7ec4\u6570\u636e\u3002\n\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570n(2<=n<=10000),\u8868\u793a\u7af9\u5b50\u62e5\u6709\u7684\u7b26\u5492\u7684\u6570\u91cf\u3002\n\u7b2c\u4e8c\u884c\u662fn\u4e2a\u6574\u6570:$cute_{1},cute_{2}.....cute_{n}$,($0<=cute_{i}<=1000000$)\u3002\n\u63a5\u7740\u662f\u4e00\u4e2a\u6574\u6570k,(1<=k<=1000)\n\u6700\u540e\u4e00\u884c\u662fk\u4e2a\u6574\u6570$a_{1},a_{2}.....a_{n}$,($0<=a_{i}<=1000000$)\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6570\u636e\uff0c\u8f93\u51fak\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u5728cute\u5e8f\u5217\u4e2d\u80fd\u627e\u5230\u591a\u5c11\u5bf9{l,r}\u6ee1\u8db3\u9898\u76ee\u63cf\u8ff0\u7684\u6761\u4ef6\u3002", "samples": "[{\"input\": \"1\\n5\\n1 1 2 2 3\\n3\\n1 2 3\\n\", \"output\": \"4\\n4\\n4\\n\"}]", "test_case_id": "c74667afecfd1c891990e50d0135e45d", "hint": "<p>\t\u5bf9\u4e8e\u6837\u4f8b,\u5bf9\u4e8e$a_{1}$=1,\u6211\u4eec\u53ef\u4ee5\u627e\u5230{1,1},{2,2},{2,4},{4,5}\u8fd9\u68374\u5bf9\u6ee1\u8db3\u6761\u4ef6</p><p>\tcute[1] = 1; cute[2] = 1; cute[2] xor cute[3] xor cute[4] = 1; cute[4] xot cute[5] = 1</p>", "create_time": "2017-03-17T10:10:56.174Z", "last_update_time": "2017-03-17T13:26:07.745Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 19, "total_accepted_number": 2, "contest": 3, "sort_index": "G", "is_public": true}}, {"model": "contest.contestproblem", "pk": 24, "fields": {"title": "\u627e\u4f17\u6570", "description": "<p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3an\u5e8f\u5217\uff0c\u8bf7\u4f60\u627e\u51fa\u8fd9\u91cc\u9762\u7684\u4f17\u6570(\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570)<br /></p>", "input_description": "\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T(T<=100)\n\u63a5\u7740\u662fT\u7ec4\u6570\u636e\u3002\n\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570n(1<=n<=100),\u8868\u793a\u7af9\u5b50\u62e5\u6709\u7684\u7b26\u5492\u7684\u6570\u91cf\u3002\n\u7b2c\u4e8c\u884c\u662fn\u4e2a\u6574\u6570:$v_{1},v_{2}.....v_{n}$,($0<=v_{i}<=100$)\u3002", "output_description": "\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u4f17\u6570\u3002\u5982\u679c\u6709\u591a\u4e2a\u4f17\u6570\uff0c\u5219\u8f93\u51fa\u4efb\u610f\u4e00\u4e2a\u3002", "samples": "[{\"input\": \"2\\n3\\n1 2 2\\n5\\n1 1 2 2 3\\n\\n\", \"output\": \"2\\n2\\n\"}]", "test_case_id": "22ffd8b24eef40796c22abf4f0696a1b", "hint": "<p>\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6837\u4f8b\uff0c2\u51fa\u73b0\u4e862\u6b21\uff0c\u6700\u591a\u3002</p><p>\t\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u6837\u4f8b\uff0c1\u548c2\u90fd\u51fa\u73b0\u4e862\u6b21\uff0c\u8f93\u51fa1\u548c2\u5747\u53ef</p>", "create_time": "2017-03-17T15:01:13.702Z", "last_update_time": "2017-03-17T15:05:06.964Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": true, "spj_language": 2, "spj_code": "#include <stdio.h>\n#include <map>\n#include <string>\n\n#define AC 0\n#define WA 1\n#define ERROR -1\n\nint spj(FILE *input, FILE *user_output);\n\nvoid close_file(FILE *f){\n    if(f != NULL){\n        fclose(f);\n    }\n}\n\nint main(int argc, char *args[]){\n    FILE *input = NULL, *user_output = NULL;\n    int result;\n    if(argc != 3){\n        printf(\"Usage: spj x.in x.out\\n\");\n        return ERROR;\n    }\n    input = fopen(args[1], \"r\");\n    user_output = fopen(args[2], \"r\");\n    if(input == NULL || user_output == NULL){\n        printf(\"Failed to open output file\\n\");\n        close_file(input);\n        close_file(user_output);\n        return ERROR;\n    }\n\n    result = spj(input, user_output);\n    printf(\"result: %d\\n\", result);\n\n    close_file(input);\n    close_file(user_output);\n    return result;\n}\n\nint spj(FILE *input, FILE *user_output){\n\tint T;\n\tchar s[12345];\n\twhile(fscanf(input,\"%d\",&T) != EOF){\n\t\twhile(T--){\n\t\t\tstd::map<std::string,int>cnt;\n\t\t\tint n;\n\t\t\tint anscnt = 0;\n\t\t\tint foo = fscanf(input,\"%d\",&n);\n\t\t\twhile(n--){\n\t\t\t\tint tok = fscanf(input,\"%s\",s);\n\t\t\t\tstd::string ss(s);\n\t\t\t\tcnt[ss]++;\n\t\t\t\tif(cnt[ss] > anscnt)\n\t\t\t\t\tanscnt = cnt[ss];\n\t\t\t}\n\t\t\tint bar = fscanf(user_output,\"%s\",s);\n\t\t\tstd::string ss(s);\n\t\t\tif(cnt[ss] != anscnt)\n\t\t\t\treturn WA;\n\t\t}\n\t\treturn AC;\n\t}\n}", "spj_version": "1062eceac2a309899e845b7b25c17e5e", "visible": true, "total_submit_number": 141, "total_accepted_number": 36, "contest": 3, "sort_index": "H", "is_public": true}}, {"model": "contest.contestproblem", "pk": 25, "fields": {"title": "Knapsack Problem", "description": "<p style=\"margin-bottom: 0.0001pt; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">Today $HH$ becomes a shopper, and he wants to buy a lot.</p><p style=\"margin: 0cm 0cm 0.0001pt; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; word-wrap: break-word;\">&nbsp;</p><p style=\"margin: 0cm 0cm 0.0001pt; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; word-wrap: break-word;\">$HH$ has a bag that can carry at most $w$ kilograms things in total, and he has $d$ dollars.</p><p style=\"margin: 0cm 0cm 0.0001pt; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; word-wrap: break-word;\">&nbsp;</p><p style=\"margin: 0cm 0cm 0.0001pt; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; word-wrap: break-word;\">Now he wants to buy $n$ items\uff0cthe $i^{th}$ item weights $w_i$ kilogram and costs $c_i$ dollars.</p><p style=\"margin: 0cm 0cm 0.0001pt; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; word-wrap: break-word;\">&nbsp;</p><p style=\"margin: 0cm 0cm 0.0001pt; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; word-wrap: break-word;\">$HH$is not good at math so he asks you to tell him whether he can buy all the things and carry them with the bag.</p><p style=\"margin: 0cm 0cm 0.0001pt; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; word-wrap: break-word;\"><br /></p><p>&nbsp;</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line contains three positive integers $n,w,d(1 \\leq n \\leq 100,1 \\leq w \\leq 100,1 \\leq d \\leq 100)$ - the number of items $HH$ wants to buy, the max weight that his bag can carry, and the money he has.\n\nThe second line contains $n$ integers $w_1,w_2\\ldots w_n$($1\\leq w_i \\leq 100$).\n\nThe third line contains $n$ integers $c_1,c_2\\ldots c_n$($1\\leq c_i \\leq 100$).", "output_description": "For each test case, output one line \"YES\" (without quotes) if $HH$ is possible to buy all the items and carry them in his bag, and \"NO\" (without quotes) otherwise.", "samples": "[{\"input\": \"2\\n4 12 17\\n1 2 4 5\\n5 4 6 2\\n4 11 17\\n1 2 4 5\\n5 4 6 2\", \"output\": \"YES\\nNO\"}]", "test_case_id": "d3dd26cb7413812991a603eda688d0f1", "hint": "<p>In the first example all the items cost $17$ dollars in total and weight $12$ kilograms in total, $HH$ has enough money and his bag can carry $12$ kilogram things.<br /></p>", "create_time": "2017-04-25T06:08:18.695Z", "last_update_time": "2017-05-11T13:59:31.400Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 5, "total_accepted_number": 2, "contest": 9, "sort_index": "A", "is_public": false}}, {"model": "contest.contestproblem", "pk": 26, "fields": {"title": "\u4e0d\u518d\u5b64\u72ec\u7684HandsomeHow", "description": "<p>\u4e0d\u518d\u5b64\u72ec\u7684HandsomeHow<br /></p>", "input_description": "\u4e0d\u518d\u5b64\u72ec\u7684HandsomeHow", "output_description": "\u4e0d\u518d\u5b64\u72ec\u7684HandsomeHow", "samples": "[{\"input\": \"\\u4e0d\\u518d\\u5b64\\u72ec\\u7684HandsomeHow\", \"output\": \"\\u4e0d\\u518d\\u5b64\\u72ec\\u7684HandsomeHow\"}]", "test_case_id": "7111b120a9f9f8149af6fd8d16e450f0", "hint": "", "create_time": "2017-04-25T06:13:38.894Z", "last_update_time": "2017-04-28T01:49:28.019Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 4, "total_accepted_number": 1, "contest": 10, "sort_index": "A", "is_public": false}}, {"model": "contest.contestproblem", "pk": 27, "fields": {"title": "Tickets", "description": "<p>Bamboo want to buy a ticket cost P. she can buy the ticket by app and get a concession to D. At the same time, she can appoint an agent and have different discount. Please tell her what kind of way is most economical and the minimum cost. Print the first way if there is more than one possibility.<br /></p>", "input_description": "Input contains multiple test cases. \nThe first line of each test contains three integers P, D, n. (1 <= P, D <= 1e9, 1 <= n <= 1e5), the ticket price, the concession of app and the number of agent.\nThe second n line contains a real number a[i], the discount of i th agent.", "output_description": "For each test case, print a line. Print \u201cAPP\u201d if buy ticket by app or print the agent\u2019s order if buy ticket by appoint an agent. And an integer means the minimum cost, keeping two decimal places.", "samples": "[{\"input\": \"600 20 3\\n0.01\\n0.03\\n0.02\\n600 10 3\\n0.01\\n0.03\\n0.02\\n\", \"output\": \"APP 580.00\\n2 582.00\"}]", "test_case_id": "c0a4c3270b503cd7c354ef82becf6430", "hint": "", "create_time": "2017-04-28T04:08:17.603Z", "last_update_time": "2017-04-28T05:41:47.576Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 115, "total_accepted_number": 20, "contest": 5, "sort_index": "A", "is_public": true}}, {"model": "contest.contestproblem", "pk": 28, "fields": {"title": "Wave string", "description": "<p>There is a kind of string called \u201cwave string\u201d. If str is made as s1s2s3...sL-1sLsL-1sL-2...s2s1s2s3...., we will call it \u201cwave string\u201d and s1s2s3...sL and sLsL-1...s1 are its waves and they must appear alternately.</p><p>For example, \u201cabc\u201d, \u201cabcba\u201d, \u201cabcbabc\u201d,\u201dabcbabcba\u201d... are wave strings. But they have different number of wave, \u201cabc\u201d have 1 wave, \u201cabcba\u201d have 2 waves(abc,cba), \u201cabcbabc\u201d have 3 waves(abc,cba,abc).</p><p>Now, s is a string of lenth n(s1s2s3s4s5...sn), and str is a wave string which is a substring of s(sisi+1si+2...si+m-1) . We have known i and L and we want to know the maxium number of wave str have.</p>", "input_description": "Input contains multiple test cases. \nEach test case: \nThe first line is a string s (1<= |s| <= 10^6)\nThe second line is a integer k (1 <= k <= 10^5)\nThe next k lines, each line is i and L, (1<= i <=|s|,2 <= L <=10^4).", "output_description": "k lines, each lines is the maxium number of wave str have.", "samples": "[{\"input\": \"aabaab\\n2\\n1 2\\n1 3\\nabcbabcbabc\\n5\\n1 2\\n1 3\\n3 2\\n3 3\\n10 3\\n\", \"output\": \"1\\n2\\n1\\n5\\n1\\n4\\n0\"}]", "test_case_id": "74dacb7954f99accf47119e6976849bc", "hint": "", "create_time": "2017-04-28T04:10:47.723Z", "last_update_time": "2017-04-28T04:33:12.828Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "contest": 5, "sort_index": "B", "is_public": true}}, {"model": "contest.contestproblem", "pk": 29, "fields": {"title": "The road ahead to be boundless", "description": "<p>We will find life is difficult and run into a stone wall sometimes. But we must go ahead because there is no way to turn back. Recently in the last Labor Day, UsedRose and Yeah with some friends went to park. Unfortunately they were trapped by a storm. So they must drive back to school. But they only have one car and the car can take two people at most. The important thing is that the car\u2019s speed depend on the person who is the slowest in the car. They are a team, so they ask for your help to let all people go back to school as soon as possible.<br /></p>", "input_description": "Input contains multiple test cases. \nEach test case contains an integer n (1<=N<=10000),m(999 <= m <= 999999),Said a total of N people to cross the river.and the length of river is m.\nNext row contains n integers ni, show the i-th people\u2019s speed that he can accept max .(1 <= ni <= 1000)", "output_description": "For each test case, Print a line, the times of everyone can go back to school(round up to an integer) and make as soon as possible.", "samples": "[{\"input\": \"3 999\\n1 10 100\\n2 9999\\n1 1\\n4 30\\n30 15 6 5\", \"output\": \"1109\\n9999\\n13\"}]", "test_case_id": "377e4d410d3999cd16f993ee6dab0431", "hint": "", "create_time": "2017-04-28T04:11:34.789Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 6, "total_accepted_number": 1, "contest": 5, "sort_index": "C", "is_public": true}}, {"model": "contest.contestproblem", "pk": 30, "fields": {"title": "King\u2019s Knight", "description": "<p>Long time ago, there was a powerful magic kingdom. The king led his Knights to go on an expedition in order to acquire more treasure. When they came back, the king decided to reward the Knights who fought for him.</p><p>The king declared that every Knight would gain A coins during the first year. Every year after the first year the gold they would gain are Q times as many as the last year. Could you please help the Knights count how many coins would they gain N years later\uff1f(The answer must be very large, so give the answer module M)</p><p>(1&lt;=T&lt;=50,1&lt;=A&lt;=500,1&lt;=Q&lt;=500,2&lt;=M&lt;=10^9+7,1&lt;=P&lt;=1000)</p>", "input_description": "The first line of the input contains integer t ? the number of the test cases\nFor each case:\nThe first line of the input contains three integers A, Q, M ? the gold of the first year, the number of the multiple and the modulus.\nThe second line of the input contains a P-digits Big Integer n ? the number of years", "output_description": "For each case there must be an integer. The answer that module M.", "samples": "[{\"input\": \"2\\n1 2 100\\n3\\n1 3 101\\n3\\n\", \"output\": \"7\\n13\\n\"}]", "test_case_id": "bd0934faf03a6a9ed99a54e6277cb426", "hint": "", "create_time": "2017-04-28T04:12:14.028Z", "last_update_time": "2017-04-28T04:13:59.712Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 3, "total_accepted_number": 0, "contest": 5, "sort_index": "D", "is_public": true}}, {"model": "contest.contestproblem", "pk": 31, "fields": {"title": "DaVinci code", "description": "<p>DaVinci Code is a famous novel which is written by Dan Brown. And a DaVinci Code Tube is a lock that has five code wheels. Only you put the code wheels into a right order, could you open the lock. Catfish is a person who is very curious. So after a few days, he finally made one, which is different from that one in the novel. The tube he made has only four Alphabet code wheels, and each wheel only contains eight characters in upper case. They are \u2018A\u2019,\u2019B\u2019,\u2019C\u2019,\u2019D\u2019,\u2019E\u2019,\u2019F\u2019,\u2019G\u2019 and \u2018H\u2019. In order to open the code tube, you have to put the code wheel to the right order. Each time, you could add or minus 1 to any character. When add 1 to \u2018H\u2019, the character will change to \u2018A\u2019 and minus 1 to \u2018A\u2019, the character will change to \u2018H\u2019. You could also exchange the character with its neighbor. Each action will cost one step. Catfish wants to know that how can we use minimum number of steps to open the code tube.</p><p>(1&lt;=t&lt;=20)</p>", "input_description": "The first line of the input contains integer t ? the number of the test cases\nFor each case:\nThe first line of the input contains four characters ? the beginning of the code tube\nThe second line of the input contains four characters ?the password of the code tube", "output_description": "For each case there must be an integer. The minimum number of steps", "samples": "[{\"input\": \"2\\nAAAA\\nAAAB\\nAAAH\\nBAHA\\n\", \"output\": \"1\\n2\"}]", "test_case_id": "8823e4048edfc4a750dde4a020367486", "hint": "", "create_time": "2017-04-28T04:12:51.165Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "contest": 5, "sort_index": "E", "is_public": true}}, {"model": "contest.contestproblem", "pk": 32, "fields": {"title": "Legend of the Galactic Heroes", "description": "<p>\u201cThere are something can be done, something can\u2019t.\u201d</p><p>In 799 years of The Milky Calendar, Yang Wen-li commanded the Iserlohn Fleet to defense the Reinhard\u2019s attack. Yang deeply understands the enemy is stronger than his fleet. The idea here is to avoid a head on battle with a strong enemy, and instead strike at his weakness elsewhere. The emperor fleet was divided into n parts, named 1,2,3\u2026n from left to right. The numbers of warships in i th fleet is ai. Similarly, Yang sent out n fleets and the numbers is bi.(|ai|,|bi| &lt;= 1e4)</p><p>M messages formatted \u201cl r k\u201d about battlefield were sent to Flagship Hyperion and they are sorted in time-ordered. The massage expresses \u201ck is the sum of emperor\u2019s fleets subtract the sum of Yang\u2019s in [l,r]\u201d.But the information passing sometimes make mistakes. The task is checking messages and tell Yang how many conflicts happen(You can ignore the messages have conflicts with previous messages). The fate of Yang\u2019s Fleet depends on you, go for it!</p>", "input_description": "Input contains multiple test cases.\nThe first line of each test contains two integers n, m. (1 <= n <= 1e5,1 <= m <= 1e4)\nThe following m lines have three integer l, r, k (1 <= l <= r <= n, |k| <= 1e9)", "output_description": "For each test case, Print a integer, the numbers of conflicts.", "samples": "[{\"input\": \"4 3\\n1 2 1\\n3 4 2\\n1 4 2\\n4 4\\n1 1 1\\n1 2 2\\n1 3 3\\n1 4 4\\n\", \"output\": \"1\\n0\"}]", "test_case_id": "81318fa08392d85f9fb284cd3a118c8a", "hint": "", "create_time": "2017-04-28T04:14:40.284Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "contest": 5, "sort_index": "F", "is_public": true}}, {"model": "contest.contestproblem", "pk": 33, "fields": {"title": "White album 2", "description": "<p>\u201cWhy is it go? ...For the first time having a person I love, and a person who can be lifetime friend. Two piece of happiness come together, and they bring more happiness to me. What I get should be wonderful time like a dream. But why is it go?\u201d</p><p>The \u201chappiness\u201d has a value called \u201cfavor degree\u201d. One piece of happiness can bring more happiness. Unfortunately, Touma can only choose one of them. She can choose different happiness to get if she gets the same happiness twice or more. Touma knows the happiness\u2019 \u201cfavor degree\u201d and some information meaning happiness A can brings happiness B. How much \u201cfavor degree\u201d Touma can get? And, if Touma gets the same happiness more than once, the \u201cfavor degree\u201d will only be counted once. At first time Touma have the 1th Happiness.</p>", "input_description": "Input contains multiple test cases. \nThe first line of each test contains two integers n, m. (1 <= n <= 1e4, 1 <= m <= 1e5),n is the number of happiness, m is the number of information.\nThe second line contains n integers v[i], the \u201cfavor degree\u201d of i th happiness.(0 < v[i] <= 1e4)\nThe following m lines have three integer a, b (1 <= a, b <= n), meaning happiness a can bring happiness b.", "output_description": "For each test case, Print a integer, the maximum \u201cfavor degree\u201d Touma can get.", "samples": "[{\"input\": \"6 6\\n2 4 3 5 4 4\\n1 2\\n2 4\\n1 3\\n3 5\\n3 6\\n6 3\\n\", \"output\": \"13\"}]", "test_case_id": "499d4453e4bb0ed70df32c5e864716b1", "hint": "", "create_time": "2017-04-28T04:16:04.913Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 2, "total_accepted_number": 2, "contest": 5, "sort_index": "G", "is_public": true}}, {"model": "contest.contestproblem", "pk": 34, "fields": {"title": "Put an elephant into a refrige", "description": "<p>Yesterday when i had a talk with my bamboo, he said that he went hunting recently and harvest the highly. So he wants to have a party, but he has too much dead elephant. Fortunately,he also has many refrigerators, and he want to put everyone elephant into a refrigerator. Elephants were put on an X-coordinate axis. The i-th elephant&#039;s coordinate is Xi meters. Bamboo can only put an elephant into a refrigerator once, and his start position is the point in the x-coordinate axis. Putting an elephant into a refrigerator does not cost time, but every elephant will decay if it isn\u2019t in the refrigerator, and the i-th elephant has a decay speed vi.</p><p>Now he wants to let the sum of elephants decay is minimum. Would you please calculate the minimum decay of all elephants?</p>", "input_description": "Input contains multiple test cases. \nEach test case contains two integers N (1<= N <= 2000),V(V > 0),X(x > 0),represents the number of elephants, the speed and start position of bamboo.\nThen N lines followed. Each line contains two integers Xi ( Xi >= 0 ), Yi(Yi >=0),which showed i-th elephant\u2019s position and decay speed.", "output_description": "For each test case, Print a line, the sum of decay that is minimum.", "samples": "[{\"input\": \"1 1 1\\n1 1\\n2 1 0\\n1 1\\n2 2\\n\", \"output\": \"0\\n5\"}]", "test_case_id": "e70d02fffdeae30906c85746d54d6c1f", "hint": "", "create_time": "2017-04-28T04:17:07.799Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "contest": 5, "sort_index": "H", "is_public": true}}, {"model": "contest.contestproblem", "pk": 35, "fields": {"title": "Buy buy buy", "description": "<p>yeahpeng like apple very much. One day, he comes to the street of apple and so many watermelons which make him want to &quot;buy buy buy&quot;. But, he cant not buy all because of money. So, he makes a rule to buy watermelons.</p><p>There are n stores on the street. yeahpeng will start at the first store and end in the last store. And he will buy one or zero watermelon in every store and never turn back.</p><p>Every watermelon has its price p and weight w. If the price of previous in jth store he buy is pj and the next one in ith store is pi, there mush be i &gt; j and pi - ki &lt;= pj &lt;= pi + ki, the first watermelon he could buy in any store.</p><p>yeahpeng want to get the maximum sum of weight.</p>", "input_description": "Input contains multiple test cases. \nEach test case: \nBegin with an integer n(1 <= n <= 30000), \nn lines follow, each with three integers: pi wi ki (1 <= pi <= 10^10, 1 <= wi <= 10^6, 1 <= ki <= 10^10)", "output_description": "One line: the maximum sum of weight", "samples": "[{\"input\": \"3\\n2 2 1\\n6 3 1\\n5 3 3\\n6\\n1 1 1\\n2 1 1\\n3 2 1\\n1 2 1\\n2 2 1\\n3 2 1\\n\", \"output\": \"6\\n8\\n\"}]", "test_case_id": "4731c89e07c500b508322329f2b8d3a7", "hint": "", "create_time": "2017-04-28T04:18:28.444Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 17, "total_accepted_number": 0, "contest": 5, "sort_index": "I", "is_public": true}}, {"model": "contest.contestproblem", "pk": 36, "fields": {"title": "Escape from the earth", "description": "<p>It is said that the doomsday will come and earth would be destroyed. n people want to escape from earth. There are m stars can be arrived. Moreover, some of them are suitable for a particular person. Within the limit of resource, i th star\u2019s maximum capacity is ai. Can you find a feasible solution to make everyone arrive a star suit him?<br /></p>", "input_description": "Input contains multiple test cases.\nThe first line of each test contains two integers n, m. (1 <= n <= 1e5, 1 <= m <= 10), the number of people and the number of stars.\nThe second n line contains m integers k [i, j], k [i, j] = 1 means star j suit person i and k [i, j] = 0 means unsuitable.\nThe last line have m integer a[i] (1 <= a[i] <= 1e5), meaning star i \u2019s maximum capacity is a[i].", "output_description": "For each test case, Print a line \u201cYES\u201d if everyone can arrive a star suit him and \u201cNO\u201d if can\u2019t.", "samples": "[{\"input\": \"1 1\\n1\\n1\\n\\n2 2\\n1 0\\n1 0\\n1 1\\n\", \"output\": \"YES\\nNO\"}]", "test_case_id": "ae43ec78413d095a7c16f17a099b0883", "hint": "", "create_time": "2017-04-28T04:20:38.429Z", "last_update_time": "2017-04-28T04:40:11.624Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "contest": 5, "sort_index": "J", "is_public": true}}, {"model": "contest.contestproblem", "pk": 37, "fields": {"title": "Alpha and Beta", "description": "<p>Alpha and Beta are best friends and make company with each other all the time.</p><p>There is a time when a game called \u201cmake pairs\u201d gains much popularity. Alpha and Beta are very fond of it and like to invite you to play with them.</p><p>Given a string, which is simply composed of either A or B, they want to know how many AB pairs can Alpha and Beta find in that string. Can you help them?</p><p>A pair is legal if and only if A appears at first, and whether B is near to A is not required. In other words, B makes pair with A which is nearest before B, and they both can be used only once.</p>", "input_description": "There are a series of strings. The length of each string is less than 1000.", "output_description": "For each case, if there is none legal pair that they can find, print -1. Otherwise, print the number of them.\nPlease note the output format.", "samples": "[{\"input\": \"BA\\nAABB\\nBAB\\n\", \"output\": \"Case #1: -1\\nCase #2: 2\\nCase #3: 1\"}]", "test_case_id": "98658943b2bd6c0bb58e3789db8d5a51", "hint": "", "create_time": "2017-04-28T04:22:24.524Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 87, "total_accepted_number": 22, "contest": 5, "sort_index": "K", "is_public": false}}, {"model": "contest.contestproblem", "pk": 38, "fields": {"title": "Ranking Problem", "description": "<p>If you are a LOLer, then you must be very familiar with LPL league. In the spring of 2016 LPL league game to take the points system, if a team won in BO3, then increase 1 point, failure does not buckle points, followed by each team based on the standings, the higher the ranking the higher the points, the same points if the same rank.Then only if there are n teams participating, the total number of cases the ranking in the game?</p><p>For example, 2 teams ranking has 3 ways.</p><p>1. Both first</p><p>2. team A first and team B second</p><p>3. team B first and team A second</p>", "input_description": "Input consists of several datasets. Each of them has a single integer number n (1 \u2264 n \u2264 1000) \u2015 the number of LPL teams.", "output_description": "For each case, print the number of cases the ranking in the game. The result can be very large, print the result modulo 2016515.", "samples": "[{\"input\": \"1\\n3\\n1000\\n\", \"output\": \"1\\n13\\n1878195\"}]", "test_case_id": "f804089caf57d2dcd4d0906d2a98e7cc", "hint": "", "create_time": "2017-04-28T04:23:19.506Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 11, "total_accepted_number": 6, "contest": 5, "sort_index": "L", "is_public": false}}, {"model": "contest.contestproblem", "pk": 39, "fields": {"title": "Juju's lessons", "description": "<p>Juju is a child who enjoys learning. she has two majors and many courses have time conflict.As a child who love to learn, she wants to take lessons as many as she can. There are each lesson&#039;s start time and end time. She wants to know how many lessons can be taked after she master the replication.<br /></p>", "input_description": "Input contains multiple test cases. \nThe first line of each test case contains one interger n(1 <= n <= 100),the numbers of lesson.\nNext n lines have two integers a, b. (1 <= a < b <= 1000),the start time and the end time of each lesson.", "output_description": "For each test case, Print a line, the numbers of lessons she can take.", "samples": "[{\"input\": \"2\\n1 3\\n4 5\\n3\\n1 4\\n3 5\\n2 3\", \"output\": \"2\\n2\\n\"}]", "test_case_id": "0a6c0adf0fea4552b87c87bc61e9f626", "hint": "", "create_time": "2017-04-28T04:24:39.296Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 21, "total_accepted_number": 8, "contest": 5, "sort_index": "M", "is_public": false}}, {"model": "contest.contestproblem", "pk": 40, "fields": {"title": "Piece of Cake", "description": "<p>The annual neonatal trials will start next week, at the same time, all old guys of the ACM teams want to reward all M students who work hard in the match. So, we buy N cakes which are of different radius. Consider the height of each cake is 1.</p><p>However, Master Ye consider that every student should assign to the equal size of cake, which means every cake assigned to students should be the same volume. Also, he mentions, one student should assign only one piece of cake.</p><p>Master Ye want you to calculate the maximum volume that every student can get. Can you help him figure out this problem?</p>", "input_description": "The first line contain the number of test cases,no more than 20.\nThe second line contain two integers,1 \u2264 N, M \u2264 65536 which means the number of cakes and students\nThen following one line contain N integers represent each cake\u2019s radius,and 1 \u2264 r \u2264 65536.", "output_description": "For each test case, output one line with the largest possible volume V such that me and my friends can all get a pie piece of size V. The answer should be given as a floating point number correct to three decimal places;", "samples": "[{\"input\": \"3\\n3 3\\n4 3 3\\n1 24\\n5\\n10 5\\n1 4 2 3 4 5 6 5 4 2\", \"output\": \"Case#1: 28.274\\nCase#2: 3.272\\nCase#3: 50.265\"}]", "test_case_id": "f9a7ad2904e818a795e859b32d2eaa39", "hint": "", "create_time": "2017-04-28T04:26:32.709Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 2, "total_accepted_number": 1, "contest": 5, "sort_index": "N", "is_public": false}}, {"model": "contest.contestproblem", "pk": 41, "fields": {"title": "How many primes", "description": "<p>A prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, 5 is prime because 1 and 5 are its only positive integer factors, whereas 6 is composite because it has the divisors 2 and 3 in addition to 1 and 6.</p><p>Prime looks so lonely because it only has a few factors. That is the reason Junko show special preference to the prime. Now, She wants to know how many primes in [l, r].</p>", "input_description": "Input contains multiple test cases. \nEach test case contains two integers l, r. (1 <= l <= r <= 1,000,000)", "output_description": "For each test case, Print a line, the numbers of prime in [l, r].", "samples": "[{\"input\": \"1 1\\n1 10\\n233 666\\n\", \"output\": \"0\\n4\\n71\"}]", "test_case_id": "ac48d9c6c922b34c484f8a1d3ed88016", "hint": "", "create_time": "2017-04-28T04:27:11.134Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 54, "total_accepted_number": 10, "contest": 5, "sort_index": "O", "is_public": false}}, {"model": "contest.contestproblem", "pk": 42, "fields": {"title": "Yeahpeng's inequality", "description": "<p>Yeahpeng is not good at inequality. Unfortunately, there are many inequalities in his homework and they make him be in trouble. Cornered yeah wants your help.</p><p>There are n inequalities in total and the form is:</p><p>Op x</p><p>Op is one of {&gt;=, &gt;, =, &lt;, &lt;=}, x is an integer. What he wants to know is how many inequalities can be satisfied at most in the first i inequalities.</p>", "input_description": "Input contains multiple test cases.\nIn each test case, the first line is a integer n(1 <= n <= 50,000)\nThe following n line is the inequalities [op x].", "output_description": "For each test case print n lines. An integer in each line, the maximum numbers can be satisfied in the first i inequalities.", "samples": "[{\"input\": \"For each test case print n lines. An integer in each line, the maximum numbers can be satisfied in the first i inequalities.\\n\", \"output\": \"1\\n2\\n3\\n4\\n5 \"}]", "test_case_id": "d174ed1947f63feb8cb21b8ad30a1fd4", "hint": "", "create_time": "2017-04-28T04:27:54.146Z", "last_update_time": "2017-04-28T04:41:31.768Z", "created_by": 1, "time_limit": 3000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 5, "total_accepted_number": 0, "contest": 5, "sort_index": "P", "is_public": false}}, {"model": "contest.contestproblem", "pk": 43, "fields": {"title": "Ctrl + H", "description": "<p>As we know, \u2019Ctrl + H\u2019 is shortcut key of \u2018replace\u2019. In the problem, we define the \u2018replace\u2019 as replacing one character (all the same character) for another. Now, Junko receives a text and should do some \u2018replace\u2019 on it. She has finished the task, do you?</p><p>The text consists of only lowercase English letters.</p>", "input_description": "Input contains multiple test cases. \nThe first line of each test case contains two integer n and m (1 <= n, m < 1000), the length of text, and the number of operation.\nThe second line is the text. Next m lines describe the \u2018replace\u2019, two letters.", "output_description": "Print a line, the text after finishing the operation.", "samples": "[{\"input\": \"4 1\\nguaa\\na b\\n10 2\\njavajavaja\\na b\\nb c\\n\", \"output\": \"gubb\\njcvcjcvcjc\"}]", "test_case_id": "487efb8dbcbb5829fdfac180685325e8", "hint": "", "create_time": "2017-04-28T04:30:46.897Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 40, "total_accepted_number": 11, "contest": 5, "sort_index": "Q", "is_public": false}}, {"model": "contest.contestproblem", "pk": 44, "fields": {"title": "Knapsack Problem", "description": "<p style=\"margin-bottom: 0.0001pt; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">Today $HH$ becomes a shopper, and he wants to buy a lot.</p><p style=\"margin: 0cm 0cm 0.0001pt; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">&nbsp;</p><p style=\"margin: 0cm 0cm 0.0001pt; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">$HH$ has a bag that can carry at most $w$ kilograms things in total, and he has $d$ dollars.</p><p style=\"margin: 0cm 0cm 0.0001pt; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">&nbsp;</p><p style=\"margin: 0cm 0cm 0.0001pt; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">Now he wants to buy $n$ items\uff0cthe $i^{th}$ item weights $w_i$ kilogram and costs $c_i$ dollars.</p><p style=\"margin: 0cm 0cm 0.0001pt; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">&nbsp;</p><p style=\"margin: 0cm 0cm 0.0001pt; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">$HH$is not good at math so he asks you to tell him whether he can buy all the things and carry them with the bag.</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&nbsp;</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line contains three positive integers $n,w,d(1 \\leq n \\leq 100,1 \\leq w \\leq 100,1 \\leq d \\leq 100)$ - the number of items $HH$ wants to buy, the max weight that his bag can carry, and the money he has.\n\nThe second line contains $n$ integers $w_1,w_2\\ldots w_n$($1\\leq w_i \\leq 100$).\n\nThe third line contains $n$ integers $c_1,c_2\\ldots c_n$($1\\leq c_i \\leq 100$).", "output_description": "For each test case, output one line \"YES\" (without quotes) if $HH$ is possible to buy all the items and carry them in his bag, and \"NO\" (without quotes) otherwise.", "samples": "[{\"input\": \"2\\n4 12 17\\n1 2 4 5\\n5 4 6 2\\n4 11 17\\n1 2 4 5\\n5 4 6 2\\n\", \"output\": \"YES\\nNO\\n\"}]", "test_case_id": "e082649ee7a7c2a9f83b5ec5c7291d88", "hint": "<p>In the first example all the items cost $17$ dollars in total and weight $12$ kilograms in total, $HH$ has enough money and his bag can carry $12$ kilogram things.<br /></p>", "create_time": "2017-04-30T13:08:15.667Z", "last_update_time": "2017-05-13T16:36:45.843Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 61, "total_accepted_number": 49, "contest": 8, "sort_index": "A", "is_public": false}}, {"model": "contest.contestproblem", "pk": 45, "fields": {"title": "Shortest Path", "description": "<p style=\"margin-bottom: 0px;\">Today $HH$ becomes a designer, and he faces a problem so he asks you for help.</p><p style=\"margin-bottom: 0px;\"><br /></p><p style=\"margin-bottom: 0px;\">$Treeisland$ is a country with $n$ cities and $n - 1 $ two-way road and from any city you can go to any other cities.</p><p style=\"margin-bottom: 0px;\"><br /></p><p style=\"margin-bottom: 0px;\">$HH$ the designer is going to design a plan to divide $n$ city into $n/2$ pairs so that the sum of the length between the $n/2$ pairs city is minimum.</p><p style=\"margin-bottom: 0px;\"><br /></p><p style=\"margin-bottom: 0px;\">Now $HH$ has finished it but he doesn&#039;t know whether it&#039;s true so he ask you to calculate it together.</p><p style=\"margin-bottom: 0px;\"><br /></p><p style=\"margin-bottom: 0px;\">It&#039;s guaranteed that $n$ is even.</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 100)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line contains an positive integer $n(1 \\leq n \\leq 10^4)$, represents the number of cities in $Treeisland$, it's guarantee that n is even.\n\nThen $n-1$ lines followed.\n\nEach line contains three positive integer $u$, $v$ and $len$, $(u \\neq v, 1 \\leq u \\leq n,1 \\leq v \\leq n,1 \\leq len \\leq 10^9)$indicating there is a road of length $len$ between $u$ and $v$. \n\nIt's guarantee you can get to any city from any city.", "output_description": "For each test case, output in one line an integer, represent the minimum sum of length.", "samples": "[{\"input\": \"2\\n4\\n1 2 5\\n2 3 8\\n3 4 6\\n6\\n1 3 5\\n3 2 3\\n4 5 4\\n4 3 9\\n4 6 10\\n\", \"output\": \"11\\n31\\n\"}]", "test_case_id": "8974122ba420c852e49d72392578d137", "hint": "<p>In the first example, you can divide them into $(1,2)$, and $(3,4)$, then the&nbsp;minimum sum of length is $5 + 6 = 11$</p><p><img src=\"/static/upload/e511d48c8a4dc4d7addacffdc3425b40.png\" alt=\"1.png\" height=\"206.49651972157773\" width=\"200\" /></p><p>In the second example, you can divide them into&nbsp;$(1,3)$,$(2,4)$,$(5,6)$,&nbsp;hen the&nbsp;minimum sum of length is $ (5+3) + (9) + (10+4) = 31$</p>", "create_time": "2017-04-30T13:13:48.268Z", "last_update_time": "2017-05-12T02:24:12.803Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 2, "total_accepted_number": 1, "contest": 9, "sort_index": "E", "is_public": false}}, {"model": "contest.contestproblem", "pk": 46, "fields": {"title": "An easy A * B Problem", "description": "<p><img src=\"/static/upload/c32f5779e839edcda24017abc5d67a5d.jpg\" alt=\"programming-cat.jpg\" /></p><p>$HH$&#039;s cat is learning coding, he find it&#039;s difficult to calcute &nbsp;$a \\times &nbsp;b$, can you help $HH$&#039;s cat?</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\n\nFor each test case:\n\nTwo integers $a, b (0 \\leq a, b \\leq 10)$.", "output_description": "For each test case, output one line an integer: $a \\times b$", "samples": "[{\"input\": \"3\\n1 2\\n3 5\\n4 6\\n\", \"output\": \"2\\n15\\n24\\n\"}]", "test_case_id": "d228ce14eefd6ee6f7fea6a781b3a9b6", "hint": "", "create_time": "2017-05-02T06:49:19.463Z", "last_update_time": "2017-05-03T15:26:08.390Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 161, "total_accepted_number": 76, "contest": 6, "sort_index": "A", "is_public": true}}, {"model": "contest.contestproblem", "pk": 47, "fields": {"title": "An easy life Problem", "description": "<p>Programmer do four things one day:&nbsp;</p><p>$EAT$,$SLEEP$,$CODE$,$FIND \\ &nbsp;A \\ &nbsp;GIRLFRIEND$.</p><p><br /></p><p><img src=\"/static/upload/efcbabd86b5a9b1bab2ce608c6319412.png\" alt=\"14MOI8XLU8Y2]K3FXK7A5$K.png\" /><br /></p><p>Now give you $WT$&#039;s timetable of $EAT$, $SLEEP$ and $CODE$, he asks you to tell him how many time does he have to find a girlfriend everyday.<br /></p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line is in tht format of $xx:yy:zz$\n($0 \\leq xx \\leq 23,0 \\leq yy \\leq 59,0 \\leq zz \\leq 59$)\nindicating $WT$ eat $xx$ hour $yy$ miniute $zz$ second every day.\n\nThe second line is in tht format of $xx:yy:zz$\n($0 \\leq xx \\leq 23,0 \\leq yy \\leq 59,0 \\leq zz \\leq 59$)\nindicating $WT$ sleep $xx$ hour $yy$ miniute $zz$ second every day.\n\nThe third line is in tht format of $xx:yy:zz$\n($0 \\leq xx \\leq 23,0 \\leq yy \\leq 59,0 \\leq zz \\leq 59$)\nindicating $WT$ code $xx$ hour $yy$ miniute $zz$ second every day.\n\nIt's guaranteed that $xx:yy:zz$ is valid and the total time of $eat, sleep \\ and \\ code$ is not greater than $24$ hours", "output_description": "For each test case, out put online int the format of $xx:yy:zz$ --- the time $WT$ have to find a girlfriend.\n\nYou should make it valid, that is $0 \\leq xx \\leq 24,0 \\leq yy \\leq 59,0 \\leq zz \\leq 59$, and if $xx,yy,zz$ is less than 10, you should add one leading zero before it.", "samples": "[{\"input\": \"3\\n08:00:00\\n08:00:00\\n06:59:51\\n08:00:00\\n08:40:15\\n05:15:15\\n01:11:11\\n02:22:22\\n03:33:33\", \"output\": \"01:00:09\\n02:04:30\\n16:52:54\"}]", "test_case_id": "72f38f6089d84aa2a9c0b95630bb5642", "hint": "<p>08:00:00+08:00:00+06:59:51+01:00:09=24:00:00</p><p>08:00:00+08:40:15+05:15:15+02:04:30=24:00:00</p><p>01:11:11+02:22:22+03:33:33+16:52:54=24:00:00</p>", "create_time": "2017-05-02T08:34:30.627Z", "last_update_time": "2017-05-04T11:01:19.024Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 163, "total_accepted_number": 60, "contest": 6, "sort_index": "B", "is_public": true}}, {"model": "contest.contestproblem", "pk": 48, "fields": {"title": "Operating System is not easy", "description": "<p>$HandsomeHow$ is learning $Operating System$ this semester, he find it&#039;s difficult, one reason is that the book is in $English$.</p><p><img src=\"/static/upload/31b273c554c555fa377867fdba6ded54.jpg\" alt=\"czxt.jpg\" /><br /></p><p>One day when he opened the book he found he don&#039;t know whether he had read this page before, but he believed &nbsp;that if he know some words in this page, he must read this page before.</p><p>Now tell you the words $HandsomeHow$ knows, and the words in the page, tell him whether he had read this page before.</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line contains an integer $n(1\\leq n \\leq 100)$ - the number of the words $HandsomeHow$ knows.\n\nThen $n$ lines - the words he know.\n\nThe next line contains an integer $m(1\\leq m \\leq 100)$ - the\nnumber of the words in this page.\n\nThen $m$ lines -the words in the page.\n\nThe length of the each word in the page and $HandsomeHow$ knows is less than $20$.\n\nWords only contain lowercase letters($a,b ... x,y,z$)", "output_description": "For each test case, output one line \"YES\" (without quotes) if $HandsomeHow$ had read this page before, and \"NO\" (without quotes) otherwise.", "samples": "[{\"input\": \"3\\n3\\nhello\\nworld\\nnice\\n2\\nnice\\nbook\\n2\\nhello\\nworld\\n2\\ngood\\nbook\\n2\\nnice\\nbook\\n2\\ngood\\nbook\\n\", \"output\": \"YES\\nNO\\nYES\"}]", "test_case_id": "b8fbe4bd704f974bb92a5cf4f8a0db1f", "hint": "<p>In the first example:</p><p>$HandsomeHow$ knows &quot;nice&quot;, and it appears in the page.</p><p>In the second example:</p><p>$HandsomeHow$ doesn&#039;t all the words in the page.</p><p>In the second example:</p><p>$HandsomeHow$ knows the words &quot;book&quot;</p>", "create_time": "2017-05-02T09:13:29.418Z", "last_update_time": "2017-05-06T02:16:09.551Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 167, "total_accepted_number": 63, "contest": 6, "sort_index": "C", "is_public": true}}, {"model": "contest.contestproblem", "pk": 49, "fields": {"title": "A room Problem(easy)", "description": "<p>Everyday, $YeahPeng$ walks up many stairs to the room. One Day, a problem comes to him. There are $n$ stairs\uff0cand he can walk up stairs which is one, two, or three stairs in single step. He wants to know how many ways to reach the top.<br /></p><p><b style=\"background-color: transparent;\">There may be too many ways, so output the ans mod $(10^9+7)$.</b></p><p><img src=\"/static/upload/10948bd05f63bc8b0c5ba88650196cd1.jpg\" alt=\"e19543c2bab924a3b0a0d19433e0773b8afc9d72.jpg\" /><br /></p>", "input_description": "The first line: the number of case $T(1 \\leq T \\leq 1000)$ \nThen $T$ lines follow, each line contains one integer: $n(2 \\leq n \\leq 1000)$", "output_description": "For each case, out put an integer $v$ one line  -- the number of the ways mod $10^9+7$", "samples": "[{\"input\": \"2\\n3\\n4\\n\", \"output\": \"2\\n4\\n\"}]", "test_case_id": "39a87b529abbab4570cc1e3294f53367", "hint": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Case 1\uff1a</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">1 -&gt; 2 -&gt; 3</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">1 -&gt; 3</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Case 2:</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">1 -&gt; 2 -&gt; 3-&gt;4</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">1 -&gt; 2-&gt; 4</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">1 -&gt; 3-&gt; 4</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">1 -&gt;4</p>", "create_time": "2017-05-02T16:29:23.262Z", "last_update_time": "2017-05-08T07:50:50.496Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 457, "total_accepted_number": 35, "contest": 6, "sort_index": "D", "is_public": true}}, {"model": "contest.contestproblem", "pk": 50, "fields": {"title": "A room Problem (medium)", "description": "<p>Everyday, $YeahPeng$ walks up many stairs to the room. One Day, a problem comes to him. There are $n$ stairs\uff0cand he can walk down the stairs $k$ times <b>at most</b> which is one stair in single time or walk up stairs which is one, two, or three stairs in single step. He wants to know how many ways to reach the top.<br /></p><p><b>There may be too many ways, so output the ans mod $(10^9+7)$.</b></p><p><img src=\"/static/upload/206212086bb0f760e61ead46aa842101.jpg\" alt=\"c05e644de3f26ee0a5d408c0e6f914e4c0af2b48.jpg\" /></p>", "input_description": "The first line: the number of case $T(1 \\leq T \\leq 110)$ \nThen $T$ lines follow, each line contains two integers: $n,k (1 \\leq n \\leq 1000, 0 \\leq  k \\leq 1000)$", "output_description": "For each case, out put an integer $v$ one line  -- the number of the ways mod $10^9+7$", "samples": "[{\"input\": \"2\\n3 0\\n3 1\\n\", \"output\": \"2\\n6\\n\"}]", "test_case_id": "9800acc30d7faf5fdaaf62c0873cfc66", "hint": "<p>Case 1\uff1a</p><p>1 -&gt; 2 -&gt; 3</p><p>1 -&gt; 3</p><p>Case 2:</p><p>1 -&gt; 2 -&gt; 3</p><p>1 -&gt; 3</p><p>1 -&gt; 2 -&gt; 1 -&gt; 2 -&gt; 3</p><p>1 -&gt; 2 -&gt; 1 -&gt; 3</p><p>1 -&gt; 3 -&gt; 2 -&gt; 3</p><p>1 -&gt; 2 -&gt; 3 -&gt; 2 -&gt; 3&nbsp;</p>", "create_time": "2017-05-03T15:25:01.436Z", "last_update_time": "2017-05-07T06:47:44.525Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 37, "total_accepted_number": 4, "contest": 6, "sort_index": "E", "is_public": true}}, {"model": "contest.contestproblem", "pk": 51, "fields": {"title": "Music Problem", "description": "<p style=\"margin-bottom: 11.25pt; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">Listening to the music is relax, but for obsessive(\u5f3a\u8feb\u75c7), it may be unbearable.</p><p style=\"margin: 0cm 0cm 11.25pt; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; word-wrap: break-word;\">$HH$ is an obsessive, he only start to listen to music at $12:00:00$, and he will never stop unless the song he is listening ends at integral points (both minute and second are $0$ ), that is, he can stop listen at $13:00:00$ or $14:00:00$,but he can&#039;t stop at $13:01:03$ or $13:01:00$, since $13:01:03$ and $13:01\uff1a00$ are not an integer hour time.</p><p style=\"margin: 0cm 0cm 11.25pt; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; word-wrap: break-word;\">Now give you the length of some songs, tell $HH$ whether it&#039;s possible to choose some songs so he can stop listen at an integral point, or tell him it&#039;s impossible.</p><p style=\"margin: 0cm 0cm 11.25pt; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; word-wrap: break-word;\">Every song can be chosen at most once.</p><p>&nbsp;</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 60)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line contains an integer $n(1 \\leq n \\leq 10^5)$, indicating there are $n$ songs.\n\nThe second line contains $n$ integers $a_1,a_2 \\ldots a_n$ ($1 \\leq a_i \\leq 10^9$ ), the $i^{th}$ integer $a_i$ indicates the $i^{th}$ song lasts $a_i$ seconds.", "output_description": "For each test case, output one line \"YES\" (without quotes) if $HH$ is possible to stop listen at an integral point, and \"NO\" (without quotes) otherwise.", "samples": "[{\"input\": \"3\\n3\\n2000 1000 3000\\n3\\n2000 3000 1600\\n2\\n5400 1800\\n\\n\", \"output\": \"NO\\nYES\\nYES\\n\"}]", "test_case_id": "8ea11c5e8c5ed55c3699ef23f2e060c1", "hint": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the first example it&#039;s impossible to stop at an&nbsp;integral point.<br /></p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the second example if we choose the first and the third songs, they cost $3600$ seconds in total, so $HH$ can stop at $13:00:00$</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the third example if we choose the first and the second songs, they cost $7200$ seconds in total, so $HH$ can stop at $14:00:00$</p>", "create_time": "2017-05-04T00:28:01.802Z", "last_update_time": "2017-05-12T02:11:53.476Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 3, "total_accepted_number": 1, "contest": 9, "sort_index": "D", "is_public": false}}, {"model": "contest.contestproblem", "pk": 52, "fields": {"title": "A chess Problem (easy)", "description": "<p>&nbsp;In chinese chess, &quot;\u9a6c&quot; is an interesting piece, when it is at position $(x,y)$, it can move to$(x\u22122,y\u22121),(x\u22122,y+1),(x\u22121,y\u22122),(x\u22121,y+2),(x+1,y\u22122),(x+1,y+2),(x+2,y\u22121), (x+2,y+1)$,<br /></p><p>Now the problem is, when a \u201c\u9a6c\u201d is at position $(x,y)$, how many ways does it have for he to move to $(x_0,y_0)$.</p><p><b>To&nbsp;simplify this problem, when our &quot;\u9a6c&quot; is at $(x,y)$, it can only move to $(x+1,y+2) $ or $ (x+2,y+1)$</b></p><p><font><br /></font></p><p><img src=\"/static/upload/8f5213e3b937189b78ab523a0d7a8161.png\" alt=\"UPR4BJ7X[25OJG[[WQNK5%F.png\" /><br /></p>", "input_description": "The first line: the number of case $T( \\leq T \\leq 100)$\nThen T lines follow, each line contains four integers: $x,y,x_0,y_0(0 \\leq x,y,x_0,y_0 \\leq 8)$ - the position the \"\u9a6c\" at and the position it want's to go.", "output_description": "For each case, out put an integer $ans$ one line -- the number of the ways to go from $(x,y)$ to $(x_0,y_0)$", "samples": "[{\"input\": \"3\\n0 0 3 3\\n0 0 6 6\\n3 3 6 6\\n\", \"output\": \"2\\n6\\n2\\n\"}]", "test_case_id": "044eb721338d94da83ec394828175cd6", "hint": "<p>In the first example:</p><p></p><p></p><p></p><p>$(0,0) -&gt; (2,1) -&gt; (3,3) $,$(0,0) -&gt; (1,2) -&gt; (3,3) $</p><p>In the second example:</p><p>$(0,0) -&gt; (2,1) -&gt; (4,2) -&gt; (5,4) -&gt; (6,6),(0,0) -&gt; (2,1) -&gt; (3,3) -&gt; (5,4) -&gt; (6,6)$</p><p>$(0,0) -&gt; (2,1) -&gt; (3,3) -&gt; (4,5) -&gt; (6,6),(0,0) -&gt; (1,2) -&gt; (3,3) -&gt; (5,4) -&gt; (6,6)$</p><p>$(0,0) -&gt; (1,2) -&gt; (3,3) -&gt; (4,5) -&gt; (6,6),(0,0) -&gt; (1,2) -&gt; (2,4) -&gt; (4,5) -&gt; (6,6)$</p><p>In the third example:</p><p>$(3,3) -&gt; (5,4) -&gt; (6,6),(3,3) -&gt; (4,5) -&gt; (6,6)$</p>", "create_time": "2017-05-04T10:10:13.690Z", "last_update_time": "2017-05-07T06:36:07.256Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 279, "total_accepted_number": 39, "contest": 6, "sort_index": "F", "is_public": true}}, {"model": "contest.contestproblem", "pk": 53, "fields": {"title": "A  chess Problem (medium)", "description": "<p>The term of this problem is the same as <a href=\"http://swjtuoj.cn/contest/6/problem/52/\" target=\"_blank\">the previous one</a>, the only exception \u2014 increased restrictions.</p><p>Since the ans may be too large, out put the ans mod $(10^9+7)$</p>", "input_description": "The first line: the number of case T(\u2264T\u22641000)\nThen T lines follow, each line contains four integers: x,y,x0,y0(0\u2264x,y,x0,y0\u2264100000) - the position the \"\u9a6c\" at and the position it want's to go.", "output_description": "For each case, out put an integer ans one line -- the number of the ways to go from (x,y) to (x0,y0) mod $10^9+7$", "samples": "[{\"input\": \"3\\n0 0 3 3\\n0 0 6 6\\n3 3 6 6\", \"output\": \"2\\n6\\n2\"}]", "test_case_id": "dd5daf36cbef2aba25f615fa0bc847ba", "hint": "<p style=\"font-size: 15px;\">In the first example:</p><p style=\"font-size: 15px;\">(0,0)\u2212&gt;(2,1)\u2212&gt;(3,3),(0,0)\u2212&gt;(1,2)\u2212&gt;(3,3)</p><p style=\"font-size: 15px;\">In the second example:</p><p style=\"font-size: 15px;\">(0,0)\u2212&gt;(2,1)\u2212&gt;(4,2)\u2212&gt;(5,4)\u2212&gt;(6,6),(0,0)\u2212&gt;(2,1)\u2212&gt;(3,3)\u2212&gt;(5,4)\u2212&gt;(6,6)</p><p style=\"font-size: 15px;\">(0,0)\u2212&gt;(2,1)\u2212&gt;(3,3)\u2212&gt;(4,5)\u2212&gt;(6,6),(0,0)\u2212&gt;(1,2)\u2212&gt;(3,3)\u2212&gt;(5,4)\u2212&gt;(6,6)</p><p style=\"font-size: 15px;\">(0,0)\u2212&gt;(1,2)\u2212&gt;(3,3)\u2212&gt;(4,5)\u2212&gt;(6,6),(0,0)\u2212&gt;(1,2)\u2212&gt;(2,4)\u2212&gt;(4,5)\u2212&gt;(6,6)</p><p style=\"font-size: 15px;\">In the third example:</p><p style=\"font-size: 15px;\">(3,3)\u2212&gt;(5,4)\u2212&gt;(6,6),(3,3)\u2212&gt;(4,5)\u2212&gt;(6,6)</p>", "create_time": "2017-05-04T11:47:15.037Z", "last_update_time": "2017-05-07T06:47:55.445Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 106, "total_accepted_number": 6, "contest": 6, "sort_index": "G", "is_public": true}}, {"model": "contest.contestproblem", "pk": 54, "fields": {"title": "A chess Problem (hard)", "description": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">The term of this problem is the same as&nbsp;<a href=\"http://swjtuoj.cn/contest/6/problem/52/\" target=\"_blank\">the previous one</a>, the only exception \u2014 increased restrictions.</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Since the ans may be too large, out put the ans mod $(10^4+7)$</p>", "input_description": "The first line: the number of case T(\u2264T\u22641000)\nThen T lines follow, each line contains four integers: x,y,x0,y0(0\u2264x,y,x0,y0\u226410000000) - the position the \"\u9a6c\" at and the position it want's to go.", "output_description": "For each case, out put an integer ans one line -- the number of the ways to go from (x,y) to (x0,y0) mod $10^4+7$", "samples": "[{\"input\": \"3\\n0 0 3 3\\n0 0 6 6\\n3 3 6 6\", \"output\": \"2\\n6\\n2\"}]", "test_case_id": "0b548abfc608aca8e0e1a7a8c4e85138", "hint": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 15px;\">In the first example:</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 15px;\">(0,0)\u2212&gt;(2,1)\u2212&gt;(3,3),(0,0)\u2212&gt;(1,2)\u2212&gt;(3,3)</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 15px;\">In the second example:</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 15px;\">(0,0)\u2212&gt;(2,1)\u2212&gt;(4,2)\u2212&gt;(5,4)\u2212&gt;(6,6),(0,0)\u2212&gt;(2,1)\u2212&gt;(3,3)\u2212&gt;(5,4)\u2212&gt;(6,6)</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 15px;\">(0,0)\u2212&gt;(2,1)\u2212&gt;(3,3)\u2212&gt;(4,5)\u2212&gt;(6,6),(0,0)\u2212&gt;(1,2)\u2212&gt;(3,3)\u2212&gt;(5,4)\u2212&gt;(6,6)</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 15px;\">(0,0)\u2212&gt;(1,2)\u2212&gt;(3,3)\u2212&gt;(4,5)\u2212&gt;(6,6),(0,0)\u2212&gt;(1,2)\u2212&gt;(2,4)\u2212&gt;(4,5)\u2212&gt;(6,6)</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 15px;\">In the third example:</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 15px;\">(3,3)\u2212&gt;(5,4)\u2212&gt;(6,6),(3,3)\u2212&gt;(4,5)\u2212&gt;(6,6)</p>", "create_time": "2017-05-06T02:34:15.130Z", "last_update_time": "2017-05-07T06:48:07.777Z", "created_by": 1, "time_limit": 1000, "memory_limit": 64, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 33, "total_accepted_number": 3, "contest": 6, "sort_index": "H", "is_public": true}}, {"model": "contest.contestproblem", "pk": 55, "fields": {"title": "Matrix", "description": "<p>Today $HH$ is palying with a $n \\times n$ matrix.</p><p>&nbsp;All the numbers of the matrix is $0$ initial, and every time $HH$ will do one of the following things:</p><ol><li>make all the numbers in the $k$ row become $v$</li><li>make all the numbers in the $k$ column become $v$</li></ol><p>Now $HH$ wants to know what&#039;s the final matrix after $q$ options.&nbsp;</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line contains two positive integers $n,q(1 \\leq n \\leq 500,1 \\leq q \\leq 1000)$ - the size of the matrix and the times of the options.\n\nThen $q$ lines following, for each line contains three integers $op,k,v(1 \\leq op \\leq 2, 1 \\leq k \\leq n, 1 \\leq v \\leq 100)$.\nif $op=1$, then $HH$ will change all the numbers in the $k$ row into $v$\nif $op=2$, then $HH$ will change all the numbers in the $k$ column into $v$", "output_description": "For each test case, you should output $n$ lines , each line $n$ numbers , indicating the final matrix, note that for each line ,you should print exactly one blank between two numbers.", "samples": "[{\"input\": \"1\\n3 3\\n1 2 3\\n2 2 1\\n1 1 3\", \"output\": \"3 3 3\\n3 1 3\\n0 1 0\\n\"}]", "test_case_id": "d7e794692dbeda5596dca0107f1d7704", "hint": "<p>In the first example<br /></p><p><img src=\"/static/upload/8889b3fab5255a7cd64df37123aab3ec.png\" alt=\"JX5J$~(@BW}WQ748RV_GY0H.png\" /><br /></p><p>scanf is commended</p>", "create_time": "2017-05-06T06:54:18.726Z", "last_update_time": "2017-05-12T00:40:23.027Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 2, "total_accepted_number": 0, "contest": 9, "sort_index": "B", "is_public": false}}, {"model": "contest.contestproblem", "pk": 56, "fields": {"title": "Segment Tree", "description": "<p>Today $HH$ is learning a new data structure &nbsp;named $segment\\ tree $, which is often used to solve segment problem, here comes one:</p><p>Gave you an unordered sequence of length $n,(a_1\uff0ca_2, &nbsp;\\ldots ,a_n)$, now you are supposed to calculate how many segment $[L,R]$($1 \\leq L \\leq R$) are there satisfies two conditions :</p><ol><li>the length of the segment is $k$(i.e. $R-L+1=k$).</li><li>the number between $L$ and $R$(both including) appears at least $q$ times in total.&nbsp;</li></ol><p>$HH$ thinks the problem is too easy so he gives the problem to you.</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line contains three positive integers $n,k,q(1 \\leq n \\leq 100,1 \\leq k \\leq 100,1 \\leq q \\leq 100)$\uff0cthe length  of the sequence , the length of the segment $[l,R]$, and the times required to appear.\n\nThe second line contains $n$ integers $a_1,a_2\\ldots a_n$($1\\leq a_i \\leq 100$) - the sequence.", "output_description": "For each test case, output one line an integer : the number of segment satisfies both conditions.", "samples": "[{\"input\": \"3\\n5 3 2\\n2 3 2 4 5\\n5 3 3\\n2 3 2 4 5\\n5 3 6\\n2 3 2 4 5\", \"output\": \"4\\n3\\n0\\n\"}]", "test_case_id": "a0a9d982e3df8352c5ebf5483f97eb5c", "hint": "<p>In the first example , we can find $4$ segments:&nbsp;</p><p>$[1,3]$,$1$ appears $0$ time,$2$ appears $2$ times,$3$ appears $1$ time,so $3$ times in total.<br /></p><p>$[2,4]$,$4$ times in total.$[3,5]$ $3$ times in total.$[4,6]$,$2$ times in total.</p><p>In the second example, we can find:<br /></p><p>$[1,3],[2,4],[3,5]$.</p><p>In the third example, we can&#039;t find any.<br /></p>", "create_time": "2017-05-08T08:40:51.073Z", "last_update_time": "2017-05-12T00:40:01.668Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "contest": 9, "sort_index": "K", "is_public": false}}, {"model": "contest.contestproblem", "pk": 57, "fields": {"title": "Maximize The Beautiful Value", "description": "<p>Today $HH$ finds a non-decreasing sequence$(a_1,a_2....a_n, a_i \\leq a_{i+1})$, he thinks it&#039;s not beautiful so he wants to make it beautiful.</p><p>To make it, $HH$ will choose exactly one number and move it forward at least $k$ steps(i.e. you can move $a_i$ to $a_j$ if $k \\leq i - j$), and then he defines the beautiful value $F(n)$ as $\\sum_{i=1}^n{i \\times a_i}$.</p><p><img src=\"/static/upload/045d3f880ed202de97774eafbf9eb8ef.png\" alt=\"~`(214WXTP}5ZC~[0P`7R5X.png\" width=\"600\" height=\"188.0108991825613\" /><br /></p><p>$HH$ asks you to calculate $max(F(n))$</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line contains two positive integers $n,k(1 \\leq n \\leq 10^5,1 \\leq k < n)$\uff0cthe length  of the sequence ,the least steps you need to move.\n\nThe second line contains $n$ integers $a_1,a_2\\ldots a_n$($1\\leq a_i \\leq  10^8$) - the sequence.", "output_description": "For each test case, you should output the max $F(n)$.", "samples": "[{\"input\": \"3\\n5 3\\n1 1 3 4 5\\n5 2\\n1 1 3 4 5\\n5 1\\n1 1 3 4 5\", \"output\": \"46\\n50\\n53\"}]", "test_case_id": "599e30549309c24209ce80825e10581f", "hint": "<p>In the first example, you can move the fifth number $4$ for $3$ steps and make the sequence become [$4,1,1,3,5$], then the beautiful value is $4 \\times 1&nbsp;+ 1 \\times 2&nbsp;+ 1 \\times 3&nbsp;+ 3 \\times 4&nbsp;+ 5 \\times 5 = 46$.</p><p>You can also move the fifth number to make it become [$1,5,1,3,4$], the beautiful value is also 46.</p><p>In the second example, you can move the&nbsp;&nbsp;fifth number $5$ for $2$ steps&nbsp;and make the sequence become [$1,1,5,3,4$]</p><p>In the second example, you can move the&nbsp;&nbsp;second number $1$ for $1$ steps&nbsp;and then the sequence is still [$1,1,3,4,5$]<br /></p><p>scanf is commended\u3002</p>", "create_time": "2017-05-09T11:08:43.438Z", "last_update_time": "2017-05-12T01:29:32.541Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "contest": 9, "sort_index": "F", "is_public": false}}, {"model": "contest.contestproblem", "pk": 58, "fields": {"title": "Paint Box", "description": "<p>We have $n$ empty boxes, so let\u2019s recolor those boxeswith m colors.</p><p>The boxes are put in a line. It is not allowed to color any adjacent boxes with the same color. Boxes $i$ and $i + 1$ are said to be adjacent for every $i, 1 \\leq&nbsp;i \\leq n$.&nbsp;</p><p>And we also want the total number of different colors of the n boxes being exactly $k$.&nbsp;</p><p>Two ways are considered different if and only if there is at least one box being colored with different colors.<br /></p>", "input_description": "The first line of the input contains integer $T(1 \\leq T \\leq 100)$ -the number of the test cases\nFor each case:\nthere will be one line, which contains three integers $n, m, k (1 \\leq n, m \\leq 10^9, 1 \\leq k \\leq10^6 , k \\leq n, m)$.", "output_description": "For each test case, you need print an integer means the number of ways of different coloring methods modulo $10^9+7$.", "samples": "[{\"input\": \"2\\n3 2 2\\n3 2 1\\n\", \"output\": \"2\\n0\\n\"}]", "test_case_id": "ac9fa6c0453d251957344ee31ea2dc2e", "hint": "<p>In the first example we have two ways:</p><p>121</p><p>212</p><p>where 1 and 2 are two different color.</p><p>In the second example we can&#039;t do that.</p>", "create_time": "2017-05-09T14:59:19.624Z", "last_update_time": "2017-05-12T02:06:14.729Z", "created_by": 1, "time_limit": 5000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "contest": 9, "sort_index": "C", "is_public": false}}, {"model": "contest.contestproblem", "pk": 59, "fields": {"title": "HGCD", "description": "<p>$HH$ is learning $GCD$ today, $GCD$ is short for $Greatest \\ Common \\ Divisor$. &nbsp;You can look at this implementation:</p><pre><code class=\"lang-c++\">long long gcd(long long a, long long b){\n\twhile(a &gt; 0 &amp;&amp; b &gt; 0){\n\t&nbsp;&nbsp;&nbsp;&nbsp;a %= b;\n\t&nbsp;&nbsp;&nbsp;&nbsp;swap(a , b);\n\t}\n\treturn a + b;\n}<br /></code></pre><p>But $HH$ is so careless that he changes &quot;%&quot; into &quot;-&quot;, let&#039;s&nbsp;call this new funtion $HH&#039;s \\ Greatest \\ Common \\ Divisor $ ($HGCD$). You can look at this implementation:</p><pre><code>long long hgcd(long long a, long long b) {\n    while (a &gt; 0 &amp;&amp; b &gt; 0) {\n        a -= b;\n        swap(a , b);\n    }\n    return a + b;\n}\n</code></pre><p>Now $HH$ run $HGCD(a,b)$ for all $1 \\leq a \\leq n$, $1 \\leq b \\leq n$,$HH$ wants to know how many times does his algorithm - $HGCD$ works correctly.&nbsp;</p>", "input_description": "The first line of input will contain an integer $T$($1 \\leq T \\leq 5$),denoting the number of test cases. \nFor each test case:\nThe first and only line contains an integer $n$ ($1 \\leq n \\leq 10^{12}$)", "output_description": "For every test case output the number of times $gcd(a,b) == hgcd(a,b)$\nIt's guaranteed that long long is enough for this problem.", "samples": "[{\"input\": \"2\\n3\\n2\\n\", \"output\": \"8\\n4\\n\"}]", "test_case_id": "7711b75fc65f7c5d10152de320677658", "hint": "<p>In the first example, we have $gcd(a,b) == hgcd(a,b)$ for all $1 \\leq a \\leq 3, 1 \\leq b \\leq 3$ except $a = 2, b = 3)$</p>", "create_time": "2017-05-09T16:00:37.495Z", "last_update_time": "2017-05-11T12:32:46.149Z", "created_by": 1, "time_limit": 10000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "contest": 9, "sort_index": "I", "is_public": false}}, {"model": "contest.contestproblem", "pk": 60, "fields": {"title": "Maximize The Beautiful Value++", "description": "<p>The term of this problem is the same as the problem $F$, the only exception<font>&nbsp;</font>\u2014 The sequence may not necessary to to&nbsp;non-decreasing.<br /></p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line contains two positive integers $n,k(1 \\leq n \\leq 10^5,1 \\leq k < n)$\uff0cthe length  of the sequence ,the least steps you need to move.\n\nThe second line contains $n$ integers $a_1,a_2\\ldots a_n$($1\\leq a_i \\leq  10^8$) - the sequence.", "output_description": "For each test case, you should output the max $F(n)$.", "samples": "[{\"input\": \"4\\n5 3\\n1 1 3 4 5\\n5 2\\n1 1 3 4 5\\n5 1\\n1 1 3 4 5\\n5 3\\n3 5 4 1 1\\n\", \"output\": \"46\\n50\\n53\\n43\"}]", "test_case_id": "d93db0faec6d935630a0996d22cab1bb", "hint": "<p>In the forth example, you can move the fifth number $1$ for $4$ steps&nbsp;and then the sequence becomes [$1,3,5,4,1$]<br /></p>", "create_time": "2017-05-10T02:31:44.144Z", "last_update_time": "2017-05-12T02:27:12.013Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "contest": 9, "sort_index": "G", "is_public": false}}, {"model": "contest.contestproblem", "pk": 61, "fields": {"title": "The Trip On Abandoned Railway", "description": "<p>There are many ghosts at the abandoned station on unknown railway.</p><p>We mark the abandoned stations as $1,2..n$ according to the order. There are $a_i$ ghosts at the $i^{th}$ station.$Yakumo \\ Yukari$ often opens a black hole and makes a train appearing at a certain station. For example, the train appears at the $x$ station, and $k$ ghosts get off at the station. Then there would be $k+d$ ghosts at the $x+1$ station to get off,$k+2 \\times d$ at $x+2$ station and so on....There would be $k+y*d$ ghosts at the $x+y$ station to get off ($0 \\leq y,x+y \\leq n$). In others words, the numbers getting off at $x,x+1,x+2..n$ station form a tolerance of $d$ arithmetic progression.(you can consider ghosts getting off at the same time.)$Onozuka \\ Komachi$ would comes a certain station to take away the ghosts.(The number of ghosts at the station would become $0$)You have the records of trains appearing and $Komachi$ coming. You should tell $Komachi$ how much ghosts at a certain station when she come to there.</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\nFor each test case:\nThe first line contains three positive integers $n,m,d(1 \\leq n \\leq {10}^{5},1 \\leq m \\leq {10}^{5},1 \\leq d \\leq 1000)$ - the number of station,the number of records,and the tolerance of the arithmetic progress.\nThe second line contains $n$ integers $a_1,a_2\\ldots a_n$($1\\leq a_i \\leq 1000$).\nThen $m$ lines followed.\nEach line contains a records and there are two types. \n1 x y,indicating train appearing at $x$ station and $y$ ghosts geting off.\n2 x y,indicating Komachi coming to the $x$ station.\n($1 \\leq x \\leq n,0 \\leq y \\leq 1000$)", "output_description": "For each second records($2 \\quad  x$), output an integer in one line, representing the number of ghosts at the station.Since the ans may be too large, out put tme ans mod ${10}^{9} + 7$.", "samples": "[{\"input\": \"2\\n6 6 1\\n1 2 3 3 2 1\\n1 1 1\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n5 3 2\\n1 2 3 4 5\\n1 3 0\\n2 4\\n2 4\", \"output\": \"2\\n4\\n6\\n7\\n7\\n6\\n0\"}]", "test_case_id": "5cfdf93b4d5d6c5325f12ebfb1ae50fb", "hint": "<p>There lists the number of ghosts changing at these station.</p><p>&nbsp;case1\uff1a</p><p>&nbsp;1 2 3 3 2 1</p><p>&nbsp;2 4 6 7 7 7</p><p>&nbsp;0 4 6 7 7 7</p><p>&nbsp;0 0 6 7 7 7</p><p>&nbsp;0 0 0 7 7 7</p><p>&nbsp;0 0 0 0 7 7</p><p>&nbsp;0 0 0 0 0 7</p><p>&nbsp;case2\uff1a</p><p>&nbsp;1 2 3 4 5</p><p>&nbsp;1 2 3 6 9</p><p>&nbsp;1 2 3 0 9</p><p>&nbsp;1 2 3 0 9</p>", "create_time": "2017-05-10T07:32:42.338Z", "last_update_time": "2017-05-12T02:11:30.711Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "contest": 9, "sort_index": "J", "is_public": false}}, {"model": "contest.contestproblem", "pk": 62, "fields": {"title": "Magic Maze", "description": "<p>There is a magic maze that its roads is unidirectional and you will not arrive the same resting area if you walk alongthe road (the maze is acyclic). There are n resting areas and m roads in themaze. Some roads make you get treasure, while others make you lost treasure. You should pick the place to set out and get treasure as much as possible.<br /></p><p>Note that for each road you can go through only once.</p>", "input_description": "The first line: the number of case $T$ ($1 \\leq T \\leq 110$ )\nIn each test case:\nThe first line is two integers: the number of resting area $n$, the number of roads $m$($1 \\leq n \\leq 1000$, $0 \\leq m  \\leq n \\times (n-1) \\div 2$)\n$m$ lines follow, each with three integers:  the beginning $u$, the end $v$, treasure $w$($0 \\leq u < n, 0 \\leq v < n, -1000 \\leq w \\leq 1000$)", "output_description": "T lines, each with an integer what is the maximum treasure", "samples": "[{\"input\": \"2\\n5 4\\n0 1 -10\\n1 2 10\\n2 3 10\\n3 4 -10\\n4 4\\n0 1 4\\n0 2 5\\n2 3 -2\\n3 1 4\\n\", \"output\": \"20\\n7\\n\"}]", "test_case_id": "61c04e8bbaade564c9284ac76f38687f", "hint": "<p>In the first example, you can go 1 -&gt;2 &gt;3, then the ans is $10+10=20$</p><p>In the second example, you can go 0 -&gt;2 -&gt;3&gt;-1, then the ans is $5-2+4=7$</p>", "create_time": "2017-05-10T08:53:35.652Z", "last_update_time": "2017-05-12T03:02:29.196Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "contest": 9, "sort_index": "H", "is_public": false}}, {"model": "contest.contestproblem", "pk": 63, "fields": {"title": "A math problem", "description": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Sequence $F$ is defined as $F(n) = F(n-1) \\times 3 + F(n-2) + 1$,$n$ is the index of the number.For the every index given by input, Calculating $F(n)$ in this task.<br /></p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Since $F(n)$ may be too large, you only need to calculate the the ans $F(n) \\ mod \\ 20170501$</p>", "input_description": "The first line of the input contains an integer $T (1 \\leq T \\leq 1000)$ which means the number of test cases.\nThen $T$ lines follow, each line starts with a number $N (1 \\leq N \\leq 10^{12})$.\nThen $2$ integers  $F(1)$ and $F(2)$ followed.$0 \\leq F(1), F(2) \\leq 10^9$", "output_description": "For each test case, you should output the number of $F(n)$.\nSince $F(n)$ may be too large, output the the ans $F(n) \\ mod \\ 20170501$", "samples": "[{\"input\": \"3\\n1 1 2\\n2 1 2\\n3 1 2\\n\\n\", \"output\": \"1\\n2\\n8\\n\"}]", "test_case_id": "af79980e2f6def7b3b9c18bf79aecc57", "hint": "<p>In the third example, $F(3) = 3 \\times F(2) + F(1) + 1 = 3 \\times 2 + 1 + 1 = 8$<br /></p>", "create_time": "2017-05-11T12:37:11.237Z", "last_update_time": null, "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "contest": 11, "sort_index": "A", "is_public": false}}, {"model": "contest.contestproblem", "pk": 64, "fields": {"title": "Matrix", "description": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Today $HH$ is palying with a $n \\times n$ matrix.</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&nbsp;All the numbers of the matrix is $0$ initial, and every time $HH$ will do one of the following things:</p><ol style=\"margin: 15px 0px; list-style-position: initial; list-style-image: initial; padding: 0px 0px 0px 40px; line-height: 1.6; font-family: arial, sans-serif; font-size: 16px;\"><li>make all the numbers in the $k$ row become $v$</li><li>make all the numbers in the $k$ column become $v$</li></ol><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Now $HH$ wants to know what&#039;s the final matrix after $q$ options.&nbsp;</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line contains two positive integers $n,q(1 \\leq n \\leq 500,1 \\leq q \\leq 2\\times10^5)$ - the size of the matrix and the times of the options.\n\nThen $q$ lines following, for each line contains three integers $op,k,v(1 \\leq op \\leq 2, 1 \\leq k \\leq n, 1 \\leq v \\leq 100)$.\nif $op=1$, then $HH$ will change all the numbers in the $k$ row into $v$\nif $op=2$, then $HH$ will change all the numbers in the $k$ column into $v$", "output_description": "For each test case, you should output $n$ lines , each line $n$ numbers , indicating the final matrix, note that for each line ,you should print exactly one blank between two numbers.", "samples": "[{\"input\": \"1\\n3 3\\n1 2 3\\n2 2 1\\n1 1 3\", \"output\": \"3 3 3\\n3 1 3\\n0 1 0\\n\"}]", "test_case_id": "926f94e1341cc520441678bb0518255e", "hint": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the first example<br /></p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\"><img src=\"/static/upload/24ee69b504fe40078310d5bc451fde86.png\" alt=\"8889b3fab5255a7cd64df37123aab3ec.png\" /><br /></p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">scanf is commended</p>", "create_time": "2017-05-13T15:55:45.076Z", "last_update_time": "2017-05-13T16:25:41.494Z", "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 243, "total_accepted_number": 22, "contest": 8, "sort_index": "B", "is_public": false}}, {"model": "contest.contestproblem", "pk": 65, "fields": {"title": "Paint Box", "description": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">We have $n$ empty boxes, so let\u2019s recolor those boxeswith m colors.</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">The boxes are put in a line. It is not allowed to color any adjacent boxes with the same color. Boxes $i$ and $i + 1$ are said to be adjacent for every $i, 1 \\leq&nbsp;i \\leq n$.&nbsp;</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">And we also want the total number of different colors of the n boxes being exactly $k$.&nbsp;</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Two ways are considered different if and only if there is at least one box being colored with different colors.</p>", "input_description": "The first line of the input contains integer $T(1 \\leq T \\leq 100)$ -the number of the test cases\nFor each case:\nthere will be one line, which contains three integers $n, m, k (1 \\leq n, m \\leq 10^9, 1 \\leq k \\leq10^6 , k \\leq n, m)$.", "output_description": "For each test case, you need print an integer means the number of ways of different coloring methods modulo $10^9+7$.", "samples": "[{\"input\": \"2\\n3 2 2\\n3 2 1\\n\", \"output\": \"2\\n0\\n\"}]", "test_case_id": "b8d94d522f721d10b5a039d86d9a08f9", "hint": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the first example we have two ways:</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">121</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">212</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">where 1 and 2 are two different color.</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the second example we can&#039;t do that.</p>", "create_time": "2017-05-13T15:56:41.887Z", "last_update_time": "2017-05-13T16:13:47.115Z", "created_by": 1, "time_limit": 5000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 62, "total_accepted_number": 1, "contest": 8, "sort_index": "C", "is_public": false}}, {"model": "contest.contestproblem", "pk": 66, "fields": {"title": "Music Problem", "description": "<p style=\"margin-bottom: 11.25pt; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">Listening to the music is relax, but for obsessive(\u5f3a\u8feb\u75c7), it may be unbearable.</p><p style=\"margin: 0cm 0cm 11.25pt; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">$HH$ is an obsessive, he only start to listen to music at $12:00:00$, and he will never stop unless the song he is listening ends at integral points (both minute and second are $0$ ), that is, he can stop listen at $13:00:00$ or $14:00:00$,but he can&#039;t stop at $13:01:03$ or $13:01:00$, since $13:01:03$ and $13:01\uff1a00$ are not an integer hour time.</p><p style=\"margin: 0cm 0cm 11.25pt; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">Now give you the length of some songs, tell $HH$ whether it&#039;s possible to choose some songs so he can stop listen at an integral point, or tell him it&#039;s impossible.</p><p style=\"margin: 0cm 0cm 11.25pt; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">Every song can be chosen at most once.</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&nbsp;</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 60)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line contains an integer $n(1 \\leq n \\leq 10^5)$, indicating there are $n$ songs.\n\nThe second line contains $n$ integers $a_1,a_2 \\ldots a_n$ ($1 \\leq a_i \\leq 10^9$ ), the $i^{th}$ integer $a_i$ indicates the $i^{th}$ song lasts $a_i$ seconds.", "output_description": "For each test case, output one line \"YES\" (without quotes) if $HH$ is possible to stop listen at an integral point, and \"NO\" (without quotes) otherwise.", "samples": "[{\"input\": \"3\\n3\\n2000 1000 3000\\n3\\n2000 3000 1600\\n2\\n5400 1800\\n\\n\", \"output\": \"NO\\nYES\\nYES\\n\"}]", "test_case_id": "9129113bd823fb5f1c260a78515754c9", "hint": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the first example it&#039;s impossible to stop at an&nbsp;integral point.<br /></p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the second example if we choose the first and the third songs, they cost $3600$ seconds in total, so $HH$ can stop at $13:00:00$</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the third example if we choose the first and the second songs, they cost $7200$ seconds in total, so $HH$ can stop at $14:00:00$</p>", "create_time": "2017-05-13T15:57:31.987Z", "last_update_time": "2017-05-13T16:14:19.882Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 92, "total_accepted_number": 10, "contest": 8, "sort_index": "D", "is_public": false}}, {"model": "contest.contestproblem", "pk": 67, "fields": {"title": "Shortest Path", "description": "<p style=\"margin-bottom: 0px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Today $HH$ becomes a designer, and he faces a problem so he asks you for help.</p><p style=\"margin-bottom: 0px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">$Treeisland$ is a country with $n$ cities and $n - 1 $ two-way road and from any city you can go to any other cities.</p><p style=\"margin-bottom: 0px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">$HH$ the designer is going to design a plan to divide $n$ city into $n/2$ pairs so that the sum of the length between the $n/2$ pairs city is minimum.</p><p style=\"margin-bottom: 0px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Now $HH$ has finished it but he doesn&#039;t know whether it&#039;s true so he ask you to calculate it together.</p><p style=\"margin-bottom: 0px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">It&#039;s guaranteed that $n$ is even.</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 100)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line contains an positive integer $n(1 \\leq n \\leq 10^4)$, represents the number of cities in $Treeisland$, it's guarantee that n is even.\n\nThen $n-1$ lines followed.\n\nEach line contains three positive integer $u$, $v$ and $len$, $(u \\neq v, 1 \\leq u \\leq n,1 \\leq v \\leq n,1 \\leq len \\leq 10^9)$indicating there is a road of length $len$ between $u$ and $v$. \n\nIt's guarantee you can get to any city from any city.", "output_description": "For each test case, output in one line an integer, represent the minimum sum of length.", "samples": "[{\"input\": \"2\\n4\\n1 2 5\\n2 3 8\\n3 4 6\\n6\\n1 3 5\\n3 2 3\\n4 5 4\\n4 3 9\\n4 6 10\\n\", \"output\": \"11\\n31\\n\"}]", "test_case_id": "7f3858fac4889fc8633bfa5641e04087", "hint": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the first example, you can divide them into $(1,2)$, and $(3,4)$, then the&nbsp;minimum sum of length is $5 + 6 = 11$</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\"><img src=\"/static/upload/bcdce5b131de49cf97130ec8768c9df5.png\" alt=\"e511d48c8a4dc4d7addacffdc3425b40.png\" width=\"250\" height=\"258.75\" /><br /></p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the second example, you can divide them into&nbsp;$(1,3)$,$(2,4)$,$(5,6)$,&nbsp;hen the&nbsp;minimum sum of length is $ 5+(3 + 9) + (10+4) = 31$</p>", "create_time": "2017-05-13T15:58:58.422Z", "last_update_time": "2017-05-14T07:29:34.476Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "contest": 8, "sort_index": "E", "is_public": false}}, {"model": "contest.contestproblem", "pk": 68, "fields": {"title": "Maximize The Beautiful Value", "description": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Today $HH$ finds a non-decreasing sequence$(a_1,a_2....a_n, a_i \\leq a_{i+1})$, he thinks it&#039;s not beautiful so he wants to make it beautiful.</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">To make it, $HH$ will choose exactly one number and move it forward at least $k$ steps(i.e. you can move $a_i$ to $a_j$ if $k \\leq i - j$), and then he defines the beautiful value $F(n)$ as $\\sum_{i=1}^n{i \\times a_i}$.</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\"><img src=\"/static/upload/6fdff284bc4f40aa384b15228e96b83b.png\" alt=\"045d3f880ed202de97774eafbf9eb8ef.png\" /><br /></p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">$HH$ asks you to calculate $max(F(n))$</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line contains two positive integers $n,k(1 \\leq n \\leq 10^5,1 \\leq k < n)$\uff0cthe length  of the sequence ,the least steps you need to move.\n\nThe second line contains $n$ integers $a_1,a_2\\ldots a_n$($1\\leq a_i \\leq  10^8$) - the sequence.", "output_description": "For each test case, you should output the max $F(n)$.", "samples": "[{\"input\": \"3\\n5 3\\n1 1 3 4 5\\n5 2\\n1 1 3 4 5\\n5 1\\n1 1 3 4 5\", \"output\": \"46\\n50\\n53\"}]", "test_case_id": "bded4efb18f65625c916ce0dc11a822e", "hint": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the first example, you can move the fifth number $4$ for $3$ steps and make the sequence become [$4,1,1,3,5$], then the beautiful value is $4 \\times 1&nbsp;+ 1 \\times 2&nbsp;+ 1 \\times 3&nbsp;+ 3 \\times 4&nbsp;+ 5 \\times 5 = 46$.</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">You can also move the fifth number to make it become [$1,5,1,3,4$], the beautiful value is also 46.</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the second example, you can move the&nbsp;&nbsp;fifth number $5$ for $2$ steps&nbsp;and make the sequence become [$1,1,5,3,4$]</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the second example, you can move the&nbsp;&nbsp;second number $1$ for $1$ steps&nbsp;and then the sequence is still [$1,1,3,4,5$]<br /></p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">scanf is commended\u3002</p>", "create_time": "2017-05-13T16:00:03.873Z", "last_update_time": null, "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 118, "total_accepted_number": 18, "contest": 8, "sort_index": "F", "is_public": false}}, {"model": "contest.contestproblem", "pk": 69, "fields": {"title": "Maximize The Beautiful Value++", "description": "<p>The term of this problem is the same as the problem $F$, the only exception<font style=\"font-family: arial, sans-serif; font-size: 16px;\">&nbsp;</font>\u2014 The sequence may not necessary to to&nbsp;non-decreasing.<br /></p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line contains two positive integers $n,k(1 \\leq n \\leq 10^5,1 \\leq k < n)$\uff0cthe length  of the sequence ,the least steps you need to move.\n\nThe second line contains $n$ integers $a_1,a_2\\ldots a_n$($1\\leq a_i \\leq  10^8$) - the sequence.", "output_description": "For each test case, you should output the max $F(n)$.", "samples": "[{\"input\": \"4\\n5 3\\n1 1 3 4 5\\n5 2\\n1 1 3 4 5\\n5 1\\n1 1 3 4 5\\n5 3\\n3 5 4 1 1\\n\", \"output\": \"46\\n50\\n53\\n43\"}]", "test_case_id": "511e6ee0f9767567473a746e9416e436", "hint": "<p>In the forth example, you can move the fifth number $1$ for $4$ steps&nbsp;and then the sequence becomes [$1,3,5,4,1$]<br /></p>", "create_time": "2017-05-13T16:01:00.060Z", "last_update_time": "2017-05-13T16:28:15.567Z", "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 21, "total_accepted_number": 0, "contest": 8, "sort_index": "G", "is_public": false}}, {"model": "contest.contestproblem", "pk": 70, "fields": {"title": "Magic Maze", "description": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">There is a magic maze that its roads is unidirectional and you will not arrive the same resting area if you walk alongthe road (the maze is acyclic). There are n resting areas and m roads in themaze. Some roads make you get treasure, while others make you lost treasure. You should pick the place to set out and get treasure as much as possible.<br /></p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Note that for each road you can go through only once.</p>", "input_description": "The first line: the number of case $T$ ($1 \\leq T \\leq 110$ )\nIn each test case:\nThe first line is two integers: the number of resting area $n$, the number of roads $m$($1 \\leq n \\leq 1000$, $0 \\leq m  \\leq n \\times (n-1) \\div 2$)\n$m$ lines follow, each with three integers:  the beginning $u$, the end $v$, treasure $w$($0 \\leq u < n, 0 \\leq v < n, -1000 \\leq w \\leq 1000$)", "output_description": "T lines, each with an integer what is the maximum treasure", "samples": "[{\"input\": \"2\\n5 4\\n0 1 -10\\n1 2 10\\n2 3 10\\n3 4 -10\\n4 4\\n0 1 4\\n0 2 5\\n2 3 -2\\n3 1 4\\n\", \"output\": \"20\\n7\\n\"}]", "test_case_id": "8d958672ee4f9fc3b304ffab17d5d01f", "hint": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the first example, you can go 1 -&gt;2 &gt;3, then the ans is $10+10=20$</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the second example, you can go 0 -&gt;2 -&gt;3&gt;-1, then the ans is $5-2+4=7$</p>", "create_time": "2017-05-13T16:01:47.013Z", "last_update_time": null, "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 18, "total_accepted_number": 6, "contest": 8, "sort_index": "H", "is_public": false}}, {"model": "contest.contestproblem", "pk": 71, "fields": {"title": "HGCD", "description": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">$HH$ is learning $GCD$ today, $GCD$ is short for $Greatest \\ Common \\ Divisor$. &nbsp;You can look at this implementation:</p><pre><code class=\"lang-c++\">long long gcd(long long a, long long b){\n\twhile(a &gt; 0 &amp;&amp; b &gt; 0){\n\t&nbsp;&nbsp;&nbsp;&nbsp;a %= b;\n\t&nbsp;&nbsp;&nbsp;&nbsp;swap(a , b);\n\t}\n\treturn a + b;\n}<br /></code></pre><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">But $HH$ is so careless that he changes &quot;%&quot; into &quot;-&quot;, let&#039;s&nbsp;call this new funtion $HH&#039;s \\ Greatest \\ Common \\ Divisor $ ($HGCD$). You can look at this implementation:</p><pre><code class=\"lang-c++\">long long hgcd(long long a, long long b) {\n    while (a &gt; 0 &amp;&amp; b &gt; 0) {\n        a -= b;\n        swap(a , b);\n    }\n    return a + b;\n}\n</code></pre><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Now $HH$ run $HGCD(a,b)$ for all $1 \\leq a \\leq n$, $1 \\leq b \\leq n$,$HH$ wants to know how many times does his algorithm - $HGCD$ works correctly.&nbsp;</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Note:</p><pre><code class=\"lang-c++\">void swap(long long &amp;a, long long &amp;b){\n&nbsp;&nbsp;&nbsp;&nbsp;long long t = a;\n&nbsp;&nbsp;&nbsp;&nbsp;a = b; b = t;\n}</code></pre>", "input_description": "The first line of input will contain an integer $T$($1 \\leq T \\leq 5$),denoting the number of test cases. \nFor each test case:\nThe first and only line contains an integer $n$ ($1 \\leq n \\leq 10^{12}$)", "output_description": "For every test case output the number of times $gcd(a,b) == hgcd(a,b)$\nIt's guaranteed that long long is enough for this problem.", "samples": "[{\"input\": \"2\\n3\\n2\\n\", \"output\": \"8\\n4\\n\"}]", "test_case_id": "75bb16cb76d54a9464e5a64ed006a499", "hint": "<p>In the first example, we have $gcd(a,b) == hgcd(a,b)$ for all $1 \\leq a \\leq 3, 1 \\leq b \\leq 3$ except $a = 2, b = 3)$<br /></p>", "create_time": "2017-05-13T16:02:37.121Z", "last_update_time": "2017-05-13T16:35:27.286Z", "created_by": 1, "time_limit": 10000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 23, "total_accepted_number": 0, "contest": 8, "sort_index": "I", "is_public": false}}, {"model": "contest.contestproblem", "pk": 72, "fields": {"title": "The Trip On Abandoned Railway", "description": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">There are many ghosts at the abandoned station on unknown railway.</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">We mark the abandoned stations as $1,2..n$ according to the order. There are $a_i$ ghosts at the $i^{th}$ station.$Yakumo \\ Yukari$ often opens a black hole and makes a train appearing at a certain station. For example, the train appears at the $x$ station, and $k$ ghosts get off at the station. Then there would be $k+d$ ghosts at the $x+1$ station to get off,$k+2 \\times d$ at $x+2$ station and so on....There would be $k+y*d$ ghosts at the $x+y$ station to get off ($0 \\leq y,x+y \\leq n$). In others words, the numbers getting off at $x,x+1,x+2..n$ station form a tolerance of $d$ arithmetic progression.(you can consider ghosts getting off at the same time.)$Onozuka \\ Komachi$ would comes a certain station to take away the ghosts.(The number of ghosts at the station would become $0$)You have the records of trains appearing and $Komachi$ coming. You should tell $Komachi$ how much ghosts at a certain station when she come to there.</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\nFor each test case:\nThe first line contains three positive integers $n,m,d(1 \\leq n \\leq {10}^{5},1 \\leq m \\leq {10}^{5},1 \\leq d \\leq 1000)$ - the number of station,the number of records,and the tolerance of the arithmetic progress.\nThe second line contains $n$ integers $a_1,a_2\\ldots a_n$($1\\leq a_i \\leq 1000$).\nThen $m$ lines followed.\nEach line contains a records and there are two types. \n1 x y,indicating train appearing at $x$ station and $y$ ghosts geting off.\n2 x y,indicating Komachi coming to the $x$ station.\n($1 \\leq x \\leq n,0 \\leq y \\leq 1000$)", "output_description": "For each second records($2 \\quad  x$), output an integer in one line, representing the number of ghosts at the station.Since the ans may be too large, out put tme ans mod ${10}^{9} + 7$.", "samples": "[{\"input\": \"2\\n6 6 1\\n1 2 3 3 2 1\\n1 1 1\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n5 3 2\\n1 2 3 4 5\\n1 3 0\\n2 4\\n2 4\", \"output\": \"2\\n4\\n6\\n7\\n7\\n6\\n0\"}]", "test_case_id": "478dfd260cae4d5849d4a2b468930fb1", "hint": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">There lists the number of ghosts changing at these station.</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&nbsp;case1\uff1a</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&nbsp;1 2 3 3 2 1</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&nbsp;2 4 6 7 7 7</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&nbsp;0 4 6 7 7 7</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&nbsp;0 0 6 7 7 7</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&nbsp;0 0 0 7 7 7</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&nbsp;0 0 0 0 7 7</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&nbsp;0 0 0 0 0 7</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&nbsp;case2\uff1a</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&nbsp;1 2 3 4 5</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&nbsp;1 2 3 6 9</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&nbsp;1 2 3 0 9</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&nbsp;1 2 3 0 9</p>", "create_time": "2017-05-13T16:03:40.738Z", "last_update_time": null, "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 27, "total_accepted_number": 3, "contest": 8, "sort_index": "J", "is_public": false}}, {"model": "contest.contestproblem", "pk": 73, "fields": {"title": "Segment Tree", "description": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Today $HH$ is learning a new data structure &nbsp;named $segment\\ tree $, which is often used to solve segment problem, here comes one:</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">Gave you an unordered sequence of length $n,(a_1\uff0ca_2, &nbsp;\\ldots ,a_n)$, now you are supposed to calculate how many segment $[L,R]$($1 \\leq L \\leq R$) are there satisfies two conditions :</p><ol style=\"margin: 15px 0px; list-style-position: initial; list-style-image: initial; padding: 0px 0px 0px 40px; line-height: 1.6; font-family: arial, sans-serif; font-size: 16px;\"><li>the length of the segment is $k$(i.e. $R-L+1=k$).</li><li>the number between $L$ and $R$(both including) appears at least $q$ times in total.&nbsp;</li></ol><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">$HH$ thinks the problem is too easy so he gives the problem to you.</p>", "input_description": "The first line contains an positive integer $T(1 \\leq T \\leq 10)$, represents there are $T$ test cases.\n\nFor each test case:\n\nThe first line contains three positive integers $n,k,q(1 \\leq n \\leq 100,1 \\leq k \\leq 100,1 \\leq q \\leq 100)$\uff0cthe length  of the sequence , the length of the segment $[l,R]$, and the times required to appear.\n\nThe second line contains $n$ integers $a_1,a_2\\ldots a_n$($1\\leq a_i \\leq 100$) - the sequence.", "output_description": "For each test case, output one line an integer : the number of segment satisfies both conditions.", "samples": "[{\"input\": \"3\\n5 3 2\\n2 3 2 4 5\\n5 3 3\\n2 3 2 4 5\\n5 3 6\\n2 3 2 4 5\", \"output\": \"4\\n3\\n0\\n\"}]", "test_case_id": "d8ba84ec3a76011330d2a9ef48c0a5e0", "hint": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the first example , we can find $4$ segments:&nbsp;</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">$[1,3]$,$1$ appears $0$ time,$2$ appears $2$ times,$3$ appears $1$ time,so $3$ times in total.<br /></p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">$[2,4]$,$4$ times in total.$[3,5]$ $3$ times in total.$[4,6]$,$2$ times in total.</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the second example, we can find:<br /></p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">$[1,3],[2,4],[3,5]$.</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">In the third example, we can&#039;t find any.</p>", "create_time": "2017-05-13T16:04:29.788Z", "last_update_time": null, "created_by": 1, "time_limit": 2000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 77, "total_accepted_number": 46, "contest": 8, "sort_index": "K", "is_public": false}}, {"model": "contest.contestproblem", "pk": 74, "fields": {"title": "A + B", "description": "<p>Your task is to Calculate a + b.<br /></p>", "input_description": "Input contains an integer N in the first line, and then N lines follow. Each line consists of a pair of integers a and b, separated by a space, one pair of integers per line.", "output_description": "For each pair of input integers a and b you should output the sum of a and b in one line, and with one line of output for each line in input.", "samples": "[{\"input\": \"2\\n1 5\\n10 20\\n\", \"output\": \"6\\n30\"}]", "test_case_id": "1fb160f8ae0dbe0c40b8fb2b7e93d009", "hint": "", "create_time": "2017-05-14T00:35:33.725Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 17, "total_accepted_number": 11, "contest": 7, "sort_index": "A", "is_public": false}}, {"model": "contest.contestproblem", "pk": 75, "fields": {"title": "\u5b64\u72ec\u7684\u4e32", "description": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&quot;\u4eba\u4f1a\u5b64\u72ec,\u90a3\u5b57\u7b26\u4e32\u4e5f\u4f1a\u5b64\u72ec\u5417?&quot;</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5b64\u72ec\u7684,\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u6570\u5217\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ec5\u51fa\u73b0\u4e00\u6b21</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u6bd4\u5982&quot;$abcde$&quot;\u662f\u5b64\u72ec\u7684,\u56e0\u4e3a$a,b,c,d,e$\u8fd95\u4e2a\u5143\u7d20\u90fd\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u800c&quot;$aabcde$&quot;\u5219\u662f\u4e0d\u5b64\u72ec\u7684,\u56e0\u4e3a$a$\u8fd9\u4e2a\u6570\u5728\u8fd9\u4e2a\u4e32\u91cc\u51fa\u73b0\u4e862\u6b21</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u7ed9\u4f60\u4e00\u4e2a\u4e32 $s_1s_2s_3....s_n$ ,\u4ed6\u7684\u957f\u5ea6\u662f$n$,\u73b0\u5728\u8bf7\u4f60\u5224\u65ad\u4ed6\u662f\u4e0d\u662f\u5b64\u72ec\u7684</p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570$T$($T \\leq 10$),\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570.\n\n\u63a5\u7740T\u884c,\u6bcf\u884c\u7684\u5f00\u5934\u662f\u4e00\u4e2a\u6574\u6570$l$($1 \\leq l \\leq 100000 $)\u8868\u793a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n\n\u63a5\u7740\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a$l$\u7684\u5b57\u7b26\u4e32,\u4fdd\u8bc1\u53ea\u542b\u6709\u5c0f\u5199\u5b57\u6bcd", "output_description": "\u8f93\u51fa$T$\u884c,\u5bf9\u4e8e\u7b2c$i$\u884c,\u5982\u679c\u7b2c$i$\u4e2a\u5b57\u7b26\u4e32\u662f\u5b64\u72ec\u7684,\u8f93\u51fa\"Yes\",\u5426\u5219\u8f93\u51fa\"No\"(\u4e0d\u542b\u5f15\u53f7)", "samples": "[{\"input\": \"3\\n3 abc\\n2 aa\\n4 aabc\\n\", \"output\": \"Yes\\nNo\\nNo\\n\"}]", "test_case_id": "67edfbc2279e9218f23f2340b4f7d4e8", "hint": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32,$a,b,c$\u90fd\u53ea\u51fa\u73b0\u4e00\u6b21</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u5b57\u7b26\u4e32,$a$\u90fd\u51fa\u73b0\u8d85\u8fc71\u6b21</p>", "create_time": "2017-05-14T00:38:19.675Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 11, "total_accepted_number": 6, "contest": 7, "sort_index": "B", "is_public": false}}, {"model": "contest.contestproblem", "pk": 76, "fields": {"title": "\u5b64\u72ec\u7684\u6570\u5217", "description": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&quot;\u4eba\u4f1a\u5b64\u72ec,\u90a3\u6570\u5217\u4e5f\u4f1a\u5b64\u72ec\u5417?&quot;</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6570\u5217\u662f\u5b64\u72ec\u7684,\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u6570\u5217\u4e2d\u7684\u6bcf\u4e2a\u6570\u4ec5\u51fa\u73b0\u4e00\u6b21</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u6bd4\u5982&quot;$1,2,3,4,5$&quot;\u662f\u5b64\u72ec\u7684,\u56e0\u4e3a$1,2,3,4,$5\u8fd95\u4e2a\u5143\u7d20\u90fd\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u800c&quot;$1,1,2,3,4,5$&quot;\u5219\u662f\u4e0d\u5b64\u72ec\u7684,\u56e0\u4e3a\uffe51\u8fd9\u4e2a\u6570\u5728\u8fd9\u4e2a\u6570\u5217\u91cc\u51fa\u73b0\u4e862\u6b21</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u7ed9\u4f60\u4e00\u4e2a\u6570\u5217 $a_1a_2a_3....a_n$ ,\u4ed6\u7684\u957f\u5ea6\u662f$n$,\u73b0\u5728\u8bf7\u4f60\u8ba1\u7b97\u51fa\u8fd9\u4e2a\u6570\u5217\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u5b50\u6570\u5217\u662f\u5b64\u72ec\u7684</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u6570\u5217$a$\u7684\u4e24\u4e2a\u8fde\u7eed\u5b50\u6570\u5217$a_{i_1}a_{i_1+1}a_{i_1+2}a_{i_1+3}...a_{i_1+k}$ , $a_{j_1}a_{j_1+1}a_{j_1+2}a_{j_1+3}...a_{j_1+l}$\u89c6\u4e3a\u4e0d\u540c,\u5f53\u4e14\u4ec5\u5f53$i_1</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">eq j_1$ \u6216 $i_{1+k}</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">eq j_{1+l} $</p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570$T$($T \\leq 10$),\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570.\n\n\u63a5\u7740T\u884c,\u6bcf\u884c\u7684\u5f00\u5934\u662f\u4e00\u4e2a\u6574\u6570$l$($1 \\leq l \\leq 100000 $)\u8868\u793a\u8fd9\u4e2a\u6570\u5217\u7684\u957f\u5ea6\n\n\u63a5\u7740\u662fl\u4e2a\u6574\u6570$a_1,a_2....a_l$\u8868\u793a\u8fd9\u4e2a\u5e8f\u5217($0 \\leq a_i \\leq l$)", "output_description": "\u8f93\u51fa$T$\u884c,\u6bcf\u884c\u4e00\u4e2a\u6574\u6570,\u8868\u793a\u7b2c$i$\u4e2a\u6570\u5217\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u5b50\u6570\u5217\u662f\u5b64\u72ec\u7684", "samples": "[{\"input\": \"3\\n3 1 2 3\\n2 1 1\\n4 1 1 2 3\\n\", \"output\": \"6\\n2\\n7\"}]", "test_case_id": "e89316e190dea287bb9ecf1b9066f415", "hint": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u5bf9\u4e8e1 2 3,\u4ed6\u67096\u4e2a\u8fde\u7eed\u5b50\u5e8f\u5217&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;1,2&quot;,&quot;2,3&quot;,&quot;1,2,3&quot;,\u90fd\u662f\u5b64\u72ec\u7684</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u5bf9\u4e8e1 1,\u4ed6\u67093\u4e2a\u8fde\u7eed\u5b50\u6570\u5217, &quot;1&quot; &quot;1&quot; &quot;1,1&quot; \u5176\u4e2d&quot;1,1&quot;\u662f\u4e0d\u5b64\u72ec\u7684</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u5bf9\u4e8e1 1 2 3,\u4ed6\u670910\u4e2a\u8fde\u7eed\u5b50\u5e8f\u5217,\u5176\u4e2d\u9664\u4e86&quot;1,1&quot;, &quot;1,1,2&quot;,&quot;1,1,2,3&quot;\u662f\u4e0d\u5b64\u72ec\u7684\u5916,\u5269\u4e0b\u7684\u90fd\u662f\u5b64\u72ec\u7684</p>", "create_time": "2017-05-14T00:39:03.336Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 1, "total_accepted_number": 0, "contest": 7, "sort_index": "C", "is_public": false}}, {"model": "contest.contestproblem", "pk": 77, "fields": {"title": "\u4e0d\u518d\u5b64\u72ec\u7684HandsomeHow", "description": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">&quot;\u4e32\u4f1a\u5b64\u72ec,\u90a3$HandsomeHow$\u4e5f\u4f1a\u5b64\u72ec\u5417?&quot;</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u5f53\u7136\u4e0d\u4f1a\u5566~</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u67d0\u65e5,$HandsomeHow$\u548c\u4ed6\u7684\u5973\u670b\u53cb\u5728\u5403\u70e7\u70e4, \u4ed6\u4eec\u73b0\u5728\u6709$n$\u4e32\u70e7\u70e4,\u6211\u4eec\u628a\u70e7\u70e4\u4e32\u6807\u8bb0\u4e3a$1,2,3....n$.</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u5403\u70e7\u70e4\u7684\u65f6\u5019\u4e24\u4e2a\u4eba\u4e92\u76f8\u770b\u5bf9\u65b9\u4e00\u773c\u751f\u6015\u5bf9\u65b9\u5403\u7684\u6bd4\u81ea\u5df1\u591a,\u4e8e\u662f\u4ed6\u4eec\u603b\u662f\u540c\u65f6\u5403,\u4e5f\u5c31\u662f$HandsomeHow$\u5403\u4e00\u4e32\u7684\u65f6\u5019\u4ed6\u7684\u5973\u670b\u53cb\u4e5f\u4f1a\u5403\u4e00\u4e32.</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u4ed6\u4eec\u53d1\u73b0\u5f53\u4ed6\u4eec\u540c\u65f6\u5403\u7b2c$i$\u4e32\u548c\u7b2c$j$\u4e32\u70e7\u70e4\u7684\u65f6\u5019,\u4ed6\u4eec\u4e4b\u95f4\u7684\u597d\u611f\u5ea6\u4f1a\u589e\u52a0$a_{ij}$</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u73b0\u5728$HandsomeHow$\u8bf7\u4f60\u5e2e\u5fd9\u8ba1\u7b97,\u4ed6\u4eec\u5403\u5b8c\u8fd9\u4e9b\u70e7\u70e4,\u597d\u611f\u5ea6\u6700\u591a\u53ef\u4ee5\u589e\u52a0\u591a\u5c11</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u5f53\u7136\u6bcf\u4e32\u70e7\u70e4\u53ea\u80fd\u5403\u4e00\u6b21</p>", "input_description": "\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570$T$($T \\leq 10$),\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570.\n\n\u63a5\u7740T\u884c,\u6bcf\u884c\u7684\u5f00\u5934\u662f\u4e00\u4e2a\u6574\u6570$n$($1 \\leq n \\leq 14 $),\u8868\u793a\u4ed6\u4eec\u9762\u524d\u6709$n$\u79cd\u70e7\u70e4,\u4fdd\u8bc1$n$\u662f\u5076\u6570.\n\n\u63a5\u7740\u662f\u4e00\u4e2a$n*n$\u7684\u77e9\u9635,\u7b2c$i$\u884c\u7b2c$j$\u4e2a\u6570\u8868\u793a\u4ed6\u4eec\u540c\u65f6\u5403\u7b2c$i$\u4e32\u548c\u7b2c$j$\u4e32\u7684\u65f6\u5019\u53ef\u4ee5\u589e\u52a0\u597d\u611f\u5ea6$a_{ij}$\n\n($a_{ij} = a_{ji} , 0 \\leq a_{ij} \\leq 100 $)", "output_description": "\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u8868\u793a\u5403\u5b8c\u8fd9\u987f\u70e7\u70e4$HandsomeHow$\u548c\u4ed6\u7684\u5973\u670b\u53cb\u53ef\u4ee5\u589e\u52a0\u591a\u5c11\u597d\u611f\u5ea6", "samples": "[{\"input\": \"2\\n2\\n0 2\\n2 0\\n4\\n0 2 4 6\\n2 0 8 3\\n4 8 0 7\\n6 3 7 0\\n\", \"output\": \"2\\n14\\n\"}]", "test_case_id": "5ffa63ef224edfb621d490eb8af12e7e", "hint": "<p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u5bf9\u4e8e\u7ec4\u6837\u4f8b, \u4ed6\u4eec\u540c\u65f6\u5403\u7b2c\u4e00\u4e32\u548c\u7b2c\u4e8c\u4e32, \u597d\u611f\u5ea6\u4f1a\u589e\u52a02</p><p style=\"margin-bottom: 15px; word-wrap: break-word; font-family: arial, sans-serif; font-size: 16px;\">\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u6837\u4f8b, \u4ed6\u4eec\u5148\u5403\u7b2c\u4e00\u4e32\u548c\u7b2c\u56db\u4e32,\u597d\u611f\u5ea6\u589e\u52a0\u4e866, \u7136\u540e\u5403\u7b2c\u4e8c\u4e32\u548c\u7b2c\u4e09\u4e32,\u597d\u611f\u5ea6\u589e\u52a0\u91cf8,\u603b\u5171\u589e\u52a0\u4e8614</p>", "create_time": "2017-05-14T00:39:53.424Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 0, "total_accepted_number": 0, "contest": 7, "sort_index": "D", "is_public": false}}, {"model": "contest.contestproblem", "pk": 78, "fields": {"title": "\u6253\u5370", "description": "<p>\u8bf7\u5c06\u9700\u8981\u6253\u5370\u7684\u4ee3\u7801\u63d0\u4ea4\u5728\u8fd9\u91cc</p>", "input_description": "\u6253\u5370", "output_description": "\u6253\u5370", "samples": "[{\"input\": \"11\", \"output\": \"22\"}]", "test_case_id": "4ce0c83dd333cbcb0a9e8d8cc4987f2c", "hint": "", "create_time": "2017-05-14T03:50:53.809Z", "last_update_time": null, "created_by": 1, "time_limit": 1000, "memory_limit": 128, "spj": false, "spj_language": null, "spj_code": null, "spj_version": null, "visible": true, "total_submit_number": 46, "total_accepted_number": 0, "contest": 12, "sort_index": "A", "is_public": false}}, {"model": "contest.contestrank", "pk": 1, "fields": {"user": 2, "contest": 1, "total_submission_number": 1, "total_ac_number": 1, "total_time": 1266, "submission_info": "{\"1\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":1266.86876,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 2, "fields": {"user": 1, "contest": 1, "total_submission_number": 1, "total_ac_number": 1, "total_time": 1285, "submission_info": "{\"1\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1285.713681,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 3, "fields": {"user": 1, "contest": 2, "total_submission_number": 6, "total_ac_number": 2, "total_time": 80794, "submission_info": "{\"2\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":73646.862197,\"error_number\":0},\"5\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":2348.319334,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 4, "fields": {"user": 3, "contest": 2, "total_submission_number": 2, "total_ac_number": 2, "total_time": 79008, "submission_info": "{\"2\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":40161.641795,\"error_number\":0},\"4\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":38847.516417,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 5, "fields": {"user": 9, "contest": 2, "total_submission_number": 11, "total_ac_number": 6, "total_time": 356784, "submission_info": "{\"3\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":82164.427468,\"error_number\":2},\"2\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":39562.711079,\"error_number\":0},\"5\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":45118.493677,\"error_number\":3},\"4\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":40124.906293,\"error_number\":0},\"7\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":83334.328149,\"error_number\":0},\"6\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":60482.096776,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 6, "fields": {"user": 10, "contest": 2, "total_submission_number": 17, "total_ac_number": 3, "total_time": 528666, "submission_info": "{\"3\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6},\"2\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":39845.936136,\"error_number\":0},\"5\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7},\"4\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":241830.422694,\"error_number\":0},\"6\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":245791.027239,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 7, "fields": {"user": 8, "contest": 2, "total_submission_number": 5, "total_ac_number": 2, "total_time": 100656, "submission_info": "{\"2\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":40853.566705,\"error_number\":0},\"4\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"7\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":59803.266555,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 8, "fields": {"user": 11, "contest": 2, "total_submission_number": 12, "total_ac_number": 4, "total_time": 582078, "submission_info": "{\"2\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":53224.658073,\"error_number\":0},\"5\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7},\"4\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":54692.033938,\"error_number\":1},\"7\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":416654.953186,\"error_number\":0},\"6\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":56308.993657,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 9, "fields": {"user": 4, "contest": 2, "total_submission_number": 16, "total_ac_number": 6, "total_time": 774457, "submission_info": "{\"3\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":422263.35612,\"error_number\":3},\"2\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":57055.433059,\"error_number\":0},\"5\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":77387.417986,\"error_number\":6},\"4\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":56653.639423,\"error_number\":0},\"7\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":80819.568588,\"error_number\":0},\"6\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":68280.086642,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 10, "fields": {"user": 5, "contest": 2, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"6\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 11, "fields": {"user": 14, "contest": 2, "total_submission_number": 9, "total_ac_number": 4, "total_time": 537709, "submission_info": "{\"3\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"2\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":120780.277953,\"error_number\":0},\"4\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":141928.628999,\"error_number\":1},\"7\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":146831.18402,\"error_number\":1},\"6\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":125770.980333,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 12, "fields": {"user": 15, "contest": 2, "total_submission_number": 9, "total_ac_number": 3, "total_time": 989346, "submission_info": "{\"3\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"2\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":329536.884703,\"error_number\":0},\"4\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"7\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":330201.036009,\"error_number\":0},\"6\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":329609.824779,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 13, "fields": {"user": 13, "contest": 2, "total_submission_number": 3, "total_ac_number": 3, "total_time": 1422962, "submission_info": "{\"2\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":422762.175166,\"error_number\":0},\"4\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":422856.330959,\"error_number\":0},\"6\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":577344.854171,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 14, "fields": {"user": 12, "contest": 2, "total_submission_number": 4, "total_ac_number": 3, "total_time": 1621401, "submission_info": "{\"4\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":424185.987162,\"error_number\":1},\"7\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":595642.140748,\"error_number\":0},\"6\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":600374.34429,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 15, "fields": {"user": 17, "contest": 2, "total_submission_number": 4, "total_ac_number": 1, "total_time": 512468, "submission_info": "{\"2\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"4\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":512468.376792,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 16, "fields": {"user": 18, "contest": 2, "total_submission_number": 7, "total_ac_number": 2, "total_time": 1033814, "submission_info": "{\"3\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":513901.384083,\"error_number\":4},\"2\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":513913.323109,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 17, "fields": {"user": 4, "contest": 4, "total_submission_number": 9, "total_ac_number": 4, "total_time": 27329, "submission_info": "{\"11\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"10\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":1809.989694,\"error_number\":1},\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11466.541284,\"error_number\":0},\"15\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":6183.021188,\"error_number\":1},\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5471.000621,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 18, "fields": {"user": 5, "contest": 4, "total_submission_number": 5, "total_ac_number": 3, "total_time": 217908, "submission_info": "{\"10\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4078.386987,\"error_number\":1},\"14\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":206976.216762,\"error_number\":1},\"8\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":4454.490851,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 19, "fields": {"user": 19, "contest": 4, "total_submission_number": 13, "total_ac_number": 5, "total_time": 80135, "submission_info": "{\"9\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":5461.236943,\"error_number\":0},\"10\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4644.474007,\"error_number\":0},\"12\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":30787.235351,\"error_number\":5},\"14\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":24476.303782,\"error_number\":3},\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5167.494745,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 20, "fields": {"user": 14, "contest": 4, "total_submission_number": 10, "total_ac_number": 5, "total_time": 258575, "submission_info": "{\"11\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":40555.314399,\"error_number\":0},\"10\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":38755.786945,\"error_number\":0},\"13\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":102813.942563,\"error_number\":0},\"15\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":38071.624958,\"error_number\":0},\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":37181.908526,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 21, "fields": {"user": 15, "contest": 4, "total_submission_number": 10, "total_ac_number": 4, "total_time": 37960, "submission_info": "{\"11\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":13016.830061,\"error_number\":1},\"10\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5920.747581,\"error_number\":3},\"13\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"15\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6464.152359,\"error_number\":0},\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7760.509386,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 22, "fields": {"user": 37, "contest": 4, "total_submission_number": 6, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"9\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"8\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"10\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 23, "fields": {"user": 24, "contest": 4, "total_submission_number": 1, "total_ac_number": 1, "total_time": 5421, "submission_info": "{\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5421.687092,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 24, "fields": {"user": 11, "contest": 4, "total_submission_number": 9, "total_ac_number": 4, "total_time": 237382, "submission_info": "{\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8421.908219,\"error_number\":1},\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5493.246068,\"error_number\":0},\"11\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":212271.06658,\"error_number\":1},\"15\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"10\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7597.611738,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 25, "fields": {"user": 36, "contest": 4, "total_submission_number": 14, "total_ac_number": 4, "total_time": 318119, "submission_info": "{\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":88136.990463,\"error_number\":0},\"10\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6449.341925,\"error_number\":1},\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":87276.11513,\"error_number\":1},\"11\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":124258.098848,\"error_number\":8}}"}}, {"model": "contest.contestrank", "pk": 26, "fields": {"user": 9, "contest": 4, "total_submission_number": 12, "total_ac_number": 7, "total_time": 375403, "submission_info": "{\"11\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":37714.190597,\"error_number\":0},\"10\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":35375.234926,\"error_number\":2},\"13\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":22017.496746,\"error_number\":2},\"12\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":195784.352223,\"error_number\":0},\"15\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":34644.048242,\"error_number\":0},\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":35791.310597,\"error_number\":0},\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8078.380405,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 27, "fields": {"user": 12, "contest": 4, "total_submission_number": 11, "total_ac_number": 2, "total_time": 20452, "submission_info": "{\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9764.201563,\"error_number\":2},\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8288.437915,\"error_number\":0},\"10\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7}}"}}, {"model": "contest.contestrank", "pk": 28, "fields": {"user": 17, "contest": 4, "total_submission_number": 9, "total_ac_number": 4, "total_time": 117997, "submission_info": "{\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":28803.01228,\"error_number\":2},\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":28476.064985,\"error_number\":1},\"10\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12047.88682,\"error_number\":0},\"11\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":42671.993301,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 29, "fields": {"user": 20, "contest": 4, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"10\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 30, "fields": {"user": 40, "contest": 4, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"10\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 31, "fields": {"user": 23, "contest": 4, "total_submission_number": 13, "total_ac_number": 5, "total_time": 221112, "submission_info": "{\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":27662.725896,\"error_number\":5},\"10\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":24594.190476,\"error_number\":3},\"13\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":95168.167457,\"error_number\":0},\"14\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":37774.39951,\"error_number\":0},\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":26314.790623,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 32, "fields": {"user": 41, "contest": 4, "total_submission_number": 8, "total_ac_number": 3, "total_time": 82007, "submission_info": "{\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":27617.659808,\"error_number\":2},\"10\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":24515.245326,\"error_number\":1},\"11\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":26275.82921,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 33, "fields": {"user": 10, "contest": 4, "total_submission_number": 12, "total_ac_number": 3, "total_time": 91369, "submission_info": "{\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":29056.05512,\"error_number\":3},\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":27242.692066,\"error_number\":0},\"13\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"10\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":30271.183022,\"error_number\":1},\"11\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 34, "fields": {"user": 46, "contest": 4, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"8\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 35, "fields": {"user": 38, "contest": 4, "total_submission_number": 2, "total_ac_number": 1, "total_time": 37856, "submission_info": "{\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":36656.430569,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 36, "fields": {"user": 47, "contest": 4, "total_submission_number": 18, "total_ac_number": 3, "total_time": 266513, "submission_info": "{\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":84043.776729,\"error_number\":7},\"10\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":79402.898296,\"error_number\":5},\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":85068.409653,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 37, "fields": {"user": 49, "contest": 4, "total_submission_number": 4, "total_ac_number": 1, "total_time": 206622, "submission_info": "{\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":203022.120888,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 38, "fields": {"user": 51, "contest": 4, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"10\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 39, "fields": {"user": 56, "contest": 4, "total_submission_number": 7, "total_ac_number": 2, "total_time": 247080, "submission_info": "{\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":127731.145068,\"error_number\":3},\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":115749.86549,\"error_number\":0},\"10\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 40, "fields": {"user": 55, "contest": 4, "total_submission_number": 49, "total_ac_number": 1, "total_time": 232505, "submission_info": "{\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":191705.005358,\"error_number\":34},\"8\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"10\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":12}}"}}, {"model": "contest.contestrank", "pk": 41, "fields": {"user": 53, "contest": 4, "total_submission_number": 6, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"8\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6}}"}}, {"model": "contest.contestrank", "pk": 42, "fields": {"user": 1, "contest": 4, "total_submission_number": 1, "total_ac_number": 1, "total_time": 126946, "submission_info": "{\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":126946.357417,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 43, "fields": {"user": 2, "contest": 4, "total_submission_number": 5, "total_ac_number": 2, "total_time": 258462, "submission_info": "{\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":127368.209366,\"error_number\":1},\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":127494.94043,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 44, "fields": {"user": 59, "contest": 4, "total_submission_number": 24, "total_ac_number": 4, "total_time": 772827, "submission_info": "{\"9\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":186020.020081,\"error_number\":9},\"10\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":187778.197588,\"error_number\":0},\"8\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":192903.94075,\"error_number\":0},\"14\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":195326.96034,\"error_number\":0},\"11\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":11}}"}}, {"model": "contest.contestrank", "pk": 45, "fields": {"user": 58, "contest": 4, "total_submission_number": 9, "total_ac_number": 1, "total_time": 208528, "submission_info": "{\"11\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"10\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":200128.387665,\"error_number\":7}}"}}, {"model": "contest.contestrank", "pk": 46, "fields": {"user": 42, "contest": 4, "total_submission_number": 6, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"16\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6}}"}}, {"model": "contest.contestrank", "pk": 47, "fields": {"user": 60, "contest": 4, "total_submission_number": 6, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"9\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6}}"}}, {"model": "contest.contestrank", "pk": 48, "fields": {"user": 19, "contest": 3, "total_submission_number": 36, "total_ac_number": 4, "total_time": 22209, "submission_info": "{\"24\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":233.557918,\"error_number\":0},\"20\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":14},\"21\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3407.561852,\"error_number\":0},\"22\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4346.730923,\"error_number\":0},\"23\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5},\"19\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"18\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5},\"17\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9423.87512,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 49, "fields": {"user": 23, "contest": 3, "total_submission_number": 11, "total_ac_number": 1, "total_time": 412, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":412.826952,\"error_number\":0},\"21\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"17\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7}}"}}, {"model": "contest.contestrank", "pk": 50, "fields": {"user": 9, "contest": 3, "total_submission_number": 61, "total_ac_number": 4, "total_time": 30510, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":736.672892,\"error_number\":1},\"20\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":50},\"21\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4388.934718,\"error_number\":1},\"22\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5806.271968,\"error_number\":0},\"19\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":12380.914057,\"error_number\":4},\"17\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 51, "fields": {"user": 67, "contest": 3, "total_submission_number": 20, "total_ac_number": 4, "total_time": 30179, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":548.556655,\"error_number\":0},\"20\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6},\"21\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5697.93095,\"error_number\":0},\"22\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6960.985907,\"error_number\":1},\"23\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":13374.1741,\"error_number\":2},\"17\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7}}"}}, {"model": "contest.contestrank", "pk": 52, "fields": {"user": 4, "contest": 3, "total_submission_number": 38, "total_ac_number": 5, "total_time": 62202, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":567.038337,\"error_number\":0},\"20\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":6503.969157,\"error_number\":17},\"21\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4460.663788,\"error_number\":5},\"17\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11286.964672,\"error_number\":4},\"23\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"19\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"18\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"22\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8186.82775,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 53, "fields": {"user": 17, "contest": 3, "total_submission_number": 2, "total_ac_number": 1, "total_time": 2053, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":853.510831,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 54, "fields": {"user": 11, "contest": 3, "total_submission_number": 50, "total_ac_number": 2, "total_time": 4925, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":891.96669,\"error_number\":1},\"20\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":30},\"21\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":2834.976686,\"error_number\":0},\"17\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7},\"23\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"22\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6}}"}}, {"model": "contest.contestrank", "pk": 55, "fields": {"user": 61, "contest": 3, "total_submission_number": 28, "total_ac_number": 2, "total_time": 17253, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":732.173421,\"error_number\":0},\"20\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"22\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6},\"17\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":15},\"19\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"21\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":16521.925517,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 56, "fields": {"user": 5, "contest": 3, "total_submission_number": 63, "total_ac_number": 4, "total_time": 23603, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":755.512977,\"error_number\":0},\"20\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":50},\"21\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6482.707424,\"error_number\":1},\"22\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9534.156843,\"error_number\":3},\"23\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"18\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"17\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2032.745586,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 57, "fields": {"user": 14, "contest": 3, "total_submission_number": 71, "total_ac_number": 4, "total_time": 36372, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2355.387174,\"error_number\":0},\"20\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":65},\"17\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10052.716751,\"error_number\":1},\"22\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6649.35641,\"error_number\":0},\"18\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"21\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":16116.010057,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 58, "fields": {"user": 71, "contest": 3, "total_submission_number": 68, "total_ac_number": 3, "total_time": 38837, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1344.255081,\"error_number\":3},\"20\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":51},\"17\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":14526.709406,\"error_number\":11},\"22\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6167.724824,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 59, "fields": {"user": 64, "contest": 3, "total_submission_number": 15, "total_ac_number": 2, "total_time": 12922, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5442.851535,\"error_number\":4},\"20\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":8},\"17\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":1480.98661,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 60, "fields": {"user": 63, "contest": 3, "total_submission_number": 11, "total_ac_number": 1, "total_time": 8472, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4872.92827,\"error_number\":3},\"20\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7}}"}}, {"model": "contest.contestrank", "pk": 61, "fields": {"user": 12, "contest": 3, "total_submission_number": 12, "total_ac_number": 5, "total_time": 33381, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1536.507803,\"error_number\":2},\"22\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":3681.073059,\"error_number\":0},\"21\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2955.600002,\"error_number\":0},\"17\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8118.865662,\"error_number\":3},\"23\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":8691.196419,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 62, "fields": {"user": 10, "contest": 3, "total_submission_number": 33, "total_ac_number": 3, "total_time": 24962, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2078.911407,\"error_number\":0},\"20\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":20},\"21\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6957.369049,\"error_number\":1},\"22\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11127.711773,\"error_number\":3},\"19\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5},\"18\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 63, "fields": {"user": 56, "contest": 3, "total_submission_number": 8, "total_ac_number": 1, "total_time": 19545, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":14745.852998,\"error_number\":4},\"17\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 64, "fields": {"user": 37, "contest": 3, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"17\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 65, "fields": {"user": 58, "contest": 3, "total_submission_number": 9, "total_ac_number": 1, "total_time": 8153, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6953.366118,\"error_number\":1},\"17\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"22\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 66, "fields": {"user": 43, "contest": 3, "total_submission_number": 9, "total_ac_number": 1, "total_time": 13625, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4025.755049,\"error_number\":8}}"}}, {"model": "contest.contestrank", "pk": 67, "fields": {"user": 66, "contest": 3, "total_submission_number": 25, "total_ac_number": 2, "total_time": 6223, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3481.501551,\"error_number\":1},\"20\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":17},\"17\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1542.762561,\"error_number\":0},\"22\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5}}"}}, {"model": "contest.contestrank", "pk": 68, "fields": {"user": 73, "contest": 3, "total_submission_number": 12, "total_ac_number": 1, "total_time": 2000, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2000.992073,\"error_number\":0},\"21\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7},\"22\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 69, "fields": {"user": 51, "contest": 3, "total_submission_number": 11, "total_ac_number": 3, "total_time": 34027, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2006.510039,\"error_number\":0},\"20\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6752.578193,\"error_number\":0},\"17\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":15669.508965,\"error_number\":8}}"}}, {"model": "contest.contestrank", "pk": 70, "fields": {"user": 45, "contest": 3, "total_submission_number": 10, "total_ac_number": 1, "total_time": 15261, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6861.292621,\"error_number\":7},\"21\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"22\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 71, "fields": {"user": 76, "contest": 3, "total_submission_number": 3, "total_ac_number": 1, "total_time": 4559, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3359.017746,\"error_number\":1},\"23\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 72, "fields": {"user": 36, "contest": 3, "total_submission_number": 9, "total_ac_number": 1, "total_time": 6352, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3952.519019,\"error_number\":2},\"21\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"17\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 73, "fields": {"user": 59, "contest": 3, "total_submission_number": 15, "total_ac_number": 1, "total_time": 2769, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2769.654973,\"error_number\":0},\"22\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"17\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":13}}"}}, {"model": "contest.contestrank", "pk": 74, "fields": {"user": 8, "contest": 3, "total_submission_number": 9, "total_ac_number": 1, "total_time": 5141, "submission_info": "{\"18\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7},\"22\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3941.835701,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 75, "fields": {"user": 49, "contest": 3, "total_submission_number": 16, "total_ac_number": 3, "total_time": 42247, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3749.759341,\"error_number\":4},\"20\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7352.129252,\"error_number\":7},\"17\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":15546.97418,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 76, "fields": {"user": 75, "contest": 3, "total_submission_number": 9, "total_ac_number": 1, "total_time": 8361, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5961.429444,\"error_number\":2},\"20\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"17\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 77, "fields": {"user": 80, "contest": 3, "total_submission_number": 8, "total_ac_number": 2, "total_time": 24879, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6854.993764,\"error_number\":0},\"17\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10825.953945,\"error_number\":6}}"}}, {"model": "contest.contestrank", "pk": 78, "fields": {"user": 74, "contest": 3, "total_submission_number": 3, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 79, "fields": {"user": 72, "contest": 3, "total_submission_number": 20, "total_ac_number": 1, "total_time": 18289, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":13489.48083,\"error_number\":4},\"20\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":8},\"21\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7}}"}}, {"model": "contest.contestrank", "pk": 80, "fields": {"user": 27, "contest": 3, "total_submission_number": 1, "total_ac_number": 1, "total_time": 6131, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6131.304038,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 81, "fields": {"user": 32, "contest": 3, "total_submission_number": 2, "total_ac_number": 1, "total_time": 6274, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6274.029874,\"error_number\":0},\"21\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 82, "fields": {"user": 83, "contest": 3, "total_submission_number": 6, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6}}"}}, {"model": "contest.contestrank", "pk": 83, "fields": {"user": 65, "contest": 3, "total_submission_number": 13, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":13}}"}}, {"model": "contest.contestrank", "pk": 84, "fields": {"user": 86, "contest": 3, "total_submission_number": 48, "total_ac_number": 1, "total_time": 9198, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9198.254132,\"error_number\":0},\"20\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":47}}"}}, {"model": "contest.contestrank", "pk": 85, "fields": {"user": 68, "contest": 3, "total_submission_number": 8, "total_ac_number": 1, "total_time": 15218, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10418.472676,\"error_number\":4},\"20\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"21\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 86, "fields": {"user": 81, "contest": 3, "total_submission_number": 19, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":19}}"}}, {"model": "contest.contestrank", "pk": 87, "fields": {"user": 88, "contest": 3, "total_submission_number": 6, "total_ac_number": 3, "total_time": 37415, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10199.212891,\"error_number\":1},\"22\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10808.907527,\"error_number\":0},\"17\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12808.552839,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 88, "fields": {"user": 28, "contest": 3, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"17\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 89, "fields": {"user": 55, "contest": 3, "total_submission_number": 7, "total_ac_number": 1, "total_time": 20122, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12922.683105,\"error_number\":6}}"}}, {"model": "contest.contestrank", "pk": 90, "fields": {"user": 79, "contest": 3, "total_submission_number": 3, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 91, "fields": {"user": 38, "contest": 3, "total_submission_number": 8, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"17\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":8}}"}}, {"model": "contest.contestrank", "pk": 92, "fields": {"user": 60, "contest": 3, "total_submission_number": 3, "total_ac_number": 1, "total_time": 17196, "submission_info": "{\"24\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":15996.735991,\"error_number\":1},\"21\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 93, "fields": {"user": 2, "contest": 2, "total_submission_number": 2, "total_ac_number": 1, "total_time": 1394, "submission_info": "{\"2\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":194.248969,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 94, "fields": {"user": 2, "contest": 9, "total_submission_number": 4, "total_ac_number": 1, "total_time": 3724, "submission_info": "{\"25\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":124.922313,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 95, "fields": {"user": 2, "contest": 10, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"26\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 96, "fields": {"user": 95, "contest": 10, "total_submission_number": 3, "total_ac_number": 1, "total_time": 2598, "submission_info": "{\"26\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":198.729871,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 97, "fields": {"user": 2, "contest": 5, "total_submission_number": 2, "total_ac_number": 2, "total_time": 2381, "submission_info": "{\"39\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":1378.617653,\"error_number\":0},\"37\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":1003.075876,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 98, "fields": {"user": 17, "contest": 5, "total_submission_number": 13, "total_ac_number": 5, "total_time": 834412, "submission_info": "{\"27\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":265226.5278,\"error_number\":2},\"38\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":178333.252646,\"error_number\":0},\"37\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12634.777711,\"error_number\":2},\"43\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":186876.871424,\"error_number\":1},\"41\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":181743.30688,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 99, "fields": {"user": 246, "contest": 5, "total_submission_number": 20, "total_ac_number": 1, "total_time": 396086, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":11},\"37\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":386486.668558,\"error_number\":8}}"}}, {"model": "contest.contestrank", "pk": 100, "fields": {"user": 250, "contest": 5, "total_submission_number": 35, "total_ac_number": 5, "total_time": 1728926, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":370142.30197,\"error_number\":11},\"37\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":203507.319854,\"error_number\":3},\"43\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":205452.955077,\"error_number\":0},\"35\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":10},\"41\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":364550.888271,\"error_number\":6},\"38\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":561275.292497,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 101, "fields": {"user": 1, "contest": 5, "total_submission_number": 2, "total_ac_number": 2, "total_time": 841361, "submission_info": "{\"37\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":630408.14169,\"error_number\":0},\"41\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":210953.054162,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 102, "fields": {"user": 10, "contest": 5, "total_submission_number": 10, "total_ac_number": 5, "total_time": 1685587, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":265326.015736,\"error_number\":0},\"37\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":270501.843248,\"error_number\":1},\"43\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":273804.448791,\"error_number\":0},\"35\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"41\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":281370.073646,\"error_number\":1},\"38\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":590986.599948,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 103, "fields": {"user": 256, "contest": 5, "total_submission_number": 6, "total_ac_number": 4, "total_time": 1514457, "submission_info": "{\"39\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":527498.658559,\"error_number\":2},\"38\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":328709.484954,\"error_number\":0},\"37\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":281473.582771,\"error_number\":0},\"41\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":374377.040435,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 104, "fields": {"user": 58, "contest": 5, "total_submission_number": 7, "total_ac_number": 1, "total_time": 294446, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":287246.3323,\"error_number\":6}}"}}, {"model": "contest.contestrank", "pk": 105, "fields": {"user": 209, "contest": 5, "total_submission_number": 1, "total_ac_number": 1, "total_time": 367627, "submission_info": "{\"41\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":367627.312495,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 106, "fields": {"user": 88, "contest": 5, "total_submission_number": 5, "total_ac_number": 1, "total_time": 376131, "submission_info": "{\"29\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":371331.035785,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 107, "fields": {"user": 225, "contest": 5, "total_submission_number": 1, "total_ac_number": 1, "total_time": 377491, "submission_info": "{\"33\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":377491.944895,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 108, "fields": {"user": 5, "contest": 5, "total_submission_number": 1, "total_ac_number": 1, "total_time": 377703, "submission_info": "{\"33\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":377703.522163,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 109, "fields": {"user": 251, "contest": 5, "total_submission_number": 23, "total_ac_number": 2, "total_time": 944299, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":15},\"38\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"43\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":471925.200108,\"error_number\":1},\"41\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":466374.326488,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 110, "fields": {"user": 259, "contest": 5, "total_submission_number": 3, "total_ac_number": 1, "total_time": 386755, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":385555.920432,\"error_number\":1},\"29\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 111, "fields": {"user": 272, "contest": 5, "total_submission_number": 3, "total_ac_number": 2, "total_time": 1102848, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":646446.840998,\"error_number\":0},\"37\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":455202.401987,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 112, "fields": {"user": 258, "contest": 5, "total_submission_number": 4, "total_ac_number": 1, "total_time": 475974, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":472374.103261,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 113, "fields": {"user": 223, "contest": 5, "total_submission_number": 42, "total_ac_number": 3, "total_time": 2101018, "submission_info": "{\"39\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":771496.291124,\"error_number\":8},\"37\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":534461.867632,\"error_number\":5},\"43\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":16},\"41\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":767461.2257,\"error_number\":10}}"}}, {"model": "contest.contestrank", "pk": 114, "fields": {"user": 266, "contest": 5, "total_submission_number": 14, "total_ac_number": 7, "total_time": 4225102, "submission_info": "{\"39\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":683648.646583,\"error_number\":0},\"38\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":590532.737739,\"error_number\":0},\"37\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":553016.67673,\"error_number\":0},\"43\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":589734.778528,\"error_number\":0},\"40\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":698192.216736,\"error_number\":0},\"41\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":555502.511755,\"error_number\":2},\"27\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":552078.561875,\"error_number\":0},\"35\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5}}"}}, {"model": "contest.contestrank", "pk": 115, "fields": {"user": 106, "contest": 5, "total_submission_number": 14, "total_ac_number": 5, "total_time": 3325918, "submission_info": "{\"39\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":632424.036329,\"error_number\":1},\"27\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":643850.516717,\"error_number\":0},\"37\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":622528.615981,\"error_number\":8},\"43\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":707868.413909,\"error_number\":0},\"38\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":708448.567149,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 116, "fields": {"user": 82, "contest": 5, "total_submission_number": 11, "total_ac_number": 2, "total_time": 1303794, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":645479.362221,\"error_number\":6},\"37\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":647515.075862,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 117, "fields": {"user": 229, "contest": 5, "total_submission_number": 25, "total_ac_number": 4, "total_time": 2771777, "submission_info": "{\"39\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":699877.454533,\"error_number\":0},\"38\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"37\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":643018.166633,\"error_number\":0},\"42\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5},\"43\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":706267.274519,\"error_number\":3},\"41\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":705815.067411,\"error_number\":11}}"}}, {"model": "contest.contestrank", "pk": 118, "fields": {"user": 238, "contest": 5, "total_submission_number": 2, "total_ac_number": 1, "total_time": 646398, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":645198.416276,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 119, "fields": {"user": 322, "contest": 5, "total_submission_number": 16, "total_ac_number": 1, "total_time": 708436, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":690436.492566,\"error_number\":15}}"}}, {"model": "contest.contestrank", "pk": 120, "fields": {"user": 134, "contest": 5, "total_submission_number": 13, "total_ac_number": 2, "total_time": 1396293, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":687126.953755,\"error_number\":6},\"37\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":695967.304867,\"error_number\":5}}"}}, {"model": "contest.contestrank", "pk": 121, "fields": {"user": 340, "contest": 5, "total_submission_number": 2, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 122, "fields": {"user": 275, "contest": 5, "total_submission_number": 10, "total_ac_number": 1, "total_time": 769503, "submission_info": "{\"37\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":768303.732603,\"error_number\":1},\"43\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"41\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 123, "fields": {"user": 128, "contest": 5, "total_submission_number": 1, "total_ac_number": 1, "total_time": 708752, "submission_info": "{\"43\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":708752.311963,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 124, "fields": {"user": 234, "contest": 5, "total_submission_number": 6, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"30\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"43\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"41\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 125, "fields": {"user": 305, "contest": 5, "total_submission_number": 10, "total_ac_number": 2, "total_time": 1488970, "submission_info": "{\"39\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"38\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"37\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":712189.577752,\"error_number\":4},\"43\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":770781.713248,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 126, "fields": {"user": 24, "contest": 5, "total_submission_number": 5, "total_ac_number": 1, "total_time": 735840, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":731040.959052,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 127, "fields": {"user": 349, "contest": 5, "total_submission_number": 3, "total_ac_number": 1, "total_time": 728727, "submission_info": "{\"37\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":726327.877641,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 128, "fields": {"user": 351, "contest": 5, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"40\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 129, "fields": {"user": 69, "contest": 5, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 130, "fields": {"user": 221, "contest": 5, "total_submission_number": 4, "total_ac_number": 1, "total_time": 733830, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":730230.024043,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 131, "fields": {"user": 47, "contest": 5, "total_submission_number": 2, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 132, "fields": {"user": 68, "contest": 5, "total_submission_number": 2, "total_ac_number": 1, "total_time": 733234, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":732034.161752,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 133, "fields": {"user": 55, "contest": 5, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 134, "fields": {"user": 350, "contest": 5, "total_submission_number": 2, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"37\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 135, "fields": {"user": 217, "contest": 5, "total_submission_number": 1, "total_ac_number": 1, "total_time": 769294, "submission_info": "{\"43\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":769294.401716,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 136, "fields": {"user": 224, "contest": 5, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"27\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 137, "fields": {"user": 241, "contest": 5, "total_submission_number": 1, "total_ac_number": 1, "total_time": 772195, "submission_info": "{\"37\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":772195.781655,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 138, "fields": {"user": 217, "contest": 6, "total_submission_number": 11, "total_ac_number": 7, "total_time": 21225, "submission_info": "{\"48\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":781.851084,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2147.608788,\"error_number\":1},\"46\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":46.847827,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":984.701794,\"error_number\":0},\"50\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"53\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6641.876854,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1430.60229,\"error_number\":0},\"54\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6796.124686,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 139, "fields": {"user": 243, "contest": 6, "total_submission_number": 14, "total_ac_number": 5, "total_time": 25007, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2489.694614,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3953.406753,\"error_number\":3},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":101.089116,\"error_number\":1},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3002.196691,\"error_number\":1},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7062.894799,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 140, "fields": {"user": 225, "contest": 6, "total_submission_number": 17, "total_ac_number": 8, "total_time": 30595, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1784.430334,\"error_number\":1},\"49\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":577.699773,\"error_number\":0},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":97.909642,\"error_number\":0},\"54\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":1972.361374,\"error_number\":0},\"50\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8871.180426,\"error_number\":8},\"53\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":1613.154762,\"error_number\":0},\"52\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":772.662054,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4109.534668,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 141, "fields": {"user": 278, "contest": 6, "total_submission_number": 28, "total_ac_number": 6, "total_time": 18723, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1989.634413,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2068.4553,\"error_number\":1},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":116.812314,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3349.47091,\"error_number\":2},\"50\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5},\"53\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4270.330191,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2131.364769,\"error_number\":1},\"54\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":13}}"}}, {"model": "contest.contestrank", "pk": 142, "fields": {"user": 231, "contest": 6, "total_submission_number": 12, "total_ac_number": 5, "total_time": 26139, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":144.512843,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2939.743184,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4436.018857,\"error_number\":2},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1032.928223,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9188.077329,\"error_number\":5}}"}}, {"model": "contest.contestrank", "pk": 143, "fields": {"user": 283, "contest": 6, "total_submission_number": 16, "total_ac_number": 5, "total_time": 29082, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2838.15437,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5466.672433,\"error_number\":2},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":165.738541,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1831.601766,\"error_number\":0},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10382.727075,\"error_number\":5}}"}}, {"model": "contest.contestrank", "pk": 144, "fields": {"user": 221, "contest": 6, "total_submission_number": 12, "total_ac_number": 5, "total_time": 30036, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":179.231933,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2044.299684,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5227.082388,\"error_number\":2},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2164.30589,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12022.034529,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 145, "fields": {"user": 266, "contest": 6, "total_submission_number": 26, "total_ac_number": 5, "total_time": 35790, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6813.091559,\"error_number\":2},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2823.225028,\"error_number\":2},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":249.223778,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1430.362683,\"error_number\":0},\"50\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10075.575291,\"error_number\":8},\"54\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 146, "fields": {"user": 229, "contest": 6, "total_submission_number": 10, "total_ac_number": 5, "total_time": 27903, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1839.421529,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6962.566069,\"error_number\":3},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":265.610761,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4683.289476,\"error_number\":1},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9354.885846,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 147, "fields": {"user": 325, "contest": 6, "total_submission_number": 12, "total_ac_number": 5, "total_time": 16468, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1869.326557,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5752.2678,\"error_number\":1},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":315.02309,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2139.616626,\"error_number\":0},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5193.509795,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 148, "fields": {"user": 238, "contest": 6, "total_submission_number": 22, "total_ac_number": 5, "total_time": 12234, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1358.19882,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5510.101432,\"error_number\":1},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":334.752574,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1762.350608,\"error_number\":0},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":16},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2070.768346,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 149, "fields": {"user": 306, "contest": 6, "total_submission_number": 13, "total_ac_number": 5, "total_time": 44263, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7445.549888,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":16394.937028,\"error_number\":4},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":355.586435,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6797.973328,\"error_number\":0},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4872.984653,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 150, "fields": {"user": 241, "contest": 6, "total_submission_number": 24, "total_ac_number": 3, "total_time": 3349, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":357.42844,\"error_number\":0},\"47\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":978.458004,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2014.525856,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":19}}"}}, {"model": "contest.contestrank", "pk": 151, "fields": {"user": 293, "contest": 6, "total_submission_number": 22, "total_ac_number": 5, "total_time": 44074, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3684.756464,\"error_number\":2},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8291.172131,\"error_number\":7},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":360.0083,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2252.852377,\"error_number\":0},\"50\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":13887.642243,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 152, "fields": {"user": 268, "contest": 6, "total_submission_number": 25, "total_ac_number": 5, "total_time": 48657, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2318.526906,\"error_number\":3},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10450.425811,\"error_number\":7},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":363.426089,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3780.44675,\"error_number\":2},\"50\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11346.624061,\"error_number\":5},\"54\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 153, "fields": {"user": 226, "contest": 6, "total_submission_number": 41, "total_ac_number": 4, "total_time": 34058, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6952.921388,\"error_number\":1},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":18},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":655.978359,\"error_number\":3},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2549.266129,\"error_number\":1},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":8},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10702.104516,\"error_number\":6}}"}}, {"model": "contest.contestrank", "pk": 154, "fields": {"user": 316, "contest": 6, "total_submission_number": 20, "total_ac_number": 1, "total_time": 423, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":423.149982,\"error_number\":0},\"48\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":13}}"}}, {"model": "contest.contestrank", "pk": 155, "fields": {"user": 232, "contest": 6, "total_submission_number": 5, "total_ac_number": 3, "total_time": 18517, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":444.378613,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3993.854608,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":14080.069536,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 156, "fields": {"user": 228, "contest": 6, "total_submission_number": 16, "total_ac_number": 8, "total_time": 34899, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2523.589255,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3066.866954,\"error_number\":0},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":469.931556,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1795.463049,\"error_number\":0},\"50\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":8341.465332,\"error_number\":5},\"53\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3447.606157,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":871.195564,\"error_number\":0},\"54\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4787.789378,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 157, "fields": {"user": 351, "contest": 6, "total_submission_number": 12, "total_ac_number": 3, "total_time": 37132, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":497.726557,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9969.498851,\"error_number\":1},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":15866.367225,\"error_number\":8}}"}}, {"model": "contest.contestrank", "pk": 158, "fields": {"user": 326, "contest": 6, "total_submission_number": 14, "total_ac_number": 5, "total_time": 19530, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6897.97643,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2291.1092,\"error_number\":0},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":527.493963,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5244.202137,\"error_number\":2},\"50\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2171.672427,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 159, "fields": {"user": 275, "contest": 6, "total_submission_number": 28, "total_ac_number": 4, "total_time": 24952, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9293.241503,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12132.459579,\"error_number\":1},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":543.51703,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1784.555998,\"error_number\":0},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":22}}"}}, {"model": "contest.contestrank", "pk": 160, "fields": {"user": 224, "contest": 6, "total_submission_number": 27, "total_ac_number": 4, "total_time": 23355, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2204.682858,\"error_number\":2},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":15},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":545.565474,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4974.794231,\"error_number\":2},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9632.463952,\"error_number\":1},\"54\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 161, "fields": {"user": 338, "contest": 6, "total_submission_number": 17, "total_ac_number": 5, "total_time": 53461, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8604.964142,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":14981.973815,\"error_number\":3},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":570.355934,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4216.840434,\"error_number\":0},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11890.99935,\"error_number\":8}}"}}, {"model": "contest.contestrank", "pk": 162, "fields": {"user": 329, "contest": 6, "total_submission_number": 14, "total_ac_number": 4, "total_time": 42853, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":17355.588585,\"error_number\":3},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1206.330547,\"error_number\":1},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9767.306297,\"error_number\":1},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8525.857654,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 163, "fields": {"user": 335, "contest": 6, "total_submission_number": 29, "total_ac_number": 3, "total_time": 30022, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":700.692247,\"error_number\":1},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2647.960233,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12275.418166,\"error_number\":11},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":8}}"}}, {"model": "contest.contestrank", "pk": 164, "fields": {"user": 369, "contest": 6, "total_submission_number": 26, "total_ac_number": 3, "total_time": 24185, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":650.78333,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9669.886275,\"error_number\":1},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12666.210365,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":15}}"}}, {"model": "contest.contestrank", "pk": 165, "fields": {"user": 223, "contest": 6, "total_submission_number": 12, "total_ac_number": 5, "total_time": 44094, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5630.976854,\"error_number\":2},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11202.161672,\"error_number\":1},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":651.485927,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3986.389108,\"error_number\":1},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":15425.022382,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 166, "fields": {"user": 372, "contest": 6, "total_submission_number": 27, "total_ac_number": 3, "total_time": 15912, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":679.179736,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5464.317323,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":8},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8569.064401,\"error_number\":1},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":15}}"}}, {"model": "contest.contestrank", "pk": 167, "fields": {"user": 239, "contest": 6, "total_submission_number": 11, "total_ac_number": 5, "total_time": 44801, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":696.582597,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2661.568789,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":16065.705749,\"error_number\":6},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4531.16373,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":13648.530617,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 168, "fields": {"user": 314, "contest": 6, "total_submission_number": 9, "total_ac_number": 2, "total_time": 7846, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":702.824893,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5944.878821,\"error_number\":1},\"48\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6}}"}}, {"model": "contest.contestrank", "pk": 169, "fields": {"user": 337, "contest": 6, "total_submission_number": 14, "total_ac_number": 5, "total_time": 42187, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":909.449111,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10458.909367,\"error_number\":4},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":711.479141,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9375.628593,\"error_number\":0},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":13534.215126,\"error_number\":2},\"54\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 170, "fields": {"user": 311, "contest": 6, "total_submission_number": 18, "total_ac_number": 2, "total_time": 11823, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1668.867686,\"error_number\":3},\"47\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5355.71263,\"error_number\":1},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5}}"}}, {"model": "contest.contestrank", "pk": 171, "fields": {"user": 292, "contest": 6, "total_submission_number": 29, "total_ac_number": 3, "total_time": 20425, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":718.361424,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6232.243996,\"error_number\":2},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11075.794593,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":24}}"}}, {"model": "contest.contestrank", "pk": 172, "fields": {"user": 310, "contest": 6, "total_submission_number": 24, "total_ac_number": 2, "total_time": 36206, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3949.362098,\"error_number\":12},\"47\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":15457.517436,\"error_number\":2},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7}}"}}, {"model": "contest.contestrank", "pk": 173, "fields": {"user": 350, "contest": 6, "total_submission_number": 18, "total_ac_number": 5, "total_time": 54810, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":758.442059,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4540.335475,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12363.465306,\"error_number\":4},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5860.356697,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":15689.527419,\"error_number\":9}}"}}, {"model": "contest.contestrank", "pk": 174, "fields": {"user": 359, "contest": 6, "total_submission_number": 21, "total_ac_number": 5, "total_time": 17435, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3345.328002,\"error_number\":1},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2925.716762,\"error_number\":2},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":769.721739,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2316.579382,\"error_number\":0},\"50\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":10},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4480.323841,\"error_number\":0},\"54\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 175, "fields": {"user": 250, "contest": 6, "total_submission_number": 13, "total_ac_number": 5, "total_time": 43457, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":770.057632,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7057.22976,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9715.297746,\"error_number\":6},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8100.090297,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8215.675838,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 176, "fields": {"user": 333, "contest": 6, "total_submission_number": 12, "total_ac_number": 4, "total_time": 34446, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":794.953055,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8946.708733,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11970.362756,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7936.725618,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 177, "fields": {"user": 308, "contest": 6, "total_submission_number": 14, "total_ac_number": 3, "total_time": 14924, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1000.820746,\"error_number\":1},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4240.833179,\"error_number\":1},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7284.361416,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 178, "fields": {"user": 288, "contest": 6, "total_submission_number": 16, "total_ac_number": 4, "total_time": 20623, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":831.233487,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2442.902716,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":9},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1747.467088,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12003.404409,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 179, "fields": {"user": 312, "contest": 6, "total_submission_number": 21, "total_ac_number": 5, "total_time": 47202, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2393.829404,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11236.357308,\"error_number\":1},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":926.008562,\"error_number\":2},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6342.027666,\"error_number\":2},\"50\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":13105.915904,\"error_number\":6}}"}}, {"model": "contest.contestrank", "pk": 180, "fields": {"user": 220, "contest": 6, "total_submission_number": 38, "total_ac_number": 3, "total_time": 9265, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":865.789295,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5762.632645,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":10},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2638.24206,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":25}}"}}, {"model": "contest.contestrank", "pk": 181, "fields": {"user": 218, "contest": 6, "total_submission_number": 42, "total_ac_number": 3, "total_time": 47584, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":14700.26939,\"error_number\":2},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":21},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":887.429258,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":15197.660039,\"error_number\":12}}"}}, {"model": "contest.contestrank", "pk": 182, "fields": {"user": 347, "contest": 6, "total_submission_number": 5, "total_ac_number": 1, "total_time": 3812, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1412.697716,\"error_number\":2},\"48\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 183, "fields": {"user": 237, "contest": 6, "total_submission_number": 8, "total_ac_number": 3, "total_time": 13209, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":925.178843,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5297.089113,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6987.553987,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 184, "fields": {"user": 274, "contest": 6, "total_submission_number": 24, "total_ac_number": 5, "total_time": 42147, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1563.444968,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12206.089253,\"error_number\":8},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":933.038579,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2570.450967,\"error_number\":1},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9275.47232,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 185, "fields": {"user": 381, "contest": 6, "total_submission_number": 11, "total_ac_number": 5, "total_time": 46744, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":938.209247,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4673.946162,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":16323.438303,\"error_number\":1},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6851.225494,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10759.677898,\"error_number\":5}}"}}, {"model": "contest.contestrank", "pk": 186, "fields": {"user": 290, "contest": 6, "total_submission_number": 10, "total_ac_number": 5, "total_time": 40465, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1044.53084,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9632.379306,\"error_number\":1},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9058.910108,\"error_number\":4},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2924.195779,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11807.373305,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 187, "fields": {"user": 216, "contest": 6, "total_submission_number": 17, "total_ac_number": 1, "total_time": 5034, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1434.42622,\"error_number\":3},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":13}}"}}, {"model": "contest.contestrank", "pk": 188, "fields": {"user": 253, "contest": 6, "total_submission_number": 11, "total_ac_number": 3, "total_time": 27887, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3248.585382,\"error_number\":1},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7653.759639,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":14586.195191,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5}}"}}, {"model": "contest.contestrank", "pk": 189, "fields": {"user": 301, "contest": 6, "total_submission_number": 17, "total_ac_number": 5, "total_time": 59282, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":16654.493169,\"error_number\":5},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9773.917494,\"error_number\":3},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1091.699973,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7153.216346,\"error_number\":1},\"50\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":13811.802715,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 190, "fields": {"user": 277, "contest": 6, "total_submission_number": 18, "total_ac_number": 2, "total_time": 9198, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1137.629384,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8061.020354,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":8}}"}}, {"model": "contest.contestrank", "pk": 191, "fields": {"user": 363, "contest": 6, "total_submission_number": 31, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":12},\"48\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":18}}"}}, {"model": "contest.contestrank", "pk": 192, "fields": {"user": 214, "contest": 6, "total_submission_number": 13, "total_ac_number": 5, "total_time": 48920, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4433.354607,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8682.532685,\"error_number\":5},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1243.237953,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11267.567801,\"error_number\":0},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":14895.43781,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 193, "fields": {"user": 375, "contest": 6, "total_submission_number": 48, "total_ac_number": 2, "total_time": 24064, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1389.865412,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7075.229746,\"error_number\":13},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":12},\"48\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":10},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":11}}"}}, {"model": "contest.contestrank", "pk": 194, "fields": {"user": 244, "contest": 6, "total_submission_number": 17, "total_ac_number": 2, "total_time": 35808, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10064.668473,\"error_number\":10},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10144.762627,\"error_number\":3},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 195, "fields": {"user": 319, "contest": 6, "total_submission_number": 10, "total_ac_number": 3, "total_time": 24337, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1497.676863,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6703.40915,\"error_number\":1},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":14937.821967,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6}}"}}, {"model": "contest.contestrank", "pk": 196, "fields": {"user": 343, "contest": 6, "total_submission_number": 8, "total_ac_number": 2, "total_time": 9622, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1804.655414,\"error_number\":1},\"47\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6618.145043,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 197, "fields": {"user": 302, "contest": 6, "total_submission_number": 11, "total_ac_number": 4, "total_time": 36713, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1600.943476,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6939.211212,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12631.853015,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":15543.7776,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 198, "fields": {"user": 353, "contest": 6, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 199, "fields": {"user": 354, "contest": 6, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 200, "fields": {"user": 230, "contest": 6, "total_submission_number": 20, "total_ac_number": 2, "total_time": 25231, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6825.712377,\"error_number\":4},\"54\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":13606.285583,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 201, "fields": {"user": 251, "contest": 6, "total_submission_number": 39, "total_ac_number": 5, "total_time": 101346, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9064.251052,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":17544.04884,\"error_number\":11},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2813.387291,\"error_number\":2},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":17394.725239,\"error_number\":16},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":14931.238437,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 202, "fields": {"user": 258, "contest": 6, "total_submission_number": 9, "total_ac_number": 3, "total_time": 23419, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2966.932864,\"error_number\":1},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7667.350395,\"error_number\":0},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11586.354984,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5}}"}}, {"model": "contest.contestrank", "pk": 203, "fields": {"user": 273, "contest": 6, "total_submission_number": 23, "total_ac_number": 7, "total_time": 55406, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3199.289827,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3702.196971,\"error_number\":1},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2290.992017,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2873.304226,\"error_number\":0},\"50\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":16137.927353,\"error_number\":2},\"53\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10867.928944,\"error_number\":7},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4338.03878,\"error_number\":0},\"54\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6}}"}}, {"model": "contest.contestrank", "pk": 204, "fields": {"user": 309, "contest": 6, "total_submission_number": 31, "total_ac_number": 1, "total_time": 2371, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2371.288391,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"48\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":15}}"}}, {"model": "contest.contestrank", "pk": 205, "fields": {"user": 299, "contest": 6, "total_submission_number": 15, "total_ac_number": 3, "total_time": 27849, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":16143.28153,\"error_number\":1},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3004.724723,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7502.204752,\"error_number\":0},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6}}"}}, {"model": "contest.contestrank", "pk": 206, "fields": {"user": 389, "contest": 6, "total_submission_number": 14, "total_ac_number": 4, "total_time": 37822, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3481.19149,\"error_number\":2},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4889.754761,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":13841.11498,\"error_number\":1},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9611.131747,\"error_number\":1},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5}}"}}, {"model": "contest.contestrank", "pk": 207, "fields": {"user": 256, "contest": 6, "total_submission_number": 26, "total_ac_number": 4, "total_time": 52182, "submission_info": "{\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5047.967222,\"error_number\":0},\"49\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":14532.64312,\"error_number\":6},\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3763.005968,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12040.516808,\"error_number\":8},\"53\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7}}"}}, {"model": "contest.contestrank", "pk": 208, "fields": {"user": 387, "contest": 6, "total_submission_number": 5, "total_ac_number": 2, "total_time": 17424, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3721.525431,\"error_number\":0},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10103.260055,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 209, "fields": {"user": 327, "contest": 6, "total_submission_number": 14, "total_ac_number": 2, "total_time": 17208, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3745.559915,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":13463.099908,\"error_number\":0},\"52\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 210, "fields": {"user": 321, "contest": 6, "total_submission_number": 1, "total_ac_number": 1, "total_time": 3939, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3939.539614,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 211, "fields": {"user": 286, "contest": 6, "total_submission_number": 14, "total_ac_number": 2, "total_time": 17763, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5736.233905,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9627.350054,\"error_number\":2},\"48\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 212, "fields": {"user": 270, "contest": 6, "total_submission_number": 13, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":13}}"}}, {"model": "contest.contestrank", "pk": 213, "fields": {"user": 295, "contest": 6, "total_submission_number": 5, "total_ac_number": 2, "total_time": 23318, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8412.832908,\"error_number\":1},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12506.532962,\"error_number\":1},\"48\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 214, "fields": {"user": 352, "contest": 6, "total_submission_number": 14, "total_ac_number": 2, "total_time": 27479, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10661.346027,\"error_number\":1},\"47\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":11},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":15618.238283,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 215, "fields": {"user": 324, "contest": 6, "total_submission_number": 1, "total_ac_number": 1, "total_time": 14373, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":14373.749705,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 216, "fields": {"user": 284, "contest": 6, "total_submission_number": 10, "total_ac_number": 3, "total_time": 50917, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":15014.026789,\"error_number\":0},\"47\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":15136.027439,\"error_number\":0},\"48\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":17167.226089,\"error_number\":3},\"49\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 217, "fields": {"user": 261, "contest": 6, "total_submission_number": 3, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"46\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"48\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 218, "fields": {"user": 1, "contest": 7, "total_submission_number": 2, "total_ac_number": 1, "total_time": 4085, "submission_info": "{\"74\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":2885.265526,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 219, "fields": {"user": 229, "contest": 7, "total_submission_number": 3, "total_ac_number": 2, "total_time": 10974, "submission_info": "{\"75\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":5206.010983,\"error_number\":0},\"74\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4568.167155,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 220, "fields": {"user": 2, "contest": 7, "total_submission_number": 1, "total_ac_number": 1, "total_time": 4746, "submission_info": "{\"74\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4746.175315,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 221, "fields": {"user": 401, "contest": 7, "total_submission_number": 3, "total_ac_number": 2, "total_time": 10443, "submission_info": "{\"76\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"75\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5312.211887,\"error_number\":0},\"74\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5131.486828,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 222, "fields": {"user": 10, "contest": 7, "total_submission_number": 2, "total_ac_number": 2, "total_time": 11210, "submission_info": "{\"75\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6043.975241,\"error_number\":0},\"74\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5167.946242,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 223, "fields": {"user": 243, "contest": 7, "total_submission_number": 2, "total_ac_number": 2, "total_time": 11715, "submission_info": "{\"75\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6521.580831,\"error_number\":0},\"74\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5194.225122,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 224, "fields": {"user": 224, "contest": 7, "total_submission_number": 4, "total_ac_number": 1, "total_time": 5262, "submission_info": "{\"75\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"74\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5262.973794,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 225, "fields": {"user": 338, "contest": 7, "total_submission_number": 2, "total_ac_number": 2, "total_time": 11884, "submission_info": "{\"75\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6350.836765,\"error_number\":0},\"74\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5534.856829,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 226, "fields": {"user": 389, "contest": 7, "total_submission_number": 3, "total_ac_number": 1, "total_time": 5760, "submission_info": "{\"75\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"74\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5760.974894,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 227, "fields": {"user": 322, "contest": 7, "total_submission_number": 3, "total_ac_number": 2, "total_time": 13967, "submission_info": "{\"75\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6757.044392,\"error_number\":0},\"74\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6010.503859,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 228, "fields": {"user": 333, "contest": 7, "total_submission_number": 4, "total_ac_number": 1, "total_time": 10117, "submission_info": "{\"74\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6517.353453,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 229, "fields": {"user": 148, "contest": 8, "total_submission_number": 15, "total_ac_number": 5, "total_time": 17373, "submission_info": "{\"44\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":108.613809,\"error_number\":0},\"64\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":977.699865,\"error_number\":0},\"66\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"70\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8744.447667,\"error_number\":1},\"68\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":3573.756063,\"error_number\":1},\"73\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":1571.568521,\"error_number\":0},\"69\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5}}"}}, {"model": "contest.contestrank", "pk": 230, "fields": {"user": 149, "contest": 8, "total_submission_number": 9, "total_ac_number": 6, "total_time": 32007, "submission_info": "{\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":286.995707,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2900.631005,\"error_number\":0},\"66\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9710.544604,\"error_number\":2},\"70\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7432.630075,\"error_number\":0},\"68\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5583.790989,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2496.510215,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 231, "fields": {"user": 150, "contest": 8, "total_submission_number": 16, "total_ac_number": 6, "total_time": 30707, "submission_info": "{\"71\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":288.918808,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2291.313915,\"error_number\":1},\"72\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"66\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":2721.55183,\"error_number\":2},\"70\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":5459.831151,\"error_number\":0},\"68\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8249.129022,\"error_number\":1},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5699.366679,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 232, "fields": {"user": 153, "contest": 8, "total_submission_number": 18, "total_ac_number": 3, "total_time": 30272, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":14219.619854,\"error_number\":5},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":450.314638,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9603.422658,\"error_number\":0},\"66\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 233, "fields": {"user": 188, "contest": 8, "total_submission_number": 14, "total_ac_number": 6, "total_time": 40189, "submission_info": "{\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":450.540822,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4916.02516,\"error_number\":1},\"72\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12307.690568,\"error_number\":0},\"66\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6673.605314,\"error_number\":5},\"68\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4235.70754,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2008.634828,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 234, "fields": {"user": 156, "contest": 8, "total_submission_number": 10, "total_ac_number": 4, "total_time": 43213, "submission_info": "{\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":478.774407,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9279.809756,\"error_number\":0},\"65\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"66\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"68\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":13020.894133,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":16836.209881,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 235, "fields": {"user": 160, "contest": 8, "total_submission_number": 14, "total_ac_number": 2, "total_time": 7304, "submission_info": "{\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":493.114168,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"65\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"66\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6811.450176,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 236, "fields": {"user": 151, "contest": 8, "total_submission_number": 13, "total_ac_number": 5, "total_time": 28294, "submission_info": "{\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":509.287454,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1718.209144,\"error_number\":1},\"72\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"66\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"70\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11202.118053,\"error_number\":2},\"68\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7160.99123,\"error_number\":1},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2905.553586,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 237, "fields": {"user": 194, "contest": 8, "total_submission_number": 6, "total_ac_number": 5, "total_time": 32786, "submission_info": "{\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":554.045997,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5578.688827,\"error_number\":0},\"66\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":14180.942302,\"error_number\":0},\"70\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"68\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4657.452235,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7817.384738,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 238, "fields": {"user": 152, "contest": 8, "total_submission_number": 15, "total_ac_number": 5, "total_time": 34900, "submission_info": "{\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":773.001395,\"error_number\":1},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1829.281759,\"error_number\":0},\"65\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5},\"66\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11959.463242,\"error_number\":3},\"68\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8504.327126,\"error_number\":1},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5835.2102,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 239, "fields": {"user": 191, "contest": 8, "total_submission_number": 28, "total_ac_number": 6, "total_time": 39706, "submission_info": "{\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":622.41129,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1266.238258,\"error_number\":3},\"65\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":10},\"66\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8253.263009,\"error_number\":0},\"70\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11097.068594,\"error_number\":0},\"68\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10968.487968,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2700.020417,\"error_number\":1},\"72\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":8}}"}}, {"model": "contest.contestrank", "pk": 240, "fields": {"user": 174, "contest": 8, "total_submission_number": 14, "total_ac_number": 2, "total_time": 6909, "submission_info": "{\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6287.666715,\"error_number\":0},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":622.678989,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":10},\"70\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 241, "fields": {"user": 190, "contest": 8, "total_submission_number": 15, "total_ac_number": 8, "total_time": 64995, "submission_info": "{\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":696.996021,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5031.942953,\"error_number\":1},\"65\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":14377.957076,\"error_number\":2},\"66\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7011.918876,\"error_number\":0},\"70\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8742.81698,\"error_number\":0},\"68\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7270.150157,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2449.758571,\"error_number\":1},\"72\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":11019.837716,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 242, "fields": {"user": 178, "contest": 8, "total_submission_number": 17, "total_ac_number": 2, "total_time": 13328, "submission_info": "{\"71\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":714.182389,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":8},\"65\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"66\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"70\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12614.955582,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 243, "fields": {"user": 192, "contest": 8, "total_submission_number": 14, "total_ac_number": 5, "total_time": 59017, "submission_info": "{\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":723.537338,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8925.843368,\"error_number\":5},\"66\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":15578.203956,\"error_number\":2},\"70\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"68\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10436.277985,\"error_number\":1},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":13755.446713,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 244, "fields": {"user": 175, "contest": 8, "total_submission_number": 8, "total_ac_number": 2, "total_time": 14061, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12136.411011,\"error_number\":1},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":725.555012,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"71\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 245, "fields": {"user": 172, "contest": 8, "total_submission_number": 25, "total_ac_number": 2, "total_time": 15142, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":12},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":740.730156,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":14402.717673,\"error_number\":0},\"66\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5}}"}}, {"model": "contest.contestrank", "pk": 246, "fields": {"user": 159, "contest": 8, "total_submission_number": 13, "total_ac_number": 4, "total_time": 35250, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12032.915093,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6594.258487,\"error_number\":4},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":760.826696,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9864.674828,\"error_number\":1},\"69\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 247, "fields": {"user": 189, "contest": 8, "total_submission_number": 20, "total_ac_number": 4, "total_time": 19517, "submission_info": "{\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2675.995917,\"error_number\":1},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":779.652599,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":5433.866558,\"error_number\":0},\"72\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"66\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":9},\"68\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8230.015396,\"error_number\":1},\"69\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 248, "fields": {"user": 187, "contest": 8, "total_submission_number": 8, "total_ac_number": 3, "total_time": 20857, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3830.897965,\"error_number\":1},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":779.753321,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12648.101098,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 249, "fields": {"user": 196, "contest": 8, "total_submission_number": 13, "total_ac_number": 3, "total_time": 22481, "submission_info": "{\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1100.34084,\"error_number\":1},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6695.640825,\"error_number\":4},\"65\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"66\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8686.728479,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 250, "fields": {"user": 180, "contest": 8, "total_submission_number": 17, "total_ac_number": 2, "total_time": 7587, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6751.676196,\"error_number\":0},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":836.955212,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7},\"66\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 251, "fields": {"user": 168, "contest": 8, "total_submission_number": 30, "total_ac_number": 4, "total_time": 40719, "submission_info": "{\"71\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":869.84863,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7105.537675,\"error_number\":3},\"66\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9664.669714,\"error_number\":4},\"69\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":9},\"68\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12281.401208,\"error_number\":2},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 252, "fields": {"user": 158, "contest": 8, "total_submission_number": 15, "total_ac_number": 2, "total_time": 14051, "submission_info": "{\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11870.360626,\"error_number\":0},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":981.469522,\"error_number\":1},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"65\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5},\"66\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 253, "fields": {"user": 184, "contest": 8, "total_submission_number": 10, "total_ac_number": 2, "total_time": 7538, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6614.982523,\"error_number\":0},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":924.706076,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7}}"}}, {"model": "contest.contestrank", "pk": 254, "fields": {"user": 165, "contest": 8, "total_submission_number": 13, "total_ac_number": 2, "total_time": 8211, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7279.579069,\"error_number\":0},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":932.477494,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"65\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 255, "fields": {"user": 164, "contest": 8, "total_submission_number": 15, "total_ac_number": 2, "total_time": 13753, "submission_info": "{\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10204.933045,\"error_number\":1},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1149.354774,\"error_number\":1},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":8},\"65\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"66\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 256, "fields": {"user": 195, "contest": 8, "total_submission_number": 21, "total_ac_number": 4, "total_time": 41857, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4786.484084,\"error_number\":1},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1027.857353,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8427.024081,\"error_number\":0},\"66\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":14417.706649,\"error_number\":10}}"}}, {"model": "contest.contestrank", "pk": 257, "fields": {"user": 171, "contest": 8, "total_submission_number": 10, "total_ac_number": 2, "total_time": 11708, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9448.890368,\"error_number\":1},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1060.302572,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 258, "fields": {"user": 177, "contest": 8, "total_submission_number": 17, "total_ac_number": 2, "total_time": 10459, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9394.160232,\"error_number\":0},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1065.156897,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":8},\"65\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5}}"}}, {"model": "contest.contestrank", "pk": 259, "fields": {"user": 162, "contest": 8, "total_submission_number": 19, "total_ac_number": 2, "total_time": 7322, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4980.550678,\"error_number\":1},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1142.204983,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":9},\"71\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 260, "fields": {"user": 179, "contest": 12, "total_submission_number": 4, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 261, "fields": {"user": 161, "contest": 8, "total_submission_number": 14, "total_ac_number": 3, "total_time": 30562, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12355.223182,\"error_number\":3},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10992.181545,\"error_number\":2},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1215.998825,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5},\"71\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 262, "fields": {"user": 186, "contest": 8, "total_submission_number": 13, "total_ac_number": 3, "total_time": 31449, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":6569.770447,\"error_number\":0},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1239.22127,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":17641.256428,\"error_number\":5}}"}}, {"model": "contest.contestrank", "pk": 263, "fields": {"user": 170, "contest": 8, "total_submission_number": 15, "total_ac_number": 2, "total_time": 16263, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":13783.322198,\"error_number\":1},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1280.677682,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"66\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7}}"}}, {"model": "contest.contestrank", "pk": 264, "fields": {"user": 157, "contest": 8, "total_submission_number": 12, "total_ac_number": 3, "total_time": 22135, "submission_info": "{\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1315.618172,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8988.00333,\"error_number\":0},\"66\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6},\"70\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"68\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11832.539767,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 265, "fields": {"user": 166, "contest": 8, "total_submission_number": 9, "total_ac_number": 2, "total_time": 13698, "submission_info": "{\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":9864.40662,\"error_number\":1},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1434.513264,\"error_number\":1},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3},\"65\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 266, "fields": {"user": 182, "contest": 8, "total_submission_number": 7, "total_ac_number": 2, "total_time": 18202, "submission_info": "{\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1374.456867,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":16828.20892,\"error_number\":0},\"65\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 267, "fields": {"user": 163, "contest": 8, "total_submission_number": 7, "total_ac_number": 3, "total_time": 34080, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":15850.536199,\"error_number\":2},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1735.600604,\"error_number\":1},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12895.51514,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 268, "fields": {"user": 150, "contest": 12, "total_submission_number": 4, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 269, "fields": {"user": 155, "contest": 8, "total_submission_number": 23, "total_ac_number": 4, "total_time": 48870, "submission_info": "{\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1550.906519,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7347.331618,\"error_number\":0},\"72\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":14783.914258,\"error_number\":5},\"71\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11990.627223,\"error_number\":6}}"}}, {"model": "contest.contestrank", "pk": 270, "fields": {"user": 167, "contest": 8, "total_submission_number": 11, "total_ac_number": 2, "total_time": 9735, "submission_info": "{\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":9},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1555.138828,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8180.321096,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 271, "fields": {"user": 154, "contest": 8, "total_submission_number": 16, "total_ac_number": 4, "total_time": 54365, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":15407.353154,\"error_number\":3},\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":15893.84692,\"error_number\":2},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1665.772357,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":11800.729689,\"error_number\":3},\"65\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 272, "fields": {"user": 173, "contest": 8, "total_submission_number": 14, "total_ac_number": 3, "total_time": 27284, "submission_info": "{\"64\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12189.923211,\"error_number\":4},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1730.22535,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":7365.42933,\"error_number\":1},\"65\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"66\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 273, "fields": {"user": 169, "contest": 8, "total_submission_number": 14, "total_ac_number": 2, "total_time": 10528, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1886.079002,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":8642.716468,\"error_number\":0},\"69\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 274, "fields": {"user": 176, "contest": 8, "total_submission_number": 18, "total_ac_number": 2, "total_time": 19850, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":9},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2082.602051,\"error_number\":3},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":12968.596587,\"error_number\":1},\"71\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 275, "fields": {"user": 193, "contest": 8, "total_submission_number": 27, "total_ac_number": 1, "total_time": 1962, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":10},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1962.919031,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":7},\"65\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":8}}"}}, {"model": "contest.contestrank", "pk": 276, "fields": {"user": 153, "contest": 12, "total_submission_number": 4, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 277, "fields": {"user": 179, "contest": 8, "total_submission_number": 11, "total_ac_number": 1, "total_time": 3093, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4},\"73\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3093.145439,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"65\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 278, "fields": {"user": 188, "contest": 12, "total_submission_number": 4, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 279, "fields": {"user": 185, "contest": 8, "total_submission_number": 24, "total_ac_number": 1, "total_time": 6940, "submission_info": "{\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":3340.764214,\"error_number\":3},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":17},\"66\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 280, "fields": {"user": 181, "contest": 8, "total_submission_number": 27, "total_ac_number": 3, "total_time": 41319, "submission_info": "{\"68\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":16815.175493,\"error_number\":5},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":13},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":2607.221193,\"error_number\":0},\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":15897.120906,\"error_number\":0},\"71\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":6}}"}}, {"model": "contest.contestrank", "pk": 281, "fields": {"user": 163, "contest": 12, "total_submission_number": 5, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":5}}"}}, {"model": "contest.contestrank", "pk": 282, "fields": {"user": 1, "contest": 9, "total_submission_number": 5, "total_ac_number": 2, "total_time": 11437, "submission_info": "{\"45\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":4697.854062,\"error_number\":1},\"51\":{\"is_first_ac\":true,\"is_ac\":true,\"ac_time\":3140.622253,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 283, "fields": {"user": 302, "contest": 9, "total_submission_number": 3, "total_ac_number": 1, "total_time": 1730, "submission_info": "{\"55\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2},\"25\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":1730.107254,\"error_number\":0}}"}}, {"model": "contest.contestrank", "pk": 284, "fields": {"user": 174, "contest": 12, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 285, "fields": {"user": 160, "contest": 12, "total_submission_number": 3, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 286, "fields": {"user": 183, "contest": 8, "total_submission_number": 6, "total_ac_number": 2, "total_time": 16428, "submission_info": "{\"73\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":10824.076258,\"error_number\":1},\"44\":{\"is_first_ac\":false,\"is_ac\":true,\"ac_time\":4404.60051,\"error_number\":0},\"64\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 287, "fields": {"user": 152, "contest": 12, "total_submission_number": 3, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 288, "fields": {"user": 158, "contest": 12, "total_submission_number": 2, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":2}}"}}, {"model": "contest.contestrank", "pk": 289, "fields": {"user": 189, "contest": 12, "total_submission_number": 4, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":4}}"}}, {"model": "contest.contestrank", "pk": 290, "fields": {"user": 167, "contest": 12, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 291, "fields": {"user": 157, "contest": 12, "total_submission_number": 3, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 292, "fields": {"user": 194, "contest": 12, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 293, "fields": {"user": 148, "contest": 12, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 294, "fields": {"user": 191, "contest": 12, "total_submission_number": 3, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":3}}"}}, {"model": "contest.contestrank", "pk": 295, "fields": {"user": 1, "contest": 8, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"71\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 296, "fields": {"user": 164, "contest": 12, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 297, "fields": {"user": 156, "contest": 12, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "contest.contestrank", "pk": 298, "fields": {"user": 184, "contest": 12, "total_submission_number": 1, "total_ac_number": 0, "total_time": 0, "submission_info": "{\"78\":{\"is_first_ac\":false,\"is_ac\":false,\"ac_time\":0,\"error_number\":1}}"}}, {"model": "judge_dispatcher.judgeserver", "pk": 1, "fields": {"name": "swjtuacmer", "ip": "172.17.0.2", "port": 8080, "max_instance_number": 4, "used_instance_number": 0, "token": "swjtuacmer", "status": true, "create_time": "2016-12-03T08:32:33.977Z"}}, {"model": "judge_dispatcher.judgeserver", "pk": 2, "fields": {"name": "swjtuacmer", "ip": "172.17.0.7", "port": 8080, "max_instance_number": 1, "used_instance_number": 0, "token": "handsomehow", "status": false, "create_time": "2017-03-20T11:38:57.225Z"}}, {"model": "judge_dispatcher.judgeserver", "pk": 3, "fields": {"name": "judger", "ip": "115.159.121.50", "port": 8085, "max_instance_number": 1, "used_instance_number": 0, "token": "swjtuacmer", "status": false, "create_time": "2017-04-25T09:26:48.340Z"}}, {"model": "judge_dispatcher.judgeserver", "pk": 4, "fields": {"name": "des_gard", "ip": "115.159.121.50", "port": 8085, "max_instance_number": 1, "used_instance_number": 0, "token": "swjtuacmer", "status": false, "create_time": "2017-05-10T05:32:16.159Z"}}, {"model": "auth.permission", "pk": 1, "fields": {"name": "Can add permission", "content_type": 1, "codename": "add_permission"}}, {"model": "auth.permission", "pk": 2, "fields": {"name": "Can change permission", "content_type": 1, "codename": "change_permission"}}, {"model": "auth.permission", "pk": 3, "fields": {"name": "Can delete permission", "content_type": 1, "codename": "delete_permission"}}, {"model": "auth.permission", "pk": 4, "fields": {"name": "Can add group", "content_type": 2, "codename": "add_group"}}, {"model": "auth.permission", "pk": 5, "fields": {"name": "Can change group", "content_type": 2, "codename": "change_group"}}, {"model": "auth.permission", "pk": 6, "fields": {"name": "Can delete group", "content_type": 2, "codename": "delete_group"}}, {"model": "auth.permission", "pk": 7, "fields": {"name": "Can add content type", "content_type": 3, "codename": "add_contenttype"}}, {"model": "auth.permission", "pk": 8, "fields": {"name": "Can change content type", "content_type": 3, "codename": "change_contenttype"}}, {"model": "auth.permission", "pk": 9, "fields": {"name": "Can delete content type", "content_type": 3, "codename": "delete_contenttype"}}, {"model": "auth.permission", "pk": 10, "fields": {"name": "Can add session", "content_type": 4, "codename": "add_session"}}, {"model": "auth.permission", "pk": 11, "fields": {"name": "Can change session", "content_type": 4, "codename": "change_session"}}, {"model": "auth.permission", "pk": 12, "fields": {"name": "Can delete session", "content_type": 4, "codename": "delete_session"}}, {"model": "auth.permission", "pk": 13, "fields": {"name": "Can add user", "content_type": 5, "codename": "add_user"}}, {"model": "auth.permission", "pk": 14, "fields": {"name": "Can change user", "content_type": 5, "codename": "change_user"}}, {"model": "auth.permission", "pk": 15, "fields": {"name": "Can delete user", "content_type": 5, "codename": "delete_user"}}, {"model": "auth.permission", "pk": 16, "fields": {"name": "Can add user profile", "content_type": 6, "codename": "add_userprofile"}}, {"model": "auth.permission", "pk": 17, "fields": {"name": "Can change user profile", "content_type": 6, "codename": "change_userprofile"}}, {"model": "auth.permission", "pk": 18, "fields": {"name": "Can delete user profile", "content_type": 6, "codename": "delete_userprofile"}}, {"model": "auth.permission", "pk": 19, "fields": {"name": "Can add announcement", "content_type": 7, "codename": "add_announcement"}}, {"model": "auth.permission", "pk": 20, "fields": {"name": "Can change announcement", "content_type": 7, "codename": "change_announcement"}}, {"model": "auth.permission", "pk": 21, "fields": {"name": "Can delete announcement", "content_type": 7, "codename": "delete_announcement"}}, {"model": "auth.permission", "pk": 22, "fields": {"name": "Can add group", "content_type": 8, "codename": "add_group"}}, {"model": "auth.permission", "pk": 23, "fields": {"name": "Can change group", "content_type": 8, "codename": "change_group"}}, {"model": "auth.permission", "pk": 24, "fields": {"name": "Can delete group", "content_type": 8, "codename": "delete_group"}}, {"model": "auth.permission", "pk": 25, "fields": {"name": "Can add user group relation", "content_type": 9, "codename": "add_usergrouprelation"}}, {"model": "auth.permission", "pk": 26, "fields": {"name": "Can change user group relation", "content_type": 9, "codename": "change_usergrouprelation"}}, {"model": "auth.permission", "pk": 27, "fields": {"name": "Can delete user group relation", "content_type": 9, "codename": "delete_usergrouprelation"}}, {"model": "auth.permission", "pk": 28, "fields": {"name": "Can add admin group relation", "content_type": 10, "codename": "add_admingrouprelation"}}, {"model": "auth.permission", "pk": 29, "fields": {"name": "Can change admin group relation", "content_type": 10, "codename": "change_admingrouprelation"}}, {"model": "auth.permission", "pk": 30, "fields": {"name": "Can delete admin group relation", "content_type": 10, "codename": "delete_admingrouprelation"}}, {"model": "auth.permission", "pk": 31, "fields": {"name": "Can add join group request", "content_type": 11, "codename": "add_joingrouprequest"}}, {"model": "auth.permission", "pk": 32, "fields": {"name": "Can change join group request", "content_type": 11, "codename": "change_joingrouprequest"}}, {"model": "auth.permission", "pk": 33, "fields": {"name": "Can delete join group request", "content_type": 11, "codename": "delete_joingrouprequest"}}, {"model": "auth.permission", "pk": 34, "fields": {"name": "Can add problem tag", "content_type": 12, "codename": "add_problemtag"}}, {"model": "auth.permission", "pk": 35, "fields": {"name": "Can change problem tag", "content_type": 12, "codename": "change_problemtag"}}, {"model": "auth.permission", "pk": 36, "fields": {"name": "Can delete problem tag", "content_type": 12, "codename": "delete_problemtag"}}, {"model": "auth.permission", "pk": 37, "fields": {"name": "Can add problem", "content_type": 13, "codename": "add_problem"}}, {"model": "auth.permission", "pk": 38, "fields": {"name": "Can change problem", "content_type": 13, "codename": "change_problem"}}, {"model": "auth.permission", "pk": 39, "fields": {"name": "Can delete problem", "content_type": 13, "codename": "delete_problem"}}, {"model": "auth.permission", "pk": 40, "fields": {"name": "Can add submission", "content_type": 14, "codename": "add_submission"}}, {"model": "auth.permission", "pk": 41, "fields": {"name": "Can change submission", "content_type": 14, "codename": "change_submission"}}, {"model": "auth.permission", "pk": 42, "fields": {"name": "Can delete submission", "content_type": 14, "codename": "delete_submission"}}, {"model": "auth.permission", "pk": 43, "fields": {"name": "Can add contest", "content_type": 15, "codename": "add_contest"}}, {"model": "auth.permission", "pk": 44, "fields": {"name": "Can change contest", "content_type": 15, "codename": "change_contest"}}, {"model": "auth.permission", "pk": 45, "fields": {"name": "Can delete contest", "content_type": 15, "codename": "delete_contest"}}, {"model": "auth.permission", "pk": 46, "fields": {"name": "Can add contest problem", "content_type": 16, "codename": "add_contestproblem"}}, {"model": "auth.permission", "pk": 47, "fields": {"name": "Can change contest problem", "content_type": 16, "codename": "change_contestproblem"}}, {"model": "auth.permission", "pk": 48, "fields": {"name": "Can delete contest problem", "content_type": 16, "codename": "delete_contestproblem"}}, {"model": "auth.permission", "pk": 49, "fields": {"name": "Can add contest rank", "content_type": 17, "codename": "add_contestrank"}}, {"model": "auth.permission", "pk": 50, "fields": {"name": "Can change contest rank", "content_type": 17, "codename": "change_contestrank"}}, {"model": "auth.permission", "pk": 51, "fields": {"name": "Can delete contest rank", "content_type": 17, "codename": "delete_contestrank"}}, {"model": "auth.permission", "pk": 52, "fields": {"name": "Can add judge server", "content_type": 18, "codename": "add_judgeserver"}}, {"model": "auth.permission", "pk": 53, "fields": {"name": "Can change judge server", "content_type": 18, "codename": "change_judgeserver"}}, {"model": "auth.permission", "pk": 54, "fields": {"name": "Can delete judge server", "content_type": 18, "codename": "delete_judgeserver"}}, {"model": "auth.permission", "pk": 55, "fields": {"name": "Can add judge waiting queue", "content_type": 19, "codename": "add_judgewaitingqueue"}}, {"model": "auth.permission", "pk": 56, "fields": {"name": "Can change judge waiting queue", "content_type": 19, "codename": "change_judgewaitingqueue"}}, {"model": "auth.permission", "pk": 57, "fields": {"name": "Can delete judge waiting queue", "content_type": 19, "codename": "delete_judgewaitingqueue"}}]